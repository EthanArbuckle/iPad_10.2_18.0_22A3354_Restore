void JsonMapImpl::JsonMapImpl(JsonMapImpl *this)
{
  _BYTE v2[8];
  uint64_t *v3;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v2, 0, 0, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)this, (uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v3, v2[0]);
}

void sub_1D3AC7A4C(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

uint64_t JsonMapImpl::JsonMapImpl(uint64_t a1, _QWORD *a2)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  JsonMapImpl::deserialize((_BYTE *)a1, a2);
  return a1;
}

void sub_1D3AC7B78(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

_QWORD *JsonMapImpl::deserialize(_BYTE *a1, _QWORD *a2)
{
  void *exception;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "Input stream is not valid");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return nlohmann::operator>>(a2, a1);
}

void sub_1D3AC7BF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL JsonMapImpl::getKeys(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8[4];
  unsigned __int8 *v9[4];

  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v9, a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(v9);
  while (1)
  {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v8, a1);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v8);
    result = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(v9, v8);
    if (result)
      break;
    v5 = (__int128 *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(v9);
    v6 = a2[1];
    if (v6 >= a2[2])
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v5);
      v7 = v6 + 24;
    }
    a2[1] = v7;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(v9);
  }
  return result;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1)
{
  nlohmann::detail::exception *exception;
  _QWORD v3[3];

  if (!*a1)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key();
  if (*(_BYTE *)*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(207, (uint64_t)v3, exception);
  }
  return a1[1] + 32;
}

void sub_1D3AC7DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v5;

  if (!*result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++();
  v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    v2 = result[1];
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[3];
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(uint64_t a1, const void **a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "cannot use at() with ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(304, (uint64_t)&v9, exception);
  }
  return std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(*(_QWORD *)(a1 + 8), a2);
}

void sub_1D3AC7F4C(uint64_t a1, std::string *a2, __int128 a3)
{
  __break(1u);
}

void sub_1D3AC7FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1D3AC8048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_1D3AC80D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void JsonMapImpl::getObject(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t *v7;
  _BYTE v8[8];
  uint64_t *v9;

  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v6, v4);
  v5 = operator new();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v5, (uint64_t)v8);
  *a3 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_1D3AC819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v11;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a11);
  MEMORY[0x1D8251A40](v11, 0x1022C40B06DCE69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void JsonMapImpl::setString(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  _BYTE v6[8];
  uint64_t *v7;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v6, a3);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v5, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_1D3AC824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v13, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v13 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)+ 7;
}

void sub_1D3AC837C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void JsonMapImpl::setObject(unsigned __int8 *a1, const void **a2, uint64_t *a3)
{
  uint64_t *v5;
  _BYTE v6[8];
  uint64_t *v7;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v6, *a3);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v5, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_1D3AC8448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::operator>>(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14[20];

  v14[19] = *(void **)MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v9, (uint64_t)v10, 1, 0, (uint64_t)v12);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v12, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v14);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v9);
  return a1;
}

void sub_1D3AC8570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)va2);
  v3 = (va_list)v12;
  if (v12 == (_QWORD *)va1)
  {
    v4 = 4;
    va_copy(v3, va1);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t JsonMapImpl::serialize(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  const std::locale::facet *v3;
  std::locale v5;

  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 4;
  v2 = nlohmann::operator<<(a2, a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1D3AC8670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::locale v22;
  void (***v23[81])(void);

  v23[80] = *(void (****)(void))MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568238;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E9567C00;
  v7[1].__shared_owners_ = (uint64_t)a1;
  v19 = v7;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v23, (uint64_t)&v20, (char)fmtflags, 0);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v23, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v23);
  return a1;
}

void sub_1D3AC8854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
  std::locale::~locale(&a13);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void JsonMap::JsonMap(JsonMap *this)
{
  JsonMapImpl *v2;

  v2 = (JsonMapImpl *)operator new();
  JsonMapImpl::JsonMapImpl(v2);
  *(_QWORD *)this = v2;
}

void sub_1D3AC88D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

uint64_t *JsonMap::JsonMap(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = operator new();
  JsonMapImpl::JsonMapImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_1D3AC8950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

void JsonMap::~JsonMap(uint64_t ***this)
{
  uint64_t **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

BOOL JsonMap::hasKey(uint64_t a1, const void **a2)
{
  return **(_BYTE **)a1 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(*(_QWORD *)(*(_QWORD *)a1 + 8), a2) != 0;
}

BOOL JsonMap::getKeys(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::getKeys(*a1, a2);
}

std::string *JsonMap::getString@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;

  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(*a1, a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, a3);
}

_QWORD *JsonMap::getObject@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  JsonMapImpl::getObject(*a1, a2, &v5);
  result = (_QWORD *)operator new();
  *result = v5;
  *a3 = result;
  return result;
}

void sub_1D3AC8A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10)
{
  uint64_t **v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void JsonMap::setString(unsigned __int8 **a1, const void **a2, uint64_t a3)
{
  JsonMapImpl::setString(*a1, a2, a3);
}

void JsonMap::setObject(unsigned __int8 **a1, const void **a2, uint64_t **a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;

  v3 = *a1;
  v4 = **a3;
  **a3 = 0;
  v6 = (uint64_t **)v4;
  JsonMapImpl::setObject(v3, a2, (uint64_t *)&v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)&v6, v5);
}

void sub_1D3AC8AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10)
{
  uint64_t **v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t JsonMap::serialize(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::serialize(*a1, a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object || m_value.object != nullptr";
      v2 = 18026;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array || m_value.array != nullptr";
      v2 = 18027;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string || m_value.string != nullptr";
      v2 = 18028;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary || m_value.binary != nullptr";
      v2 = 18029;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v25 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (i = v25; v24 != v25; i = v25)
  {
    v12 = *(_BYTE *)(i - 16);
    v11 = i - 16;
    LOBYTE(v22) = v12;
    v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      v13 = v23;
      v14 = v23 + 1;
      v15 = (_QWORD *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(_BYTE *)v16 = *((_BYTE *)v15 + 56);
            *(_QWORD *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((_BYTE *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v25 = v16;
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v9 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v9);
          }
          v15 = v18;
        }
        while (v18 != v14);
        v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_42;
      v20 = (void *)*v19;
      break;
    case 7:
      v19 = *a1;
      v21 = (void *)**a1;
      if (!v21)
        goto LABEL_42;
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1D3AC8F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 16;
    v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v6 = *v5;
      v5 -= 16;
      result = (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      v7 = v4 == v3;
      v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9555648, MEMORY[0x1E0DE42D0]);
}

void sub_1D3AC90A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      v10 = v7 - 16;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      v7 = *((_QWORD *)&v17 + 1) - 16;
      *((_QWORD *)&v17 + 1) -= 16;
      v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t result;

  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    i = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a4, v5);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v4 = *(_BYTE *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  *(_QWORD *)(a1 + 8) = v4 + 16;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1D3AC956C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 16;
    v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      v8 = v5 == a2;
      v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_BYTE *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(_BYTE *a1, int a2)
{
  _QWORD *v3;

  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      goto LABEL_8;
    case 3:
      v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(_QWORD *)a1 = v3;
      break;
    default:
      *(_QWORD *)a1 = 0;
      break;
  }
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1D3AC980C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1D3AC993C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &off_1E9567C30;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x1D825177C]((char *)this + 16, a3);
  return this;
}

void sub_1D3AC99DC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  nlohmann::detail::exception *exception;
  uint64_t v19[2];
  uint64_t v20;
  uint64_t *v21;

  v8 = a2;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = 24 * a3;
    v11 = a2;
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 16) ? *(_QWORD *)(v11 + 16) : v11;
      if (*(_BYTE *)v12 != 2
        || *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) - **(_QWORD **)(v12 + 8) != 32
        || *(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v12, 0) != 3)
      {
        break;
      }
      v11 += 24;
      v10 -= 24;
      if (!v10)
        goto LABEL_10;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v16 = 0;
      else
        v16 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v20, "cannot create object from initializer list");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(301, (uint64_t)&v20, exception);
      }
      if (!v16)
        goto LABEL_24;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_10:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (!v13)
  {
LABEL_24:
    *(_BYTE *)a1 = 2;
    v20 = v8;
    v19[0] = v8 + 24 * a3;
    *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(&v20, v19);
    goto LABEL_25;
  }
LABEL_12:
  *(_BYTE *)a1 = 1;
  v14 = operator new(0x18uLL);
  v14[2] = 0;
  v14[1] = 0;
  *v14 = v14 + 1;
  *(_QWORD *)(a1 + 8) = v14;
  if (a3)
  {
    v15 = 24 * a3;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v8, (uint64_t)&v20);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), *(const void ***)(*v21 + 8), *(__int128 **)(*v21 + 8), *v21 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20);
      v8 += 24;
      v15 -= 24;
    }
    while (v15);
  }
LABEL_25:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1D3AC9D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&__p);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "type_error");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E9567B60;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1D3AC9ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_1D3ACA038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "cannot use operator[] with a numeric argument with ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v9, exception);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_1D3ACA114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_1E9568440[v1];
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, const void **a2, __int128 *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x48uLL);
    v11[1] = a1 + 1;
    std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((uint64_t)(v8 + 4), a3, a4);
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, a3, (const void **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)a3;
  v6 = a1 + 24;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D3ACA6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 24;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1D3ACA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t *v5;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(_BYTE *)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  if (a3 != a5)
  {
    v6 = a3 - 16;
    v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      v9 = v6 == a5;
      v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 4:
      v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(_QWORD *)(a2 + 8));
LABEL_8:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_1D3ACA9AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1D3ACA9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2
    || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), v12 + 4, a5))
    {
      goto LABEL_16;
    }
    return (const void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, v15 + 4))return (const void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D3ACAD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_1D3ACAD84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1D3ACAE70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D3ACAEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1D3ACAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_1D3ACAFFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_1D3ACB058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D3ACB0C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, a2, v2 + 4))
      {
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_begin", "json.hpp", 11268, "m_object != nullptr");
  v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else
    {
      result[3] = 0;
    }
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x8000000000000000;
  if (!a2)
    __assert_rtn("iter_impl", "json.hpp", 11182, "m_object != nullptr");
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_end", "json.hpp", 11305, "m_object != nullptr");
  v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((_QWORD *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((_QWORD *)v1 + 1) + 8);
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(212, (uint64_t)v8, exception);
  }
  if (!v2)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>();
  v3 = *v2;
  if (v3 == 2)
  {
    v4 = a1[2];
    v5 = a2[2];
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    v5 = a2[1];
  }
  else
  {
    v4 = a1[3];
    v5 = a2[3];
  }
  return v4 == v5;
}

void sub_1D3ACB3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E9567BD8;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1D3ACB54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1D3ACB68C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1D3ACB7A0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "out_of_range");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E9567BB0;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1D3ACBB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::out_of_range::~out_of_range(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9555650, MEMORY[0x1E0DE42E0]);
}

void sub_1D3ACBC7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be string, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(302, (uint64_t)&v9, exception);
  }
  return std::string::operator=(this, *(const std::string **)(a1 + 8));
}

void sub_1D3ACBDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::default_delete<JsonMapImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 1, *(unsigned __int8 *)a2);
    JUMPOUT(0x1D8251A40);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D3ACBF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a5, a1, (uint64_t)v11, a3, a4);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1D3ACC0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, _BYTE *a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  _BYTE v16[8];
  uint64_t *v17;
  unsigned __int8 v18[8];
  uint64_t *v19;
  _BYTE v20[8];
  uint64_t *v21;
  void *v22[2];
  char v23;
  std::string __p;
  __int128 v25;
  uint64_t v26;
  std::exception v27;
  _BYTE v28[24];
  std::string v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v30, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v32, (uint64_t)a3, (uint64_t)v30, *(_BYTE *)(a1 + 184));
    v6 = v31;
    if (v31 == v30)
    {
      v7 = 4;
      v6 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_21;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_21:
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v32);
    if (a2)
    {
      v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
      *(_DWORD *)(a1 + 32) = v12;
      if (v12 != 15)
      {
        v13 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v29);
        v25 = *(_OWORD *)(a1 + 72);
        v26 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(v22, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v22, &__p);
        v20[0] = 0;
        v21 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v25, (uint64_t)&__p, (nlohmann::detail::exception *)&v27);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v32, v13, (uint64_t)&v29, (const nlohmann::detail::parse_error *)&v27);
        v27.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v28);
        std::exception::~exception(&v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v23 < 0)
          operator delete(v22[0]);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
    }
    if (v37)
    {
      v18[0] = 9;
      v19 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v32);
      return;
    }
    if (*a3 == 9)
    {
      v16[0] = 0;
      v17 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    }
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v32);
    goto LABEL_34;
  }
  v8 = *(_BYTE *)(a1 + 184);
  v32 = a3;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v36 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v32, (uint64_t)a3);
  if (a2)
  {
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      v10 = *(_QWORD *)(a1 + 72);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v29);
      v25 = *(_OWORD *)(a1 + 72);
      v26 = *(_QWORD *)(a1 + 88);
      std::string::basic_string[abi:ne180100]<0>(v22, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v22, &__p);
      v20[0] = 0;
      v21 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v25, (uint64_t)&__p, (nlohmann::detail::exception *)&v27);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v32, v10, (uint64_t)&v29, (const nlohmann::detail::parse_error *)&v27);
      v27.__vftable = (std::exception_vtbl *)&off_1E9567C30;
      MEMORY[0x1D82517A0](v28);
      std::exception::~exception(&v27);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  v11 = v35;
  if (v35)
  {
    v14[0] = 9;
    v15 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
  }
  if ((_QWORD)v33)
  {
    *((_QWORD *)&v33 + 1) = v33;
    operator delete((void *)v33);
  }
  if (!v11)
LABEL_34:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a3);
}

void sub_1D3ACC594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  void *v50;

  a33.__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](v47 + 16);
  std::exception::~exception(&a33);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a43 < 0)
    operator delete(a38);
  v50 = *(void **)(v48 - 200);
  if (v50)
  {
    *(_QWORD *)(v48 - 192) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, __int8 a4, char a5)
{
  uint64_t v9;
  int64x2_t *v10;

  v9 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
  v10 = (int64x2_t *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(v9 + 56) = a5;
  *(_DWORD *)(v9 + 60) = -1;
  *(_BYTE *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = "";
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 176) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  v10[9].i8[0] = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v10);
  return a1;
}

void sub_1D3ACC844(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point()
{
  lconv *v0;

  v0 = localeconv();
  if (!v0)
    __assert_rtn("get_decimal_point", "json.hpp", 6346, "loc != nullptr");
  if (v0->decimal_point)
    return *v0->decimal_point;
  else
    return 46;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(int64x2_t *this)
{
  int v2;
  uint64_t result;
  int *v6;
  int64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  _DWORD v12[2];
  int v13;

  if (this[2].i64[0]
    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    do
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v2 = this[1].i32[1];
    }
    while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    while (this[1].i8[0])
    {
      if (v2 != 47)
        break;
      if (!nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(this))
        return 14;
      do
      {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
        v2 = this[1].i32[1];
      }
      while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    }
    if (v2 <= 90)
    {
      switch(v2)
      {
        case '"':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
          break;
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case '.':
        case '/':
          goto LABEL_46;
        case ',':
          result = 13;
          break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
          break;
        case ':':
          result = 12;
          break;
        default:
          if ((v2 + 1) >= 2)
            goto LABEL_46;
          result = 15;
          break;
      }
      return result;
    }
    if (v2 <= 109)
    {
      switch(v2)
      {
        case '[':
          return 8;
        case ']':
          return 10;
        case 'f':
          qmemcpy(v12, "false", 5);
          v6 = v12;
          v7 = this;
          v8 = 5;
          v9 = 2;
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
    else if (v2 > 122)
    {
      if (v2 == 123)
        return 9;
      if (v2 == 125)
        return 11;
    }
    else
    {
      if (v2 == 110)
      {
        v11 = 1819047278;
        v6 = &v11;
        v7 = this;
        v8 = 4;
        v9 = 3;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
      if (v2 == 116)
      {
        v13 = 1702195828;
        v6 = &v13;
        v7 = this;
        v8 = 4;
        v9 = 1;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
LABEL_46:
    v10 = "invalid literal";
  }
  else
  {
    v10 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
  }
  this[6].i64[1] = (uint64_t)v10;
  return 14;
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(int64x2_t *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(int64x2_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  const char *v6;

  v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
  if (v2 == 47)
  {
    do
    {
      do
        v4 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1)
           + 1;
      while (v4 >= 0xF);
    }
    while (((0x4803u >> v4) & 1) == 0);
    return 1;
  }
  else
  {
    if (v2 == 42)
    {
      do
      {
        while (1)
        {
          v3 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
          if (v3 != 42)
            break;
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 47)
            return 1;
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
        }
      }
      while ((v3 + 1) >= 2);
      v6 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v6 = "invalid comment; expecting '/' or '*' after '/'";
    }
    result = 0;
    a1[6].i64[1] = (uint64_t)v6;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(int64x2_t *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;

  if (*a2 != this[1].u8[4])
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  if (a3 >= 2)
  {
    v6 = a3 - 1;
    v7 = a2 + 1;
    while (1)
    {
      v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v9 = *v7++;
      if (v9 != v8)
        break;
      if (!--v6)
        return a4;
    }
    this[6].i64[1] = (uint64_t)"invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  int v2;
  uint64_t result;
  const char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  unsigned int codepoint;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 20) != 34)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  while (2)
  {
    while (2)
    {
      v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         + 1;
      result = 4;
      v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          v5 = *(_DWORD *)(a1 + 20);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '"':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(_QWORD *)&v14 = 0xBF00000080;
          v6 = a1;
          v7 = 2;
          goto LABEL_19;
        case 225:
          v8 = xmmword_1D3BD3B20;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          v8 = xmmword_1D3BD3B10;
          goto LABEL_7;
        case 238:
          v8 = xmmword_1D3BD3B00;
LABEL_7:
          v14 = v8;
          v6 = a1;
          v7 = 4;
          goto LABEL_19;
        case 241:
          v15 = 0xBF00000080;
          v9 = &xmmword_1D3BD30CC;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          v15 = 0xBF00000080;
          v9 = &xmmword_1D3BD30E4;
          goto LABEL_18;
        case 245:
          v15 = 0xBF00000080;
          v9 = &xmmword_1D3BD30FC;
LABEL_18:
          v14 = *v9;
          v6 = a1;
          v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14;
          continue;
        default:
          v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (codepoint == -1)
          goto LABEL_85;
        v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000)
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 117)
        {
LABEL_86:
          v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55)
            goto LABEL_86;
          v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(_QWORD *)(a1 + 104) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102)
            goto LABEL_82;
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  int v2;
  std::string *v3;
  int v4;
  std::string *v5;
  int v6;
  int v7;
  std::string *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *__endptr;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      v4 = 5;
    }
    else
    {
      if (v2 != 45)
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
      if ((v13 - 49) < 9)
      {
        v2 = *(_DWORD *)(a1 + 20);
        v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v4 = 6;
    }
    v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if (v15 == 101 || v15 == 69)
    {
      v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }
    if (v15 != 46)
      goto LABEL_40;
    v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 136));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
       - 48 > 9)
    {
      v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(_BYTE *)(a1 + 20));
    v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v7 - 48) < 0xA)
    {
      v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 20));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(_QWORD *)(a1 + 104) = v14;
    return 14;
  }
  v3 = (std::string *)(a1 + 80);
  v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  v5 = (std::string *)(a1 + 80);
  while (1)
  {
    v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v6 - 48) >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  }
  if (v6 == 46)
    goto LABEL_34;
  if (v6 == 69 || v6 == 101)
    goto LABEL_9;
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    v21 = (const char **)(a1 + 80);
    v22 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v22 = *v21;
    v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v21 = *(const char ***)(a1 + 80);
      v24 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v21 + v24)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 112) = v23;
      return 6;
    }
  }
  else
  {
    v17 = (const char **)(a1 + 80);
    v18 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v18 = *v17;
    v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v17 = *(const char ***)(a1 + 80);
      v20 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v17 + v20)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 120) = v19;
      return 5;
    }
  }
LABEL_14:
  v9 = (const char **)(a1 + 80);
  v10 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v10 = *v9;
  *(double *)(a1 + 128) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 103) < 0)
  {
    v9 = *(const char ***)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 103);
  }
  if (__endptr != (char *)v9 + v11)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(int64x2_t *this)
{
  __int32 character;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  this[2] = vaddq_s64(this[2], vdupq_n_s64(1uLL));
  if (this[1].i8[8])
  {
    this[1].i8[8] = 0;
    character = this[1].i32[1];
  }
  else
  {
    character = nlohmann::detail::input_stream_adapter::get_character((nlohmann::detail::input_stream_adapter *)this);
    this[1].i32[1] = character;
  }
  if (character == -1)
    return 0xFFFFFFFFLL;
  v4 = (_BYTE *)this[4].i64[0];
  v3 = this[4].u64[1];
  if ((unint64_t)v4 >= v3)
  {
    v6 = this[3].i64[1];
    v7 = &v4[-v6];
    v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = v3 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (uint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = (char *)(v11 + v10);
    v7[v11] = character;
    v5 = (uint64_t)&v7[v11 + 1];
    if (v4 == (_BYTE *)v6)
    {
      v11 += (uint64_t)v7;
    }
    else
    {
      v13 = &v4[~v6];
      do
      {
        v14 = *--v4;
        (v13--)[v11] = v14;
      }
      while (v4 != (_BYTE *)v6);
      v4 = (_BYTE *)this[3].i64[1];
    }
    this[3].i64[1] = v11;
    this[4].i64[0] = v5;
    this[4].i64[1] = (uint64_t)v12;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = character;
    v5 = (uint64_t)(v4 + 1);
  }
  this[4].i64[0] = v5;
  result = this[1].u32[1];
  if ((_DWORD)result == 10)
  {
    v16 = this[3].i64[0] + 1;
    this[2].i64[1] = 0;
    this[3].i64[0] = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(_QWORD *)(result + 32);
  if (v2 || (v1 = (_QWORD *)(result + 48), (v2 = *(_QWORD *)(result + 48)) != 0))
    *v1 = v2 - 1;
  if (*(_DWORD *)(result + 20) != -1)
  {
    v3 = *(_QWORD *)(result + 64);
    if (*(_QWORD *)(result + 56) == v3)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget();
    *(_QWORD *)(result + 64) = v3 - 1;
  }
  return result;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t result;
  std::ios_base *v5;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    if ((_DWORD)result == -1)
    {
      v5 = (std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v9 + 1;
    *(_QWORD *)(a1 + 72) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int32 v5;
  __int32 v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[1].i32[1] != 117)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  v2 = 0;
  LODWORD(v3) = 0;
  v8 = xmmword_1D3BD3B30;
  do
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    v5 = this[1].i32[1];
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5)
          return 0xFFFFFFFFLL;
        v6 = v5 - 87;
      }
      else
      {
        v6 = v5 - 55;
      }
    }
    v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    v8 = *(_DWORD *)(a1 + 20);
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  int64x2_t *v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;
  std::string v35;
  std::string __p;
  void *v37[2];
  std::string::size_type v38;
  std::exception v39;
  _BYTE v40[24];
  std::string v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v4 = (__int128 *)(a1 + 120);
  v5 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v39.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v39.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 3:
        v39.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v39, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v39.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 6:
        v39.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v39.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v39, 0);
          goto LABEL_19;
        }
        v28 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v35);
        v29 = std::string::insert(&v35, 0, "number overflow parsing '");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&__p, "'");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v38 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)v37 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v37, (nlohmann::detail::exception *)&v39);
        v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v28, (uint64_t)&v41, (const nlohmann::detail::out_of_range *)&v39);
        v39.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
        if (SHIBYTE(v38) < 0)
          operator delete(v37[0]);
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v39.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56;
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_59;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12)
            goto LABEL_60;
          LOBYTE(v39.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        v9 = v43;
        if (!v43)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if (((*(_QWORD *)&v42[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_36;
            if (v10 != 10)
            {
              v22 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
              *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
              v38 = *(_QWORD *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v35, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v35, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
              v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v22, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2))
              goto LABEL_56;
            v11 = v43;
            if (!v43)
            {
              v24 = 10820;
              goto LABEL_63;
            }
LABEL_30:
            v9 = v11 - 1;
            v43 = v9;
            if (!v9)
              goto LABEL_43;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v25 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
            *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
            v38 = *(_QWORD *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v35, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v35, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
            v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v25, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2))
            goto LABEL_56;
          v11 = v43;
          if (!v43)
          {
            v24 = 10874;
LABEL_63:
            __assert_rtn("sax_parse_internal", "json.hpp", v24, "!states.empty()");
          }
          goto LABEL_30;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          v26 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
          *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
          v38 = *(_QWORD *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v35, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v35, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
          v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        v27 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v35, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_61:
        v17 = v23;
        v39.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
LABEL_44:
        if (v42)
          operator delete(v42);
        return v17;
      case 0xE:
        v19 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v19, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
        goto LABEL_49;
      default:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_49:
        v17 = v20;
        v39.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33);
        goto LABEL_50;
    }
  }
}

void sub_1D3ACE384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::exception a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;

  a31.__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](v31 + 16);
  std::exception::~exception(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  v34 = *(void **)(v32 - 88);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  char __str[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v7 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1D3ACE634(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  void *__p[2];
  unsigned __int8 v28;
  std::string v29;
  void *v30;
  char v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  int64_t v38;

  std::string::basic_string[abi:ne180100]<0>(&v30, "parse_error");
  nlohmann::detail::exception::name(a1, &v32);
  v8 = std::string::append(&v32, "parse error");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v29;
  else
    v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v33, (const std::string::value_type *)v10, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v34, ": ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v28 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v28 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v35, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::string::append(&v36, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v38 = v23->__r_.__value_.__r.__words[2];
  v37 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30);
  v25 = *a2;
  if (v38 >= 0)
    v26 = (const char *)&v37;
  else
    v26 = (const char *)v37;
  nlohmann::detail::exception::exception(a4, a1, v26);
  *(_QWORD *)a4 = &off_1E9567B88;
  *((_QWORD *)a4 + 4) = v25;
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
}

void sub_1D3ACE894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a4, "- ");
  v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 144));
    v14 = std::string::append(&v36, "; last read: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2)
      return;
    goto LABEL_50;
  }
  v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2)
    return;
LABEL_50:
  v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1D3ACEC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::~parse_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::exception_vtbl *v5;
  int64x2_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t *v36;
  std::string v37;
  std::string __p;
  void *v39[2];
  std::string::size_type v40;
  std::exception v41;
  _BYTE v42[24];
  std::string v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v5 = (std::exception_vtbl *)(a1 + 120);
  v6 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v41.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v41, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v41.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v41, a3);
        goto LABEL_17;
      case 3:
        v41.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v41, a3);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v41.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v41, a3);
        goto LABEL_17;
      case 6:
        v41.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v41, a3);
        goto LABEL_17;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v41.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v41, a3);
          goto LABEL_17;
        }
        v30 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v37);
        v31 = std::string::insert(&v37, 0, "number overflow parsing '");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = std::string::append(&__p, "'");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v40 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)v39 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v39, (nlohmann::detail::exception *)&v41);
        v19 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v30, (uint64_t)&v43, (const nlohmann::detail::out_of_range *)&v41);
        v41.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v35);
        if (SHIBYTE(v40) < 0)
          operator delete(v39[0]);
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_56;
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
          goto LABEL_12;
        LOBYTE(v41.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v44, &v41);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_56:
          v19 = 0;
          goto LABEL_37;
        }
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_51;
          v17 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
          v41.__vftable = v5;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 7);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_54;
          LOBYTE(v41.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v44, &v41);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        v9 = v45;
        if (!v45)
        {
LABEL_36:
          v19 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if (((*(_QWORD *)&v44[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_31;
            if (v10 != 10)
            {
              v24 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
              *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
              v40 = *(_QWORD *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v37, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v37, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
              v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v24, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
              goto LABEL_55;
            }
            a2[2] -= 8;
            v11 = v45;
            if (!v45)
            {
              v26 = 10820;
              goto LABEL_53;
            }
LABEL_26:
            v9 = v11 - 1;
            v45 = v9;
            if (!v9)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v27 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
            *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
            v40 = *(_QWORD *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v37, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v37, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
            v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
            goto LABEL_55;
          }
          a2[2] -= 8;
          v11 = v45;
          if (!v45)
          {
            v26 = 10874;
LABEL_53:
            __assert_rtn("sax_parse_internal", "json.hpp", v26, "!states.empty()");
          }
          goto LABEL_26;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          v28 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
          *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
          v40 = *(_QWORD *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v37, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v37, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
          v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v28, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
          goto LABEL_55;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
        v41.__vftable = v5;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 7);
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          goto LABEL_32;
        }
LABEL_54:
        v29 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v37, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v29, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
LABEL_55:
        v19 = v25;
        v41.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v35);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
LABEL_37:
        if (v44)
          operator delete(v44);
        return v19;
      case 0xE:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v37, &__p);
        LOBYTE(v35) = 0;
        v36 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
        goto LABEL_42;
      default:
        v23 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v37, &__p);
        LOBYTE(v35) = 0;
        v36 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v23, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
LABEL_42:
        v19 = v22;
        v41.__vftable = (std::exception_vtbl *)&off_1E9567C30;
        MEMORY[0x1D82517A0](v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35);
        goto LABEL_43;
    }
  }
}

void sub_1D3ACF6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::exception a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;

  a31.__vftable = (std::exception_vtbl *)&off_1E9567C30;
  MEMORY[0x1D82517A0](v31 + 16);
  std::exception::~exception(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  v34 = *(void **)(v32 - 104);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  char v8;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(_BYTE *)(a1 + 136) = 9;
  *(_BYTE *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_1D3ACF974(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v3;
  uint64_t **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  v8 = (_QWORD *)v1[15];
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = (void *)v1[7];
  if (v11)
    operator delete(v11);
  if (*v2)
    operator delete(*v2);
  v12 = *v5;
  if (*v5)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D3ACFB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_1D3BD3AE8[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive object size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1D3ACFFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 *v12[4];
  unsigned __int8 *v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t *v17;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(_QWORD *)(a1[2] - 8), (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
  }
  v4 = a1[1];
  v3 = a1[2];
  if (v4 == v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  v5 = a1[5];
  if (!v5)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  a1[2] = v3 - 8;
  a1[5] = v5 - 1;
  if (v4 != v3 - 8)
  {
    v6 = *(unsigned __int8 **)(v3 - 16);
    if (v6)
    {
      if (*v6 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(&v13, (uint64_t)v6);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(&v13);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(_QWORD *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v13) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v13);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(_QWORD *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
            {
              return 1;
            }
          }
          v7 = *(unsigned __int8 **)(a1[2] - 8);
          v9 = v13;
          v10 = v14;
          v11 = v15;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v7, &v9, v12);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  _BYTE v7[8];
  uint64_t *v8;
  char v9;
  _BYTE v10[8];
  uint64_t *v11;
  __int128 *v12;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v10, (uint64_t)a2);
  v9 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v9);
  if (v9 && *(_QWORD *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)(a1 + 17));
    v4 = *(uint64_t ***)(*(_QWORD *)(a1[2] - 8) + 8);
    v12 = a2;
    v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    a1[10] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)(v5 + 7), (uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
  return 1;
}

void sub_1D3AD0288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, uint64_t *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_1D3BD3AE8[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive array size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1D3AD04A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t *v10;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(_QWORD *)(a1[2] - 8), (uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v5 = a1[1];
  v4 = a1[2];
  if (v5 == v4)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  v6 = a1[5];
  if (!v6)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  a1[2] = v4 - 8;
  a1[5] = v6 - 1;
  if (v5 == v4 - 8)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
    v7 = *(_QWORD *)(v4 - 16);
    if (*(_BYTE *)v7 == 2)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(_QWORD *)(v7 + 8), *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) - 16);
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  _BYTE v20[8];
  uint64_t *v21;
  _BYTE v22[8];
  uint64_t *v23;
  _BYTE v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v25, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1D3AD0A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  v3 = *result;
  if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    return v4 + 56;
  }
  else if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_1D3AD0B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 **v6;
  int v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v19;
  nlohmann::detail::exception *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;

  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(202, (uint64_t)&v25, exception);
  }
  v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v6);
  v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[3])
    {
      v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        v10 = *v8;
LABEL_13:
        operator delete(v10);
        v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    v15 = (uint64_t **)*((_QWORD *)a1 + 1);
    v16 = (uint64_t *)a2[1];
    v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v26 = v22->__r_.__value_.__r.__words[2];
      v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(307, (uint64_t)&v25, v20);
    }
    v11 = *((_QWORD *)a1 + 1);
    v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(_QWORD *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_1D3AD0E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE v8[8];
  uint64_t *v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8[0] = *(_BYTE *)v5;
      v9 = *(uint64_t **)(v5 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a4, (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      a4 += 16;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

nlohmann::detail::out_of_range *nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2)
{
  *(_QWORD *)this = &off_1E9567C30;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x1D8251794]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_1E9567BB0;
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 7;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD1634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = (uint64_t *)*a2;
    v24[0] = 4;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD18FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v17;
  int v18;
  _BYTE v19[8];
  uint64_t *v20;
  _BYTE v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v23[0] = 0;
    v24 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        v24 = 0;
        v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v13 = a1[8];
          if (v13)
          {
            v14 = v13 - 1;
            v15 = *(_QWORD *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if (((v15 >> v14) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v19[0] = v23[0];
              v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              v24 = 0;
              v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v17 = "!key_keep_stack.empty()";
          v18 = 6092;
        }
        else
        {
          v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD1BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 5;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v17;
  int v18;
  _BYTE v19[8];
  uint64_t *v20;
  _BYTE v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        v24 = 0;
        v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v13 = a1[8];
          if (v13)
          {
            v14 = v13 - 1;
            v15 = *(_QWORD *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if (((v15 >> v14) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v19[0] = v23[0];
              v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              v24 = 0;
              v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v17 = "!key_keep_stack.empty()";
          v18 = 6092;
        }
        else
        {
          v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD2128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 6;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_1D3AD23F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

nlohmann::detail::parse_error *nlohmann::detail::parse_error::parse_error(nlohmann::detail::parse_error *this, const nlohmann::detail::parse_error *a2)
{
  *(_QWORD *)this = &off_1E9567C30;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x1D8251794]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_1E9567B88;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1D3AD25B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10)
    return "unknown token";
  else
    return off_1E9568490[a1];
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 1;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_1D3BD3AE8[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive object size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_1D3AD2888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 2;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_1D3BD3AE8[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive array size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_1D3AD2AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  _BYTE v13[8];
  uint64_t *v14;
  _BYTE v15[8];
  uint64_t *v16;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = *a2;
    v15[0] = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v16, v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v7, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v7, a2);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v12 = *a2;
      v13[0] = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v14, v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;

  v4 = *a2;
  v3 = *(_BYTE **)(a1 + 8);
  *v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(_QWORD *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_1D3AD2CD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[16 * v9];
  v12 = *a2;
  *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1D3AD2DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 7;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 7;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 7;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 7;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1D3AD302C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 4;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 4;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 4;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 4;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1D3AD329C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t *v12;
  _BYTE v13[8];
  uint64_t *v14;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v13[0] = 0;
    v14 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v7);
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      v11[0] = 0;
      v12 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = a1[2] - v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v13[4] = a1 + 2;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v5, v7);
  v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_1D3AD34D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 5;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 5;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 5;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 5;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1D3AD3748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  _BYTE v8[8];
  uint64_t *v9;
  _BYTE v10[8];
  uint64_t *v11;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v10, a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    return *a1;
  }
  else
  {
    v5 = *(uint64_t ***)(v4 - 8);
    v6 = *(unsigned __int8 *)v5;
    if (v6 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v5[1], a2);
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v8, a2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[16 * v9];
    v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v16, a2);
    v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1D3AD3934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 6;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 6;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 6;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 6;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1D3AD3BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(_QWORD *)this)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24)), *(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  void (**v12)(void);
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(void);
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t *v30;
  _QWORD **v31;
  uint64_t (*v32)(void);
  void (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t (***v38)(void);
  _QWORD **v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  _QWORD **v63;
  uint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;

  switch(*(_BYTE *)a2)
  {
    case 0:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      v12 = **a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }
      if (a3)
      {
        v12[1]();
        v13 = a6 + a5;
        v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v15 = (unint64_t)a1[77];
          if (v15 >= v13)
            goto LABEL_7;
        }
        else
        {
          v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            v16 = *(_QWORD **)(a2 + 8);
            v17 = (_QWORD *)*v16;
            if (v16[2] == 1)
            {
              v18 = (_QWORD *)*v16;
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v67 = (_QWORD **)*v14;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v68 = (_QWORD *)v17[1];
                if (v68)
                {
                  do
                  {
                    v18 = v68;
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    v18 = (_QWORD *)v17[2];
                    v50 = *v18 == (_QWORD)v17;
                    v17 = v18;
                  }
                  while (!v50);
                }
                ++v66;
                v16 = *(_QWORD **)(a2 + 8);
                v17 = v18;
              }
              while (v66 < v16[2] - 1);
            }
            v69 = v16 + 1;
            if (v18 == v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v70 = (_QWORD *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              v73 = v18;
              do
              {
                v71 = (_QWORD *)v73[2];
                v50 = *v71 == (_QWORD)v73;
                v73 = v71;
              }
              while (!v50);
            }
            if (v71 != v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v74 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v74 = (_QWORD **)*v14;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*v12)();
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(_QWORD **)v45;
      if (*(_QWORD *)(v45 + 16) != 1)
      {
        v47 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v48 = (_QWORD *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v49[2];
              v50 = *v46 == (_QWORD)v49;
              v49 = v46;
            }
            while (!v50);
          }
          ++v47;
          v45 = *(_QWORD *)(a2 + 8);
        }
        while (v47 < *(_QWORD *)(v45 + 16) - 1);
      }
      v51 = (_QWORD *)(v45 + 8);
      if (v46 == v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      v52 = (_QWORD *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        v72 = v46;
        do
        {
          v53 = (_QWORD *)v72[2];
          v50 = *v53 == (_QWORD)v72;
          v72 = v53;
        }
        while (!v50);
      }
      if (v53 != v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
LABEL_109:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      v19 = *(uint64_t **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = **a1;
      if (v20 == v21)
      {
        v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }
      if (a3)
      {
        v22[1]();
        v23 = a6 + a5;
        v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v25 = (unint64_t)a1[77];
          if (v25 >= v23)
            goto LABEL_13;
        }
        else
        {
          v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            v26 = *(uint64_t **)(a2 + 8);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v29 = (_QWORD **)*v24;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v29, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v28, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v28 += 16;
                v30 = *(uint64_t **)(a2 + 8);
                v27 = v30[1];
              }
              while (v28 != v27 - 16);
              v28 = *v30;
            }
            if (v28 == v27)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v31 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v31 = (_QWORD **)*v24;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v31, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            if (*((char *)a1 + 631) < 0)
              v24 = (_QWORD *)*v24;
            ((void (*)(void (***)(void), _QWORD *, _QWORD))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }
      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      v56 = *v54;
      v55 = v54[1];
      if (v56 == v55 - 16)
      {
        v57 = v56;
      }
      else
      {
        v57 = v56;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v57 += 16;
          v58 = *(uint64_t **)(a2 + 8);
          v55 = v58[1];
        }
        while (v57 != v55 - 16);
        v56 = *v58;
      }
      if (v56 == v55)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
LABEL_95:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 6:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        v35 = (a6 + a5);
        v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }
        else
        {
          v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), _QWORD **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                v62 = *v61++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v61 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v61);
          }
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v63 = a1 + 76;
          if (*((char *)a1 + 631) < 0)
            v63 = (_QWORD **)*v36;
          ((void (*)(void (***)(void), _QWORD **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          v64 = *(_QWORD *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25))
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          else
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }
LABEL_62:
        v39 = (_QWORD **)*v36;
        goto LABEL_63;
      }
      v34();
      v40 = *(unsigned __int8 ***)(a2 + 8);
      v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          v43 = *v42++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v41 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v42);
      }
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      v44 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
  JUMPOUT(0x1D8251A40);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  lconv *v7;
  char *thousands_sep;
  char *decimal_point;
  int8x16_t *v10;
  int8x16_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = localeconv();
  *(_QWORD *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  v10 = (int8x16_t *)operator new(0x208uLL);
  *(_QWORD *)(a1 + 608) = v10;
  *(_QWORD *)(a1 + 624) = 0x8000000000000208;
  v11 = vdupq_n_s8(a3);
  *(_QWORD *)(a1 + 616) = 512;
  *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1D3AD4848(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  int v26;
  nlohmann::detail::exception *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t *v36;
  nlohmann::detail::exception *v37;
  _BYTE v38[16];
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  std::string::size_type v43;
  char __str[8];
  std::string::size_type v45;
  char v46;
  char v47;
  unsigned int v48[3];

  v47 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v48[0] = 0;
  v12 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v13 = (uint64_t *)*a2;
    else
      v13 = a2;
    v14 = *((unsigned __int8 *)v13 + v8);
    result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v47, v48, v14);
    if ((_DWORD)result == 1)
    {
      v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          v46 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v39, v8);
          v28 = std::string::insert(&v39, 0, "invalid UTF-8 byte at index ");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v40, ": 0x");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v46 >= 0)
            v32 = __str;
          else
            v32 = *(char **)__str;
          if (v46 >= 0)
            v33 = v46;
          else
            v33 = v45;
          v34 = std::string::append(&v41, v32, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v43 = v34->__r_.__value_.__r.__words[2];
          v42 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38);
          nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      v17 = v9 != 0;
      if (v16 == 1)
      {
        v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)v18 = -16401;
          *(_BYTE *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
          v10 = 0;
        }
      }
      v9 = 0;
      v8 -= v17;
      v47 = 0;
      v11 = v10;
    }
    else if ((_DWORD)result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = (uint64_t *)*a2;
        *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v48[0])
      {
        case 8u:
          v15 = 25180;
          goto LABEL_43;
        case 9u:
          v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          v15 = 29276;
          goto LABEL_43;
        default:
          if (v48[0] == 34)
          {
            v15 = 8796;
            goto LABEL_43;
          }
          if (v48[0] == 92)
          {
            v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v48[0] > 0x7E)
            v20 = a3;
          else
            v20 = 0;
          if (v48[0] < 0x20 || v20)
          {
            v24 = (char *)(v12 + v11);
            if (HIWORD(v48[0]))
            {
              result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v48[0] >> 10) - 10304), v48[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              result = snprintf(v24, 7uLL, "\\u%04x", v48[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            v9 = 0;
            v10 = v11;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v11);
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
          break;
      }
    }
    ++v8;
    v22 = *((char *)a2 + 23);
    v3 = v22 >> 31;
    v23 = a2[1];
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v23);
  if (v47)
  {
    v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v46 = 3;
        *(_DWORD *)__str = 0;
        v36 = (uint64_t *)*a2;
        if (v22 >= 0)
          v36 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v41);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_1D3AD4DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  int v42;
  uint64_t v43;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a29);
  if (a41 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v43 - 97) < 0)
        operator delete(*(void **)(v43 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      v5 = (char *)a1 + 17;
      v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  *((_WORD *)v5 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v6 = 4;
      v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }
        if (v10 <= 0x3E7)
          break;
        if (v10 >> 4 < 0x271)
          goto LABEL_24;
        v6 += 4;
        v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }
      --v6;
    }
    else
    {
      v6 = 1;
    }
LABEL_24:
    v7 = v6 + 1;
  }
  else
  {
    if (v2 < 0xA)
    {
      v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    }
    v7 = 4;
    v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }
      if (v8 <= 0x3E7)
        break;
      if (v8 >> 4 < 0x271)
        goto LABEL_25;
      v7 += 4;
      v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }
    --v7;
  }
LABEL_25:
  if (v7 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v4 = &v3[v7];
  if (v2 < 0x64)
  {
    v11 = v2;
  }
  else
  {
    do
    {
      v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
      v4 -= 2;
      v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v12 > 0x270);
  }
  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }
  *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v11];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  if (a2 < 0xA)
  {
    v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  v5 = 4;
  v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }
    if (v6 <= 0x3E7)
      break;
    if (v6 >> 4 < 0x271)
      goto LABEL_13;
    v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }
  --v5;
LABEL_13:
  if (v5 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v2 % 0x64)];
      v3 -= 2;
      v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v9 > 0x270);
  }
  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }
  *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v8];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  const char *v6;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)a1;
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v6 = "null";
    v3 = 4;
  }
  else
  {
    v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1)
    v4 = a3 & 0x3F | (*a2 << 6);
  else
    v4 = (0xFFu >> v3) & a3;
  *a2 = v4;
  v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190)
    __assert_rtn("decode", "json.hpp", 16606, "index < 400");
  v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  char *v3;
  char *result;
  unint64_t v5;
  char *v6;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::to_chars<double>();
  v3 = a1;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)v3 = 11824;
    result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    v5 = a2 - (_QWORD)v3;
    if (a2 - (uint64_t)v3 <= 16)
      nlohmann::detail::to_chars<double>();
    v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18)
      nlohmann::detail::to_chars<double>();
    if (v5 <= 0x15)
      nlohmann::detail::to_chars<double>();
    if (v5 == 22)
      nlohmann::detail::to_chars<double>();
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  uint64_t v7;
  uint64_t v9[6];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  if (a4 <= 0.0)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  char *result;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a4 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  if (a5 <= 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v5 = (int)a2;
  v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((_BYTE *)this + v7) = 46;
    result = (char *)this + v7 + 2;
    *((_BYTE *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if ((_DWORD)a2 == 1)
    {
      v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((_BYTE *)this + 1) = 46;
      v11 = v5 + 1;
    }
    v12 = (char *)this + v11;
    *v12 = 101;
    if ((int)v7 <= -999)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1001)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1)
      v13 = 43;
    else
      v13 = 45;
    if ((int)v7 - 1 >= 0)
      v14 = v7 - 1;
    else
      v14 = 1 - v7;
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      v15 = v14 + 48;
    }
    v12[3] = v15;
    v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  if (a2 <= 0.0)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  v4 = *(_QWORD *)&a2 >> 52;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v6 = 2 * v5;
  v7 = *(_QWORD *)&a2 >> 53;
  v8 = 4 * v5;
  v9 = (*(_QWORD *)&a2 >> 52) - 1077;
  v10 = 0x10000000000000;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v8 = 2 * v5;
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
    v10 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  v11 = v7 == 0;
  if (v7)
    v12 = v8;
  else
    v12 = 2 * v5;
  if (v11)
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
  else
    v5 = v10;
  v3 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    v13 = (*(_QWORD *)&a2 >> 52) - 1076;
  }
  else
  {
    v12 = 2 * v3;
    v9 = -1075;
    v13 = 4294966221;
  }
  if (v4)
  {
    v14 = (*(_QWORD *)&a2 >> 52) - 1075;
  }
  else
  {
    v6 = 2 * v3;
    v14 = 4294966222;
  }
  if (v4)
    v15 = v5;
  else
    v15 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v24 = v12 - 1;
  v25 = v9;
  v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  v18 = v17;
  v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  v21 = v20;
  result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  uint64_t cached_power_for_binary_exponent;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];

  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5)
    nlohmann::detail::dtoa_impl::grisu2();
  if ((_DWORD)a10 != (_DWORD)a7)
    nlohmann::detail::dtoa_impl::grisu2();
  cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  v15 = v14;
  v27 = cached_power_for_binary_exponent;
  v28 = v16;
  v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  v19 = v18;
  v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  v22 = v21;
  v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "json.hpp", 14760, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t result;
  const char *v5;
  int v6;

  v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    v5 = "delta >= 0";
    v6 = 14779;
    goto LABEL_6;
  }
  v3 = *a1;
  result = *a1 << v2;
  if (result >> v2 != v3)
  {
    v5 = "((x.f << delta) >> delta) == x.f";
    v6 = 14780;
LABEL_6:
    __assert_rtn("normalize_to", "json.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  int v4;

  if ((int)this <= -1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if ((int)this >= 1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61)
    ++v1;
  if (v1 <= -315)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v3 = (_QWORD *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  v4 = v3[1] + (_DWORD)this;
  if (v4 <= -125)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if (v4 >= -95)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  v44 = a9;
  v45 = a10;
  if ((int)a10 <= -61)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  if ((int)a10 >= -31)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  v15 = -(int)v45;
  v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v17 = v14;
  v18 = 1 << v15;
  v19 = (1 << v15) - 1;
  v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          v23 = v16 >> 5;
          v24 = v16 >> 4;
          if (v16 <= 9)
            v25 = 1;
          else
            v25 = 10;
          if (v16 <= 9)
            v26 = 1;
          else
            v26 = 2;
          if (v16 <= 0x63)
            v27 = v26;
          else
            v27 = 3;
          if (v16 <= 0x63)
            v28 = v25;
          else
            v28 = 100;
          if (v16 <= 0x3E7)
            v29 = v27;
          else
            v29 = 4;
          if (v16 <= 0x3E7)
            v30 = v28;
          else
            v30 = 1000;
          if (v24 <= 0x270)
            v31 = v29;
          else
            v31 = 5;
          if (v24 <= 0x270)
            v32 = v30;
          else
            v32 = 10000;
          if (v23 <= 0xC34)
            v22 = v31;
          else
            v22 = 6;
          if (v23 > 0xC34)
            v21 = 100000;
          else
            v21 = v32;
        }
        else
        {
          v21 = 1000000;
          v22 = 7;
        }
      }
      else
      {
        v21 = 10000000;
        v22 = 8;
      }
    }
    else
    {
      v21 = 100000000;
      v22 = 9;
    }
  }
  else
  {
    v21 = 1000000000;
    v22 = 10;
  }
  v33 = v22 + 1;
  do
  {
    v34 = v16 / v21;
    if (v16 / v21 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v16 = v16 % v21;
    v35 = (int)*a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      v18 = (unint64_t)v21 << v15;
      v40 = (char *)*a2;
      v41 = a1;
      v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v37 = (10 * v20) >> v15;
    if (v37 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v38 = (int)*a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    v39 = 5 * v13;
    v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  v40 = (char *)*a2;
  v41 = a1;
  v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  const char *v4;
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    v4 = "x.e == y.e";
    v5 = 14683;
LABEL_6:
    __assert_rtn("sub", "json.hpp", v5, v4);
  }
  v2 = *(_QWORD *)a1 >= *(_QWORD *)a2;
  result = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (!v2)
  {
    v4 = "x.f >= y.f";
    v5 = 14684;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a3 > a4)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a4 < a5)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (!a6)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        nlohmann::detail::dtoa_impl::grisu2_round();
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5793, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 6045, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5802, a4);
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key()
{
  __assert_rtn("key", "json.hpp", 11708, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "json.hpp", 11418, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>()
{
  __assert_rtn("operator==", "json.hpp", 11500, "m_object != nullptr");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "json.hpp", 7503, "std::char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "json.hpp", 6580, "0x00 <= codepoint && codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "json.hpp", 6460, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
  __assert_rtn("scan_number", "json.hpp", 7209, "false");
}

{
  __assert_rtn("scan_number", "json.hpp", 7489, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7456, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7472, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
  __assert_rtn("unget", "json.hpp", 7595, "!token_string.empty()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "json.hpp", 6398, "0x0000 <= codepoint && codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "json.hpp", 6372, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "json.hpp", 6419, "ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
  __assert_rtn("end_object", "json.hpp", 5938, "!ref_stack.empty()");
}

{
  __assert_rtn("end_object", "json.hpp", 5939, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
  __assert_rtn("end_array", "json.hpp", 5994, "!ref_stack.empty()");
}

{
  __assert_rtn("end_array", "json.hpp", 5995, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("handle_value", "json.hpp", a3, "!keep_stack.empty()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "json.hpp", 11373, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "json.hpp", 11379, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "json.hpp", 11385, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("handle_value", "json.hpp", a3, "ref_stack.back()->is_array() || ref_stack.back()->is_object()");
}

{
  OUTLINED_FUNCTION_2("handle_value", "json.hpp", a3, "object_element");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
  __assert_rtn("dump", "json.hpp", 16075, "false");
}

{
  __assert_rtn("dump", "json.hpp", 15850, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15851, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15878, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15879, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15920, "!val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "json.hpp", 15941, "!val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
  __assert_rtn("dump_escaped", "json.hpp", 16337, "false");
}

{
  __assert_rtn("dump_escaped", "json.hpp", 16274, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
  __assert_rtn("dump_integer", "json.hpp", 16439, "n_chars < number_buffer.size() - 1");
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "json.hpp", 15697, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15707, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15715, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15716, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "json.hpp", 15679, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
  __assert_rtn("grisu2", "json.hpp", 15505, "value > 0");
}

{
  __assert_rtn("grisu2", "json.hpp", 15504, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
  __assert_rtn("format_buffer", "json.hpp", 15594, "min_exp < 0");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15595, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15541, "e > -1000");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15542, "e < 1000");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15621, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
  __assert_rtn("compute_boundaries", "json.hpp", 14803, "value > 0");
}

{
  __assert_rtn("compute_boundaries", "json.hpp", 14802, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "json.hpp", 15443, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "json.hpp", 15442, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15083, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15084, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15089, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15093, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15094, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15090, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15216, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15217, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15238, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15274, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15372, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15381, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15361, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "json.hpp", 15160, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15161, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15162, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15163, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15188, "buf[len - 1] != '0'");
}

std::string *MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v13 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v14 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v14;
  }
  v15 = this + 4;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v16 = *a6;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return this;
}

void sub_1D3AD6A74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MPL::detail::ModelPackageItemInfoImpl::~ModelPackageItemInfoImpl(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t MPL::ModelPackageItemInfo::path(MPL::ModelPackageItemInfo *this)
{
  return *(_QWORD *)this + 24;
}

std::string *MPL::detail::ModelPackageImpl::ModelPackageImpl(std::string *this, const std::__fs::filesystem::path *a2, int a3, std::string::value_type a4)
{
  __int128 v8;
  JsonMap *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 **data;
  std::string::size_type v13;
  uint64_t *v14;
  uint64_t ***v15;
  void *v17;
  void *exception;
  void *v19;
  void *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  char v30;
  std::string v31;
  std::string __p;
  uint64_t v33;
  _BYTE v34[56];
  void *v35;
  char v36;
  uint64_t v37;
  _QWORD v38[21];

  v38[20] = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &kModelPackageManifestFileName);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &kModelPackageDataDir);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = a4;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)this, 0);
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&this[1], 0);
    if (!__p.__r_.__value_.__s.__data_[0] || __p.__r_.__value_.__s.__data_[0] == 255)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
      else
        v31 = this[1];
      v23 = std::string::insert(&v31, 0, "A valid manifest does not exist at path: ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1D8251788](exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::ifstream::basic_ifstream(&__p);
    v15 = (uint64_t ***)operator new();
    JsonMap::JsonMap(v15, &__p);
    std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&this[3], v15);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v34[*(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)] | 4);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                + 24);
    MEMORY[0x1D8251854](&__p.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    v14 = v38;
  }
  else
  {
    if (!a3)
    {
      v17 = __cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      else
        v31 = *this;
      v21 = std::string::insert(&v31, 0, "Failed to open model package at path: ");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1D8251788](v17, &__p);
      __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)this, 0))
    {
      v19 = __cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      else
        v31 = *this;
      v25 = std::string::insert(&v31, 0, "Failed to create model package at path: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1D8251788](v19, &__p);
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&this[2], 0))
    {
      v20 = __cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this[2].__r_.__value_.__l.__data_, this[2].__r_.__value_.__l.__size_);
      else
        v31 = this[2];
      v27 = std::string::insert(&v31, 0, "Failed to create data directory at path: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1D8251788](v20, &__p);
      __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = (JsonMap *)operator new();
    JsonMap::JsonMap(v9);
    std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&this[3], (uint64_t ***)v9);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    std::ostream::operator<<();
    data = (unsigned __int8 **)this[3].__r_.__value_.__l.__data_;
    std::string::basic_string[abi:ne180100]<0>(&v31, "fileFormatVersion");
    std::stringbuf::str();
    JsonMap::setString(data, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v29);
    if (v30 < 0)
      operator delete(v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                + 64);
    __p.__r_.__value_.__r.__words[2] = v13;
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete(v35);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    v14 = &v37;
  }
  MEMORY[0x1D82519D4](v14);
  MPL::detail::ModelPackageImpl::validate((MPL::detail::ModelPackageImpl *)this);
  return this;
}

void sub_1D3AD7100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  uint64_t ****v31;
  void *v32;

  __cxa_free_exception(v32);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](v31, 0);
  if (*(char *)(v28 + 71) < 0)
    operator delete(*v30);
  if (*(char *)(v28 + 47) < 0)
    operator delete(*v29);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_1D3AD72F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1D8251854](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1D82519D4](a1 + 53);
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1D3AD7470(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1D82519D4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D82519D4](a1 + 128);
  return a1;
}

void MPL::detail::ModelPackageImpl::validate(MPL::detail::ModelPackageImpl *this)
{
  uint64_t *v2;
  _QWORD *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  int v9;
  const void **v10;
  const void **i;
  JsonMap *v12;
  JsonMap *v13;
  JsonMap *v14;
  JsonMap *v15;
  _BOOL4 hasKey;
  int v17;
  uint64_t *v18;
  uint64_t ***v19;
  uint64_t ***v20;
  void *v21;
  void *v22;
  void *v23;
  void *exception;
  void *v25;
  void *v26[2];
  char v27;
  std::string v28;
  JsonMap *v29;
  JsonMap *v30;
  std::__fs::filesystem::path v31;
  std::__fs::filesystem::path v32;
  void *v33[2];
  std::string::size_type v34;
  const std::string *v35;
  std::string *v36;
  unint64_t v37;
  void *__p[2];
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  std::string v43;

  v2 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "fileFormatVersion");
  JsonMap::getString(v2, (const void **)__p, &v43);
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  std::istringstream::basic_istringstream[abi:ne180100](__p, &v43, 8);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  while (1)
  {
    v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)v33, 0x2Eu);
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
      break;
    v4 = v36;
    if ((unint64_t)v36 >= v37)
    {
      v6 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v35, (__int128 *)v33);
    }
    else
    {
      if (SHIBYTE(v34) < 0)
      {
        std::string::__init_copy_ctor_external(v36, (const std::string::value_type *)v33[0], (std::string::size_type)v33[1]);
      }
      else
      {
        v5 = *(_OWORD *)v33;
        v36->__r_.__value_.__r.__words[2] = v34;
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      v6 = v4 + 1;
    }
    v36 = v6;
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if ((char *)v36 - (char *)v35 != 72)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1D8251788](exception, v33);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = std::stoi(v35, 0, 10);
  v8 = std::stoi(v35 + 1, 0, 10);
  v9 = std::stoi(v35 + 2, 0, 10);
  if ((v7 & 0x80000000) != 0 || v8 < 0 || v9 < 0)
  {
    v25 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1D8251788](v25, v33);
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7 > 1 || v7 == 1 && v8 || !v8 && v9)
  {
    v23 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1D8251788](v23, v33);
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::getItemInfoEntries(this, &v30);
  if (v30)
  {
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    JsonMap::getKeys((uint64_t *)v30, (uint64_t *)v33);
    v10 = (const void **)v33[0];
    for (i = (const void **)v33[1]; v10 != i; v10 += 3)
    {
      MPL::detail::ModelPackageImpl::getItemInfoEntry(this, v10, &v29);
      v12 = v29;
      std::string::basic_string[abi:ne180100]<0>(&v32, "path");
      if (JsonMap::hasKey((uint64_t)v12, (const void **)&v32.__pn_.__r_.__value_.__l.__data_))
      {
        v13 = v29;
        std::string::basic_string[abi:ne180100]<0>(&v31, "name");
        if (JsonMap::hasKey((uint64_t)v13, (const void **)&v31.__pn_.__r_.__value_.__l.__data_))
        {
          v14 = v29;
          std::string::basic_string[abi:ne180100]<0>(&v28, "author");
          if (JsonMap::hasKey((uint64_t)v14, (const void **)&v28.__r_.__value_.__l.__data_))
          {
            v15 = v29;
            std::string::basic_string[abi:ne180100]<0>(v26, "description");
            hasKey = JsonMap::hasKey((uint64_t)v15, (const void **)v26);
            if (v27 < 0)
              operator delete(v26[0]);
            v17 = !hasKey;
          }
          else
          {
            v17 = 1;
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        else
        {
          v17 = 1;
        }
        if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__pn_.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = 1;
      }
      if (SHIBYTE(v32.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__pn_.__r_.__value_.__l.__data_);
      if (v17)
      {
        v22 = __cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        MEMORY[0x1D8251788](v22, &v32);
        __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = (uint64_t *)v29;
      std::string::basic_string[abi:ne180100]<0>(v26, "path");
      JsonMap::getString(v18, (const void **)v26, &v28);
      v31.__pn_ = v28;
      memset(&v28, 0, sizeof(v28));
      std::__fs::filesystem::operator/[abi:ne180100](&v31, (uint64_t)this + 48, &v32);
      if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(v26[0]);
      std::__fs::filesystem::__status(&v32, 0);
      if (v31.__pn_.__r_.__value_.__s.__data_[0] == 255 || !v31.__pn_.__r_.__value_.__s.__data_[0])
      {
        v21 = __cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        MEMORY[0x1D8251788](v21, &v31);
        __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (SHIBYTE(v32.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__pn_.__r_.__value_.__l.__data_);
      v19 = (uint64_t ***)v29;
      v29 = 0;
      if (v19)
      {
        JsonMap::~JsonMap(v19);
        MEMORY[0x1D8251A40]();
      }
    }
    v32.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    v20 = (uint64_t ***)v30;
    v30 = 0;
    if (v20)
    {
      JsonMap::~JsonMap(v20);
      MEMORY[0x1D8251A40]();
    }
  }
  v33[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  __p[0] = *(void **)MEMORY[0x1E0DE4F58];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  v39 = MEMORY[0x1E0DE4FB8] + 16;
  if (v41 < 0)
    operator delete(v40);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1D82519D4](&v42);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_1D3AD7B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      __p = &a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::istringstream::~istringstream((uint64_t)&a35);
      if (*(char *)(v42 - 81) < 0)
        operator delete(*(void **)(v42 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v40);
  goto LABEL_6;
}

void sub_1D3AD7B80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t ***a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](&a21, 0);
  JUMPOUT(0x1D3AD7E00);
}

void sub_1D3AD7C60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v37 & 1) == 0)
      goto LABEL_10;
  }
  else if (!v37)
  {
LABEL_10:
    __cxa_end_catch();
    JUMPOUT(0x1D3AD7E1CLL);
  }
  __cxa_free_exception(v36);
  goto LABEL_10;
}

void sub_1D3AD7CF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  JUMPOUT(0x1D3AD7D0CLL);
}

void sub_1D3AD7D20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  int v26;
  void *v27;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      JUMPOUT(0x1D3AD7DF4);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_1D3AD7D58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  int v29;
  void *v30;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0)
        operator delete(a24);
      std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&a15, 0);
      JUMPOUT(0x1D3AD7E00);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_1D3AD7D94()
{
  JUMPOUT(0x1D3AD7DF4);
}

void sub_1D3AD7DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    JUMPOUT(0x1D3AD7DF0);
  JUMPOUT(0x1D3AD7DF4);
}

void MPL::detail::ModelPackageImpl::~ModelPackageImpl(MPL::detail::ModelPackageImpl *this)
{
  std::error_code v2;
  std::__fs::filesystem::path __replacement;
  std::string v4;
  std::__fs::filesystem::path v5[17];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 80))
  {
    if (*((char *)this + 47) < 0)
      std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
    else
      v4 = *(std::string *)((_BYTE *)this + 1);
    MPL::detail::ModelPackageImpl::generateIdentifier(v5);
    __replacement = v5[0];
    std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v4, &__replacement);
    std::ofstream::basic_ofstream(v5);
    JsonMap::serialize(*((uint64_t **)this + 9), (uint64_t *)v5);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v5[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
    if ((*((_BYTE *)&v5[1].__pn_.__r_.__value_.__r.__words[1]
          + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
    {
      v2.__val_ = 0;
      v2.__cat_ = std::system_category();
      std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&v4, (const std::__fs::filesystem::path *)this + 1, &v2);
      if (v2.__val_)
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&v4, 0);
    }
    v5[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
    *(std::string::size_type *)((char *)v5[0].__pn_.__r_.__value_.__r.__words
                              + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x1D8251854](&v5[0].__pn_.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x1D82519D4](v6);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)this + 9, 0);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1D3AD8060(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *MPL::detail::ModelPackageImpl::generateIdentifier@<X0>(_QWORD *a1@<X8>)
{
  _BYTE v4[37];
  unsigned __int8 uu[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)uu = 0;
  v6 = 0;
  memset(v4, 0, sizeof(v4));
  MEMORY[0x1D8251EFC](uu);
  uuid_unparse(uu, v4);
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1D8251854](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1D82519D4](a1 + 52);
  return a1;
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_1D3AD8204(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1D82519D4](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1D8251860](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1D3AD8358(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1D3AD8324);
  }
  __cxa_rethrow();
}

void sub_1D3AD839C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::getItemInfoEntries(MPL::detail::ModelPackageImpl *this@<X0>, JsonMap **a2@<X8>)
{
  uint64_t v4;
  _BOOL4 hasKey;
  _BOOL4 v6;
  uint64_t *v7;
  JsonMap *v8;
  void *__p[2];
  char v10;

  v4 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  hasKey = JsonMap::hasKey(v4, (const void **)__p);
  v6 = hasKey;
  if ((v10 & 0x80000000) == 0)
  {
    if (hasKey)
      goto LABEL_3;
LABEL_6:
    v8 = (JsonMap *)operator new();
    JsonMap::JsonMap(v8);
    *a2 = v8;
    return;
  }
  operator delete(__p[0]);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v7 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  JsonMap::getObject(v7, (const void **)__p, a2);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_1D3AD8478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1D8251A40](v15, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t ***MPL::detail::ModelPackageImpl::getItemInfoEntry@<X0>(MPL::detail::ModelPackageImpl *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***result;
  JsonMap *v6;

  MPL::detail::ModelPackageImpl::getItemInfoEntries(a1, &v6);
  if (JsonMap::hasKey((uint64_t)v6, a2))
    JsonMap::getObject((uint64_t *)v6, a2, a3);
  else
    *a3 = 0;
  result = (uint64_t ***)v6;
  v6 = 0;
  if (result)
  {
    JsonMap::~JsonMap(result);
    return (uint64_t ***)MEMORY[0x1D8251A40]();
  }
  return result;
}

void sub_1D3AD8534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1D82519D4](a1 + 120);
  return a1;
}

uint64_t ***MPL::detail::ModelPackageImpl::createItemInfoEntry(MPL::detail::ModelPackageImpl *a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JsonMap *v12;
  uint64_t ***v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  JsonMap *v17;
  uint64_t ***v18;
  unsigned __int8 **v19;
  JsonMap *v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t ***result;
  JsonMap *v24;
  JsonMap *v25;
  JsonMap *v26;
  void *__p[2];
  char v28;
  JsonMap *v29;

  MPL::detail::ModelPackageImpl::getItemInfoEntry(a1, a2, &v29);
  v12 = v29;
  if (!v29)
  {
    v12 = (JsonMap *)operator new();
    JsonMap::JsonMap(v12);
    v13 = (uint64_t ***)v29;
    v29 = v12;
    if (v13)
    {
      JsonMap::~JsonMap(v13);
      MEMORY[0x1D8251A40]();
      v12 = v29;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  JsonMap::setString((unsigned __int8 **)v12, (const void **)__p, a3);
  if (v28 < 0)
    operator delete(__p[0]);
  v14 = (unsigned __int8 **)v29;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  JsonMap::setString(v14, (const void **)__p, a4);
  if (v28 < 0)
    operator delete(__p[0]);
  v15 = (unsigned __int8 **)v29;
  std::string::basic_string[abi:ne180100]<0>(__p, "author");
  JsonMap::setString(v15, (const void **)__p, a5);
  if (v28 < 0)
    operator delete(__p[0]);
  v16 = (unsigned __int8 **)v29;
  std::string::basic_string[abi:ne180100]<0>(__p, "description");
  JsonMap::setString(v16, (const void **)__p, a6);
  if (v28 < 0)
    operator delete(__p[0]);
  MPL::detail::ModelPackageImpl::getItemInfoEntries(a1, &v26);
  v17 = v29;
  v29 = 0;
  v25 = v17;
  JsonMap::setObject((unsigned __int8 **)v26, a2, (uint64_t **)&v25);
  v18 = (uint64_t ***)v25;
  v25 = 0;
  if (v18)
  {
    JsonMap::~JsonMap(v18);
    MEMORY[0x1D8251A40]();
  }
  v19 = (unsigned __int8 **)*((_QWORD *)a1 + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  v20 = v26;
  v26 = 0;
  v24 = v20;
  JsonMap::setObject(v19, (const void **)__p, (uint64_t **)&v24);
  v21 = (uint64_t ***)v24;
  v24 = 0;
  if (v21)
  {
    JsonMap::~JsonMap(v21);
    MEMORY[0x1D8251A40]();
  }
  if (v28 < 0)
    operator delete(__p[0]);
  v22 = (uint64_t ***)v26;
  v26 = 0;
  if (v22)
  {
    JsonMap::~JsonMap(v22);
    MEMORY[0x1D8251A40]();
  }
  result = (uint64_t ***)v29;
  v29 = 0;
  if (result)
  {
    JsonMap::~JsonMap(result);
    return (uint64_t ***)MEMORY[0x1D8251A40]();
  }
  return result;
}

void sub_1D3AD883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t ***a25)
{
  uint64_t v25;

  MEMORY[0x1D8251A40](v25, 0x20C4093837F09);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](&a25, 0);
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::getItemPath(char *a1@<X1>, char *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
  std::string __p;
  std::string v6;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v6, a2);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v6, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1D3AD8970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void MPL::detail::ModelPackageImpl::createFile(MPL::detail::ModelPackageImpl *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void *v27;
  std::string *v28;
  __int128 v29;
  std::string __p;
  void *v31[2];
  std::string::size_type v32;
  std::string v33;
  std::string v34;
  std::__fs::filesystem::path v35;
  uint64_t v36;
  _QWORD v37[20];

  v37[19] = *MEMORY[0x1E0C80C00];
  MPL::detail::ModelPackageImpl::findItem(a1, (uint64_t)a2, a3, (uint64_t **)&v35);
  v10 = *(_OWORD *)&v35.__pn_.__r_.__value_.__l.__data_;
  if (v35.__pn_.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v35.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if ((_QWORD)v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v20 = std::string::append(&v33, " author: ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = *(char *)(a3 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)a3;
    else
      v23 = *(const std::string::value_type **)a3;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a3 + 23);
    else
      v24 = *(_QWORD *)(a3 + 8);
    v25 = std::string::append(&v34, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v35.__pn_.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__pn_.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D8251788](exception, &v35);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::getItemPath(a2, (char *)a3, (std::__fs::filesystem::path *)&v34);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v34, (uint64_t)a1 + 48, (std::__fs::filesystem::path *)&v33);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v33, (uint64_t)&v35);
  std::__fs::filesystem::__create_directories(&v35, 0);
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__pn_.__r_.__value_.__l.__data_);
  std::ofstream::basic_ofstream(&v35);
  if (!v36)
  {
    v27 = __cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      __p = v33;
    v28 = std::string::insert(&__p, 0, "Failed to create file at path: ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v32 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)v31 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D8251788](v27, v31);
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::generateIdentifier(v31);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    __p = v34;
  MPL::detail::ModelPackageImpl::createItemInfoEntry(a1, (const void **)v31, (uint64_t)&__p, (uint64_t)a2, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MPL::detail::ModelPackageImpl::findItem(a1, (const void **)v31, &__p);
  v13 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  *a5 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  a5[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  v35.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)v35.__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(v35.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1D8251854](&v35.__pn_.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x1D82519D4](v37);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1D3AD8D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;

  if (a40 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v41 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v40);
  goto LABEL_10;
}

uint64_t ***MPL::detail::ModelPackageImpl::findItem@<X0>(MPL::detail::ModelPackageImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  const void **v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  uint64_t ***result;
  const void **v24;
  const void **v25;
  uint64_t v26;
  JsonMap *v27;
  const void ***v28;

  MPL::detail::ModelPackageImpl::getItemInfoEntries(a1, &v27);
  if (!v27)
  {
LABEL_36:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_38;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  JsonMap::getKeys((uint64_t *)v27, (uint64_t *)&v24);
  v8 = v24;
  v9 = v25;
  while (1)
  {
    if (v8 == v9)
    {
      v28 = &v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      goto LABEL_36;
    }
    MPL::detail::ModelPackageImpl::findItem(a1, v8, a4);
    v10 = **a4;
    v11 = *(unsigned __int8 *)(v10 + 95);
    if ((v11 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v10 + 95);
    else
      v12 = *(_QWORD *)(v10 + 80);
    v13 = *(unsigned __int8 *)(a3 + 23);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a3 + 8);
    if (v12 != v13)
      goto LABEL_34;
    v15 = (const void **)(v10 + 72);
    v16 = v14 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*v15, v16, *(_QWORD *)(v10 + 80)))
        goto LABEL_34;
    }
    else if (*(_BYTE *)(v10 + 95))
    {
      while (*(unsigned __int8 *)v15 == *v16)
      {
        v15 = (const void **)((char *)v15 + 1);
        ++v16;
        if (!--v11)
          goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_19:
    v17 = *(unsigned __int8 *)(v10 + 71);
    if ((v17 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v10 + 71);
    else
      v18 = *(_QWORD *)(v10 + 56);
    v19 = *(unsigned __int8 *)(a2 + 23);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a2 + 8);
    if (v18 != v19)
      goto LABEL_34;
    v21 = (const void **)(v10 + 48);
    v22 = v20 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v17 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v10 + 71))
      goto LABEL_37;
    while (*(unsigned __int8 *)v21 == *v22)
    {
      v21 = (const void **)((char *)v21 + 1);
      ++v22;
      if (!--v17)
        goto LABEL_37;
    }
LABEL_34:
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)a4);
    v8 += 3;
  }
  if (memcmp(*v21, v22, *(_QWORD *)(v10 + 56)))
    goto LABEL_34;
LABEL_37:
  v28 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
LABEL_38:
  result = (uint64_t ***)v27;
  v27 = 0;
  if (result)
  {
    JsonMap::~JsonMap(result);
    return (uint64_t ***)MEMORY[0x1D8251A40]();
  }
  return result;
}

void sub_1D3AD908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t ***a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](&a13, 0);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t ***MPL::detail::ModelPackageImpl::findItem@<X0>(MPL::detail::ModelPackageImpl *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;
  std::string v18;
  std::string v19;
  std::string __p;
  std::__fs::filesystem::path v21;
  uint64_t *v22;
  char v23;

  result = MPL::detail::ModelPackageImpl::getItemInfoEntry(a1, a2, &v22);
  v7 = v22;
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "path");
    JsonMap::getString(v7, (const void **)&v18.__r_.__value_.__l.__data_, &v19);
    __p = v19;
    memset(&v19, 0, sizeof(v19));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a1 + 48, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v8 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v19, "name");
    JsonMap::getString(v8, (const void **)&v19.__r_.__value_.__l.__data_, &__p);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v9 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v18, "author");
    JsonMap::getString(v9, (const void **)&v18.__r_.__value_.__l.__data_, &v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v10 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v15, "description");
    JsonMap::getString(v10, (const void **)&v15, &v18);
    if (v17 < 0)
      operator delete(v15);
    std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,void>((__int128 *)a2, (uint64_t)&v21, (__int128 *)&__p, (__int128 *)&v19, (__int128 *)&v18, &v15);
    v11 = operator new(0x28uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1E9568158;
    std::allocator<MPL::ModelPackageItemInfo>::construct[abi:ne180100]<MPL::ModelPackageItemInfo,std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>>((uint64_t)&v23, v11 + 3, (uint64_t *)&v15);
    *a3 = v11 + 3;
    a3[1] = v11;
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
    result = (uint64_t ***)v22;
    v22 = 0;
    if (result)
    {
      JsonMap::~JsonMap(result);
      return (uint64_t ***)MEMORY[0x1D8251A40]();
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_1D3AD93C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)(v33 - 48), 0);
  _Unwind_Resume(a1);
}

void sub_1D3AD94C0()
{
  JUMPOUT(0x1D3AD94ACLL);
}

void MPL::detail::ModelPackageImpl::addItem(MPL::detail::ModelPackageImpl *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void **a6@<X8>)
{
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  void *exception;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string __p;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path v25;

  MPL::detail::ModelPackageImpl::findItem(a1, (uint64_t)a3, a4, (uint64_t **)&v25);
  v12 = *(_OWORD *)&v25.__pn_.__r_.__value_.__l.__data_;
  if (v25.__pn_.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v25.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if ((_QWORD)v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v16 = std::string::append(&__p, " author: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __to.__pn_.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__to.__pn_.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = *(char *)(a4 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)a4;
    else
      v19 = *(const std::string::value_type **)a4;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a4 + 23);
    else
      v20 = *(_QWORD *)(a4 + 8);
    v21 = std::string::append(&__to.__pn_, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v25.__pn_.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__pn_.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D8251788](exception, &v25);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::getItemPath(a3, (char *)a4, &v25);
  std::__fs::filesystem::operator/[abi:ne180100](&v25, (uint64_t)a1 + 48, &__to);
  std::__fs::filesystem::path::parent_path[abi:ne180100](&__to, (uint64_t)&__p);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__copy(a2, &__to, (std::__fs::filesystem::copy_options)0, 0);
  MPL::detail::ModelPackageImpl::generateIdentifier(a6);
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v25.__pn_.__r_.__value_.__l.__data_, v25.__pn_.__r_.__value_.__l.__size_);
  else
    __p = v25.__pn_;
  MPL::detail::ModelPackageImpl::createItemInfoEntry(a1, a6, (uint64_t)&__p, (uint64_t)a3, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__pn_.__r_.__value_.__l.__data_);
}

void sub_1D3AD96EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MPL::detail::ModelPackageImpl::setRootModel(MPL::detail::ModelPackageImpl *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void **a6@<X8>)
{
  uint64_t v12;
  _BOOL4 hasKey;
  unsigned __int8 **v14;
  void *exception;
  void *__p[2];
  char v17;

  v12 = *((_QWORD *)a1 + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "rootModelIdentifier");
  hasKey = JsonMap::hasKey(v12, (const void **)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (hasKey)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "A root model already exists in this package");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::addItem(a1, a2, a3, a4, a5, a6);
  v14 = (unsigned __int8 **)*((_QWORD *)a1 + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "rootModelIdentifier");
  JsonMap::setString(v14, (const void **)__p, (uint64_t)a6);
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_1D3AD98E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::getRootModel(MPL::detail::ModelPackageImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL hasKey;
  uint64_t *v6;
  void *exception;
  void *v8[2];
  char v9;
  std::string __p;

  v4 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rootModelIdentifier");
  hasKey = JsonMap::hasKey(v4, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!hasKey)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "Failed to look up root model");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(v8, "rootModelIdentifier");
  JsonMap::getString(v6, (const void **)v8, &__p);
  if (v9 < 0)
    operator delete(v8[0]);
  MPL::detail::ModelPackageImpl::findItem(this, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D3AD9A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

uint64_t MPL::detail::ModelPackageImpl::isValid(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::string v3;

  MPL::detail::ModelPackageImpl::ModelPackageImpl(&v3, this, 0, 1);
  MPL::detail::ModelPackageImpl::~ModelPackageImpl((MPL::detail::ModelPackageImpl *)&v3);
  return 1;
}

void sub_1D3AD9AA8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3AD9A9CLL);
}

_QWORD *MPL::ModelPackage::ModelPackage(_QWORD *a1, char *a2, unsigned __int8 a3, std::string::value_type a4)
{
  std::string::value_type v6;
  unsigned __int8 v7;

  v7 = a3;
  v6 = a4;
  std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>(a2, &v7, &v6, a1);
  return a1;
}

void MPL::ModelPackage::setRootModel(MPL::detail::ModelPackageImpl **a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void **a6@<X8>)
{
  MPL::detail::ModelPackageImpl *v10;
  std::string __p;

  v10 = *a1;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  MPL::detail::ModelPackageImpl::setRootModel(v10, (const std::__fs::filesystem::path *)&__p, a3, a4, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D3AD9B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MPL::ModelPackage::getRootModel(MPL::detail::ModelPackageImpl **this@<X0>, _QWORD *a2@<X8>)
{
  MPL::detail::ModelPackageImpl::getRootModel(*this, a2);
}

uint64_t ***MPL::ModelPackage::findItem@<X0>(MPL::detail::ModelPackageImpl **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  return MPL::detail::ModelPackageImpl::findItem(*a1, a2, a3, a4);
}

uint64_t MPL::ModelPackage::isValid(char *a1)
{
  const std::__fs::filesystem::path *v1;
  uint64_t isValid;
  std::string __p;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  isValid = MPL::detail::ModelPackageImpl::isValid((std::__fs::filesystem::path *)&__p, v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return isValid;
}

void sub_1D3AD9BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MPL::ModelPackage::createFile(MPL::detail::ModelPackageImpl **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  MPL::detail::ModelPackageImpl::createFile(*a1, a2, a3, a4, a5);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1D3AD9CCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1D3AD9E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t ***std::unique_ptr<JsonMap>::reset[abi:ne180100](uint64_t ****a1, uint64_t ***a2)
{
  uint64_t ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    JsonMap::~JsonMap(result);
    JUMPOUT(0x1D8251A40);
  }
  return result;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1D8251848](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1D3ADA010(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1D82519D4](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1D825189C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1D82518A8](v13);
  return a1;
}

void sub_1D3ADA150(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1D82518A8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D3ADA130);
}

void sub_1D3ADA198(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1D3ADA2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1D8251848](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1D3ADA460(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1D82519D4](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1D3ADA504(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1D3ADA70C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, __int128 *a5@<X5>, _QWORD *a6@<X8>)
{
  std::string *v12;
  std::string *result;

  v12 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 1;
  a6[1] = v12;
  return result;
}

void sub_1D3ADA79C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(std::string *a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  char v8;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E95681C8;
  std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>((int)&v8, a1 + 1, a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D3ADA808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95681C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95681C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__on_zero_shared(uint64_t a1)
{
  MPL::detail::ModelPackageItemInfoImpl::~ModelPackageItemInfoImpl((void **)(a1 + 24));
}

void std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>(int a1, std::string *this, __int128 *a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  std::string __p;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(this, a3, (__int128 *)&__p, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D3ADA900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::allocator<MPL::ModelPackageItemInfo>::construct[abi:ne180100]<MPL::ModelPackageItemInfo,std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

std::string *std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>@<X0>(char *a1@<X1>, unsigned __int8 *a2@<X2>, std::string::value_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x70uLL);
  result = std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1D3ADAA34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(std::string *a1, char *a2, unsigned __int8 *a3, std::string::value_type *a4)
{
  char v6;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E9568190;
  std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>((uint64_t)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1D3ADAA98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__on_zero_shared(uint64_t a1)
{
  MPL::detail::ModelPackageImpl::~ModelPackageImpl((MPL::detail::ModelPackageImpl *)(a1 + 24));
}

void std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>(uint64_t a1, std::string *a2, char *a3, unsigned __int8 *a4, std::string::value_type *a5)
{
  std::string __p;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  MPL::detail::ModelPackageImpl::ModelPackageImpl(a2, (const std::__fs::filesystem::path *)&__p, *a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D3ADAB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser(MLAssetIO::ProtoWireFormatCallbackParser *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[2] = 0;
  *v2 = &off_1E9567C58;
  v2[1] = v2 + 2;
  return std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::shared_ptr[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::BranchField,void>(this, (uint64_t)v2);
}

void MLAssetIO::ProtoWireFormatCallbackParser::addBranchesToSearchTree(_QWORD *a1@<X0>, int **a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  int *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int *i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  __int128 v28;
  std::__shared_weak_count *v29;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Field number path is empty.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v6 = a1[1];
  *a3 = *a1;
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  for (i = v4 - 1; v5 != i; ++v5)
  {
    v10 = *v5;
    v11 = *a3;
    v12 = *(_QWORD *)(*a3 + 16);
    if (!v12)
      goto LABEL_16;
    v13 = (uint64_t **)(*a3 + 16);
    do
    {
      v14 = *(_DWORD *)(v12 + 32);
      v15 = v14 < v10;
      if (v14 >= v10)
        v16 = (uint64_t *)v12;
      else
        v16 = (uint64_t *)(v12 + 8);
      if (!v15)
        v13 = (uint64_t **)v12;
      v12 = *v16;
    }
    while (*v16);
    if (v13 == (uint64_t **)(*a3 + 16) || v10 < *((_DWORD *)v13 + 8))
    {
LABEL_16:
      v17 = (std::__shared_weak_count *)operator new(0x38uLL);
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568270;
      v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E9567C58;
      v17[1].__shared_weak_owners_ = 0;
      v17[2].__vftable = 0;
      v17[1].__shared_owners_ = (uint64_t)&v17[1].__shared_weak_owners_;
      LODWORD(v28) = v10;
      *((_QWORD *)&v28 + 1) = v17 + 1;
      v29 = v17;
      v13 = std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::__emplace_unique_key_args<int,std::pair<int const,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>> const&>((uint64_t **)(v11 + 8), (int *)&v28, (uint64_t)&v28);
      v18 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    v21 = v13[6];
    *(_QWORD *)&v28 = v13[5];
    *((_QWORD *)&v28 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 1);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100]((uint64_t)a3, &v28);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_1D3ADADCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void MLAssetIO::ProtoWireFormatCallbackParser::setHandler<std::function<void ()(google::protobuf::io::CodedInputStream &)>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int *v15;

  MLAssetIO::ProtoWireFormatCallbackParser::addBranchesToSearchTree(a1, (int **)a2, &v13);
  std::allocate_shared[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>,std::function<void ()(google::protobuf::io::CodedInputStream &)> const&,void>(a3, &v12);
  v15 = (int *)(*(_QWORD *)(a2 + 8) - 4);
  v5 = std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 8), v15, (uint64_t)&std::piecewise_construct, &v15);
  std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100]((uint64_t)(v5 + 5), &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1D3ADAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MLAssetIO::ProtoWireFormatCallbackParser::setHandler<std::function<void ()(long long)>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int *v15;

  MLAssetIO::ProtoWireFormatCallbackParser::addBranchesToSearchTree(a1, (int **)a2, &v13);
  std::allocate_shared[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>,std::function<void ()(long long)> const&,void>(a3, &v12);
  v15 = (int *)(*(_QWORD *)(a2 + 8) - 4);
  v5 = std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 8), v15, (uint64_t)&std::piecewise_construct, &v15);
  std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100]((uint64_t)(v5 + 5), &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1D3ADB058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MLAssetIO::ProtoWireFormatCallbackParser::parse(MLAssetIO::ProtoWireFormatCallbackParser *this, CodedInputStream *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[2];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v7[0] = *(_QWORD *)this;
  v7[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parseRecursively((uint64_t)this, a2, (uint64_t)v7);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D3ADB104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MLAssetIO::ProtoWireFormatCallbackParser::parseRecursively(uint64_t a1, CodedInputStream *a2, uint64_t a3)
{
  MLAssetIO::ProtoWireFormatParser *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  _BYTE v73[32];

  v6 = (MLAssetIO::ProtoWireFormatParser *)MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v73, a2);
  result = MLAssetIO::ProtoWireFormatParser::nextField(v6);
  if ((_DWORD)result)
  {
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      if (!v8)
        goto LABEL_84;
      v9 = *(_QWORD *)a3 + 16;
      do
      {
        v10 = *(_DWORD *)(v8 + 32);
        v11 = v10 < (int)result;
        if (v10 >= (int)result)
          v12 = (uint64_t *)v8;
        else
          v12 = (uint64_t *)(v8 + 8);
        if (!v11)
          v9 = v8;
        v8 = *v12;
      }
      while (*v12);
      if (v9 == *(_QWORD *)a3 + 16 || (int)result < *(_DWORD *)(v9 + 32))
        goto LABEL_84;
      switch(MLAssetIO::ProtoWireFormatParser::tag((MLAssetIO::ProtoWireFormatParser *)v73) & 7)
      {
        case 0:
          v13 = *(std::__shared_weak_count **)(v9 + 48);
          v69 = *(_QWORD *)(v9 + 40);
          v70 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(long long)>>((uint64_t)&v69, &v71);
          v16 = v70;
          if (v70)
          {
            v17 = (unint64_t *)&v70->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v19 = v71;
          v61 = MLAssetIO::ProtoWireFormatParser::int64Value((MLAssetIO::ProtoWireFormatParser *)v73);
          v20 = v19[4];
          if (!v20)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v61);
          v21 = v72;
          if (v72)
          {
            v22 = (unint64_t *)&v72->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            goto LABEL_82;
          }
          goto LABEL_84;
        case 1:
          v30 = *(std::__shared_weak_count **)(v9 + 48);
          v67 = *(_QWORD *)(v9 + 40);
          v68 = v30;
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(unsigned long long)>>((uint64_t)&v67, &v71);
          v33 = v68;
          if (v68)
          {
            v34 = (unint64_t *)&v68->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = v71;
          v61 = MLAssetIO::ProtoWireFormatParser::fixed64Value((MLAssetIO::ProtoWireFormatParser *)v73);
          v37 = v36[4];
          if (!v37)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 48))(v37, &v61);
          v21 = v72;
          if (v72)
          {
            v38 = (unint64_t *)&v72->__shared_owners_;
            do
              v23 = __ldaxr(v38);
            while (__stlxr(v23 - 1, v38));
            goto LABEL_82;
          }
          goto LABEL_84;
        case 2:
          v24 = *(const void **)(v9 + 40);
          if (v24)
          {
            if (v25)
            {
              v26 = *(std::__shared_weak_count **)(v9 + 48);
              v71 = v25;
              v72 = v26;
              if (v26)
              {
                v27 = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
                v63 = v25;
                v64 = v26;
                do
                  v29 = __ldxr(v27);
                while (__stxr(v29 + 1, v27));
              }
              else
              {
                v63 = v25;
                v64 = 0;
              }
              MLAssetIO::ProtoWireFormatCallbackParser::parseRecursively(a1, a2, &v63);
              if (!v26)
                goto LABEL_79;
              v57 = (unint64_t *)&v26->__shared_owners_;
              do
                v56 = __ldaxr(v57);
              while (__stlxr(v56 - 1, v57));
              goto LABEL_77;
            }
          }
          v71 = 0;
          v72 = 0;
          v48 = *(std::__shared_weak_count **)(v9 + 48);
          v59 = *(_QWORD *)(v9 + 40);
          v60 = v48;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(google::protobuf::io::CodedInputStream &)>>((uint64_t)&v59, &v61);
          v51 = v60;
          if (v60)
          {
            v52 = (unint64_t *)&v60->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = *(_QWORD *)(v61 + 32);
          if (!v54)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, CodedInputStream *))(*(_QWORD *)v54 + 48))(v54, a2);
          v26 = v62;
          if (v62)
          {
            v55 = (unint64_t *)&v62->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
LABEL_77:
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
LABEL_79:
          v21 = v72;
          if (v72)
          {
            v58 = (unint64_t *)&v72->__shared_owners_;
            do
              v23 = __ldaxr(v58);
            while (__stlxr(v23 - 1, v58));
            goto LABEL_82;
          }
LABEL_84:
          result = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v73);
          if (!(_DWORD)result)
            return result;
          break;
        case 5:
          v39 = *(std::__shared_weak_count **)(v9 + 48);
          v65 = *(_QWORD *)(v9 + 40);
          v66 = v39;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()>>((uint64_t)&v65, &v71);
          v42 = v66;
          if (v66)
          {
            v43 = (unint64_t *)&v66->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = v71;
          LODWORD(v61) = MLAssetIO::ProtoWireFormatParser::fixed32Value((MLAssetIO::ProtoWireFormatParser *)v73);
          v46 = v45[4];
          if (!v46)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 48))(v46, &v61);
          v21 = v72;
          if (v72)
          {
            v47 = (unint64_t *)&v72->__shared_owners_;
            do
              v23 = __ldaxr(v47);
            while (__stlxr(v23 - 1, v47));
LABEL_82:
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          goto LABEL_84;
        default:
          goto LABEL_84;
      }
    }
  }
  return result;
}

void sub_1D3ADB5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(long long)>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;

  if (!*(_QWORD *)a1
  {
    *a2 = 0;
    a2[1] = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "The field handler for the field number path is not compatible with the protobuf message type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *a2 = result;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1D3ADB6E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(unsigned long long)>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;

  if (!*(_QWORD *)a1
  {
    *a2 = 0;
    a2[1] = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "The field handler for the field number path is not compatible with the protobuf message type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *a2 = result;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1D3ADB7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(unsigned int)>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;

  if (!*(_QWORD *)a1
  {
    *a2 = 0;
    a2[1] = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "The field handler for the field number path is not compatible with the protobuf message type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *a2 = result;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1D3ADB878(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *MLAssetIO::ProtoWireFormatCallbackParser::verifyAndCast<std::function<void ()(google::protobuf::io::CodedInputStream &)>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;

  if (!*(_QWORD *)a1
  {
    *a2 = 0;
    a2[1] = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "The field handler for the field number path is not compatible with the protobuf message type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *a2 = result;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1D3ADB940(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MLAssetIO::ProtoWireFormatCallbackParser::BranchField::~BranchField(MLAssetIO::ProtoWireFormatCallbackParser::BranchField *this)
{
  *(_QWORD *)this = &off_1E9567C58;
  std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E9567C58;
  std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1D8251A40);
}

void std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::destroy(a1, a2[1]);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::shared_ptr[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::BranchField,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E9568388;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D3ADBA78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MLAssetIO::ProtoWireFormatCallbackParser::BranchField *,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::__shared_ptr_default_delete<MLAssetIO::ProtoWireFormatCallbackParser::BranchField,MLAssetIO::ProtoWireFormatCallbackParser::BranchField>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_pointer<MLAssetIO::ProtoWireFormatCallbackParser::BranchField *,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::__shared_ptr_default_delete<MLAssetIO::ProtoWireFormatCallbackParser::BranchField,MLAssetIO::ProtoWireFormatCallbackParser::BranchField>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MLAssetIO::ProtoWireFormatCallbackParser::BranchField *,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::__shared_ptr_default_delete<MLAssetIO::ProtoWireFormatCallbackParser::BranchField,MLAssetIO::ProtoWireFormatCallbackParser::BranchField>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::__emplace_unique_key_args<int,std::pair<int const,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>> const&>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = operator new(0x38uLL);
    v16[1] = v6;
    v11[8] = *(_DWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v11 + 5) = *(_QWORD *)(a3 + 8);
    *((_QWORD *)v11 + 6) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return (uint64_t **)v11;
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>,std::function<void ()(google::protobuf::io::CodedInputStream &)> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(google::protobuf::io::CodedInputStream &)> const&,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D3ADBD38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(google::protobuf::io::CodedInputStream &)> const&,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>,0>(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E95682A8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &off_1E9567C78;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(a1 + 4), a2);
  return a1;
}

void sub_1D3ADBD8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95682A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95682A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>::~LeafField(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E9567C78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(google::protobuf::io::CodedInputStream &)>>::~LeafField(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E9567C78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1D8251A40);
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::Field>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

_QWORD *std::allocate_shared[abi:ne180100]<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>,std::function<void ()(long long)> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(long long)> const&,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D3ADBFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(long long)> const&,std::allocator<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>,0>(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E95682E0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &off_1E9567C98;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(a1 + 4), a2);
  return a1;
}

void sub_1D3ADC034(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95682E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95682E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>::~LeafField(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E9567C98;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void MLAssetIO::ProtoWireFormatCallbackParser::LeafField<std::function<void ()(long long)>>::~LeafField(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E9567C98;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1D8251A40);
}

void sub_1D3ADC268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3ADC338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3ADC43C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3ADC580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser(uint64_t this, CodedInputStream *a2)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = -1;
  return this;
}

uint64_t MLAssetIO::ProtoWireFormatParser::nextField(MLAssetIO::ProtoWireFormatParser *this)
{
  google::protobuf::io::CodedInputStream *v2;
  unsigned int v3;
  google::protobuf::io::CodedInputStream *v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned int TagFallback;
  uint64_t v8;
  google::protobuf::io::CodedInputStream *v9;
  char *v10;
  unsigned __int8 *v11;
  google::protobuf::io::CodedInputStream *v12;
  char *v13;
  int v14;
  unsigned int *v15;
  google::protobuf::io::CodedInputStream *v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t *v19;
  google::protobuf::io::CodedInputStream *v20;
  unint64_t *v21;
  unint64_t v22;
  int VarintSizeAsIntFallback;
  char v24;
  uint64_t result;
  void *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *exception;
  _BYTE v33[24];
  _BYTE v34[16];
  _QWORD v35[33];

  if ((*((_DWORD *)this + 2) & 7) == 2)
  {
    v2 = *(google::protobuf::io::CodedInputStream **)this;
    v3 = google::protobuf::io::CodedInputStream::BytesUntilLimit(*(google::protobuf::io::CodedInputStream **)this);
    google::protobuf::io::CodedInputStream::Skip(v2, v3);
    google::protobuf::io::CodedInputStream::PopLimit(*(_QWORD *)this, *((_DWORD *)this + 6));
  }
  v4 = *(google::protobuf::io::CodedInputStream **)this;
  v5 = **(char ***)this;
  v6 = *(unsigned __int8 **)(*(_QWORD *)this + 8);
  if (v5 == (char *)v6 && (*((_DWORD *)v4 + 11) || *((_DWORD *)v4 + 6) == *((_DWORD *)v4 + 10)))
  {
    v8 = 0;
    *((_DWORD *)v4 + 8) = 0;
    *((_BYTE *)v4 + 36) = 1;
    return v8;
  }
  if (v5 >= (char *)v6)
  {
    TagFallback = 0;
  }
  else
  {
    TagFallback = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      *((_DWORD *)v4 + 8) = TagFallback;
      *(_QWORD *)v4 = v5 + 1;
      goto LABEL_12;
    }
  }
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(*(google::protobuf::io::CodedInputStream **)this, TagFallback);
  *((_DWORD *)v4 + 8) = TagFallback;
LABEL_12:
  *((_DWORD *)this + 2) = TagFallback;
  v8 = TagFallback >> 3;
  switch(TagFallback & 7)
  {
    case 0u:
      v9 = *(google::protobuf::io::CodedInputStream **)this;
      v10 = **(char ***)this;
      if ((unint64_t)v10 < *(_QWORD *)(*(_QWORD *)this + 8) && (*v10 & 0x80000000) == 0)
      {
        *((_QWORD *)this + 2) = *v10;
        v11 = (unsigned __int8 *)(v10 + 1);
        goto LABEL_23;
      }
      *((_QWORD *)this + 2) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(v9);
      if ((v24 & 1) == 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to read varint integer for field number ", 47);
        std::ostream::operator<<();
        exception = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        MEMORY[0x1D8251788](exception, v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return v8;
    case 1u:
      v20 = *(google::protobuf::io::CodedInputStream **)this;
      v19 = (unint64_t *)((char *)this + 16);
      v9 = v20;
      v21 = *(unint64_t **)v20;
      if ((int)(*((_DWORD *)v20 + 2) - *(_QWORD *)v20) >= 8)
      {
        v22 = *v21;
        v11 = (unsigned __int8 *)(v21 + 1);
        *v19 = v22;
        goto LABEL_23;
      }
      if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)v9, v19))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to read FIXED64 for field number ", 40);
        std::ostream::operator<<();
        v27 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        MEMORY[0x1D8251788](v27, v33);
        __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return result;
    case 2u:
      v12 = *(google::protobuf::io::CodedInputStream **)this;
      v13 = **(char ***)this;
      if ((unint64_t)v13 >= *(_QWORD *)(*(_QWORD *)this + 8) || *v13 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(v12);
        *((_DWORD *)this + 4) = VarintSizeAsIntFallback;
        if (VarintSizeAsIntFallback < 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to read length-delimited length for field number ", 56);
          std::ostream::operator<<();
          v31 = __cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          MEMORY[0x1D8251788](v31, v33);
          __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v14 = VarintSizeAsIntFallback;
        v12 = *(google::protobuf::io::CodedInputStream **)this;
      }
      else
      {
        v14 = *v13;
        *((_DWORD *)this + 4) = v14;
        *(_QWORD *)v12 = v13 + 1;
      }
      *((_DWORD *)this + 6) = google::protobuf::io::CodedInputStream::PushLimit(v12, v14);
      return v8;
    case 5u:
      v16 = *(google::protobuf::io::CodedInputStream **)this;
      v15 = (unsigned int *)((char *)this + 16);
      v9 = v16;
      v17 = *(unsigned int **)v16;
      if ((int)(*((_DWORD *)v16 + 2) - *(_QWORD *)v16) < 4)
      {
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)v9, v15))
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to read FIXED32 for field number ", 40);
          std::ostream::operator<<();
          v26 = __cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          MEMORY[0x1D8251788](v26, v33);
          __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else
      {
        v18 = *v17;
        v11 = (unsigned __int8 *)(v17 + 1);
        *v15 = v18;
LABEL_23:
        *(_QWORD *)v9 = v11;
      }
      break;
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Field number ", 13);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" has wireType ", 14);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", which is not supported.", 25);
      v30 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      MEMORY[0x1D8251788](v30, v33);
      __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v8;
}

void sub_1D3ADCB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MLAssetIO::ProtoWireFormatParser::int32Value(MLAssetIO::ProtoWireFormatParser *this)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "int32");
  MLAssetIO::verifyWireType((uint64_t)__p, *((_DWORD *)this + 2), 0);
  if (v4 < 0)
    operator delete(__p[0]);
  return *((unsigned int *)this + 4);
}

void sub_1D3ADCBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MLAssetIO::verifyWireType(uint64_t result, char a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *exception;
  char v13[24];
  char v14[16];
  uint64_t v15[33];

  if ((a2 & 7) != a3)
  {
    v3 = result;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to read ", 15);
    v5 = *(char *)(v3 + 23);
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(_QWORD *)v3;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = *(_QWORD *)(v3 + 8);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" value because field number ", 28);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" uses wireType ", 15);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)". It should have used wireType ", 31);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    MEMORY[0x1D8251788](exception, v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D3ADCD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t MLAssetIO::ProtoWireFormatParser::int64Value(MLAssetIO::ProtoWireFormatParser *this)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "int64");
  MLAssetIO::verifyWireType((uint64_t)__p, *((_DWORD *)this + 2), 0);
  if (v4 < 0)
    operator delete(__p[0]);
  return *((_QWORD *)this + 2);
}

void sub_1D3ADCDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MLAssetIO::ProtoWireFormatParser::fixed64Value(MLAssetIO::ProtoWireFormatParser *this)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "fixed64");
  MLAssetIO::verifyWireType((uint64_t)__p, *((_DWORD *)this + 2), 1);
  if (v4 < 0)
    operator delete(__p[0]);
  return *((_QWORD *)this + 2);
}

void sub_1D3ADCE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MLAssetIO::ProtoWireFormatParser::fixed32Value(MLAssetIO::ProtoWireFormatParser *this)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "fixed32");
  MLAssetIO::verifyWireType((uint64_t)__p, *((_DWORD *)this + 2), 5);
  if (v4 < 0)
    operator delete(__p[0]);
  return *((unsigned int *)this + 4);
}

void sub_1D3ADCE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MLAssetIO::ProtoWireFormatParser::length(MLAssetIO::ProtoWireFormatParser *this)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "message length");
  MLAssetIO::verifyWireType((uint64_t)__p, *((_DWORD *)this + 2), 2);
  if (v4 < 0)
    operator delete(__p[0]);
  return *((unsigned int *)this + 4);
}

void sub_1D3ADCF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MLAssetIO::ProtoWireFormatParser::copyMessageFieldTo(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  signed int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;

  v3 = this;
  v4 = *(_DWORD *)(this + 16);
  if (*((int *)a2 + 4) < 5)
  {
    this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v4);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    if (v4 < 0x80)
    {
      v7 = *(_DWORD *)(this + 16);
      v6 = (_BYTE *)*((_QWORD *)a2 + 1);
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a2 + 1);
      do
      {
        *v6++ = v4 | 0x80;
        v7 = v4 >> 7;
        v8 = v4 >> 14;
        v4 >>= 7;
      }
      while (v8);
    }
    *v6 = v7;
    v9 = (_DWORD)v6 - v5 + 1;
    *((_QWORD *)a2 + 1) += v9;
    *((_DWORD *)a2 + 4) -= v9;
  }
  v16 = 0;
  v15 = 0;
  v10 = *(_DWORD *)(v3 + 16);
  if (v10)
  {
    v11 = 0;
    do
    {
      v12 = v15;
      if (v15 == v11)
      {
        google::protobuf::io::CodedInputStream::Skip(*(google::protobuf::io::CodedInputStream **)v3, v11);
        google::protobuf::io::CodedInputStream::GetDirectBufferPointer(*(google::protobuf::io::CodedInputStream **)v3, (const void **)&v16, &v15);
        v11 = 0;
        v12 = v15;
      }
      v13 = v12 - v11;
      if (v13 >= v10)
        v14 = v10;
      else
        v14 = v13;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, (char *)v16 + v11, v14);
      v11 += v14;
      v10 -= v14;
    }
    while (v10);
  }
  return this;
}

uint64_t MLAssetIO::ProtoWireFormatParser::copyFieldTo(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *exception;
  uint64_t v11;
  _BYTE v12[16];
  _QWORD v13[33];

  switch(*(_DWORD *)(this + 8) & 7)
  {
    case 0:
      v2 = *(_QWORD *)(this + 16);
      if (*((int *)a2 + 4) < 10)
      {
        this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v2);
      }
      else
      {
        v3 = *((_QWORD *)a2 + 1);
        if (v2 < 0x80)
        {
          v5 = *(_QWORD *)(this + 16);
          v4 = (_BYTE *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v4 = (_BYTE *)*((_QWORD *)a2 + 1);
          do
          {
            *v4++ = v2 | 0x80;
            v5 = v2 >> 7;
            v6 = v2 >> 14;
            v2 >>= 7;
          }
          while (v6);
        }
        *v4 = v5;
        v7 = (_DWORD)v4 - v3 + 1;
        *((_QWORD *)a2 + 1) += v7;
        *((_DWORD *)a2 + 4) -= v7;
      }
      break;
    case 1:
      this = google::protobuf::io::CodedOutputStream::WriteLittleEndian64((uint64_t)a2, *(_QWORD *)(this + 16));
      break;
    case 2:
      this = MLAssetIO::ProtoWireFormatParser::copyMessageFieldTo(this, a2);
      break;
    case 5:
      this = google::protobuf::io::CodedOutputStream::WriteLittleEndian32((uint64_t)a2, *(_DWORD *)(this + 16));
      break;
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Field number ", 13);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" uses wireType ", 15);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which is not supported.", 25);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      MEMORY[0x1D8251788](exception, &v11);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

void sub_1D3ADD204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MLAssetIO::ProtoWireFormatParser::tag(MLAssetIO::ProtoWireFormatParser *this)
{
  return *((unsigned int *)this + 2);
}

void sub_1D3ADD31C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3ADD430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3ADD620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3ADD6E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3ADD780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3ADD830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3ADD9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3ADDAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3ADDF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D3ADE090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3ADE548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3ADE998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3ADEB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D3ADED18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3ADF068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void setShortDescription(uint64_t a1, _BYTE *a2, std::string *__str)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  std::string *v18;
  std::string **v19;
  uint64_t *v20;
  unsigned __int8 *v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = (uint64_t *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(int *)(a1 + 8);
  v7 = a2[23];
  if ((_DWORD)v6)
  {
    v9 = &v5[v6];
    v10 = *(unsigned __int8 **)a2;
    if (v7 >= 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v7 >= 0)
      v12 = a2;
    else
      v12 = *(unsigned __int8 **)a2;
    while (1)
    {
      v13 = *v5;
      v14 = *(unsigned __int8 **)(*v5 + 16);
      v15 = v14[23];
      if ((v15 & 0x80u) == 0)
        v16 = v14[23];
      else
        v16 = *((_QWORD *)v14 + 1);
      if (v16 == v11)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v14, v12, *((_QWORD *)v14 + 1)))
          {
LABEL_24:
            v20 = *(uint64_t **)(v13 + 24);
            v19 = (std::string **)(v13 + 24);
            v18 = (std::string *)v20;
            if (v20 == &google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v19, (uint64_t)__str);
            else
              std::string::operator=(v18, __str);
            return;
          }
        }
        else
        {
          if (!v14[23])
            goto LABEL_24;
          v17 = v12;
          while (*v14 == *v17)
          {
            ++v14;
            ++v17;
            if (!--v15)
              goto LABEL_24;
          }
        }
      }
      if (++v5 == v9)
        goto LABEL_27;
    }
  }
  v10 = *(unsigned __int8 **)a2;
LABEL_27:
  if (v7 >= 0)
    v21 = a2;
  else
    v21 = v10;
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("No input feature named: %s was found."), v21);
}

void sub_1D3ADF488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_1D3ADF724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_1D3ADF83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1D3ADFBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  uint64_t v28;

  MEMORY[0x1D8251A40](v28, 0x10A1C40FB0D5B10);
  CoreML::Specification::Metadata::~Metadata((CoreML::Specification::Metadata *)&a11);

  _Unwind_Resume(a1);
}

void sub_1D3ADFD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3ADFE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3ADFEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3ADFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3AE0024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3AE00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t defaultFunctionDescriptionSpecification(const CoreML::Specification::ModelDescription *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *exception;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string v22;
  std::string v23;
  __int128 v24;
  std::string::size_type v25;

  v1 = (unsigned __int8 *)*((_QWORD *)a1 + 19);
  v2 = *((_QWORD *)a1 + 13);
  if (v2)
    v3 = (uint64_t *)(v2 + 8);
  else
    v3 = 0;
  v4 = *((int *)a1 + 24);
  if (!(_DWORD)v4)
  {
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    v14 = (char)v1[23];
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v1;
    else
      v15 = *(const std::string::value_type **)v1;
    if (v14 >= 0)
      v16 = v1[23];
    else
      v16 = *((_QWORD *)v1 + 1);
    v17 = std::string::append(&v22, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25 = v19->__r_.__value_.__r.__words[2];
    v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D8251764](exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v5 = &v3[v4];
  v6 = (char)v1[23];
  if (v6 >= 0)
    v7 = v1[23];
  else
    v7 = *((_QWORD *)v1 + 1);
  while (1)
  {
    v8 = *v3;
    v9 = *(unsigned __int8 **)(*v3 + 88);
    v10 = v9[23];
    v11 = (v10 & 0x80u) == 0 ? v9[23] : *((_QWORD *)v9 + 1);
    if (v11 == v7)
    {
      if (v6 >= 0)
        v12 = v1;
      else
        v12 = *(unsigned __int8 **)v1;
      if ((v10 & 0x80) == 0)
      {
        if (!v9[23])
          return v8;
        while (*v9 == *v12)
        {
          ++v9;
          ++v12;
          if (!--v10)
            return v8;
        }
        goto LABEL_21;
      }
      if (!memcmp(*(const void **)v9, v12, *((_QWORD *)v9 + 1)))
        return v8;
    }
LABEL_21:
    if (++v3 == v5)
      goto LABEL_22;
  }
}

void sub_1D3AE0298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  char v7;
  std::string v8[2];

  if (!a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/arenastring.h", 303);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: initial_value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v6;
}

void sub_1D3AE03CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::set_shortdescription(CoreML::Specification::Metadata *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/mlmodel/build/format/Model.pb.h", 3061);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1D3AE04A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::set_versionstring(CoreML::Specification::Metadata *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/mlmodel/build/format/Model.pb.h", 3114);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1D3AE056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::set_author(CoreML::Specification::Metadata *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/mlmodel/build/format/Model.pb.h", 3167);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1D3AE0638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::set_license(CoreML::Specification::Metadata *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/mlmodel/build/format/Model.pb.h", 3220);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1D3AE0704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::operator[](uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena ***v4;
  google::protobuf::Arena **ValueTypeInternal;

  v4 = (google::protobuf::Arena ***)google::protobuf::Map<std::string,std::string>::InnerMap::operator[](*(_QWORD **)(a1 + 16), a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 3;
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  __n128 result;
  uint64_t v7;

  v4 = *a1;
  if (*a1 == a2)
  {
    v7 = operator new();
    result = *a3;
    *(__n128 *)v7 = *a3;
    *(_QWORD *)(v7 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *a1 = v7;
  }
  else
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    result = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::operator[](_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_1D3AE0894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal(google::protobuf::Arena **a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  google::protobuf::Arena **Aligned;
  google::protobuf::Arena **v6;
  google::protobuf::Arena **v7;
  std::string *v8;

  v4 = *a1;
  if (v4)
  {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 48);
    v6 = (google::protobuf::Arena **)*a1;
    Aligned[1] = 0;
    Aligned[2] = 0;
    *Aligned = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v6, (google::protobuf::Arena *)Aligned);
    v7 = (google::protobuf::Arena **)*a1;
    Aligned[4] = 0;
    Aligned[5] = 0;
    Aligned[3] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v7, (google::protobuf::Arena *)(Aligned + 3));
    std::string::operator=((std::string *)Aligned, (const std::string *)a2);
  }
  else
  {
    v8 = (std::string *)operator new();
    Aligned = (google::protobuf::Arena **)v8;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    Aligned[3] = 0;
    Aligned[4] = 0;
    Aligned[5] = 0;
  }
  return Aligned;
}

void sub_1D3AE097C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,std::string>::InnerMap::insert@<D0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  google::protobuf::Arena *v10;
  std::string *Aligned;
  std::string::size_type v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (const void **)a2, 0, (uint64_t)&v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (const void **)a2, 0, (uint64_t)&v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x1E0DE4EE8], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (std::string::size_type)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v9, v12, (std::string::size_type *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(_QWORD *a1@<X0>, unint64_t a2@<X1>, std::string::size_type a3@<X2>, std::string::size_type *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  std::string v20[2];

  v8 = a1[3];
  if (v8 != a1[1] && !*(_QWORD *)(a1[4] + 8 * v8))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 655);
    v9 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: index_of_first_non_null_ == num_buckets_ || table_[index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (google::protobuf::internal::LogMessage *)v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (const void **)a3, 0, (uint64_t)v20);
  if (v20[0].__r_.__value_.__r.__words[0])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 661);
    v10 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: find(*KeyPtrFromNodePtr(node)) == end(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (google::protobuf::internal::LogMessage *)v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v11 = a1[4];
  v12 = *(_QWORD *)(v11 + 8 * a2);
  if (!v12)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v11 + 8 * a2) = a3;
    size = (std::string::size_type)a1;
    goto LABEL_11;
  }
  if (v12 != *(_QWORD *)(v11 + 8 * (a2 ^ 1)))
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::TableEntryIsTooLong((uint64_t)a1, a2))
    {
      v13 = a1[4];
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v13 + 8 * a2);
      *(_QWORD *)(v13 + 8 * a2) = a3;
      *a4 = a3;
      a4[1] = (std::string::size_type)a1;
LABEL_14:
      a4[2] = a2;
      return;
    }
    google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert((uint64_t)a1, a2);
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree((uint64_t)a1, a2, a3, v20);
    size = v20[0].__r_.__value_.__l.__size_;
    a3 = v20[0].__r_.__value_.__r.__words[0];
    v16 = a2 & 0xFFFFFFFFFFFFFFFELL;
    a2 = v20[0].__r_.__value_.__r.__words[2];
    if (v20[0].__r_.__value_.__r.__words[2] != v16)
    {
      v18 = v20[0].__r_.__value_.__l.__size_;
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 668);
      v17 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (result.bucket_index_) == (b & ~static_cast<size_type>(1)): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (google::protobuf::internal::LogMessage *)v17);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
      size = v18;
    }
LABEL_11:
    v15 = a1[3];
    if (a2 < v15)
      v15 = a2;
    a1[3] = v15;
    *a4 = a3;
    a4[1] = size;
    goto LABEL_14;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree((uint64_t)a1, a2, a3, a4);
}

void sub_1D3AE0D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  const void **v15;

  result = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, a2);
  v9 = result;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (!v11)
    goto LABEL_10;
  if (v11 == *(_QWORD *)(v10 + 8 * (result ^ 1)))
  {
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    v15 = a2;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, &v15);
    if (v12 + 8 != result)
    {
      if (a3)
        *a3 = result;
      result = (uint64_t)google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::iterator_base(&v13, result, a1, v9);
      *(_OWORD *)a4 = v13;
      *(_QWORD *)(a4 + 16) = v14;
      goto LABEL_12;
    }
LABEL_10:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_12;
  }
  while (1)
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, (unsigned __int8 *)v11, (unsigned __int8 *)a2);
    if ((_DWORD)result)
      break;
    v11 = *(_QWORD *)(v11 + 32);
    if (!v11)
      goto LABEL_10;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = v9;
LABEL_12:
  *(_QWORD *)(a4 + 24) = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return ((*(_QWORD *)(a1 + 16) | 1) * v4) & (*(_QWORD *)(a1 + 8) - 1);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 24;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v5, *(const void ***)(v3 + 32), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v5, *a2, *(const void ***)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::iterator_base(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v5;
  char v7;
  std::string v8[2];

  *a1 = *(_QWORD *)(a2 + 32);
  a1[1] = a3;
  a1[2] = a4;
  if ((a4 & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 394);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (bucket_index_ % 2) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1D3AE105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::Resize(_QWORD *a1, unint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  unint64_t v6;
  google::protobuf::Arena **EmptyTable;
  unint64_t v8;
  uint64_t v9;
  char v10;
  std::string v11[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 748);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (new_num_buckets) >= (kMinTableSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = (_QWORD *)a1[4];
  v6 = a1[1];
  a1[1] = a2;
  EmptyTable = google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable((uint64_t)a1, a2);
  v8 = a1[3];
  a1[3] = a1[1];
  a1[4] = EmptyTable;
  while (v8 < v6)
  {
    v9 = v5[v8];
    if (v9)
    {
      if (v9 == v5[v8 ^ 1])
        google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(a1, (uint64_t)v5, v8++);
      else
        google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(a1, (uint64_t)v5, v8);
    }
    ++v8;
  }
  if (!a1[5])
    operator delete(v5);
}

void sub_1D3AE1178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  std::string *v5;
  google::protobuf::Arena **v6;
  char v8;
  std::string v9[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 916);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: n >= kMinTableSize: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  if ((a2 & (a2 - 1)) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 917);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n & (n - 1)) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  v9[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 40);
  v6 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate((google::protobuf::Arena **)v9, a2, 0);
  bzero(v6, 8 * a2);
  return v6;
}

void sub_1D3AE126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v4;
  std::string::size_type v5;
  unint64_t v6;
  std::string::size_type v7[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v6, v4, v7);
    v4 = v5;
  }
  while (v5);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::string::size_type v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v7, (std::string::size_type)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x1E0DE4EE8], 8 * a2);
  else
    return (google::protobuf::Arena **)operator new(8 * a2);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!v3)
    operator delete(a2);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(_QWORD *)(a1 + 16))
      operator delete(a2);
  }
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::TableEntryIsTooLong(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v6;
  std::string v7[2];

  v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  do
  {
    ++v2;
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
  if (v2 >= 9)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 861);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (count) <= (kMaxLength): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return v2 > 7;
}

void sub_1D3AE14C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  std::string *v8;
  google::protobuf::Arena *v9;
  uint64_t *Aligned;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  char v14;
  std::string v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    if (v5 == v6)
    {
LABEL_10:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 820);
      v8 = google::protobuf::internal::LogMessage::operator<<(&v15, "CHECK failed: !TableEntryIsTree(b) && !TableEntryIsTree(b ^ 1): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (google::protobuf::internal::LogMessage *)v8);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15.__r_.__value_.__l.__data_);
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
  }
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_11:
  v9 = *(google::protobuf::Arena **)(a1 + 40);
  if (v9)
    Aligned = (uint64_t *)google::protobuf::Arena::AllocateAligned(v9, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v11 = (uint64_t)Aligned;
  v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  v16 = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15.__r_.__value_.__l.__size_;
  v15.__r_.__value_.__l.__size_ = 0;
  std::set<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v15);
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v15, (_QWORD *)v15.__r_.__value_.__l.__size_);
  v12 = google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(a1, a2, v11);
  if (google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(a1, a2 ^ 1, v11) + v12 != *(_QWORD *)(v11 + 24))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 831);
    v13 = google::protobuf::internal::LogMessage::operator<<(&v15, "CHECK failed: (count) == (tree->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (google::protobuf::internal::LogMessage *)v13);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v11;
}

void sub_1D3AE1658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t *v11;
  char v13;
  std::string v14[2];

  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v8 + 8 * a2) != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 696);
    v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (table_[b]) == (table_[b ^ 1]): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (google::protobuf::internal::LogMessage *)v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a3 + 32) = 0;
  v10 = *(_QWORD *)(v8 + 8 * a2);
  v14[0].__r_.__value_.__r.__words[0] = a3;
  v11 = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v10, (const void ***)v14, (uint64_t *)v14);
  return google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::iterator_base(a4, (uint64_t)v11, a1, a2 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_1D3AE1748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const void **v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    v8 = (const void **)v3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    v6 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_1D3AE1814(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(uint64_t *result, const void ***a2, const void ****a3)
{
  const void ***v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  const void ****v8;
  BOOL v9;

  if (a2 != (const void ***)a3)
  {
    v4 = a2;
    v5 = (uint64_t)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ****)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ****)v4[2];
          v9 = *v8 == v4;
          v4 = (const void ***)v8;
        }
        while (!v9);
      }
      v4 = (const void ***)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>((_QWORD *)a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    v7[4] = *a4;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, const void ***a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 3), *a5, (const void **)a2[4]))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 3), (const void **)v12[4], *a5))
    {
      goto LABEL_16;
    }
    return std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 3), (const void **)a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 3), *a5, (const void **)v15[4]))return std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, const void ***a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 24;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, *a3, (const void **)v4[4]))break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, (const void **)v8[4], *a3))break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x1E0DE4EE8], 40 * a2);
  else
    return (google::protobuf::Arena **)operator new(40 * a2);
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::iterator_base(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v5;
  char v7;
  std::string v8[2];

  *a1 = *(_QWORD *)(a2 + 32);
  a1[1] = a3;
  a1[2] = a4;
  if ((a4 & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 394);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (bucket_index_ % 2) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1D3AE1CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
    return google::protobuf::Arena::AddListNode((google::protobuf::Arena *)result, a2, (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>);
  return result;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL MIOEqualRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL MIOLocationInRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 <= a1 && a3 >= a1;
}

__CFString *NSStringFromMIORange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;
  uint64_t v6;

  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = CFSTR("InvalidRange");
  }
  else
  {
    if (a2 == -1)
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[%zd, unbound]"), a1, v6, v2, v3);
    else
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[%zd, %zd]"), a1, a2, v2, v3);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_1D3AE23D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE24EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE262C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AE286C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D8251A40](v3, 0x10A1C40B6FDD44FLL);
  CoreML::Specification::FeatureDescription::~FeatureDescription((CoreML::Specification::FeatureDescription *)va);

  _Unwind_Resume(a1);
}

void sub_1D3AE2974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE2A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3AE2B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE2C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE2CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE2D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CFString *MIOMultiArrayDataTypeToString(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;

  v1 = CFSTR("unknown");
  v2 = CFSTR("Int32");
  if (a1 == 65600)
    v3 = CFSTR("Double");
  else
    v3 = CFSTR("unknown");
  if (a1 != 131104)
    v2 = v3;
  if (a1 == 65568)
    v1 = CFSTR("Float32");
  if (a1 == 65552)
    v1 = CFSTR("Float16");
  if (a1 <= 65599)
    return v1;
  else
    return v2;
}

void sub_1D3AE3140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D3AE32FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AE34A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE3620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE37AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE3840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE3BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D3AE3CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D3AE3EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE41A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE4328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3AE43D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE4618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);
  CoreML::Specification::ImageFeatureType_ImageSize::~ImageFeatureType_ImageSize((CoreML::Specification::ImageFeatureType_ImageSize *)va);

  _Unwind_Resume(a1);
}

void sub_1D3AE47CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AE4908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3AE4C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AE4D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3AE4F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE501C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE50A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureDescription::set_shortdescription(CoreML::Specification::FeatureDescription *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/mlmodel/build/format/Model.pb.h", 2963);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1D3AE5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void sub_1D3AE52E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D3AE5470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D3AE55E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE5788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE5970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nullSafeEqual(objc_object *a1, objc_object *a2)
{
  objc_object *v3;
  objc_object *v4;
  objc_object *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
    v6 = -[objc_object isEqual:](v3, "isEqual:", v4);
  else
    v6 = v3 == v4;

  return v6;
}

void sub_1D3AE5A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AE5A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MIOParseModelSpecification(CodedInputStream *a1, MIOParserContext *a2, MIOModelInfo *a3)
{
  void **v5;
  int Field;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  MIOParserContext *v16;
  int v17;
  void *v18;
  id v19;
  _QWORD *v20;
  id v21;
  __int128 *v22;
  uint64_t v23;
  id v24;
  _DWORD *v25;
  id v26;
  __int128 *v27;
  uint64_t v28;
  _DWORD *v29;
  __int128 *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  __int128 *v34;
  uint64_t v35;
  _DWORD *v36;
  __int128 *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  void *v52;
  uint64_t v53;
  id *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  void *v59;
  BOOL v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t k;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t m;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t n;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  google::protobuf::MessageLite *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  MIOModelInfo *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  id *v95;
  unint64_t v96;
  uint64_t v97;
  id *v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  void *exception;
  id v106;
  MIOParserContext *v107;
  google::protobuf::MessageLite **v108;
  id obj;
  uint64_t v110;
  id v111;
  id *location;
  id *locationa;
  id *locationb;
  MIOModelInfo *v115;
  __int128 v116;
  __int128 v117;
  int v118;
  __int128 v119;
  __int128 v120;
  id v121;
  uint8_t v122[32];
  uint8_t buf[16];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _QWORD v131[4];
  id *v132;
  _QWORD v133[4];
  id v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  void *__p;
  void *v144;
  _DWORD *v145;
  __int128 v146;
  id v147;
  __int128 *v148;
  id v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v107 = a2;
  MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v122, a1);
  v108 = (google::protobuf::MessageLite **)((char *)a3 + 8);
  location = (id *)((char *)a3 + 64);
  v115 = a3;
  v5 = (void **)((char *)a3 + 48);
  v116 = 0u;
  v117 = 0u;
  v118 = 1065353216;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  while (1)
  {
    Field = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v122);
    v7 = Field;
    if (Field > 1)
    {
      if (Field == 2)
      {
        _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v146);
        std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100]((uint64_t)v108, &v146);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if ((google::protobuf::MessageLite::ParseFromCodedStream(*v108, (google::protobuf::io::CodedInputStream *)a1) & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D825177C](exception, "Failed to read ModelDescription message.");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_14;
      }
      if (Field == 10)
      {
        *((_DWORD *)v115 + 6) = MLAssetIO::ProtoWireFormatParser::int32Value((MLAssetIO::ProtoWireFormatParser *)v122);
LABEL_14:
        v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_15:
        v12 = "INVALID";
        goto LABEL_16;
      }
      goto LABEL_20;
    }
    if (Field == 1)
    {
      *(_DWORD *)v115 = MLAssetIO::ProtoWireFormatParser::int32Value((MLAssetIO::ProtoWireFormatParser *)v122);
      goto LABEL_14;
    }
    if (!Field)
      break;
LABEL_20:
    if ((Field & 0xFFFFFFFE) == 0xC8)
    {
      v16 = v107;
      MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)&v146, a1);
      while (1)
      {
        v17 = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)&v146);
        if (!v17)
          break;
        v18 = (void *)MEMORY[0x1D8251C08]();
        if (v17 == 1)
          parsePipeline(a1, v16, v5);
        objc_autoreleasePoolPop(v18);
      }

      goto LABEL_30;
    }
    if (Field <= 499)
    {
      switch(Field)
      {
        case 400:
          parseClassLabels(a1, 100, 101, (ModelParserWorkspace *)&v116);
          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_37:
          v12 = "MLModelType_glmClassifier";
          goto LABEL_16;
        case 401:
          parseClassLabels(a1, 100, 101, (ModelParserWorkspace *)&v116);
          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_83:
          v12 = "MLModelType_supportVectorClassifier";
          goto LABEL_16;
        case 402:
          parseClassLabels(a1, 100, 101, (ModelParserWorkspace *)&v116);
          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_87:
          v12 = "MLModelType_treeEnsembleClassifier";
          goto LABEL_16;
        case 403:
          break;
        case 404:
          v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)&v139);
          v25 = operator new(4uLL);
          __p = v25;
          *v25 = 3;
          v145 = v25 + 1;
          v144 = v25 + 1;
          v26 = v24;
          *(_QWORD *)&v146 = &off_1E9556D48;
          *((_QWORD *)&v146 + 1) = v26;
          v148 = &v146;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(&v139, &__p, &v146);
          v27 = v148;
          if (v148 == &v146)
          {
            v27 = &v146;
            v28 = 4;
          }
          else
          {
            if (!v148)
              goto LABEL_115;
            v28 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_115:
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          v29 = operator new(4uLL);
          __p = v29;
          *v29 = 100;
          v145 = v29 + 1;
          v144 = v29 + 1;
          *(_QWORD *)&v146 = &off_1E9556DA0;
          *((_QWORD *)&v146 + 1) = &v116;
          v148 = &v146;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(&v139, &__p, &v146);
          v30 = v148;
          if (v148 == &v146)
          {
            v30 = &v146;
            v31 = 4;
          }
          else
          {
            if (!v148)
              goto LABEL_129;
            v31 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_129:
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          v36 = operator new(4uLL);
          __p = v36;
          *v36 = 101;
          v145 = v36 + 1;
          v144 = v36 + 1;
          *(_QWORD *)&v146 = &off_1E9556DF8;
          *((_QWORD *)&v146 + 1) = &v116;
          v148 = &v146;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(&v139, &__p, &v146);
          v37 = v148;
          if (v148 == &v146)
          {
            v37 = &v146;
            v38 = 4;
          }
          else
          {
            if (!v148)
              goto LABEL_147;
            v38 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_147:
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)&v139, a1);
          objc_storeStrong(location, v24);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }

          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_155:
          v12 = "MLModelType_kNearestNeighborsClassifier";
          goto LABEL_16;
        default:
          if (Field == 202)
          {
            parsePipeline(a1, v107, v5);
            v11 = (void *)MEMORY[0x1E0CB3940];
            goto LABEL_89;
          }
          if (Field != 303)
            goto LABEL_30;
          break;
      }
LABEL_61:
      parseNeuralNetworkSpecification(a1, (MIOModelSpecificInfo *)v5, (ModelParserWorkspace *)&v116);
      goto LABEL_30;
    }
    if (Field <= 609)
    {
      if (Field != 500)
      {
        if (Field == 502)
        {
          parseMILProgram((google::protobuf::io::CodedInputStream *)a1, v107, (MIOModelSpecificInfo *)v5, (ModelParserWorkspace *)&v116);
          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_85:
          v12 = "MLModelType_mlProgram";
          goto LABEL_16;
        }
        if (Field == 556)
        {
          v19 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)&v139);
          v20 = operator new(8uLL);
          __p = v20;
          *v20 = 0x100000001;
          v145 = v20 + 1;
          v144 = v20 + 1;
          v21 = v19;
          *(_QWORD *)&v146 = &off_1E9556AE0;
          *((_QWORD *)&v146 + 1) = v21;
          v148 = &v146;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(&v139, &__p, &v146);
          v22 = v148;
          if (v148 == &v146)
          {
            v22 = &v146;
            v23 = 4;
LABEL_121:
            (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
          }
          else if (v148)
          {
            v23 = 5;
            goto LABEL_121;
          }
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          v32 = operator new(8uLL);
          __p = v32;
          *v32 = 0x200000001;
          v145 = v32 + 1;
          v144 = v32 + 1;
          v33 = v21;
          *(_QWORD *)&v146 = &off_1E9556B38;
          *((_QWORD *)&v146 + 1) = v33;
          v148 = &v146;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(&v139, &__p, &v146);
          v34 = v148;
          if (v148 == &v146)
          {
            v34 = &v146;
            v35 = 4;
LABEL_135:
            (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
          }
          else if (v148)
          {
            v35 = 5;
            goto LABEL_135;
          }
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)&v139, a1);
          objc_storeStrong(location, v19);
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1))
          {
            v40 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }

          v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_144:
          v12 = "MLModelType_linkedModel";
          goto LABEL_16;
        }
        goto LABEL_30;
      }
      goto LABEL_61;
    }
    if (Field > 2000)
    {
      if (Field == 2001)
      {
        parseClassLabels(a1, 200, 0, (ModelParserWorkspace *)&v116);
        v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_81:
        v12 = "MLModelType_wordTagger";
        goto LABEL_16;
      }
      if (Field == 2004)
      {
        parseClassLabels(a1, 200, 0, (ModelParserWorkspace *)&v116);
        v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_65:
        v12 = "MLModelType_gazetteer";
        goto LABEL_16;
      }
    }
    else
    {
      if (Field == 610)
      {
        parseClassLabels(a1, 100, 101, (ModelParserWorkspace *)&v116);
        v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_79:
        v12 = "MLModelType_nonMaximumSuppression";
        goto LABEL_16;
      }
      if (Field == 2000)
      {
        parseClassLabels(a1, 200, 0, (ModelParserWorkspace *)&v116);
        v11 = (void *)MEMORY[0x1E0CB3940];
LABEL_44:
        v12 = "MLModelType_textClassifier";
        goto LABEL_16;
      }
    }
LABEL_30:
    v11 = (void *)MEMORY[0x1E0CB3940];
    if (v7 <= 559)
    {
      if (v7 <= 399)
      {
        if (v7 <= 299)
        {
          switch(v7)
          {
            case 200:
              v12 = "MLModelType_pipelineClassifier";
              break;
            case 201:
              v12 = "MLModelType_pipelineRegressor";
              break;
            case 202:
LABEL_89:
              v12 = "MLModelType_pipeline";
              break;
            default:
              goto LABEL_15;
          }
        }
        else
        {
          switch(v7)
          {
            case 300:
              v12 = "MLModelType_glmRegressor";
              break;
            case 301:
              v12 = "MLModelType_supportVectorRegressor";
              break;
            case 302:
              v12 = "MLModelType_treeEnsembleRegressor";
              break;
            case 303:
              v12 = "MLModelType_neuralNetworkRegressor";
              break;
            case 304:
              v12 = "MLModelType_bayesianProbitRegressor";
              break;
            default:
              goto LABEL_15;
          }
        }
      }
      else
      {
        if (v7 > 499)
        {
          if (v7 <= 501)
          {
            if (v7 == 500)
              v12 = "MLModelType_neuralNetwork";
            else
              v12 = "MLModelType_itemSimilarityRecommender";
            goto LABEL_16;
          }
          if (v7 == 502)
            goto LABEL_85;
          if (v7 == 555)
          {
            v12 = "MLModelType_customModel";
            goto LABEL_16;
          }
          if (v7 != 556)
            goto LABEL_15;
          goto LABEL_144;
        }
        switch(v7)
        {
          case 400:
            goto LABEL_37;
          case 401:
            goto LABEL_83;
          case 402:
            goto LABEL_87;
          case 403:
            v12 = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            goto LABEL_155;
          default:
            goto LABEL_15;
        }
      }
    }
    else if (v7 > 899)
    {
      switch(v7)
      {
        case 2000:
          goto LABEL_44;
        case 2001:
          goto LABEL_81;
        case 2002:
          v12 = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          v12 = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          goto LABEL_65;
        case 2005:
          v12 = "MLModelType_wordEmbedding";
          break;
        case 2006:
          v12 = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (v7 == 900)
          {
            v12 = "MLModelType_identity";
          }
          else
          {
            if (v7 != 3000)
              goto LABEL_15;
            v12 = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(v7)
      {
        case 600:
          v12 = "MLModelType_oneHotEncoder";
          break;
        case 601:
          v12 = "MLModelType_imputer";
          break;
        case 602:
          v12 = "MLModelType_featureVectorizer";
          break;
        case 603:
          v12 = "MLModelType_dictVectorizer";
          break;
        case 604:
          v12 = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          goto LABEL_15;
        case 606:
          v12 = "MLModelType_categoricalMapping";
          break;
        case 607:
          v12 = "MLModelType_normalizer";
          break;
        case 609:
          v12 = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          goto LABEL_79;
        default:
          if (v7 != 560)
            goto LABEL_15;
          v12 = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
LABEL_16:
    objc_msgSend(v11, "stringWithUTF8String:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v13, "rangeOfString:", CFSTR("MLModelType_")))
    {
      objc_msgSend(v13, "stringByReplacingOccurrencesOfString:withString:", CFSTR("MLModelType_"), &stru_1E956AAC8);
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = (void *)*((_QWORD *)v115 + 4);
      *((_QWORD *)v115 + 4) = v14;

      *((_DWORD *)v115 + 10) = v7;
    }

  }
  if (objc_msgSend(*v5, "count"))
  {
    v45 = (uint64_t *)*((_QWORD *)*v108 + 17);
    if (*((char *)v45 + 23) < 0)
      v45 = (uint64_t *)*v45;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = *v5;
    v106 = v46;
    v139 = 0u;
    v140 = 0u;
    v141 = 0u;
    v142 = 0u;
    locationa = (id *)v47;
    v48 = objc_msgSend(locationa, "countByEnumeratingWithState:objects:count:", &v139, &v146, 16);
    if (v48)
    {
      v49 = *(_QWORD *)v140;
      while (2)
      {
        for (i = 0; i != v48; ++i)
        {
          if (*(_QWORD *)v140 != v49)
            objc_enumerationMutation(locationa);
          objc_msgSend(*(id *)(*((_QWORD *)&v139 + 1) + 8 * i), "modelDescription");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "outputDescriptions");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&v127 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v127 + 1) = 3221225472;
          *(_QWORD *)&v128 = ___ZL22classLabelsForPipelineP7NSArrayIP8MIOModelEP8NSString_block_invoke;
          *((_QWORD *)&v128 + 1) = &unk_1E9568B40;
          *(_QWORD *)&v129 = v106;
          v53 = objc_msgSend(v52, "indexOfObjectPassingTest:", &v127);

          if (v53 != 0x7FFFFFFFFFFFFFFFLL)
          {
            objc_msgSend(v51, "classLabels");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = v129;
LABEL_182:

            goto LABEL_183;
          }

        }
        v48 = objc_msgSend(locationa, "countByEnumeratingWithState:objects:count:", &v139, &v146, 16);
        if (v48)
          continue;
        break;
      }
    }

    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v54 = locationa;
    v55 = 0;
    v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v135, &__p, 16);
    if (v56)
    {
      v57 = *(_QWORD *)v136;
      while (2)
      {
        for (j = 0; j != v56; ++j)
        {
          if (*(_QWORD *)v136 != v57)
            objc_enumerationMutation(v54);
          objc_msgSend(*(id *)(*((_QWORD *)&v135 + 1) + 8 * j), "modelDescription");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "classLabels");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = v59 == 0;

          if (!v60)
          {
            if (v55)
            {

              +[MIOLogging coreChannel](MIOLogging, "coreChannel");
              v61 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1D3AC6000, v61, OS_LOG_TYPE_INFO, "This pipeline contains multiple sub-models with class labels. As a result, the classLabel property of the pipeline instance will not be populated.", buf, 2u);
              }
              v55 = 0;
              goto LABEL_182;
            }
            objc_msgSend(v51, "classLabels");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
          }

        }
        v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v135, &__p, 16);
        if (v56)
          continue;
        break;
      }
    }
LABEL_183:

    v62 = (void *)v119;
    *(_QWORD *)&v119 = v55;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *((_QWORD *)&v119 + 1));
    v111 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", (_QWORD)v120);
    locationb = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", *((_QWORD *)&v120 + 1));
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v121);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    obj = *v5;
    v65 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, &v146, 16);
    if (v65)
    {
      v110 = *(_QWORD *)v136;
      do
      {
        for (k = 0; k != v65; ++k)
        {
          if (*(_QWORD *)v136 != v110)
            objc_enumerationMutation(obj);
          v67 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * k);
          objc_msgSend(v67, "neuralNetworkLayerHistogramForFunctionNamed:", 0);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v133[0] = MEMORY[0x1E0C809B0];
          v133[1] = 3221225472;
          v133[2] = ___ZL26populatePipelineInfomationRK12MIOModelInfoR20ModelParserWorkspace_block_invoke;
          v133[3] = &unk_1E9568AF8;
          v134 = v111;
          objc_msgSend(v68, "enumerateKeysAndObjectsUsingBlock:", v133);

          objc_msgSend(v67, "programOperationHistogramForFunctionNamed:", 0);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v131[0] = MEMORY[0x1E0C809B0];
          v131[1] = 3221225472;
          v131[2] = ___ZL26populatePipelineInfomationRK12MIOModelInfoR20ModelParserWorkspace_block_invoke_2;
          v131[3] = &unk_1E9568AF8;
          v132 = locationb;
          objc_msgSend(v69, "enumerateKeysAndObjectsUsingBlock:", v131);

          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          objc_msgSend(v67, "computePrecisionForFunctionNamed:", 0);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v127, &__p, 16);
          if (v71)
          {
            v72 = *(_QWORD *)v128;
            do
            {
              for (m = 0; m != v71; ++m)
              {
                if (*(_QWORD *)v128 != v72)
                  objc_enumerationMutation(v70);
                objc_msgSend(v63, "addObject:", *(_QWORD *)(*((_QWORD *)&v127 + 1) + 8 * m));
              }
              v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v127, &__p, 16);
            }
            while (v71);
          }

          v125 = 0u;
          v126 = 0u;
          *(_OWORD *)buf = 0u;
          v124 = 0u;
          objc_msgSend(v67, "storagePrecisionForFunctionNamed:", 0);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", buf, &v139, 16);
          if (v75)
          {
            v76 = *(_QWORD *)v124;
            do
            {
              for (n = 0; n != v75; ++n)
              {
                if (*(_QWORD *)v124 != v76)
                  objc_enumerationMutation(v74);
                objc_msgSend(v64, "addObject:", *(_QWORD *)(*(_QWORD *)&buf[8] + 8 * n));
              }
              v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", buf, &v139, 16);
            }
            while (v75);
          }

        }
        v65 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, &v146, 16);
      }
      while (v65);
    }

    if (objc_msgSend(v111, "count"))
      objc_storeStrong((id *)&v119 + 1, v111);
    if (objc_msgSend(locationb, "count"))
      objc_storeStrong((id *)&v120, locationb);
    if (objc_msgSend(v63, "count"))
    {
      objc_msgSend(v63, "allObjects");
      v78 = objc_claimAutoreleasedReturnValue();
      v79 = (void *)*((_QWORD *)&v120 + 1);
      *((_QWORD *)&v120 + 1) = v78;

    }
    if (objc_msgSend(v64, "count"))
    {
      objc_msgSend(v64, "allObjects");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = v121;
      v121 = v80;

    }
  }
  v82 = *v108;
  if (!*v108)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v146);
    std::shared_ptr<MLAssetIO::ProtoWireFormatCallbackParser::BranchField>::operator=[abi:ne180100]((uint64_t)v108, &v146);
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v82 = *v108;
  }
  v86 = v115;
  v87 = (std::__shared_weak_count *)*((_QWORD *)v115 + 2);
  __p = v82;
  v144 = v87;
  if (v87)
  {
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldxr(p_shared_owners);
    while (__stxr(v89 + 1, p_shared_owners));
  }
  v90 = *((int *)v82 + 24);
  if (!(_DWORD)v90)
  {
    if (*((_QWORD *)&v117 + 1))
    {
      v98 = (id *)(v117 + 40);
      v99 = (uint64_t)v115 + 88;
      v100 = *((_QWORD *)v115 + 10);
      if (v100 < *((_QWORD *)v115 + 11))
      {
        v101 = (_QWORD *)*((_QWORD *)v115 + 10);
LABEL_240:
        std::allocator<MIOFunctionInfo>::construct[abi:ne180100]<MIOFunctionInfo,MIOFunctionInfo const&>(v99, v101, v98);
        v102 = v100 + 40;
        goto LABEL_243;
      }
      v102 = std::vector<MIOFunctionInfo>::__push_back_slow_path<MIOFunctionInfo const&>((uint64_t *)v115 + 9, (id *)(v117 + 40));
    }
    else
    {
      v99 = (uint64_t)v115 + 88;
      v100 = *((_QWORD *)v115 + 10);
      if (v100 < *((_QWORD *)v115 + 11))
      {
        v101 = (_QWORD *)*((_QWORD *)v115 + 10);
        v98 = (id *)&v119;
        goto LABEL_240;
      }
      v102 = std::vector<MIOFunctionInfo>::__push_back_slow_path<MIOFunctionInfo const&>((uint64_t *)v115 + 9, (id *)&v119);
    }
LABEL_243:
    *((_QWORD *)v115 + 10) = v102;
    if (!v87)
      goto LABEL_248;
    goto LABEL_244;
  }
  v91 = *((_QWORD *)v82 + 13);
  if (v91)
    v92 = v91 + 8;
  else
    v92 = 0;
  v93 = 8 * v90;
  do
  {
    v94 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(&v116, *(unsigned __int8 **)(*(_QWORD *)v92 + 88));
    v95 = (id *)v94;
    if (!v94)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *(_QWORD *)&v146 = *((id *)v94 + 5);
    *((_QWORD *)&v146 + 1) = v95[6];
    v147 = v95[7];
    v148 = (__int128 *)v95[8];
    v149 = v95[9];
    v96 = *((_QWORD *)v86 + 10);
    if (v96 >= *((_QWORD *)v86 + 11))
    {
      v97 = std::vector<MIOFunctionInfo>::__push_back_slow_path<MIOFunctionInfo const&>((uint64_t *)v115 + 9, (id *)&v146);
    }
    else
    {
      std::allocator<MIOFunctionInfo>::construct[abi:ne180100]<MIOFunctionInfo,MIOFunctionInfo const&>((uint64_t)v115 + 88, *((_QWORD **)v86 + 10), (id *)&v146);
      v97 = v96 + 40;
    }
    *((_QWORD *)v86 + 10) = v97;

    v92 += 8;
    v93 -= 8;
    v86 = v115;
  }
  while (v93);
  if (v87)
  {
LABEL_244:
    v103 = (unint64_t *)&v87->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
LABEL_248:

  std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::~__hash_table((uint64_t)&v116);
}

void sub_1D3AE6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  ModelParserWorkspace::~ModelParserWorkspace((id *)va);

  _Unwind_Resume(a1);
}

void parsePipeline(CodedInputStream *a1, MIOParserContext *a2, void **a3)
{
  MIOParserContext *v5;
  void *v6;
  int Field;
  void *v8;
  MIL::ParserOptions *v9;
  void *v10;
  int v11;
  MIOModel *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *exception;
  _BYTE v21[32];
  id v22;
  _BYTE v23[32];
  uint64_t v24;

  v5 = a2;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v21, a1);
  while (1)
  {
    Field = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v21);
    if (!Field)
      break;
    v8 = (void *)MEMORY[0x1D8251C08]();
    if (Field == 1)
    {
      v9 = v5;
      MIL::ParserOptions::Make(v9);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 64))(v24, 1);
      MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v23, a1);
      v10 = 0;
      while (1)
      {
        v11 = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v23);
        if (!v11)
          break;
        if (v11 == 1)
        {
          v12 = [MIOModel alloc];
          v22 = 0;
          v13 = -[MIOModel initWithMessageStream:parserContext:error:](v12, "initWithMessageStream:parserContext:error:", a1, v9, &v22);
          v14 = v22;

          if (!v13)
          {
            v17 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v14, "localizedDescription");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "stringWithFormat:", CFSTR("Failed to parse a sub model: %@"), v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D825177C](exception, objc_msgSend(objc_retainAutorelease(v19), "UTF8String"));
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }

          v10 = (void *)v13;
        }
      }
      v15 = v24;
      v24 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

      objc_msgSend(v6, "addObject:", v10);
    }
    objc_autoreleasePoolPop(v8);
  }
  v16 = *a3;
  *a3 = v6;

}

void sub_1D3AE7344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);

  _Unwind_Resume(a1);
}

void parseNeuralNetworkSpecification(CodedInputStream *a1, MIOModelSpecificInfo *a2, ModelParserWorkspace *a3)
{
  int Field;
  void *v5;
  id v6;
  _DWORD *v7;
  id v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t v11;
  MIOModelLayer *v12;
  MIOModelLayer *v13;
  id v14;
  void *v15;
  void *v16;
  _DWORD *v17;
  id v18;
  uint64_t (***v19)();
  uint64_t v20;
  _DWORD *v21;
  id v22;
  uint64_t (***v23)();
  uint64_t v24;
  _DWORD *v25;
  id v26;
  uint64_t (***v27)();
  uint64_t v28;
  _DWORD *v29;
  id v30;
  uint64_t (***v31)();
  uint64_t v32;
  _DWORD *v33;
  id v34;
  uint64_t (***v35)();
  uint64_t v36;
  _DWORD *v37;
  id v38;
  uint64_t (***v39)();
  uint64_t v40;
  _DWORD *v41;
  id v42;
  uint64_t (***v43)();
  uint64_t v44;
  _DWORD *v45;
  id v46;
  uint64_t (***v47)();
  uint64_t v48;
  _DWORD *v49;
  id v50;
  uint64_t (***v51)();
  uint64_t v52;
  _DWORD *v53;
  id v54;
  uint64_t (***v55)();
  uint64_t v56;
  id v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *exception;
  id v77;
  id v78;
  id obj;
  _QWORD v81[4];
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  id v87;
  _BYTE v88[32];
  void *__p;
  void *v90;
  char *v91;
  _BYTE v92[8];
  std::__shared_weak_count *v93;
  _BYTE v94[128];
  uint64_t (**v95)();
  id v96;
  uint64_t (***v97)();
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  obj = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v77 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v78 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v88, a1);
  while (1)
  {
    Field = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v88);
    if (!Field)
      break;
    v5 = (void *)MEMORY[0x1D8251C08]();
    if (Field <= 99)
    {
      if (Field == 1)
      {
        v12 = [MIOModelLayer alloc];
        v87 = 0;
        v13 = -[MIOModelLayer initWithMessageStream:error:](v12, "initWithMessageStream:error:", a1, &v87);
        v14 = v87;
        if (!v13)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to parse layer: %i due to error: %@"), 1, v14);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D825177C](exception, objc_msgSend(objc_retainAutorelease(v74), "UTF8String"));
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        -[MIOModelLayer computePrecision](v13, "computePrecision");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "addObjectsFromArray:", v15);

        -[MIOModelLayer storagePrecision](v13, "storagePrecision");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "addObjectsFromArray:", v16);

        objc_msgSend(obj, "addObject:", v13);
        goto LABEL_96;
      }
      if (Field != 10)
        goto LABEL_97;
      v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v92);
      v7 = operator new(0xCuLL);
      v90 = v7 + 3;
      v91 = (char *)(v7 + 3);
      *(_QWORD *)v7 = 0xA00000002;
      v7[2] = 1;
      __p = v7;
      v8 = v6;
      v95 = &off_1E9567D68;
      v96 = v8;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v9 = v97;
      if (v97 == &v95)
      {
        v9 = &v95;
        v10 = 4;
LABEL_17:
        (*v9)[v10]();
      }
      else if (v97)
      {
        v10 = 5;
        goto LABEL_17;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v17 = operator new(0xCuLL);
      v90 = v17 + 3;
      v91 = (char *)(v17 + 3);
      *(_QWORD *)v17 = 0xA00000002;
      v17[2] = 3;
      __p = v17;
      v18 = v8;
      v95 = &off_1E9567DC0;
      v96 = v18;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v19 = v97;
      if (v97 == &v95)
      {
        v19 = &v95;
        v20 = 4;
LABEL_24:
        (*v19)[v20]();
      }
      else if (v97)
      {
        v20 = 5;
        goto LABEL_24;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v21 = operator new(0xCuLL);
      v90 = v21 + 3;
      v91 = (char *)(v21 + 3);
      *(_QWORD *)v21 = 0xA00000002;
      v21[2] = 2;
      __p = v21;
      v22 = v18;
      v95 = &off_1E9567E18;
      v96 = v22;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v23 = v97;
      if (v97 == &v95)
      {
        v23 = &v95;
        v24 = 4;
LABEL_31:
        (*v23)[v24]();
      }
      else if (v97)
      {
        v24 = 5;
        goto LABEL_31;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v25 = operator new(0xCuLL);
      v90 = v25 + 3;
      v91 = (char *)(v25 + 3);
      *(_QWORD *)v25 = 0xB00000002;
      v25[2] = 1;
      __p = v25;
      v26 = v22;
      v95 = &off_1E9567E70;
      v96 = v26;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v27 = v97;
      if (v97 == &v95)
      {
        v27 = &v95;
        v28 = 4;
LABEL_38:
        (*v27)[v28]();
      }
      else if (v97)
      {
        v28 = 5;
        goto LABEL_38;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v29 = operator new(0xCuLL);
      v90 = v29 + 3;
      v91 = (char *)(v29 + 3);
      *(_QWORD *)v29 = 0xB00000002;
      v29[2] = 2;
      __p = v29;
      v30 = v26;
      v95 = &off_1E9567EC8;
      v96 = v30;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v31 = v97;
      if (v97 == &v95)
      {
        v31 = &v95;
        v32 = 4;
LABEL_45:
        (*v31)[v32]();
      }
      else if (v97)
      {
        v32 = 5;
        goto LABEL_45;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v33 = operator new(0xCuLL);
      v90 = v33 + 3;
      v91 = (char *)(v33 + 3);
      *(_QWORD *)v33 = 0xB00000002;
      v33[2] = 3;
      __p = v33;
      v34 = v30;
      v95 = &off_1E9567F20;
      v96 = v34;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v35 = v97;
      if (v97 == &v95)
      {
        v35 = &v95;
        v36 = 4;
LABEL_52:
        (*v35)[v36]();
      }
      else if (v97)
      {
        v36 = 5;
        goto LABEL_52;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v37 = operator new(0xCuLL);
      v90 = v37 + 3;
      v91 = (char *)(v37 + 3);
      *(_QWORD *)v37 = 0xB00000002;
      v37[2] = 4;
      __p = v37;
      v38 = v34;
      v95 = &off_1E9567F78;
      v96 = v38;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v39 = v97;
      if (v97 == &v95)
      {
        v39 = &v95;
        v40 = 4;
LABEL_59:
        (*v39)[v40]();
      }
      else if (v97)
      {
        v40 = 5;
        goto LABEL_59;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v41 = operator new(0xCuLL);
      v90 = v41 + 3;
      v91 = (char *)(v41 + 3);
      *(_QWORD *)v41 = 0xB00000002;
      v41[2] = 5;
      __p = v41;
      v42 = v38;
      v95 = &off_1E9567FD0;
      v96 = v42;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v43 = v97;
      if (v97 == &v95)
      {
        v43 = &v95;
        v44 = 4;
LABEL_66:
        (*v43)[v44]();
      }
      else if (v97)
      {
        v44 = 5;
        goto LABEL_66;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v45 = operator new(4uLL);
      __p = v45;
      *v45 = 3;
      v90 = v45 + 1;
      v91 = (char *)(v45 + 1);
      v46 = v42;
      v95 = &off_1E9568028;
      v96 = v46;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v47 = v97;
      if (v97 == &v95)
      {
        v47 = &v95;
        v48 = 4;
LABEL_73:
        (*v47)[v48]();
      }
      else if (v97)
      {
        v48 = 5;
        goto LABEL_73;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v49 = operator new(4uLL);
      __p = v49;
      *v49 = 10;
      v90 = v49 + 1;
      v91 = (char *)(v49 + 1);
      v50 = v46;
      v95 = &off_1E9568080;
      v96 = v50;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v51 = v97;
      if (v97 == &v95)
      {
        v51 = &v95;
        v52 = 4;
LABEL_80:
        (*v51)[v52]();
      }
      else if (v97)
      {
        v52 = 5;
        goto LABEL_80;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v53 = operator new(4uLL);
      __p = v53;
      *v53 = 20;
      v90 = v53 + 1;
      v91 = (char *)(v53 + 1);
      v54 = v50;
      v95 = &off_1E95680D8;
      v96 = v54;
      v97 = &v95;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v92, &__p, &v95);
      v55 = v97;
      if (v97 == &v95)
      {
        v55 = &v95;
        v56 = 4;
LABEL_87:
        (*v55)[v56]();
      }
      else if (v97)
      {
        v56 = 5;
        goto LABEL_87;
      }
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v92, a1);
      v57 = v54;
      v58 = v93;
      if (v93)
      {
        p_shared_owners = (unint64_t *)&v93->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }

      v14 = (id)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v57;
      goto LABEL_96;
    }
    if (Field == 100)
    {
      parseStringVector((google::protobuf::io::CodedInputStream *)a1);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (Field != 101)
        goto LABEL_97;
      parseInt64Vector((google::protobuf::io::CodedInputStream *)a1);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    v14 = (id)*((_QWORD *)a3 + 5);
    *((_QWORD *)a3 + 5) = v11;
LABEL_96:

LABEL_97:
    objc_autoreleasePoolPop(v5);
  }
  v61 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v62 = obj;
  v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v83, v94, 16);
  if (v63)
  {
    v64 = *(_QWORD *)v84;
    v65 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v63; ++i)
      {
        if (*(_QWORD *)v84 != v64)
          objc_enumerationMutation(v62);
        v67 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * i);
        v68 = (void *)MEMORY[0x1D8251C08]();
        objc_msgSend(v67, "layerHistogram");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v81[0] = v65;
        v81[1] = 3221225472;
        v81[2] = ___ZL31parseNeuralNetworkSpecificationRN6google8protobuf2io16CodedInputStreamER20MIOModelSpecificInfoR20ModelParserWorkspace_block_invoke;
        v81[3] = &unk_1E9568AF8;
        v82 = v61;
        objc_msgSend(v69, "enumerateKeysAndObjectsUsingBlock:", v81);

        objc_autoreleasePoolPop(v68);
      }
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v83, v94, 16);
    }
    while (v63);
  }

  objc_storeStrong((id *)a2 + 1, obj);
  objc_storeStrong((id *)a3 + 6, v61);
  objc_msgSend(v77, "allObjects");
  v70 = objc_claimAutoreleasedReturnValue();
  v71 = (void *)*((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 8) = v70;

  objc_msgSend(v78, "allObjects");
  v72 = objc_claimAutoreleasedReturnValue();
  v73 = (void *)*((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 9) = v72;

}

void sub_1D3AE7DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

void parseMILProgram(google::protobuf::io::CodedInputStream *a1, MIOParserContext *a2, MIOModelSpecificInfo *a3, ModelParserWorkspace *a4)
{
  std::string::size_type v5;
  CoreML::MIL::CoreMLUtil *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  MIL::ParserOptions *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  id v13;
  char *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  void *v21;
  void *v22;
  id v23;
  id *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  MIL::IROpset *Opset;
  id v36;
  id v37;
  id v38;
  id v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *exception;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  MIOParserContext *v70;
  id v72;
  id obj;
  void *v74;
  std::__shared_weak_count *v75;
  void *__p[2];
  char v77;
  _QWORD v78[3];
  id v79;
  std::__shared_weak_count *v80;
  _QWORD v81[13];
  char v82;
  uint64_t v83;
  std::string v84;
  __int128 *v85[3];
  void *v86[2];
  char v87;
  __int128 *v88[3];
  void *v89[2];
  char v90;
  __int128 *v91[3];
  void *v92[2];
  char v93;
  __int128 *v94[3];
  void *v95[2];
  char v96;
  __int128 *v97[3];
  void *v98[2];
  char v99;
  __int128 *v100[3];
  void *v101[2];
  char v102;
  __int128 *v103[3];
  void *v104[2];
  char v105;
  __int128 *v106[3];
  void *v107[2];
  char v108;
  __int128 *v109[3];
  void *v110[2];
  char v111;
  __int128 *v112[3];
  void *v113[2];
  char v114;
  __int128 *v115[3];
  void *v116[2];
  char v117;
  __int128 *v118[3];
  void *v119[2];
  char v120;
  __int128 *v121[3];
  void *v122[2];
  char v123;
  __int128 *v124[3];
  void *v125[2];
  char v126;
  __int128 *v127[3];
  void *v128[2];
  char v129;
  __int128 *v130[3];
  void *v131[2];
  char v132;
  __int128 **v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  __int128 v138;
  void *v139[3];
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  __int128 v150;
  _QWORD v151[3];
  __int128 v152;
  uint64_t v153[3];
  _QWORD v154[3];
  __int128 v155;
  __int128 *v156;
  uint64_t v157[3];
  _QWORD v158[3];
  __int128 v159;
  _QWORD v160[3];
  __int128 v161;
  _QWORD v162[3];
  __int128 v163;
  _QWORD v164[3];
  __int128 v165;
  _QWORD v166[3];
  __int128 v167;
  _QWORD v168[3];
  id v169[2];
  __int128 v170;
  id v171;
  std::string v172[2];
  std::string v173[2];
  std::string v174[2];
  std::string v175[2];
  std::string v176[2];
  std::string v177[2];
  std::string v178[2];
  std::string v179[2];
  std::string v180[2];
  std::string v181[2];
  std::string v182[2];
  std::string v183[2];
  std::string v184[2];
  std::string v185[2];
  std::string v186[2];
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v70 = a2;
  memset(&v84, 0, sizeof(v84));
  v5 = google::protobuf::io::CodedInputStream::BytesUntilLimit(a1);
  if (!google::protobuf::io::CodedInputStream::ReadString(a1, &v84, v5))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D825177C](exception, "Failed to read MIL message.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (CoreML::MIL::CoreMLUtil *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v81, &v84, 24);
  CoreML::MIL::CoreMLUtil::MakeContext(v6, (uint64_t *)v169);
  v79 = v169[0];
  v7 = (std::__shared_weak_count *)operator new();
  v8 = (std::__shared_weak_count_vtbl *)v169[0];
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9568318;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v8;
  v80 = v7;
  v9 = (MIL::ParserOptions *)(*(_QWORD *(**)(_QWORD *__return_ptr, id))(*(_QWORD *)v79 + 24))(v78, v79);
  if ((v10 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v131, "linear");
      std::string::basic_string[abi:ne180100]<0>(&v167, "weight");
      std::string::basic_string[abi:ne180100]<0>(v168, "bias");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v130, &v167, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>((std::string *)v169, (__int128 *)v131, v130);
      std::string::basic_string[abi:ne180100]<0>(v128, "conv");
      std::string::basic_string[abi:ne180100]<0>(&v165, "weight");
      std::string::basic_string[abi:ne180100]<0>(v166, "bias");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v127, &v165, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v172, (__int128 *)v128, v127);
      std::string::basic_string[abi:ne180100]<0>(v125, "conv_transpose");
      std::string::basic_string[abi:ne180100]<0>(&v163, "weight");
      std::string::basic_string[abi:ne180100]<0>(v164, "bias");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v124, &v163, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v173, (__int128 *)v125, v124);
      std::string::basic_string[abi:ne180100]<0>(v122, "gru");
      std::string::basic_string[abi:ne180100]<0>(&v161, "weight");
      std::string::basic_string[abi:ne180100]<0>(v162, "bias");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v121, &v161, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v174, (__int128 *)v122, v121);
      std::string::basic_string[abi:ne180100]<0>(v119, "rnn");
      std::string::basic_string[abi:ne180100]<0>(&v159, "weight");
      std::string::basic_string[abi:ne180100]<0>(v160, "bias");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v118, &v159, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v175, (__int128 *)v119, v118);
      std::string::basic_string[abi:ne180100]<0>(v116, "batch_norm");
      std::string::basic_string[abi:ne180100]<0>(&v155, "gamma");
      std::string::basic_string[abi:ne180100]<0>(&v156, "beta");
      std::string::basic_string[abi:ne180100]<0>(v157, "mean");
      std::string::basic_string[abi:ne180100]<0>(v158, "variance");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, &v155, 4uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v176, (__int128 *)v116, v115);
      std::string::basic_string[abi:ne180100]<0>(v113, "lstm");
      std::string::basic_string[abi:ne180100]<0>(&v152, "weight");
      std::string::basic_string[abi:ne180100]<0>(v153, "bias");
      std::string::basic_string[abi:ne180100]<0>(v154, "peephole");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v112, &v152, 3uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v177, (__int128 *)v113, v112);
      std::string::basic_string[abi:ne180100]<0>(v110, "matmul");
      std::string::basic_string[abi:ne180100]<0>(&v150, "y");
      std::string::basic_string[abi:ne180100]<0>(v151, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v109, &v150, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v178, (__int128 *)v110, v109);
      std::string::basic_string[abi:ne180100]<0>(v107, "gather");
      std::string::basic_string[abi:ne180100]<0>(v148, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v106, (__int128 *)v148, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v179, (__int128 *)v107, v106);
      std::string::basic_string[abi:ne180100]<0>(v104, "gather_nd");
      std::string::basic_string[abi:ne180100]<0>(v146, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v103, (__int128 *)v146, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v180, (__int128 *)v104, v103);
      std::string::basic_string[abi:ne180100]<0>(v101, "gather_along_axis");
      std::string::basic_string[abi:ne180100]<0>(v144, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v100, (__int128 *)v144, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v181, (__int128 *)v101, v100);
      std::string::basic_string[abi:ne180100]<0>(v98, "instance_norm");
      std::string::basic_string[abi:ne180100]<0>(v142, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v97, (__int128 *)v142, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v182, (__int128 *)v98, v97);
      std::string::basic_string[abi:ne180100]<0>(v95, "layer_norm");
      std::string::basic_string[abi:ne180100]<0>(v140, "x");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v94, (__int128 *)v140, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v183, (__int128 *)v95, v94);
      std::string::basic_string[abi:ne180100]<0>(v92, "softplus_parametric");
      std::string::basic_string[abi:ne180100]<0>(&v138, "alpha");
      std::string::basic_string[abi:ne180100]<0>(v139, "beta");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v91, &v138, 2uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v184, (__int128 *)v92, v91);
      std::string::basic_string[abi:ne180100]<0>(v89, "prelu");
      std::string::basic_string[abi:ne180100]<0>(v136, "alpha");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v88, (__int128 *)v136, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v185, (__int128 *)v89, v88);
      std::string::basic_string[abi:ne180100]<0>(v86, "custom_layer");
      std::string::basic_string[abi:ne180100]<0>(v134, "weights");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v85, (__int128 *)v134, 1uLL);
      std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v186, (__int128 *)v86, v85);
      std::unordered_map<std::string,std::vector<std::string>>::unordered_map((uint64_t)&makeOperationToWeightParamsMap(void)::operationToWeightParamsMap, (unsigned __int8 *)v169, 16);
      for (i = 90; i != -6; i -= 6)
        std::pair<std::string const,std::vector<std::string>>::~pair((uint64_t)&v169[i]);
      v133 = v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      if (v135 < 0)
        operator delete(v134[0]);
      if (v87 < 0)
        operator delete(v86[0]);
      v86[0] = v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v86);
      if (v137 < 0)
        operator delete(v136[0]);
      if (v90 < 0)
        operator delete(v89[0]);
      v89[0] = v91;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
      for (j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v139[j + 2]) < 0)
          operator delete(v139[j]);
      }
      if (v93 < 0)
        operator delete(v92[0]);
      *(_QWORD *)&v138 = v94;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (v141 < 0)
        operator delete(v140[0]);
      if (v96 < 0)
        operator delete(v95[0]);
      *(_QWORD *)&v138 = v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (v143 < 0)
        operator delete(v142[0]);
      if (v99 < 0)
        operator delete(v98[0]);
      *(_QWORD *)&v138 = v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (v145 < 0)
        operator delete(v144[0]);
      if (v102 < 0)
        operator delete(v101[0]);
      *(_QWORD *)&v138 = v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (v147 < 0)
        operator delete(v146[0]);
      if (v105 < 0)
        operator delete(v104[0]);
      *(_QWORD *)&v138 = v106;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (v149 < 0)
        operator delete(v148[0]);
      if (v108 < 0)
        operator delete(v107[0]);
      *(_QWORD *)&v138 = v109;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      for (k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v151[k + 2]) < 0)
          operator delete((void *)v151[k]);
      }
      if (v111 < 0)
        operator delete(v110[0]);
      *(_QWORD *)&v150 = v112;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v150);
      for (m = 0; m != -9; m -= 3)
      {
        if (SHIBYTE(v154[m + 2]) < 0)
          operator delete((void *)v154[m]);
      }
      if (v114 < 0)
        operator delete(v113[0]);
      *(_QWORD *)&v152 = v115;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
      for (n = 0; n != -12; n -= 3)
      {
        if (SHIBYTE(v158[n + 2]) < 0)
          operator delete((void *)v158[n]);
      }
      if (v117 < 0)
        operator delete(v116[0]);
      *(_QWORD *)&v155 = v118;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      for (ii = 0; ii != -6; ii -= 3)
      {
        if (SHIBYTE(v160[ii + 2]) < 0)
          operator delete((void *)v160[ii]);
      }
      if (v120 < 0)
        operator delete(v119[0]);
      *(_QWORD *)&v155 = v121;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      for (jj = 0; jj != -6; jj -= 3)
      {
        if (SHIBYTE(v162[jj + 2]) < 0)
          operator delete((void *)v162[jj]);
      }
      if (v123 < 0)
        operator delete(v122[0]);
      *(_QWORD *)&v155 = v124;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      for (kk = 0; kk != -6; kk -= 3)
      {
        if (SHIBYTE(v164[kk + 2]) < 0)
          operator delete((void *)v164[kk]);
      }
      if (v126 < 0)
        operator delete(v125[0]);
      *(_QWORD *)&v155 = v127;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      for (mm = 0; mm != -6; mm -= 3)
      {
        if (SHIBYTE(v166[mm + 2]) < 0)
          operator delete((void *)v166[mm]);
      }
      if (v129 < 0)
        operator delete(v128[0]);
      *(_QWORD *)&v155 = v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      for (nn = 0; nn != -6; nn -= 3)
      {
        if (SHIBYTE(v168[nn + 2]) < 0)
          operator delete((void *)v168[nn]);
      }
      if (v132 < 0)
        operator delete(v131[0]);
    }
  }
  MIL::ParserOptions::Make(v9);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v167 + 64))(v167, 1);
  -[MIOParserContext modelSpecificationFileURL](v70, "modelSpecificationFileURL");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "URLByDeletingLastPathComponent");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "path");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (char *)objc_msgSend(v13, "UTF8String");

  v15 = v167;
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 48))(v15, __p);
  if (v77 < 0)
    operator delete(__p[0]);
  v75 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Proto::ParseProgram();
  if (v75)
  {
    v18 = (unint64_t *)&v75->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v20 = *(unsigned __int8 **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v165 + 72))(v165) + 16);
  if (v20)
  {
    v21 = (void *)MEMORY[0x1E0C9AA60];
    while (1)
    {
      (*(void (**)(uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5));
      v22 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
      *(_QWORD *)&v163 = 0;
      obj = v22;
      v23 = v22;
      v169[0] = &off_1E9556248;
      v72 = v23;
      v169[1] = v23;
      *(_QWORD *)&v170 = &v163;
      *((_QWORD *)&v170 + 1) = v169;
      MIL::Util::Walk();
      v24 = (id *)*((_QWORD *)&v170 + 1);
      if (*((id **)&v170 + 1) == v169)
        break;
      if (*((_QWORD *)&v170 + 1))
      {
        v25 = 5;
LABEL_19:
        (*((void (**)(void))*v24 + v25))();
      }
      v26 = (void *)objc_msgSend(v21, "mutableCopy");
      v74 = (void *)objc_msgSend(v21, "mutableCopy");
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(**((_QWORD **)v20 + 5) + 128))(*((_QWORD *)v20 + 5));
      v29 = v27 + 1;
      v28 = (_QWORD *)*v27;
      if ((_QWORD *)*v27 != v27 + 1)
      {
        do
        {
          insertTensorDataTypeToPrecisionSet((MIL::IRValueType *)v28[7], v26);
          v30 = (_QWORD *)v28[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v28[2];
              v32 = *v31 == (_QWORD)v28;
              v28 = v31;
            }
            while (!v32);
          }
          v28 = v31;
        }
        while (v31 != v29);
      }
      v34 = v78[0];
      v33 = v78[1];
      while (v34 != v33)
      {
        Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
        MIL::IROpset::GetReversedOperatorNamesMap(Opset);
        v36 = v26;
        v37 = v74;
        (*(void (**)(uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5));
        v38 = v36;
        v39 = v37;
        v156 = 0;
        v40 = (__int128 *)operator new(0x28uLL);
        *(_QWORD *)v40 = &off_1E95562A0;
        *((_QWORD *)v40 + 1) = v38;
        *((_QWORD *)v40 + 2) = v39;
        *((_QWORD *)v40 + 3) = &makeOperationToWeightParamsMap(void)::operationToWeightParamsMap;
        *((_QWORD *)v40 + 4) = v169;
        v156 = v40;
        MIL::Util::Walk();
        v41 = v156;
        if (v156 == &v155)
        {
          v41 = &v155;
          v42 = 4;
        }
        else
        {
          if (!v156)
            goto LABEL_34;
          v42 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_34:

        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v169);
        v34 += 24;
      }
      v171 = 0;
      *(_OWORD *)v169 = 0u;
      v170 = 0u;
      v169[0] = (id)v163;
      objc_storeStrong((id *)&v170, obj);
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v26);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "allObjects");
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = (void *)*((_QWORD *)&v170 + 1);
      *((_QWORD *)&v170 + 1) = v44;

      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v74);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "allObjects");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = v171;
      v171 = v47;

      *(_QWORD *)&v152 = v20 + 16;
      v49 = (id *)std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v20 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v152);
      objc_storeStrong(v49 + 5, v169[0]);
      objc_storeStrong(v49 + 6, v169[1]);
      objc_storeStrong(v49 + 7, (id)v170);
      objc_storeStrong(v49 + 8, *((id *)&v170 + 1));
      objc_storeStrong(v49 + 9, v171);

      v20 = *(unsigned __int8 **)v20;
      if (!v20)
        goto LABEL_36;
    }
    v24 = v169;
    v25 = 4;
    goto LABEL_19;
  }
LABEL_36:
  v50 = v165;
  *(_QWORD *)&v165 = 0;
  v51 = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 6) = v50;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v165;
    *(_QWORD *)&v165 = 0;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  v53 = v167;
  *(_QWORD *)&v167 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v169[0] = v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  v54 = v80;
  if (v80)
  {
    v55 = (unint64_t *)&v80->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v81[0] = *MEMORY[0x1E0DE4F50];
  v57 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v81 + *(_QWORD *)(v81[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v81[2] = v57;
  v81[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v82 < 0)
    operator delete((void *)v81[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D82519D4](&v83);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);

}

void sub_1D3AE8F94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  char a69;
  void *a71;
  char a72;
  char a73;
  uint64_t v73;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  unint64_t *v87;
  void *v88;
  void *exception;
  void *v90;
  char *v91;
  std::string *v92;
  __int128 v93;
  void *v94;
  void *v95;

  for (i = 720; i != -48; i -= 48)
    std::pair<std::string const,std::vector<std::string>>::~pair(v73 + i);
  STACK[0x4C8] = (unint64_t)&a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4E7]) < 0)
    operator delete((void *)STACK[0x4D0]);
  if (a72 < 0)
    operator delete(a71);
  a71 = &a73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  if (SLOBYTE(STACK[0x4FF]) < 0)
    operator delete((void *)STACK[0x4E8]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  STACK[0x210] = (unint64_t)&STACK[0x228];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  v76 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x500] + v76 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x500] + v76 + 24));
    v76 -= 24;
    if (v76 == -48)
    {
      if (SLOBYTE(STACK[0x257]) < 0)
        operator delete((void *)STACK[0x240]);
      STACK[0x500] = (unint64_t)&STACK[0x258];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      if (SLOBYTE(STACK[0x547]) < 0)
        operator delete((void *)STACK[0x530]);
      if (SLOBYTE(STACK[0x287]) < 0)
        operator delete((void *)STACK[0x270]);
      STACK[0x500] = (unint64_t)&STACK[0x288];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      if (SLOBYTE(STACK[0x55F]) < 0)
        operator delete((void *)STACK[0x548]);
      if (SLOBYTE(STACK[0x2B7]) < 0)
        operator delete((void *)STACK[0x2A0]);
      STACK[0x500] = (unint64_t)&STACK[0x2B8];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      if (SLOBYTE(STACK[0x577]) < 0)
        operator delete((void *)STACK[0x560]);
      if (SLOBYTE(STACK[0x2E7]) < 0)
        operator delete((void *)STACK[0x2D0]);
      STACK[0x500] = (unint64_t)&STACK[0x2E8];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      if (SLOBYTE(STACK[0x58F]) < 0)
        operator delete((void *)STACK[0x578]);
      if (SLOBYTE(STACK[0x317]) < 0)
        operator delete((void *)STACK[0x300]);
      STACK[0x500] = (unint64_t)&STACK[0x318];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      if (SLOBYTE(STACK[0x5A7]) < 0)
        operator delete((void *)STACK[0x590]);
      if (SLOBYTE(STACK[0x347]) < 0)
        operator delete((void *)STACK[0x330]);
      STACK[0x500] = (unint64_t)&STACK[0x348];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
      v77 = 0;
      while (1)
      {
        if (*((char *)&STACK[0x5A8] + v77 + 47) < 0)
          operator delete(*(void **)((char *)&STACK[0x5A8] + v77 + 24));
        v77 -= 24;
        if (v77 == -48)
        {
          if (SLOBYTE(STACK[0x377]) < 0)
            operator delete((void *)STACK[0x360]);
          STACK[0x5A8] = (unint64_t)&STACK[0x378];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5A8]);
          v78 = 0;
          while (1)
          {
            if (*((char *)&STACK[0x5D8] + v78 + 71) < 0)
              operator delete(*(void **)((char *)&STACK[0x5D8] + v78 + 48));
            v78 -= 24;
            if (v78 == -72)
            {
              if (SLOBYTE(STACK[0x3A7]) < 0)
                operator delete((void *)STACK[0x390]);
              STACK[0x5D8] = (unint64_t)&STACK[0x3A8];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5D8]);
              v79 = 0;
              while (1)
              {
                if (*((char *)&STACK[0x620] + v79 + 95) < 0)
                  operator delete(*(void **)((char *)&STACK[0x620] + v79 + 72));
                v79 -= 24;
                if (v79 == -96)
                {
                  if (SLOBYTE(STACK[0x3D7]) < 0)
                    operator delete((void *)STACK[0x3C0]);
                  STACK[0x620] = (unint64_t)&STACK[0x3D8];
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
                  v80 = 0;
                  while (1)
                  {
                    if (*((char *)&STACK[0x680] + v80 + 47) < 0)
                      operator delete(*(void **)((char *)&STACK[0x680] + v80 + 24));
                    v80 -= 24;
                    if (v80 == -48)
                    {
                      if (SLOBYTE(STACK[0x407]) < 0)
                        operator delete((void *)STACK[0x3F0]);
                      STACK[0x620] = (unint64_t)&STACK[0x408];
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
                      v81 = 0;
                      while (1)
                      {
                        if (*((char *)&STACK[0x6B0] + v81 + 47) < 0)
                          operator delete(*(void **)((char *)&STACK[0x6B0] + v81 + 24));
                        v81 -= 24;
                        if (v81 == -48)
                        {
                          if (SLOBYTE(STACK[0x437]) < 0)
                            operator delete((void *)STACK[0x420]);
                          STACK[0x620] = (unint64_t)&STACK[0x438];
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
                          v82 = 0;
                          while (1)
                          {
                            if (*((char *)&STACK[0x6E0] + v82 + 47) < 0)
                              operator delete(*(void **)((char *)&STACK[0x6E0] + v82 + 24));
                            v82 -= 24;
                            if (v82 == -48)
                            {
                              if (SLOBYTE(STACK[0x467]) < 0)
                                operator delete((void *)STACK[0x450]);
                              STACK[0x620] = (unint64_t)&STACK[0x468];
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
                              v83 = 0;
                              while (1)
                              {
                                if (*((char *)&STACK[0x710] + v83 + 47) < 0)
                                  operator delete(*(void **)((char *)&STACK[0x710] + v83 + 24));
                                v83 -= 24;
                                if (v83 == -48)
                                {
                                  if (SLOBYTE(STACK[0x497]) < 0)
                                    operator delete((void *)STACK[0x480]);
                                  STACK[0x620] = (unint64_t)&STACK[0x498];
                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
                                  v84 = 0;
                                  while (1)
                                  {
                                    if (*((char *)&STACK[0x740] + v84 + 47) < 0)
                                      operator delete(*(void **)((char *)&STACK[0x740] + v84 + 24));
                                    v84 -= 24;
                                    if (v84 == -48)
                                    {
                                      if (SLOBYTE(STACK[0x4C7]) < 0)
                                        operator delete((void *)STACK[0x4B0]);
                                      STACK[0x770] = (unint64_t)&a23;
                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
                                      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
                                      if (a2 == 2)
                                      {
                                        v85 = __cxa_begin_catch(a1);
                                        v86 = (void *)MEMORY[0x1E0CB3940];
                                        (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v85 + 24))(&STACK[0x770]);
                                        if (SLOBYTE(STACK[0x787]) >= 0)
                                          v87 = &STACK[0x770];
                                        else
                                          v87 = (unint64_t *)STACK[0x770];
                                        objc_msgSend(v86, "stringWithUTF8String:", v87);
                                        v95 = (void *)objc_claimAutoreleasedReturnValue();
                                        objc_msgSend(v86, "stringWithFormat:", CFSTR("Unable to parse ML Program: %@"));
                                        v88 = (void *)objc_claimAutoreleasedReturnValue();

                                        if (SLOBYTE(STACK[0x787]) < 0)
                                          operator delete((void *)STACK[0x770]);
                                        exception = __cxa_allocate_exception(0x10uLL);
                                        MEMORY[0x1D825177C](exception, objc_msgSend(objc_retainAutorelease(v88), "UTF8String"));
                                        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                      }
                                      if (a2 == 1)
                                      {
                                        v90 = __cxa_begin_catch(a1);
                                        v91 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v90 + 16))(v90);
                                        std::string::basic_string[abi:ne180100]<0>(&STACK[0x620], v91);
                                        v92 = std::string::insert((std::string *)&STACK[0x620], 0, "Unable to parse ML Program: Error: ");
                                        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
                                        STACK[0x780] = v92->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&STACK[0x770] = v93;
                                        v92->__r_.__value_.__l.__size_ = 0;
                                        v92->__r_.__value_.__r.__words[2] = 0;
                                        v92->__r_.__value_.__r.__words[0] = 0;
                                        if (SLOBYTE(STACK[0x637]) < 0)
                                          operator delete((void *)STACK[0x620]);
                                        v94 = __cxa_allocate_exception(0x10uLL);
                                        MEMORY[0x1D8251788](v94, &STACK[0x770]);
                                        __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                      }
                                      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
                                      if (a68 < 0)
                                        operator delete(a63);

                                      _Unwind_Resume(a1);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1D3AE9BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *v68;

  __cxa_end_catch();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (a68 < 0)
    operator delete(a63);

  JUMPOUT(0x1D3AE9CB8);
}

void sub_1D3AE9CA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void parseClassLabels(CodedInputStream *a1, int a2, int a3, ModelParserWorkspace *a4)
{
  _DWORD *v8;
  uint64_t (***v9)();
  uint64_t v10;
  _DWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  _DWORD *v19;
  _BYTE v20[8];
  std::__shared_weak_count *v21;
  uint64_t (**v22)();
  ModelParserWorkspace *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v20);
  v8 = operator new(4uLL);
  __p = v8;
  *v8 = a2;
  v18 = v8 + 1;
  v19 = v8 + 1;
  v22 = &off_1E95562F8;
  v23 = a4;
  v24 = &v22;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v20, &__p, &v22);
  v9 = v24;
  if (v24 == &v22)
  {
    v10 = 4;
    v9 = &v22;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_6:
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (a3)
  {
    v11 = operator new(4uLL);
    __p = v11;
    *v11 = a3;
    v18 = v11 + 1;
    v19 = v11 + 1;
    v22 = &off_1E9556350;
    v23 = a4;
    v24 = &v22;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v20, &__p, &v22);
    v12 = v24;
    if (v24 == &v22)
    {
      v13 = 4;
      v12 = &v22;
    }
    else
    {
      if (!v24)
        goto LABEL_14;
      v13 = 5;
    }
    (*v12)[v13]();
LABEL_14:
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v20, a1);
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1D3AE9E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (__p)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1D3AE9ECC()
{
  JUMPOUT(0x1D3AE9EC4);
}

void ModelParserWorkspace::~ModelParserWorkspace(id *this)
{

  std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::~__hash_table((uint64_t)this);
}

void MIOParseNeuralNetworkLayerSpecification(CodedInputStream *a1, uint64_t a2)
{
  __CFString *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  unint64_t v8;
  __CFString *v9;
  int Field;
  __CFString *v11;
  id v12;
  __CFString *v13;
  unint64_t v14;
  id v15;
  __CFString *v16;
  __CFString *v17;
  std::string::size_type v18;
  std::string *p_p;
  uint64_t v20;
  void *v21;
  __CFString *v22;
  void *v23;
  __CFString *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *exception;
  __CFString *v31;
  id v32;
  id v33;
  __CFString *v34;
  _BYTE v35[32];
  std::string __p;

  v4 = CFSTR("InvalidType");
  MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)v35, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0x1E0CB3000uLL;
  v9 = &stru_1E956AAC8;
  while (1)
  {
    Field = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)v35);
    if (!Field)
      break;
    if (Field == 1)
    {
      v18 = MLAssetIO::ProtoWireFormatParser::length((MLAssetIO::ProtoWireFormatParser *)v35);
      memset(&__p, 0, sizeof(__p));
      if (!google::protobuf::io::CodedInputStream::ReadString((google::protobuf::io::CodedInputStream *)a1, &__p, v18))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D825177C](exception, "Failed to read a string.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(*(id *)(v8 + 2368), "stringWithUTF8String:", p_p);
      v20 = objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = v9;
      v9 = (__CFString *)v20;
LABEL_13:

    }
    else if (Field >= 100)
    {
      v33 = v5;
      v34 = v4;
      v31 = v7;
      v32 = v6;
      parseLayerParams(Field, a1, &v34, &v33, &v32, &v31);
      v11 = v34;

      v12 = v33;
      v13 = v7;
      v14 = v8;
      v15 = v32;

      v16 = v31;
      v17 = v13;
      v4 = v11;
      v5 = v12;
      v6 = v15;
      v8 = v14;
      v7 = v16;
      goto LABEL_13;
    }
  }
  v21 = *(void **)a2;
  *(_QWORD *)a2 = v9;
  v22 = v9;

  v23 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  v24 = v4;

  v25 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  v26 = v5;

  v27 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v6;
  v28 = v6;

  v29 = *(void **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v7;

}

void sub_1D3AEA140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void parseLayerParams(int a1, CodedInputStream *a2, __CFString **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  __CFString *v8;
  __CFString **v9;
  _QWORD *v10;
  __CFString **v11;
  id v12;
  void *v13;
  _DWORD *v14;
  uint64_t (***v15)();
  uint64_t v16;
  id v17;
  _DWORD *v18;
  id v19;
  uint64_t (***v20)();
  uint64_t v21;
  id v22;
  _DWORD *v23;
  uint64_t (***v24)();
  uint64_t v25;
  id v26;
  _DWORD *v27;
  id v28;
  uint64_t (***v29)();
  uint64_t v30;
  _DWORD *v31;
  uint64_t (***v32)();
  uint64_t v33;
  _DWORD *v34;
  id v35;
  uint64_t (***v36)();
  uint64_t v37;
  _DWORD *v38;
  uint64_t (***v39)();
  uint64_t v40;
  id v41;
  _DWORD *v42;
  id v43;
  uint64_t (***v44)();
  uint64_t v45;
  id v46;
  _DWORD *v47;
  uint64_t (***v48)();
  uint64_t v49;
  _DWORD *v50;
  uint64_t (***v51)();
  uint64_t v52;
  _DWORD *v53;
  uint64_t (***v54)();
  uint64_t v55;
  id v56;
  _DWORD *v57;
  id v58;
  uint64_t (***v59)();
  uint64_t v60;
  __CFString *v61;
  unsigned int Field;
  const char *v63;
  _DWORD *v64;
  uint64_t (***v65)();
  uint64_t v66;
  _DWORD *v67;
  id v68;
  uint64_t (***v69)();
  uint64_t v70;
  id v71;
  _DWORD *v72;
  id v73;
  uint64_t (***v74)();
  uint64_t v75;
  id v76;
  _DWORD *v77;
  id v78;
  uint64_t (***v79)();
  uint64_t v80;
  id v81;
  _DWORD *v82;
  id v83;
  uint64_t (***v84)();
  uint64_t v85;
  id v86;
  _DWORD *v87;
  id v88;
  uint64_t (***v89)();
  uint64_t v90;
  id v91;
  _DWORD *v92;
  id v93;
  uint64_t (***v94)();
  uint64_t v95;
  id v96;
  _DWORD *v97;
  id v98;
  uint64_t (***v99)();
  uint64_t v100;
  id v101;
  _DWORD *v102;
  id v103;
  uint64_t (***v104)();
  uint64_t v105;
  id v106;
  _DWORD *v107;
  id v108;
  uint64_t (***v109)();
  uint64_t v110;
  id v111;
  _DWORD *v112;
  id v113;
  uint64_t (***v114)();
  uint64_t v115;
  const char *v116;
  _DWORD *v117;
  uint64_t (***v118)();
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  unint64_t *v123;
  _DWORD *v124;
  id v125;
  uint64_t (***v126)();
  uint64_t v127;
  _DWORD *v128;
  uint64_t (***v129)();
  uint64_t v130;
  _DWORD *v131;
  id v132;
  uint64_t (***v133)();
  uint64_t v134;
  void *v135;
  id v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _DWORD *v140;
  id v141;
  uint64_t (***v142)();
  uint64_t v143;
  _DWORD *v144;
  id v145;
  uint64_t (***v146)();
  uint64_t v147;
  void *v148;
  id v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  id v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _DWORD *v158;
  id v159;
  uint64_t (***v160)();
  uint64_t v161;
  void *v162;
  id v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  _DWORD *v167;
  id v168;
  uint64_t (***v169)();
  uint64_t v170;
  _DWORD *v171;
  id v172;
  uint64_t (***v173)();
  uint64_t v174;
  _DWORD *v175;
  id v176;
  uint64_t (***v177)();
  uint64_t v178;
  _DWORD *v179;
  id v180;
  uint64_t (***v181)();
  uint64_t v182;
  unint64_t *v183;
  unint64_t *v184;
  _DWORD *v185;
  id v186;
  uint64_t (***v187)();
  uint64_t v188;
  unint64_t *v189;
  unint64_t *v190;
  _DWORD *v191;
  id v192;
  uint64_t (***v193)();
  uint64_t v194;
  _DWORD *v195;
  uint64_t (***v196)();
  uint64_t v197;
  unint64_t *v198;
  _DWORD *v199;
  id v200;
  uint64_t (***v201)();
  uint64_t v202;
  id v203;
  unint64_t *v204;
  unint64_t *v205;
  _DWORD *v206;
  id v207;
  uint64_t (***v208)();
  uint64_t v209;
  _DWORD *v210;
  id v211;
  uint64_t (***v212)();
  uint64_t v213;
  id v214;
  unint64_t *v215;
  unint64_t *v216;
  unint64_t *v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t *v220;
  _DWORD *v221;
  uint64_t (***v222)();
  uint64_t v223;
  _DWORD *v224;
  id v225;
  uint64_t (***v226)();
  uint64_t v227;
  unint64_t *v228;
  unint64_t *v229;
  _DWORD *v230;
  id v231;
  uint64_t (***v232)();
  uint64_t v233;
  _DWORD *v234;
  id v235;
  uint64_t (***v236)();
  uint64_t v237;
  _DWORD *v238;
  uint64_t (***v239)();
  uint64_t v240;
  _DWORD *v241;
  id v242;
  uint64_t (***v243)();
  uint64_t v244;
  _DWORD *v245;
  uint64_t (***v246)();
  uint64_t v247;
  BOOL v248;
  __CFString *v249;
  unint64_t *v250;
  _DWORD *v251;
  uint64_t (***v252)();
  uint64_t v253;
  _DWORD *v254;
  uint64_t (***v255)();
  uint64_t v256;
  _DWORD *v257;
  uint64_t (***v258)();
  uint64_t v259;
  _DWORD *v260;
  uint64_t (***v261)();
  uint64_t v262;
  _DWORD *v263;
  uint64_t (***v264)();
  uint64_t v265;
  _DWORD *v266;
  id v267;
  uint64_t (***v268)();
  uint64_t v269;
  unint64_t *v270;
  void *v271;
  void *v272;
  void *v273;
  __CFString *v274;
  id v275;
  id v276;
  NSString *v277;
  uint64_t v278;
  void *v279;
  id v280;
  NSString *v281;
  char v284;
  __CFString *v285;
  void *__p;
  void *v287;
  _DWORD *v288;
  char v289[8];
  std::__shared_weak_count *v290;
  id location;
  uint64_t (**v292)();
  id *p_location;
  id v294;
  uint64_t (***v295)();
  uint64_t v296;

  v8 = 0;
  v296 = *MEMORY[0x1E0C80C00];
  if (a1 <= 879)
  {
    if (a1 > 604)
    {
      if (a1 > 759)
      {
        if (a1 <= 824)
        {
          v9 = a3;
          v10 = a4;
          if (a1 > 789)
          {
            if (a1 > 814)
            {
              if (a1 == 815)
              {
                v11 = MIOModelLayerTypeEqual;
              }
              else
              {
                if (a1 != 820)
                  goto LABEL_365;
                v11 = MIOModelLayerTypeNotEqual;
              }
            }
            else if (a1 == 790)
            {
              v11 = MIOModelLayerTypeErf;
            }
            else
            {
              if (a1 != 795)
                goto LABEL_365;
              v11 = MIOModelLayerTypeGelu;
            }
          }
          else if (a1 > 774)
          {
            if (a1 == 775)
            {
              v11 = MIOModelLayerTypeAcosh;
            }
            else
            {
              if (a1 != 780)
                goto LABEL_365;
              v11 = MIOModelLayerTypeAtanh;
            }
          }
          else if (a1 == 760)
          {
            v11 = MIOModelLayerTypeTanh;
          }
          else
          {
            if (a1 != 770)
              goto LABEL_365;
            v11 = MIOModelLayerTypeAsinh;
          }
        }
        else if (a1 > 849)
        {
          v9 = a3;
          v10 = a4;
          if (a1 <= 864)
          {
            if (a1 == 850)
            {
              v11 = MIOModelLayerTypeLogicalNot;
            }
            else
            {
              if (a1 != 855)
                goto LABEL_365;
              v11 = MIOModelLayerTypeLogicalAnd;
            }
          }
          else
          {
            switch(a1)
            {
              case 865:
                v11 = MIOModelLayerTypeModBroadcastable;
                break;
              case 870:
                v11 = MIOModelLayerTypeMinBroadcastable;
                break;
              case 875:
                v11 = MIOModelLayerTypeMaxBroadcastable;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else
        {
          v9 = a3;
          v10 = a4;
          switch(a1)
          {
            case 825:
              v11 = MIOModelLayerTypeLessThan;
              goto LABEL_364;
            case 826:
            case 828:
            case 829:
            case 831:
              goto LABEL_365;
            case 827:
              v11 = MIOModelLayerTypeLessEqual;
              goto LABEL_364;
            case 830:
              v11 = MIOModelLayerTypeGreaterThan;
              goto LABEL_364;
            case 832:
              v11 = MIOModelLayerTypeGreaterEqual;
              goto LABEL_364;
            default:
              if (a1 == 840)
              {
                v11 = MIOModelLayerTypeLogicalOr;
              }
              else
              {
                if (a1 != 845)
                  goto LABEL_365;
                v11 = MIOModelLayerTypeLogicalXor;
              }
              break;
          }
        }
      }
      else
      {
        v9 = a3;
        v10 = a4;
        if (a1 > 684)
        {
          if (a1 > 729)
          {
            if (a1 <= 739)
            {
              if (a1 == 730)
              {
                v11 = MIOModelLayerTypeAsin;
              }
              else
              {
                if (a1 != 735)
                  goto LABEL_365;
                v11 = MIOModelLayerTypeAcos;
              }
            }
            else
            {
              switch(a1)
              {
                case 740:
                  v11 = MIOModelLayerTypeAtan;
                  break;
                case 750:
                  v11 = MIOModelLayerTypeSinh;
                  break;
                case 755:
                  v11 = MIOModelLayerTypeCosh;
                  break;
                default:
                  goto LABEL_365;
              }
            }
          }
          else if (a1 <= 709)
          {
            if (a1 == 685)
            {
              v11 = MIOModelLayerTypeRound;
            }
            else
            {
              if (a1 != 700)
                goto LABEL_365;
              v11 = MIOModelLayerTypeExp2;
            }
          }
          else
          {
            switch(a1)
            {
              case 710:
                v11 = MIOModelLayerTypeSin;
                break;
              case 715:
                v11 = MIOModelLayerTypeCos;
                break;
              case 720:
                v11 = MIOModelLayerTypeTan;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 > 639)
        {
          if (a1 <= 664)
          {
            if (a1 == 640)
            {
              v11 = MIOModelLayerTypeRangeDynamic;
            }
            else
            {
              if (a1 != 660)
                goto LABEL_365;
              v11 = MIOModelLayerTypeClip;
            }
          }
          else
          {
            switch(a1)
            {
              case 665:
                v11 = MIOModelLayerTypeCeil;
                break;
              case 670:
                v11 = MIOModelLayerTypeFloor;
                break;
              case 680:
                v11 = MIOModelLayerTypeSign;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 <= 619)
        {
          if (a1 == 605)
          {
            v11 = MIOModelLayerTypeBranch;
          }
          else
          {
            if (a1 != 615)
              goto LABEL_365;
            v11 = MIOModelLayerTypeLoop;
          }
        }
        else
        {
          switch(a1)
          {
            case 620:
              v11 = MIOModelLayerTypeLoopBreak;
              break;
            case 625:
              v11 = MIOModelLayerTypeLoopContinue;
              break;
            case 635:
              v11 = MIOModelLayerTypeRangeStatic;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
    }
    else
    {
      v9 = a3;
      v10 = a4;
      if (a1 > 249)
      {
        if (a1 > 329)
        {
          if (a1 > 409)
          {
            if (a1 <= 429)
            {
              if (a1 == 410)
              {
                v11 = MIOModelLayerTypeGru;
              }
              else
              {
                if (a1 != 420)
                  goto LABEL_365;
                v11 = MIOModelLayerTypeUniDirectionalLSTM;
              }
            }
            else
            {
              switch(a1)
              {
                case 430:
                  v11 = MIOModelLayerTypeBiDirectionalLSTM;
                  break;
                case 500:
                  v11 = MIOModelLayerTypeCustom;
                  break;
                case 600:
                  v11 = MIOModelLayerTypeCopy;
                  break;
                default:
                  goto LABEL_365;
              }
            }
          }
          else if (a1 <= 344)
          {
            if (a1 == 330)
            {
              v11 = MIOModelLayerTypeSplit;
            }
            else
            {
              if (a1 != 340)
                goto LABEL_365;
              v11 = MIOModelLayerTypeSequenceRepeat;
            }
          }
          else
          {
            switch(a1)
            {
              case 345:
                v11 = MIOModelLayerTypeReorganizeData;
                break;
              case 350:
                v11 = MIOModelLayerTypeSlice;
                break;
              case 400:
                v11 = MIOModelLayerTypeSimpleRecurrent;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 > 289)
        {
          if (a1 <= 300)
          {
            if (a1 == 290)
            {
              v11 = MIOModelLayerTypeLoadConstant;
            }
            else
            {
              if (a1 != 300)
                goto LABEL_365;
              v11 = MIOModelLayerTypeReshape;
            }
          }
          else
          {
            switch(a1)
            {
              case 301:
                v11 = MIOModelLayerTypeFlatten;
                break;
              case 310:
                v11 = MIOModelLayerTypePermute;
                break;
              case 320:
                v11 = MIOModelLayerTypeConcat;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 <= 260)
        {
          if (a1 == 250)
          {
            v11 = MIOModelLayerTypeBias;
          }
          else
          {
            if (a1 != 260)
              goto LABEL_365;
            v11 = MIOModelLayerTypeMax;
          }
        }
        else
        {
          switch(a1)
          {
            case 261:
              v11 = MIOModelLayerTypeMin;
              break;
            case 270:
              v11 = MIOModelLayerTypeDot;
              break;
            case 280:
              v11 = MIOModelLayerTypeReduce;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (a1 > 189)
      {
        if (a1 > 219)
        {
          if (a1 <= 230)
          {
            if (a1 == 220)
            {
              v11 = MIOModelLayerTypeUnary;
            }
            else
            {
              if (a1 != 230)
                goto LABEL_365;
              v11 = MIOModelLayerTypeAdd;
            }
          }
          else
          {
            switch(a1)
            {
              case 231:
                v11 = MIOModelLayerTypeMultiply;
                break;
              case 240:
                v11 = MIOModelLayerTypeAverage;
                break;
              case 245:
                v11 = MIOModelLayerTypeScale;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 <= 209)
        {
          if (a1 == 190)
          {
            v11 = MIOModelLayerTypeCrop;
          }
          else
          {
            if (a1 != 200)
              goto LABEL_365;
            v11 = MIOModelLayerTypePadding;
          }
        }
        else
        {
          switch(a1)
          {
            case 210:
              v11 = MIOModelLayerTypeUpsample;
              break;
            case 211:
              v11 = MIOModelLayerTypeResizeBilinear;
              break;
            case 212:
              v11 = MIOModelLayerTypeCropResize;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (a1 > 159)
      {
        if (a1 <= 169)
        {
          if (a1 == 160)
          {
            v11 = MIOModelLayerTypeBatchnorm;
          }
          else
          {
            if (a1 != 165)
              goto LABEL_365;
            v11 = MIOModelLayerTypeMvn;
          }
        }
        else
        {
          switch(a1)
          {
            case 170:
              v11 = MIOModelLayerTypeL2Normalize;
              break;
            case 175:
              v11 = MIOModelLayerTypeSoftmax;
              break;
            case 180:
              v11 = MIOModelLayerTypeLrn;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (a1 <= 129)
      {
        if (a1 == 100)
        {
          v11 = MIOModelLayerTypeConvolution;
        }
        else
        {
          if (a1 != 120)
            goto LABEL_365;
          v11 = MIOModelLayerTypePooling;
        }
      }
      else
      {
        switch(a1)
        {
          case 130:
            v11 = MIOModelLayerTypeActivation;
            break;
          case 140:
            v11 = MIOModelLayerTypeInnerProduct;
            break;
          case 150:
            v11 = MIOModelLayerTypeEmbedding;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    goto LABEL_364;
  }
  v9 = a3;
  v10 = a4;
  if (a1 <= 1139)
  {
    if (a1 > 994)
    {
      if (a1 > 1079)
      {
        if (a1 > 1109)
        {
          if (a1 <= 1124)
          {
            if (a1 == 1110)
            {
              v11 = MIOModelLayerTypeBroadcastToDynamic;
            }
            else
            {
              if (a1 != 1120)
                goto LABEL_365;
              v11 = MIOModelLayerTypeSqueeze;
            }
          }
          else
          {
            switch(a1)
            {
              case 1125:
                v11 = MIOModelLayerTypeExpandDims;
                break;
              case 1130:
                v11 = MIOModelLayerTypeFlattenTo2D;
                break;
              case 1135:
                v11 = MIOModelLayerTypeReshapeLike;
                break;
              default:
                goto LABEL_365;
            }
          }
        }
        else if (a1 <= 1089)
        {
          if (a1 == 1080)
          {
            v11 = MIOModelLayerTypeFillLike;
          }
          else
          {
            if (a1 != 1085)
              goto LABEL_365;
            v11 = MIOModelLayerTypeFillStatic;
          }
        }
        else
        {
          switch(a1)
          {
            case 1090:
              v11 = MIOModelLayerTypeFillDynamic;
              break;
            case 1100:
              v11 = MIOModelLayerTypeBroadcastToLike;
              break;
            case 1105:
              v11 = MIOModelLayerTypeBroadcastToStatic;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (a1 > 1024)
      {
        if (a1 <= 1044)
        {
          if (a1 == 1025)
          {
            v11 = MIOModelLayerTypeArgMax;
          }
          else
          {
            if (a1 != 1040)
              goto LABEL_365;
            v11 = MIOModelLayerTypeEmbeddingND;
          }
        }
        else
        {
          switch(a1)
          {
            case 1045:
              v11 = MIOModelLayerTypeBatchedMatmul;
              break;
            case 1065:
              v11 = MIOModelLayerTypeGetShape;
              break;
            case 1070:
              v11 = MIOModelLayerTypeLoadConstantND;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (a1 <= 1004)
      {
        if (a1 == 995)
        {
          v11 = MIOModelLayerTypeSliceStatic;
        }
        else
        {
          if (a1 != 1000)
            goto LABEL_365;
          v11 = MIOModelLayerTypeSliceDynamic;
        }
      }
      else
      {
        switch(a1)
        {
          case 1005:
            v11 = MIOModelLayerTypeSlidingWindows;
            break;
          case 1015:
            v11 = MIOModelLayerTypeTopK;
            break;
          case 1020:
            v11 = MIOModelLayerTypeArgMin;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    else if (a1 > 939)
    {
      if (a1 > 959)
      {
        if (a1 <= 974)
        {
          if (a1 == 960)
          {
            v11 = MIOModelLayerTypeReverse;
          }
          else
          {
            if (a1 != 965)
              goto LABEL_365;
            v11 = MIOModelLayerTypeReverseSeq;
          }
        }
        else
        {
          switch(a1)
          {
            case 975:
              v11 = MIOModelLayerTypeSplitND;
              break;
            case 980:
              v11 = MIOModelLayerTypeConcatND;
              break;
            case 985:
              v11 = MIOModelLayerTypeTranspose;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 945:
            v11 = MIOModelLayerTypeScatterND;
            goto LABEL_364;
          case 946:
          case 947:
          case 948:
          case 949:
          case 951:
          case 953:
            goto LABEL_365;
          case 950:
            v11 = MIOModelLayerTypeSoftmaxND;
            goto LABEL_364;
          case 952:
            v11 = MIOModelLayerTypeGatherAlongAxis;
            goto LABEL_364;
          case 954:
            v11 = MIOModelLayerTypeScatterAlongAxis;
            goto LABEL_364;
          default:
            if (a1 != 940)
              goto LABEL_365;
            v11 = MIOModelLayerTypeGatherND;
            break;
        }
      }
    }
    else if (a1 > 904)
    {
      if (a1 <= 924)
      {
        if (a1 == 905)
        {
          v11 = MIOModelLayerTypeSubtractBroadcastable;
        }
        else
        {
          if (a1 != 920)
            goto LABEL_365;
          v11 = MIOModelLayerTypeTile;
        }
      }
      else
      {
        switch(a1)
        {
          case 925:
            v11 = MIOModelLayerTypeStack;
            break;
          case 930:
            v11 = MIOModelLayerTypeGather;
            break;
          case 935:
            v11 = MIOModelLayerTypeScatter;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    else if (a1 <= 889)
    {
      if (a1 == 880)
      {
        v11 = MIOModelLayerTypeAddBroadcastable;
      }
      else
      {
        if (a1 != 885)
          goto LABEL_365;
        v11 = MIOModelLayerTypePowBroadcastable;
      }
    }
    else
    {
      switch(a1)
      {
        case 890:
          v11 = MIOModelLayerTypeDivideBroadcastable;
          break;
        case 895:
          v11 = MIOModelLayerTypeFloorDivBroadcastable;
          break;
        case 900:
          v11 = MIOModelLayerTypeMultiplyBroadcastable;
          break;
        default:
          goto LABEL_365;
      }
    }
    goto LABEL_364;
  }
  if (a1 <= 1274)
  {
    if (a1 <= 1199)
    {
      if (a1 <= 1169)
      {
        if (a1 > 1149)
        {
          if (a1 == 1150)
          {
            v11 = MIOModelLayerTypeRankPreservingReshape;
          }
          else
          {
            if (a1 != 1155)
              goto LABEL_365;
            v11 = MIOModelLayerTypeConstantPad;
          }
        }
        else if (a1 == 1140)
        {
          v11 = MIOModelLayerTypeReshapeStatic;
        }
        else
        {
          if (a1 != 1145)
            goto LABEL_365;
          v11 = MIOModelLayerTypeReshapeDynamic;
        }
      }
      else if (a1 <= 1179)
      {
        if (a1 == 1170)
        {
          v11 = MIOModelLayerTypeRandomNormalLike;
        }
        else
        {
          if (a1 != 1175)
            goto LABEL_365;
          v11 = MIOModelLayerTypeRandomNormalStatic;
        }
      }
      else
      {
        switch(a1)
        {
          case 1180:
            v11 = MIOModelLayerTypeRandomNormalDynamic;
            break;
          case 1190:
            v11 = MIOModelLayerTypeRandomUniformLike;
            break;
          case 1195:
            v11 = MIOModelLayerTypeRandomUniformStatic;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    else if (a1 > 1249)
    {
      if (a1 <= 1259)
      {
        if (a1 == 1250)
        {
          v11 = MIOModelLayerTypeReduceL1;
        }
        else
        {
          if (a1 != 1255)
            goto LABEL_365;
          v11 = MIOModelLayerTypeReduceL2;
        }
      }
      else
      {
        switch(a1)
        {
          case 1260:
            v11 = MIOModelLayerTypeReduceMax;
            break;
          case 1265:
            v11 = MIOModelLayerTypeReduceMin;
            break;
          case 1270:
            v11 = MIOModelLayerTypeReduceSum;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    else if (a1 <= 1214)
    {
      if (a1 == 1200)
      {
        v11 = MIOModelLayerTypeRandomUniformDynamic;
      }
      else
      {
        if (a1 != 1210)
          goto LABEL_365;
        v11 = MIOModelLayerTypeRandomBernoulliLike;
      }
    }
    else
    {
      switch(a1)
      {
        case 1215:
          v11 = MIOModelLayerTypeRandomBernoulliStatic;
          break;
        case 1220:
          v11 = MIOModelLayerTypeRandomBernoulliDynamic;
          break;
        case 1230:
          v11 = MIOModelLayerTypeCategoricalDistribution;
          break;
        default:
          goto LABEL_365;
      }
    }
    goto LABEL_364;
  }
  if (a1 <= 1349)
  {
    if (a1 > 1312)
    {
      if (a1 <= 1319)
      {
        if (a1 == 1313)
        {
          v11 = MIOModelLayerTypeWhereNonZero;
        }
        else
        {
          if (a1 != 1315)
            goto LABEL_365;
          v11 = MIOModelLayerTypeMatrixBandPart;
        }
      }
      else
      {
        switch(a1)
        {
          case 1320:
            v11 = MIOModelLayerTypeLowerTriangular;
            break;
          case 1325:
            v11 = MIOModelLayerTypeUpperTriangular;
            break;
          case 1330:
            v11 = MIOModelLayerTypeWhereBroadcastable;
            break;
          default:
            goto LABEL_365;
        }
      }
    }
    else if (a1 <= 1284)
    {
      if (a1 == 1275)
      {
        v11 = MIOModelLayerTypeReduceProd;
      }
      else
      {
        if (a1 != 1280)
          goto LABEL_365;
        v11 = MIOModelLayerTypeReduceMean;
      }
    }
    else
    {
      switch(a1)
      {
        case 1285:
          v11 = MIOModelLayerTypeReduceLogSum;
          break;
        case 1290:
          v11 = MIOModelLayerTypeReduceSumSquare;
          break;
        case 1295:
          v11 = MIOModelLayerTypeReduceLogSumExp;
          break;
        default:
          goto LABEL_365;
      }
    }
    goto LABEL_364;
  }
  if (a1 <= 1454)
  {
    switch(a1)
    {
      case 1350:
        v11 = MIOModelLayerTypeLayerNormalization;
        break;
      case 1400:
        v11 = MIOModelLayerTypeNonMaximumSuppression;
        break;
      case 1450:
        v11 = MIOModelLayerTypeOneHot;
        break;
      default:
        goto LABEL_365;
    }
LABEL_364:
    v8 = *v11;
    goto LABEL_365;
  }
  switch(a1)
  {
    case 1455:
      v11 = MIOModelLayerTypeCumSum;
      goto LABEL_364;
    case 1460:
      v11 = MIOModelLayerTypeClampedReLU;
      goto LABEL_364;
    case 1461:
      v11 = MIOModelLayerTypeArgSort;
      goto LABEL_364;
    case 1465:
      v11 = MIOModelLayerTypePooling3D;
      goto LABEL_364;
    case 1466:
      v11 = MIOModelLayerTypeGlobalPooling3D;
      goto LABEL_364;
    case 1470:
      v11 = MIOModelLayerTypeSliceBySize;
      goto LABEL_364;
    case 1471:
      v11 = MIOModelLayerTypeConvolution3D;
      goto LABEL_364;
    default:
      break;
  }
LABEL_365:
  location = &stru_1E956AAC8;
  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  if (a1 > 344)
  {
    if (a1 <= 614)
    {
      if (a1 <= 429)
      {
        if (a1 != 345)
        {
          if (a1 != 400)
          {
            if (a1 != 420)
              goto LABEL_470;
            v17 = location;
            location = CFSTR("UniDirectionalLSTM");

            MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
            v18 = operator new(4uLL);
            __p = v18;
            *v18 = 20;
            v287 = v18 + 1;
            v288 = v18 + 1;
            v19 = v13;
            v292 = &off_1E95561F0;
            p_location = (id *)parseNeuralNetworkLSTMWeightParams;
            v294 = v19;
            v295 = &v292;
            MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
            v20 = v295;
            if (v295 == &v292)
            {
              v21 = 4;
              v20 = &v292;
            }
            else
            {
              if (!v295)
              {
LABEL_498:
                if (__p)
                {
                  v287 = __p;
                  operator delete(__p);
                }
                MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
                v120 = v290;
                if (!v290)
                  goto LABEL_898;
                p_shared_owners = (unint64_t *)&v290->__shared_owners_;
                do
                  v122 = __ldaxr(p_shared_owners);
                while (__stlxr(v122 - 1, p_shared_owners));
                goto LABEL_896;
              }
              v21 = 5;
            }
            (*v20)[v21]();
            goto LABEL_498;
          }
          v56 = location;
          location = CFSTR("SimpleRecurrent");

          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
          v57 = operator new(4uLL);
          __p = v57;
          *v57 = 30;
          v287 = v57 + 1;
          v288 = v57 + 1;
          v58 = v13;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v58;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v59 = v295;
          if (v295 == &v292)
          {
            v60 = 4;
            v59 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_579;
            v60 = 5;
          }
          (*v59)[v60]();
LABEL_579:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v158 = operator new(4uLL);
          __p = v158;
          *v158 = 31;
          v287 = v158 + 1;
          v288 = v158 + 1;
          v159 = v58;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v159;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v160 = v295;
          if (v295 == &v292)
          {
            v161 = 4;
            v160 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_715;
            v161 = 5;
          }
          (*v160)[v161]();
LABEL_715:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v210 = operator new(4uLL);
          __p = v210;
          *v210 = 32;
          v287 = v210 + 1;
          v288 = v210 + 1;
          v211 = v159;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v211;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v212 = v295;
          if (v295 == &v292)
          {
            v213 = 4;
            v212 = &v292;
          }
          else
          {
            if (!v295)
            {
LABEL_792:
              if (__p)
              {
                v287 = __p;
                operator delete(__p);
              }
              MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
              v120 = v290;
              if (!v290)
                goto LABEL_898;
              v229 = (unint64_t *)&v290->__shared_owners_;
              do
                v122 = __ldaxr(v229);
              while (__stlxr(v122 - 1, v229));
              goto LABEL_896;
            }
            v213 = 5;
          }
          (*v212)[v213]();
          goto LABEL_792;
        }
        v285 = CFSTR("INVALID");
        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v53 = operator new(4uLL);
        __p = v53;
        *v53 = 1;
        v287 = v53 + 1;
        v288 = v53 + 1;
        v292 = &off_1E95569D8;
        p_location = (id *)&v285;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
        v54 = v295;
        if (v295 == &v292)
        {
          v55 = 4;
          v54 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_569:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            objc_msgSend(CFSTR("ReorganizeData"), "stringByAppendingString:", v285);
            v153 = (void *)objc_claimAutoreleasedReturnValue();
            v154 = location;
            location = v153;

            v155 = v290;
            if (v290)
            {
              v156 = (unint64_t *)&v290->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            goto LABEL_593;
          }
          v55 = 5;
        }
        (*v54)[v55]();
        goto LABEL_569;
      }
      if (a1 != 430)
      {
        if (a1 != 500)
        {
          if (a1 != 605)
            goto LABEL_470;
          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
          v34 = operator new(4uLL);
          __p = v34;
          *v34 = 1;
          v287 = v34 + 1;
          v288 = v34 + 1;
          v35 = v12;
          v292 = &off_1E9567CB8;
          p_location = (id *)parseNeuralNetworkAndUpdateLayerHistogram;
          v294 = v35;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v36 = v295;
          if (v295 == &v292)
          {
            v37 = 4;
            v36 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_528;
            v37 = 5;
          }
          (*v36)[v37]();
LABEL_528:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v131 = operator new(4uLL);
          __p = v131;
          *v131 = 2;
          v287 = v131 + 1;
          v288 = v131 + 1;
          v132 = v35;
          v292 = &off_1E9567CB8;
          p_location = (id *)parseNeuralNetworkAndUpdateLayerHistogram;
          v294 = v132;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v133 = v295;
          if (v295 == &v292)
          {
            v134 = 4;
            v133 = &v292;
          }
          else
          {
            if (!v295)
            {
LABEL_692:
              if (__p)
              {
                v287 = __p;
                operator delete(__p);
              }
              MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
              v203 = location;
              location = CFSTR("Branch");

              v120 = v290;
              if (!v290)
                goto LABEL_898;
              v204 = (unint64_t *)&v290->__shared_owners_;
              do
                v122 = __ldaxr(v204);
              while (__stlxr(v122 - 1, v204));
              goto LABEL_896;
            }
            v134 = 5;
          }
          (*v133)[v134]();
          goto LABEL_692;
        }
        v91 = location;
        location = CFSTR("Custom");

        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v92 = operator new(4uLL);
        __p = v92;
        *v92 = 20;
        v287 = v92 + 1;
        v288 = v92 + 1;
        v93 = v13;
        v292 = &off_1E95561F0;
        p_location = (id *)parseNeuralNetworkWeightParams;
        v294 = v93;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
        v94 = v295;
        if (v295 == &v292)
        {
          v95 = 4;
          v94 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_632:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            v120 = v290;
            if (!v290)
              goto LABEL_898;
            v184 = (unint64_t *)&v290->__shared_owners_;
            do
              v122 = __ldaxr(v184);
            while (__stlxr(v122 - 1, v184));
            goto LABEL_896;
          }
          v95 = 5;
        }
        (*v94)[v95]();
        goto LABEL_632;
      }
      v86 = location;
      location = CFSTR("BiDirectionalLSTM");

      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v87 = operator new(4uLL);
      __p = v87;
      *v87 = 20;
      v287 = v87 + 1;
      v288 = v87 + 1;
      v88 = v13;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkLSTMWeightParams;
      v294 = v88;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v89 = v295;
      if (v295 == &v292)
      {
        v90 = 4;
        v89 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_624:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          v120 = v290;
          if (!v290)
            goto LABEL_898;
          v183 = (unint64_t *)&v290->__shared_owners_;
          do
            v122 = __ldaxr(v183);
          while (__stlxr(v122 - 1, v183));
          goto LABEL_896;
        }
        v90 = 5;
      }
      (*v89)[v90]();
      goto LABEL_624;
    }
    if (a1 <= 1069)
    {
      if (a1 != 615)
      {
        if (a1 != 1040)
        {
          if (a1 != 1045)
            goto LABEL_470;
          v26 = location;
          location = CFSTR("BatchedMatmul");

          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
          v27 = operator new(4uLL);
          __p = v27;
          *v27 = 8;
          v287 = v27 + 1;
          v288 = v27 + 1;
          v28 = v13;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v28;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v29 = v295;
          if (v295 == &v292)
          {
            v30 = 4;
            v29 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_514;
            v30 = 5;
          }
          (*v29)[v30]();
LABEL_514:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v124 = operator new(4uLL);
          __p = v124;
          *v124 = 9;
          v287 = v124 + 1;
          v288 = v124 + 1;
          v125 = v28;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v125;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v126 = v295;
          if (v295 == &v292)
          {
            v127 = 4;
            v126 = &v292;
          }
          else
          {
            if (!v295)
            {
LABEL_677:
              if (__p)
              {
                v287 = __p;
                operator delete(__p);
              }
              MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
              v120 = v290;
              if (!v290)
                goto LABEL_898;
              v198 = (unint64_t *)&v290->__shared_owners_;
              do
                v122 = __ldaxr(v198);
              while (__stlxr(v122 - 1, v198));
              goto LABEL_896;
            }
            v127 = 5;
          }
          (*v126)[v127]();
          goto LABEL_677;
        }
        v71 = location;
        location = CFSTR("EmbeddingND");

        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v72 = operator new(4uLL);
        __p = v72;
        *v72 = 20;
        v287 = v72 + 1;
        v288 = v72 + 1;
        v73 = v13;
        v292 = &off_1E95561F0;
        p_location = (id *)parseNeuralNetworkWeightParams;
        v294 = v73;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
        v74 = v295;
        if (v295 == &v292)
        {
          v75 = 4;
          v74 = &v292;
        }
        else
        {
          if (!v295)
            goto LABEL_603;
          v75 = 5;
        }
        (*v74)[v75]();
LABEL_603:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        v171 = operator new(4uLL);
        __p = v171;
        *v171 = 21;
        v287 = v171 + 1;
        v288 = v171 + 1;
        v172 = v73;
        v292 = &off_1E95561F0;
        p_location = (id *)parseNeuralNetworkWeightParams;
        v294 = v172;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
        v173 = v295;
        if (v295 == &v292)
        {
          v174 = 4;
          v173 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_730:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            v120 = v290;
            if (!v290)
              goto LABEL_898;
            v216 = (unint64_t *)&v290->__shared_owners_;
            do
              v122 = __ldaxr(v216);
            while (__stlxr(v122 - 1, v216));
            goto LABEL_896;
          }
          v174 = 5;
        }
        (*v173)[v174]();
        goto LABEL_730;
      }
      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v67 = operator new(4uLL);
      __p = v67;
      *v67 = 3;
      v287 = v67 + 1;
      v288 = v67 + 1;
      v68 = v12;
      v292 = &off_1E9567CB8;
      p_location = (id *)parseNeuralNetworkAndUpdateLayerHistogram;
      v294 = v68;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v69 = v295;
      if (v295 == &v292)
      {
        v70 = 4;
        v69 = &v292;
      }
      else
      {
        if (!v295)
          goto LABEL_596;
        v70 = 5;
      }
      (*v69)[v70]();
LABEL_596:
      if (__p)
      {
        v287 = __p;
        operator delete(__p);
      }
      v167 = operator new(4uLL);
      __p = v167;
      *v167 = 4;
      v287 = v167 + 1;
      v288 = v167 + 1;
      v168 = v68;
      v292 = &off_1E9567CB8;
      p_location = (id *)parseNeuralNetworkAndUpdateLayerHistogram;
      v294 = v168;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v169 = v295;
      if (v295 == &v292)
      {
        v170 = 4;
        v169 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_722:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          v214 = location;
          location = CFSTR("Loop");

          v120 = v290;
          if (!v290)
            goto LABEL_898;
          v215 = (unint64_t *)&v290->__shared_owners_;
          do
            v122 = __ldaxr(v215);
          while (__stlxr(v122 - 1, v215));
          goto LABEL_896;
        }
        v170 = 5;
      }
      (*v169)[v170]();
      goto LABEL_722;
    }
    if (a1 != 1070)
    {
      if (a1 != 1350)
      {
        if (a1 != 1471)
          goto LABEL_470;
        v41 = location;
        location = CFSTR("Convolution3D");

        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v42 = operator new(4uLL);
        __p = v42;
        *v42 = 90;
        v287 = v42 + 1;
        v288 = v42 + 1;
        v43 = v13;
        v292 = &off_1E95561F0;
        p_location = (id *)parseNeuralNetworkWeightParams;
        v294 = v43;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
        v44 = v295;
        if (v295 == &v292)
        {
          v45 = 4;
          v44 = &v292;
        }
        else
        {
          if (!v295)
            goto LABEL_545;
          v45 = 5;
        }
        (*v44)[v45]();
LABEL_545:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        v140 = operator new(4uLL);
        __p = v140;
        *v140 = 91;
        v287 = v140 + 1;
        v288 = v140 + 1;
        v141 = v43;
        v292 = &off_1E95561F0;
        p_location = (id *)parseNeuralNetworkWeightParams;
        v294 = v141;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
        v142 = v295;
        if (v295 == &v292)
        {
          v143 = 4;
          v142 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_700:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            v120 = v290;
            if (!v290)
              goto LABEL_898;
            v205 = (unint64_t *)&v290->__shared_owners_;
            do
              v122 = __ldaxr(v205);
            while (__stlxr(v122 - 1, v205));
            goto LABEL_896;
          }
          v143 = 5;
        }
        (*v142)[v143]();
        goto LABEL_700;
      }
      v111 = location;
      location = CFSTR("LayerNormalization");

      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v112 = operator new(4uLL);
      __p = v112;
      *v112 = 3;
      v287 = v112 + 1;
      v288 = v112 + 1;
      v113 = v13;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkWeightParams;
      v294 = v113;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v114 = v295;
      if (v295 == &v292)
      {
        v115 = 4;
        v114 = &v292;
      }
      else
      {
        if (!v295)
          goto LABEL_663;
        v115 = 5;
      }
      (*v114)[v115]();
LABEL_663:
      if (__p)
      {
        v287 = __p;
        operator delete(__p);
      }
      v191 = operator new(4uLL);
      __p = v191;
      *v191 = 4;
      v287 = v191 + 1;
      v288 = v191 + 1;
      v192 = v113;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkWeightParams;
      v294 = v192;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v193 = v295;
      if (v295 == &v292)
      {
        v194 = 4;
        v193 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_762:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          v120 = v290;
          if (!v290)
            goto LABEL_898;
          v220 = (unint64_t *)&v290->__shared_owners_;
          do
            v122 = __ldaxr(v220);
          while (__stlxr(v122 - 1, v220));
          goto LABEL_896;
        }
        v194 = 5;
      }
      (*v193)[v194]();
      goto LABEL_762;
    }
    v106 = location;
    location = CFSTR("LoadConstantND");

    MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
    v107 = operator new(4uLL);
    __p = v107;
    *v107 = 2;
    v287 = v107 + 1;
    v288 = v107 + 1;
    v108 = v13;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v108;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v109 = v295;
    if (v295 == &v292)
    {
      v110 = 4;
      v109 = &v292;
    }
    else
    {
      if (!v295)
      {
LABEL_655:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
        v120 = v290;
        if (!v290)
          goto LABEL_898;
        v190 = (unint64_t *)&v290->__shared_owners_;
        do
          v122 = __ldaxr(v190);
        while (__stlxr(v122 - 1, v190));
LABEL_896:
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
        goto LABEL_898;
      }
      v110 = 5;
    }
    (*v109)[v110]();
    goto LABEL_655;
  }
  if (a1 > 199)
  {
    if (a1 <= 244)
    {
      if (a1 == 200)
      {
        MLAssetIO::ProtoWireFormatParser::ProtoWireFormatParser((uint64_t)&v292, a2);
        v61 = CFSTR("INVALID");
        while (1)
        {
          Field = MLAssetIO::ProtoWireFormatParser::nextField((MLAssetIO::ProtoWireFormatParser *)&v292);
          if (!Field)
            break;
          if (Field - 4 >= 0xFFFFFFFD)
          {
            if (Field > 3)
              v63 = "INVALID";
            else
              v63 = off_1E9568B60[Field - 1];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v63);
            v277 = (NSString *)objc_claimAutoreleasedReturnValue();
            prettyProtoFieldName(v277, CFSTR("MLPaddingLayerParamsPaddingType_"));
            v278 = objc_claimAutoreleasedReturnValue();

            v61 = (__CFString *)v278;
            break;
          }
        }
        objc_msgSend(CFSTR("Padding"), "stringByAppendingString:", v61);
        v279 = (void *)objc_claimAutoreleasedReturnValue();
        v280 = location;
        location = v279;

        goto LABEL_898;
      }
      if (a1 != 210)
      {
        if (a1 != 220)
          goto LABEL_470;
        v22 = location;
        location = CFSTR("Unary");

        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v23 = operator new(4uLL);
        __p = v23;
        *v23 = 1;
        v287 = v23 + 1;
        v288 = v23 + 1;
        v292 = &off_1E9556878;
        p_location = &location;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
        v24 = v295;
        if (v295 == &v292)
        {
          v25 = 4;
          v24 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_506:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            v120 = v290;
            if (!v290)
              goto LABEL_898;
            v123 = (unint64_t *)&v290->__shared_owners_;
            do
              v122 = __ldaxr(v123);
            while (__stlxr(v122 - 1, v123));
            goto LABEL_896;
          }
          v25 = 5;
        }
        (*v24)[v25]();
        goto LABEL_506;
      }
      v285 = CFSTR("INVALID");
      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v64 = operator new(4uLL);
      __p = v64;
      *v64 = 5;
      v287 = v64 + 1;
      v288 = v64 + 1;
      v292 = &off_1E9556928;
      p_location = (id *)&v285;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
      v65 = v295;
      if (v295 == &v292)
      {
        v66 = 4;
        v65 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_586:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          objc_msgSend(CFSTR("Upsample"), "stringByAppendingString:", v285);
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          v163 = location;
          location = v162;

          v164 = v290;
          if (v290)
          {
            v165 = (unint64_t *)&v290->__shared_owners_;
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_593;
        }
        v66 = 5;
      }
      (*v65)[v66]();
      goto LABEL_586;
    }
    if (a1 != 245)
    {
      if (a1 != 250)
      {
        if (a1 != 280)
          goto LABEL_470;
        v285 = CFSTR("INVALID");
        MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
        v38 = operator new(4uLL);
        __p = v38;
        *v38 = 1;
        v287 = v38 + 1;
        v288 = v38 + 1;
        v292 = &off_1E95568D0;
        p_location = (id *)&v285;
        v295 = &v292;
        MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
        v39 = v295;
        if (v295 == &v292)
        {
          v40 = 4;
          v39 = &v292;
        }
        else
        {
          if (!v295)
          {
LABEL_535:
            if (__p)
            {
              v287 = __p;
              operator delete(__p);
            }
            MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
            objc_msgSend(CFSTR("Reduce"), "stringByAppendingString:", v285);
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            v136 = location;
            location = v135;

            v137 = v290;
            if (v290)
            {
              v138 = (unint64_t *)&v290->__shared_owners_;
              do
                v139 = __ldaxr(v138);
              while (__stlxr(v139 - 1, v138));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
            goto LABEL_593;
          }
          v40 = 5;
        }
        (*v39)[v40]();
        goto LABEL_535;
      }
      v101 = location;
      location = CFSTR("Bias");

      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v102 = operator new(4uLL);
      __p = v102;
      *v102 = 2;
      v287 = v102 + 1;
      v288 = v102 + 1;
      v103 = v13;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkWeightParams;
      v294 = v103;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v104 = v295;
      if (v295 == &v292)
      {
        v105 = 4;
        v104 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_647:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          v120 = v290;
          if (!v290)
            goto LABEL_898;
          v189 = (unint64_t *)&v290->__shared_owners_;
          do
            v122 = __ldaxr(v189);
          while (__stlxr(v122 - 1, v189));
          goto LABEL_896;
        }
        v105 = 5;
      }
      (*v104)[v105]();
      goto LABEL_647;
    }
    v96 = location;
    location = CFSTR("Scale");

    MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
    v97 = operator new(4uLL);
    __p = v97;
    *v97 = 2;
    v287 = v97 + 1;
    v288 = v97 + 1;
    v98 = v13;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v98;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v99 = v295;
    if (v295 == &v292)
    {
      v100 = 4;
      v99 = &v292;
    }
    else
    {
      if (!v295)
        goto LABEL_640;
      v100 = 5;
    }
    (*v99)[v100]();
LABEL_640:
    if (__p)
    {
      v287 = __p;
      operator delete(__p);
    }
    v185 = operator new(4uLL);
    __p = v185;
    *v185 = 5;
    v287 = v185 + 1;
    v288 = v185 + 1;
    v186 = v98;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v186;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v187 = v295;
    if (v295 == &v292)
    {
      v188 = 4;
      v187 = &v292;
    }
    else
    {
      if (!v295)
      {
LABEL_754:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
        v120 = v290;
        if (!v290)
          goto LABEL_898;
        v219 = (unint64_t *)&v290->__shared_owners_;
        do
          v122 = __ldaxr(v219);
        while (__stlxr(v122 - 1, v219));
        goto LABEL_896;
      }
      v188 = 5;
    }
    (*v187)[v188]();
    goto LABEL_754;
  }
  if (a1 > 139)
  {
    if (a1 != 140)
    {
      if (a1 != 150)
      {
        if (a1 == 160)
        {
          LOBYTE(v285) = 0;
          v284 = 0;
          MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
          v31 = operator new(4uLL);
          __p = v31;
          *v31 = 6;
          v287 = v31 + 1;
          v288 = v31 + 1;
          v292 = &off_1E9556A30;
          p_location = (id *)&v285;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
          v32 = v295;
          if (v295 == &v292)
          {
            v33 = 4;
            v32 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_521;
            v33 = 5;
          }
          (*v32)[v33]();
LABEL_521:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v128 = operator new(4uLL);
          __p = v128;
          *v128 = 5;
          v287 = v128 + 1;
          v288 = v128 + 1;
          v292 = &off_1E9556A88;
          p_location = (id *)&v284;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
          v129 = v295;
          if (v295 == &v292)
          {
            v130 = 4;
            v129 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_685;
            v130 = 5;
          }
          (*v129)[v130]();
LABEL_685:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v199 = operator new(4uLL);
          __p = v199;
          *v199 = 15;
          v287 = v199 + 1;
          v288 = v199 + 1;
          v200 = v13;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v200;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v201 = v295;
          if (v295 == &v292)
          {
            v202 = 4;
            v201 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_777;
            v202 = 5;
          }
          (*v201)[v202]();
LABEL_777:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v224 = operator new(4uLL);
          __p = v224;
          *v224 = 16;
          v287 = v224 + 1;
          v288 = v224 + 1;
          v225 = v200;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v225;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v226 = v295;
          if (v295 == &v292)
          {
            v227 = 4;
            v226 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_807;
            v227 = 5;
          }
          (*v226)[v227]();
LABEL_807:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v234 = operator new(4uLL);
          __p = v234;
          *v234 = 17;
          v287 = v234 + 1;
          v288 = v234 + 1;
          v235 = v225;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v235;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v236 = v295;
          if (v295 == &v292)
          {
            v237 = 4;
            v236 = &v292;
          }
          else
          {
            if (!v295)
              goto LABEL_821;
            v237 = 5;
          }
          (*v236)[v237]();
LABEL_821:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          v241 = operator new(4uLL);
          __p = v241;
          *v241 = 18;
          v287 = v241 + 1;
          v288 = v241 + 1;
          v242 = v235;
          v292 = &off_1E95561F0;
          p_location = (id *)parseNeuralNetworkWeightParams;
          v294 = v242;
          v295 = &v292;
          MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
          v243 = v295;
          if (v295 == &v292)
          {
            v244 = 4;
            v243 = &v292;
          }
          else
          {
            if (!v295)
            {
LABEL_835:
              if (__p)
              {
                v287 = __p;
                operator delete(__p);
              }
              MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
              if (v284)
                v248 = v285 == 0;
              else
                v248 = 1;
              if (v248)
                v249 = CFSTR("BatchNorm");
              else
                v249 = CFSTR("InstanceBatchNorm");
              objc_storeStrong(&location, v249);
              v120 = v290;
              if (!v290)
                goto LABEL_898;
              v250 = (unint64_t *)&v290->__shared_owners_;
              do
                v122 = __ldaxr(v250);
              while (__stlxr(v122 - 1, v250));
              goto LABEL_896;
            }
            v244 = 5;
          }
          (*v243)[v244]();
          goto LABEL_835;
        }
LABEL_470:
        if (a1 <= 879)
        {
          if (a1 > 599)
          {
            if (a1 > 759)
            {
              if (a1 <= 824)
              {
                if (a1 > 789)
                {
                  if (a1 > 814)
                  {
                    if (a1 == 815)
                    {
                      v116 = "MLNeuralNetworkLayerlayer_equal";
                      goto LABEL_1205;
                    }
                    if (a1 == 820)
                    {
                      v116 = "MLNeuralNetworkLayerlayer_notEqual";
                      goto LABEL_1205;
                    }
                  }
                  else
                  {
                    if (a1 == 790)
                    {
                      v116 = "MLNeuralNetworkLayerlayer_erf";
                      goto LABEL_1205;
                    }
                    if (a1 == 795)
                    {
                      v116 = "MLNeuralNetworkLayerlayer_gelu";
                      goto LABEL_1205;
                    }
                  }
                }
                else if (a1 > 774)
                {
                  if (a1 == 775)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_acosh";
                    goto LABEL_1205;
                  }
                  if (a1 == 780)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_atanh";
                    goto LABEL_1205;
                  }
                }
                else
                {
                  if (a1 == 760)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_tanh";
                    goto LABEL_1205;
                  }
                  if (a1 == 770)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_asinh";
                    goto LABEL_1205;
                  }
                }
              }
              else
              {
                if (a1 <= 849)
                {
                  switch(a1)
                  {
                    case 825:
                      v116 = "MLNeuralNetworkLayerlayer_lessThan";
                      goto LABEL_1205;
                    case 826:
                    case 828:
                    case 829:
                    case 831:
                      goto LABEL_1204;
                    case 827:
                      v116 = "MLNeuralNetworkLayerlayer_lessEqual";
                      goto LABEL_1205;
                    case 830:
                      v116 = "MLNeuralNetworkLayerlayer_greaterThan";
                      goto LABEL_1205;
                    case 832:
                      v116 = "MLNeuralNetworkLayerlayer_greaterEqual";
                      goto LABEL_1205;
                    default:
                      if (a1 == 840)
                      {
                        v116 = "MLNeuralNetworkLayerlayer_logicalOr";
                      }
                      else
                      {
                        if (a1 != 845)
                          goto LABEL_1204;
                        v116 = "MLNeuralNetworkLayerlayer_logicalXor";
                      }
                      break;
                  }
                  goto LABEL_1205;
                }
                if (a1 <= 864)
                {
                  if (a1 == 850)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_logicalNot";
                    goto LABEL_1205;
                  }
                  if (a1 == 855)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_logicalAnd";
                    goto LABEL_1205;
                  }
                }
                else
                {
                  switch(a1)
                  {
                    case 865:
                      v116 = "MLNeuralNetworkLayerlayer_modBroadcastable";
                      goto LABEL_1205;
                    case 870:
                      v116 = "MLNeuralNetworkLayerlayer_minBroadcastable";
                      goto LABEL_1205;
                    case 875:
                      v116 = "MLNeuralNetworkLayerlayer_maxBroadcastable";
                      goto LABEL_1205;
                  }
                }
              }
            }
            else if (a1 > 684)
            {
              if (a1 > 729)
              {
                if (a1 <= 739)
                {
                  if (a1 == 730)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_asin";
                    goto LABEL_1205;
                  }
                  if (a1 == 735)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_acos";
                    goto LABEL_1205;
                  }
                }
                else
                {
                  switch(a1)
                  {
                    case 740:
                      v116 = "MLNeuralNetworkLayerlayer_atan";
                      goto LABEL_1205;
                    case 750:
                      v116 = "MLNeuralNetworkLayerlayer_sinh";
                      goto LABEL_1205;
                    case 755:
                      v116 = "MLNeuralNetworkLayerlayer_cosh";
                      goto LABEL_1205;
                  }
                }
              }
              else if (a1 <= 709)
              {
                if (a1 == 685)
                {
                  v116 = "MLNeuralNetworkLayerlayer_round";
                  goto LABEL_1205;
                }
                if (a1 == 700)
                {
                  v116 = "MLNeuralNetworkLayerlayer_exp2";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 710:
                    v116 = "MLNeuralNetworkLayerlayer_sin";
                    goto LABEL_1205;
                  case 715:
                    v116 = "MLNeuralNetworkLayerlayer_cos";
                    goto LABEL_1205;
                  case 720:
                    v116 = "MLNeuralNetworkLayerlayer_tan";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 > 639)
            {
              if (a1 <= 664)
              {
                if (a1 == 640)
                {
                  v116 = "MLNeuralNetworkLayerlayer_rangeDynamic";
                  goto LABEL_1205;
                }
                if (a1 == 660)
                {
                  v116 = "MLNeuralNetworkLayerlayer_clip";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 665:
                    v116 = "MLNeuralNetworkLayerlayer_ceil";
                    goto LABEL_1205;
                  case 670:
                    v116 = "MLNeuralNetworkLayerlayer_floor";
                    goto LABEL_1205;
                  case 680:
                    v116 = "MLNeuralNetworkLayerlayer_sign";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 <= 619)
            {
              if (a1 == 600)
              {
                v116 = "MLNeuralNetworkLayerlayer_copy";
                goto LABEL_1205;
              }
            }
            else
            {
              switch(a1)
              {
                case 620:
                  v116 = "MLNeuralNetworkLayerlayer_loopBreak";
                  goto LABEL_1205;
                case 625:
                  v116 = "MLNeuralNetworkLayerlayer_loopContinue";
                  goto LABEL_1205;
                case 635:
                  v116 = "MLNeuralNetworkLayerlayer_rangeStatic";
                  goto LABEL_1205;
              }
            }
          }
          else if (a1 <= 244)
          {
            if (a1 <= 179)
            {
              if (a1 > 164)
              {
                switch(a1)
                {
                  case 165:
                    v116 = "MLNeuralNetworkLayerlayer_mvn";
                    goto LABEL_1205;
                  case 170:
                    v116 = "MLNeuralNetworkLayerlayer_l2normalize";
                    goto LABEL_1205;
                  case 175:
                    v116 = "MLNeuralNetworkLayerlayer_softmax";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 > 211)
            {
              if (a1 <= 229)
              {
                if (a1 == 212)
                {
                  v116 = "MLNeuralNetworkLayerlayer_cropResize";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 230:
                    v116 = "MLNeuralNetworkLayerlayer_add";
                    goto LABEL_1205;
                  case 231:
                    v116 = "MLNeuralNetworkLayerlayer_multiply";
                    goto LABEL_1205;
                  case 240:
                    v116 = "MLNeuralNetworkLayerlayer_average";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 <= 199)
            {
              if (a1 == 180)
              {
                v116 = "MLNeuralNetworkLayerlayer_lrn";
                goto LABEL_1205;
              }
              if (a1 == 190)
              {
                v116 = "MLNeuralNetworkLayerlayer_crop";
                goto LABEL_1205;
              }
            }
            else if (a1 == 211)
            {
              v116 = "MLNeuralNetworkLayerlayer_resizeBilinear";
              goto LABEL_1205;
            }
          }
          else if (a1 > 319)
          {
            if (a1 > 399)
            {
              if (a1 == 410)
              {
                v116 = "MLNeuralNetworkLayerlayer_gru";
                goto LABEL_1205;
              }
            }
            else if (a1 <= 339)
            {
              if (a1 == 320)
              {
                v116 = "MLNeuralNetworkLayerlayer_concat";
                goto LABEL_1205;
              }
              if (a1 == 330)
              {
                v116 = "MLNeuralNetworkLayerlayer_split";
                goto LABEL_1205;
              }
            }
            else
            {
              if (a1 == 340)
              {
                v116 = "MLNeuralNetworkLayerlayer_sequenceRepeat";
                goto LABEL_1205;
              }
              if (a1 == 350)
              {
                v116 = "MLNeuralNetworkLayerlayer_slice";
                goto LABEL_1205;
              }
            }
          }
          else if (a1 > 279)
          {
            if (a1 <= 299)
            {
              if (a1 == 290)
              {
                v116 = "MLNeuralNetworkLayerlayer_loadConstant";
                goto LABEL_1205;
              }
            }
            else
            {
              switch(a1)
              {
                case 300:
                  v116 = "MLNeuralNetworkLayerlayer_reshape";
                  goto LABEL_1205;
                case 301:
                  v116 = "MLNeuralNetworkLayerlayer_flatten";
                  goto LABEL_1205;
                case 310:
                  v116 = "MLNeuralNetworkLayerlayer_permute";
                  goto LABEL_1205;
              }
            }
          }
          else if (a1 > 259)
          {
            switch(a1)
            {
              case 260:
                v116 = "MLNeuralNetworkLayerlayer_max";
                goto LABEL_1205;
              case 261:
                v116 = "MLNeuralNetworkLayerlayer_min";
                goto LABEL_1205;
              case 270:
                v116 = "MLNeuralNetworkLayerlayer_dot";
                goto LABEL_1205;
            }
          }
        }
        else if (a1 > 1139)
        {
          if (a1 <= 1274)
          {
            if (a1 <= 1199)
            {
              if (a1 <= 1169)
              {
                if (a1 > 1149)
                {
                  if (a1 == 1150)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_rankPreservingReshape";
                    goto LABEL_1205;
                  }
                  if (a1 == 1155)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_constantPad";
                    goto LABEL_1205;
                  }
                }
                else
                {
                  if (a1 == 1140)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_reshapeStatic";
                    goto LABEL_1205;
                  }
                  if (a1 == 1145)
                  {
                    v116 = "MLNeuralNetworkLayerlayer_reshapeDynamic";
                    goto LABEL_1205;
                  }
                }
              }
              else if (a1 <= 1179)
              {
                if (a1 == 1170)
                {
                  v116 = "MLNeuralNetworkLayerlayer_randomNormalLike";
                  goto LABEL_1205;
                }
                if (a1 == 1175)
                {
                  v116 = "MLNeuralNetworkLayerlayer_randomNormalStatic";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 1180:
                    v116 = "MLNeuralNetworkLayerlayer_randomNormalDynamic";
                    goto LABEL_1205;
                  case 1190:
                    v116 = "MLNeuralNetworkLayerlayer_randomUniformLike";
                    goto LABEL_1205;
                  case 1195:
                    v116 = "MLNeuralNetworkLayerlayer_randomUniformStatic";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 > 1249)
            {
              if (a1 <= 1259)
              {
                if (a1 == 1250)
                {
                  v116 = "MLNeuralNetworkLayerlayer_reduceL1";
                  goto LABEL_1205;
                }
                if (a1 == 1255)
                {
                  v116 = "MLNeuralNetworkLayerlayer_reduceL2";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 1260:
                    v116 = "MLNeuralNetworkLayerlayer_reduceMax";
                    goto LABEL_1205;
                  case 1265:
                    v116 = "MLNeuralNetworkLayerlayer_reduceMin";
                    goto LABEL_1205;
                  case 1270:
                    v116 = "MLNeuralNetworkLayerlayer_reduceSum";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 <= 1214)
            {
              if (a1 == 1200)
              {
                v116 = "MLNeuralNetworkLayerlayer_randomUniformDynamic";
                goto LABEL_1205;
              }
              if (a1 == 1210)
              {
                v116 = "MLNeuralNetworkLayerlayer_randomBernoulliLike";
                goto LABEL_1205;
              }
            }
            else
            {
              switch(a1)
              {
                case 1215:
                  v116 = "MLNeuralNetworkLayerlayer_randomBernoulliStatic";
                  goto LABEL_1205;
                case 1220:
                  v116 = "MLNeuralNetworkLayerlayer_randomBernoulliDynamic";
                  goto LABEL_1205;
                case 1230:
                  v116 = "MLNeuralNetworkLayerlayer_categoricalDistribution";
                  goto LABEL_1205;
              }
            }
          }
          else if (a1 > 1349)
          {
            if (a1 > 1454)
            {
              switch(a1)
              {
                case 1455:
                  v116 = "MLNeuralNetworkLayerlayer_cumSum";
                  break;
                case 1460:
                  v116 = "MLNeuralNetworkLayerlayer_clampedReLU";
                  break;
                case 1461:
                  v116 = "MLNeuralNetworkLayerlayer_argSort";
                  break;
                case 1465:
                  v116 = "MLNeuralNetworkLayerlayer_pooling3d";
                  break;
                case 1466:
                  v116 = "MLNeuralNetworkLayerlayer_globalPooling3d";
                  break;
                case 1470:
                  v116 = "MLNeuralNetworkLayerlayer_sliceBySize";
                  break;
                case 1471:
                  v116 = "MLNeuralNetworkLayerlayer_convolution3d";
                  break;
                default:
                  goto LABEL_1204;
              }
              goto LABEL_1205;
            }
            if (a1 == 1400)
            {
              v116 = "MLNeuralNetworkLayerlayer_NonMaximumSuppression";
              goto LABEL_1205;
            }
            if (a1 == 1450)
            {
              v116 = "MLNeuralNetworkLayerlayer_oneHot";
              goto LABEL_1205;
            }
          }
          else if (a1 > 1312)
          {
            if (a1 <= 1319)
            {
              if (a1 == 1313)
              {
                v116 = "MLNeuralNetworkLayerlayer_whereNonZero";
                goto LABEL_1205;
              }
              if (a1 == 1315)
              {
                v116 = "MLNeuralNetworkLayerlayer_matrixBandPart";
                goto LABEL_1205;
              }
            }
            else
            {
              switch(a1)
              {
                case 1320:
                  v116 = "MLNeuralNetworkLayerlayer_lowerTriangular";
                  goto LABEL_1205;
                case 1325:
                  v116 = "MLNeuralNetworkLayerlayer_upperTriangular";
                  goto LABEL_1205;
                case 1330:
                  v116 = "MLNeuralNetworkLayerlayer_whereBroadcastable";
                  goto LABEL_1205;
              }
            }
          }
          else if (a1 <= 1284)
          {
            if (a1 == 1275)
            {
              v116 = "MLNeuralNetworkLayerlayer_reduceProd";
              goto LABEL_1205;
            }
            if (a1 == 1280)
            {
              v116 = "MLNeuralNetworkLayerlayer_reduceMean";
              goto LABEL_1205;
            }
          }
          else
          {
            switch(a1)
            {
              case 1285:
                v116 = "MLNeuralNetworkLayerlayer_reduceLogSum";
                goto LABEL_1205;
              case 1290:
                v116 = "MLNeuralNetworkLayerlayer_reduceSumSquare";
                goto LABEL_1205;
              case 1295:
                v116 = "MLNeuralNetworkLayerlayer_reduceLogSumExp";
                goto LABEL_1205;
            }
          }
        }
        else if (a1 > 994)
        {
          if (a1 > 1079)
          {
            if (a1 > 1109)
            {
              if (a1 <= 1124)
              {
                if (a1 == 1110)
                {
                  v116 = "MLNeuralNetworkLayerlayer_broadcastToDynamic";
                  goto LABEL_1205;
                }
                if (a1 == 1120)
                {
                  v116 = "MLNeuralNetworkLayerlayer_squeeze";
                  goto LABEL_1205;
                }
              }
              else
              {
                switch(a1)
                {
                  case 1125:
                    v116 = "MLNeuralNetworkLayerlayer_expandDims";
                    goto LABEL_1205;
                  case 1130:
                    v116 = "MLNeuralNetworkLayerlayer_flattenTo2D";
                    goto LABEL_1205;
                  case 1135:
                    v116 = "MLNeuralNetworkLayerlayer_reshapeLike";
                    goto LABEL_1205;
                }
              }
            }
            else if (a1 <= 1089)
            {
              if (a1 == 1080)
              {
                v116 = "MLNeuralNetworkLayerlayer_fillLike";
                goto LABEL_1205;
              }
              if (a1 == 1085)
              {
                v116 = "MLNeuralNetworkLayerlayer_fillStatic";
                goto LABEL_1205;
              }
            }
            else
            {
              switch(a1)
              {
                case 1090:
                  v116 = "MLNeuralNetworkLayerlayer_fillDynamic";
                  goto LABEL_1205;
                case 1100:
                  v116 = "MLNeuralNetworkLayerlayer_broadcastToLike";
                  goto LABEL_1205;
                case 1105:
                  v116 = "MLNeuralNetworkLayerlayer_broadcastToStatic";
                  goto LABEL_1205;
              }
            }
          }
          else if (a1 > 1024)
          {
            if (a1 <= 1044)
            {
              if (a1 == 1025)
              {
                v116 = "MLNeuralNetworkLayerlayer_argMax";
                goto LABEL_1205;
              }
            }
            else if (a1 == 1065)
            {
              v116 = "MLNeuralNetworkLayerlayer_getShape";
              goto LABEL_1205;
            }
          }
          else if (a1 <= 1004)
          {
            if (a1 == 995)
            {
              v116 = "MLNeuralNetworkLayerlayer_sliceStatic";
              goto LABEL_1205;
            }
            if (a1 == 1000)
            {
              v116 = "MLNeuralNetworkLayerlayer_sliceDynamic";
              goto LABEL_1205;
            }
          }
          else
          {
            switch(a1)
            {
              case 1005:
                v116 = "MLNeuralNetworkLayerlayer_slidingWindows";
                goto LABEL_1205;
              case 1015:
                v116 = "MLNeuralNetworkLayerlayer_topK";
                goto LABEL_1205;
              case 1020:
                v116 = "MLNeuralNetworkLayerlayer_argMin";
                goto LABEL_1205;
            }
          }
        }
        else if (a1 > 939)
        {
          if (a1 <= 959)
          {
            switch(a1)
            {
              case 945:
                v116 = "MLNeuralNetworkLayerlayer_scatterND";
                break;
              case 946:
              case 947:
              case 948:
              case 949:
              case 951:
              case 953:
                goto LABEL_1204;
              case 950:
                v116 = "MLNeuralNetworkLayerlayer_softmaxND";
                break;
              case 952:
                v116 = "MLNeuralNetworkLayerlayer_gatherAlongAxis";
                break;
              case 954:
                v116 = "MLNeuralNetworkLayerlayer_scatterAlongAxis";
                break;
              default:
                if (a1 != 940)
                  goto LABEL_1204;
                v116 = "MLNeuralNetworkLayerlayer_gatherND";
                break;
            }
            goto LABEL_1205;
          }
          if (a1 <= 974)
          {
            if (a1 == 960)
            {
              v116 = "MLNeuralNetworkLayerlayer_reverse";
              goto LABEL_1205;
            }
            if (a1 == 965)
            {
              v116 = "MLNeuralNetworkLayerlayer_reverseSeq";
              goto LABEL_1205;
            }
          }
          else
          {
            switch(a1)
            {
              case 975:
                v116 = "MLNeuralNetworkLayerlayer_splitND";
                goto LABEL_1205;
              case 980:
                v116 = "MLNeuralNetworkLayerlayer_concatND";
                goto LABEL_1205;
              case 985:
                v116 = "MLNeuralNetworkLayerlayer_transpose";
                goto LABEL_1205;
            }
          }
        }
        else if (a1 > 904)
        {
          if (a1 <= 924)
          {
            if (a1 == 905)
            {
              v116 = "MLNeuralNetworkLayerlayer_subtractBroadcastable";
              goto LABEL_1205;
            }
            if (a1 == 920)
            {
              v116 = "MLNeuralNetworkLayerlayer_tile";
              goto LABEL_1205;
            }
          }
          else
          {
            switch(a1)
            {
              case 925:
                v116 = "MLNeuralNetworkLayerlayer_stack";
                goto LABEL_1205;
              case 930:
                v116 = "MLNeuralNetworkLayerlayer_gather";
                goto LABEL_1205;
              case 935:
                v116 = "MLNeuralNetworkLayerlayer_scatter";
                goto LABEL_1205;
            }
          }
        }
        else if (a1 <= 889)
        {
          if (a1 == 880)
          {
            v116 = "MLNeuralNetworkLayerlayer_addBroadcastable";
            goto LABEL_1205;
          }
          if (a1 == 885)
          {
            v116 = "MLNeuralNetworkLayerlayer_powBroadcastable";
            goto LABEL_1205;
          }
        }
        else
        {
          switch(a1)
          {
            case 890:
              v116 = "MLNeuralNetworkLayerlayer_divideBroadcastable";
              goto LABEL_1205;
            case 895:
              v116 = "MLNeuralNetworkLayerlayer_floorDivBroadcastable";
              goto LABEL_1205;
            case 900:
              v116 = "MLNeuralNetworkLayerlayer_multiplyBroadcastable";
LABEL_1205:
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v116);
              v281 = (NSString *)objc_claimAutoreleasedReturnValue();

              prettyProtoFieldName(v281, CFSTR("MLNeuralNetworkLayerlayer_"));
              location = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_898;
          }
        }
LABEL_1204:
        v116 = "INVALID";
        goto LABEL_1205;
      }
      v81 = location;
      location = CFSTR("Embedding");

      MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
      v82 = operator new(4uLL);
      __p = v82;
      *v82 = 20;
      v287 = v82 + 1;
      v288 = v82 + 1;
      v83 = v13;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkWeightParams;
      v294 = v83;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v84 = v295;
      if (v295 == &v292)
      {
        v85 = 4;
        v84 = &v292;
      }
      else
      {
        if (!v295)
          goto LABEL_617;
        v85 = 5;
      }
      (*v84)[v85]();
LABEL_617:
      if (__p)
      {
        v287 = __p;
        operator delete(__p);
      }
      v179 = operator new(4uLL);
      __p = v179;
      *v179 = 21;
      v287 = v179 + 1;
      v288 = v179 + 1;
      v180 = v83;
      v292 = &off_1E95561F0;
      p_location = (id *)parseNeuralNetworkWeightParams;
      v294 = v180;
      v295 = &v292;
      MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
      v181 = v295;
      if (v295 == &v292)
      {
        v182 = 4;
        v181 = &v292;
      }
      else
      {
        if (!v295)
        {
LABEL_746:
          if (__p)
          {
            v287 = __p;
            operator delete(__p);
          }
          MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
          v120 = v290;
          if (!v290)
            goto LABEL_898;
          v218 = (unint64_t *)&v290->__shared_owners_;
          do
            v122 = __ldaxr(v218);
          while (__stlxr(v122 - 1, v218));
          goto LABEL_896;
        }
        v182 = 5;
      }
      (*v181)[v182]();
      goto LABEL_746;
    }
    v76 = location;
    location = CFSTR("InnerProduct");

    MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
    v77 = operator new(4uLL);
    __p = v77;
    *v77 = 20;
    v287 = v77 + 1;
    v288 = v77 + 1;
    v78 = v13;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v78;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v79 = v295;
    if (v295 == &v292)
    {
      v80 = 4;
      v79 = &v292;
    }
    else
    {
      if (!v295)
        goto LABEL_610;
      v80 = 5;
    }
    (*v79)[v80]();
LABEL_610:
    if (__p)
    {
      v287 = __p;
      operator delete(__p);
    }
    v175 = operator new(4uLL);
    __p = v175;
    *v175 = 21;
    v287 = v175 + 1;
    v288 = v175 + 1;
    v176 = v78;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v176;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v177 = v295;
    if (v295 == &v292)
    {
      v178 = 4;
      v177 = &v292;
    }
    else
    {
      if (!v295)
      {
LABEL_738:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
        v120 = v290;
        if (!v290)
          goto LABEL_898;
        v217 = (unint64_t *)&v290->__shared_owners_;
        do
          v122 = __ldaxr(v217);
        while (__stlxr(v122 - 1, v217));
        goto LABEL_896;
      }
      v178 = 5;
    }
    (*v177)[v178]();
    goto LABEL_738;
  }
  if (a1 == 100)
  {
    v46 = location;
    location = CFSTR("Convolution");

    MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
    v47 = operator new(4uLL);
    __p = v47;
    *v47 = 60;
    v287 = v47 + 1;
    v288 = v47 + 1;
    v292 = &off_1E9556820;
    p_location = &location;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
    v48 = v295;
    if (v295 == &v292)
    {
      v49 = 4;
      v48 = &v292;
    }
    else
    {
      if (!v295)
        goto LABEL_552;
      v49 = 5;
    }
    (*v48)[v49]();
LABEL_552:
    if (__p)
    {
      v287 = __p;
      operator delete(__p);
    }
    v144 = operator new(4uLL);
    __p = v144;
    *v144 = 90;
    v287 = v144 + 1;
    v288 = v144 + 1;
    v145 = v13;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v145;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v146 = v295;
    if (v295 == &v292)
    {
      v147 = 4;
      v146 = &v292;
    }
    else
    {
      if (!v295)
        goto LABEL_708;
      v147 = 5;
    }
    (*v146)[v147]();
LABEL_708:
    if (__p)
    {
      v287 = __p;
      operator delete(__p);
    }
    v206 = operator new(4uLL);
    __p = v206;
    *v206 = 91;
    v287 = v206 + 1;
    v288 = v206 + 1;
    v207 = v145;
    v292 = &off_1E95561F0;
    p_location = (id *)parseNeuralNetworkWeightParams;
    v294 = v207;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
    v208 = v295;
    if (v295 == &v292)
    {
      v209 = 4;
      v208 = &v292;
    }
    else
    {
      if (!v295)
      {
LABEL_784:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
        v120 = v290;
        if (!v290)
          goto LABEL_898;
        v228 = (unint64_t *)&v290->__shared_owners_;
        do
          v122 = __ldaxr(v228);
        while (__stlxr(v122 - 1, v228));
        goto LABEL_896;
      }
      v209 = 5;
    }
    (*v208)[v209]();
    goto LABEL_784;
  }
  if (a1 == 120)
  {
    v285 = CFSTR("INVALID");
    MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
    v50 = operator new(4uLL);
    __p = v50;
    *v50 = 1;
    v287 = v50 + 1;
    v288 = v50 + 1;
    v292 = &off_1E9556980;
    p_location = (id *)&v285;
    v295 = &v292;
    MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v289, &__p, &v292);
    v51 = v295;
    if (v295 == &v292)
    {
      v52 = 4;
      v51 = &v292;
    }
    else
    {
      if (!v295)
      {
LABEL_559:
        if (__p)
        {
          v287 = __p;
          operator delete(__p);
        }
        MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
        objc_msgSend(CFSTR("Pooling"), "stringByAppendingString:", v285);
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        v149 = location;
        location = v148;

        v150 = v290;
        if (v290)
        {
          v151 = (unint64_t *)&v290->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
LABEL_593:

        goto LABEL_898;
      }
      v52 = 5;
    }
    (*v51)[v52]();
    goto LABEL_559;
  }
  if (a1 != 130)
    goto LABEL_470;
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v289);
  v14 = operator new(4uLL);
  __p = v14;
  *v14 = 5;
  v287 = v14 + 1;
  v288 = v14 + 1;
  v292 = &off_1E95563A8;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v15 = v295;
  if (v295 == &v292)
  {
    v16 = 4;
    v15 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_491;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_491:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v117 = operator new(4uLL);
  __p = v117;
  *v117 = 10;
  v287 = v117 + 1;
  v288 = v117 + 1;
  v292 = &off_1E9556400;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v118 = v295;
  if (v295 == &v292)
  {
    v119 = 4;
    v118 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_670;
    v119 = 5;
  }
  (*v118)[v119]();
LABEL_670:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v195 = operator new(4uLL);
  __p = v195;
  *v195 = 15;
  v287 = v195 + 1;
  v288 = v195 + 1;
  v292 = &off_1E9556458;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v196 = v295;
  if (v295 == &v292)
  {
    v197 = 4;
    v196 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_770;
    v197 = 5;
  }
  (*v196)[v197]();
LABEL_770:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v221 = operator new(4uLL);
  __p = v221;
  *v221 = 20;
  v287 = v221 + 1;
  v288 = v221 + 1;
  v292 = &off_1E95564B0;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v222 = v295;
  if (v295 == &v292)
  {
    v223 = 4;
    v222 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_800;
    v223 = 5;
  }
  (*v222)[v223]();
LABEL_800:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v230 = operator new(4uLL);
  __p = v230;
  *v230 = 25;
  v287 = v230 + 1;
  v288 = v230 + 1;
  v231 = v13;
  v292 = &off_1E9556508;
  p_location = &location;
  v294 = v231;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v232 = v295;
  if (v295 == &v292)
  {
    v233 = 4;
    v232 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_814;
    v233 = 5;
  }
  (*v232)[v233]();
LABEL_814:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v238 = operator new(4uLL);
  __p = v238;
  *v238 = 30;
  v287 = v238 + 1;
  v288 = v238 + 1;
  v292 = &off_1E9556560;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v239 = v295;
  if (v295 == &v292)
  {
    v240 = 4;
    v239 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_828;
    v240 = 5;
  }
  (*v239)[v240]();
LABEL_828:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v245 = operator new(4uLL);
  __p = v245;
  *v245 = 31;
  v287 = v245 + 1;
  v288 = v245 + 1;
  v292 = &off_1E95565B8;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v246 = v295;
  if (v295 == &v292)
  {
    v247 = 4;
    v246 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_849;
    v247 = 5;
  }
  (*v246)[v247]();
LABEL_849:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v251 = operator new(4uLL);
  __p = v251;
  *v251 = 40;
  v287 = v251 + 1;
  v288 = v251 + 1;
  v292 = &off_1E9556610;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v252 = v295;
  if (v295 == &v292)
  {
    v253 = 4;
    v252 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_856;
    v253 = 5;
  }
  (*v252)[v253]();
LABEL_856:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v254 = operator new(4uLL);
  __p = v254;
  *v254 = 41;
  v287 = v254 + 1;
  v288 = v254 + 1;
  v292 = &off_1E9556668;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v255 = v295;
  if (v295 == &v292)
  {
    v256 = 4;
    v255 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_863;
    v256 = 5;
  }
  (*v255)[v256]();
LABEL_863:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v257 = operator new(4uLL);
  __p = v257;
  *v257 = 50;
  v287 = v257 + 1;
  v288 = v257 + 1;
  v292 = &off_1E95566C0;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v258 = v295;
  if (v295 == &v292)
  {
    v259 = 4;
    v258 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_870;
    v259 = 5;
  }
  (*v258)[v259]();
LABEL_870:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v260 = operator new(4uLL);
  __p = v260;
  *v260 = 60;
  v287 = v260 + 1;
  v288 = v260 + 1;
  v292 = &off_1E9556718;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v261 = v295;
  if (v295 == &v292)
  {
    v262 = 4;
    v261 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_877;
    v262 = 5;
  }
  (*v261)[v262]();
LABEL_877:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v263 = operator new(4uLL);
  __p = v263;
  *v263 = 70;
  v287 = v263 + 1;
  v288 = v263 + 1;
  v292 = &off_1E9556770;
  p_location = &location;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v264 = v295;
  if (v295 == &v292)
  {
    v265 = 4;
    v264 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_884;
    v265 = 5;
  }
  (*v264)[v265]();
LABEL_884:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  v266 = operator new(4uLL);
  __p = v266;
  *v266 = 71;
  v287 = v266 + 1;
  v288 = v266 + 1;
  v267 = v231;
  v292 = &off_1E95567C8;
  p_location = &location;
  v294 = v267;
  v295 = &v292;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v289, &__p, &v292);
  v268 = v295;
  if (v295 == &v292)
  {
    v269 = 4;
    v268 = &v292;
  }
  else
  {
    if (!v295)
      goto LABEL_891;
    v269 = 5;
  }
  (*v268)[v269]();
LABEL_891:
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v289, a2);
  v120 = v290;
  if (v290)
  {
    v270 = (unint64_t *)&v290->__shared_owners_;
    do
      v122 = __ldaxr(v270);
    while (__stlxr(v122 - 1, v270));
    goto LABEL_896;
  }
LABEL_898:
  v271 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v12, "objectForKeyedSubscript:", location);
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v271, "numberWithInteger:", objc_msgSend(v272, "integerValue") + 1);
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v273, location);

  v274 = objc_retainAutorelease(v8);
  *v9 = v274;
  v275 = objc_retainAutorelease(v12);
  *v10 = v275;
  *a5 = &unk_1E956E848;
  v276 = objc_retainAutorelease(v13);
  *a6 = v276;

}

void sub_1D3AEE2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

id parseStringVector(google::protobuf::io::CodedInputStream *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _BYTE v7[24];
  int v8;
  uint64_t v9;

  parseStream<CoreML::Specification::StringVector>(a1, (CoreML::Specification::StringVector *)v7);
  v1 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v2 = (void *)objc_msgSend(v1, "initWithCapacity:", v8);
  if (v9)
    v3 = v9 + 8;
  else
    v3 = 0;
  if (v8)
  {
    v4 = 8 * v8;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)v7);
  return v2;
}

void sub_1D3AEE818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)&a9);
  _Unwind_Resume(a1);
}

id parseInt64Vector(google::protobuf::io::CodedInputStream *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _BYTE v7[16];
  int v8;
  uint64_t v9;

  parseStream<CoreML::Specification::Int64Vector>(a1, (CoreML::Specification::Int64Vector *)v7);
  v1 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v2 = (void *)objc_msgSend(v1, "initWithCapacity:", v8);
  if (v9)
    v3 = (_QWORD *)(v9 + 8);
  else
    v3 = 0;
  if (v9)
    v4 = v9 + 8 + 8 * v8;
  else
    v4 = 0;
  for (; v3 != (_QWORD *)v4; ++v3)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v5);

  }
  CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)v7);
  return v2;
}

void sub_1D3AEE8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)va);
  _Unwind_Resume(a1);
}

void ___ZL31parseNeuralNetworkSpecificationRN6google8protobuf2io16CodedInputStreamER20MIOModelSpecificInfoR20ModelParserWorkspace_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithInteger:", objc_msgSend(v5, "integerValue") + objc_msgSend(v7, "integerValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v9);

}

void sub_1D3AEE9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567D68;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567D68;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("learningRate"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEEB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t parseStream<CoreML::Specification::DoubleParameter>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::DoubleParameter *a2@<X8>)
{
  CoreML::Specification::DoubleParameter::DoubleParameter(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AEEC2C(_Unwind_Exception *a1)
{
  CoreML::Specification::DoubleParameter *v1;

  CoreML::Specification::DoubleParameter::~DoubleParameter(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567DC0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567DC0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("momentum"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEEDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567E18;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567E18;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::Int64Parameter>(a2, (CoreML::Specification::Int64Parameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:int64Parameter:](v4, "initWithKey:int64Parameter:", CFSTR("miniBatchSize"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v6);
}

void sub_1D3AEEFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t parseStream<CoreML::Specification::Int64Parameter>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::Int64Parameter *a2@<X8>)
{
  CoreML::Specification::Int64Parameter::Int64Parameter(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AEF05C(_Unwind_Exception *a1)
{
  CoreML::Specification::Int64Parameter *v1;

  CoreML::Specification::Int64Parameter::~Int64Parameter(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567E70;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567E70;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("learningRate"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEF1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567EC8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567EC8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::Int64Parameter>(a2, (CoreML::Specification::Int64Parameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:int64Parameter:](v4, "initWithKey:int64Parameter:", CFSTR("miniBatchSize"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v6);
}

void sub_1D3AEF3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567F20;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567F20;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("beta1"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEF5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567F78;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567F78;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("beta2"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEF7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9567FD0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9567FD0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::DoubleParameter>(a2, (CoreML::Specification::DoubleParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:doubleParameter:](v4, "initWithKey:doubleParameter:", CFSTR("eps"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v6);
}

void sub_1D3AEF9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9568028;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9568028;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::Int64Parameter>(a2, (CoreML::Specification::Int64Parameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:int64Parameter:](v4, "initWithKey:int64Parameter:", CFSTR("epochs"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v6);
}

void sub_1D3AEFBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9568080;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9568080;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[24];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::BoolParameter>(a2, (CoreML::Specification::BoolParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:BOOLParameter:](v4, "initWithKey:BOOLParameter:", CFSTR("shuffle"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::BoolParameter::~BoolParameter((CoreML::Specification::BoolParameter *)v6);
}

void sub_1D3AEFDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::BoolParameter::~BoolParameter((CoreML::Specification::BoolParameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t parseStream<CoreML::Specification::BoolParameter>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::BoolParameter *a2@<X8>)
{
  CoreML::Specification::BoolParameter::BoolParameter(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AEFE50(_Unwind_Exception *a1)
{
  CoreML::Specification::BoolParameter *v1;

  CoreML::Specification::BoolParameter::~BoolParameter(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E95680D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E95680D8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::Int64Parameter>(a2, (CoreML::Specification::Int64Parameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:int64Parameter:](v4, "initWithKey:int64Parameter:", CFSTR("seed"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v6);
}

void sub_1D3AEFFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10,std::allocator<parseNetworkUpdateParameters(google::protobuf::io::CodedInputStream &)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t parseStream<CoreML::Specification::StringVector>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::StringVector *a2@<X8>)
{
  CoreML::Specification::StringVector::StringVector(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AF008C(_Unwind_Exception *a1)
{
  CoreML::Specification::StringVector *v1;

  CoreML::Specification::StringVector::~StringVector(v1);
  _Unwind_Resume(a1);
}

uint64_t parseStream<CoreML::Specification::Int64Vector>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::Int64Vector *a2@<X8>)
{
  CoreML::Specification::Int64Vector::Int64Vector(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AF00D4(_Unwind_Exception *a1)
{
  CoreML::Specification::Int64Vector *v1;

  CoreML::Specification::Int64Vector::~Int64Vector(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  a1[16] = MEMORY[0x1E0DE4FD0] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_1D3AF01E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1D82519D4](v1);
  _Unwind_Resume(a1);
}

void insertTensorDataTypeToPrecisionSet(MIL::IRValueType *a1, void *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a1 + 24))(a1))
  {
    v3 = MIL::IRValueType::AsTensorType(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
    NSStringFromIRDataType(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      objc_msgSend(v13, "addObject:", v5);

  }
  else
  {
    if (!(*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a1 + 40))(a1))
    {
      if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a1 + 32))(a1))
      {
        v10 = (_QWORD *)MIL::IRValueType::AsListType(a1);
        v11 = 8;
      }
      else
      {
        if (!(*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a1 + 48))(a1))
          goto LABEL_5;
        v10 = (_QWORD *)MIL::IRValueType::AsDictionaryType(a1);
        v11 = 9;
      }
      v12 = (*(uint64_t (**)(void))(*v10 + 8 * v11))();
      insertTensorDataTypeToPrecisionSet(v12, v13);
      goto LABEL_5;
    }
    v6 = MIL::IRValueType::AsTupleType(a1);
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v8 = (_QWORD *)*v7;
    v9 = (_QWORD *)v7[1];
    while (v8 != v9)
      insertTensorDataTypeToPrecisionSet(*v8++, v13);
  }
LABEL_5:

}

void sub_1D3AF0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void MIOFunctionInfo::~MIOFunctionInfo(MIOFunctionInfo *this)
{

}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1D3AF0498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<std::string>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1D3AF05F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1D3AF06FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1D3AF077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1D3AF0844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<std::string>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1D3AF08BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1D3AF0B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1D3AF0BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1D3AF10E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  *v2 = &off_1E9556248;
  v3 = *(id *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;
  uint64_t v5;

  *a2 = &off_1E9556248;
  result = *(id *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  a2[1] = result;
  a2[2] = v5;
  return result;
}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  MIL::IRValue *ParameterValue;
  void *v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  MIL::IRListValue *v13;
  uint64_t Values;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::string *p_p;
  void *v20;
  MIL::IRListValue *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void **v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  char *v33;
  std::string::size_type size;
  std::string::size_type v35;
  int v36;
  unsigned int v37;
  __darwin_ct_rune_t v38;
  _BOOL4 v39;
  std::string::size_type v40;
  BOOL v41;
  std::string *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::string v49;
  std::string __p;

  v4 = (void *)MEMORY[0x1D8251C08]();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = *(char *)(v5 + 23);
  if (v6 < 0)
  {
    if (*(_QWORD *)(v5 + 8) != 8)
      goto LABEL_23;
    v5 = *(_QWORD *)v5;
  }
  else if (v6 != 8)
  {
    goto LABEL_23;
  }
  if (*(_QWORD *)v5 == 0x7966697373616C63)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "classes");
    ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
    v10 = MIL::IRValueType::AsListType(v9);
    v11 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
    v12 = MIL::IRValueType::AsTensorType(v11);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12) == 3)
    {
      v13 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      Values = MIL::IRListValue::GetValues(v13);
      if (v15)
      {
        v16 = Values;
        v17 = 16 * v15;
        do
        {
          v18 = (void *)MEMORY[0x1E0CB3940];
          MIL::IRValue::GetScalar<std::string>();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(v18, "stringWithUTF8String:", p_p);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "addObject:", v20);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v16 += 16;
          v17 -= 16;
        }
        while (v17);
      }
    }
    else
    {
      v21 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      v22 = MIL::IRListValue::GetValues(v21);
      if (v23)
      {
        v24 = v22;
        v25 = 16 * v23;
        do
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", MIL::IRValue::GetScalar<long long>());
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "addObject:", v26);

          v24 += 16;
          v25 -= 16;
        }
        while (v25);
      }
    }
    objc_msgSend(v8, "array");
    v27 = objc_claimAutoreleasedReturnValue();

    v28 = *(void ***)(a1 + 16);
    v29 = *v28;
    *v28 = (void *)v27;

  }
LABEL_23:
  v30 = *(id *)(a1 + 8);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((uint64_t)&addOperationToHistogram(MIL::IROperation const&,NSMutableDictionary<NSString *,NSNumber *> *)::ignoredOps, (uint64_t)&__block_descriptor_40_ea8_32s_e38_B32__0__MIOFeatureDescription_8Q16_B24ls32l8, (const void **)v31)- (_QWORD)&addOperationToHistogram(MIL::IROperation const&,NSMutableDictionary<NSString *,NSNumber *> *)::ignoredOps == 32)
  {
    v32 = (void *)MEMORY[0x1E0CB3940];
    if (*(char *)(v31 + 23) >= 0)
      v33 = (char *)v31;
    else
      v33 = *(char **)v31;
    std::string::basic_string[abi:ne180100]<0>(&v49, v33);
    memset(&__p, 0, sizeof(__p));
    size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v49.__r_.__value_.__l.__size_;
    if (size)
    {
      v35 = 0;
      v36 = 0;
      v37 = 1;
      do
      {
        v38 = *std::string::at(&v49, v35);
        v39 = v38 == 95;
        if (v38 != 95)
        {
          if (((v37 != 1) & ~v36) == 0)
            LOBYTE(v38) = __toupper(v38);
          std::string::push_back(&__p, v38);
        }
        v35 = v37;
        v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = v49.__r_.__value_.__l.__size_;
        v41 = v40 > v37++;
        v36 = v39;
      }
      while (v41);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &__p;
      else
        v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v42 = &__p;
    }
    objc_msgSend(v32, "stringWithUTF8String:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    objc_msgSend(v30, "objectForKeyedSubscript:", v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    if (v44)
    {
      v45 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v30, "objectForKeyedSubscript:", v43);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "intValue") + 1);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "setObject:forKeyedSubscript:", v47, v43);

    }
    else
    {
      objc_msgSend(v30, "setObject:forKeyedSubscript:", &unk_1E956E828, v43);
    }

  }
  objc_autoreleasePoolPop(v4);
  return 1;
}

void sub_1D3AF1938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  char v5;
  size_t v6;
  const void *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    if (v5 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    while (*(_QWORD *)(v3 + 8) != v6 || memcmp(*(const void **)v3, v7, v6))
    {
      v3 += 16;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__CFString *NSStringFromIRDataType(int a1)
{
  if ((a1 - 4) > 0x13)
    return 0;
  else
    return off_1E9568B78[a1 - 4];
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

char *std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E95562A0;
  *((_QWORD *)v2 + 1) = *(id *)(a1 + 8);
  *((_QWORD *)v2 + 2) = *(id *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  return v2;
}

__n128 std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E95562A0;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(id *)(a1 + 16);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IROperation *a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ParameterValue;
  MIL::IRValueType *v13;
  id v14;
  int v15;
  std::string::size_type size;
  std::string *p_s1;
  std::string *v22;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string *v31;
  uint64_t Attribute;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  std::string::size_type v39;
  uint64_t v40;
  std::string *v43;
  uint64_t ParameterType;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  MIL::IRValueType *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v64;
  MIL::IRValueType *v65;
  MIL::IRValueType *OutputType;
  std::string __s1;
  char v69;
  std::string v70;
  void *__p[2];
  char v72;

  v4 = (void *)MEMORY[0x1D8251C08]();
  v5 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(a1 + 32);
  __p[0] = &v70;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v70, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  if ((char)v8[63] < 0)
    std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v8 + 5), *((_QWORD *)v8 + 6));
  else
    __s1 = *(std::string *)(v8 + 40);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(*(_QWORD **)(a1 + 24), (unsigned __int8 *)&__s1);
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((_QWORD *)v9 + 6);
    while (v10 != v11)
    {
      ParameterValue = MIL::IROperation::TryGetParameterValue();
      if (ParameterValue)
      {
        v13 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
        insertTensorDataTypeToPrecisionSet(v13, *(void **)(a1 + 16));
      }
      v10 += 24;
    }
  }
  v14 = *(id *)(a1 + 16);
  v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = __s1.__r_.__value_.__l.__size_;
    if ((uint64_t)__s1.__r_.__value_.__l.__size_ <= 24)
    {
      if (__s1.__r_.__value_.__l.__size_ != 22)
      {
        if (__s1.__r_.__value_.__l.__size_ == 23)
        {
          if (*(_QWORD *)__s1.__r_.__value_.__l.__data_ == 0x70786574736E6F63
            && *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 8) == 0x6F745F74756C5F72
            && *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 15) == 0x6573726170735F6FLL)
          {
            goto LABEL_81;
          }
          goto LABEL_145;
        }
        goto LABEL_105;
      }
      v22 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_60;
    }
    if (__s1.__r_.__value_.__l.__size_ == 25)
    {
      if (*(_QWORD *)__s1.__r_.__value_.__l.__data_ == 0x70786574736E6F63
        && *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 8) == 0x6573726170735F72
        && *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 16) == 0x736E65645F6F745FLL
        && *(_BYTE *)(__s1.__r_.__value_.__r.__words[0] + 24) == 101)
      {
        goto LABEL_81;
      }
      goto LABEL_145;
    }
    if (__s1.__r_.__value_.__l.__size_ != 38)
      goto LABEL_105;
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_44:
    if (memcmp(p_s1, "constexpr_sparse_blockwise_shift_scale", 0x26uLL))
      goto LABEL_145;
    goto LABEL_81;
  }
  if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) > 0x18u)
  {
    if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) == 25)
    {
      if (__s1.__r_.__value_.__r.__words[0] == 0x70786574736E6F63
        && __s1.__r_.__value_.__l.__size_ == 0x6573726170735F72
        && __s1.__r_.__value_.__r.__words[2] == 0x736E65645F6F745FLL
        && v69 == 101)
      {
        goto LABEL_81;
      }
      goto LABEL_145;
    }
    if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) != 38)
      goto LABEL_68;
    p_s1 = &__s1;
    goto LABEL_44;
  }
  if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) != 22)
  {
    if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) == 23)
    {
      if (__s1.__r_.__value_.__r.__words[0] != 0x70786574736E6F63
        || __s1.__r_.__value_.__l.__size_ != 0x6F745F74756C5F72
        || *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 7) != 0x6573726170735F6FLL)
      {
        goto LABEL_145;
      }
LABEL_81:
      objc_msgSend(v14, "addObject:", CFSTR("Sparse"), __s1.__r_.__value_.__r.__words[0]);
      goto LABEL_145;
    }
    goto LABEL_68;
  }
  v22 = &__s1;
LABEL_60:
  v26 = v22->__r_.__value_.__r.__words[0];
  v27 = v22->__r_.__value_.__l.__size_;
  v28 = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 6);
  if (v26 == 0x70786574736E6F63 && v27 == 0x6F745F74756C5F72 && v28 == 0x65736E65645F6F74)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lut");
    Attribute = MIL::IRObject::TryGetAttribute();
    if (v72 < 0)
      operator delete(__p[0]);
    if (Attribute)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "lut");
      v36 = MIL::IRObject::GetAttribute();
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
      insertAdditionalStoragePrecisionForPaletizedWeights(v37, v14);
      goto LABEL_143;
    }
    v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_68;
  }
  else if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_68:
    if (v15 != 22)
    {
LABEL_97:
      if (v15 != 27)
      {
LABEL_118:
        if (v15 != 31)
          goto LABEL_145;
        v53 = &__s1;
        goto LABEL_128;
      }
      v43 = &__s1;
      goto LABEL_107;
    }
    v31 = &__s1;
    goto LABEL_89;
  }
  size = __s1.__r_.__value_.__l.__size_;
  if (__s1.__r_.__value_.__l.__size_ != 22)
    goto LABEL_105;
  v31 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_89:
  v38 = v31->__r_.__value_.__r.__words[0];
  v39 = v31->__r_.__value_.__l.__size_;
  v40 = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 6);
  if (v38 == 0x70786574736E6F63 && v39 == 0x6F745F74756C5F72 && v40 == 0x65736E65645F6F74)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lut");
    ParameterType = MIL::IROperation::TryGetParameterType();
    if (v72 < 0)
      operator delete(__p[0]);
    if (ParameterType)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "lut");
      v45 = MIL::IROperation::GetParameterType();
      insertAdditionalStoragePrecisionForPaletizedWeights(v45, v14);
      goto LABEL_143;
    }
    v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_97;
  }
  else if ((v15 & 0x80) == 0)
  {
    goto LABEL_97;
  }
  size = __s1.__r_.__value_.__l.__size_;
LABEL_105:
  if (size != 27)
    goto LABEL_126;
  v43 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_107:
  v46 = v43->__r_.__value_.__r.__words[0];
  v47 = v43->__r_.__value_.__l.__size_;
  v48 = v43->__r_.__value_.__r.__words[2];
  v49 = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[2] + 3);
  if (v46 == 0x70786574736E6F63
    && v47 == 0x656E696666615F72
    && v48 == 0x746E61757165645FLL
    && v49 == 0x657A69746E617571)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "quantized_data");
    v54 = MIL::IRObject::TryGetAttribute();
    if (v72 < 0)
      operator delete(__p[0]);
    if (v54)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "quantized_data");
      v55 = MIL::IRObject::GetAttribute();
      v56 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
      insertAdditionalStoragePrecisionForQuantizedWeights(v56, v14);
      goto LABEL_143;
    }
    v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_118;
  }
  else if ((v15 & 0x80) == 0)
  {
    goto LABEL_118;
  }
  size = __s1.__r_.__value_.__l.__size_;
LABEL_126:
  if (size != 31)
    goto LABEL_145;
  v53 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_128:
  v57 = v53->__r_.__value_.__r.__words[0];
  v58 = v53->__r_.__value_.__l.__size_;
  v59 = v53->__r_.__value_.__r.__words[2];
  v60 = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[2] + 7);
  if (v57 == 0x70786574736E6F63
    && v58 == 0x776B636F6C625F72
    && v59 == 0x666968735F657369
    && v60 == 0x656C6163735F7466)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "data");
    v64 = MIL::IROperation::TryGetParameterType();
    if (v72 < 0)
      operator delete(__p[0]);
    if (v64)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "data");
      v65 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      insertAdditionalStoragePrecisionForQuantizedWeights(v65, v14);
LABEL_143:
      if (v72 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_145:

  OutputType = (MIL::IRValueType *)MIL::IROperation::TryGetOutputType(a2);
  if (OutputType)
    insertTensorDataTypeToPrecisionSet(OutputType, *(void **)(a1 + 8));
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  objc_autoreleasePoolPop(v4);
  return 1;
}

void sub_1D3AF22C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseMILProgram(google::protobuf::io::CodedInputStream &,MIOParserContext *,MIOModelSpecificInfo &,ModelParserWorkspace &)::$_1>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1D3AF2624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1D3AF26C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void insertAdditionalStoragePrecisionForPaletizedWeights(uint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  __CFString *v5;
  id v6;

  v6 = a2;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    LODWORD(v4) = vcvtpd_s64_f64(log2((double)v3));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Palettized (%d bits)"), v4);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = CFSTR("Palettized (unknown bits)");
  }
  objc_msgSend(v6, "addObject:", v5);

}

void sub_1D3AF28C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void insertAdditionalStoragePrecisionForQuantizedWeights(MIL::IRValueType *a1, void *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  id v6;

  v6 = a2;
  if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a1 + 24))(a1))
  {
    v3 = MIL::IRValueType::AsTensorType(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
    NSStringFromIRDataType(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v5);

  }
}

void sub_1D3AF2954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1D3AF2C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_QWORD *)v8 + 9) = 0;
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1D3AF2D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MIOFunctionInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MIOFunctionInfo>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MIOFunctionInfo>,0>(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9556D48;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9556D48;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[40];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::Int64Parameter>(a2, (CoreML::Specification::Int64Parameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:int64Parameter:](v4, "initWithKey:int64Parameter:", CFSTR("numberOfNeighbors"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v6);
}

void sub_1D3AF2F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556DA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556DA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  parseStringVector(a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556DF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556DF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  parseInt64Vector(a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2,std::allocator<parseKNearestNeighborsClassifier(google::protobuf::io::CodedInputStream &,MIOModelInfo &,ModelParserWorkspace &)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9556AE0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9556AE0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[32];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::StringParameter>(a2, (CoreML::Specification::StringParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:stringParameter:](v4, "initWithKey:stringParameter:", CFSTR("linkedModelFileName"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::StringParameter::~StringParameter((CoreML::Specification::StringParameter *)v6);
}

void sub_1D3AF3318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  CoreML::Specification::StringParameter::~StringParameter((CoreML::Specification::StringParameter *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t parseStream<CoreML::Specification::StringParameter>@<X0>(google::protobuf::io::CodedInputStream *a1@<X0>, CoreML::Specification::StringParameter *a2@<X8>)
{
  CoreML::Specification::StringParameter::StringParameter(a2);
  return google::protobuf::MessageLite::ParseFromCodedStream(a2, a1);
}

void sub_1D3AF33B4(_Unwind_Exception *a1)
{
  CoreML::Specification::StringParameter *v1;

  CoreML::Specification::StringParameter::~StringParameter(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E9556B38;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E9556B38;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  void *v3;
  MIOParameterDescription *v4;
  MIOParameterDescription *v5;
  _BYTE v6[32];

  v3 = *(void **)(a1 + 8);
  v4 = [MIOParameterDescription alloc];
  parseStream<CoreML::Specification::StringParameter>(a2, (CoreML::Specification::StringParameter *)v6);
  v5 = -[MIOParameterDescription initWithKey:stringParameter:](v4, "initWithKey:stringParameter:", CFSTR("linkedModelSearchPath"), v6);
  objc_msgSend(v3, "addObject:", v5);

  CoreML::Specification::StringParameter::~StringParameter((CoreML::Specification::StringParameter *)v6);
}

void sub_1D3AF3554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  CoreML::Specification::StringParameter::~StringParameter((CoreML::Specification::StringParameter *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1,std::allocator<parseLinkedModel(google::protobuf::io::CodedInputStream &,MIOModelInfo &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95562F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95562F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  parseStringVector(a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556350;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556350;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  parseInt64Vector(a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1,std::allocator<parseClassLabels(google::protobuf::io::CodedInputStream &,int,int,ModelParserWorkspace &)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void ___ZL26populatePipelineInfomationRK12MIOModelInfoR20ModelParserWorkspace_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithInteger:", objc_msgSend(v5, "integerValue") + objc_msgSend(v7, "integerValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v9);

}

void sub_1D3AF382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL26populatePipelineInfomationRK12MIOModelInfoR20ModelParserWorkspace_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithInteger:", objc_msgSend(v5, "integerValue") + objc_msgSend(v7, "integerValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v9);

}

void sub_1D3AF3904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t ___ZL22classLabelsForPipelineP7NSArrayIP8MIOModelEP8NSString_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;

  objc_msgSend(a2, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_1D3AF398C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<MIOFunctionInfo>::__push_back_slow_path<MIOFunctionInfo const&>(uint64_t *a1, id *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIOFunctionInfo>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[40 * v3];
  v13 = &v7[40 * v6];
  std::allocator<MIOFunctionInfo>::construct[abi:ne180100]<MIOFunctionInfo,MIOFunctionInfo const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 40;
  std::vector<MIOFunctionInfo>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<MIOFunctionInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_1D3AF3A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIOFunctionInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

id std::allocator<MIOFunctionInfo>::construct[abi:ne180100]<MIOFunctionInfo,MIOFunctionInfo const&>(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  result = a3[4];
  a2[4] = result;
  return result;
}

uint64_t std::vector<MIOFunctionInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>,std::reverse_iterator<MIOFunctionInfo*>,std::reverse_iterator<MIOFunctionInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIOFunctionInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>,std::reverse_iterator<MIOFunctionInfo*>,std::reverse_iterator<MIOFunctionInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)a3 = 0uLL;
      *(_OWORD *)(v8 - 40) = v9;
      v8 -= 40;
      v10 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a3 + 16) = 0uLL;
      *(_OWORD *)(v8 + 16) = v10;
      v11 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(v8 + 32) = v11;
      v7 -= 40;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v8;
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MIOFunctionInfo>,std::reverse_iterator<MIOFunctionInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  v1 = *(id **)(a1[2] + 8);
  v2 = *(id **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<MIOFunctionInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 5;
    }
    while (v1 != v2);
  }
}

void std::allocator<MIOFunctionInfo>::destroy[abi:ne180100](uint64_t a1, id *a2)
{

}

void **std::__split_buffer<MIOFunctionInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<MIOFunctionInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<MIOFunctionInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 40;
    std::allocator<MIOFunctionInfo>::destroy[abi:ne180100](v4, (id *)(i - 40));
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MIOFunctionInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void parseNeuralNetworkWeightParams(CodedInputStream *a1, void *a2)
{
  id v3;
  _DWORD *v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD *v7;
  uint64_t (***v8)();
  uint64_t v9;
  _DWORD *v10;
  uint64_t (***v11)();
  uint64_t v12;
  _DWORD *v13;
  uint64_t (***v14)();
  uint64_t v15;
  _DWORD *v16;
  uint64_t (***v17)();
  uint64_t v18;
  __CFString *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *__p;
  void *v24;
  _DWORD *v25;
  _BYTE v26[8];
  std::__shared_weak_count *v27;
  unsigned int v28;
  int v29;
  uint64_t (**v30)();
  int *v31;
  uint64_t (***v32)();
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v28 = 0;
  v29 = 5;
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v26);
  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 40;
  v24 = v4 + 1;
  v25 = v4 + 1;
  v30 = &off_1E9556B90;
  v31 = (int *)&v28;
  v32 = &v30;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v26, &__p, &v30);
  v5 = v32;
  if (v32 == &v30)
  {
    v6 = 4;
    v5 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_6:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 1;
  v24 = v7 + 1;
  v25 = v7 + 1;
  v30 = &off_1E9556BE8;
  v31 = &v29;
  v32 = &v30;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v26, &__p, &v30);
  v8 = v32;
  if (v32 == &v30)
  {
    v9 = 4;
    v8 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_13:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v10 = operator new(4uLL);
  __p = v10;
  *v10 = 2;
  v24 = v10 + 1;
  v25 = v10 + 1;
  v30 = &off_1E9556C40;
  v31 = &v29;
  v32 = &v30;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v26, &__p, &v30);
  v11 = v32;
  if (v32 == &v30)
  {
    v12 = 4;
    v11 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_20;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_20:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v13 = operator new(4uLL);
  __p = v13;
  *v13 = 30;
  v24 = v13 + 1;
  v25 = v13 + 1;
  v30 = &off_1E9556C98;
  v31 = &v29;
  v32 = &v30;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v26, &__p, &v30);
  v14 = v32;
  if (v32 == &v30)
  {
    v15 = 4;
    v14 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_27;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_27:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v16 = operator new(4uLL);
  __p = v16;
  *v16 = 31;
  v24 = v16 + 1;
  v25 = v16 + 1;
  v30 = &off_1E9556CF0;
  v31 = &v29;
  v32 = &v30;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v26, &__p, &v30);
  v17 = v32;
  if (v32 == &v30)
  {
    v18 = 4;
    v17 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_34;
    v18 = 5;
  }
  (*v17)[v18]();
LABEL_34:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v26, a1);
  v19 = CFSTR("Float32");
  switch(v29)
  {
    case 0:
      goto LABEL_43;
    case 1:
      v19 = CFSTR("Float16");
      goto LABEL_43;
    case 2:
      if (v28 - 1 > 7)
        goto LABEL_41;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Int%d"), v28);
      v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v19)
LABEL_43:
        objc_msgSend(v3, "addObject:", v19);
      break;
    case 3:
      v19 = CFSTR("Int8");
      goto LABEL_43;
    default:
LABEL_41:
      v19 = 0;
      break;
  }

  v20 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

}

void sub_1D3AF41C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void parseNeuralNetworkLSTMWeightParams(CodedInputStream *a1, void *a2)
{
  id v3;
  _DWORD *v4;
  id v5;
  uint64_t (***v6)();
  uint64_t v7;
  _DWORD *v8;
  id v9;
  uint64_t (***v10)();
  uint64_t v11;
  _DWORD *v12;
  id v13;
  uint64_t (***v14)();
  uint64_t v15;
  _DWORD *v16;
  id v17;
  uint64_t (***v18)();
  uint64_t v19;
  _DWORD *v20;
  id v21;
  uint64_t (***v22)();
  uint64_t v23;
  _DWORD *v24;
  id v25;
  uint64_t (***v26)();
  uint64_t v27;
  _DWORD *v28;
  id v29;
  uint64_t (***v30)();
  uint64_t v31;
  _DWORD *v32;
  id v33;
  uint64_t (***v34)();
  uint64_t v35;
  _DWORD *v36;
  id v37;
  uint64_t (***v38)();
  uint64_t v39;
  _DWORD *v40;
  id v41;
  uint64_t (***v42)();
  uint64_t v43;
  _DWORD *v44;
  id v45;
  uint64_t (***v46)();
  uint64_t v47;
  _DWORD *v48;
  id v49;
  uint64_t (***v50)();
  uint64_t v51;
  _DWORD *v52;
  id v53;
  uint64_t (***v54)();
  uint64_t v55;
  _DWORD *v56;
  id v57;
  uint64_t (***v58)();
  uint64_t v59;
  _DWORD *v60;
  id v61;
  uint64_t (***v62)();
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  void *__p;
  void *v68;
  _DWORD *v69;
  _BYTE v70[8];
  std::__shared_weak_count *v71;
  uint64_t (**v72)();
  void (*v73)(CodedInputStream *, void *);
  id v74;
  uint64_t (***v75)();
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v70);
  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 1;
  v68 = v4 + 1;
  v69 = v4 + 1;
  v5 = v3;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v5;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v6 = v75;
  if (v75 == &v72)
  {
    v7 = 4;
    v6 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_6;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_6:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v8 = operator new(4uLL);
  __p = v8;
  *v8 = 2;
  v68 = v8 + 1;
  v69 = v8 + 1;
  v9 = v5;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v9;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v10 = v75;
  if (v75 == &v72)
  {
    v11 = 4;
    v10 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_13;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_13:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = 3;
  v68 = v12 + 1;
  v69 = v12 + 1;
  v13 = v9;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v13;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v14 = v75;
  if (v75 == &v72)
  {
    v15 = 4;
    v14 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_20;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_20:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v16 = operator new(4uLL);
  __p = v16;
  *v16 = 4;
  v68 = v16 + 1;
  v69 = v16 + 1;
  v17 = v13;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v17;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v18 = v75;
  if (v75 == &v72)
  {
    v19 = 4;
    v18 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_27;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_27:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v20 = operator new(4uLL);
  __p = v20;
  *v20 = 20;
  v68 = v20 + 1;
  v69 = v20 + 1;
  v21 = v17;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v21;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v22 = v75;
  if (v75 == &v72)
  {
    v23 = 4;
    v22 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_34;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_34:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v24 = operator new(4uLL);
  __p = v24;
  *v24 = 21;
  v68 = v24 + 1;
  v69 = v24 + 1;
  v25 = v21;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v25;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v26 = v75;
  if (v75 == &v72)
  {
    v27 = 4;
    v26 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_41;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_41:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v28 = operator new(4uLL);
  __p = v28;
  *v28 = 22;
  v68 = v28 + 1;
  v69 = v28 + 1;
  v29 = v25;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v29;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v30 = v75;
  if (v75 == &v72)
  {
    v31 = 4;
    v30 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_48;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_48:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v32 = operator new(4uLL);
  __p = v32;
  *v32 = 23;
  v68 = v32 + 1;
  v69 = v32 + 1;
  v33 = v29;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v33;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v34 = v75;
  if (v75 == &v72)
  {
    v35 = 4;
    v34 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_55;
    v35 = 5;
  }
  (*v34)[v35]();
LABEL_55:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v36 = operator new(4uLL);
  __p = v36;
  *v36 = 60;
  v68 = v36 + 1;
  v69 = v36 + 1;
  v37 = v33;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v37;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v38 = v75;
  if (v75 == &v72)
  {
    v39 = 4;
    v38 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_62;
    v39 = 5;
  }
  (*v38)[v39]();
LABEL_62:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v40 = operator new(4uLL);
  __p = v40;
  *v40 = 61;
  v68 = v40 + 1;
  v69 = v40 + 1;
  v41 = v37;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v41;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v42 = v75;
  if (v75 == &v72)
  {
    v43 = 4;
    v42 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_69;
    v43 = 5;
  }
  (*v42)[v43]();
LABEL_69:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v44 = operator new(4uLL);
  __p = v44;
  *v44 = 62;
  v68 = v44 + 1;
  v69 = v44 + 1;
  v45 = v41;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v45;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v46 = v75;
  if (v75 == &v72)
  {
    v47 = 4;
    v46 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_76;
    v47 = 5;
  }
  (*v46)[v47]();
LABEL_76:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v48 = operator new(4uLL);
  __p = v48;
  *v48 = 40;
  v68 = v48 + 1;
  v69 = v48 + 1;
  v49 = v45;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v49;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v50 = v75;
  if (v75 == &v72)
  {
    v51 = 4;
    v50 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_83;
    v51 = 5;
  }
  (*v50)[v51]();
LABEL_83:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v52 = operator new(4uLL);
  __p = v52;
  *v52 = 41;
  v68 = v52 + 1;
  v69 = v52 + 1;
  v53 = v49;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v53;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v54 = v75;
  if (v75 == &v72)
  {
    v55 = 4;
    v54 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_90;
    v55 = 5;
  }
  (*v54)[v55]();
LABEL_90:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v56 = operator new(4uLL);
  __p = v56;
  *v56 = 42;
  v68 = v56 + 1;
  v69 = v56 + 1;
  v57 = v53;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v57;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v58 = v75;
  if (v75 == &v72)
  {
    v59 = 4;
    v58 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_97;
    v59 = 5;
  }
  (*v58)[v59]();
LABEL_97:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v60 = operator new(4uLL);
  __p = v60;
  *v60 = 43;
  v68 = v60 + 1;
  v69 = v60 + 1;
  v61 = v57;
  v72 = &off_1E95561F0;
  v73 = parseNeuralNetworkWeightParams;
  v74 = v61;
  v75 = &v72;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v70, &__p, &v72);
  v62 = v75;
  if (v75 == &v72)
  {
    v63 = 4;
    v62 = &v72;
  }
  else
  {
    if (!v75)
      goto LABEL_104;
    v63 = 5;
  }
  (*v62)[v63]();
LABEL_104:
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v70, a1);
  v64 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

}

void sub_1D3AF4A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);

  _Unwind_Resume(a1);
}

__CFString *prettyProtoFieldName(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;

  v3 = a1;
  v4 = a2;
  if (-[NSString length](v3, "length"))
  {
    v5 = v3;
    if (-[NSString length](v4, "length") && -[__CFString hasPrefix:](v5, "hasPrefix:", v4))
    {
      -[__CFString substringFromIndex:](v5, "substringFromIndex:", -[NSString length](v4, "length"));
      v6 = objc_claimAutoreleasedReturnValue();

      v5 = (__CFString *)v6;
    }
    if (-[__CFString length](v5, "length"))
    {
      -[__CFString substringToIndex:](v5, "substringToIndex:", 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "uppercaseString");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      -[__CFString substringFromIndex:](v5, "substringFromIndex:", 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringByAppendingString:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v5 = v10;
      v11 = v5;
    }
    else
    {
      v11 = &stru_1E956AAC8;
    }

  }
  else
  {
    v11 = &stru_1E956AAC8;
  }

  return v11;
}

void sub_1D3AF4C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void parseNeuralNetworkAndUpdateLayerHistogram(CodedInputStream *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  int v18;
  __int128 v19;
  __int128 v20;
  id v21;
  id v22[6];
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  parseNeuralNetworkSpecification(a1, (MIOModelSpecificInfo *)v22, (ModelParserWorkspace *)v17);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v22[1];
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v24, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v14;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v8), "layerHistogram");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v11[0] = v7;
        v11[1] = 3221225472;
        v11[2] = ___ZL41parseNeuralNetworkAndUpdateLayerHistogramRN6google8protobuf2io16CodedInputStreamEP19NSMutableDictionaryIP8NSStringP8NSNumberE_block_invoke;
        v11[3] = &unk_1E9568AF8;
        v12 = v3;
        objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v11);

        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v24, 16);
    }
    while (v5);
  }

  std::__hash_table<std::__hash_value_type<std::string,MIOFunctionInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIOFunctionInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIOFunctionInfo>>>::~__hash_table((uint64_t)v17);
  v10 = v23;
  v23 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)&v17[0] = &v22[3];
  std::vector<MIOFunctionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);

}

void sub_1D3AF4EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;

  ModelParserWorkspace::~ModelParserWorkspace(&a23);
  MIOModelSpecificInfo::~MIOModelSpecificInfo((MIOModelSpecificInfo *)&a33);

  _Unwind_Resume(a1);
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556B90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, CodedInputStream *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  _DWORD *v13;
  _BYTE v14[8];
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v14);
  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 1;
  v12 = v4 + 1;
  v13 = v4 + 1;
  v5 = *(_QWORD *)(a1 + 8);
  v16[0] = &off_1E9556E50;
  v16[1] = v5;
  v17 = v16;
  MLAssetIO::ProtoWireFormatCallbackParser::setVarintFieldHandler(v14, &__p, v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v14, a2);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1D3AF5080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEED0Ev()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *_ZNKSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556E50;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556E50;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEEclEOx(uint64_t result, _QWORD *a2)
{
  **(_DWORD **)(result + 8) = *a2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS2_EEDaRT_EUlxE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS5_EEDaRT_EUlxE_NS_9allocatorISH_EEFvxEE11target_typeEv()
{
  return &_ZTIZZL30parseNeuralNetworkWeightParamsRN6google8protobuf2io16CodedInputStreamEP14NSMutableArrayIP8NSStringEENK3__0clIS2_EEDaRT_EUlxE_;
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556BE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556BE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t result)
{
  **(_DWORD **)(result + 8) = 4 * (**(_DWORD **)(result + 8) != 5);
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556C40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556C40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t result)
{
  int *v1;
  int v2;

  v1 = *(int **)(result + 8);
  if (*v1 == 5)
    v2 = 1;
  else
    v2 = 4;
  *v1 = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556C98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556C98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t result)
{
  int *v1;
  int v2;

  v1 = *(int **)(result + 8);
  if (*v1 == 5)
    v2 = 2;
  else
    v2 = 4;
  *v1 = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556CF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556CF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t result)
{
  int *v1;
  int v2;

  v1 = *(int **)(result + 8);
  if (*v1 == 5)
    v2 = 3;
  else
    v2 = 4;
  *v1 = v2;
  return result;
}

uint64_t std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4,std::allocator<parseNeuralNetworkWeightParams(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E95561F0;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E95561F0;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableArray<NSString *> *),std::placeholders::__ph<1> const&,NSMutableArray<NSString *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556820;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  __CFString *v2;

  if (*a2)
    v2 = CFSTR("Deconvolution");
  else
    v2 = CFSTR("Convolution");
  objc_storeStrong(*(id **)(a1 + 8), v2);
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_13>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556878;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t v6;
  void **v7;
  void *v8;

  v3 = *a2;
  switch(*a2)
  {
    case 0:
      v4 = CFSTR("Sqrt");
      break;
    case 1:
      v4 = CFSTR("Rsqrt");
      break;
    case 2:
      v4 = CFSTR("Inverse");
      break;
    case 3:
      v4 = CFSTR("Power");
      break;
    case 4:
      v4 = CFSTR("Exp");
      break;
    case 5:
      v4 = CFSTR("Log");
      break;
    case 6:
      v4 = CFSTR("Abs");
      break;
    case 7:
      v4 = CFSTR("Threshold");
      break;
    default:
      if (v3 == 0xFFFFFFFF80000000 || v3 == 0x7FFFFFFF)
        v4 = CFSTR("<Unspecified>");
      else
        v4 = 0;
      break;
  }
  objc_msgSend(CFSTR("Unary"), "stringByAppendingString:", v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void ***)(a1 + 8);
  v8 = *v7;
  *v7 = (void *)v6;

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_14>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95568D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95568D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  const __CFString *v5;

  v2 = *a2;
  switch(*a2)
  {
    case 0:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Sum");
      goto LABEL_18;
    case 1:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Avg");
      goto LABEL_18;
    case 2:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Prod");
      goto LABEL_18;
    case 3:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("LogSum");
      goto LABEL_18;
    case 4:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("SumSquare");
      goto LABEL_18;
    case 5:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("L1");
      goto LABEL_18;
    case 6:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("L2");
      goto LABEL_18;
    case 7:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Max");
      goto LABEL_18;
    case 8:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Min");
      goto LABEL_18;
    case 9:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Argmax");
      goto LABEL_18;
    default:
      if (v2 != 0xFFFFFFFF80000000 && v2 != 0x7FFFFFFF)
        return;
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("<Unspecified>");
LABEL_18:
      *v3 = (void *)v5;

      return;
  }
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_15>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556928;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  const __CFString *v5;

  v2 = *a2;
  if (*a2 > 0)
  {
    if (v2 == 1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("BiLinear");
      goto LABEL_10;
    }
    if (v2 != 0x7FFFFFFF)
      return;
LABEL_7:
    v3 = *(void ***)(a1 + 8);
    v4 = *v3;
    v5 = CFSTR("<Unspecified>");
    goto LABEL_10;
  }
  if (v2 == 0xFFFFFFFF80000000)
    goto LABEL_7;
  if (!v2)
  {
    v3 = *(void ***)(a1 + 8);
    v4 = *v3;
    v5 = CFSTR("NearestNeighbor");
LABEL_10:
    *v3 = (void *)v5;

  }
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_16>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556980;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556980;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  const __CFString *v5;

  v2 = *a2;
  if (*a2 <= 0)
  {
    if (v2 != 0xFFFFFFFF80000000)
    {
      if (v2)
        return;
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Max");
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  switch(v2)
  {
    case 1:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("Average");
      goto LABEL_12;
    case 2:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("L2");
      goto LABEL_12;
    case 0x7FFFFFFFLL:
LABEL_9:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("<Unspecified>");
LABEL_12:
      *v3 = (void *)v5;

      break;
  }
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_17>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95569D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95569D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  const __CFString *v5;

  v2 = *a2;
  if (*a2 <= 0)
  {
    if (v2 != 0xFFFFFFFF80000000)
    {
      if (v2)
        return;
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("SpaceToDepth");
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  switch(v2)
  {
    case 1:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("DepthToSpace");
      goto LABEL_12;
    case 2:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("PixelShuffle");
      goto LABEL_12;
    case 0x7FFFFFFFLL:
LABEL_9:
      v3 = *(void ***)(a1 + 8);
      v4 = *v3;
      v5 = CFSTR("<Unspecified>");
LABEL_12:
      *v3 = (void *)v5;

      break;
  }
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_18>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556A30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556A30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::operator()(uint64_t result, _QWORD *a2)
{
  **(_BYTE **)(result + 8) = *a2 != 0;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_19>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556A88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556A88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::operator()(uint64_t result, _QWORD *a2)
{
  **(_BYTE **)(result + 8) = *a2 != 0;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_20>,void ()(long long)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95563A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95563A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationLinear");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_0>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556400;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationReLU");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_1>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556458;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationLeakyReLU");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_2>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95564B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95564B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationThresholdedReLU");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_3>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E9556508;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E9556508;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, CodedInputStream *a2)
{
  void **v4;
  void *v5;
  id v6;
  _DWORD *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  _DWORD *v16;
  _BYTE v17[8];
  std::__shared_weak_count *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(void ***)(a1 + 8);
  v5 = *v4;
  *v4 = CFSTR("ActivationPReLU");

  v6 = *(id *)(a1 + 16);
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v17);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 1;
  v15 = v7 + 1;
  v16 = v7 + 1;
  v8 = v6;
  v19[0] = &off_1E95561F0;
  v19[1] = parseNeuralNetworkWeightParams;
  v19[2] = v8;
  v20 = v19;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v17, &__p, v19);
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v17, a2);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

}

void sub_1D3AF6594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_4>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556560;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationTanh");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_5>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95565B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95565B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationScaledTanh");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_6>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556610;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556610;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationSigmoid");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_7>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556668;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556668;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationSigmoidHard");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_8>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95566C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95566C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationELU");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_9>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556718;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationSoftsign");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_10>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::~__func()
{
  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E9556770;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E9556770;
  a2[1] = v2;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 8);
  v2 = *v1;
  *v1 = CFSTR("ActivationSoftplus");

}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_11>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E95567C8;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E95567C8;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, CodedInputStream *a2)
{
  void **v4;
  void *v5;
  id v6;
  _DWORD *v7;
  id v8;
  uint64_t (***v9)();
  uint64_t v10;
  _DWORD *v11;
  id v12;
  uint64_t (***v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  void *v19;
  _DWORD *v20;
  _BYTE v21[8];
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  void (*v24)(CodedInputStream *, void *);
  id v25;
  uint64_t (***v26)();
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *(void ***)(a1 + 8);
  v5 = *v4;
  *v4 = CFSTR("ActivationParametricSoftplus");

  v6 = *(id *)(a1 + 16);
  MLAssetIO::ProtoWireFormatCallbackParser::ProtoWireFormatCallbackParser((MLAssetIO::ProtoWireFormatCallbackParser *)v21);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 1;
  v19 = v7 + 1;
  v20 = v7 + 1;
  v8 = v6;
  v23 = &off_1E95561F0;
  v24 = parseNeuralNetworkWeightParams;
  v25 = v8;
  v26 = &v23;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v21, &__p, &v23);
  v9 = v26;
  if (v26 == &v23)
  {
    v10 = 4;
    v9 = &v23;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_6:
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = 2;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = v8;
  v23 = &off_1E95561F0;
  v24 = parseNeuralNetworkWeightParams;
  v25 = v12;
  v26 = &v23;
  MLAssetIO::ProtoWireFormatCallbackParser::setLengthDelimitedFieldHandler(v21, &__p, &v23);
  v13 = v26;
  if (v26 == &v23)
  {
    v14 = 4;
    v13 = &v23;
  }
  else
  {
    if (!v26)
      goto LABEL_13;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_13:
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  MLAssetIO::ProtoWireFormatCallbackParser::parse((MLAssetIO::ProtoWireFormatCallbackParser *)v21, a2);
  v15 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

}

void sub_1D3AF6ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12,std::allocator<parseLayerParams(int,google::protobuf::io::CodedInputStream &,NSString * {__autoreleasing}*,NSDictionary<NSString *,NSNumber *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*,NSArray<NSString *> * {__autoreleasing}*)::$_12>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

void ___ZL41parseNeuralNetworkAndUpdateLayerHistogramRN6google8protobuf2io16CodedInputStreamEP19NSMutableDictionaryIP8NSStringP8NSNumberE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithInteger:", objc_msgSend(v5, "integerValue") + objc_msgSend(v7, "integerValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v9);

}

void sub_1D3AF7078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void MIOModelSpecificInfo::~MIOModelSpecificInfo(MIOModelSpecificInfo *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 24);
  std::vector<MIOFunctionInfo>::__destroy_vector::operator()[abi:ne180100](&v3);

}

void std::vector<MIOFunctionInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        std::allocator<MIOFunctionInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1D8251A40);
}

_QWORD *std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E9567CB8;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E9567CB8;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::destroy(uint64_t a1)
{

}

void std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>,std::allocator<std::__bind<void (&)(google::protobuf::io::CodedInputStream &,NSMutableDictionary<NSString *,NSNumber *> *),std::placeholders::__ph<1> const&,NSMutableDictionary<NSString *,NSNumber *> * {__strong}&>>,void ()(google::protobuf::io::CodedInputStream &)>::target_type()
{
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D3AF7328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E9568200;
  CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)(a1 + 3));
  return a1;
}

void sub_1D3AF7370(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E9568200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

const __CFString *MIOFeatureTypeToString(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("Unknown");
  else
    return off_1E9568C18[a1];
}

void sub_1D3AF7478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D3AF79F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  CoreML::Specification::ImageFeatureType_ImageSize::~ImageFeatureType_ImageSize((CoreML::Specification::ImageFeatureType_ImageSize *)va);
  _Unwind_Resume(a1);
}

void sub_1D3AF7AEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF7C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AF7DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D3AF7E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1D3AF816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D3AF826C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF8464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AF85E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D3AF8668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF86B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF86F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF8754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D3AF87AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF87F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF885C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF88D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF8AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D3AF8BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D3AF8C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF8CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF8D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF8D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF8E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AF8E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AF8F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSDictionaryFromModelMetadataSpecification(const CoreML::Specification::Metadata *a1)
{
  id v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  id v11;
  uint64_t *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (uint64_t *)*((_QWORD *)a1 + 6);
  if (*((char *)v3 + 23) < 0)
  {
    if (!v3[1])
      goto LABEL_7;
    v3 = (uint64_t *)*v3;
    goto LABEL_6;
  }
  if (*((_BYTE *)v3 + 23))
  {
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("MLModelDescriptionKey"));

  }
LABEL_7:
  v5 = (uint64_t *)*((_QWORD *)a1 + 7);
  if (*((char *)v5 + 23) < 0)
  {
    if (!v5[1])
      goto LABEL_13;
    v5 = (uint64_t *)*v5;
    goto LABEL_12;
  }
  if (*((_BYTE *)v5 + 23))
  {
LABEL_12:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("MLModelVersionStringKey"));

  }
LABEL_13:
  v7 = (uint64_t *)*((_QWORD *)a1 + 8);
  if (*((char *)v7 + 23) < 0)
  {
    if (!v7[1])
      goto LABEL_19;
    v7 = (uint64_t *)*v7;
    goto LABEL_18;
  }
  if (*((_BYTE *)v7 + 23))
  {
LABEL_18:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("MLModelAuthorKey"));

  }
LABEL_19:
  v9 = (uint64_t *)*((_QWORD *)a1 + 9);
  if (*((char *)v9 + 23) < 0)
  {
    if (!v9[1])
      goto LABEL_25;
    v9 = (uint64_t *)*v9;
    goto LABEL_24;
  }
  if (*((_BYTE *)v9 + 23))
  {
LABEL_24:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("MLModelLicenseKey"));

  }
LABEL_25:
  if (**((_DWORD **)a1 + 5))
  {
    v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    *((_QWORD *)&v19 + 1) = *((_QWORD *)a1 + 5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v19, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 24));
    v17 = v19;
    v18 = v20;
    while ((_QWORD)v17)
    {
      v12 = *(uint64_t **)(v17 + 24);
      v13 = v12 + 3;
      if (*((char *)v12 + 47) < 0)
        v13 = (_QWORD *)*v13;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13, v17, v18);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)v12 + 23) < 0)
        v12 = (uint64_t *)*v12;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, v15);

      google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(&v17);
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("MLModelCreatorDefinedKey"));

  }
  return v2;
}

void sub_1D3AF92B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSArrayFromFeatureDescriptionSpecifications(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  MIOFeatureDescription *v7;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(int *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v4 = (_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = -[MIOFeatureDescription initWithSpecification:]([MIOFeatureDescription alloc], "initWithSpecification:", *v4);
      objc_msgSend(v2, "addObject:", v7);

      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  return v2;
}

void sub_1D3AF93A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AF9518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 401);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (google::protobuf::internal::LogMessage *)v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 410);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (google::protobuf::internal::LogMessage *)v11);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1D3AF9688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  unint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  char v13;
  std::string v14[2];
  _QWORD *v15;

  v2 = *(_QWORD *)(*a1 + 32);
  if (v2)
    goto LABEL_2;
  v15 = 0;
  v3 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v15);
  v4 = a1[2];
  if (v3)
  {
    v5 = v4 + 1;
LABEL_15:
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v5);
    return a1;
  }
  if ((v4 & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 434);
    v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (bucket_index_ & 1) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v4 = a1[2];
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 8 * v4);
  v8 = (uint64_t)v15;
  v9 = (_QWORD *)v15[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  else
  {
    do
    {
      v10 = *(_QWORD **)(v8 + 16);
      v11 = *v10 == v8;
      v8 = (uint64_t)v10;
    }
    while (!v11);
  }
  v15 = v10;
  if (v10 == (_QWORD *)(v7 + 8))
  {
    v5 = v4 + 2;
    goto LABEL_15;
  }
  v2 = v10[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

void sub_1D3AF97A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  const void **v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  std::string v15[2];

  v4 = *(const void ***)a1;
  if (!*(_QWORD *)a1 || (v5 = *(_QWORD *)(a1 + 8)) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 459);
    v6 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v4 = *(const void ***)a1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v5 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if ((const void **)v9 == v4)
    return 1;
  if (v9 && v9 != *(_QWORD *)(v8 + 8 * (v7 ^ 1)))
  {
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        break;
      if ((const void **)v9 == v4)
        return 1;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v5, v4, a2, (uint64_t)v15);
  v10 = v15[0].__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15[0].__r_.__value_.__l + 2);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  return !v12 || v12 != *(_QWORD *)(v11 + 8 * (v10 ^ 1));
}

void sub_1D3AF98C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 401);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (google::protobuf::internal::LogMessage *)v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map.h", 410);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (google::protobuf::internal::LogMessage *)v11);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1D3AF9A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1D3AF9B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&a9);

  _Unwind_Resume(a1);
}

void sub_1D3AF9EE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5, void *a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a6);

  MIOModelInfo::~MIOModelInfo((MIOModelInfo *)va);
  if (a2 == 1)
  {
    v11 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      -[MIOSpecificationModel initWithMessageStream:parserContext:error:].cold.1((uint64_t)v11);
    if (a5)
    {
      v12 = (void *)MEMORY[0x1E0CB35C8];
      *(_QWORD *)(v8 - 112) = *MEMORY[0x1E0CB2D50];
      v13 = (void *)MEMORY[0x1E0CB3940];
      (*(void (**)(void *))(*(_QWORD *)v11 + 16))(v11);
      objc_msgSend(v13, "stringWithFormat:", CFSTR("Failed to parse the model specification. Error: %s"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(v8 - 104) = v14;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8 - 104, v8 - 112, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("com.apple.mlassetio"), 1, v15);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1D3AF9E90);
  }

  _Unwind_Resume(a1);
}

void MIOModelInfo::~MIOModelInfo(MIOModelInfo *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 72);
  std::vector<MIOFunctionInfo>::__destroy_vector::operator()[abi:ne180100](&v3);

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void sub_1D3AFA1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFA270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFA7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)&a10);
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&a36);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)(v39 - 216));
  google::protobuf::io::FileOutputStream::~FileOutputStream((google::protobuf::io::FileOutputStream *)(v39 - 184));

  _Unwind_Resume(a1);
}

unint64_t google::protobuf::MessageLite::ByteSize(google::protobuf::MessageLite *this)
{
  unint64_t v1;
  std::string *v2;
  char v4;
  std::string v5[2];

  v1 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 96))(this);
  if (v1 >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/generated_message_util.h", 212);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (google::protobuf::internal::LogMessage *)v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1D3AFA8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1D3AFAB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D3AFAC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFAD34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::vector<MIOFunctionInfo>::__vdeallocate(id **a1)
{
  id *v1;
  id *v3;
  id *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        std::allocator<MIOFunctionInfo>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1D3AFB158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1D3AFB218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFB2D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D3AFB41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFB540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFB5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFB628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFB678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AFB784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFB81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFBF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  _Unwind_Resume(a1);
}

void sub_1D3AFC568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFD738()
{
  void *v0;
  void *v1;

  __cxa_end_catch();
  JUMPOUT(0x1D3AFD848);
}

void sub_1D3AFD770()
{
  JUMPOUT(0x1D3AFD858);
}

void sub_1D3AFD778()
{
  void *v0;

  JUMPOUT(0x1D3AFD860);
}

void sub_1D3AFD784()
{
  JUMPOUT(0x1D3AFD860);
}

void sub_1D3AFD78C()
{
  JUMPOUT(0x1D3AFD868);
}

void sub_1D3AFD798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1D3AFD7A4()
{
  void *v0;
  void *v1;
  void *v2;

  JUMPOUT(0x1D3AFD808);
}

void sub_1D3AFD7B0()
{
  void *v0;
  void *v1;
  void *v2;

  JUMPOUT(0x1D3AFD808);
}

void sub_1D3AFD7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{

  JUMPOUT(0x1D3AFD848);
}

void sub_1D3AFD8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFD900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFD948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFD990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFD9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFDA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFDAE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFDB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D3AFDBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFDC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D3AFDD14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFDDE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void extractExternalFeatureDescriptionsFromDictionary(NSDictionary *a1, MIOMutableModelDescription *a2, NSString *a3)
{
  NSDictionary *v5;
  MIOMutableModelDescription *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t m;
  uint64_t v33;
  void *v34;
  void *v35;
  NSDictionary *v36;
  id obj;
  void *v38;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v36 = v5;
  -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("Inputs"));
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "allKeys");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v54 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * i);
        objc_msgSend(v40, "objectForKeyedSubscript:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("MLFeatureShortDescription"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[MIOMutableModelDescription setShortDescription:forInputFeatureWithName:functionName:](v6, "setShortDescription:forInputFeatureWithName:functionName:", v14, v12, v7);

      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
    }
    while (v9);
  }

  -[NSDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("States"));
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "allKeys");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v50;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v50 != v17)
          objc_enumerationMutation(v15);
        v19 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j);
        objc_msgSend(v39, "objectForKeyedSubscript:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("MLFeatureShortDescription"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[MIOMutableModelDescription setShortDescription:forStateFeatureWithName:functionName:](v6, "setShortDescription:forStateFeatureWithName:functionName:", v21, v19, v7);

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    }
    while (v16);
  }

  -[NSDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("Outputs"));
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "allKeys");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v46;
    do
    {
      for (k = 0; k != v23; ++k)
      {
        if (*(_QWORD *)v46 != v24)
          objc_enumerationMutation(v22);
        v26 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * k);
        objc_msgSend(v38, "objectForKeyedSubscript:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("MLFeatureShortDescription"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[MIOMutableModelDescription setShortDescription:forOutputFeatureWithName:functionName:](v6, "setShortDescription:forOutputFeatureWithName:functionName:", v28, v26, v7);

      }
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
    }
    while (v23);
  }

  -[NSDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("TrainingInputs"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  objc_msgSend(v29, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
  if (v30)
  {
    v31 = *(_QWORD *)v42;
    do
    {
      for (m = 0; m != v30; ++m)
      {
        if (*(_QWORD *)v42 != v31)
          objc_enumerationMutation(obj);
        v33 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * m);
        objc_msgSend(v29, "objectForKeyedSubscript:", v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("MLFeatureShortDescription"));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        -[MIOMutableModelDescription setShortDescription:forTrainingInputFeatureWithName:](v6, "setShortDescription:forTrainingInputFeatureWithName:", v35, v33);

      }
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
    }
    while (v30);
  }

}

void sub_1D3AFE314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id featureDescriptionDictionaryFromFeatureDescriptionArray(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const __CFString *v16;
  void *v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = v11;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v13;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v5);
        v16 = CFSTR("MLFeatureShortDescription");
        objc_msgSend(v6, "shortDescription");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v7;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "setObject:forKeyedSubscript:", v8, v9);

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v3);
  }

  return v1;
}

void sub_1D3AFE5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_1D3AFEA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D3AFEBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D3AFECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  _QWORD *v18;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  MIOFunctionInfo::~MIOFunctionInfo((MIOFunctionInfo *)&a11);
  if ((_DWORD)a2 == 1)
  {
    if (!-[MIOModelLayer initWithMessageStream:error:].cold.1(a1, a2, (uint64_t)v18, &a11))
    {
      v21 = (void *)MEMORY[0x1E0CB35C8];
      a16 = *MEMORY[0x1E0CB2D50];
      v22 = (void *)MEMORY[0x1E0CB3940];
      (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
      objc_msgSend(v22, "stringWithFormat:", CFSTR("Failed to parse the Layer specification. Error: %s"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      a17 = v23;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a17, &a16, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "errorWithDomain:code:userInfo:", CFSTR("com.apple.mlassetio"), 1, v24);
      *v18 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1D3AFEC68);
  }

  _Unwind_Resume(a1);
}

void sub_1D3AFEE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3AFEF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D3AFEFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MIOFindProtobufFields(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  void *v10;
  id v11;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v4;
  if (objc_msgSend(v6, "count"))
  {
    v7 = objc_retainAutorelease(v5);
    v8 = objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");
    v13[0] = v8;
    v13[1] = v8 + v9;
    v13[2] = 0;
    v14 = v9;
    v15 = 0;
    v16 = 0;
    v17 = v9;
    v18 = 0x7FFFFFFF00000000;
    v19 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
    v20 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
    v21 = 1;
    v22 = 0;
    v23 = 0;
    v10 = (void *)objc_opt_new();
    parseStreamForFieldNumberPath((uint64_t)v13, v6, 0, v10);
    v11 = v10;

    google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)v13);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MIOFindProtobufFields_cold_1();
    v11 = 0;
  }

  return v11;
}

void parseStreamForFieldNumberPath(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t TagFallback;
  void *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char *v19;
  int VarintSizeAsIntFallback;
  int v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  void *v30;
  void *exception;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  v36 = a2;
  v7 = a4;
  v8 = a3;
  v9 = (a3 + 1);
  while (1)
  {
    while (1)
    {
      v10 = *(char **)a1;
      v11 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 == v11 && (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 40)))
      {
        *(_DWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 1;
        goto LABEL_30;
      }
      if ((unint64_t)v10 >= v11)
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        TagFallback = *v10;
        if ((*v10 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 32) = TagFallback;
          *(_QWORD *)a1 = v10 + 1;
          goto LABEL_10;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a1, TagFallback);
      *(_DWORD *)(a1 + 32) = TagFallback;
LABEL_10:
      objc_msgSend(v36, "objectAtIndexedSubscript:", v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "intValue");

      if (TagFallback >> 3 == v14)
        break;
      if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a1, (google::protobuf::io::CodedInputStream *)TagFallback, v15) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D825177C](exception, "Failed to skip a field.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    v16 = objc_msgSend(v36, "count");
    v18 = TagFallback & 7;
    if (v16 - 1 == v8)
      break;
    if (v18 != 2)
    {
      v32 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D825177C](v32, "The message must have the length delimited wire type.");
      __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v19 = *(char **)a1;
    if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8) || *v19 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a1);
      if (VarintSizeAsIntFallback < 0)
      {
        v33 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D825177C](v33, "Failed to read length.");
        __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else
    {
      VarintSizeAsIntFallback = *v19;
      *(_QWORD *)a1 = v19 + 1;
    }
    v21 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a1, VarintSizeAsIntFallback);
    parseStreamForFieldNumberPath(a1, v36, v9, v7);
    google::protobuf::io::CodedInputStream::PopLimit(a1, v21);
  }
  v22 = *(_QWORD *)(a1 + 8);
  if (v18 == 2)
  {
    v23 = *(char **)a1;
    if (*(_QWORD *)a1 >= v22 || *v23 < 0)
    {
      v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a1);
      if ((v24 & 0x80000000) != 0)
      {
        v35 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D825177C](v35, "Failed to read length.");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v25 = *(unsigned __int8 **)a1;
      v22 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v24 = *v23;
      v25 = (unsigned __int8 *)(v23 + 1);
      *(_QWORD *)a1 = v25;
    }
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 44) + (int)v25 - (int)v22, v24);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v30);

    google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)a1, v24);
  }
  else
  {
    v26 = *(_DWORD *)(a1 + 24);
    v27 = *(_DWORD *)a1;
    v28 = *(_DWORD *)(a1 + 44);
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a1, (google::protobuf::io::CodedInputStream *)TagFallback, v17) & 1) == 0)
    {
      v34 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D825177C](v34, "Failed to skip a field.");
      __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v26 - v28 + v27 - (int)v22, *(_DWORD *)(a1 + 24)- *(_DWORD *)(a1 + 44)+ *(_DWORD *)a1- *(_DWORD *)(a1 + 8)- (uint64_t)(v26 - v28 + v27 - (int)v22));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v29);

  }
LABEL_30:

}

void sub_1D3AFFC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  __cxa_free_exception(v11);

  _Unwind_Resume(a1);
}

void MIOFindProtobufFields_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1D3AC6000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "fieldNumberPath has no components.", v0, 2u);
}

void MIOFindProtobufFields_cold_2(void *a1)
{
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = __cxa_begin_catch(a1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = (*(uint64_t (**)(void *))(*(_QWORD *)v1 + 16))(v1);
    v3 = 136315138;
    v4 = v2;
    _os_log_error_impl(&dword_1D3AC6000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to parse the model specification. Error: %s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1D3B00198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D3B004A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

void sub_1D3B0096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_1E955A828;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E955A828;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(a2, v3);
  return v3;
}

void sub_1D3B00F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MessageLite::GetArena(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t google::protobuf::MessageLite::GetMaybeArenaPointer(google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return *((unsigned int *)this + 5);
}

std::string *google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(uint64_t *a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if ((*a1 & 1) != 0)
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = (std::string *)google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::string::append(v3, v5, v6);
}

uint64_t google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(uint64_t *a1)
{
  unint64_t *v2;
  uint64_t Aligned;
  google::protobuf::Arena **v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (unint64_t *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) == 0)
  {
    if (v2)
      goto LABEL_3;
LABEL_7:
    Aligned = operator new();
    *(_OWORD *)Aligned = 0u;
    *(_OWORD *)(Aligned + 16) = 0u;
    goto LABEL_8;
  }
  v2 = (unint64_t *)v2[3];
  if (!v2)
    goto LABEL_7;
LABEL_3:
  *(_OWORD *)Aligned = 0u;
  *(_OWORD *)(Aligned + 16) = 0u;
  v4 = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)v2, 0, 24);
  *v4 = (google::protobuf::Arena *)Aligned;
  v4[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>;
  v5 = v2 + 4;
  do
    v6 = __ldxr(v5);
  while (__stxr((unint64_t)v4, v5));
  v4[2] = (google::protobuf::Arena *)v6;
LABEL_8:
  *a1 = Aligned | 1;
  *(_QWORD *)(Aligned + 24) = v2;
  return Aligned;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_1E955A828;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_1D3B0127C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t *google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      MEMORY[0x1D8251A40](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EDB8F2B0 = 0;
  *(_QWORD *)&dword_1EDB8F2B8 = 0;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_ = (uint64_t)&off_1E955A828;
  byte_1EDB8F2C0 = 1;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_ = (uint64_t)&off_1E955A6F8;
  unk_1EDB8F248 = 0;
  qword_1EDB8F258 = 0;
  byte_1EDB8F260 = 1;
  return result;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(this);
  JUMPOUT(0x1D8251A40);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E955A6F8;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(this, 0);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(a2, v3);
  return v3;
}

void sub_1D3B01490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      LODWORD(v8) = 0;
LABEL_22:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_23;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_23;
      if (*((_DWORD *)this + 7) == 20)
      {
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)*((_QWORD *)this + 2);
      }
      else
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
        CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v16 = *((_DWORD *)a2 + 13);
      v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + 13) = v16;
      if (v16 < 0 == v17)
      {
        v18 = v14;
        result = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(v11, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_22;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_23:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B016AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)this + 7) == 20)
  {
    v1 = *((_QWORD *)this + 2);
    v2 = *(_DWORD *)(v1 + 16);
    if (v2)
    {
      if (v2 < 0)
        v3 = 11;
      else
        v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v3 = 0;
    }
    *(_DWORD *)(v1 + 20) = v3;
    v4 = v3 + 3;
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t *CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(uint64_t *this, const CoreML::Specification::CoreMLModels::AudioFeaturePrint *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (*((_DWORD *)v3 + 7) == 20)
    {
      v5 = v3[2];
    }
    else
    {
      *((_DWORD *)v3 + 7) = 20;
      v5 = operator new();
      this = (uint64_t *)CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound((CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)v5);
      v3[2] = v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        this = (uint64_t *)CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *)this);
        v6 = &CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_;
        goto LABEL_9;
      }
    }
    v6 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_9:
    v7 = v6[1];
    if ((v7 & 1) != 0)
      this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v5 + 8), v7 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *((_DWORD *)v6 + 4);
    if (v8)
      *(_DWORD *)(v5 + 16) = v8;
  }
  return this;
}

void sub_1D3B01824(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(_QWORD *)this = &off_1E955A6F8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B01894(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void CoreML::Specification::CategoricalMapping::~CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::~CategoricalMapping(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E955E388;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  if (*((_DWORD *)this + 10))
    CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CategoricalMapping::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalMapping");
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this)
{
  return CoreML::Specification::CategoricalMapping::New(this, 0);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CategoricalMapping *v3;

  v3 = (CoreML::Specification::CategoricalMapping *)operator new();
  CoreML::Specification::CategoricalMapping::CategoricalMapping(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(a2, v3);
  return v3;
}

void sub_1D3B01A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EEBF8A51);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::Clear(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  return CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
}

uint64_t CoreML::Specification::CategoricalMapping::IsInitialized(CoreML::Specification::CategoricalMapping *this)
{
  return 1;
}

uint64_t CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(CoreML::Specification::CategoricalMapping *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  CoreML::Specification::Int64ToStringMap *v14;
  char *v15;
  unint64_t Varint64Fallback;
  CoreML::Specification::StringToInt64Map *v17;
  std::string *v18;
  char *v19;
  int v20;
  char *v21;
  int VarintSizeAsIntFallback;
  uint64_t result;
  int v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type size;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int TagFallback;

  v5 = (std::string **)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_65:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_66;
          goto LABEL_9;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_65;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_66;
LABEL_9:
        v12 = v10 >> 3;
        if (v10 >> 3 <= 0x64)
          break;
        if (v12 == 101)
        {
          if (v10 != 42)
            goto LABEL_66;
          if (*((_DWORD *)this + 10) != 101)
          {
            CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
            *((_DWORD *)this + 10) = 101;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_40:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v18 = *v5;
            goto LABEL_41;
          }
          v18 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_40;
LABEL_41:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18);
          if (!(_DWORD)result)
            return result;
          v24 = *((_DWORD *)this + 10);
          v25 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v25 = *v5;
          if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
            v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
          v26 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v26 = *v5;
          if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
            size = v26->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v26->__r_.__value_.__r.__words[2]);
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v25, size, 0, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue"))return 0;
        }
        else
        {
          if (v12 != 102 || v10 != 48)
            goto LABEL_66;
          CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v28 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          *((_QWORD *)this + 3) = Varint64Fallback;
          *((_DWORD *)this + 10) = 102;
        }
      }
      if (v12 != 1)
        break;
      if (v10 != 10)
        goto LABEL_66;
      if (*((_DWORD *)this + 9) == 1)
      {
        v17 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v17 = (CoreML::Specification::StringToInt64Map *)operator new();
        CoreML::Specification::StringToInt64Map::StringToInt64Map(v17);
        *((_QWORD *)this + 2) = v17;
      }
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v21;
        *(_QWORD *)a2 = v21 + 1;
      }
      v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v36 = *((_DWORD *)a2 + 13);
      v32 = __OFSUB__(v36--, 1);
      *((_DWORD *)a2 + 13) = v36;
      if (v36 < 0 != v32)
        return 0;
      v33 = v34;
      result = CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(v17, a2, v35);
      if (!(_DWORD)result)
        return result;
LABEL_59:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
        return 0;
    }
    if (v12 == 2 && v10 == 18)
    {
      if (*((_DWORD *)this + 9) == 2)
      {
        v14 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v14 = (CoreML::Specification::Int64ToStringMap *)operator new();
        CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v14);
        *((_QWORD *)this + 2) = v14;
      }
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      v31 = *((_DWORD *)a2 + 13);
      v32 = __OFSUB__(v31--, 1);
      *((_DWORD *)a2 + 13) = v31;
      if (v31 < 0 != v32)
        return 0;
      v33 = v29;
      result = CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(v14, a2, v30);
      if (!(_DWORD)result)
        return result;
      goto LABEL_59;
    }
LABEL_66:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B01E64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::ByteSizeLong(CoreML::Specification::CategoricalMapping *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)this + 9);
  if (v2 == 2)
  {
    v3 = CoreML::Specification::Int64ToStringMap::ByteSizeLong(*((CoreML::Specification::Int64ToStringMap **)this + 2));
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    v3 = CoreML::Specification::StringToInt64Map::ByteSizeLong(*((CoreML::Specification::StringToInt64Map **)this + 2));
LABEL_5:
    result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_7;
  }
  result = 0;
LABEL_7:
  v5 = *((_DWORD *)this + 10);
  if (v5 == 102)
  {
    v9 = result + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_13:
    result = v9 + 2;
    goto LABEL_14;
  }
  if (v5 == 101)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v9 = result + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_13;
  }
LABEL_14:
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CoreML::Specification::CategoricalMapping::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  v7 = *(_DWORD *)(v5 + 40);
  if (v7 == 101)
  {
    v8 = *(unsigned int **)(v5 + 24);
    if (*((char *)v8 + 23) < 0)
    {
      v8 = *(unsigned int **)v8;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue");
    if (*(_DWORD *)(v5 + 40) == 101)
      v10 = *(uint64_t **)(v5 + 24);
    else
      v10 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x65u, (uint64_t)v10, a2);
    v7 = *(_DWORD *)(v5 + 40);
  }
  if (v7 == 102)
    return google::protobuf::internal::WireFormatLite::WriteInt64(102, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::GetCachedSize(CoreML::Specification::CategoricalMapping *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::CategoricalMapping::clear_MappingType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 101)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

void CoreML::Specification::CategoricalMapping::MergeFrom(CoreML::Specification::CategoricalMapping *this, const CoreML::Specification::CategoricalMapping *a2)
{
  uint64_t v4;
  int v5;
  CoreML::Specification::StringToInt64Map *v6;
  CoreML::Specification::Int64ToStringMap *v7;
  CoreML::Specification::StringToInt64Map *v8;
  const CoreML::Specification::StringToInt64Map *v9;
  CoreML::Specification::Int64ToStringMap *v10;
  const CoreML::Specification::Int64ToStringMap *v11;
  int v12;
  const std::string *v13;
  std::string *v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 != 2)
  {
    if (v5 != 1)
      goto LABEL_17;
    if (*((_DWORD *)this + 9) == 1)
    {
      v6 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v6 = (CoreML::Specification::StringToInt64Map *)operator new();
      v8 = CoreML::Specification::StringToInt64Map::StringToInt64Map(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v8);
        v9 = (const CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_;
        goto LABEL_14;
      }
    }
    v9 = (const CoreML::Specification::StringToInt64Map *)*((_QWORD *)a2 + 2);
LABEL_14:
    CoreML::Specification::StringToInt64Map::MergeFrom(v6, v9);
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v7 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
  }
  else
  {
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v7 = (CoreML::Specification::Int64ToStringMap *)operator new();
    v10 = CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v7);
    *((_QWORD *)this + 2) = v7;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v10);
      v11 = (const CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_;
      goto LABEL_16;
    }
  }
  v11 = (const CoreML::Specification::Int64ToStringMap *)*((_QWORD *)a2 + 2);
LABEL_16:
  CoreML::Specification::Int64ToStringMap::MergeFrom(v7, v11);
LABEL_17:
  v12 = *((_DWORD *)a2 + 10);
  if (v12 == 102)
  {
    v15 = *((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) != 102)
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 102;
    }
    *((_QWORD *)this + 3) = v15;
  }
  else if (v12 == 101)
  {
    v13 = (const std::string *)*((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) == 101)
    {
      v14 = (std::string *)*((_QWORD *)this + 3);
      if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v14, v13);
        return;
      }
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 101;
      *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v13);
  }
}

void sub_1D3B022D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  *(_QWORD *)this = &off_1E955E388;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_)
    CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B02350(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(CoreML::Specification::protobuf_CategoricalMapping_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_CategoricalMapping_default_instance_ = (uint64_t)&off_1E955E388;
  *(_QWORD *)algn_1EDB90C88 = 0;
  dword_1EDB90CA8 = 0;
  qword_1EDB90CA0 = 0;
  byte_1EDB90CB0 = 1;
  return result;
}

void CoreML::Specification::Pipeline::~Pipeline(CoreML::Specification::Pipeline *this)
{
  CoreML::Specification::Pipeline::~Pipeline(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E95660D0;
  v2 = (_QWORD *)((char *)this + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Pipeline::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Pipeline");
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this)
{
  return CoreML::Specification::Pipeline::New(this, 0);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Pipeline *v3;

  v3 = (CoreML::Specification::Pipeline *)operator new();
  CoreML::Specification::Pipeline::Pipeline(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(a2, v3);
  return v3;
}

void sub_1D3B02540(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Pipeline::Clear(CoreML::Specification::Pipeline *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3;
      v5 = (_QWORD *)(*v3 + 16);
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      *(_QWORD *)((char *)v5 + 5) = 0;
      *v5 = 0;
      CoreML::Specification::Model::clear_Type(v4);
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
}

uint64_t CoreML::Specification::Pipeline::IsInitialized(CoreML::Specification::Pipeline *this)
{
  return 1;
}

uint64_t CoreML::Specification::Pipeline::MergePartialFromCodedStream(CoreML::Specification::Pipeline *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  google::protobuf::Arena **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::Model *v15;
  int *v16;
  int v17;
  int v18;
  std::string *Aligned;
  google::protobuf::Arena *v21;
  google::protobuf::Arena **v22;
  unint64_t *v23;
  unint64_t v24;
  google::protobuf::Arena *v25;
  google::protobuf::Arena **v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int VarintSizeAsIntFallback;
  int v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;

  v5 = (CoreML::Specification::Pipeline *)((char *)this + 40);
  v6 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v8) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_21;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_21;
LABEL_8:
        if (v9 >> 3 != 2)
          break;
        if (v9 != 18)
          goto LABEL_21;
        v16 = (int *)*((_QWORD *)this + 7);
        if (!v16)
        {
          v17 = *((_DWORD *)this + 12);
          v18 = *((_DWORD *)this + 13);
          goto LABEL_38;
        }
        v17 = *((_DWORD *)this + 12);
        v18 = *v16;
        if (v17 >= *v16)
        {
          if (v18 == *((_DWORD *)this + 13))
          {
LABEL_38:
            if (v17 <= v18)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v18 - v17 + 1);
              v16 = (int *)*((_QWORD *)this + 7);
            }
            v18 = *v16;
          }
          *v16 = v18 + 1;
          v25 = *(google::protobuf::Arena **)v5;
          if (*(_QWORD *)v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v26 = google::protobuf::Arena::AllocateAligned(v25, 0, 24);
            *v26 = (google::protobuf::Arena *)Aligned;
            v26[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v27 = (unint64_t *)((char *)v25 + 32);
            do
              v28 = __ldxr(v27);
            while (__stxr((unint64_t)v26, v27));
            v26[2] = (google::protobuf::Arena *)v28;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v39 = *((_QWORD *)this + 7);
          v40 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v40 + 1;
          *(_QWORD *)(v39 + 8 * v40 + 8) = Aligned;
          goto LABEL_57;
        }
        *((_DWORD *)this + 12) = v17 + 1;
        Aligned = *(std::string **)&v16[2 * v17 + 2];
LABEL_57:
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, Aligned);
        if (!(_DWORD)result)
          return result;
        v41 = *((_QWORD *)this + 7);
        v42 = *(unsigned int **)(v41 + 8 * *((int *)this + 12));
        if (*((char *)v42 + 23) < 0)
        {
          v42 = *(unsigned int **)v42;
          v43 = *(_QWORD *)(*(_QWORD *)(v41 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v43) = *((unsigned __int8 *)v42 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 0, (uint64_t)"CoreML.Specification.Pipeline.names"))return 0;
      }
      if (v9 >> 3 != 1 || v9 != 10)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_30;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_33:
          *v12 = v14 + 1;
          v21 = *v6;
          if (*v6)
          {
            CoreML::Specification::Model::Model(v15);
            v22 = google::protobuf::Arena::AllocateAligned(v21, 0, 24);
            *v22 = v15;
            v22[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
            v23 = (unint64_t *)((char *)v21 + 32);
            do
              v24 = __ldxr(v23);
            while (__stxr((unint64_t)v22, v23));
            v22[2] = (google::protobuf::Arena *)v24;
          }
          else
          {
            v15 = (CoreML::Specification::Model *)operator new();
            CoreML::Specification::Model::Model(v15);
          }
          v29 = *((_QWORD *)this + 4);
          v30 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v30 + 1;
          *(_QWORD *)(v29 + 8 * v30 + 8) = v15;
          goto LABEL_47;
        }
LABEL_30:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v6, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_33;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      v15 = *(CoreML::Specification::Model **)&v12[2 * v13 + 2];
LABEL_47:
      v31 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v31;
        *(_QWORD *)a2 = v31 + 1;
      }
      v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v35 = *((_DWORD *)a2 + 13);
      v36 = __OFSUB__(v35--, 1);
      *((_DWORD *)a2 + 13) = v35;
      if (v35 < 0 == v36)
      {
        v37 = v33;
        result = CoreML::Specification::Model::MergePartialFromCodedStream(v15, a2, v34);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v37))
          continue;
      }
      return 0;
    }
LABEL_21:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B029A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Pipeline::ByteSizeLong(CoreML::Specification::Pipeline *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::Model::ByteSizeLong(*(CoreML::Specification::Model **)(*((_QWORD *)this + 4)
                                                                                       + 8 * v3
                                                                                       + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  result = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t CoreML::Specification::Pipeline::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned int **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        v11 = *(unsigned int **)v11;
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Pipeline.names");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::GetCachedSize(CoreML::Specification::Pipeline *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t CoreML::Specification::Model::ByteSizeLong(CoreML::Specification::Model *this)
{
  CoreML::Specification::ModelDescription *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (this == (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || (v2 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = CoreML::Specification::ModelDescription::ByteSizeLong(v2);
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 10;
    else
      v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    v4 += v6 + 1;
  }
  if (*((_BYTE *)this + 28))
    v7 = v4 + 2;
  else
    v7 = v4;
  v8 = *((_DWORD *)this + 11);
  if (v8 <= 559)
  {
    if (v8 <= 399)
    {
      if (v8 > 299)
      {
        switch(v8)
        {
          case 300:
            v9 = CoreML::Specification::GLMRegressor::ByteSizeLong(*((CoreML::Specification::GLMRegressor **)this + 4));
            goto LABEL_73;
          case 301:
            v9 = CoreML::Specification::SupportVectorRegressor::ByteSizeLong(*((CoreML::Specification::SupportVectorRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 302:
            v9 = (uint64_t)CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(*((CoreML::Specification::TreeEnsembleRegressor **)this
                                                                                     + 4));
            goto LABEL_73;
          case 303:
            v9 = CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(*((CoreML::Specification::NeuralNetworkRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 304:
            v9 = CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(*((CoreML::Specification::BayesianProbitRegressor **)this
                                                                              + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      switch(v8)
      {
        case 200:
          v9 = (uint64_t)CoreML::Specification::PipelineClassifier::ByteSizeLong(*((CoreML::Specification::PipelineClassifier **)this
                                                                                + 4));
          break;
        case 201:
          v9 = (uint64_t)CoreML::Specification::PipelineRegressor::ByteSizeLong(*((CoreML::Specification::PipelineRegressor **)this
                                                                               + 4));
          break;
        case 202:
          v9 = CoreML::Specification::Pipeline::ByteSizeLong(*((CoreML::Specification::Pipeline **)this + 4));
          break;
        default:
          goto LABEL_74;
      }
    }
    else
    {
      if (v8 <= 499)
      {
        switch(v8)
        {
          case 400:
            v9 = CoreML::Specification::GLMClassifier::ByteSizeLong(*((CoreML::Specification::GLMClassifier **)this + 4));
            goto LABEL_73;
          case 401:
            v9 = CoreML::Specification::SupportVectorClassifier::ByteSizeLong(*((CoreML::Specification::SupportVectorClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 402:
            v9 = CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(*((CoreML::Specification::TreeEnsembleClassifier **)this
                                                                             + 4));
            goto LABEL_73;
          case 403:
            v9 = CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(*((CoreML::Specification::NeuralNetworkClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 404:
            v9 = CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(*((CoreML::Specification::KNearestNeighborsClassifier **)this
                                                                                  + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      if (v8 <= 501)
      {
        if (v8 == 500)
          v9 = CoreML::Specification::NeuralNetwork::ByteSizeLong(*((CoreML::Specification::NeuralNetwork **)this + 4));
        else
          v9 = CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(*((CoreML::Specification::ItemSimilarityRecommender **)this
                                                                              + 4));
      }
      else
      {
        switch(v8)
        {
          case 502:
            v9 = CoreML::Specification::MILSpec::Program::ByteSizeLong(*((CoreML::Specification::MILSpec::Program **)this
                                                                       + 4));
            break;
          case 555:
            v9 = CoreML::Specification::CustomModel::ByteSizeLong(*((CoreML::Specification::CustomModel **)this + 4));
            break;
          case 556:
            v9 = CoreML::Specification::LinkedModel::ByteSizeLong(*((CoreML::Specification::LinkedModelFile ***)this + 4));
            break;
          default:
            goto LABEL_74;
        }
      }
    }
LABEL_73:
    v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
    goto LABEL_74;
  }
  if (v8 <= 899)
  {
    switch(v8)
    {
      case 600:
        v9 = CoreML::Specification::OneHotEncoder::ByteSizeLong(*((CoreML::Specification::OneHotEncoder **)this + 4));
        goto LABEL_73;
      case 601:
        v9 = CoreML::Specification::Imputer::ByteSizeLong(*((CoreML::Specification::Imputer **)this + 4));
        goto LABEL_73;
      case 602:
        v9 = CoreML::Specification::FeatureVectorizer::ByteSizeLong(*((CoreML::Specification::FeatureVectorizer **)this
                                                                    + 4));
        goto LABEL_73;
      case 603:
        v9 = CoreML::Specification::DictVectorizer::ByteSizeLong(*((CoreML::Specification::DictVectorizer **)this + 4));
        goto LABEL_73;
      case 604:
        v9 = CoreML::Specification::Scaler::ByteSizeLong(*((CoreML::Specification::Scaler **)this + 4));
        goto LABEL_73;
      case 605:
      case 608:
        goto LABEL_74;
      case 606:
        v9 = CoreML::Specification::CategoricalMapping::ByteSizeLong(*((CoreML::Specification::CategoricalMapping **)this
                                                                     + 4));
        goto LABEL_73;
      case 607:
        v12 = *((_QWORD *)this + 4);
        v13 = *(_DWORD *)(v12 + 16);
        if (v13)
        {
          if (v13 < 0)
            v14 = 11;
          else
            v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        else
        {
          v14 = 0;
        }
        *(_DWORD *)(v12 + 20) = v14;
        goto LABEL_80;
      case 609:
        v9 = CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(*((CoreML::Specification::ArrayFeatureExtractor **)this
                                                                        + 4));
        goto LABEL_73;
      case 610:
        v9 = CoreML::Specification::NonMaximumSuppression::ByteSizeLong(*((CoreML::Specification::NonMaximumSuppression **)this
                                                                        + 4));
        goto LABEL_73;
      default:
        if (v8 != 560)
          goto LABEL_74;
        v9 = CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(*((CoreML::Specification::ClassConfidenceThresholding **)this
                                                                              + 4));
        break;
    }
    goto LABEL_73;
  }
  switch(v8)
  {
    case 2000:
      v9 = CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(*((CoreML::Specification::CoreMLModels::TextClassifier **)this
                                                                             + 4));
      goto LABEL_73;
    case 2001:
      v9 = CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordTagger **)this
                                                                         + 4));
      goto LABEL_73;
    case 2002:
      v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_73;
    case 2003:
      v15 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v15 + 28) == 20)
      {
        *(_DWORD *)(*(_QWORD *)(v15 + 16) + 16) = 0;
        v14 = 3;
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)(v15 + 24) = v14;
LABEL_80:
      v11 = v7 + v14;
      goto LABEL_81;
    case 2004:
      v9 = CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(*((CoreML::Specification::CoreMLModels::Gazetteer **)this
                                                                        + 4));
      goto LABEL_73;
    case 2005:
      v9 = CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordEmbedding **)this
                                                                            + 4));
      goto LABEL_73;
    case 2006:
      v11 = v7
          + CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::AudioFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_81;
    default:
      if (v8 == 900)
      {
        *(_DWORD *)(*((_QWORD *)this + 4) + 16) = 0;
        v7 += 3;
      }
      else if (v8 == 3000)
      {
        v10 = CoreML::Specification::SerializedModel::ByteSizeLong(*((CoreML::Specification::SerializedModel **)this + 4));
        v11 = v7 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
LABEL_81:
        v7 = v11 + 3;
      }
      break;
  }
LABEL_74:
  *((_DWORD *)this + 10) = v7;
  return v7;
}

uint64_t CoreML::Specification::ModelDescription::ByteSizeLong(CoreML::Specification::ModelDescription *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CoreML::Specification::Metadata *v31;
  uint64_t v32;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 18);
  v11 = v7 + v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *((unsigned int *)this + 24);
  v15 = v11 + 2 * v14;
  if ((_DWORD)v14)
  {
    v16 = 0;
    do
    {
      v17 = CoreML::Specification::FunctionDescription::ByteSizeLong(*(CoreML::Specification::FunctionDescription **)(*((_QWORD *)this + 13) + 8 * v16 + 8));
      v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v16;
    }
    while ((_DWORD)v14 != v16);
  }
  v18 = *((unsigned int *)this + 30);
  v19 = v15 + 2 * v18;
  if ((_DWORD)v18)
  {
    v20 = 0;
    do
    {
      v21 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 16) + 8 * v20 + 8));
      v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v22 = *((_QWORD *)this + 17);
  v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_23;
  }
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v19 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  v25 = *((_QWORD *)this + 18);
  v26 = *(unsigned __int8 *)(v25 + 23);
  if (*(char *)(v25 + 23) < 0)
  {
    if (!*(_QWORD *)(v25 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v25 + 23))
  {
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v19 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  v28 = *((_QWORD *)this + 19);
  v29 = *(unsigned __int8 *)(v28 + 23);
  if (*(char *)(v28 + 23) < 0)
  {
    if (!*(_QWORD *)(v28 + 8))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(v28 + 23))
  {
    goto LABEL_33;
  }
  v30 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v30 = v29;
  v19 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v31 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
    if (v31)
    {
      v32 = CoreML::Specification::Metadata::ByteSizeLong(v31);
      v19 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 42) = v19;
  return v19;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineClassifier::ByteSizeLong(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineRegressor::ByteSizeLong(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

uint64_t CoreML::Specification::SerializedModel::ByteSizeLong(CoreML::Specification::SerializedModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::FeatureDescription::ByteSizeLong(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification::FeatureType *v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = CoreML::Specification::FeatureType::ByteSizeLong(v9);
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CoreML::Specification::FunctionDescription::ByteSizeLong(CoreML::Specification::FunctionDescription *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 18);
  v11 = v7 + v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *((_QWORD *)this + 11);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_17;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_17;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v11 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_17:
  v17 = *((_QWORD *)this + 12);
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(v17 + 23))
  {
    goto LABEL_22;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v11 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_22:
  v20 = *((_QWORD *)this + 13);
  v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(v20 + 8);
  if ((v21 & 0x80u) == 0)
    v22 = v21;
  v11 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_27:
  *((_DWORD *)this + 28) = v11;
  return v11;
}

uint64_t CoreML::Specification::Metadata::ByteSizeLong(CoreML::Specification::Metadata *this)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = *v2;
  google::protobuf::Map<std::string,std::string>::begin(v21, v2);
  v4 = 0;
  v5 = 2 * v3;
  while (v21[0])
  {
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v21[0] + 24), *(_QWORD *)(v21[0] + 24) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v6)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v6;
    }
    v7 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v4);
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v21);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v8 = *((_QWORD *)this + 6);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v11 = *((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v5 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
  v14 = *((_QWORD *)this + 8);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_25;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v5 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_25:
  v17 = *((_QWORD *)this + 9);
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v17 + 23))
  {
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v5 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 20) = v5;
  return v5;
}

void sub_1D3B03978(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::Map<std::string,std::string>::begin(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2[3];
  v3 = a2[1];
  if (v3 <= v2)
  {
    v5 = 0;
  }
  else
  {
    v4 = a2[4];
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * v2);
      if (v5)
        break;
      if (v3 == ++v2)
      {
        v5 = 0;
        v2 = a2[1];
        goto LABEL_9;
      }
    }
    if (v5 == *(_QWORD *)(v4 + 8 * (v2 ^ 1)))
      v5 = *(_QWORD *)(*(_QWORD *)v5 + 32);
  }
LABEL_9:
  *result = v5;
  result[1] = a2;
  result[2] = v2;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566D70;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E95677F0;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95677F0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(result + 24);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  std::string **v7;
  const std::string *v8;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v7 = (std::string **)(a1 + 24);
      if (*(uint64_t **)(a1 + 24) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v8 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v8);
      else
        std::string::operator=(*v7, v8);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

BOOL google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  google::protobuf::Arena **v6;
  char *v7;
  unint64_t TagFallback;
  std::string *v9;
  int v10;
  char *v11;
  std::string *v12;
  _BOOL8 result;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  v6 = (google::protobuf::Arena **)(a1 + 24);
  while (1)
  {
    while (1)
    {
      v7 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        TagFallback = *v7;
        if ((*v7 & 0x80000000) == 0)
        {
          *a2 = v7 + 1;
          goto LABEL_7;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 40) |= 1u;
      v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v9 = *(std::string **)(a1 + 16);
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes(a2, v9);
      if (!result)
        return result;
      v10 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 40) = v10;
      v11 = *a2;
      if (*a2 < a2[1] && *v11 == 18)
      {
        *a2 = v11 + 1;
LABEL_20:
        *(_DWORD *)(a1 + 40) = v10 | 2;
        v12 = *(std::string **)(a1 + 24);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v6, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *(std::string **)(a1 + 24);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes(a2, v12);
        if (!result)
          return result;
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if ((_DWORD)TagFallback == 18)
    {
      v10 = *(_DWORD *)(a1 + 40);
      goto LABEL_20;
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteString(2u, v5, a2);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  const void **v7;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 18;
  return google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v7, v6 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance(google::protobuf::Arena **a1, google::protobuf::Arena **a2, uint64_t a3)
{
  std::string *v6;
  google::protobuf::Arena *v7;

  v6 = (std::string *)operator new();
  v7 = (google::protobuf::Arena *)v6;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *a1 = v7;
  if (a2)
    google::protobuf::Arena::Own<std::string>(a2, v7);
}

void sub_1D3B04188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<std::string>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1D8251A40);
  }
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 24);
}

void sub_1D3B042F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E9566E18;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  }
  return a1;
}

uint64_t google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(uint64_t result)
{
  if ((uint64_t *)result != &google::protobuf::internal::fixed_address_empty_string && result != 0)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1D8251A40);
  }
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t CoreML::Specification::Model::MergePartialFromCodedStream(CoreML::Specification::Model *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unsigned int TagFallback;
  unsigned int v13;
  CoreML::Specification::GLMRegressor *v14;
  CoreML::Specification::OneHotEncoder *v15;
  CoreML::Specification::GLMClassifier *v16;
  CoreML::Specification::CoreMLModels::TextClassifier *v17;
  CoreML::Specification::ModelDescription *v18;
  char *v19;
  int v20;
  CoreML::Specification::ItemSimilarityRecommender *v21;
  CoreML::Specification::PipelineClassifier *v22;
  CoreML::Specification::SerializedModel *v23;
  CoreML::Specification::ClassConfidenceThresholding *v24;
  CoreML::Specification::CustomModel *v25;
  CoreML::Specification::Pipeline *v26;
  char *v27;
  int v28;
  char *v29;
  unint64_t Varint64Fallback;
  CoreML::Specification::Imputer *v31;
  CoreML::Specification::FeatureVectorizer *v32;
  CoreML::Specification::DictVectorizer *v33;
  CoreML::Specification::Scaler *v34;
  CoreML::Specification::CategoricalMapping *v35;
  CoreML::Specification::Normalizer *v36;
  CoreML::Specification::ArrayFeatureExtractor *v37;
  CoreML::Specification::NonMaximumSuppression *v38;
  CoreML::Specification::SupportVectorClassifier *v39;
  CoreML::Specification::TreeEnsembleClassifier *v40;
  CoreML::Specification::NeuralNetworkClassifier *v41;
  CoreML::Specification::KNearestNeighborsClassifier *v42;
  CoreML::Specification::CoreMLModels::WordTagger *v43;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v44;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v45;
  CoreML::Specification::CoreMLModels::Gazetteer *v46;
  CoreML::Specification::CoreMLModels::WordEmbedding *v47;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v48;
  CoreML::Specification::NeuralNetwork *v49;
  CoreML::Specification::Identity *v50;
  char *v51;
  int v52;
  CoreML::Specification::MILSpec::Program *v53;
  CoreML::Specification::LinkedModel *v54;
  CoreML::Specification::SupportVectorRegressor *v55;
  CoreML::Specification::TreeEnsembleRegressor *v56;
  CoreML::Specification::NeuralNetworkRegressor *v57;
  CoreML::Specification::BayesianProbitRegressor *v58;
  CoreML::Specification::PipelineRegressor *v59;
  char *v60;
  int v61;
  char *v62;
  int VarintSizeAsIntFallback;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  int v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  char *v78;
  int v79;
  char *v80;
  int v81;
  char *v82;
  int v83;
  char *v84;
  int v85;
  char *v86;
  int v87;
  char *v88;
  int v89;
  char *v90;
  int v91;
  char *v92;
  int v93;
  char *v94;
  int v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  char *v100;
  int v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  char *v108;
  int v109;
  char *v110;
  int v111;
  char *v112;
  int v113;
  char *v114;
  int v115;
  char *v116;
  int v117;
  char v118;
  int v119;
  unsigned int v120;
  int v121;
  BOOL v122;
  int v123;
  uint64_t result;
  int v125;
  unsigned int v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  char *v132;
  int v133;
  char *v134;
  int v135;
  char *v136;
  int v137;
  char *v138;
  int v139;
  char *v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  CoreML::Specification::Identity *v169;
  unsigned int v170;
  int v171;
  int v172;
  google::protobuf::io::CodedInputStream *v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        v7 = v5 + 1;
        v8 = *v5;
        if ((char)*v5 >= 1)
        {
          *(_QWORD *)a2 = v7;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_8;
          goto LABEL_16;
        }
        if ((unint64_t)v7 < v6)
        {
          v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(_QWORD *)a2 = v5 + 2;
            v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_16;
          }
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x5DC2) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_16:
      v13 = v9 >> 3;
      if (v9 >> 3 <= 0x22B)
        break;
      if (v9 >> 3 <= 0x383)
      {
        switch(v13)
        {
          case 0x258u:
            if (v9 != 194)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 600)
            {
              v15 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 600;
              v15 = (CoreML::Specification::OneHotEncoder *)operator new();
              CoreML::Specification::OneHotEncoder::OneHotEncoder(v15);
              *((_QWORD *)this + 4) = v15;
            }
            v62 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v62 < 0)
            {
              VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v62;
              *(_QWORD *)a2 = v62 + 1;
            }
            v142 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            v144 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v144--, 1);
            *((_DWORD *)a2 + 13) = v144;
            if (v144 < 0 != v122)
              return 0;
            v123 = v142;
            result = CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(v15, a2, v143);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x259u:
            if (v9 != 202)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 601)
            {
              v31 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 601;
              v31 = (CoreML::Specification::Imputer *)operator new();
              CoreML::Specification::Imputer::Imputer(v31);
              *((_QWORD *)this + 4) = v31;
            }
            v64 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v64 < 0)
            {
              v65 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v65 < 0)
                return 0;
            }
            else
            {
              v65 = *v64;
              *(_QWORD *)a2 = v64 + 1;
            }
            v145 = google::protobuf::io::CodedInputStream::PushLimit(a2, v65);
            v147 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v147--, 1);
            *((_DWORD *)a2 + 13) = v147;
            if (v147 < 0 != v122)
              return 0;
            v123 = v145;
            result = CoreML::Specification::Imputer::MergePartialFromCodedStream(v31, a2, v146);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Au:
            if (v9 != 210)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 602)
            {
              v32 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 602;
              v32 = (CoreML::Specification::FeatureVectorizer *)operator new();
              CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v32);
              *((_QWORD *)this + 4) = v32;
            }
            v66 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v66 < 0)
            {
              v67 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v67 < 0)
                return 0;
            }
            else
            {
              v67 = *v66;
              *(_QWORD *)a2 = v66 + 1;
            }
            v148 = google::protobuf::io::CodedInputStream::PushLimit(a2, v67);
            v150 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v150--, 1);
            *((_DWORD *)a2 + 13) = v150;
            if (v150 < 0 != v122)
              return 0;
            v123 = v148;
            result = CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(v32, a2, v149);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Bu:
            if (v9 != 218)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 603)
            {
              v33 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 603;
              v33 = (CoreML::Specification::DictVectorizer *)operator new();
              CoreML::Specification::DictVectorizer::DictVectorizer(v33);
              *((_QWORD *)this + 4) = v33;
            }
            v68 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v68 < 0)
            {
              v69 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v69 < 0)
                return 0;
            }
            else
            {
              v69 = *v68;
              *(_QWORD *)a2 = v68 + 1;
            }
            v151 = google::protobuf::io::CodedInputStream::PushLimit(a2, v69);
            v153 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v153--, 1);
            *((_DWORD *)a2 + 13) = v153;
            if (v153 < 0 != v122)
              return 0;
            v123 = v151;
            result = CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(v33, a2, v152);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Cu:
            if (v9 != 226)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 604)
            {
              v34 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 604;
              v34 = (CoreML::Specification::Scaler *)operator new();
              CoreML::Specification::Scaler::Scaler(v34);
              *((_QWORD *)this + 4) = v34;
            }
            v70 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v70 < 0)
            {
              v71 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v71 < 0)
                return 0;
            }
            else
            {
              v71 = *v70;
              *(_QWORD *)a2 = v70 + 1;
            }
            v154 = google::protobuf::io::CodedInputStream::PushLimit(a2, v71);
            v156 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v156--, 1);
            *((_DWORD *)a2 + 13) = v156;
            if (v156 < 0 != v122)
              return 0;
            v123 = v154;
            result = CoreML::Specification::Scaler::MergePartialFromCodedStream(v34, (char **)a2, v155);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Du:
          case 0x260u:
            goto LABEL_8;
          case 0x25Eu:
            if (v9 != 242)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 606)
            {
              v35 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 606;
              v35 = (CoreML::Specification::CategoricalMapping *)operator new();
              CoreML::Specification::CategoricalMapping::CategoricalMapping(v35);
              *((_QWORD *)this + 4) = v35;
            }
            v72 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v72 < 0)
            {
              v73 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v73 < 0)
                return 0;
            }
            else
            {
              v73 = *v72;
              *(_QWORD *)a2 = v72 + 1;
            }
            v157 = google::protobuf::io::CodedInputStream::PushLimit(a2, v73);
            v159 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v159--, 1);
            *((_DWORD *)a2 + 13) = v159;
            if (v159 < 0 != v122)
              return 0;
            v123 = v157;
            result = CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(v35, a2, v158);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Fu:
            if (v9 != 250)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 607)
            {
              v36 = (CoreML::Specification::Normalizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 607;
              v36 = (CoreML::Specification::Normalizer *)operator new();
              CoreML::Specification::Normalizer::Normalizer(v36);
              *((_QWORD *)this + 4) = v36;
            }
            v74 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v74 < 0)
            {
              v75 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v75 < 0)
                return 0;
            }
            else
            {
              v75 = *v74;
              *(_QWORD *)a2 = v74 + 1;
            }
            v160 = google::protobuf::io::CodedInputStream::PushLimit(a2, v75);
            v162 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v162--, 1);
            *((_DWORD *)a2 + 13) = v162;
            if (v162 < 0 != v122)
              return 0;
            v123 = v160;
            result = CoreML::Specification::Normalizer::MergePartialFromCodedStream(v36, (char **)a2, v161);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x261u:
            if (v9 != 10)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 609)
            {
              v37 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 609;
              v37 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
              CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v37);
              *((_QWORD *)this + 4) = v37;
            }
            v76 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v76 < 0)
            {
              v77 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v77 < 0)
                return 0;
            }
            else
            {
              v77 = *v76;
              *(_QWORD *)a2 = v76 + 1;
            }
            v163 = google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
            v165 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v165--, 1);
            *((_DWORD *)a2 + 13) = v165;
            if (v165 < 0 != v122)
              return 0;
            v123 = v163;
            result = CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(v37, a2, v164);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x262u:
            if (v9 != 18)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 610)
            {
              v38 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 610;
              v38 = (CoreML::Specification::NonMaximumSuppression *)operator new();
              CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v38);
              *((_QWORD *)this + 4) = v38;
            }
            v78 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v78 < 0)
            {
              v79 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v79 < 0)
                return 0;
            }
            else
            {
              v79 = *v78;
              *(_QWORD *)a2 = v78 + 1;
            }
            v166 = google::protobuf::io::CodedInputStream::PushLimit(a2, v79);
            v168 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v168--, 1);
            *((_DWORD *)a2 + 13) = v168;
            if (v168 < 0 != v122)
              return 0;
            v123 = v166;
            result = CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(v38, a2, v167);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          default:
            if (v13 == 556)
            {
              if (v9 != 98)
                goto LABEL_8;
              if (*((_DWORD *)this + 11) == 556)
              {
                v54 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
              }
              else
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 556;
                v54 = (CoreML::Specification::LinkedModel *)operator new();
                CoreML::Specification::LinkedModel::LinkedModel(v54);
                *((_QWORD *)this + 4) = v54;
              }
              v116 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v116 < 0)
              {
                v117 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v117 < 0)
                  return 0;
              }
              else
              {
                v117 = *v116;
                *(_QWORD *)a2 = v116 + 1;
              }
              v230 = google::protobuf::io::CodedInputStream::PushLimit(a2, v117);
              v232 = *((_DWORD *)a2 + 13);
              v122 = __OFSUB__(v232--, 1);
              *((_DWORD *)a2 + 13) = v232;
              if (v232 < 0 != v122)
                return 0;
              v123 = v230;
              result = CoreML::Specification::LinkedModel::MergePartialFromCodedStream(v54, a2, v231);
              if (!(_DWORD)result)
                return result;
            }
            else
            {
              if (v13 != 560 || v9 != 130)
                goto LABEL_8;
              if (*((_DWORD *)this + 11) == 560)
              {
                v24 = (CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)this + 4);
              }
              else
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 560;
                v24 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
                CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v24);
                *((_QWORD *)this + 4) = v24;
              }
              v114 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v114 < 0)
              {
                v115 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v115 < 0)
                  return 0;
              }
              else
              {
                v115 = *v114;
                *(_QWORD *)a2 = v114 + 1;
              }
              v227 = google::protobuf::io::CodedInputStream::PushLimit(a2, v115);
              v229 = *((_DWORD *)a2 + 13);
              v122 = __OFSUB__(v229--, 1);
              *((_DWORD *)a2 + 13) = v229;
              if (v229 < 0 != v122)
                return 0;
              v123 = v227;
              result = CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(v24, a2, v228);
              if (!(_DWORD)result)
                return result;
            }
            break;
        }
        goto LABEL_466;
      }
      switch(v13)
      {
        case 0x7D0u:
          if (v9 != 130)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2000)
          {
            v17 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2000;
            v17 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
            CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v17);
            *((_QWORD *)this + 4) = v17;
          }
          v82 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v82 < 0)
          {
            v83 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v83 < 0)
              return 0;
          }
          else
          {
            v83 = *v82;
            *(_QWORD *)a2 = v82 + 1;
          }
          v178 = google::protobuf::io::CodedInputStream::PushLimit(a2, v83);
          v180 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v180--, 1);
          *((_DWORD *)a2 + 13) = v180;
          if (v180 < 0 != v122)
            return 0;
          v123 = v178;
          result = CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(v17, a2, v179);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D1u:
          if (v9 != 138)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2001)
          {
            v43 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2001;
            v43 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
            CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v43);
            *((_QWORD *)this + 4) = v43;
          }
          v98 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v98 < 0)
          {
            v99 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v99 < 0)
              return 0;
          }
          else
          {
            v99 = *v98;
            *(_QWORD *)a2 = v98 + 1;
          }
          v203 = google::protobuf::io::CodedInputStream::PushLimit(a2, v99);
          v205 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v205--, 1);
          *((_DWORD *)a2 + 13) = v205;
          if (v205 < 0 != v122)
            return 0;
          v123 = v203;
          result = CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(v43, a2, v204);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D2u:
          if (v9 != 146)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2002)
          {
            v44 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2002;
            v44 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
            CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v44);
            *((_QWORD *)this + 4) = v44;
          }
          v100 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v100 < 0)
          {
            v101 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v101 < 0)
              return 0;
          }
          else
          {
            v101 = *v100;
            *(_QWORD *)a2 = v100 + 1;
          }
          v206 = google::protobuf::io::CodedInputStream::PushLimit(a2, v101);
          v208 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v208--, 1);
          *((_DWORD *)a2 + 13) = v208;
          if (v208 < 0 != v122)
            return 0;
          v123 = v206;
          result = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(v44, a2, v207);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D3u:
          if (v9 != 154)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2003)
          {
            v45 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2003;
            v45 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
            CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v45);
            *((_QWORD *)this + 4) = v45;
          }
          v102 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v102 < 0)
          {
            v103 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v103 < 0)
              return 0;
          }
          else
          {
            v103 = *v102;
            *(_QWORD *)a2 = v102 + 1;
          }
          v209 = google::protobuf::io::CodedInputStream::PushLimit(a2, v103);
          v211 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v211--, 1);
          *((_DWORD *)a2 + 13) = v211;
          if (v211 < 0 != v122)
            return 0;
          v123 = v209;
          result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(v45, a2, v210);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D4u:
          if (v9 != 162)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2004)
          {
            v46 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2004;
            v46 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
            CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v46);
            *((_QWORD *)this + 4) = v46;
          }
          v104 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v104 < 0)
          {
            v105 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v105 < 0)
              return 0;
          }
          else
          {
            v105 = *v104;
            *(_QWORD *)a2 = v104 + 1;
          }
          v212 = google::protobuf::io::CodedInputStream::PushLimit(a2, v105);
          v214 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v214--, 1);
          *((_DWORD *)a2 + 13) = v214;
          if (v214 < 0 != v122)
            return 0;
          v123 = v212;
          result = CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(v46, a2, v213);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D5u:
          if (v9 != 170)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2005)
          {
            v47 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2005;
            v47 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
            CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v47);
            *((_QWORD *)this + 4) = v47;
          }
          v106 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v106 < 0)
          {
            v107 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v107 < 0)
              return 0;
          }
          else
          {
            v107 = *v106;
            *(_QWORD *)a2 = v106 + 1;
          }
          v215 = google::protobuf::io::CodedInputStream::PushLimit(a2, v107);
          v217 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v217--, 1);
          *((_DWORD *)a2 + 13) = v217;
          if (v217 < 0 != v122)
            return 0;
          v123 = v215;
          result = CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(v47, a2, v216);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D6u:
          if (v9 != 178)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2006)
          {
            v48 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2006;
            v48 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
            CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v48);
            *((_QWORD *)this + 4) = v48;
          }
          v108 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v108 < 0)
          {
            v109 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v109 < 0)
              return 0;
          }
          else
          {
            v109 = *v108;
            *(_QWORD *)a2 = v108 + 1;
          }
          v218 = google::protobuf::io::CodedInputStream::PushLimit(a2, v109);
          v220 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v220--, 1);
          *((_DWORD *)a2 + 13) = v220;
          if (v220 < 0 != v122)
            return 0;
          v123 = v218;
          result = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(v48, a2, v219);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        default:
          if (v13 == 900)
          {
            if (v9 != 34)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) != 900)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 900;
              v50 = (CoreML::Specification::Identity *)operator new();
              CoreML::Specification::Identity::Identity(v50);
              *((_QWORD *)this + 4) = v50;
            }
            v51 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v51 < 0)
            {
              v52 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v52 < 0)
                return 0;
            }
            else
            {
              v52 = *v51;
              *(_QWORD *)a2 = v51 + 1;
            }
            v169 = (CoreML::Specification::Identity *)google::protobuf::io::CodedInputStream::PushLimit(a2, v52);
            v171 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v171--, 1);
            *((_DWORD *)a2 + 13) = v171;
            if (v171 < 0 != v122)
              return 0;
            v172 = (int)v169;
            result = CoreML::Specification::Identity::MergePartialFromCodedStream(v169, (char **)a2, v170);
            if (!(_DWORD)result)
              return result;
            v173 = a2;
            v174 = v172;
            goto LABEL_467;
          }
          if (v13 != 3000 || v9 != 194)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 3000)
          {
            v23 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v23 = (CoreML::Specification::SerializedModel *)operator new();
            CoreML::Specification::SerializedModel::SerializedModel(v23);
            *((_QWORD *)this + 4) = v23;
          }
          v86 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v86 < 0)
          {
            v87 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v87 < 0)
              return 0;
          }
          else
          {
            v87 = *v86;
            *(_QWORD *)a2 = v86 + 1;
          }
          v184 = google::protobuf::io::CodedInputStream::PushLimit(a2, v87);
          v186 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v186--, 1);
          *((_DWORD *)a2 + 13) = v186;
          if (v186 < 0 != v122)
            return 0;
          v187 = v184;
          result = CoreML::Specification::SerializedModel::MergePartialFromCodedStream(v23, (char **)a2, v185);
          if (!(_DWORD)result)
            return result;
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v187))
            return 0;
          break;
      }
    }
    if (v9 >> 3 > 0x18F)
    {
      if (v9 >> 3 <= 0x1F3)
      {
        switch(v13)
        {
          case 0x190u:
            if (v9 != 130)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 400)
            {
              v16 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 400;
              v16 = (CoreML::Specification::GLMClassifier *)operator new();
              CoreML::Specification::GLMClassifier::GLMClassifier(v16);
              *((_QWORD *)this + 4) = v16;
            }
            v80 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v80 < 0)
            {
              v81 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v81 < 0)
                return 0;
            }
            else
            {
              v81 = *v80;
              *(_QWORD *)a2 = v80 + 1;
            }
            v175 = google::protobuf::io::CodedInputStream::PushLimit(a2, v81);
            v177 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v177--, 1);
            *((_DWORD *)a2 + 13) = v177;
            if (v177 < 0 != v122)
              return 0;
            v123 = v175;
            result = CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(v16, a2, v176);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x191u:
            if (v9 != 138)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 401)
            {
              v39 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 401;
              v39 = (CoreML::Specification::SupportVectorClassifier *)operator new();
              CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v39);
              *((_QWORD *)this + 4) = v39;
            }
            v90 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v90 < 0)
            {
              v91 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v91 < 0)
                return 0;
            }
            else
            {
              v91 = *v90;
              *(_QWORD *)a2 = v90 + 1;
            }
            v191 = google::protobuf::io::CodedInputStream::PushLimit(a2, v91);
            v193 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v193--, 1);
            *((_DWORD *)a2 + 13) = v193;
            if (v193 < 0 != v122)
              return 0;
            v123 = v191;
            result = CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(v39, a2, v192);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x192u:
            if (v9 != 146)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 402)
            {
              v40 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 402;
              v40 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
              CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v40);
              *((_QWORD *)this + 4) = v40;
            }
            v92 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v92 < 0)
            {
              v93 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v93 < 0)
                return 0;
            }
            else
            {
              v93 = *v92;
              *(_QWORD *)a2 = v92 + 1;
            }
            v194 = google::protobuf::io::CodedInputStream::PushLimit(a2, v93);
            v196 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v196--, 1);
            *((_DWORD *)a2 + 13) = v196;
            if (v196 < 0 != v122)
              return 0;
            v123 = v194;
            result = CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(v40, a2, v195);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x193u:
            if (v9 != 154)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 403)
            {
              v41 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 403;
              v41 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
              CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v41);
              *((_QWORD *)this + 4) = v41;
            }
            v94 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v94 < 0)
            {
              v95 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v95 < 0)
                return 0;
            }
            else
            {
              v95 = *v94;
              *(_QWORD *)a2 = v94 + 1;
            }
            v197 = google::protobuf::io::CodedInputStream::PushLimit(a2, v95);
            v199 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v199--, 1);
            *((_DWORD *)a2 + 13) = v199;
            if (v199 < 0 != v122)
              return 0;
            v123 = v197;
            result = CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(v41, a2, v198);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x194u:
            if (v9 != 162)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 404)
            {
              v42 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 404;
              v42 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
              CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v42);
              *((_QWORD *)this + 4) = v42;
            }
            v96 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v96 < 0)
            {
              v97 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v97 < 0)
                return 0;
            }
            else
            {
              v97 = *v96;
              *(_QWORD *)a2 = v96 + 1;
            }
            v200 = google::protobuf::io::CodedInputStream::PushLimit(a2, v97);
            v202 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v202--, 1);
            *((_DWORD *)a2 + 13) = v202;
            if (v202 < 0 != v122)
              return 0;
            v123 = v200;
            result = CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(v42, a2, v201);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          default:
            goto LABEL_8;
        }
      }
      if (v9 >> 3 > 0x1F5)
      {
        if (v13 == 502)
        {
          if (v9 == 178)
          {
            if (*((_DWORD *)this + 11) == 502)
            {
              v53 = (CoreML::Specification::MILSpec::Program *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 502;
              v53 = (CoreML::Specification::MILSpec::Program *)operator new();
              CoreML::Specification::MILSpec::Program::Program(v53);
              *((_QWORD *)this + 4) = v53;
            }
            v112 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v112 < 0)
            {
              v113 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v113 < 0)
                return 0;
            }
            else
            {
              v113 = *v112;
              *(_QWORD *)a2 = v112 + 1;
            }
            v224 = google::protobuf::io::CodedInputStream::PushLimit(a2, v113);
            v226 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v226--, 1);
            *((_DWORD *)a2 + 13) = v226;
            if (v226 < 0 != v122)
              return 0;
            v123 = v224;
            result = CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(v53, a2, v225);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          }
        }
        else if (v13 == 555 && v9 == 90)
        {
          if (*((_DWORD *)this + 11) == 555)
          {
            v25 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 555;
            v25 = (CoreML::Specification::CustomModel *)operator new();
            CoreML::Specification::CustomModel::CustomModel(v25);
            *((_QWORD *)this + 4) = v25;
          }
          v88 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v88 < 0)
          {
            v89 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v89 < 0)
              return 0;
          }
          else
          {
            v89 = *v88;
            *(_QWORD *)a2 = v88 + 1;
          }
          v188 = google::protobuf::io::CodedInputStream::PushLimit(a2, v89);
          v190 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v190--, 1);
          *((_DWORD *)a2 + 13) = v190;
          if (v190 < 0 != v122)
            return 0;
          v123 = v188;
          result = CoreML::Specification::CustomModel::MergePartialFromCodedStream(v25, a2, v189);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
      }
      else if (v13 == 500)
      {
        if (v9 == 162)
        {
          if (*((_DWORD *)this + 11) == 500)
          {
            v49 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 500;
            v49 = (CoreML::Specification::NeuralNetwork *)operator new();
            CoreML::Specification::NeuralNetwork::NeuralNetwork(v49);
            *((_QWORD *)this + 4) = v49;
          }
          v110 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v110 < 0)
          {
            v111 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v111 < 0)
              return 0;
          }
          else
          {
            v111 = *v110;
            *(_QWORD *)a2 = v110 + 1;
          }
          v221 = google::protobuf::io::CodedInputStream::PushLimit(a2, v111);
          v223 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v223--, 1);
          *((_DWORD *)a2 + 13) = v223;
          if (v223 < 0 != v122)
            return 0;
          v123 = v221;
          result = CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(v49, a2, v222);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
      }
      else if (v9 == 170)
      {
        if (*((_DWORD *)this + 11) == 501)
        {
          v21 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          v21 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
          CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v21);
          *((_QWORD *)this + 4) = v21;
        }
        v84 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v84 < 0)
        {
          v85 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v85 < 0)
            return 0;
        }
        else
        {
          v85 = *v84;
          *(_QWORD *)a2 = v84 + 1;
        }
        v181 = google::protobuf::io::CodedInputStream::PushLimit(a2, v85);
        v183 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v183--, 1);
        *((_DWORD *)a2 + 13) = v183;
        if (v183 < 0 != v122)
          return 0;
        v123 = v181;
        result = CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(v21, a2, v182);
        if (!(_DWORD)result)
          return result;
        goto LABEL_466;
      }
      goto LABEL_8;
    }
    if (v9 >> 3 > 0xC8)
      break;
    if (v9 >> 3 > 9)
    {
      if (v13 == 10)
      {
        if (v9 != 80)
          goto LABEL_8;
        v29 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v118 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        *((_BYTE *)this + 28) = Varint64Fallback != 0;
      }
      else
      {
        if (v13 == 200 && v9 == 66)
        {
          if (*((_DWORD *)this + 11) == 200)
          {
            v22 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            v22 = (CoreML::Specification::PipelineClassifier *)operator new();
            CoreML::Specification::PipelineClassifier::PipelineClassifier(v22);
            *((_QWORD *)this + 4) = v22;
          }
          v60 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v60 < 0)
          {
            v61 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v61 < 0)
              return 0;
          }
          else
          {
            v61 = *v60;
            *(_QWORD *)a2 = v60 + 1;
          }
          v125 = google::protobuf::io::CodedInputStream::PushLimit(a2, v61);
          v127 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v127--, 1);
          *((_DWORD *)a2 + 13) = v127;
          if (v127 < 0 != v122)
            return 0;
          v123 = v125;
          result = CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(v22, a2, v126);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
LABEL_8:
        if ((_DWORD)v9)
          v11 = (v9 & 7) == 4;
        else
          v11 = 1;
        if (v11)
          return 1;
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
      }
    }
    else if (v13 == 1)
    {
      if (v9 != 8)
        goto LABEL_8;
      v27 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v28 = 0;
      }
      else
      {
        v28 = *v27;
        if ((*v27 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v27 + 1;
          goto LABEL_471;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
      v28 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_471:
      *((_DWORD *)this + 6) = v28;
    }
    else
    {
      if (v13 != 2 || v9 != 18)
        goto LABEL_8;
      v18 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
      if (!v18)
      {
        v18 = (CoreML::Specification::ModelDescription *)operator new();
        CoreML::Specification::ModelDescription::ModelDescription(v18);
        *((_QWORD *)this + 2) = v18;
      }
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      v119 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      v121 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v121--, 1);
      *((_DWORD *)a2 + 13) = v121;
      if (v121 < 0 != v122)
        return 0;
      v123 = v119;
      result = CoreML::Specification::ModelDescription::MergePartialFromCodedStream(v18, a2, v120);
      if (!(_DWORD)result)
        return result;
LABEL_466:
      v173 = a2;
      v174 = v123;
LABEL_467:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v173, v174))
        return 0;
    }
  }
  switch(v13)
  {
    case 0x12Cu:
      if (v9 != 98)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 300)
      {
        v14 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 300;
        v14 = (CoreML::Specification::GLMRegressor *)operator new();
        CoreML::Specification::GLMRegressor::GLMRegressor(v14);
        *((_QWORD *)this + 4) = v14;
      }
      v128 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v128 < 0)
      {
        v129 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v129 < 0)
          return 0;
      }
      else
      {
        v129 = *v128;
        *(_QWORD *)a2 = v128 + 1;
      }
      v242 = google::protobuf::io::CodedInputStream::PushLimit(a2, v129);
      v244 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v244--, 1);
      *((_DWORD *)a2 + 13) = v244;
      if (v244 < 0 != v122)
        return 0;
      v123 = v242;
      result = CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(v14, a2, v243);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Du:
      if (v9 != 106)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 301)
      {
        v55 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 301;
        v55 = (CoreML::Specification::SupportVectorRegressor *)operator new();
        CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v55);
        *((_QWORD *)this + 4) = v55;
      }
      v132 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v132 < 0)
      {
        v133 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v133 < 0)
          return 0;
      }
      else
      {
        v133 = *v132;
        *(_QWORD *)a2 = v132 + 1;
      }
      v247 = google::protobuf::io::CodedInputStream::PushLimit(a2, v133);
      v249 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v249--, 1);
      *((_DWORD *)a2 + 13) = v249;
      if (v249 < 0 != v122)
        return 0;
      v123 = v247;
      result = CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(v55, a2, v248);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Eu:
      if (v9 != 114)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 302)
      {
        v56 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 302;
        v56 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
        CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v56);
        *((_QWORD *)this + 4) = v56;
      }
      v134 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v134 < 0)
      {
        v135 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v135 < 0)
          return 0;
      }
      else
      {
        v135 = *v134;
        *(_QWORD *)a2 = v134 + 1;
      }
      v233 = google::protobuf::io::CodedInputStream::PushLimit(a2, v135);
      v235 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v235--, 1);
      *((_DWORD *)a2 + 13) = v235;
      if (v235 < 0 != v122)
        return 0;
      v123 = v233;
      result = CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(v56, a2, v234);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Fu:
      if (v9 != 122)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 303)
      {
        v57 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 303;
        v57 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
        CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v57);
        *((_QWORD *)this + 4) = v57;
      }
      v136 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v136 < 0)
      {
        v137 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v137 < 0)
          return 0;
      }
      else
      {
        v137 = *v136;
        *(_QWORD *)a2 = v136 + 1;
      }
      v250 = google::protobuf::io::CodedInputStream::PushLimit(a2, v137);
      v252 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v252--, 1);
      *((_DWORD *)a2 + 13) = v252;
      if (v252 < 0 != v122)
        return 0;
      v123 = v250;
      result = CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(v57, a2, v251);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x130u:
      if (v9 != 130)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 304)
      {
        v58 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 304;
        v58 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
        CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v58);
        *((_QWORD *)this + 4) = v58;
      }
      v138 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v138 < 0)
      {
        v139 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v139 < 0)
          return 0;
      }
      else
      {
        v139 = *v138;
        *(_QWORD *)a2 = v138 + 1;
      }
      v236 = google::protobuf::io::CodedInputStream::PushLimit(a2, v139);
      v238 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v238--, 1);
      *((_DWORD *)a2 + 13) = v238;
      if (v238 < 0 != v122)
        return 0;
      v123 = v236;
      result = CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(v58, a2, v237);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    default:
      if (v13 == 201)
      {
        if (v9 != 74)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 201)
        {
          v59 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 201;
          v59 = (CoreML::Specification::PipelineRegressor *)operator new();
          CoreML::Specification::PipelineRegressor::PipelineRegressor(v59);
          *((_QWORD *)this + 4) = v59;
        }
        v140 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v140 < 0)
        {
          v141 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v141 < 0)
            return 0;
        }
        else
        {
          v141 = *v140;
          *(_QWORD *)a2 = v140 + 1;
        }
        v239 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        v241 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v241--, 1);
        *((_DWORD *)a2 + 13) = v241;
        if (v241 < 0 != v122)
          return 0;
        v123 = v239;
        result = CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(v59, a2, v240);
        if ((_DWORD)result)
          goto LABEL_466;
      }
      else
      {
        if (v13 != 202 || v9 != 82)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 202)
        {
          v26 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v26 = (CoreML::Specification::Pipeline *)operator new();
          CoreML::Specification::Pipeline::Pipeline(v26);
          *((_QWORD *)this + 4) = v26;
        }
        v130 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v130 < 0)
        {
          v131 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v131 < 0)
            return 0;
        }
        else
        {
          v131 = *v130;
          *(_QWORD *)a2 = v130 + 1;
        }
        v245 = google::protobuf::io::CodedInputStream::PushLimit(a2, v131);
        v246 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v246--, 1);
        *((_DWORD *)a2 + 13) = v246;
        if (v246 < 0 != v122)
          return 0;
        v123 = v245;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v26, a2);
        if ((_DWORD)result)
          goto LABEL_466;
      }
      break;
  }
  return result;
}

void sub_1D3B061FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E955D250;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  return this;
}

void sub_1D3B06528(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::MergePartialFromCodedStream(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  char *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int TagFallback;
  unsigned int v17;
  uint64_t v18;
  CoreML::Specification::Metadata *v19;
  char *v20;
  int v21;
  std::string *v23;
  uint64_t result;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  int *v28;
  int v29;
  int v30;
  CoreML::Specification::FunctionDescription *Aligned;
  std::string *v32;
  CoreML::Specification::FeatureDescription *v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  const char *v41;
  int v42;
  unsigned int v43;
  int v44;
  google::protobuf::Arena *v45;
  google::protobuf::Arena **v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int VarintSizeAsIntFallback;
  int v53;
  unsigned int v54;
  int v55;
  char *v56;
  google::protobuf::internal::RepeatedPtrFieldBase *v57;
  char *v58;
  char *v59;

  v5 = (std::string **)((char *)this + 152);
  v57 = (CoreML::Specification::ModelDescription *)((char *)this + 88);
  v58 = (char *)this + 112;
  v59 = (char *)this + 64;
  v6 = (std::string **)((char *)this + 144);
  v7 = (std::string **)((char *)this + 136);
  v8 = (char *)this + 40;
  v56 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int8 **)a2;
      v10 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v10)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        v11 = v9 + 1;
        v12 = *v9;
        if ((char)*v9 >= 1)
        {
          *(_QWORD *)a2 = v11;
          v13 = v12 | 0x100000000;
          if ((v13 & 0x100000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
        if ((unint64_t)v11 < v10)
        {
          v14 = *v11;
          if ((v12 & ~v14) >= 0x80)
          {
            *(_QWORD *)a2 = v9 + 2;
            v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
            goto LABEL_17;
          }
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
      v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v13 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      v17 = v13 >> 3;
      if (v13 >> 3 <= 0x31)
      {
        switch(v17)
        {
          case 0xAu:
            if (v13 != 82)
              goto LABEL_9;
            v18 = (uint64_t)v8;
            goto LABEL_61;
          case 0xBu:
            if (v13 != 90)
              goto LABEL_9;
            v23 = *v7;
            if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v23 = *v7;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v23);
            if (!(_DWORD)result)
              return result;
            v25 = *v7;
            if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v7)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.predictedFeatureName";
            goto LABEL_75;
          case 0xCu:
            if (v13 != 98)
              goto LABEL_9;
            v27 = *v6;
            if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v27 = *v6;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v27);
            if (!(_DWORD)result)
              return result;
            v25 = *v6;
            if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v6)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.predictedProbabilitiesName";
            goto LABEL_75;
          case 0xDu:
            if (v13 != 106)
              goto LABEL_9;
            v18 = (uint64_t)v59;
            goto LABEL_61;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
            goto LABEL_9;
          case 0x14u:
            if (v13 != 162)
              goto LABEL_9;
            v28 = (int *)*((_QWORD *)this + 13);
            if (!v28)
            {
              v29 = *((_DWORD *)this + 24);
              v30 = *((_DWORD *)this + 25);
LABEL_82:
              if (v29 <= v30)
              {
                google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v57, v30 - v29 + 1);
                v28 = (int *)*((_QWORD *)this + 13);
              }
              v30 = *v28;
              goto LABEL_85;
            }
            v29 = *((_DWORD *)this + 24);
            v30 = *v28;
            if (v29 < *v28)
            {
              *((_DWORD *)this + 24) = v29 + 1;
              Aligned = *(CoreML::Specification::FunctionDescription **)&v28[2 * v29 + 2];
              goto LABEL_91;
            }
            if (v30 == *((_DWORD *)this + 25))
              goto LABEL_82;
LABEL_85:
            *v28 = v30 + 1;
            v45 = *(google::protobuf::Arena **)v57;
            if (*(_QWORD *)v57)
            {
              CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
              v46 = google::protobuf::Arena::AllocateAligned(v45, 0, 24);
              *v46 = Aligned;
              v46[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
              v47 = (unint64_t *)((char *)v45 + 32);
              do
                v48 = __ldxr(v47);
              while (__stxr((unint64_t)v46, v47));
              v46[2] = (google::protobuf::Arena *)v48;
            }
            else
            {
              Aligned = (CoreML::Specification::FunctionDescription *)operator new();
              CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
            }
            v49 = *((_QWORD *)this + 13);
            v50 = *((int *)this + 24);
            *((_DWORD *)this + 24) = v50 + 1;
            *(_QWORD *)(v49 + 8 * v50 + 8) = Aligned;
LABEL_91:
            v51 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v51 < 0)
            {
              VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v51;
              *(_QWORD *)a2 = v51 + 1;
            }
            v53 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            v55 = *((_DWORD *)a2 + 13);
            v39 = __OFSUB__(v55--, 1);
            *((_DWORD *)a2 + 13) = v55;
            if (v55 < 0 != v39)
              return 0;
            v40 = v53;
            result = CoreML::Specification::FunctionDescription::MergePartialFromCodedStream(Aligned, a2, v54);
            if (!(_DWORD)result)
              return result;
            break;
          case 0x15u:
            if (v13 != 170)
              goto LABEL_9;
            v32 = *v5;
            if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v32 = *v5;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v32);
            if (!(_DWORD)result)
              return result;
            v25 = *v5;
            if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v5)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.defaultFunctionName";
LABEL_75:
            if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v25, size, 0, (uint64_t)v41))return 0;
            continue;
          default:
            if (v17 != 1 || v13 != 10)
              goto LABEL_9;
            v18 = (uint64_t)v56;
            goto LABEL_61;
        }
        goto LABEL_97;
      }
      if (v17 == 50)
        break;
      if (v17 != 100 || v13 != 34)
        goto LABEL_9;
      v19 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
      if (!v19)
      {
        v19 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v19);
        *((_QWORD *)this + 20) = v19;
      }
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          return 0;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v42 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      v44 = *((_DWORD *)a2 + 13);
      v39 = __OFSUB__(v44--, 1);
      *((_DWORD *)a2 + 13) = v44;
      if (v44 < 0 != v39)
        return 0;
      v40 = v42;
      result = CoreML::Specification::Metadata::MergePartialFromCodedStream(v19, a2, v43);
      if (!(_DWORD)result)
        return result;
LABEL_97:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v40))
        return 0;
    }
    if (v13 == 146)
    {
      v18 = (uint64_t)v58;
LABEL_61:
      v33 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v18);
      v34 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
      {
        v35 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v35 < 0)
          return 0;
      }
      else
      {
        v35 = *v34;
        *(_QWORD *)a2 = v34 + 1;
      }
      v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v35);
      v38 = *((_DWORD *)a2 + 13);
      v39 = __OFSUB__(v38--, 1);
      *((_DWORD *)a2 + 13) = v38;
      if (v38 < 0 != v39)
        return 0;
      v40 = v36;
      result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v33, a2, v37);
      if (!(_DWORD)result)
        return result;
      goto LABEL_97;
    }
LABEL_9:
    if (!(_DWORD)v13 || (v13 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B06AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::clear_Type(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 > 559)
  {
    if (v2 > 899)
    {
      switch(v2)
      {
        case 2000:
        case 2001:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
          goto LABEL_10;
        default:
          if (v2 == 900 || v2 == 3000)
            goto LABEL_10;
          break;
      }
    }
    else
    {
      switch(v2)
      {
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 606:
        case 607:
        case 609:
        case 610:
          goto LABEL_10;
        case 605:
        case 608:
          goto LABEL_12;
        default:
          if (v2 == 560)
            goto LABEL_10;
          break;
      }
    }
    goto LABEL_12;
  }
  if (v2 > 399)
  {
    if (v2 <= 499)
    {
      switch(v2)
      {
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
          goto LABEL_10;
        default:
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    if (v2 > 502 && v2 != 555 && v2 != 556)
      goto LABEL_12;
LABEL_10:
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    goto LABEL_12;
  }
  if (v2 <= 299)
  {
    if (v2 != 200 && v2 != 201 && v2 != 202)
      goto LABEL_12;
    goto LABEL_10;
  }
  switch(v2)
  {
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
      goto LABEL_10;
    default:
      break;
  }
LABEL_12:
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(_QWORD *)this = &off_1E955E718;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B06CF4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(CoreML::Specification::PipelineClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B06E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(_QWORD *)this = &off_1E955DD98;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B06ED4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(CoreML::Specification::PipelineRegressor *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B07040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E95660D0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (this != (CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1D3B070D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(_QWORD *)this = &off_1E955C670;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B07150(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SerializedModel::MergePartialFromCodedStream(CoreML::Specification::SerializedModel *this, char **a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  unsigned int *v13;
  std::string::size_type size;
  std::string *v15;

  v4 = (std::string **)((char *)this + 24);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_24;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_24;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_24;
        v15 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v4;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes(a2, v15))
          return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.SerializedModel.identifier"))return 0;
    }
LABEL_24:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

unint64_t *CoreML::Specification::protobuf_Model_2eproto::InitDefaults(CoreML::Specification::protobuf_Model_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Model_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  v2 = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)inited);
  v3 = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *)v2);
  v4 = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *)v3);
  v5 = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *)v4);
  v6 = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *)v5);
  v7 = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *)v6);
  v8 = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults((CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *)v7);
  v9 = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *)v8);
  v10 = CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults((CoreML::Specification::protobuf_CategoricalMapping_2eproto *)v9);
  v11 = CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults((CoreML::Specification::protobuf_CustomModel_2eproto *)v10);
  v12 = CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_DictVectorizer_2eproto *)v11);
  v13 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v12);
  v14 = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)v13);
  v15 = CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMRegressor_2eproto *)v14);
  v16 = CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMClassifier_2eproto *)v15);
  v17 = CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults((CoreML::Specification::protobuf_NearestNeighbors_2eproto *)v16);
  v18 = CoreML::Specification::protobuf_Identity_2eproto::InitDefaults((CoreML::Specification::protobuf_Identity_2eproto *)v17);
  v19 = CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)v18);
  v20 = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v19);
  v21 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
  v22 = CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults((CoreML::Specification::protobuf_Normalizer_2eproto *)v21);
  v23 = CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults((CoreML::Specification::protobuf_OneHotEncoder_2eproto *)v22);
  v24 = CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults((CoreML::Specification::protobuf_Scaler_2eproto *)v23);
  v25 = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults((CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *)v24);
  v26 = CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)v25);
  v27 = CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults((CoreML::Specification::protobuf_TreeEnsemble_2eproto *)v26);
  v28 = CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v27);
  v29 = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults((CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *)v28);
  v30 = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)v29);
  v31 = CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)v30);
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults((CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *)v31);
  CoreML::Specification::_Pipeline_default_instance_ = (uint64_t)&off_1E95660D0;
  unk_1EDB8F678 = 0u;
  unk_1EDB8F688 = 0u;
  unk_1EDB8F698 = 0u;
  unk_1EDB8F6A4 = 0u;
  byte_1EDB8F6B8 = 1;
  qword_1EDB91338 = 0;
  qword_1EDB91340 = 0;
  CoreML::Specification::_PipelineClassifier_default_instance_ = (uint64_t)&off_1E955E718;
  dword_1EDB91348 = 0;
  byte_1EDB91350 = 1;
  qword_1EDB90B10 = 0;
  qword_1EDB90B18 = 0;
  CoreML::Specification::_PipelineRegressor_default_instance_ = (uint64_t)&off_1E955DD98;
  dword_1EDB90B20 = 0;
  byte_1EDB90B28 = 1;
  qword_1EDB92AD0 = 0;
  unk_1EDB92AD8 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EDB92AE0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB92AE8 = 0;
  dword_1EDB92AF0 = 0;
  CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_ = (uint64_t)&off_1E95677F0;
  byte_1EDB92AF8 = 1;
  v32 = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_);
  *(_BYTE *)(v32 + 88) = 1;
  CoreML::Specification::_ModelDescription_default_instance_ = (uint64_t)&off_1E955D250;
  result = 0.0;
  unk_1EDB906E8 = 0u;
  unk_1EDB906F8 = 0u;
  unk_1EDB90708 = 0u;
  unk_1EDB90718 = 0u;
  unk_1EDB90728 = 0u;
  unk_1EDB90738 = 0u;
  unk_1EDB90748 = 0u;
  unk_1EDB90758 = 0u;
  qword_1EDB90768 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB90770 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB90788 = 0;
  byte_1EDB90790 = 1;
  CoreML::Specification::_SerializedModel_default_instance_ = (uint64_t)&off_1E955C670;
  unk_1EDB902A0 = 0;
  qword_1EDB902A8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB902B0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB902B8 = 0;
  byte_1EDB902C0 = 1;
  qword_1EDB91340 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1EDB90B18 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1EDB92AD0 = (uint64_t)&CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_;
  qword_1EDB90778 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB90780 = v32;
  return result;
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this)
{
  CoreML::Specification::protobuf_Model_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9566038;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_Model_2eproto *)google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_1D3B07568(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Model::~Model(CoreML::Specification::Model *this)
{
  CoreML::Specification::Model::~Model(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9564A40;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 11))
    CoreML::Specification::Model::clear_Type((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Model::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Model");
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::New(this, 0);
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Model *v3;

  v3 = (CoreML::Specification::Model *)operator new();
  CoreML::Specification::Model::Model(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Model>(a2, v3);
  return v3;
}

void sub_1D3B0761C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::Clear(CoreML::Specification::Model *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)((char *)v3 + 5) = 0;
  *v3 = 0;
  return CoreML::Specification::Model::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::Model::IsInitialized(CoreML::Specification::Model *this)
{
  return 1;
}

uint64_t CoreML::Specification::Model::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  int v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  if ((_UNKNOWN *)v5 != &CoreML::Specification::_Model_default_instance_)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  if (*(_BYTE *)(v5 + 28))
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  v8 = *(_DWORD *)(v5 + 44);
  if (v8 == 200)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 201)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC9, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 202)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xCA, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 300)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 301)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12D, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 302)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 303)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 304)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x130, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 400)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x190, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 401)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x191, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 402)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x192, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 403)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x193, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 404)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x194, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 500)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 501)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 502)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 555)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 556)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 560)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x230, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 600)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x258, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 601)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x259, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 602)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25A, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 603)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 604)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 606)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 607)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 609)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x261, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 610)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x262, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 900)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x384, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2000)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D0, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2001)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D1, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2002)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D2, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2003)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D3, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2004)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2005)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2006)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 3000)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xBB8, *(_QWORD *)(v5 + 32), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Model::GetCachedSize(CoreML::Specification::Model *this)
{
  return *((unsigned int *)this + 10);
}

void CoreML::Specification::Model::MergeFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  const CoreML::Specification::ModelDescription *v5;
  CoreML::Specification::ModelDescription *v7;
  const CoreML::Specification::ModelDescription *v8;
  int v9;
  int v10;
  CoreML::Specification::OneHotEncoder *v11;
  CoreML::Specification::GLMClassifier *v12;
  CoreML::Specification::CoreMLModels::TextClassifier *v13;
  CoreML::Specification::GLMRegressor *v14;
  CoreML::Specification::LinkedModel *v15;
  CoreML::Specification::Pipeline *v16;
  CoreML::Specification::SerializedModel *v17;
  CoreML::Specification::ItemSimilarityRecommender *v18;
  CoreML::Specification::ClassConfidenceThresholding *v19;
  CoreML::Specification::Imputer *v20;
  CoreML::Specification::FeatureVectorizer *v21;
  CoreML::Specification::DictVectorizer *v22;
  CoreML::Specification::Scaler *v23;
  CoreML::Specification::CategoricalMapping *v24;
  uint64_t v25;
  CoreML::Specification::ArrayFeatureExtractor *v26;
  CoreML::Specification::NonMaximumSuppression *v27;
  CoreML::Specification::SupportVectorClassifier *v28;
  CoreML::Specification::TreeEnsembleClassifier *v29;
  CoreML::Specification::NeuralNetworkClassifier *v30;
  CoreML::Specification::KNearestNeighborsClassifier *v31;
  CoreML::Specification::CoreMLModels::WordTagger *v32;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v33;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v34;
  CoreML::Specification::CoreMLModels::Gazetteer *v35;
  CoreML::Specification::CoreMLModels::WordEmbedding *v36;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v37;
  CoreML::Specification::SupportVectorRegressor *v38;
  CoreML::Specification::TreeEnsembleRegressor *v39;
  CoreML::Specification::NeuralNetworkRegressor *v40;
  CoreML::Specification::BayesianProbitRegressor *v41;
  CoreML::Specification::MILSpec::Program *v42;
  CoreML::Specification::CustomModel *v43;
  CoreML::Specification::PipelineClassifier *v44;
  CoreML::Specification::PipelineRegressor *v45;
  uint64_t *v46;
  CoreML::Specification::NeuralNetwork *v47;
  CoreML::Specification::OneHotEncoder *v48;
  const CoreML::Specification::OneHotEncoder *v49;
  CoreML::Specification::Imputer *v50;
  const CoreML::Specification::Imputer *v51;
  CoreML::Specification::FeatureVectorizer *v52;
  const CoreML::Specification::FeatureVectorizer *v53;
  CoreML::Specification::DictVectorizer *v54;
  const CoreML::Specification::DictVectorizer *v55;
  CoreML::Specification::Scaler *v56;
  const CoreML::Specification::Scaler *v57;
  CoreML::Specification::CategoricalMapping *v58;
  const CoreML::Specification::CategoricalMapping *v59;
  CoreML::Specification::Normalizer *v60;
  uint64_t *v61;
  CoreML::Specification::ArrayFeatureExtractor *v62;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v63;
  CoreML::Specification::NonMaximumSuppression *v64;
  const CoreML::Specification::NonMaximumSuppression *v65;
  CoreML::Specification::GLMClassifier *v66;
  const CoreML::Specification::GLMClassifier *v67;
  CoreML::Specification::CoreMLModels::TextClassifier *v68;
  const CoreML::Specification::CoreMLModels::TextClassifier *v69;
  CoreML::Specification::GLMRegressor *v70;
  const CoreML::Specification::GLMRegressor *v71;
  CoreML::Specification::LinkedModel *v72;
  const CoreML::Specification::LinkedModel *v73;
  CoreML::Specification::Pipeline *v74;
  const CoreML::Specification::Pipeline *v75;
  CoreML::Specification::SerializedModel *v76;
  const CoreML::Specification::SerializedModel *v77;
  CoreML::Specification::ItemSimilarityRecommender *v78;
  const CoreML::Specification::ItemSimilarityRecommender *v79;
  CoreML::Specification::SupportVectorClassifier *v80;
  const CoreML::Specification::SupportVectorClassifier *v81;
  CoreML::Specification::TreeEnsembleClassifier *v82;
  const CoreML::Specification::TreeEnsembleClassifier *v83;
  CoreML::Specification::NeuralNetworkClassifier *v84;
  const CoreML::Specification::NeuralNetworkClassifier *v85;
  CoreML::Specification::KNearestNeighborsClassifier *v86;
  const CoreML::Specification::KNearestNeighborsClassifier *v87;
  CoreML::Specification::CoreMLModels::WordTagger *v88;
  const CoreML::Specification::CoreMLModels::WordTagger *v89;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v90;
  const CoreML::Specification::CoreMLModels::VisionFeaturePrint *v91;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v92;
  const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v93;
  CoreML::Specification::CoreMLModels::Gazetteer *v94;
  const CoreML::Specification::CoreMLModels::Gazetteer *v95;
  CoreML::Specification::CoreMLModels::WordEmbedding *v96;
  const CoreML::Specification::CoreMLModels::WordEmbedding *v97;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v98;
  const CoreML::Specification::CoreMLModels::AudioFeaturePrint *v99;
  CoreML::Specification::SupportVectorRegressor *v100;
  const CoreML::Specification::SupportVectorRegressor *v101;
  CoreML::Specification::TreeEnsembleRegressor *v102;
  const CoreML::Specification::TreeEnsembleRegressor *v103;
  CoreML::Specification::NeuralNetworkRegressor *v104;
  const CoreML::Specification::NeuralNetworkRegressor *v105;
  CoreML::Specification::BayesianProbitRegressor *v106;
  const CoreML::Specification::BayesianProbitRegressor *v107;
  CoreML::Specification::MILSpec::Program *v108;
  const CoreML::Specification::MILSpec::Program *v109;
  CoreML::Specification::CustomModel *v110;
  const CoreML::Specification::CustomModel *v111;
  CoreML::Specification::PipelineClassifier *v112;
  const CoreML::Specification::PipelineClassifier *v113;
  CoreML::Specification::PipelineRegressor *v114;
  const CoreML::Specification::PipelineRegressor *v115;
  CoreML::Specification::Identity *v116;
  uint64_t *v117;
  CoreML::Specification::NeuralNetwork *v118;
  const CoreML::Specification::NeuralNetwork *v119;
  CoreML::Specification::ClassConfidenceThresholding *v120;
  const CoreML::Specification::ClassConfidenceThresholding *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_ && v5 != 0)
  {
    v7 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::ModelDescription *)operator new();
      CoreML::Specification::ModelDescription::ModelDescription(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::Specification::ModelDescription::MergeFrom(v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    *((_DWORD *)this + 6) = v9;
  if (*((_BYTE *)a2 + 28))
    *((_BYTE *)this + 28) = 1;
  v10 = *((_DWORD *)a2 + 11);
  if (v10 > 559)
  {
    if (v10 <= 899)
    {
      switch(v10)
      {
        case 600:
          if (*((_DWORD *)this + 11) == 600)
          {
            v11 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 600;
            v11 = (CoreML::Specification::OneHotEncoder *)operator new();
            v48 = CoreML::Specification::OneHotEncoder::OneHotEncoder(v11);
            *((_QWORD *)this + 4) = v11;
            if (*((_DWORD *)a2 + 11) != 600)
            {
              CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(v48);
              v49 = (const CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_;
              goto LABEL_186;
            }
          }
          v49 = (const CoreML::Specification::OneHotEncoder *)*((_QWORD *)a2 + 4);
LABEL_186:
          CoreML::Specification::OneHotEncoder::MergeFrom((std::string *)v11, v49);
          return;
        case 601:
          if (*((_DWORD *)this + 11) == 601)
          {
            v20 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
LABEL_114:
            v51 = (const CoreML::Specification::Imputer *)*((_QWORD *)a2 + 4);
            goto LABEL_188;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 601;
          v20 = (CoreML::Specification::Imputer *)operator new();
          v50 = CoreML::Specification::Imputer::Imputer(v20);
          *((_QWORD *)this + 4) = v20;
          if (*((_DWORD *)a2 + 11) == 601)
            goto LABEL_114;
          CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v50);
          v51 = (const CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_;
LABEL_188:
          CoreML::Specification::Imputer::MergeFrom(v20, v51);
          return;
        case 602:
          if (*((_DWORD *)this + 11) == 602)
          {
            v21 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
LABEL_116:
            v53 = (const CoreML::Specification::FeatureVectorizer *)*((_QWORD *)a2 + 4);
            goto LABEL_190;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 602;
          v21 = (CoreML::Specification::FeatureVectorizer *)operator new();
          v52 = CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v21);
          *((_QWORD *)this + 4) = v21;
          if (*((_DWORD *)a2 + 11) == 602)
            goto LABEL_116;
          CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(v52);
          v53 = (const CoreML::Specification::FeatureVectorizer *)&CoreML::Specification::_FeatureVectorizer_default_instance_;
LABEL_190:
          CoreML::Specification::FeatureVectorizer::MergeFrom(v21, v53);
          return;
        case 603:
          if (*((_DWORD *)this + 11) == 603)
          {
            v22 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
LABEL_118:
            v55 = (const CoreML::Specification::DictVectorizer *)*((_QWORD *)a2 + 4);
            goto LABEL_192;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 603;
          v22 = (CoreML::Specification::DictVectorizer *)operator new();
          v54 = CoreML::Specification::DictVectorizer::DictVectorizer(v22);
          *((_QWORD *)this + 4) = v22;
          if (*((_DWORD *)a2 + 11) == 603)
            goto LABEL_118;
          CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(v54);
          v55 = (const CoreML::Specification::DictVectorizer *)&CoreML::Specification::_DictVectorizer_default_instance_;
LABEL_192:
          CoreML::Specification::DictVectorizer::MergeFrom((std::string *)v22, v55);
          return;
        case 604:
          if (*((_DWORD *)this + 11) == 604)
          {
            v23 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
LABEL_120:
            v57 = (const CoreML::Specification::Scaler *)*((_QWORD *)a2 + 4);
            goto LABEL_194;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 604;
          v23 = (CoreML::Specification::Scaler *)operator new();
          v56 = CoreML::Specification::Scaler::Scaler(v23);
          *((_QWORD *)this + 4) = v23;
          if (*((_DWORD *)a2 + 11) == 604)
            goto LABEL_120;
          CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(v56);
          v57 = (const CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_;
LABEL_194:
          CoreML::Specification::Scaler::MergeFrom((uint64_t *)v23, v57);
          return;
        case 605:
        case 608:
          return;
        case 606:
          if (*((_DWORD *)this + 11) == 606)
          {
            v24 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
LABEL_122:
            v59 = (const CoreML::Specification::CategoricalMapping *)*((_QWORD *)a2 + 4);
            goto LABEL_196;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 606;
          v24 = (CoreML::Specification::CategoricalMapping *)operator new();
          v58 = CoreML::Specification::CategoricalMapping::CategoricalMapping(v24);
          *((_QWORD *)this + 4) = v24;
          if (*((_DWORD *)a2 + 11) == 606)
            goto LABEL_122;
          CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(v58);
          v59 = (const CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_;
LABEL_196:
          CoreML::Specification::CategoricalMapping::MergeFrom(v24, v59);
          return;
        case 607:
          if (*((_DWORD *)this + 11) == 607)
          {
            v25 = *((_QWORD *)this + 4);
LABEL_124:
            v61 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_198;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 607;
          v25 = operator new();
          v60 = CoreML::Specification::Normalizer::Normalizer((CoreML::Specification::Normalizer *)v25);
          *((_QWORD *)this + 4) = v25;
          if (*((_DWORD *)a2 + 11) == 607)
            goto LABEL_124;
          CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(v60);
          v61 = &CoreML::Specification::_Normalizer_default_instance_;
LABEL_198:
          v122 = v61[1];
          if ((v122 & 1) != 0)
            google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v25 + 8), v122 & 0xFFFFFFFFFFFFFFFELL);
          v123 = *((_DWORD *)v61 + 4);
          if (v123)
            *(_DWORD *)(v25 + 16) = v123;
          return;
        case 609:
          if (*((_DWORD *)this + 11) == 609)
          {
            v26 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
LABEL_126:
            v63 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 4);
            goto LABEL_203;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 609;
          v26 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
          v62 = CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v26);
          *((_QWORD *)this + 4) = v26;
          if (*((_DWORD *)a2 + 11) == 609)
            goto LABEL_126;
          CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v62);
          v63 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_ArrayFeatureExtractor_default_instance_;
LABEL_203:
          CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v26, v63);
          return;
        case 610:
          if (*((_DWORD *)this + 11) == 610)
          {
            v27 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
LABEL_128:
            v65 = (const CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)a2 + 4);
            goto LABEL_205;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 610;
          v27 = (CoreML::Specification::NonMaximumSuppression *)operator new();
          v64 = CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v27);
          *((_QWORD *)this + 4) = v27;
          if (*((_DWORD *)a2 + 11) == 610)
            goto LABEL_128;
          CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v64);
          v65 = (const CoreML::Specification::NonMaximumSuppression *)&CoreML::Specification::_NonMaximumSuppression_default_instance_;
LABEL_205:
          CoreML::Specification::NonMaximumSuppression::MergeFrom(v27, v65);
          return;
        default:
          if (v10 != 560)
            return;
          if (*((_DWORD *)this + 11) == 560)
          {
            v19 = (CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)this + 4);
LABEL_184:
            v121 = (const CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)a2 + 4);
            goto LABEL_263;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 560;
          v19 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
          v120 = CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v19);
          *((_QWORD *)this + 4) = v19;
          if (*((_DWORD *)a2 + 11) == 560)
            goto LABEL_184;
          CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(v120);
          v121 = (const CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_;
LABEL_263:
          CoreML::Specification::ClassConfidenceThresholding::MergeFrom((uint64_t *)v19, v121);
          break;
      }
      return;
    }
    switch(v10)
    {
      case 2000:
        if (*((_DWORD *)this + 11) == 2000)
        {
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
          v68 = CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v13);
          *((_QWORD *)this + 4) = v13;
          if (*((_DWORD *)a2 + 11) != 2000)
          {
            CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(v68);
            v69 = (const CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_;
            goto LABEL_209;
          }
        }
        v69 = (const CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)a2 + 4);
LABEL_209:
        CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v13, v69);
        return;
      case 2001:
        if (*((_DWORD *)this + 11) == 2001)
        {
          v32 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
LABEL_152:
          v89 = (const CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)a2 + 4);
          goto LABEL_229;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2001;
        v32 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
        v88 = CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v32);
        *((_QWORD *)this + 4) = v32;
        if (*((_DWORD *)a2 + 11) == 2001)
          goto LABEL_152;
        CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(v88);
        v89 = (const CoreML::Specification::CoreMLModels::WordTagger *)&CoreML::Specification::CoreMLModels::_WordTagger_default_instance_;
LABEL_229:
        CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v32, v89);
        return;
      case 2002:
        if (*((_DWORD *)this + 11) == 2002)
        {
          v33 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
LABEL_154:
          v91 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)a2 + 4);
          goto LABEL_231;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2002;
        v33 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
        v90 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v33);
        *((_QWORD *)this + 4) = v33;
        if (*((_DWORD *)a2 + 11) == 2002)
          goto LABEL_154;
        CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v90);
        v91 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_;
LABEL_231:
        CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom((std::string *)v33, v91);
        return;
      case 2003:
        if (*((_DWORD *)this + 11) == 2003)
        {
          v34 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
LABEL_156:
          v93 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)a2 + 4);
          goto LABEL_233;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2003;
        v34 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
        v92 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v34);
        *((_QWORD *)this + 4) = v34;
        if (*((_DWORD *)a2 + 11) == 2003)
          goto LABEL_156;
        CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v92);
        v93 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
LABEL_233:
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom((std::string *)v34, v93);
        return;
      case 2004:
        if (*((_DWORD *)this + 11) == 2004)
        {
          v35 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
LABEL_158:
          v95 = (const CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)a2 + 4);
          goto LABEL_235;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2004;
        v35 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
        v94 = CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v35);
        *((_QWORD *)this + 4) = v35;
        if (*((_DWORD *)a2 + 11) == 2004)
          goto LABEL_158;
        CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(v94);
        v95 = (const CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_;
LABEL_235:
        CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v35, v95);
        return;
      case 2005:
        if (*((_DWORD *)this + 11) == 2005)
        {
          v36 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
LABEL_160:
          v97 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)a2 + 4);
          goto LABEL_237;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2005;
        v36 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
        v96 = CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v36);
        *((_QWORD *)this + 4) = v36;
        if (*((_DWORD *)a2 + 11) == 2005)
          goto LABEL_160;
        CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(v96);
        v97 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)&CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_;
LABEL_237:
        CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v36, v97);
        return;
      case 2006:
        if (*((_DWORD *)this + 11) == 2006)
        {
          v37 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
LABEL_162:
          v99 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)a2 + 4);
          goto LABEL_239;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2006;
        v37 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
        v98 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v37);
        *((_QWORD *)this + 4) = v37;
        if (*((_DWORD *)a2 + 11) == 2006)
          goto LABEL_162;
        CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v98);
        v99 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_;
LABEL_239:
        CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom((uint64_t *)v37, v99);
        return;
      default:
        if (v10 != 900)
        {
          if (v10 != 3000)
            return;
          if (*((_DWORD *)this + 11) == 3000)
          {
            v17 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v17 = (CoreML::Specification::SerializedModel *)operator new();
            v76 = CoreML::Specification::SerializedModel::SerializedModel(v17);
            *((_QWORD *)this + 4) = v17;
            if (*((_DWORD *)a2 + 11) != 3000)
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v76);
              v77 = (const CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_;
              goto LABEL_217;
            }
          }
          v77 = (const CoreML::Specification::SerializedModel *)*((_QWORD *)a2 + 4);
LABEL_217:
          CoreML::Specification::SerializedModel::MergeFrom(v17, v77);
          return;
        }
        if (*((_DWORD *)this + 11) == 900)
        {
          v46 = (uint64_t *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 900;
          v46 = (uint64_t *)operator new();
          v116 = CoreML::Specification::Identity::Identity((CoreML::Specification::Identity *)v46);
          *((_QWORD *)this + 4) = v46;
          if (*((_DWORD *)a2 + 11) != 900)
          {
            CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(v116);
            v117 = &CoreML::Specification::_Identity_default_instance_;
LABEL_257:
            v124 = v117[1];
            if ((v124 & 1) != 0)
              google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v46 + 1, v124 & 0xFFFFFFFFFFFFFFFELL);
            return;
          }
        }
        v117 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_257;
    }
  }
  if (v10 <= 399)
  {
    if (v10 > 299)
    {
      switch(v10)
      {
        case 300:
          if (*((_DWORD *)this + 11) == 300)
          {
            v14 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            v14 = (CoreML::Specification::GLMRegressor *)operator new();
            v70 = CoreML::Specification::GLMRegressor::GLMRegressor(v14);
            *((_QWORD *)this + 4) = v14;
            if (*((_DWORD *)a2 + 11) != 300)
            {
              CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v70);
              v71 = (const CoreML::Specification::GLMRegressor *)&CoreML::Specification::_GLMRegressor_default_instance_;
              goto LABEL_211;
            }
          }
          v71 = (const CoreML::Specification::GLMRegressor *)*((_QWORD *)a2 + 4);
LABEL_211:
          CoreML::Specification::GLMRegressor::MergeFrom((uint64_t *)v14, v71);
          return;
        case 301:
          if (*((_DWORD *)this + 11) == 301)
          {
            v38 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            v38 = (CoreML::Specification::SupportVectorRegressor *)operator new();
            v100 = CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v38);
            *((_QWORD *)this + 4) = v38;
            if (*((_DWORD *)a2 + 11) != 301)
            {
              CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v100);
              v101 = (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_;
LABEL_241:
              CoreML::Specification::SupportVectorRegressor::MergeFrom((std::string *)v38, v101);
              return;
            }
          }
          v101 = (const CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_241;
        case 302:
          if (*((_DWORD *)this + 11) == 302)
          {
            v39 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            v39 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
            v102 = CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v39);
            *((_QWORD *)this + 4) = v39;
            if (*((_DWORD *)a2 + 11) != 302)
            {
              CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v102);
              v103 = (const CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_;
LABEL_243:
              CoreML::Specification::TreeEnsembleRegressor::MergeFrom((std::string *)v39, v103);
              return;
            }
          }
          v103 = (const CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_243;
        case 303:
          if (*((_DWORD *)this + 11) == 303)
          {
            v40 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            v40 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
            v104 = CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v40);
            *((_QWORD *)this + 4) = v40;
            if (*((_DWORD *)a2 + 11) != 303)
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v104);
              v105 = (const CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
LABEL_245:
              CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v40, v105);
              return;
            }
          }
          v105 = (const CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_245;
        case 304:
          if (*((_DWORD *)this + 11) == 304)
          {
            v41 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            v41 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
            v106 = CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v41);
            *((_QWORD *)this + 4) = v41;
            if (*((_DWORD *)a2 + 11) != 304)
            {
              CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(v106);
              v107 = (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_;
LABEL_247:
              CoreML::Specification::BayesianProbitRegressor::MergeFrom(v41, v107);
              return;
            }
          }
          v107 = (const CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_247;
        default:
          return;
      }
    }
    if (v10 != 200)
    {
      if (v10 != 201)
      {
        if (v10 != 202)
          return;
        if (*((_DWORD *)this + 11) == 202)
        {
          v16 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v16 = (CoreML::Specification::Pipeline *)operator new();
          v74 = CoreML::Specification::Pipeline::Pipeline(v16);
          *((_QWORD *)this + 4) = v16;
          if (*((_DWORD *)a2 + 11) != 202)
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v74);
            v75 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
            goto LABEL_215;
          }
        }
        v75 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
LABEL_215:
        CoreML::Specification::Pipeline::MergeFrom((uint64_t *)v16, v75);
        return;
      }
      if (*((_DWORD *)this + 11) == 201)
      {
        v45 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 201;
        v45 = (CoreML::Specification::PipelineRegressor *)operator new();
        v114 = CoreML::Specification::PipelineRegressor::PipelineRegressor(v45);
        *((_QWORD *)this + 4) = v45;
        if (*((_DWORD *)a2 + 11) != 201)
        {
          CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v114);
          v115 = (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_;
          goto LABEL_255;
        }
      }
      v115 = (const CoreML::Specification::PipelineRegressor *)*((_QWORD *)a2 + 4);
LABEL_255:
      CoreML::Specification::PipelineRegressor::MergeFrom((std::string *)v45, v115);
      return;
    }
    if (*((_DWORD *)this + 11) == 200)
    {
      v44 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 200;
      v44 = (CoreML::Specification::PipelineClassifier *)operator new();
      v112 = CoreML::Specification::PipelineClassifier::PipelineClassifier(v44);
      *((_QWORD *)this + 4) = v44;
      if (*((_DWORD *)a2 + 11) != 200)
      {
        CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v112);
        v113 = (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_;
        goto LABEL_253;
      }
    }
    v113 = (const CoreML::Specification::PipelineClassifier *)*((_QWORD *)a2 + 4);
LABEL_253:
    CoreML::Specification::PipelineClassifier::MergeFrom((std::string *)v44, v113);
    return;
  }
  if (v10 > 499)
  {
    if (v10 > 501)
    {
      if (v10 != 502)
      {
        if (v10 != 555)
        {
          if (v10 != 556)
            return;
          if (*((_DWORD *)this + 11) == 556)
          {
            v15 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 556;
            v15 = (CoreML::Specification::LinkedModel *)operator new();
            v72 = CoreML::Specification::LinkedModel::LinkedModel(v15);
            *((_QWORD *)this + 4) = v15;
            if (*((_DWORD *)a2 + 11) != 556)
            {
              CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v72);
              v73 = (const CoreML::Specification::LinkedModel *)&CoreML::Specification::_LinkedModel_default_instance_;
              goto LABEL_213;
            }
          }
          v73 = (const CoreML::Specification::LinkedModel *)*((_QWORD *)a2 + 4);
LABEL_213:
          CoreML::Specification::LinkedModel::MergeFrom(v15, v73);
          return;
        }
        if (*((_DWORD *)this + 11) == 555)
        {
          v43 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          v43 = (CoreML::Specification::CustomModel *)operator new();
          v110 = CoreML::Specification::CustomModel::CustomModel(v43);
          *((_QWORD *)this + 4) = v43;
          if (*((_DWORD *)a2 + 11) != 555)
          {
            CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v110);
            v111 = (const CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_;
            goto LABEL_251;
          }
        }
        v111 = (const CoreML::Specification::CustomModel *)*((_QWORD *)a2 + 4);
LABEL_251:
        CoreML::Specification::CustomModel::MergeFrom(v43, v111);
        return;
      }
      if (*((_DWORD *)this + 11) == 502)
      {
        v42 = (CoreML::Specification::MILSpec::Program *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 502;
        v42 = (CoreML::Specification::MILSpec::Program *)operator new();
        v108 = CoreML::Specification::MILSpec::Program::Program(v42);
        *((_QWORD *)this + 4) = v42;
        if (*((_DWORD *)a2 + 11) != 502)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v108);
          v109 = (const CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_;
          goto LABEL_249;
        }
      }
      v109 = (const CoreML::Specification::MILSpec::Program *)*((_QWORD *)a2 + 4);
LABEL_249:
      CoreML::Specification::MILSpec::Program::MergeFrom(v42, v109);
      return;
    }
    if (v10 != 500)
    {
      if (*((_DWORD *)this + 11) == 501)
      {
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 501;
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
        v78 = CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v18);
        *((_QWORD *)this + 4) = v18;
        if (*((_DWORD *)a2 + 11) != 501)
        {
          CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(v78);
          v79 = (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_;
          goto LABEL_219;
        }
      }
      v79 = (const CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)a2 + 4);
LABEL_219:
      CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v18, v79);
      return;
    }
    if (*((_DWORD *)this + 11) == 500)
    {
      v47 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 500;
      v47 = (CoreML::Specification::NeuralNetwork *)operator new();
      v118 = CoreML::Specification::NeuralNetwork::NeuralNetwork(v47);
      *((_QWORD *)this + 4) = v47;
      if (*((_DWORD *)a2 + 11) != 500)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v118);
        v119 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
        goto LABEL_261;
      }
    }
    v119 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 4);
LABEL_261:
    CoreML::Specification::NeuralNetwork::MergeFrom(v47, v119);
    return;
  }
  switch(v10)
  {
    case 400:
      if (*((_DWORD *)this + 11) == 400)
      {
        v12 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 400;
        v12 = (CoreML::Specification::GLMClassifier *)operator new();
        v66 = CoreML::Specification::GLMClassifier::GLMClassifier(v12);
        *((_QWORD *)this + 4) = v12;
        if (*((_DWORD *)a2 + 11) != 400)
        {
          CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v66);
          v67 = (const CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_;
          goto LABEL_207;
        }
      }
      v67 = (const CoreML::Specification::GLMClassifier *)*((_QWORD *)a2 + 4);
LABEL_207:
      CoreML::Specification::GLMClassifier::MergeFrom((std::string *)v12, v67);
      return;
    case 401:
      if (*((_DWORD *)this + 11) == 401)
      {
        v28 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
LABEL_144:
        v81 = (const CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_221;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 401;
      v28 = (CoreML::Specification::SupportVectorClassifier *)operator new();
      v80 = CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v28);
      *((_QWORD *)this + 4) = v28;
      if (*((_DWORD *)a2 + 11) == 401)
        goto LABEL_144;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v80);
      v81 = (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_;
LABEL_221:
      CoreML::Specification::SupportVectorClassifier::MergeFrom((std::string *)v28, v81);
      return;
    case 402:
      if (*((_DWORD *)this + 11) == 402)
      {
        v29 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
LABEL_146:
        v83 = (const CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_223;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 402;
      v29 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
      v82 = CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v29);
      *((_QWORD *)this + 4) = v29;
      if (*((_DWORD *)a2 + 11) == 402)
        goto LABEL_146;
      CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v82);
      v83 = (const CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
LABEL_223:
      CoreML::Specification::TreeEnsembleClassifier::MergeFrom((std::string *)v29, v83);
      return;
    case 403:
      if (*((_DWORD *)this + 11) == 403)
      {
        v30 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
LABEL_148:
        v85 = (const CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_225;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 403;
      v30 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
      v84 = CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v30);
      *((_QWORD *)this + 4) = v30;
      if (*((_DWORD *)a2 + 11) == 403)
        goto LABEL_148;
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v84);
      v85 = (const CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
LABEL_225:
      CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v30, v85);
      return;
    case 404:
      if (*((_DWORD *)this + 11) == 404)
      {
        v31 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
LABEL_150:
        v87 = (const CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_227;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 404;
      v31 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
      v86 = CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v31);
      *((_QWORD *)this + 4) = v31;
      if (*((_DWORD *)a2 + 11) == 404)
        goto LABEL_150;
      CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v86);
      v87 = (const CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_;
LABEL_227:
      CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v31, v87);
      break;
    default:
      return;
  }
}

void sub_1D3B08EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ModelDescription::MergeFrom(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::FeatureDescription **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const CoreML::Specification::FeatureDescription **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  const CoreML::Specification::FeatureDescription **v16;
  unsigned int *v17;
  signed int v18;
  signed int *v19;
  unsigned int v20;
  const CoreML::Specification::FunctionDescription **v21;
  unsigned int *v22;
  signed int v23;
  signed int *v24;
  unsigned int v25;
  const CoreML::Specification::FeatureDescription **v26;
  unsigned int *v27;
  signed int v28;
  signed int *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const CoreML::Specification::Metadata *v36;
  CoreML::Specification::Metadata *v37;
  const CoreML::Specification::Metadata *v38;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::FeatureDescription **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 10) + 8);
    v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (signed int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *((_DWORD *)a2 + 24);
  if (v20)
  {
    v21 = (const CoreML::Specification::FunctionDescription **)(*((_QWORD *)a2 + 13) + 8);
    v22 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 88), *((_DWORD *)a2 + 24));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((google::protobuf::Arena **)this + 11, (CoreML::Specification::FunctionDescription **)v22, v21, v20, **((_DWORD **)this + 13) - *((_DWORD *)this + 24));
    v23 = *((_DWORD *)this + 24) + v20;
    *((_DWORD *)this + 24) = v23;
    v24 = (signed int *)*((_QWORD *)this + 13);
    if (*v24 < v23)
      *v24 = v23;
  }
  v25 = *((_DWORD *)a2 + 30);
  if (v25)
  {
    v26 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 16) + 8);
    v27 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 112), *((_DWORD *)a2 + 30));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 14, (CoreML::Specification::FeatureDescription **)v27, v26, v25, **((_DWORD **)this + 16) - *((_DWORD *)this + 30));
    v28 = *((_DWORD *)this + 30) + v25;
    *((_DWORD *)this + 30) = v28;
    v29 = (signed int *)*((_QWORD *)this + 16);
    if (*v29 < v28)
      *v29 = v28;
  }
  v30 = *((_QWORD *)a2 + 17);
  if (*(char *)(v30 + 23) < 0)
  {
    if (!*(_QWORD *)(v30 + 8))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v30 + 23))
  {
    goto LABEL_26;
  }
  v31 = (uint64_t *)*((_QWORD *)this + 17);
  if (v31 != (uint64_t *)v30)
  {
    if (v31 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, v30);
    else
      std::string::operator=(*((std::string **)this + 17), (const std::string *)v30);
  }
LABEL_26:
  v32 = *((_QWORD *)a2 + 18);
  if (*(char *)(v32 + 23) < 0)
  {
    if (!*(_QWORD *)(v32 + 8))
      goto LABEL_34;
  }
  else if (!*(_BYTE *)(v32 + 23))
  {
    goto LABEL_34;
  }
  v33 = (uint64_t *)*((_QWORD *)this + 18);
  if (v33 != (uint64_t *)v32)
  {
    if (v33 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, v32);
    else
      std::string::operator=(*((std::string **)this + 18), (const std::string *)v32);
  }
LABEL_34:
  v34 = *((_QWORD *)a2 + 19);
  if (*(char *)(v34 + 23) < 0)
  {
    if (!*(_QWORD *)(v34 + 8))
      goto LABEL_42;
  }
  else if (!*(_BYTE *)(v34 + 23))
  {
    goto LABEL_42;
  }
  v35 = (uint64_t *)*((_QWORD *)this + 19);
  if (v35 != (uint64_t *)v34)
  {
    if (v35 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, v34);
    else
      std::string::operator=(*((std::string **)this + 19), (const std::string *)v34);
  }
LABEL_42:
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v36 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 20);
    if (v36)
    {
      v37 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
      if (!v37)
      {
        v37 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v37);
        *((_QWORD *)this + 20) = v37;
        v36 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 20);
      }
      if (v36)
        v38 = v36;
      else
        v38 = (const CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_;
      CoreML::Specification::Metadata::MergeFrom(v37, v38);
    }
  }
}

void sub_1D3B09510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::PipelineClassifier::MergeFrom(std::string *this, const CoreML::Specification::PipelineClassifier *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom((uint64_t *)v7, v8);
  }
  return this;
}

void sub_1D3B095DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::PipelineRegressor::MergeFrom(std::string *this, const CoreML::Specification::PipelineRegressor *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom((uint64_t *)v7, v8);
  }
  return this;
}

void sub_1D3B096A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::Pipeline::MergeFrom(uint64_t *this, const CoreML::Specification::Pipeline *a2)
{
  const CoreML::Specification::Pipeline *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CoreML::Specification::Model **v11;
  CoreML::Specification::Model **v12;
  CoreML::Specification::Model *v13;
  CoreML::Specification::Model *v14;
  CoreML::Specification::Model *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::Model **v19;
  CoreML::Specification::Model **v20;
  CoreML::Specification::Model *v21;
  CoreML::Specification::Model *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  unsigned int v28;
  const std::string **v29;
  unsigned int *v30;
  signed int v31;
  signed int *v32;
  const CoreML::Specification::Pipeline *v33;
  uint64_t v34;

  v2 = a2;
  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)v2 + 6);
  if (v5)
  {
    v33 = v2;
    v34 = *((_QWORD *)v2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (CoreML::Specification::Model **)(v34 + 8);
      v12 = (CoreML::Specification::Model **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::Model **)((char *)v6 + v18);
      v20 = (CoreML::Specification::Model **)(v18 + v34 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::Model::Model(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::Model *)operator new();
          CoreML::Specification::Model::Model(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v21, Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    v2 = v33;
    if (*v27 < v26)
      *v27 = v26;
  }
  v28 = *((_DWORD *)v2 + 12);
  if (v28)
  {
    v29 = (const std::string **)(*((_QWORD *)v2 + 7) + 8);
    v30 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 5), v28);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)(v3 + 5), (std::string **)v30, v29, v28, *(_DWORD *)v3[7] - *((_DWORD *)v3 + 12));
    v31 = *((_DWORD *)v3 + 12) + v28;
    *((_DWORD *)v3 + 12) = v31;
    v32 = (signed int *)v3[7];
    if (*v32 < v31)
      *v32 = v31;
  }
  return this;
}

void sub_1D3B098D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SerializedModel::MergeFrom(CoreML::Specification::SerializedModel *this, const CoreML::Specification::SerializedModel *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::string *v8;
  std::string **v9;
  std::string *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      return;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    return;
  }
  v10 = (std::string *)*((_QWORD *)this + 3);
  v9 = (std::string **)((char *)this + 24);
  v8 = v10;
  if (v10 != (std::string *)v7)
  {
    if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, v7);
    else
      std::string::operator=(v8, (const std::string *)v7);
  }
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  std::string **v19;
  const std::string **v20;
  const std::string *v21;
  std::string *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = (google::protobuf::Arena *)Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
      }
      result = std::string::operator=(Aligned, v21);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(CoreML::Specification::Model *a1, CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::MergeFrom(this, a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this)
{
  *(_QWORD *)this = &off_1E9564A40;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1D3B09B60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::FeatureDescription **a2, const CoreML::Specification::FeatureDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const CoreML::Specification::FeatureDescription **v11;
  CoreML::Specification::FeatureDescription **v12;
  const CoreML::Specification::FeatureDescription *v13;
  const CoreML::Specification::FeatureDescription *v14;
  CoreML::Specification::FeatureDescription *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::FeatureDescription **v19;
  const CoreML::Specification::FeatureDescription **v20;
  const CoreML::Specification::FeatureDescription *v21;
  CoreML::Specification::FeatureDescription *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::FeatureDescription *)operator new();
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_1D3B09C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::FunctionDescription **a2, const CoreML::Specification::FunctionDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const CoreML::Specification::FunctionDescription **v11;
  CoreML::Specification::FunctionDescription **v12;
  const CoreML::Specification::FunctionDescription *v13;
  const CoreML::Specification::FunctionDescription *v14;
  CoreML::Specification::FunctionDescription *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::FunctionDescription **v19;
  const CoreML::Specification::FunctionDescription **v20;
  const CoreML::Specification::FunctionDescription *v21;
  CoreML::Specification::FunctionDescription *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::FunctionDescription *)operator new();
        CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_1D3B09DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::MergeFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::string *v12;
  std::string **v13;
  std::string *v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, *((_QWORD **)a2 + 5));
  v5 = *((_QWORD *)a2 + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v5);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 7);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v7);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 8);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 8);
  if (v10 != (uint64_t *)v9)
  {
    if (v10 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v9);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 9);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      return;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    return;
  }
  v14 = (std::string *)*((_QWORD *)this + 9);
  v13 = (std::string **)((char *)this + 72);
  v12 = v14;
  if (v14 != (std::string *)v11)
  {
    if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, v11);
    else
      std::string::operator=(v12, (const std::string *)v11);
  }
}

_QWORD *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  google::protobuf::Arena **v8;
  _QWORD v9[3];

  result = google::protobuf::Map<std::string,std::string>::begin(v9, a2);
  v4 = v9[0];
  if (v9[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = (const std::string *)(v6 + 24);
      v8 = google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
      std::string::operator=((std::string *)v8, v7);
      result = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v9);
      v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(const CoreML::Specification::FunctionDescription *a1, CoreML::Specification::FunctionDescription *a2)
{
  CoreML::Specification::FunctionDescription::MergeFrom(a2, a1);
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  *(_QWORD *)this = &off_1E95560C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (this != (CoreML::Specification::FunctionDescription *)&CoreML::Specification::_FunctionDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_1D3B0A084(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void CoreML::Specification::FunctionDescription::MergeFrom(CoreML::Specification::FunctionDescription *this, const CoreML::Specification::FunctionDescription *a2)
{
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::FeatureDescription **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const CoreML::Specification::FeatureDescription **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  const CoreML::Specification::FeatureDescription **v16;
  unsigned int *v17;
  signed int v18;
  signed int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::string *v25;
  std::string **v26;
  std::string *v27;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::FeatureDescription **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 10) + 8);
    v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (signed int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *((_QWORD *)a2 + 11);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_20;
  }
  v21 = (uint64_t *)*((_QWORD *)this + 11);
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v20);
    else
      std::string::operator=(*((std::string **)this + 11), (const std::string *)v20);
  }
LABEL_20:
  v22 = *((_QWORD *)a2 + 12);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_28;
  }
  v23 = (uint64_t *)*((_QWORD *)this + 12);
  if (v23 != (uint64_t *)v22)
  {
    if (v23 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, v22);
    else
      std::string::operator=(*((std::string **)this + 12), (const std::string *)v22);
  }
LABEL_28:
  v24 = *((_QWORD *)a2 + 13);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(_QWORD *)(v24 + 8))
      return;
  }
  else if (!*(_BYTE *)(v24 + 23))
  {
    return;
  }
  v27 = (std::string *)*((_QWORD *)this + 13);
  v26 = (std::string **)((char *)this + 104);
  v25 = v27;
  if (v27 != (std::string *)v24)
  {
    if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v26, v24);
    else
      std::string::operator=(v25, (const std::string *)v24);
  }
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(const CoreML::Specification::FeatureDescription *a1, CoreML::Specification::FeatureDescription *a2)
{
  CoreML::Specification::FeatureDescription::MergeFrom(a2, a1);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(_QWORD *)this = &off_1E955E420;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B0A41C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::Specification::FeatureDescription::MergeFrom(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  const CoreML::Specification::FeatureType *v9;
  CoreML::Specification::FeatureType *v10;
  const CoreML::Specification::FeatureType *v11;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
    if (v9)
    {
      v10 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
      if (!v10)
      {
        v10 = (CoreML::Specification::FeatureType *)operator new();
        CoreML::Specification::FeatureType::FeatureType(v10);
        *((_QWORD *)this + 4) = v10;
        v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
      CoreML::Specification::FeatureType::MergeFrom((std::string *)v10, v11);
    }
  }
}

void sub_1D3B0A584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Model>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::ModelDescription::~ModelDescription(CoreML::Specification::ModelDescription *this)
{
  CoreML::Specification::ModelDescription::~ModelDescription(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E955D250;
  v2 = *((_QWORD *)this + 17);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 18);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 19);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1D8251A40](v6, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v7 = *((_QWORD *)this + 20);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 14);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 11);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::ModelDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ModelDescription");
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this)
{
  return CoreML::Specification::ModelDescription::New(this, 0);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::ModelDescription *v3;

  v3 = (CoreML::Specification::ModelDescription *)operator new();
  CoreML::Specification::ModelDescription::ModelDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(a2, v3);
  return v3;
}

void sub_1D3B0A708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::Clear(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2;
  CoreML::Specification::FeatureDescription **v3;
  CoreML::Specification::FeatureDescription *v4;
  uint64_t v5;
  CoreML::Specification::FeatureDescription **v6;
  CoreML::Specification::FeatureDescription *v7;
  uint64_t v8;
  CoreML::Specification::FeatureDescription **v9;
  CoreML::Specification::FeatureDescription *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  CoreML::Specification::FeatureDescription **v15;
  CoreML::Specification::FeatureDescription *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  v8 = *((unsigned int *)this + 18);
  if ((int)v8 >= 1)
  {
    v9 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v10 = *v9++;
      CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)this + 18) = 0;
  }
  v11 = *((unsigned int *)this + 24);
  if ((int)v11 >= 1)
  {
    v12 = (uint64_t *)(*((_QWORD *)this + 13) + 8);
    do
    {
      v13 = *v12++;
      CoreML::Specification::FunctionDescription::Clear(v13);
      --v11;
    }
    while (v11);
    *((_DWORD *)this + 24) = 0;
  }
  v14 = *((unsigned int *)this + 30);
  if ((int)v14 >= 1)
  {
    v15 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 16) + 8);
    do
    {
      v16 = *v15++;
      CoreML::Specification::FeatureDescription::Clear(v16);
      --v14;
    }
    while (v14);
    *((_DWORD *)this + 30) = 0;
  }
  v17 = *((_QWORD *)this + 17);
  if ((uint64_t *)v17 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      **(_BYTE **)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v17 = 0;
      *(_BYTE *)(v17 + 23) = 0;
    }
  }
  v18 = *((_QWORD *)this + 18);
  if ((uint64_t *)v18 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v18 + 23) < 0)
    {
      **(_BYTE **)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v18 = 0;
      *(_BYTE *)(v18 + 23) = 0;
    }
  }
  v19 = *((_QWORD *)this + 19);
  if ((uint64_t *)v19 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v19 + 23) < 0)
    {
      **(_BYTE **)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v19 = 0;
      *(_BYTE *)(v19 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 20);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 20) = 0;
  return result;
}

uint64_t CoreML::Specification::ModelDescription::IsInitialized(CoreML::Specification::ModelDescription *this)
{
  return 1;
}

uint64_t CoreML::Specification::ModelDescription::SerializeWithCachedSizes(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  int v8;
  int j;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  int k;
  int v16;
  int m;
  uint64_t result;
  uint64_t v19;
  int v20;
  int n;
  uint64_t v22;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (j = 0; j != v8; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j + 8), a2, a4);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 17);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = *((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_13;
    v10 = *(unsigned int **)v10;
    goto LABEL_12;
  }
  LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xBu, *((_QWORD *)this + 17), a2);
  }
LABEL_13:
  v12 = (unsigned int *)*((_QWORD *)this + 18);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_19;
    v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedProbabilitiesName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCu, *((_QWORD *)this + 18), a2);
  }
LABEL_19:
  v14 = *((_DWORD *)this + 18);
  if (v14)
  {
    for (k = 0; k != v14; ++k)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xD, *(_QWORD *)(*((_QWORD *)this + 10) + 8 * k + 8), a2, a4);
  }
  v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    for (m = 0; m != v16; ++m)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(*((_QWORD *)this + 13) + 8 * m + 8), a2, a4);
  }
  result = *((_QWORD *)this + 19);
  if (*(char *)(result + 23) < 0)
  {
    v19 = *(_QWORD *)(result + 8);
    if (!v19)
      goto LABEL_31;
    result = *(_QWORD *)result;
    goto LABEL_30;
  }
  LODWORD(v19) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v19, 1, (uint64_t)"CoreML.Specification.ModelDescription.defaultFunctionName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x15u, *((_QWORD *)this + 19), a2);
  }
LABEL_31:
  v20 = *((_DWORD *)this + 30);
  if (v20)
  {
    for (n = 0; n != v20; ++n)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x32, *(_QWORD *)(*((_QWORD *)this + 16) + 8 * n + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v22 = *((_QWORD *)this + 20);
    if (v22)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v22, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::GetCachedSize(CoreML::Specification::ModelDescription *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t CoreML::Specification::FeatureDescription::Clear(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::FeatureDescription **v3;
  CoreML::Specification::FeatureDescription *v4;
  uint64_t v5;
  CoreML::Specification::FeatureDescription **v6;
  CoreML::Specification::FeatureDescription *v7;
  uint64_t v8;
  CoreML::Specification::FeatureDescription **v9;
  CoreML::Specification::FeatureDescription *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = this;
  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  v5 = *(unsigned int *)(v1 + 48);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(v1 + 56) + 8);
    do
    {
      v7 = *v6++;
      this = CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 48) = 0;
  }
  v8 = *(unsigned int *)(v1 + 72);
  if ((int)v8 >= 1)
  {
    v9 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(v1 + 80) + 8);
    do
    {
      v10 = *v9++;
      this = CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 72) = 0;
  }
  v11 = *(_QWORD *)(v1 + 88);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
  v12 = *(_QWORD *)(v1 + 96);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
    }
  }
  v13 = *(_QWORD *)(v1 + 104);
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v13 + 23) < 0)
    {
      **(_BYTE **)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v13 = 0;
      *(_BYTE *)(v13 + 23) = 0;
    }
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::FunctionDescription::~FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  CoreML::Specification::FunctionDescription::~FunctionDescription(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E95560C0;
  v2 = *((_QWORD *)this + 11);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 12);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 13);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1D8251A40](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::FunctionDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FunctionDescription");
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this)
{
  return CoreML::Specification::FunctionDescription::New(this, 0);
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::FunctionDescription *v3;

  v3 = (CoreML::Specification::FunctionDescription *)operator new();
  CoreML::Specification::FunctionDescription::FunctionDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::FunctionDescription>(a2, v3);
  return v3;
}

void sub_1D3B0AEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FunctionDescription::IsInitialized(CoreML::Specification::FunctionDescription *this)
{
  return 1;
}

uint64_t CoreML::Specification::FunctionDescription::MergePartialFromCodedStream(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  char *v6;
  char *v7;
  std::string **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  std::string::size_type size;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  CoreML::Specification::FeatureDescription *v20;
  char *v21;
  int VarintSizeAsIntFallback;
  BOOL v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  const char *v29;
  char *v30;

  v30 = (char *)this + 64;
  v4 = (std::string **)((char *)this + 104);
  v5 = (std::string **)((char *)this + 96);
  v6 = (char *)this + 40;
  v7 = (char *)this + 16;
  v8 = (std::string **)((char *)this + 88);
  while (2)
  {
    while (1)
    {
      v9 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v10 = *v9;
      if (*v9 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v9 + 1;
      v11 = v10 | 0x100000000;
      if ((v11 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_36:
      if ((_DWORD)v11)
        v23 = (v11 & 7) == 4;
      else
        v23 = 1;
      if (v23)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
        goto LABEL_54;
    }
    LODWORD(v10) = 0;
LABEL_7:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v11 & 0x100000000) == 0)
      goto LABEL_36;
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_36;
        v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v8;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v13);
        if (!(_DWORD)result)
          return result;
        v15 = *v8;
        if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v8)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.name";
        goto LABEL_53;
      case 2u:
        if (v11 != 18)
          goto LABEL_36;
        v17 = (uint64_t)v7;
        goto LABEL_33;
      case 3u:
        if (v11 != 26)
          goto LABEL_36;
        v17 = (uint64_t)v6;
        goto LABEL_33;
      case 4u:
        if (v11 != 34)
          goto LABEL_36;
        v18 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *v5;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18);
        if (!(_DWORD)result)
          return result;
        v15 = *v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.predictedFeatureName";
        goto LABEL_53;
      case 5u:
        if (v11 != 42)
          goto LABEL_36;
        v19 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v19 = *v4;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v19);
        if (!(_DWORD)result)
          return result;
        v15 = *v4;
        if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v4)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.predictedProbabilitiesName";
LABEL_53:
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v29))
          goto LABEL_54;
        continue;
      case 6u:
        if (v11 != 50)
          goto LABEL_36;
        v17 = (uint64_t)v30;
LABEL_33:
        v20 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v17);
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_54;
        }
        else
        {
          VarintSizeAsIntFallback = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v26 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a2 + 13) = v26;
        if (v26 < 0 != v27)
          goto LABEL_54;
        v28 = v24;
        result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v20, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
LABEL_54:
        result = 0;
        break;
      default:
        goto LABEL_36;
    }
    return result;
  }
}

uint64_t CoreML::Specification::FunctionDescription::SerializeWithCachedSizes(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int i;
  int v10;
  int j;
  unsigned int *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  int k;

  v6 = (unsigned int *)*((_QWORD *)this + 11);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_7;
    v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FunctionDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 11), a2);
  }
LABEL_7:
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v10 = *((_DWORD *)this + 12);
  if (v10)
  {
    for (j = 0; j != v10; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j + 8), a2, a4);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 12);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_19;
    v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((_QWORD *)this + 12), a2);
  }
LABEL_19:
  result = *((_QWORD *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    v15 = *(_QWORD *)(result + 8);
    if (!v15)
      goto LABEL_25;
    result = *(_QWORD *)result;
    goto LABEL_24;
  }
  LODWORD(v15) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v15, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedProbabilitiesName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(5u, *((_QWORD *)this + 13), a2);
  }
LABEL_25:
  v16 = *((_DWORD *)this + 18);
  if (v16)
  {
    for (k = 0; k != v16; ++k)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*((_QWORD *)this + 10) + 8 * k + 8), a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::GetCachedSize(CoreML::Specification::FunctionDescription *this)
{
  return *((unsigned int *)this + 28);
}

CoreML::Specification::FeatureDescription *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(uint64_t a1)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::FeatureDescription *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v4 - v3 + 1);
      v2 = *(int **)(a1 + 16);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::FeatureDescription **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::FeatureDescription *)operator new();
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_1D3B0B49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unsigned int v11;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  std::string::size_type size;
  CoreML::Specification::FeatureType *v17;
  char *v18;
  int VarintSizeAsIntFallback;
  std::string *v20;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  const char *v27;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v8) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_32;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_32;
LABEL_8:
        v11 = v9 >> 3;
        if (v9 >> 3 != 3)
          break;
        if (v9 != 26)
          goto LABEL_32;
        v17 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
        if (!v17)
        {
          v17 = (CoreML::Specification::FeatureType *)operator new();
          CoreML::Specification::FeatureType::FeatureType(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 == v25)
        {
          v26 = v22;
          result = CoreML::Specification::FeatureType::MergePartialFromCodedStream(v17, a2, v23);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
            continue;
        }
        return 0;
      }
      if (v11 != 2)
        break;
      if (v9 != 18)
        goto LABEL_32;
      v20 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20);
      if (!(_DWORD)result)
        return result;
      v15 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v27 = "CoreML.Specification.FeatureDescription.shortDescription";
LABEL_47:
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v27))
        return 0;
    }
    if (v11 == 1 && v9 == 10)
    {
      v13 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v13);
      if (!(_DWORD)result)
        return result;
      v15 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v27 = "CoreML.Specification.FeatureDescription.name";
      goto LABEL_47;
    }
LABEL_32:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B0B718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FunctionDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,std::string>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,std::string>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_1D3B0B958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,std::string>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,std::string>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,std::string>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v8 = *(uint64_t **)v5;
            do
            {
              v9 = (void **)v8[4];
              v10 = (uint64_t *)v8[1];
              v11 = v8;
              if (v10)
              {
                do
                {
                  v12 = v10;
                  v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v12 = (uint64_t *)v11[2];
                  v13 = *v12 == (_QWORD)v11;
                  v11 = v12;
                }
                while (!v13);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v8);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v9);
              v8 = v12;
            }
            while (v12 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(a1, (_QWORD **)v5);
            goto LABEL_17;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_17:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  if (!*(_QWORD *)(a1 + 40))
    operator delete(__p);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  v4 = (uint64_t *)a2[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v6 = a2;
    do
    {
      v5 = (uint64_t *)v6[2];
      v7 = *v5 == (_QWORD)v6;
      v6 = v5;
    }
    while (!v7);
  }
  if (*(uint64_t **)a1 == a2)
    *(_QWORD *)a1 = v5;
  --*(_QWORD *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  if (!*(_QWORD *)(a1 + 16))
    operator delete(a2);
}

__n128 google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void ***v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  const void ***v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      if (*(char *)(v7 + 47) < 0)
        operator delete(*(void **)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x1012C403467C318);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(const void ***)(v6 + 32);
  if (v8)
    goto LABEL_9;
  v29 = 0;
  if (google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = v29[1];
    if (v13)
    {
      do
      {
        v14 = (const void ***)v13;
        v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(const void ****)(v12 + 16);
        v15 = *v14 == (const void **)v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (const void ***)(v11 + 8))
    {
      v8 = v14[4];
LABEL_9:
      *a3 = (uint64_t)v8;
      goto LABEL_21;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_21:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_27:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_28;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v21, v29 + 4);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree((uint64_t)v16, (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_27;
  }
LABEL_28:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(const void ***)a1;
  v6 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v4 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  if ((const void **)v8 == v5)
    return 1;
  if (v8 && v8 != *(_QWORD *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
      if ((const void **)v8 == v5)
        return 1;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v4, v5, a2, (uint64_t)&v13);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 32);
  if (v2 == a1)
    return v3;
  *(_QWORD *)(v2 + 32) = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList();
  return v2;
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _OWORD *Aligned;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v12);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v11[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  if (a2)
    Aligned = google::protobuf::Arena::AllocateAligned(a2, MEMORY[0x1E0DE4EE8], 64);
  else
    Aligned = operator new(0x40uLL);
  Aligned[2] = 0u;
  Aligned[3] = 0u;
  *Aligned = 0u;
  Aligned[1] = 0u;
  a1[3] = 8;
  a1[4] = Aligned;
  a1[1] = 8;
  return a1;
}

void sub_1D3B0C05C(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B0C000);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1D3B0C0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](unsigned int *result)
{
  unsigned int v1;
  uint64_t i;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = *result;
  for (i = 1; i != 257; ++i)
  {
    v3 = v1 / 0x1F31D;
    v4 = 16807 * (v1 % 0x1F31D);
    v3 *= 2836;
    v5 = v4 >= v3;
    v6 = v4 - v3;
    if (v5)
      v7 = 0;
    else
      v7 = 0x7FFFFFFF;
    v1 = v7 + v6;
    result[i] = v1;
  }
  v8 = 16807 * (v1 % 0x1F31D);
  v9 = 2836 * (v1 / 0x1F31D);
  v5 = v8 >= v9;
  v10 = v8 - v9;
  if (v5)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *result = v12;
  result[257] = v12;
  return result;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a2[1];
  v5 = result - *a2;
  if (result != *a2)
  {
    v6 = v5 + 1;
    if (v5 == -1)
    {
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, 0x40uLL);
      return std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v6);
      v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 - a3 + (v3 << 6);
      *(_QWORD *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(_QWORD *)(result + 48) = 0;
    v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  v6 = -1;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E)
    v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *(unsigned int **)a1;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = **(_DWORD **)a1;
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v9 = (char *)v4
           + (((unint64_t)((((unint64_t)(v8 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v4[257] = *((_DWORD *)v9 + 1);
        v10 = v7 / 0x1F31D;
        v11 = 16807 * (v7 % 0x1F31D);
        v10 *= 2836;
        v12 = v11 >= v10;
        v13 = v11 - v10;
        if (v12)
          v14 = 0;
        else
          v14 = 0x7FFFFFFF;
        v7 = v14 + v13;
        *((_DWORD *)v9 + 1) = v7;
        v8 = v4[257];
        v15 = v8 - 1;
      }
      while (v5 <= v15);
      v16 = v2 << v6;
      if (v6 >= 0x40)
        v16 = 0;
      v2 = v16 + (*(_DWORD *)(a1 + 56) & v15);
      ++v3;
    }
    while (v3 != v1);
    *v4 = v7;
  }
  else
  {
    v2 = 0;
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v1 < v17)
  {
    v18 = *(unsigned int **)a1;
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = **(_DWORD **)a1;
    v22 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v23 = (char *)v18
            + (((unint64_t)((((unint64_t)(v22 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v18[257] = *((_DWORD *)v23 + 1);
        v24 = v21 / 0x1F31D;
        v25 = 16807 * (v21 % 0x1F31D);
        v24 *= 2836;
        v12 = v25 >= v24;
        v26 = v25 - v24;
        if (v12)
          v27 = 0;
        else
          v27 = 0x7FFFFFFF;
        v21 = v27 + v26;
        *((_DWORD *)v23 + 1) = v21;
        v22 = v18[257];
        v28 = v22 - 1;
      }
      while (v19 <= v28);
      v29 = v2 << (v20 + 1);
      if (v20 >= 0x3F)
        v29 = 0;
      v2 = v29 + (*(_DWORD *)(a1 + 60) & v28);
      ++v1;
    }
    while (v1 != v17);
    *v18 = v21;
  }
  return v2;
}

void CoreML::Specification::Metadata::~Metadata(CoreML::Specification::Metadata *this)
{
  CoreML::Specification::Metadata::~Metadata(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E9566038;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1D8251A40](v6, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 9);
  if ((uint64_t *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1D8251A40](v7, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Metadata::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Metadata");
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this)
{
  return CoreML::Specification::Metadata::New(this, 0);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Metadata *v3;

  v3 = (CoreML::Specification::Metadata *)operator new();
  CoreML::Specification::Metadata::Metadata(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Metadata>(a2, v3);
  return v3;
}

void sub_1D3B0C518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::Clear(CoreML::Specification::Metadata *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::protobuf::Map<std::string,std::string>::clear((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 8);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 9);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::Metadata::IsInitialized(CoreML::Specification::Metadata *this)
{
  return 1;
}

uint64_t CoreML::Specification::Metadata::MergePartialFromCodedStream(CoreML::Specification::Metadata *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  std::string **v5;
  std::string **v6;
  std::string **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type size;
  char *v17;
  int VarintSizeAsIntFallback;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  google::protobuf::Arena **v22;
  int v23;
  int v24;
  BOOL v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  int v37;
  __n128 v38;
  uint64_t v39;
  std::string *v40;
  __n128 v41;
  unsigned int *v42;
  int v43;
  unsigned int *v44;
  std::string::size_type v45;
  const char *v46;
  _BOOL4 v47;
  BOOL v48;
  int v49;
  unsigned int TagFallback;
  std::string *v53;
  int v54;
  _QWORD *v55;
  std::string **v56;
  google::protobuf::Arena **v57;
  _QWORD *v58;
  std::string __p;
  std::string *v60;
  _DWORD *v61;

  v4 = (google::protobuf::Arena **)((char *)this + 16);
  v55 = (_QWORD *)((char *)this + 24);
  v56 = (std::string **)((char *)this + 72);
  v5 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 **)a2;
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v9)
        break;
      LODWORD(v11) = 0;
LABEL_116:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
      v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v12 & 0x100000000) == 0)
        goto LABEL_117;
LABEL_9:
      switch(v12 >> 3)
      {
        case 1u:
          if (v12 != 10)
            goto LABEL_117;
          v14 = *v7;
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v14 = *v7;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v14))
            return 0;
          v15 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.shortDescription";
          goto LABEL_97;
        case 2u:
          if (v12 != 18)
            goto LABEL_117;
          v21 = *v6;
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v21 = *v6;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21))
            return 0;
          v15 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.versionString";
          goto LABEL_97;
        case 3u:
          if (v12 != 26)
            goto LABEL_117;
          v19 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v19 = *v5;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v19))
            return 0;
          v15 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.author";
          goto LABEL_97;
        case 4u:
          if (v12 != 34)
            goto LABEL_117;
          v20 = *v56;
          if (*v56 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v56, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v20 = *v56;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20))
            return 0;
          v15 = *v56;
          if (SHIBYTE((*v56)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v56)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v56)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.license";
LABEL_97:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v46))
            return 0;
          continue;
        default:
          if (v12 >> 3 != 100 || v12 != 34)
            goto LABEL_117;
          v57 = v4;
          v58 = v55;
          memset(&__p, 0, sizeof(__p));
          v61 = 0;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
          {
            v22 = v4;
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              goto LABEL_111;
          }
          else
          {
            VarintSizeAsIntFallback = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v24 = *((_DWORD *)a2 + 13);
          v25 = __OFSUB__(v24--, 1);
          *((_DWORD *)a2 + 13) = v24;
          if (v24 < 0 != v25)
          {
            v22 = v4;
            goto LABEL_111;
          }
          v54 = v23;
          v22 = v4;
          v26 = *(_BYTE **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 != 10)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            memset(&__p, 0, sizeof(__p));
LABEL_69:
            v39 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v57);
            if (v61 != (_DWORD *)v39)
            {
              if (v61)
                (*(void (**)(void))(*(_QWORD *)v61 + 8))();
              v61 = (_DWORD *)v39;
            }
            v40 = *(std::string **)(v39 + 16);
            *(_DWORD *)(v39 + 40) |= 1u;
            if (v40 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v39 + 16), *(google::protobuf::Arena ***)(v39 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v40 = *(std::string **)(v39 + 16);
            }
            std::string::operator=(v40, &__p);
            v37 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v61 + 88))(v61, a2);
            if (v37)
              v41 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v57);
            if ((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v61 + 40))(v61, v41))
              goto LABEL_78;
            goto LABEL_64;
          }
          *(_QWORD *)a2 = v26 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, &__p))
            goto LABEL_111;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 1)
            goto LABEL_69;
          if (**(_BYTE **)a2 != 18)
            goto LABEL_69;
          v27 = *(_QWORD *)v58[2];
          v60 = (std::string *)google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)v58, (uint64_t)&__p);
          if (v27 == *(_QWORD *)v58[2])
            goto LABEL_69;
          google::protobuf::io::CodedInputStream::Skip(a2, 1u);
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v60))
          {
            google::protobuf::Map<std::string,std::string>::erase(v58, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_111:
            v48 = 0;
            v49 = 6;
            goto LABEL_103;
          }
          if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            *((_BYTE *)a2 + 36) = 1;
            goto LABEL_79;
          }
          v28 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v57);
          if (v61 != (_DWORD *)v28)
          {
            if (v61)
              (*(void (**)(void))(*(_QWORD *)v61 + 8))();
            v61 = (_DWORD *)v28;
          }
          v29 = v60;
          v30 = *(_QWORD *)(v28 + 24);
          *(_DWORD *)(v28 + 40) |= 2u;
          if ((uint64_t *)v30 == &google::protobuf::internal::fixed_address_empty_string)
          {
            v53 = v29;
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v28 + 24), *(google::protobuf::Arena ***)(v28 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v30 = *(_QWORD *)(v28 + 24);
            v29 = v53;
          }
          if (*(char *)(v30 + 23) < 0)
          {
            v31 = v29;
            operator delete(*(void **)v30);
            v29 = v31;
          }
          v32 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
          *(_OWORD *)v30 = v32;
          *((_BYTE *)&v29->__r_.__value_.__s + 23) = 0;
          v29->__r_.__value_.__s.__data_[0] = 0;
          google::protobuf::Map<std::string,std::string>::erase(v58, (const void **)&__p.__r_.__value_.__l.__data_);
          v33 = v61;
          v61[10] |= 1u;
          v35 = (uint64_t *)(v33 + 4);
          v34 = *((_QWORD *)v33 + 2);
          if ((uint64_t *)v34 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)v33 + 2, *((google::protobuf::Arena ***)v33 + 4), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *v35;
          }
          if (*(char *)(v34 + 23) < 0)
            operator delete(*(void **)v34);
          v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v34 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v34 = v36;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          v37 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v61 + 88))(v61, a2);
          if (v37)
            v38 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v57);
          if ((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v61 + 40))(v61, v38))
          {
LABEL_78:
            v61 = 0;
            if ((v37 & 1) == 0)
            {
              v48 = 0;
              v49 = 6;
              goto LABEL_105;
            }
            goto LABEL_79;
          }
LABEL_64:
          if (!v37)
            goto LABEL_111;
LABEL_79:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v54))
            goto LABEL_111;
          v42 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (unsigned int *)&__p
              : (unsigned int *)__p.__r_.__value_.__r.__words[0];
          v43 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : LODWORD(__p.__r_.__value_.__r.__words[1]);
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key"))goto LABEL_111;
          v44 = (unsigned int *)v60;
          if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
          {
            v44 = (unsigned int *)v60->__r_.__value_.__r.__words[0];
            v45 = v60->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(v45) = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          }
          v47 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
          v48 = v47;
          if (v47)
            v49 = 0;
          else
            v49 = 6;
LABEL_103:
          if (v61)
            (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
LABEL_105:
          v4 = v22;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v48 && v49)
            return 0;
          break;
      }
    }
    v10 = v8 + 1;
    v11 = *v8;
    if ((char)*v8 < 1)
    {
      if ((unint64_t)v10 < v9)
      {
        v13 = *v10;
        if ((v11 & ~v13) >= 0x80)
        {
          *(_QWORD *)a2 = v8 + 2;
          v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_116;
    }
    *(_QWORD *)a2 = v10;
    v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_117:
    if (!(_DWORD)v12 || (v12 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0;
  }
}

void sub_1D3B0CD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Metadata::SerializeWithCachedSizes(CoreML::Specification::Metadata *this, google::protobuf::io::CodedOutputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  _QWORD v26[3];

  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(unsigned int **)v4;
    goto LABEL_6;
  }
  LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.Metadata.shortDescription");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_13;
    v6 = *(unsigned int **)v6;
    goto LABEL_12;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.Metadata.versionString");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 7), a2);
  }
LABEL_13:
  v8 = (unsigned int *)*((_QWORD *)this + 8);
  if (*((char *)v8 + 23) < 0)
  {
    v9 = *((_QWORD *)v8 + 1);
    if (!v9)
      goto LABEL_19;
    v8 = *(unsigned int **)v8;
    goto LABEL_18;
  }
  LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  if (*((_BYTE *)v8 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.Metadata.author");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((_QWORD *)this + 8), a2);
  }
LABEL_19:
  result = *((_QWORD *)this + 9);
  if (*(char *)(result + 23) < 0)
  {
    v11 = *(_QWORD *)(result + 8);
    if (!v11)
      goto LABEL_25;
    result = *(_QWORD *)result;
    goto LABEL_24;
  }
  LODWORD(v11) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v11, 1, (uint64_t)"CoreML.Specification.Metadata.license");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((_QWORD *)this + 9), a2);
  }
LABEL_25:
  v12 = (unint64_t *)*((_QWORD *)this + 5);
  v13 = *v12;
  if (!*v12)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v13 < 2 || !*((_BYTE *)a2 + 27))
    {
LABEL_36:
      result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v26, v12);
      v17 = 0;
      while (v26[0])
      {
        v19 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v26[0] + 24), *(_QWORD *)(v26[0] + 24) + 24, *((google::protobuf::Arena **)this + 2));
        if (v17 != v19)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v17 = v19;
        }
        google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v17, a2, v18);
        CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*(unsigned int **)(v26[0] + 24));
        result = (uint64_t)google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v26);
      }
      if (v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      return result;
    }
  }
  else if (v13 < 2 || !google::protobuf::io::CodedOutputStream::default_serialization_deterministic_)
  {
    goto LABEL_36;
  }
  v14 = operator new[]();
  google::protobuf::Map<std::string,std::string>::begin(v26, *((_QWORD **)this + 5));
  v15 = v26[0];
  if (v26[0])
  {
    v16 = 0;
    do
    {
      *(_QWORD *)(v14 + 8 * v16) = *(_QWORD *)(v15 + 24);
      google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v26);
      ++v16;
      v15 = v26[0];
    }
    while (v26[0]);
  }
  else
  {
    v16 = 0;
  }
  v20 = 126 - 2 * __clz(v16);
  if (v16)
    v21 = v20;
  else
    v21 = 0;
  std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v14, (char *)(v14 + 8 * v16), v21, 1);
  if (v16)
  {
    v22 = 0;
    v23 = (uint64_t *)v14;
    do
    {
      v25 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*v23, *v23 + 24, *((google::protobuf::Arena **)this + 2));
      if (v22 != v25)
      {
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v22 = v25;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v22, a2, v24);
      CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check((unsigned int *)*v23++);
      --v16;
    }
    while (v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return MEMORY[0x1D8251A28](v14, 0x60C8044C4A2DFLL);
}

void sub_1D3B0D0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Metadata::GetCachedSize(CoreML::Specification::Metadata *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(unsigned int *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    a1 = *(unsigned int **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    LODWORD(v2) = *((unsigned __int8 *)a1 + 23);
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String(a1, v2, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key");
  if (*((char *)v1 + 47) < 0)
  {
    v3 = (unsigned int *)*((_QWORD *)v1 + 3);
    v4 = *((_QWORD *)v1 + 4);
  }
  else
  {
    v3 = v1 + 6;
    LODWORD(v4) = *((unsigned __int8 *)v1 + 47);
  }
  return google::protobuf::internal::WireFormatLite::VerifyUtf8String(v3, v4, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3)
{
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *a2;
  v7 = *a1;
  v8 = std::less<std::string>::operator()[abi:ne180100](*a2, *a1);
  v9 = *a3;
  result = std::less<std::string>::operator()[abi:ne180100](*a3, v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v13 = *a3;
      result = std::less<std::string>::operator()[abi:ne180100](*a3, v7);
      if (!result)
        return result;
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    v11 = *a2;
    v12 = *a1;
    result = std::less<std::string>::operator()[abi:ne180100](*a2, *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = std::less<std::string>::operator()[abi:ne180100](*a4, *a3);
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = std::less<std::string>::operator()[abi:ne180100](*a3, *a2);
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = std::less<std::string>::operator()[abi:ne180100](*a2, *a1);
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, _QWORD **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _BOOL8 result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  result = std::less<std::string>::operator()[abi:ne180100](*a5, *a4);
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    v13 = *a4;
    v14 = *a3;
    result = std::less<std::string>::operator()[abi:ne180100](*a4, *a3);
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      result = std::less<std::string>::operator()[abi:ne180100](*a3, *a2);
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        result = std::less<std::string>::operator()[abi:ne180100](*a2, *a1);
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

double google::protobuf::Map<std::string,std::string>::erase(_QWORD *a1, const void **a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(a1[2], a2, 0, (uint64_t)&v6);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a1;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95677F0;
  return result;
}

__n128 google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,std::string>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v4 + 24), *(google::protobuf::Arena ***)(v4 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v5 = *(_QWORD *)(v4 + 24);
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  if (*((char *)v3 + 23) < 0)
    operator delete(*v3);
  result = *(__n128 *)v5;
  v3[2] = *(google::protobuf::Arena **)(v5 + 16);
  *(__n128 *)v3 = result;
  *(_BYTE *)(v5 + 23) = 0;
  *(_BYTE *)v5 = 0;
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Metadata>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::FeatureDescription::~FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  CoreML::Specification::FeatureDescription::~FeatureDescription(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E955E420;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::FeatureDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureDescription");
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this)
{
  return CoreML::Specification::FeatureDescription::New(this, 0);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::FeatureDescription *v3;

  v3 = (CoreML::Specification::FeatureDescription *)operator new();
  CoreML::Specification::FeatureDescription::FeatureDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(a2, v3);
  return v3;
}

void sub_1D3B0E06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::IsInitialized(CoreML::Specification::FeatureDescription *this)
{
  return 1;
}

uint64_t CoreML::Specification::FeatureDescription::SerializeWithCachedSizes(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_7;
    v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FeatureDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  result = *((_QWORD *)this + 3);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      goto LABEL_13;
    result = *(_QWORD *)result;
    goto LABEL_12;
  }
  LODWORD(v9) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.FeatureDescription.shortDescription");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 3), a2);
  }
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::GetCachedSize(CoreML::Specification::FeatureDescription *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::PipelineRegressor::~PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::PipelineRegressor::~PipelineRegressor(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E955DD98;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::PipelineRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineRegressor");
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this)
{
  return CoreML::Specification::PipelineRegressor::New(this, 0);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PipelineRegressor *v3;

  v3 = (CoreML::Specification::PipelineRegressor *)operator new();
  CoreML::Specification::PipelineRegressor::PipelineRegressor(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(a2, v3);
  return v3;
}

void sub_1D3B0E344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::Clear(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::IsInitialized(CoreML::Specification::PipelineRegressor *this)
{
  return 1;
}

uint64_t *CoreML::Specification::PipelineRegressor::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::PipelineRegressor::GetCachedSize(CoreML::Specification::PipelineRegressor *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::PipelineClassifier::~PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::PipelineClassifier::~PipelineClassifier(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E955E718;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::PipelineClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineClassifier");
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this)
{
  return CoreML::Specification::PipelineClassifier::New(this, 0);
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PipelineClassifier *v3;

  v3 = (CoreML::Specification::PipelineClassifier *)operator new();
  CoreML::Specification::PipelineClassifier::PipelineClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(a2, v3);
  return v3;
}

void sub_1D3B0E524(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::Clear(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::IsInitialized(CoreML::Specification::PipelineClassifier *this)
{
  return 1;
}

uint64_t *CoreML::Specification::PipelineClassifier::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::PipelineClassifier::GetCachedSize(CoreML::Specification::PipelineClassifier *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SerializedModel::~SerializedModel(CoreML::Specification::SerializedModel *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E955C670;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E955C670;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::SerializedModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SerializedModel");
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this)
{
  return CoreML::Specification::SerializedModel::New(this, 0);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SerializedModel *v3;

  v3 = (CoreML::Specification::SerializedModel *)operator new();
  CoreML::Specification::SerializedModel::SerializedModel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(a2, v3);
  return v3;
}

void sub_1D3B0E764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SerializedModel::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::SerializedModel::IsInitialized(CoreML::Specification::SerializedModel *this)
{
  return 1;
}

uint64_t CoreML::Specification::SerializedModel::SerializeWithCachedSizes(CoreML::Specification::SerializedModel *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v5) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v5, 1, (uint64_t)"CoreML.Specification.SerializedModel.identifier");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v6 + 23))
      return result;
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2u, v6, a2);
  }
  if (*(_QWORD *)(v6 + 8))
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2u, v6, a2);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::GetCachedSize(CoreML::Specification::SerializedModel *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 24);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    JUMPOUT(0x1D8251A40);
  }
  return this;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x1D8251A40](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::FeatureDescription::CopyFrom(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  if (a2 != this)
  {
    CoreML::Specification::FeatureDescription::Clear(this);
    CoreML::Specification::FeatureDescription::MergeFrom(this, a2);
  }
}

void CoreML::Specification::Metadata::CopyFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  if (a2 != this)
  {
    CoreML::Specification::Metadata::Clear(this);
    CoreML::Specification::Metadata::MergeFrom(this, a2);
  }
}

void CoreML::Specification::FunctionDescription::CopyFrom(CoreML::Specification::FunctionDescription *this, const CoreML::Specification::FunctionDescription *a2)
{
  if (a2 != this)
  {
    CoreML::Specification::FunctionDescription::Clear((uint64_t)this);
    CoreML::Specification::FunctionDescription::MergeFrom(this, a2);
  }
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t *v4;
  google::protobuf::Arena **v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  signed int v14;
  signed int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  signed int v19;
  signed int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  signed int v24;
  signed int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  signed int v29;
  signed int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)this = &off_1E955D250;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (google::protobuf::Arena **)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5, (CoreML::Specification::FeatureDescription **)v8, (const CoreML::Specification::FeatureDescription **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (signed int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v11 = *((_DWORD *)a2 + 12);
  if (v11)
  {
    v12 = *((_QWORD *)a2 + 7);
    v13 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v13, (const CoreML::Specification::FeatureDescription **)(v12 + 8), v11, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v14 = *((_DWORD *)this + 12) + v11;
    *((_DWORD *)this + 12) = v14;
    v15 = (signed int *)*((_QWORD *)this + 7);
    if (*v15 < v14)
      *v15 = v14;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v16 = *((_DWORD *)a2 + 18);
  if (v16)
  {
    v17 = *((_QWORD *)a2 + 10);
    v18 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v18, (const CoreML::Specification::FeatureDescription **)(v17 + 8), v16, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v19 = *((_DWORD *)this + 18) + v16;
    *((_DWORD *)this + 18) = v19;
    v20 = (signed int *)*((_QWORD *)this + 10);
    if (*v20 < v19)
      *v20 = v19;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v21 = *((_DWORD *)a2 + 24);
  if (v21)
  {
    v22 = *((_QWORD *)a2 + 13);
    v23 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 88), *((_DWORD *)a2 + 24));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((google::protobuf::Arena **)this + 11, (CoreML::Specification::FunctionDescription **)v23, (const CoreML::Specification::FunctionDescription **)(v22 + 8), v21, **((_DWORD **)this + 13) - *((_DWORD *)this + 24));
    v24 = *((_DWORD *)this + 24) + v21;
    *((_DWORD *)this + 24) = v24;
    v25 = (signed int *)*((_QWORD *)this + 13);
    if (*v25 < v24)
      *v25 = v24;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v26 = *((_DWORD *)a2 + 30);
  if (v26)
  {
    v27 = *((_QWORD *)a2 + 16);
    v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 112), *((_DWORD *)a2 + 30));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 14, (CoreML::Specification::FeatureDescription **)v28, (const CoreML::Specification::FeatureDescription **)(v27 + 8), v26, **((_DWORD **)this + 16) - *((_DWORD *)this + 30));
    v29 = *((_DWORD *)this + 30) + v26;
    *((_DWORD *)this + 30) = v29;
    v30 = (signed int *)*((_QWORD *)this + 16);
    if (*v30 < v29)
      *v30 = v29;
  }
  *((_DWORD *)this + 42) = 0;
  v31 = *((_QWORD *)a2 + 1);
  if ((v31 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v31 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  v32 = *((_QWORD *)a2 + 17);
  if (*(char *)(v32 + 23) < 0)
    v33 = *(_QWORD *)(v32 + 8);
  else
    v33 = *(unsigned __int8 *)(v32 + 23);
  if ((uint64_t *)v32 != &google::protobuf::internal::fixed_address_empty_string && v33)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, v32);
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  v34 = *((_QWORD *)a2 + 18);
  if (*(char *)(v34 + 23) < 0)
    v35 = *(_QWORD *)(v34 + 8);
  else
    v35 = *(unsigned __int8 *)(v34 + 23);
  if ((uint64_t *)v34 != &google::protobuf::internal::fixed_address_empty_string && v35)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, v34);
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  v36 = *((_QWORD *)a2 + 19);
  if (*(char *)(v36 + 23) < 0)
    v37 = *(_QWORD *)(v36 + 8);
  else
    v37 = *(unsigned __int8 *)(v36 + 23);
  if ((uint64_t *)v36 != &google::protobuf::internal::fixed_address_empty_string && v37)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, v36);
  v38 = 0;
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((_QWORD *)a2 + 20))
  {
    v38 = operator new();
    v39 = *((_QWORD *)a2 + 20);
    *(_QWORD *)v38 = &off_1E9566038;
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = 0;
    *(_QWORD *)(v38 + 24) = 0;
    *(_DWORD *)(v38 + 32) = 0;
    google::protobuf::Map<std::string,std::string>::Init(v38 + 24);
    *(_DWORD *)(v38 + 32) = 0;
    *(_DWORD *)(v38 + 80) = 0;
    v40 = *(_QWORD *)(v39 + 8);
    if ((v40 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v38 + 8), v40 & 0xFFFFFFFFFFFFFFFELL);
    google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(v38 + 16, *(_QWORD **)(v39 + 40));
    *(_QWORD *)(v38 + 48) = &google::protobuf::internal::fixed_address_empty_string;
    v41 = *(_QWORD *)(v39 + 48);
    if (*(char *)(v41 + 23) < 0)
      v42 = *(_QWORD *)(v41 + 8);
    else
      v42 = *(unsigned __int8 *)(v41 + 23);
    if ((uint64_t *)v41 != &google::protobuf::internal::fixed_address_empty_string && v42)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v38 + 48), v41);
    *(_QWORD *)(v38 + 56) = &google::protobuf::internal::fixed_address_empty_string;
    v43 = *(_QWORD *)(v39 + 56);
    if (*(char *)(v43 + 23) < 0)
      v44 = *(_QWORD *)(v43 + 8);
    else
      v44 = *(unsigned __int8 *)(v43 + 23);
    if ((uint64_t *)v43 != &google::protobuf::internal::fixed_address_empty_string && v44)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v38 + 56), v43);
    *(_QWORD *)(v38 + 64) = &google::protobuf::internal::fixed_address_empty_string;
    v45 = *(_QWORD *)(v39 + 64);
    if (*(char *)(v45 + 23) < 0)
      v46 = *(_QWORD *)(v45 + 8);
    else
      v46 = *(unsigned __int8 *)(v45 + 23);
    if ((uint64_t *)v45 != &google::protobuf::internal::fixed_address_empty_string && v46)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v38 + 64), v45);
    *(_QWORD *)(v38 + 72) = &google::protobuf::internal::fixed_address_empty_string;
    v47 = *(_QWORD *)(v39 + 72);
    if (*(char *)(v47 + 23) < 0)
      v48 = *(_QWORD *)(v47 + 8);
    else
      v48 = *(unsigned __int8 *)(v47 + 23);
    if ((uint64_t *)v47 != &google::protobuf::internal::fixed_address_empty_string && v48)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v38 + 72), v47);
  }
  *((_QWORD *)this + 20) = v38;
  return this;
}

void sub_1D3B0F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, _QWORD *a12)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a11);
  MEMORY[0x1D8251A40](v16, 0x10A1C40FB0D5B10);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v15);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v14);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v13);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v12);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(a12);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a10);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ModelDescription::CopyFrom(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  if (a2 != this)
  {
    CoreML::Specification::ModelDescription::Clear(this);
    CoreML::Specification::ModelDescription::MergeFrom(this, a2);
  }
}

void CoreML::Specification::Identity::~Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_1E9565F08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E9565F08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::Identity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Identity");
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this)
{
  return CoreML::Specification::Identity::New(this, 0);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Identity *v3;

  v3 = (CoreML::Specification::Identity *)operator new();
  CoreML::Specification::Identity::Identity(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Identity>(a2, v3);
  return v3;
}

void sub_1D3B0F230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Identity::IsInitialized(CoreML::Specification::Identity *this)
{
  return 1;
}

std::string *CoreML::Specification::Identity::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::Identity::MergePartialFromCodedStream(CoreML::Specification::Identity *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::Identity::ByteSizeLong(CoreML::Specification::Identity *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::Identity::GetCachedSize(CoreML::Specification::Identity *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_1E9565F08;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Identity *)&CoreML::Specification::_Identity_default_instance_)
    CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B0F354(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Identity>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(CoreML::Specification::protobuf_Identity_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Identity_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_Identity_default_instance_ = (uint64_t)&off_1E9565F08;
  qword_1EDB8F628 = 0;
  dword_1EDB8F630 = 0;
  byte_1EDB8F638 = 1;
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::~VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(_QWORD *)this = &off_1E955A8C0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E955A8C0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Scene");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(a2, v3);
  return v3;
}

void sub_1D3B0F52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(_QWORD *)this = &off_1E955A8C0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_1D3B0F744(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EDB8F2D0 = 0;
  *(_QWORD *)&dword_1EDB8F2D8 = 0;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_ = (uint64_t)&off_1E955A8C0;
  byte_1EDB8F2E0 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_ = (uint64_t)&off_1E955A9F0;
  result = 0.0;
  *(_OWORD *)algn_1EDB8F320 = 0u;
  *(_OWORD *)&algn_1EDB8F320[16] = 0u;
  qword_1EDB8F340 = 0;
  byte_1EDB8F348 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_ = (uint64_t)&off_1E955A790;
  unk_1EDB8F278 = 0;
  qword_1EDB8F288 = 0;
  byte_1EDB8F290 = 1;
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E955A790;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(a2, v3);
  return v3;
}

void sub_1D3B0F918(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *v11;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v12;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        LODWORD(v8) = 0;
        goto LABEL_34;
      }
      v7 = v5 + 1;
      v8 = *v5;
      if ((char)*v5 >= 1)
        break;
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
LABEL_34:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_35;
LABEL_8:
      if (v9 >> 3 == 21)
      {
        if (v9 != 170)
          goto LABEL_35;
        if (*((_DWORD *)this + 7) == 21)
        {
          v12 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 21;
          v12 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
          CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v25 = *((_DWORD *)a2 + 13);
        v20 = __OFSUB__(v25--, 1);
        *((_DWORD *)a2 + 13) = v25;
        if (v25 < 0 != v20)
          return 0;
        v21 = v23;
        result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(v12, a2, v24);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v9 >> 3 != 20 || v9 != 162)
          goto LABEL_35;
        if (*((_DWORD *)this + 7) == 20)
        {
          v11 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 20;
          v11 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)operator new();
          CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v13 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
        {
          v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v14 < 0)
            return 0;
        }
        else
        {
          v14 = *v13;
          *(_QWORD *)a2 = v13 + 1;
        }
        v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
        v19 = *((_DWORD *)a2 + 13);
        v20 = __OFSUB__(v19--, 1);
        *((_DWORD *)a2 + 13) = v19;
        if (v19 < 0 != v20)
          return 0;
        v21 = v17;
        result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(v11, (char **)a2, v18);
        if (!(_DWORD)result)
          return result;
      }
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
        return 0;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_35:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B0FBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 21)
  {
    v6 = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects **)this
                                                                                       + 2));
    result = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  else if (v2 == 20)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *(_DWORD *)(v3 + 16);
    if (v4)
    {
      if (v4 < 0)
        v5 = 11;
      else
        v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(v3 + 20) = v5;
    result = v5 + 3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 20)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 21)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x15, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *((unsigned int *)this + 6);
  v2 = 2 * v1;
  if ((int)v1 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  v7 = *((_DWORD *)this + 10);
  if (v7)
  {
    if (v7 < 0)
      v8 = 11;
    else
      v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v8;
  }
  *((_DWORD *)this + 11) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 21 || v2 == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  *(_QWORD *)this = &off_1E955A9F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1D3B0FE58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  std::string *Aligned;
  google::protobuf::Arena *v19;
  google::protobuf::Arena **v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int TagFallback;
  BOOL v30;
  uint64_t Varint32Fallback;

  v5 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_40:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_41;
          goto LABEL_9;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_40;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_41;
LABEL_9:
        if (v10 >> 3 != 100)
          break;
        if (v10 != 34)
          goto LABEL_41;
        v15 = (int *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v16 = *((_DWORD *)this + 6);
          v17 = *((_DWORD *)this + 7);
          goto LABEL_24;
        }
        v16 = *((_DWORD *)this + 6);
        v17 = *v15;
        if (v16 >= *v15)
        {
          if (v17 == *((_DWORD *)this + 7))
          {
LABEL_24:
            if (v16 <= v17)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v17 - v16 + 1);
              v15 = (int *)*((_QWORD *)this + 4);
            }
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v19 = *(google::protobuf::Arena **)v5;
          if (*(_QWORD *)v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v20 = google::protobuf::Arena::AllocateAligned(v19, 0, 24);
            *v20 = (google::protobuf::Arena *)Aligned;
            v20[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v21 = (unint64_t *)((char *)v19 + 32);
            do
              v22 = __ldxr(v21);
            while (__stxr((unint64_t)v20, v21));
            v20[2] = (google::protobuf::Arena *)v22;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v23 = *((_QWORD *)this + 4);
          v24 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v24 + 1;
          *(_QWORD *)(v23 + 8 * v24 + 8) = Aligned;
          goto LABEL_33;
        }
        *((_DWORD *)this + 6) = v16 + 1;
        Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_33:
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, Aligned);
        if (!result)
          return result;
        v26 = *((_QWORD *)this + 4);
        v27 = *(unsigned int **)(v26 + 8 * *((int *)this + 6));
        if (*((char *)v27 + 23) < 0)
        {
          v27 = *(unsigned int **)v27;
          v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * *((int *)this + 6)) + 8);
        }
        else
        {
          LODWORD(v28) = *((unsigned __int8 *)v27 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output"))return 0;
      }
      if (v10 >> 3 != 1 || v10 != 8)
        break;
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v14 = 0;
      }
      else
      {
        v14 = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v13 + 1;
          goto LABEL_49;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
      v14 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_49:
      *((_DWORD *)this + 10) = v14;
    }
LABEL_41:
    if ((_DWORD)v10)
      v30 = (v10 & 7) == 4;
    else
      v30 = 1;
    if (v30)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v7;
  uint64_t *v8;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v9;
  const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v10;
  uint64_t v11;
  int v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 21)
  {
    if (*(_DWORD *)(v3 + 28) == 21)
    {
      v7 = *(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
      *(_DWORD *)(v3 + 28) = 21;
      v7 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
      v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) != 21)
      {
        CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_;
        return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom((std::string *)v7, v10);
      }
    }
    v10 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((_QWORD *)a2 + 2);
    return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom((std::string *)v7, v10);
  }
  if (v5 != 20)
    return this;
  if (*(_DWORD *)(v3 + 28) == 20)
  {
    v6 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
    *(_DWORD *)(v3 + 28) = 20;
    v6 = operator new();
    this = (std::string *)CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene((CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)v6);
    *(_QWORD *)(v3 + 16) = v6;
    if (*((_DWORD *)a2 + 7) != 20)
    {
      this = (std::string *)CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)this);
      v8 = &CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_;
      goto LABEL_14;
    }
  }
  v8 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_14:
  v11 = v8[1];
  if ((v11 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v6 + 8), v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = *((_DWORD *)v8 + 4);
  if (v12)
    *(_DWORD *)(v6 + 16) = v12;
  return this;
}

void sub_1D3B1027C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const std::string **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;
  int v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const std::string **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v10;
  return this;
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  *(_QWORD *)this = &off_1E955A790;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B103BC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::~VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E955A9F0;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E955A9F0;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(a2, v3);
  return v3;
}

void sub_1D3B10574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::Clear(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t result;

  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  v7 = *(unsigned int *)(v5 + 24);
  if ((int)v7 >= 1)
  {
    v8 = -v7;
    v9 = 1;
    do
    {
      v10 = *(unsigned int **)(*(_QWORD *)(v5 + 32) + 8 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        v10 = *(unsigned int **)v10;
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v9) + 8);
      }
      else
      {
        LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output");
      this = google::protobuf::internal::WireFormatLite::WriteString(0x64u, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v9++), a2);
    }
    while (v8 + v9 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return *((unsigned int *)this + 11);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::OneHotEncoder::~OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  CoreML::Specification::OneHotEncoder::~OneHotEncoder(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E955B4A0;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::OneHotEncoder::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.OneHotEncoder");
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this)
{
  return CoreML::Specification::OneHotEncoder::New(this, 0);
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::OneHotEncoder *v3;

  v3 = (CoreML::Specification::OneHotEncoder *)operator new();
  CoreML::Specification::OneHotEncoder::OneHotEncoder(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::OneHotEncoder>(a2, v3);
  return v3;
}

void sub_1D3B10774(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return CoreML::Specification::OneHotEncoder::clear_CategoryType(this);
}

uint64_t CoreML::Specification::OneHotEncoder::IsInitialized(CoreML::Specification::OneHotEncoder *this)
{
  return 1;
}

uint64_t CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(CoreML::Specification::OneHotEncoder *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  CoreML::Specification::Int64Vector *v11;
  char *v12;
  int v13;
  CoreML::Specification::StringVector *v14;
  char *v15;
  unint64_t Varint64Fallback;
  BOOL v17;
  char *v18;
  int VarintSizeAsIntFallback;
  char *v20;
  int v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t result;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
      }
      else
      {
        v6 = *v5;
        if (*v5 >= 1)
        {
          *(_QWORD *)a2 = v5 + 1;
          v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0)
            goto LABEL_29;
          goto LABEL_7;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        goto LABEL_29;
LABEL_7:
      v9 = v7 >> 3;
      if (v7 >> 3 <= 9)
        break;
      if (v9 == 10)
      {
        if (v7 != 80)
          goto LABEL_29;
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v22 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        *((_BYTE *)this + 16) = Varint64Fallback != 0;
      }
      else if (v9 == 11 && v7 == 88)
      {
        v12 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v13 = 0;
        }
        else
        {
          v13 = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v12 + 1;
            goto LABEL_56;
          }
        }
        Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
        v13 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_56:
        *((_DWORD *)this + 5) = v13;
      }
      else
      {
LABEL_29:
        if ((_DWORD)v7)
          v17 = (v7 & 7) == 4;
        else
          v17 = 1;
        if (v17)
          return 1;
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
      }
    }
    if (v9 == 1)
      break;
    if (v9 != 2 || v7 != 18)
      goto LABEL_29;
    if (*((_DWORD *)this + 9) == 2)
    {
      v11 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 3);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      v11 = (CoreML::Specification::Int64Vector *)operator new();
      CoreML::Specification::Int64Vector::Int64Vector(v11);
      *((_QWORD *)this + 3) = v11;
    }
    v18 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v18;
      *(_QWORD *)a2 = v18 + 1;
    }
    v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    v25 = *((_DWORD *)a2 + 13);
    v26 = __OFSUB__(v25--, 1);
    *((_DWORD *)a2 + 13) = v25;
    if (v25 < 0 != v26)
      return 0;
    v27 = v23;
    result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v11, a2, v24);
    if (!(_DWORD)result)
      return result;
LABEL_52:
    if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
      return 0;
  }
  if (v7 != 10)
    goto LABEL_29;
  if (*((_DWORD *)this + 9) == 1)
  {
    v14 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 3);
  }
  else
  {
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    v14 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v14);
    *((_QWORD *)this + 3) = v14;
  }
  v20 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
  {
    v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v21 < 0)
      return 0;
  }
  else
  {
    v21 = *v20;
    *(_QWORD *)a2 = v20 + 1;
  }
  v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
  v31 = *((_DWORD *)a2 + 13);
  v26 = __OFSUB__(v31--, 1);
  *((_DWORD *)a2 + 13) = v31;
  if (v31 < 0 == v26)
  {
    v27 = v29;
    result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v14, (char **)a2, v30);
    if (!(_DWORD)result)
      return result;
    goto LABEL_52;
  }
  return 0;
}

void sub_1D3B10A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::ByteSizeLong(CoreML::Specification::OneHotEncoder *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = 2 * *((unsigned __int8 *)this + 16);
  v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (v3 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v4;
  }
  v5 = *((_DWORD *)this + 9);
  if (v5 == 2)
  {
    v6 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 3));
    goto LABEL_10;
  }
  if (v5 == 1)
  {
    v6 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 3));
LABEL_10:
    v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

uint64_t CoreML::Specification::OneHotEncoder::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  signed int v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 24), a2, a4);
  if (*(_BYTE *)(v5 + 16))
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  v7 = *(_DWORD *)(v5 + 20);
  if (v7)
    return google::protobuf::internal::WireFormatLite::WriteEnum(11, v7, a2, a4);
  return this;
}

uint64_t CoreML::Specification::OneHotEncoder::GetCachedSize(CoreML::Specification::OneHotEncoder *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::OneHotEncoder::clear_CategoryType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

std::string *CoreML::Specification::OneHotEncoder::MergeFrom(std::string *this, const CoreML::Specification::OneHotEncoder *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  CoreML::Specification::StringVector *v7;
  CoreML::Specification::Int64Vector *v8;
  CoreML::Specification::StringVector *v9;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v10;
  CoreML::Specification::Int64Vector *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    *(_BYTE *)(v3 + 16) = 1;
  v5 = *((_DWORD *)a2 + 5);
  if (v5)
    *(_DWORD *)(v3 + 20) = v5;
  v6 = *((_DWORD *)a2 + 9);
  if (v6 == 2)
  {
    if (*(_DWORD *)(v3 + 36) == 2)
    {
      v8 = *(CoreML::Specification::Int64Vector **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 2;
      v8 = (CoreML::Specification::Int64Vector *)operator new();
      v11 = CoreML::Specification::Int64Vector::Int64Vector(v8);
      *(_QWORD *)(v3 + 24) = v8;
      if (*((_DWORD *)a2 + 9) != 2)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)(v3 + 36) == 1)
    {
      v7 = *(CoreML::Specification::StringVector **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 1;
      v7 = (CoreML::Specification::StringVector *)operator new();
      v9 = CoreML::Specification::StringVector::StringVector(v7);
      *(_QWORD *)(v3 + 24) = v7;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v7, v10);
      }
    }
    v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v7, v10);
  }
  return this;
}

void sub_1D3B10DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  *(_QWORD *)this = &off_1E955B4A0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_)
    CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B10E48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::OneHotEncoder>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(CoreML::Specification::protobuf_OneHotEncoder_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  qword_1EDB8FD78 = 0;
  qword_1EDB8FD60 = 0;
  unk_1EDB8FD68 = 0;
  CoreML::Specification::_OneHotEncoder_default_instance_ = (uint64_t)&off_1E955B4A0;
  byte_1EDB8FD80 = 1;
  return result;
}

void CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E955A660;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  v6 = *((_DWORD *)this + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      v7 = *((_QWORD *)this + 5);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    *((_DWORD *)this + 13) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::TextClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.TextClassifier");
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::TextClassifier *v3;

  v3 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
  CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(a2, v3);
  return v3;
}

void sub_1D3B11028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::IsInitialized(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return 1;
}

BOOL CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::string *v14;
  _BOOL8 result;
  unsigned int *v16;
  std::string::size_type size;
  CoreML::Specification::StringVector *v18;
  char *v19;
  int v20;
  std::string *v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)a2;
      v8 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v8)
      {
        LODWORD(v10) = 0;
LABEL_45:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0)
          goto LABEL_46;
        goto LABEL_9;
      }
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
        break;
      if ((unint64_t)v9 >= v8)
        goto LABEL_45;
      v12 = *v9;
      if ((v10 & ~v12) < 0x80)
        goto LABEL_45;
      *(_QWORD *)a2 = v7 + 2;
      v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34)
            goto LABEL_46;
          v21 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v21 = *v5;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21))
            return 0;
        }
        else
        {
          if (v13 != 200 || v11 != 66)
            goto LABEL_46;
          if (*((_DWORD *)this + 13) == 200)
          {
            v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
          }
          else
          {
            *((_DWORD *)this + 13) = 200;
            v18 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v18);
            *((_QWORD *)this + 5) = v18;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v26 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)a2 + 13) = v26;
          if (v26 < 0 != v27)
            return 0;
          v28 = v24;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v18, (char **)a2, v25);
          if (!result)
            return result;
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
            return 0;
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8)
          goto LABEL_46;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v20 = 0;
          goto LABEL_53;
        }
        v20 = *v19;
        if (*v19 < 0)
        {
LABEL_53:
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)a2 = v19 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82)
          goto LABEL_46;
        v14 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v6;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v14);
        if (!result)
          return result;
        v16 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = *(unsigned int **)v16;
          size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language"))return 0;
      }
    }
    *(_QWORD *)a2 = v9;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_46:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B113D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 8);
  if (v9)
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 13) == 200)
  {
    v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6)
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  LODWORD(v8) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v9 + 8))
LABEL_11:
    result = google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 5), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::GetCachedSize(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return *((unsigned int *)this + 12);
}

void CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(CoreML::Specification::CoreMLModels::TextClassifier *this, const CoreML::Specification::CoreMLModels::TextClassifier *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::StringVector *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (*((_DWORD *)this + 13) == 200)
    {
      v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
    }
    else
    {
      *((_DWORD *)this + 13) = 200;
      v10 = (CoreML::Specification::StringVector *)operator new();
      v11 = CoreML::Specification::StringVector::StringVector(v10);
      *((_QWORD *)this + 5) = v10;
      if (*((_DWORD *)a2 + 13) != 200)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        goto LABEL_28;
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 5);
LABEL_28:
    CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v10, v12);
  }
}

void sub_1D3B11760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(_QWORD *)this = &off_1E955A660;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B117E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_ = (uint64_t)&off_1E955A660;
  unk_1EDB8F200 = 0;
  qword_1EDB8F208 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB8F210 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB8F218 = 0;
  qword_1EDB8F228 = 0;
  byte_1EDB8F230 = 1;
  return result;
}

void CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9562BF8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::ClassConfidenceThresholding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ClassConfidenceThresholding");
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return CoreML::Specification::ClassConfidenceThresholding::New(this, 0);
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::ClassConfidenceThresholding *v3;

  v3 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
  CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::ClassConfidenceThresholding>(a2, v3);
  return v3;
}

void sub_1D3B11A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::PrecisionRecallCurve **v3;
  CoreML::Specification::PrecisionRecallCurve *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::PrecisionRecallCurve **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::PrecisionRecallCurve::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::IsInitialized(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return 1;
}

BOOL CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::PrecisionRecallCurve *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;
  unsigned int TagFallback;

  v5 = (CoreML::Specification::ClassConfidenceThresholding *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(unsigned __int8 **)a2;
      v7 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v7)
        break;
      LODWORD(v9) = 0;
LABEL_34:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_35;
LABEL_9:
      if (v10 != 34 || (v10 & 0xFFFFFFF8) != 0x320)
        goto LABEL_35;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_16;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 == *((_DWORD *)this + 7))
        {
LABEL_16:
          if (v13 <= v14)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
            v12 = (int *)*((_QWORD *)this + 4);
          }
          v14 = *v12;
        }
        *v12 = v14 + 1;
        v16 = *(google::protobuf::Arena **)v5;
        if (*(_QWORD *)v5)
        {
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
          v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v17 = Aligned;
          v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
          v18 = (unint64_t *)((char *)v16 + 32);
          do
            v19 = __ldxr(v18);
          while (__stxr((unint64_t)v17, v18));
          v17[2] = (google::protobuf::Arena *)v19;
        }
        else
        {
          Aligned = (CoreML::Specification::PrecisionRecallCurve *)operator new();
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
        }
        v20 = *((_QWORD *)this + 4);
        v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
        goto LABEL_25;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(CoreML::Specification::PrecisionRecallCurve **)&v12[2 * v13 + 2];
LABEL_25:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::PrecisionRecallCurve::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    v8 = v6 + 1;
    v9 = *v6;
    if ((char)*v6 < 1)
    {
      if ((unint64_t)v8 < v7)
      {
        v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(_QWORD *)a2 = v6 + 2;
          v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_34;
    }
    *(_QWORD *)a2 = v8;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_35:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B11D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(CoreML::Specification::ClassConfidenceThresholding *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int *v5;

  v2 = *((unsigned int *)this + 6);
  v3 = 2 * v2;
  if ((_DWORD)v2)
  {
    v4 = 0;
    do
    {
      v5 = CoreML::Specification::PrecisionRecallCurve::ByteSizeLong(*(CoreML::Specification::PrecisionRecallCurve **)(*((_QWORD *)this + 4) + 8 * v4 + 8));
      v3 += (uint64_t)v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v4;
    }
    while ((_DWORD)v2 != v4);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::GetCachedSize(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *CoreML::Specification::ClassConfidenceThresholding::MergeFrom(uint64_t *this, const CoreML::Specification::ClassConfidenceThresholding *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const CoreML::Specification::PrecisionRecallCurve **v11;
  std::string **v12;
  const CoreML::Specification::PrecisionRecallCurve *v13;
  const CoreML::Specification::PrecisionRecallCurve *v14;
  std::string *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::PrecisionRecallCurve **v19;
  const CoreML::Specification::PrecisionRecallCurve **v20;
  const CoreML::Specification::PrecisionRecallCurve *v21;
  CoreML::Specification::PrecisionRecallCurve *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (const CoreML::Specification::PrecisionRecallCurve **)(v28 + 8);
      v12 = (std::string **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::PrecisionRecallCurve **)((char *)v6 + v18);
      v20 = (const CoreML::Specification::PrecisionRecallCurve **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::PrecisionRecallCurve *)operator new();
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_1D3B12000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(const CoreML::Specification::PrecisionRecallCurve *a1, std::string *a2)
{
  return CoreML::Specification::PrecisionRecallCurve::MergeFrom(a2, a1);
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  *(_QWORD *)this = &off_1E9562BF8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_)
    CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B12094(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ClassConfidenceThresholding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_ClassConfidenceThresholding_default_instance_ = (uint64_t)&off_1E9562BF8;
  result = 0.0;
  unk_1EDB92ED8 = 0u;
  unk_1EDB92EE8 = 0u;
  dword_1EDB92EF8 = 0;
  byte_1EDB92F00 = 1;
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::BucketNumber(a2, a3);
  v9 = result;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, (unsigned __int8 *)v11, a3);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_10;
      }
      *a1 = v11;
      goto LABEL_12;
    }
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v12, a3);
    if (v12 + 8 != result)
    {
      if (a4)
        *a4 = result;
      *a1 = *(_QWORD *)(result + 32);
LABEL_12:
      a1[1] = a2;
      a1[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  a1[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:ne180100](a2, *(_QWORD **)(v5 + 32)))
    return v2;
  return v5;
}

void CoreML::Specification::Scaler::~Scaler(CoreML::Specification::Scaler *this)
{
  CoreML::Specification::Scaler::~Scaler(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E9564B70;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3 && !*v3)
    operator delete(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Scaler::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Scaler");
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this)
{
  return CoreML::Specification::Scaler::New(this, 0);
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Scaler *v3;

  v3 = (CoreML::Specification::Scaler *)operator new();
  CoreML::Specification::Scaler::Scaler(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Scaler>(a2, v3);
  return v3;
}

void sub_1D3B12418(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C403FC4B5CDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Scaler::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CoreML::Specification::Scaler::IsInitialized(CoreML::Specification::Scaler *this)
{
  return 1;
}

BOOL CoreML::Specification::Scaler::MergePartialFromCodedStream(CoreML::Specification::Scaler *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int VarintSizeAsIntFallback;
  BOOL v15;
  int v16;
  unint64_t **v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 result;
  signed int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  signed int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v7 = *a2;
            if (*a2 < a2[1])
              break;
            LODWORD(v8) = 0;
LABEL_7:
            TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v8);
            v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0)
              goto LABEL_8;
LABEL_20:
            if ((_DWORD)v9)
              v15 = (v9 & 7) == 4;
            else
              v15 = 1;
            if (v15)
              return 1;
            if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_7;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_20;
LABEL_8:
          if (v9 >> 3 != 2)
            break;
          if (v9 == 17)
          {
            v16 = 18;
            v17 = (unint64_t **)a2;
            v18 = (uint64_t)v5;
            goto LABEL_28;
          }
          if (v9 != 18)
            goto LABEL_20;
          v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
            if ((VarintSizeAsIntFallback & 0x80000000) != 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          if ((VarintSizeAsIntFallback & 7) != 0)
            return 0;
          v34 = *((_DWORD *)a2 + 12);
          if (v34 == 0x7FFFFFFF)
            v35 = -1;
          else
            v35 = v34 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          v36 = *((_DWORD *)a2 + 10);
          if (v36 == 0x7FFFFFFF)
            v37 = -1;
          else
            v37 = v36 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          v38 = *v5;
          v39 = VarintSizeAsIntFallback >> 3;
          if (v37 >= v35)
            v40 = v35;
          else
            v40 = v37;
          if (v35 == -1)
            v41 = v37;
          else
            v41 = v40;
          if (v41 >= (uint64_t)VarintSizeAsIntFallback)
          {
            v46 = v38 + v39;
            if (VarintSizeAsIntFallback > 7)
            {
              google::protobuf::RepeatedField<double>::Reserve(v5, v38 + v39);
              v47 = *((_QWORD *)this + 6);
              v50 = 8 * v46 - 8 * *((int *)this + 10);
              if (v50 >= 1)
                bzero((void *)(v47 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
            }
            else
            {
              v47 = *((_QWORD *)this + 6);
            }
            *v5 = v46;
            v51 = v47 + 8;
            if (!v47)
              v51 = 0;
            if (!google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v51 + 8 * v38), VarintSizeAsIntFallback))
            {
              if ((int)*v5 >= 1)
              {
                result = 0;
                *v5 = v38;
                return result;
              }
              return 0;
            }
          }
          else if (VarintSizeAsIntFallback >= 8)
          {
            if (v39 <= 1)
              v42 = 1;
            else
              v42 = VarintSizeAsIntFallback >> 3;
            do
            {
              v52 = 0;
              v43 = (unint64_t *)*a2;
              if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
              {
                result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
                if (!result)
                  return result;
                v44 = v52;
                v38 = *v5;
              }
              else
              {
                v44 = *v43;
                *a2 = (char *)(v43 + 1);
              }
              if (v38 == *((_DWORD *)this + 11))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v38 + 1);
                v38 = *v5;
              }
              v45 = *((_QWORD *)this + 6) + 8 * v38;
              *((_DWORD *)this + 10) = v38 + 1;
              *(_QWORD *)(v45 + 8) = v44;
              ++v38;
              --v42;
            }
            while (v42);
          }
        }
        if (v9 >> 3 != 1)
          goto LABEL_20;
        if (v9 != 9)
          break;
        v16 = 10;
        v17 = (unint64_t **)a2;
        v18 = (uint64_t)v6;
LABEL_28:
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(v16, v17, v18))return 0;
      }
      if (v9 != 10)
        goto LABEL_20;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *a2 = v11 + 1;
      }
      if ((v12 & 7) != 0)
        return 0;
      v19 = *((_DWORD *)a2 + 12);
      v20 = v19 == 0x7FFFFFFF
          ? -1
          : v19 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v21 = *((_DWORD *)a2 + 10);
      v22 = v21 == 0x7FFFFFFF
          ? -1
          : v21 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v23 = *v6;
      v24 = v12 >> 3;
      v25 = v22 >= v20 ? v20 : v22;
      v26 = v20 == -1 ? v22 : v25;
      if (v26 >= (uint64_t)v12)
        break;
      if (v12 >= 8)
      {
        if (v24 <= 1)
          v27 = 1;
        else
          v27 = v12 >> 3;
        do
        {
          v52 = 0;
          v28 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
            if (!result)
              return result;
            v29 = v52;
            v23 = *v6;
          }
          else
          {
            v29 = *v28;
            *a2 = (char *)(v28 + 1);
          }
          if (v23 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v6, v23 + 1);
            v23 = *v6;
          }
          v30 = *((_QWORD *)this + 3) + 8 * v23;
          *((_DWORD *)this + 4) = v23 + 1;
          *(_QWORD *)(v30 + 8) = v29;
          ++v23;
          --v27;
        }
        while (v27);
      }
    }
    v32 = v23 + v24;
    if (v12 > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v6, v23 + v24);
      v33 = *((_QWORD *)this + 3);
      v48 = 8 * v32 - 8 * *((int *)this + 4);
      if (v48 >= 1)
        bzero((void *)(v33 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
    }
    else
    {
      v33 = *((_QWORD *)this + 3);
    }
    *v6 = v32;
    v49 = v33 + 8;
    if (!v33)
      v49 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v49 + 8 * v23), v12));
  if ((int)*v6 >= 1)
  {
    result = 0;
    *v6 = v23;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Scaler::ByteSizeLong(CoreML::Specification::Scaler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v2;
  v4 = v3 + v2;
  v5 = *((unsigned int *)this + 10);
  v6 = 8 * v5;
  if ((_DWORD)v5)
  {
    if ((v6 & 0x80000000) != 0)
      v7 = 11;
    else
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v7;
  }
  v8 = v4 + v6;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v8;
  return v8;
}

uint64_t CoreML::Specification::Scaler::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char __src[5];
  char v23[5];

  v3 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  if (*(int *)(v3 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      v23[0] = 18;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, v23, 1);
      v13 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v13 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v13;
    }
    v14 = *(_DWORD *)(v3 + 56);
    if (v13 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v14);
    }
    else
    {
      v15 = *((_QWORD *)a2 + 1);
      if (v14 < 0x80)
      {
        v17 = *(_DWORD *)(v3 + 56);
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v16++ = v14 | 0x80;
          v17 = v14 >> 7;
          v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
      }
      *v16 = v17;
      v19 = (_DWORD)v16 - v15 + 1;
      *((_QWORD *)a2 + 1) += v19;
      *((_DWORD *)a2 + 4) -= v19;
    }
    v20 = *(_QWORD *)(v3 + 48);
    if (v20)
      v21 = (char *)(v20 + 8);
    else
      v21 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v21, 8 * *(_DWORD *)(v3 + 40));
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::GetCachedSize(CoreML::Specification::Scaler *this)
{
  return *((unsigned int *)this + 15);
}

void google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 8 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(int a1, unint64_t **this, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  signed int v8;
  uint64_t v9;
  int v10;
  unint64_t *v11;
  int v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;
  unint64_t v21;

  v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 8)
  {
    v21 = 0;
    result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v21);
    if (!result)
      return result;
    v7 = v21;
  }
  else
  {
    v7 = *v6;
    *this = v6 + 1;
  }
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v8 + 1);
    v8 = *(_DWORD *)a3;
  }
  v9 = *(_QWORD *)(a3 + 8);
  v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(_QWORD *)(v9 + 8 * v8 + 8) = v7;
  v11 = *this;
  v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    v13 = *(_DWORD *)(a3 + 4) - v10;
    v14 = v12 / 9u;
    if ((int)(v12 / 9u) >= v13)
      v14 = *(_DWORD *)(a3 + 4) - v10;
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = v9 + 8 * v10 + 8;
      v17 = v8 + 2;
      v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64;
      if (v18 >= v13)
        LODWORD(v18) = v13;
      while (*(unsigned __int8 *)v11 == a1)
      {
        v19 = *(unint64_t *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(_QWORD *)(v16 + 8 * v15++) = v19;
        v11 = (unint64_t *)((char *)v11 + 9);
        if ((_DWORD)v18 == (_DWORD)v15)
          goto LABEL_15;
      }
      v14 = v15;
LABEL_15:
      if (v14 >= 1)
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 9 * v14);
    }
  }
  return 1;
}

uint64_t *CoreML::Specification::Scaler::MergeFrom(uint64_t *this, const CoreML::Specification::Scaler *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  int v8;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    v8 = v3[10];
    v7 = v3 + 10;
    google::protobuf::RepeatedField<double>::Reserve(v7, v8 + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v7 + 1) + 8 * (int)*v7 + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *v7 += *((_DWORD *)a2 + 10);
  }
  return this;
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::Scaler(CoreML::Specification::Scaler *this)
{
  *(_QWORD *)this = &off_1E9564B70;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_)
    CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_1D3B12F74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(v2 + 48);
  if (v4 && !*v4)
    operator delete(v4);
  v5 = *(_QWORD **)(v2 + 24);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Scaler>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(CoreML::Specification::protobuf_Scaler_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Scaler_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EDB8F540 = 0;
  unk_1EDB8F548 = 0;
  CoreML::Specification::_Scaler_default_instance_ = (uint64_t)&off_1E9564B70;
  unk_1EDB8F520 = 0;
  qword_1EDB8F528 = 0;
  unk_1EDB8F530 = 0;
  dword_1EDB8F554 = 0;
  byte_1EDB8F558 = 1;
  return result;
}

void CoreML::Specification::MILSpec::Program::~Program(CoreML::Specification::MILSpec::Program *this)
{
  CoreML::Specification::MILSpec::Program::~Program(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E95659B0;
  v2 = *((_QWORD *)this + 10);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 7);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Program::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Program");
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this)
{
  return CoreML::Specification::MILSpec::Program::New(this, 0);
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Program *v3;

  v3 = (CoreML::Specification::MILSpec::Program *)operator new();
  CoreML::Specification::MILSpec::Program::Program(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Program>(a2, v3);
  return v3;
}

void sub_1D3B13190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Program::Clear(CoreML::Specification::MILSpec::Program *this)
{
  uint64_t v2;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear((_QWORD *)this + 3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 10);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_QWORD *)this + 11) = 0;
}

uint64_t CoreML::Specification::MILSpec::Program::IsInitialized(CoreML::Specification::MILSpec::Program *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  google::protobuf::Arena **v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  char *v12;
  unint64_t Varint64Fallback;
  std::string *v14;
  unsigned int *v15;
  std::string::size_type size;
  char *v17;
  int v18;
  char *v19;
  int VarintSizeAsIntFallback;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned int *v27;
  int v28;
  _BOOL4 v29;
  char v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  CoreML::Specification::MILSpec::Function *v36;
  char *v37;
  int v38;
  uint64_t v39;
  std::string *v40;
  int BeyondKeyValuePair;
  BOOL v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int *p_p;
  int v48;
  _QWORD *v50;
  google::protobuf::Arena **v51;
  google::protobuf::Arena **v52;
  _QWORD *v53;
  std::string __p;
  google::protobuf::Arena **v55;
  uint64_t v56;

  v50 = (_QWORD *)((char *)this + 56);
  v51 = (google::protobuf::Arena **)((char *)this + 48);
  v5 = (std::string **)((char *)this + 80);
  v6 = (google::protobuf::Arena **)((char *)this + 16);
  v7 = (_QWORD *)((char *)this + 24);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_8:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_27;
        v12 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v30 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v12;
          *(_QWORD *)a2 = v12 + 1;
        }
        *((_QWORD *)this + 11) = Varint64Fallback;
        break;
      case 2u:
        if (v10 != 18)
          goto LABEL_27;
        v52 = v6;
        v53 = v7;
        memset(&__p, 0, sizeof(__p));
        v56 = 0;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_101;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v32 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v25)
          goto LABEL_101;
        v33 = v31;
        v34 = *(char **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v34 == 10)
        {
          *(_QWORD *)a2 = v34 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, &__p))
            goto LABEL_101;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
          {
            v35 = *(_QWORD *)v53[2];
            v55 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)v53, (uint64_t)&__p);
            if (v35 != *(_QWORD *)v53[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v36 = (CoreML::Specification::MILSpec::Function *)v55;
              v37 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v37 < 0)
              {
                v38 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v38 < 0)
                  goto LABEL_100;
              }
              else
              {
                v38 = *v37;
                *(_QWORD *)a2 = v37 + 1;
              }
              v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
              v45 = *((_DWORD *)a2 + 13);
              v25 = __OFSUB__(v45--, 1);
              *((_DWORD *)a2 + 13) = v45;
              if (v45 < 0 != v25
                || (v46 = v43,
                    !CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(v36, a2, v44))
                || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46))
              {
LABEL_100:
                google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(v53, (unsigned __int8 *)&__p);
                goto LABEL_101;
              }
              if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                *((_BYTE *)a2 + 36) = 1;
                goto LABEL_83;
              }
              BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair((uint64_t)&v52, (uint64_t)a2);
              goto LABEL_82;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v39 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v52);
        if (v56 != v39)
        {
          if (v56)
            (*(void (**)(void))(*(_QWORD *)v56 + 8))();
          v56 = v39;
        }
        v40 = *(std::string **)(v39 + 16);
        *(_DWORD *)(v39 + 40) |= 1u;
        if (v40 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v39 + 16), *(google::protobuf::Arena ***)(v39 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v40 = *(std::string **)(v39 + 16);
        }
        std::string::operator=(v40, &__p);
        BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v56 + 88))(v56, a2);
        if (BeyondKeyValuePair)
          google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry((uint64_t)&v52);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56))
        {
          v56 = 0;
          if ((BeyondKeyValuePair & 1) == 0)
          {
            v42 = 0;
            v22 = 6;
            goto LABEL_96;
          }
          goto LABEL_83;
        }
LABEL_82:
        if (!BeyondKeyValuePair)
          goto LABEL_101;
LABEL_83:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
          goto LABEL_101;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = (unsigned int *)&__p;
        else
          p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v48 = __p.__r_.__value_.__r.__words[1];
        v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v48, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
LABEL_91:
        v42 = v29;
        if (v29)
          v22 = 0;
        else
          v22 = 6;
LABEL_94:
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
LABEL_96:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v42)
          goto LABEL_33;
        break;
      case 3u:
        if (v10 != 26)
          goto LABEL_27;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v14))
          return 0;
        v15 = (unsigned int *)*v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = *(unsigned int **)v15;
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.docString"))return 0;
        break;
      case 4u:
        if (v10 != 34)
          goto LABEL_27;
        v52 = v51;
        v53 = v50;
        memset(&__p, 0, sizeof(__p));
        v56 = 0;
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v18 < 0)
            goto LABEL_101;
        }
        else
        {
          v18 = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25
          || (v26 = v23,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v52, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
        {
LABEL_101:
          v42 = 0;
          v22 = 6;
          goto LABEL_94;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = (unsigned int *)&__p;
        else
          v27 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v28 = __p.__r_.__value_.__r.__words[1];
        v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
        goto LABEL_91;
      default:
        goto LABEL_27;
    }
LABEL_32:
    v22 = 0;
LABEL_33:
    if (v22)
      return 0;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_27:
  if ((_DWORD)v10)
    v21 = (v10 & 7) == 4;
  else
    v21 = 1;
  if (!v21)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))return 0;
    goto LABEL_32;
  }
  return 1;
}

void sub_1D3B137D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Program::ByteSizeLong(CoreML::Specification::MILSpec::Program *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,std::string>::begin(v18, v2);
  v4 = 0;
  while (v18[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v18[0] + 3), *((_QWORD *)v18[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v18);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v7 = (_QWORD *)*((_QWORD *)this + 9);
  v8 = *(unsigned int *)v7;
  google::protobuf::Map<std::string,std::string>::begin(v18, v7);
  v9 = 0;
  v10 = v8 + v3;
  while (v18[0])
  {
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v18[0] + 3), *((_QWORD *)v18[0] + 3) + 24, *((google::protobuf::Arena **)this + 6));
    if (v9 != (_DWORD *)v11)
    {
      if (v9)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      v9 = (_DWORD *)v11;
    }
    v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v9);
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v18);
  }
  if (v9)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  v13 = *((_QWORD *)this + 10);
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_24;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v15 = v14;
  v10 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_24:
  v16 = *((_QWORD *)this + 11);
  if (v16)
    v10 += ((9 * (__clz(v16 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 24) = v10;
  return v10;
}

void sub_1D3B139EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Program::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  google::protobuf::io::CodedOutputStream *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::io::CodedOutputStream *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  google::protobuf::io::CodedOutputStream *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  google::protobuf::io::CodedOutputStream *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned __int8 *v49[3];

  v6 = *((_QWORD *)this + 11);
  if (v6)
    google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = (unint64_t *)*((_QWORD *)this + 5);
  v8 = *v7;
  if (*v7)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v8 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_26:
        v16 = operator new[]();
        google::protobuf::Map<std::string,std::string>::begin(v49, *((_QWORD **)this + 5));
        v17 = v49[0];
        if (v49[0])
        {
          v18 = 0;
          do
          {
            *(_QWORD *)(v16 + 8 * v18) = *((_QWORD *)v17 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v49);
            ++v18;
            v17 = v49[0];
          }
          while (v49[0]);
        }
        else
        {
          v18 = 0;
        }
        v19 = 126 - 2 * __clz(v18);
        if (v18)
          v20 = v19;
        else
          v20 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(v16, (char *)(v16 + 8 * v18), v20, 1);
        if (v18)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v24 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v16 + 8 * v21), *(_QWORD *)(v16 + 8 * v21) + 24, *((google::protobuf::Arena **)this + 2));
            if (v22 != v24)
            {
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v22 = v24;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v22, a2, v23);
            v25 = *(unsigned int **)(v16 + 8 * v21);
            if (*((char *)v25 + 23) < 0)
            {
              v25 = *(unsigned int **)v25;
              v26 = *(_QWORD *)(*(_QWORD *)(v16 + 8 * v21) + 8);
            }
            else
            {
              LODWORD(v26) = *((unsigned __int8 *)v25 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
            ++v21;
          }
          while (v18 != v21);
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        MEMORY[0x1D8251A28](v16, 0x60C8044C4A2DFLL);
        goto LABEL_46;
      }
    }
    else if (v8 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_26;
    }
    google::protobuf::Map<std::string,std::string>::begin(v49, v7);
    v10 = 0;
    while (v49[0])
    {
      v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v49[0] + 3), *((_QWORD *)v49[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
      if (v10 != v12)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v10 = v12;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v10, a2, v11);
      v13 = (unsigned int *)*((_QWORD *)v49[0] + 3);
      if (*((char *)v13 + 23) < 0)
      {
        v13 = *(unsigned int **)v13;
        v14 = *(_QWORD *)(*((_QWORD *)v49[0] + 3) + 8);
      }
      else
      {
        LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v49);
    }
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_46:
  result = *((_QWORD *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    v28 = *(_QWORD *)(result + 8);
    if (!v28)
      goto LABEL_52;
    result = *(_QWORD *)result;
    goto LABEL_51;
  }
  LODWORD(v28) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_51:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v28, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.docString");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((_QWORD *)this + 10), a2);
  }
LABEL_52:
  v29 = (unint64_t *)*((_QWORD *)this + 9);
  v30 = *v29;
  if (!*v29)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v30 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_75:
      v38 = operator new[]();
      google::protobuf::Map<std::string,std::string>::begin(v49, *((_QWORD **)this + 9));
      v39 = v49[0];
      if (v49[0])
      {
        v40 = 0;
        do
        {
          *(_QWORD *)(v38 + 8 * v40) = *((_QWORD *)v39 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v49);
          ++v40;
          v39 = v49[0];
        }
        while (v49[0]);
      }
      else
      {
        v40 = 0;
      }
      v41 = 126 - 2 * __clz(v40);
      if (v40)
        v42 = v41;
      else
        v42 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v38, (char *)(v38 + 8 * v40), v42, 1);
      if (v40)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v46 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v38 + 8 * v43), *(_QWORD *)(v38 + 8 * v43) + 24, *((google::protobuf::Arena **)this + 6));
          if (v44 != v46)
          {
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            v44 = v46;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v44, a2, v45);
          v47 = *(unsigned int **)(v38 + 8 * v43);
          if (*((char *)v47 + 23) < 0)
          {
            v47 = *(unsigned int **)v47;
            v48 = *(_QWORD *)(*(_QWORD *)(v38 + 8 * v43) + 8);
          }
          else
          {
            LODWORD(v48) = *((unsigned __int8 *)v47 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v47, v48, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
          ++v43;
        }
        while (v40 != v43);
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      }
      return MEMORY[0x1D8251A28](v38, 0x60C8044C4A2DFLL);
    }
  }
  else if (v30 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_75;
  }
  result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v49, v29);
  v32 = 0;
  while (v49[0])
  {
    v34 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v49[0] + 3), *((_QWORD *)v49[0] + 3) + 24, *((google::protobuf::Arena **)this + 6));
    if (v32 != v34)
    {
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v32 = v34;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v32, a2, v33);
    v35 = (unsigned int *)*((_QWORD *)v49[0] + 3);
    if (*((char *)v35 + 23) < 0)
    {
      v35 = *(unsigned int **)v35;
      v36 = *(_QWORD *)(*((_QWORD *)v49[0] + 3) + 8);
    }
    else
    {
      LODWORD(v36) = *((unsigned __int8 *)v35 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v35, v36, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v49);
  }
  if (v32)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  return result;
}

void sub_1D3B13EE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Program::GetCachedSize(CoreML::Specification::MILSpec::Program *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)*a1 + 4);
  if (v3)
    goto LABEL_2;
  v16 = 0;
  v4 = (uint64_t)a1[1];
  v5 = (unint64_t)a1[2] & (*(_QWORD *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v5;
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v2)
    goto LABEL_11;
  if (v7 && v7 != *(_QWORD *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        break;
      if ((unsigned __int8 *)v7 == v2)
        goto LABEL_11;
    }
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v17, v4, v2, (uint64_t *)&v16);
  v5 = v18;
  a1[2] = (unsigned __int8 *)v18;
  v8 = *((_QWORD *)a1[1] + 4);
  v9 = *(_QWORD *)(v8 + 8 * v5);
  if (!v9 || v9 != *(_QWORD *)(v8 + 8 * (v5 ^ 1)))
  {
LABEL_11:
    v10 = v5 + 1;
LABEL_12:
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a1, v10);
    return a1;
  }
  v12 = (uint64_t)v16;
  v13 = (_QWORD *)v16[1];
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      v14 = *(_QWORD **)(v12 + 16);
      v15 = *v14 == v12;
      v12 = (uint64_t)v14;
    }
    while (!v15);
  }
  v16 = v14;
  if (v14 == (_QWORD *)(v9 + 8))
  {
    v10 = v5 + 2;
    goto LABEL_12;
  }
  v3 = (unsigned __int8 *)v14[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566C20;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566980;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E95675F8;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95675F8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Value *result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(CoreML::Specification::MILSpec::Value **)(a1 + 24);
  if (result)
    result = (CoreML::Specification::MILSpec::Value *)CoreML::Specification::MILSpec::Value::Clear(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Value *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Value::Value(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
          CoreML::Specification::MILSpec::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Value::MergeFrom(*(CoreML::Specification::MILSpec::Value **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_1D3B15328(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*a2;
        if (*a2 >= a2[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = (unsigned __int8 *)(v6 + 1);
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = (char *)*a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = (unsigned __int8 *)(v11 + 1);
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Value **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Value::Value(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
          CoreML::Specification::MILSpec::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = (char *)*a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *a2 = (unsigned __int8 *)(v17 + 1);
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)a2 + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)a2 + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(Aligned, (google::protobuf::io::CodedInputStream *)a2, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_1D3B155AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t CoreML::Specification::MILSpec::Value::ByteSizeLong(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::TensorType **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v6 = (CoreML::Specification::MILSpec::TensorType **)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v8 = *((_DWORD *)this + 11);
  if (v8 == 5)
  {
    v9 = CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(*((CoreML::Specification::MILSpec::Value_BlobFileValue **)this
                                                                           + 4));
    goto LABEL_15;
  }
  if (v8 == 3)
  {
    v9 = CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue ***)this
                                                                            + 4));
LABEL_15:
    v5 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::ValueType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::MILSpec::TensorType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 2:
      v2 = CoreML::Specification::MILSpec::ListType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 3:
      v2 = CoreML::Specification::MILSpec::TupleType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 4:
      v2 = CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 5:
      v2 = (uint64_t)CoreML::Specification::MILSpec::StateType::ByteSizeLong(this[2]);
LABEL_8:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      v2 = CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      v2 = CoreML::Specification::MILSpec::ListValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      v2 = CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(this[2]);
LABEL_7:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v3 = v2[4];
      v4 = 4 * v3;
      if ((_DWORD)v3)
        goto LABEL_7;
      goto LABEL_3;
    case 2:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedInts **)this
                                                                                  + 2));
      goto LABEL_14;
    case 3:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v4 = v2[4];
      if ((_DWORD)v4)
        goto LABEL_7;
      goto LABEL_3;
    case 4:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedStrings **)this
                                                                                     + 2));
      goto LABEL_14;
    case 5:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)this
                                                                                      + 2));
      goto LABEL_14;
    case 6:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v8 = v2[4];
      v4 = 8 * v8;
      if ((_DWORD)v8)
      {
LABEL_7:
        if ((v4 & 0x80000000) != 0)
          v5 = 11;
        else
          v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
LABEL_3:
        v5 = 0;
      }
      v10 = v5 + v4;
      v2[8] = v4;
      v2[9] = v10;
      v9 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_17;
    case 7:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes **)this
                                                                                   + 2));
LABEL_14:
      v9 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_17:
      result = v9 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(CoreML::Specification::MILSpec::TupleValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::ListValue::ByteSizeLong(CoreML::Specification::MILSpec::ListValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(*(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::MILSpec::Value *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Value *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size(*((_DWORD *)this + 4), *((_QWORD *)this + 3));
  if (v2)
  {
    v3 = v2;
    if ((v2 & 0x80000000) != 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = v4 + v2;
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    v3 = *((unsigned int *)this + 6);
  }
  else
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    v3 = *((unsigned int *)this + 6);
    do
    {
      v4 = *v2++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v15[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(*(CoreML::Specification::MILSpec::Dimension **)(*((_QWORD *)this + 4) + 8 * v3++ + 8))
          + 1;
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 8);
  v6 = *(unsigned int *)v5;
  google::protobuf::Map<std::string,std::string>::begin(v15, v5);
  v7 = 0;
  v8 = v6 + v4;
  while (v15[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v15[0] + 3), *((_QWORD *)v15[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v15);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v11 = *((_QWORD *)this + 9);
  if (v11)
    v8 += ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1;
  v12 = *((_DWORD *)this + 20);
  if (v12)
  {
    if (v12 < 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v8 += v13;
  }
  *((_DWORD *)this + 21) = v8;
  return v8;
}

void sub_1D3B16188(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::ListType::ByteSizeLong(CoreML::Specification::MILSpec::ListType *this)
{
  CoreML::Specification::MILSpec::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Dimension *v5;

  if (this == (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)this + 3);
    if (v5)
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(v5) + 2;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TupleType::ByteSizeLong(CoreML::Specification::MILSpec::TupleType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::ValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryType *this)
{
  CoreML::Specification::MILSpec::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::ValueType *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::StateType::ByteSizeLong(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::ValueType *result;
  uint64_t v3;

  if (this == (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(result);
      result = (CoreML::Specification::MILSpec::ValueType *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

unint64_t CoreML::Specification::MILSpec::Dimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *((_DWORD *)this + 7);
  if (v1 == 2)
  {
    v4 = *((_QWORD *)this + 2);
    v3 = 2 * *(unsigned __int8 *)(v4 + 16);
    *(_DWORD *)(v4 + 20) = v3;
  }
  else
  {
    if (v1 != 1)
    {
      v5 = 0;
      goto LABEL_9;
    }
    v2 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      v3 = ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6) + 1;
    *(_DWORD *)(v2 + 24) = v3;
  }
  v5 = v3 + 2;
LABEL_9:
  *((_DWORD *)this + 6) = v5;
  return v5;
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::Value(CoreML::Specification::MILSpec::Value *this)
{
  *(_QWORD *)this = &off_1E9565918;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1D3B16474(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v10;
  uint64_t result;
  unsigned int *v12;
  std::string::size_type size;
  CoreML::Specification::MILSpec::ValueType *v14;
  char *v15;
  int VarintSizeAsIntFallback;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v17;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v18;
  BOOL v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;

  v5 = (std::string **)((char *)this + 16);
  while (2)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_27:
      if ((_DWORD)v8)
        v19 = (v8 & 7) == 4;
      else
        v19 = 1;
      if (v19)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
        goto LABEL_56;
    }
    LODWORD(v7) = 0;
LABEL_7:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_8:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_27;
        v10 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *v5;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v10);
        if (!(_DWORD)result)
          return result;
        v12 = (unsigned int *)*v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v12 = *(unsigned int **)v12;
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.docString"))goto LABEL_56;
        continue;
      case 2u:
        if (v8 != 18)
          goto LABEL_27;
        v14 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
        if (!v14)
        {
          v14 = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v14);
          *((_QWORD *)this + 3) = v14;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_56;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v26 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a2 + 13) = v26;
        if (v26 < 0 != v27)
          goto LABEL_56;
        v28 = v24;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v14, a2, v25);
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
      case 3u:
        if (v8 != 26)
          goto LABEL_27;
        if (*((_DWORD *)this + 11) == 3)
        {
          v17 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 3;
          v17 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
          CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_56;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v31 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v31--, 1);
        *((_DWORD *)a2 + 13) = v31;
        if (v31 < 0 != v27)
          goto LABEL_56;
        v28 = v29;
        result = CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(v17, a2, v30);
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
      case 5u:
        if (v8 != 42)
          goto LABEL_27;
        if (*((_DWORD *)this + 11) == 5)
        {
          v18 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 5;
          v18 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
          CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v18);
          *((_QWORD *)this + 4) = v18;
        }
        v22 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
        {
          v23 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v23 < 0)
            goto LABEL_56;
        }
        else
        {
          v23 = *v22;
          *(_QWORD *)a2 = v22 + 1;
        }
        v32 = google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
        v34 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v34--, 1);
        *((_DWORD *)a2 + 13) = v34;
        if (v34 < 0 != v27)
          goto LABEL_56;
        v28 = v32;
        result = CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(v18, (char **)a2, v33);
        if (!(_DWORD)result)
          return result;
LABEL_52:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
LABEL_56:
        result = 0;
        break;
      default:
        goto LABEL_27;
    }
    return result;
  }
}

void sub_1D3B16808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  *(_QWORD *)this = &off_1E9565E70;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B16890(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorType *v9;
  CoreML::Specification::MILSpec::StateType *v10;
  CoreML::Specification::MILSpec::ListType *v11;
  CoreML::Specification::MILSpec::TupleType *v12;
  CoreML::Specification::MILSpec::DictionaryType *v13;
  BOOL v14;
  char *v15;
  int v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t result;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_23:
      if ((_DWORD)v7)
        v14 = (v7 & 7) == 4;
      else
        v14 = 1;
      if (v14)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_69;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorType *)operator new();
          CoreML::Specification::MILSpec::TensorType::TensorType(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_69;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v33 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v28)
          goto LABEL_69;
        v29 = v31;
        result = CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(v9, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 2u:
        if (v7 != 18)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 2)
        {
          v11 = (CoreML::Specification::MILSpec::ListType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v11 = (CoreML::Specification::MILSpec::ListType *)operator new();
          CoreML::Specification::MILSpec::ListType::ListType(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0)
            goto LABEL_69;
        }
        else
        {
          v20 = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        v36 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v28)
          goto LABEL_69;
        v29 = v34;
        result = CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(v11, a2, v35);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 3u:
        if (v7 != 26)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 3)
        {
          v12 = (CoreML::Specification::MILSpec::TupleType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v12 = (CoreML::Specification::MILSpec::TupleType *)operator new();
          CoreML::Specification::MILSpec::TupleType::TupleType(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0)
            goto LABEL_69;
        }
        else
        {
          v22 = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        v39 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v28)
          goto LABEL_69;
        v29 = v37;
        result = CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(v12, a2, v38);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 4u:
        if (v7 != 34)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 4)
        {
          v13 = (CoreML::Specification::MILSpec::DictionaryType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v13 = (CoreML::Specification::MILSpec::DictionaryType *)operator new();
          CoreML::Specification::MILSpec::DictionaryType::DictionaryType(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            goto LABEL_69;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        v42 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v28)
          goto LABEL_69;
        v29 = v40;
        result = CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(v13, a2, v41);
        if (!(_DWORD)result)
          return result;
LABEL_68:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v29))
          continue;
LABEL_69:
        result = 0;
        break;
      case 5u:
        if (v7 != 42)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 5)
        {
          v10 = (CoreML::Specification::MILSpec::StateType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v10 = (CoreML::Specification::MILSpec::StateType *)operator new();
          CoreML::Specification::MILSpec::StateType::StateType(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v16 < 0)
            goto LABEL_69;
        }
        else
        {
          v16 = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
        v27 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a2 + 13) = v27;
        if (v27 < 0 != v28)
          goto LABEL_69;
        v29 = v25;
        result = CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(v10, a2, v26);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_1D3B16D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 == 5 || v2 == 3)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  *(_QWORD *)this = &off_1E95651F8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_ImmediateValue *)&CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B16E28(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorValue *v9;
  CoreML::Specification::MILSpec::TupleValue *v10;
  CoreML::Specification::MILSpec::ListValue *v11;
  CoreML::Specification::MILSpec::DictionaryValue *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t result;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_20:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_58;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_20;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
          CoreML::Specification::MILSpec::TensorValue::TensorValue(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25)
          goto LABEL_58;
        v26 = v22;
        result = CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(v9, a2, v23);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::MILSpec::TupleValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
          CoreML::Specification::MILSpec::TupleValue::TupleValue(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
        v30 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v25)
          goto LABEL_58;
        v26 = v28;
        result = CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(v10, a2, v29);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 3u:
        if (v7 != 26)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::MILSpec::ListValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::MILSpec::ListValue *)operator new();
          CoreML::Specification::MILSpec::ListValue::ListValue(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        v33 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v25)
          goto LABEL_58;
        v26 = v31;
        result = CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(v11, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 4u:
        if (v7 != 34)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
          CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v36 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v25)
          goto LABEL_58;
        v26 = v34;
        result = CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(v12, a2, v35);
        if (!(_DWORD)result)
          return result;
LABEL_57:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
          continue;
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_1D3B17210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(_QWORD *)this = &off_1E9565160;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_BlobFileValue *)&CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B172A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_BlobFileValue *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  unsigned int *v13;
  std::string::size_type size;
  char *v15;
  char v17;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_23;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((_QWORD *)this + 3) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0)
            return 0;
        }
        else
        {
          *((_QWORD *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName"))return 0;
    }
LABEL_23:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

unint64_t *CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(CoreML::Specification::MILSpec::protobuf_MIL_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EDB94038 = 0;
  unk_1EDB94040 = 0;
  qword_1EDB94028 = 0;
  unk_1EDB94030 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94048 = 0;
  CoreML::Specification::MILSpec::_Program_FunctionsEntry_default_instance_ = (uint64_t)&off_1E9567748;
  byte_1EDB94050 = 1;
  qword_1EDB94070 = 0;
  unk_1EDB94078 = 0;
  qword_1EDB94060 = 0;
  unk_1EDB94068 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94080 = 0;
  CoreML::Specification::MILSpec::_Program_AttributesEntry_default_instance_ = (uint64_t)&off_1E95675F8;
  byte_1EDB94088 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Program::Program((CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_)
  + 104) = 1;
  qword_1EDB94318 = 0;
  unk_1EDB94320 = 0;
  qword_1EDB94308 = 0;
  unk_1EDB94310 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94328 = 0;
  CoreML::Specification::MILSpec::_Function_BlockSpecializationsEntry_default_instance_ = (uint64_t)&off_1E9567550;
  byte_1EDB94330 = 1;
  qword_1EDB940A8 = 0;
  unk_1EDB940B0 = 0;
  qword_1EDB94098 = 0;
  unk_1EDB940A0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB940B8 = 0;
  CoreML::Specification::MILSpec::_Function_AttributesEntry_default_instance_ = (uint64_t)&off_1E95675F8;
  byte_1EDB940C0 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&CoreML::Specification::MILSpec::_Function_default_instance_)
  + 120) = 1;
  qword_1EDB93FC8 = 0;
  unk_1EDB93FD0 = 0;
  qword_1EDB93FB8 = 0;
  unk_1EDB93FC0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB93FD8 = 0;
  CoreML::Specification::MILSpec::_Block_AttributesEntry_default_instance_ = (uint64_t)&off_1E95675F8;
  byte_1EDB93FE0 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&CoreML::Specification::MILSpec::_Block_default_instance_)
  + 128) = 1;
  CoreML::Specification::MILSpec::_Argument_default_instance_ = (uint64_t)&off_1E9565A48;
  unk_1EDB93B00 = 0u;
  unk_1EDB93B10 = 0u;
  dword_1EDB93B20 = 0;
  byte_1EDB93B28 = 1;
  qword_1EDB94000 = 0;
  unk_1EDB94008 = 0;
  qword_1EDB93FF0 = 0;
  unk_1EDB93FF8 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94010 = 0;
  CoreML::Specification::MILSpec::_Operation_InputsEntry_default_instance_ = (uint64_t)&off_1E95676A0;
  byte_1EDB94018 = 1;
  qword_1EDB94110 = 0;
  unk_1EDB94118 = 0;
  qword_1EDB94100 = 0;
  unk_1EDB94108 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94120 = 0;
  CoreML::Specification::MILSpec::_Operation_AttributesEntry_default_instance_ = (uint64_t)&off_1E95675F8;
  byte_1EDB94128 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Operation::Operation((CoreML::Specification::MILSpec::Operation *)&CoreML::Specification::MILSpec::_Operation_default_instance_)
  + 144) = 1;
  CoreML::Specification::MILSpec::_ValueType_default_instance_ = (uint64_t)&off_1E9565E70;
  unk_1EDB93D28 = 0;
  qword_1EDB93D38 = 0;
  byte_1EDB93D40 = 1;
  qword_1EDB941C0 = 0;
  unk_1EDB941C8 = 0;
  qword_1EDB941B0 = 0;
  unk_1EDB941B8 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB941D0 = 0;
  CoreML::Specification::MILSpec::_TensorType_AttributesEntry_default_instance_ = (uint64_t)&off_1E95675F8;
  byte_1EDB941D8 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::TensorType::TensorType((CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_)
  + 88) = 1;
  CoreML::Specification::MILSpec::_TupleType_default_instance_ = (uint64_t)&off_1E9565DD8;
  result = 0.0;
  unk_1EDB93CF0 = 0u;
  unk_1EDB93D00 = 0u;
  dword_1EDB93D10 = 0;
  byte_1EDB93D18 = 1;
  CoreML::Specification::MILSpec::_ListType_default_instance_ = (uint64_t)&off_1E9565B78;
  *(_QWORD *)algn_1EDB93BB8 = 0;
  dword_1EDB93BD0 = 0;
  byte_1EDB93BD8 = 1;
  CoreML::Specification::MILSpec::_DictionaryType_default_instance_ = (uint64_t)&off_1E9564F00;
  unk_1EDB93E70 = 0;
  dword_1EDB93E88 = 0;
  byte_1EDB93E90 = 1;
  qword_1EDB8F050 = 0;
  CoreML::Specification::MILSpec::_StateType_default_instance_ = (uint64_t)&off_1E9556158;
  dword_1EDB8F060 = 0;
  byte_1EDB8F068 = 1;
  dword_1EDB94228 = 0;
  CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_ = (uint64_t)&off_1E9565588;
  qword_1EDB94218 = 0;
  qword_1EDB94220 = 0;
  byte_1EDB94230 = 1;
  CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_ = (uint64_t)&off_1E9565458;
  qword_1EDB94190 = 0;
  byte_1EDB94198 = 0;
  dword_1EDB9419C = 0;
  byte_1EDB941A0 = 1;
  CoreML::Specification::MILSpec::_Dimension_default_instance_ = (uint64_t)&off_1E9565C10;
  unk_1EDB93BE8 = 0;
  qword_1EDB93BF8 = 0;
  byte_1EDB93C00 = 1;
  CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_ = (uint64_t)&off_1E95651F8;
  *(_QWORD *)algn_1EDB93F70 = 0;
  qword_1EDB93F80 = 0;
  byte_1EDB93F88 = 1;
  CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_ = (uint64_t)&off_1E9565160;
  unk_1EDB93F40 = 0;
  qword_1EDB93F48 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB93F50 = 0;
  dword_1EDB93F58 = 0;
  byte_1EDB93F60 = 1;
  CoreML::Specification::MILSpec::_Value_default_instance_ = (uint64_t)&off_1E9565918;
  *(_QWORD *)algn_1EDB93A48 = 0;
  qword_1EDB93A68 = 0;
  byte_1EDB93A70 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_ = (uint64_t)&off_1E95654F0;
  *(_QWORD *)algn_1EDB941E8 = 0;
  qword_1EDB941F0 = 0;
  unk_1EDB941F8 = 0;
  dword_1EDB94204 = 0;
  byte_1EDB94208 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_ = (uint64_t)&off_1E9565620;
  unk_1EDB94240 = 0;
  qword_1EDB94248 = 0;
  unk_1EDB94250 = 0;
  dword_1EDB9425C = 0;
  byte_1EDB94260 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_ = (uint64_t)&off_1E9565290;
  unk_1EDB940D0 = 0;
  qword_1EDB940D8 = 0;
  unk_1EDB940E0 = 0;
  dword_1EDB940EC = 0;
  byte_1EDB940F0 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_ = (uint64_t)&off_1E95657E8;
  *(_QWORD *)algn_1EDB942D8 = 0;
  qword_1EDB942E0 = 0;
  unk_1EDB942E8 = 0;
  dword_1EDB942F4 = 0;
  byte_1EDB942F8 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_ = (uint64_t)&off_1E9565328;
  *(_QWORD *)algn_1EDB94138 = 0;
  qword_1EDB94140 = 0;
  unk_1EDB94148 = 0;
  dword_1EDB94154 = 0;
  byte_1EDB94158 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_ = (uint64_t)&off_1E95656B8;
  dword_1EDB94290 = 0;
  unk_1EDB94280 = 0u;
  unk_1EDB94270 = 0u;
  byte_1EDB94298 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_ = (uint64_t)&off_1E95653C0;
  *(_QWORD *)algn_1EDB94168 = 0;
  qword_1EDB94170 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB94178 = 0;
  byte_1EDB94180 = 1;
  CoreML::Specification::MILSpec::_TensorValue_default_instance_ = (uint64_t)&off_1E9564E68;
  *(_QWORD *)algn_1EDB93E10 = 0;
  qword_1EDB93E20 = 0;
  byte_1EDB93E28 = 1;
  CoreML::Specification::MILSpec::_TupleValue_default_instance_ = (uint64_t)&off_1E9564DD0;
  dword_1EDB93DF8 = 0;
  unk_1EDB93DE8 = 0u;
  unk_1EDB93DD8 = 0u;
  byte_1EDB93E00 = 1;
  CoreML::Specification::MILSpec::_ListValue_default_instance_ = (uint64_t)&off_1E9565CA8;
  dword_1EDB93C40 = 0;
  *(_OWORD *)&algn_1EDB93C20[16] = 0u;
  *(_OWORD *)algn_1EDB93C20 = 0u;
  byte_1EDB93C48 = 1;
  CoreML::Specification::MILSpec::_DictionaryValue_default_instance_ = (uint64_t)&off_1E9565030;
  dword_1EDB93EF0 = 0;
  unk_1EDB93EE0 = 0u;
  unk_1EDB93ED0 = 0u;
  byte_1EDB93EF8 = 1;
  qword_1EDB94028 = (uint64_t)&CoreML::Specification::MILSpec::_Program_FunctionsEntry_default_instance_;
  qword_1EDB94038 = (uint64_t)&CoreML::Specification::MILSpec::_Function_default_instance_;
  qword_1EDB94060 = (uint64_t)&CoreML::Specification::MILSpec::_Program_AttributesEntry_default_instance_;
  qword_1EDB94070 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1EDB94308 = (uint64_t)&CoreML::Specification::MILSpec::_Function_BlockSpecializationsEntry_default_instance_;
  qword_1EDB94318 = (uint64_t)&CoreML::Specification::MILSpec::_Block_default_instance_;
  qword_1EDB94098 = (uint64_t)&CoreML::Specification::MILSpec::_Function_AttributesEntry_default_instance_;
  qword_1EDB940A8 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1EDB93FB8 = (uint64_t)&CoreML::Specification::MILSpec::_Block_AttributesEntry_default_instance_;
  qword_1EDB93FC8 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1EDB93FF0 = (uint64_t)&CoreML::Specification::MILSpec::_Operation_InputsEntry_default_instance_;
  qword_1EDB94000 = (uint64_t)&CoreML::Specification::MILSpec::_Argument_default_instance_;
  qword_1EDB94100 = (uint64_t)&CoreML::Specification::MILSpec::_Operation_AttributesEntry_default_instance_;
  qword_1EDB94110 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1EDB941B0 = (uint64_t)&CoreML::Specification::MILSpec::_TensorType_AttributesEntry_default_instance_;
  qword_1EDB941C0 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1EDB93BC0 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  unk_1EDB93BC8 = &CoreML::Specification::MILSpec::_Dimension_default_instance_;
  qword_1EDB93E78 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  unk_1EDB93E80 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  qword_1EDB8F058 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  qword_1EDB93A50 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EDB93A58 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  return result;
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::Program(CoreML::Specification::MILSpec::Program *this)
{
  _QWORD *v2;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E95659B0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  v3 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 56);
  *((_DWORD *)this + 16) = 0;
  if (this != (CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  return this;
}

void sub_1D3B17A48(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::Function(CoreML::Specification::MILSpec::Function *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E9565AE0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)this + 48);
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 80);
  *((_DWORD *)this + 22) = 0;
  if (this != (CoreML::Specification::MILSpec::Function *)&CoreML::Specification::MILSpec::_Function_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_1D3B17B38(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::Block(CoreML::Specification::MILSpec::Block *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E9565880;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 96);
  *((_DWORD *)this + 26) = 0;
  if (this != (CoreML::Specification::MILSpec::Block *)&CoreML::Specification::MILSpec::_Block_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 30) = 0;
  return this;
}

void sub_1D3B17C00(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)(v2 + 64));
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::Operation(CoreML::Specification::MILSpec::Operation *this)
{
  _QWORD *v2;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9565D40;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InnerMap(v2, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  v3 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 104);
  *((_DWORD *)this + 28) = 0;
  if (this != (CoreML::Specification::MILSpec::Operation *)&CoreML::Specification::MILSpec::_Operation_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 34) = 0;
  return this;
}

void sub_1D3B17D18(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3 + 3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E9564D38;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 48);
  *((_DWORD *)this + 14) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B17DF8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565030;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue");
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return CoreML::Specification::MILSpec::DictionaryValue::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryValue *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
  CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue>(a2, v3);
  return v3;
}

void sub_1D3B17EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 32) + 8;
    do
    {
      v4 = *(_QWORD *)v3;
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *(_QWORD *)(v4 + 16) = 0;
      this = *(_QWORD *)(v4 + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      *(_QWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::DictionaryValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
        CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B181A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v10, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B183C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  *(_QWORD *)this = &off_1E9565750;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B1843C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::DictionaryValue *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v11;
  std::string **v12;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v13;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v14;
  std::string *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v19;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v20;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v21;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v28 + 8);
      v12 = (std::string **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)((char *)v6 + v18);
      v20 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
          CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_1D3B18600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a1, std::string *a2)
{
  return CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(a2, a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::Value *v5;
  CoreML::Specification::MILSpec::Value *v6;
  const CoreML::Specification::MILSpec::Value *v7;
  const CoreML::Specification::MILSpec::Value *v8;
  CoreML::Specification::MILSpec::Value *data;
  const CoreML::Specification::MILSpec::Value *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::Value *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::Value *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_1D3B18724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value::MergeFrom(CoreML::Specification::MILSpec::Value *this, const CoreML::Specification::MILSpec::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  CoreML::Specification::MILSpec::ValueType *v8;
  const CoreML::Specification::MILSpec::ValueType *v9;
  int v10;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v11;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v12;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v13;
  const CoreML::Specification::MILSpec::Value_ImmediateValue *v14;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v15;
  const CoreML::Specification::MILSpec::Value_BlobFileValue *v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      CoreML::Specification::MILSpec::ValueType::MergeFrom((std::string *)v8, v9);
    }
  }
  v10 = *((_DWORD *)a2 + 11);
  if (v10 == 5)
  {
    if (*((_DWORD *)this + 11) == 5)
    {
      v12 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
      *((_DWORD *)this + 11) = 5;
      v12 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
      v15 = CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v12);
      *((_QWORD *)this + 4) = v12;
      if (*((_DWORD *)a2 + 11) != 5)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
        v16 = (const CoreML::Specification::MILSpec::Value_BlobFileValue *)&CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_;
        goto LABEL_33;
      }
    }
    v16 = (const CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)a2 + 4);
LABEL_33:
    CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(v12, v16);
    return;
  }
  if (v10 == 3)
  {
    if (*((_DWORD *)this + 11) == 3)
    {
      v11 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
      *((_DWORD *)this + 11) = 3;
      v11 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
      v13 = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v11);
      *((_QWORD *)this + 4) = v11;
      if (*((_DWORD *)a2 + 11) != 3)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v13);
        v14 = (const CoreML::Specification::MILSpec::Value_ImmediateValue *)&CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_;
        goto LABEL_31;
      }
    }
    v14 = (const CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)a2 + 4);
LABEL_31:
    CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(v11, v14);
  }
}

void sub_1D3B18944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ValueType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ValueType *a2)
{
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorType *v5;
  CoreML::Specification::MILSpec::TupleType *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  CoreML::Specification::MILSpec::TupleType *v10;
  const CoreML::Specification::MILSpec::TupleType *v11;
  CoreML::Specification::MILSpec::DictionaryType *v12;
  const CoreML::Specification::MILSpec::DictionaryType *v13;
  CoreML::Specification::MILSpec::StateType *v14;
  const CoreML::Specification::MILSpec::StateType *v15;
  CoreML::Specification::MILSpec::TensorType *v16;
  const CoreML::Specification::MILSpec::TensorType *v17;
  CoreML::Specification::MILSpec::ListType *v18;
  const CoreML::Specification::MILSpec::ListType *v19;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) == 1)
      {
        v5 = *(CoreML::Specification::MILSpec::TensorType **)(v3 + 16);
LABEL_21:
        v17 = (const CoreML::Specification::MILSpec::TensorType *)*((_QWORD *)a2 + 2);
        return (std::string *)CoreML::Specification::MILSpec::TensorType::MergeFrom(v5, v17);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v5 = (CoreML::Specification::MILSpec::TensorType *)operator new();
      v16 = CoreML::Specification::MILSpec::TensorType::TensorType(v5);
      *(_QWORD *)(v3 + 16) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_21;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v16);
      v17 = (const CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::TensorType::MergeFrom(v5, v17);
    case 2:
      if (*(_DWORD *)(v3 + 28) == 2)
      {
        v9 = *(std::string **)(v3 + 16);
LABEL_23:
        v19 = (const CoreML::Specification::MILSpec::ListType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::ListType::MergeFrom(v9, v19);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 2;
      v9 = (std::string *)operator new();
      v18 = CoreML::Specification::MILSpec::ListType::ListType((CoreML::Specification::MILSpec::ListType *)v9);
      *(_QWORD *)(v3 + 16) = v9;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_23;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v18);
      v19 = (const CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_;
      return CoreML::Specification::MILSpec::ListType::MergeFrom(v9, v19);
    case 3:
      if (*(_DWORD *)(v3 + 28) == 3)
      {
        v6 = *(CoreML::Specification::MILSpec::TupleType **)(v3 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 3;
        v6 = (CoreML::Specification::MILSpec::TupleType *)operator new();
        v10 = CoreML::Specification::MILSpec::TupleType::TupleType(v6);
        *(_QWORD *)(v3 + 16) = v6;
        if (*((_DWORD *)a2 + 7) != 3)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v10);
          v11 = (const CoreML::Specification::MILSpec::TupleType *)&CoreML::Specification::MILSpec::_TupleType_default_instance_;
          return (std::string *)CoreML::Specification::MILSpec::TupleType::MergeFrom((uint64_t *)v6, v11);
        }
      }
      v11 = (const CoreML::Specification::MILSpec::TupleType *)*((_QWORD *)a2 + 2);
      return (std::string *)CoreML::Specification::MILSpec::TupleType::MergeFrom((uint64_t *)v6, v11);
    case 4:
      if (*(_DWORD *)(v3 + 28) == 4)
      {
        v7 = *(std::string **)(v3 + 16);
LABEL_17:
        v13 = (const CoreML::Specification::MILSpec::DictionaryType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::DictionaryType::MergeFrom(v7, v13);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 4;
      v7 = (std::string *)operator new();
      v12 = CoreML::Specification::MILSpec::DictionaryType::DictionaryType((CoreML::Specification::MILSpec::DictionaryType *)v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_17;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v12);
      v13 = (const CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_;
      return CoreML::Specification::MILSpec::DictionaryType::MergeFrom(v7, v13);
    case 5:
      if (*(_DWORD *)(v3 + 28) == 5)
      {
        v8 = *(std::string **)(v3 + 16);
LABEL_19:
        v15 = (const CoreML::Specification::MILSpec::StateType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::StateType::MergeFrom(v8, v15);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 5;
      v8 = (std::string *)operator new();
      v14 = CoreML::Specification::MILSpec::StateType::StateType((CoreML::Specification::MILSpec::StateType *)v8);
      *(_QWORD *)(v3 + 16) = v8;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_19;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v14);
      v15 = (const CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_;
      return CoreML::Specification::MILSpec::StateType::MergeFrom(v8, v15);
    default:
      return this;
  }
}

void sub_1D3B18C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(CoreML::Specification::MILSpec::Value_ImmediateValue *this, const CoreML::Specification::MILSpec::Value_ImmediateValue *a2)
{
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorValue *v5;
  CoreML::Specification::MILSpec::ListValue *v6;
  CoreML::Specification::MILSpec::DictionaryValue *v7;
  CoreML::Specification::MILSpec::TupleValue *v8;
  CoreML::Specification::MILSpec::ListValue *v9;
  uint64_t *v10;
  CoreML::Specification::MILSpec::DictionaryValue *v11;
  const CoreML::Specification::MILSpec::DictionaryValue *v12;
  CoreML::Specification::MILSpec::TensorValue *v13;
  const CoreML::Specification::MILSpec::TensorValue *v14;
  CoreML::Specification::MILSpec::TupleValue *v15;
  uint64_t v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)this + 2);
LABEL_17:
        v14 = (const CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)a2 + 2);
        goto LABEL_26;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
      v13 = CoreML::Specification::MILSpec::TensorValue::TensorValue(v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v13);
      v14 = (const CoreML::Specification::MILSpec::TensorValue *)&CoreML::Specification::MILSpec::_TensorValue_default_instance_;
LABEL_26:
      CoreML::Specification::MILSpec::TensorValue::MergeFrom(v5, v14);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v8 = (CoreML::Specification::MILSpec::TupleValue *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v8 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
        v15 = CoreML::Specification::MILSpec::TupleValue::TupleValue(v8);
        *((_QWORD *)this + 2) = v8;
        if (*((_DWORD *)a2 + 7) != 2)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
          v10 = &CoreML::Specification::MILSpec::_TupleValue_default_instance_;
          goto LABEL_28;
        }
      }
      v10 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_28:
      v16 = (uint64_t)v8;
      goto LABEL_22;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v6 = (CoreML::Specification::MILSpec::ListValue *)*((_QWORD *)this + 2);
LABEL_13:
        v10 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_21;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v6 = (CoreML::Specification::MILSpec::ListValue *)operator new();
      v9 = CoreML::Specification::MILSpec::ListValue::ListValue(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_13;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v9);
      v10 = &CoreML::Specification::MILSpec::_ListValue_default_instance_;
LABEL_21:
      v16 = (uint64_t)v6;
LABEL_22:
      CoreML::Specification::MILSpec::TupleValue::MergeFrom(v16, (const CoreML::Specification::MILSpec::TupleValue *)v10);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v7 = (CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)this + 2);
LABEL_15:
        v12 = (const CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v7 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
      v11 = CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::MILSpec::DictionaryValue *)&CoreML::Specification::MILSpec::_DictionaryValue_default_instance_;
LABEL_24:
      CoreML::Specification::MILSpec::DictionaryValue::MergeFrom((uint64_t *)v7, v12);
      return;
    default:
      return;
  }
}

void sub_1D3B18F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(CoreML::Specification::MILSpec::Value_BlobFileValue *this, const CoreML::Specification::MILSpec::Value_BlobFileValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    *((_QWORD *)this + 3) = v7;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  *(_QWORD *)this = &off_1E9564E68;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue *)&CoreML::Specification::MILSpec::_TensorValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B19080(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorValue::MergeFrom(CoreML::Specification::MILSpec::TensorValue *this, const CoreML::Specification::MILSpec::TensorValue *a2)
{
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v5;
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v6;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v7;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v8;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v9;
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v12;
  uint64_t *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v15;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v16;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v17;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v18;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v19;
  uint64_t *v20;
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v21;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v22;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v5 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
        v12 = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v5);
        *((_QWORD *)this + 2) = v5;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v12);
          v13 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_;
          goto LABEL_33;
        }
      }
      v13 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_33:
      v24 = (uint64_t *)v5;
      goto LABEL_34;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
LABEL_21:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_36;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
      v14 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_21;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v14);
      v13 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_;
LABEL_36:
      v24 = (uint64_t *)v6;
LABEL_34:
      CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(v24, (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)v13);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v7 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
LABEL_23:
        v16 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)a2 + 2);
        goto LABEL_38;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v7 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
      v15 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_23;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_;
LABEL_38:
      CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom((uint64_t *)v7, v16);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v8 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
LABEL_25:
        v18 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 2);
        goto LABEL_40;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v8 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
      v17 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_25;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_;
LABEL_40:
      CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v8, v18);
      return;
    case 5:
      if (*((_DWORD *)this + 7) == 5)
      {
        v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
LABEL_27:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_42;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
      v19 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_27;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v19);
      v20 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_;
LABEL_42:
      v25 = (uint64_t *)v9;
      goto LABEL_43;
    case 6:
      if (*((_DWORD *)this + 7) == 6)
      {
        v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
LABEL_29:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_45;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
      v21 = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 6)
        goto LABEL_29;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v21);
      v20 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_;
LABEL_45:
      v25 = (uint64_t *)v10;
LABEL_43:
      CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(v25, (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v20);
      return;
    case 7:
      if (*((_DWORD *)this + 7) == 7)
      {
        v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
LABEL_31:
        v23 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 2);
        goto LABEL_47;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 7;
      v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
      v22 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 7)
        goto LABEL_31;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v22);
      v23 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_;
LABEL_47:
      CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(v11, v23);
      return;
    default:
      return;
  }
}

void sub_1D3B1945C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  *(_QWORD *)this = &off_1E9564DD0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleValue *)&CoreML::Specification::MILSpec::_TupleValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B19518(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergeFrom(uint64_t this, const CoreML::Specification::MILSpec::TupleValue *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::Value **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::Value **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v3 + 16, (CoreML::Specification::MILSpec::Value **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  return this;
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  *(_QWORD *)this = &off_1E9565CA8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::ListValue *)&CoreML::Specification::MILSpec::_ListValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B19638(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  *(_QWORD *)this = &off_1E9565030;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue *)&CoreML::Specification::MILSpec::_DictionaryValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B196B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t result, CoreML::Specification::MILSpec::Value **a2, CoreML::Specification::MILSpec::Value **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::Value **v11;
  CoreML::Specification::MILSpec::Value **v12;
  CoreML::Specification::MILSpec::Value *v13;
  CoreML::Specification::MILSpec::Value *v14;
  CoreML::Specification::MILSpec::Value *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::MILSpec::Value **v19;
  CoreML::Specification::MILSpec::Value **v20;
  CoreML::Specification::MILSpec::Value *v21;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::MILSpec::Value::Value(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_1D3B197F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(CoreML::Specification::MILSpec::Value *a1, CoreML::Specification::MILSpec::Value *this)
{
  return CoreML::Specification::MILSpec::Value::MergeFrom(this, a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E95654F0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B198DC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<int>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 4 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9565290;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B199DC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9565328;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B19A5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<BOOL>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  *(_QWORD *)this = &off_1E95656B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B19B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const std::string **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const std::string **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E95657E8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B19C70(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<double>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 8 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9565620;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B19D70(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(_QWORD *)this = &off_1E95653C0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B19DF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      return;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    return;
  }
  v8 = (std::string *)*((_QWORD *)this + 2);
  v7 = (std::string **)((char *)this + 16);
  v6 = v8;
  if (v8 != (std::string *)v5)
  {
    if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, v5);
    else
      std::string::operator=(v6, (const std::string *)v5);
  }
}

void google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  int v7;
  _QWORD *Aligned;
  size_t v9;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], (v7 + 8));
    else
      Aligned = operator new((v7 + 8));
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v9 = *a1;
    if ((int)v9 >= 1)
      memcpy(Aligned + 1, v4 + 1, v9);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<int>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 4 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

uint64_t CoreML::Specification::MILSpec::ValueType::clear_type(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void *CoreML::Specification::MILSpec::TensorType::MergeFrom(CoreML::Specification::MILSpec::TensorType *this, const CoreML::Specification::MILSpec::TensorType *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CoreML::Specification::MILSpec::Dimension **v12;
  CoreML::Specification::MILSpec::Dimension **v13;
  CoreML::Specification::MILSpec::Dimension *v14;
  CoreML::Specification::MILSpec::Dimension *v15;
  CoreML::Specification::MILSpec::Dimension *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::MILSpec::Dimension **v20;
  CoreML::Specification::MILSpec::Dimension **v21;
  CoreML::Specification::MILSpec::Dimension *v22;
  CoreML::Specification::MILSpec::Dimension *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  void *result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v32 = *((_QWORD *)a2 + 4);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::TensorType *)((char *)this + 16), v5);
    v7 = v6;
    v8 = **((int **)this + 4);
    v9 = *((int *)this + 6);
    v10 = v8 - v9;
    v33 = v5;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (CoreML::Specification::MILSpec::Dimension **)(v32 + 8);
      v13 = (CoreML::Specification::MILSpec::Dimension **)v6;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v33)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v33 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::MILSpec::Dimension **)((char *)v7 + v19);
      v21 = (CoreML::Specification::MILSpec::Dimension **)(v19 + v32 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Dimension *)operator new();
          CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v27 = *((_DWORD *)this + 6) + v33;
    *((_DWORD *)this + 6) = v27;
    v28 = (int *)*((_QWORD *)this + 4);
    if (*v28 < v27)
      *v28 = v27;
  }
  result = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 40, (uint64_t)a2 + 40);
  v30 = *((_QWORD *)a2 + 9);
  if (v30)
    *((_QWORD *)this + 9) = v30;
  v31 = *((_DWORD *)a2 + 20);
  if (v31)
    *((_DWORD *)this + 20) = v31;
  return result;
}

void sub_1D3B1A254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::ListType(CoreML::Specification::MILSpec::ListType *this)
{
  *(_QWORD *)this = &off_1E9565B78;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B1A2C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ListType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ListType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::Dimension *v8;
  CoreML::Specification::MILSpec::Dimension *data;
  const CoreML::Specification::MILSpec::Dimension *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::Dimension *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::Dimension *)&CoreML::Specification::MILSpec::_Dimension_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::Dimension::MergeFrom((uint64_t *)data, v10);
    }
  }
  return this;
}

void sub_1D3B1A3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  *(_QWORD *)this = &off_1E9565DD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleType *)&CoreML::Specification::MILSpec::_TupleType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B1A45C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TupleType::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TupleType *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::ValueType **v11;
  CoreML::Specification::MILSpec::ValueType **v12;
  CoreML::Specification::MILSpec::ValueType *v13;
  CoreML::Specification::MILSpec::ValueType *v14;
  CoreML::Specification::MILSpec::ValueType *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::MILSpec::ValueType **v19;
  CoreML::Specification::MILSpec::ValueType **v20;
  CoreML::Specification::MILSpec::ValueType *v21;
  CoreML::Specification::MILSpec::ValueType *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (CoreML::Specification::MILSpec::ValueType **)(v28 + 8);
      v12 = (CoreML::Specification::MILSpec::ValueType **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::MILSpec::ValueType **)((char *)v6 + v18);
      v20 = (CoreML::Specification::MILSpec::ValueType **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v21, Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_1D3B1A620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  *(_QWORD *)this = &off_1E9564F00;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B1A694(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::ValueType *v8;
  CoreML::Specification::MILSpec::ValueType *data;
  const CoreML::Specification::MILSpec::ValueType *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::ValueType *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_1D3B1A798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::StateType(CoreML::Specification::MILSpec::StateType *this)
{
  *(_QWORD *)this = &off_1E9556158;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B1A810(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::StateType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::StateType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::ValueType *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::MILSpec::ValueType *)operator new();
      CoreML::Specification::MILSpec::ValueType::ValueType(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
    return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v7, v8);
  }
  return this;
}

void sub_1D3B1A8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(CoreML::Specification::MILSpec::ValueType *a1, CoreML::Specification::MILSpec::ValueType *this)
{
  return CoreML::Specification::MILSpec::ValueType::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  *(_QWORD *)this = &off_1E9565C10;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension *)&CoreML::Specification::MILSpec::_Dimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B1A958(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::Dimension::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::Dimension *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 != 2)
  {
    if (v5 != 1)
      return this;
    if (*(_DWORD *)(v3 + 28) == 1)
    {
      v6 = *(uint64_t **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v6 = (uint64_t *)operator new();
      this = (uint64_t *)CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension((CoreML::Specification::MILSpec::Dimension_ConstantDimension *)v6);
      *(_QWORD *)(v3 + 16) = v6;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        this = (uint64_t *)CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)this);
        v8 = &CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_;
        goto LABEL_14;
      }
    }
    v8 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_14:
    v10 = v8[1];
    if ((v10 & 1) != 0)
      this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6 + 1, v10 & 0xFFFFFFFFFFFFFFFELL);
    v11 = v8[2];
    if (v11)
      v6[2] = v11;
    return this;
  }
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    v7 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
    *(_DWORD *)(v3 + 28) = 2;
    v7 = operator new();
    this = (uint64_t *)CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension((CoreML::Specification::MILSpec::Dimension_UnknownDimension *)v7);
    *(_QWORD *)(v3 + 16) = v7;
    if (*((_DWORD *)a2 + 7) != 2)
    {
      this = (uint64_t *)CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)this);
      v9 = &CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_;
      goto LABEL_19;
    }
  }
  v9 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_19:
  v12 = v9[1];
  if ((v12 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v7 + 8), v12 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)v9 + 16))
    *(_BYTE *)(v7 + 16) = 1;
  return this;
}

void sub_1D3B1AAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::clear_dimension(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_1E9565588;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)&CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B1ABA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_1E9565458;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)&CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_1D3B1AC08(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  void *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Value *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Value *v9;
  unsigned __int8 *v10[3];

  result = google::protobuf::Map<std::string,std::string>::begin(v10, *(_QWORD **)(a2 + 24));
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *((_QWORD *)v4 + 3);
      v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
      v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
      {
        v9 = (CoreML::Specification::MILSpec::Value *)v8;
        CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
        CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 72);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_1D3B1AF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1D8251A40](v14, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Clear(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  return CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(uint64_t *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a4;
  v5 = a3;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + 8 * a3);
  if (!v9)
  {
    a4[4] = 0;
    *(_QWORD *)(v8 + 8 * a3) = a4;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a3);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      a4[4] = v9;
      *(_QWORD *)(v8 + 8 * a3) = a4;
LABEL_11:
      *v7 = (uint64_t)v4;
      v7[1] = a2;
      v7[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert(a2, a3);
    v4[4] = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5);
    v15 = v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, v4, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (_QWORD *)result[4];
LABEL_8:
    v12 = *(_QWORD *)(a2 + 24);
    if (v5 < v12)
      v12 = v5;
    *(_QWORD *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  a4[4] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a3);
  v15 = a4;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, a4, (uint64_t *)&v15);
  *v7 = result[4];
  v7[1] = a2;
  v7[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  _QWORD *Aligned;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v11 = *(_QWORD *)(a1 + 40);
  v7 = v11;
  v12 = 0;
  v9 = &v10;
  v10 = 0;
  Aligned[1] = 0;
  Aligned[2] = v7;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v9, 0);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2, v6);
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(a1 + 16));
    v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (_QWORD *)v4[4];
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v8))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena *a1)
{
  if (a1)
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E0DE4EE8], 40);
  else
    return (google::protobuf::Arena **)operator new(0x28uLL);
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::CopyListToTree(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  v3 = (_QWORD *)result[a2];
  if (v3)
  {
    do
    {
      v6 = v3;
      result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, v3, (uint64_t *)&v6);
      v5 = (_QWORD *)v3[4];
      v3[4] = 0;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize(uint64_t a1, uint64_t a2, size_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  google::protobuf::Arena **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18[3];

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(*(google::protobuf::Arena **)(a1 + 40), a2, a3);
  bzero(v7, 8 * a2);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = v7;
  while (v8 < v5)
  {
    v9 = v6[v8];
    if (v9)
    {
      if (v9 == v6[v8 ^ 1])
      {
        v12 = *(_QWORD **)v9;
        do
        {
          v13 = (_BYTE *)v12[4];
          v14 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::BucketNumber(a1, v13);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v18, a1, v14, v13);
          v15 = (_QWORD *)v12[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
          }
          v12 = v16;
        }
        while (v16 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 32);
          v11 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::BucketNumber(a1, (_BYTE *)v9);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v18, a1, v11, (_QWORD *)v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!*(_QWORD *)(a1 + 40))
    operator delete(v6);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(google::protobuf::Arena *a1, uint64_t a2, size_t __sz)
{
  if (a1)
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E0DE4EE8], 8 * a2);
  else
    return (google::protobuf::Arena **)operator new(8 * a2);
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!a1)
    operator delete(a2);
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(CoreML::Specification::MILSpec::Dimension *a1, CoreML::Specification::MILSpec::Dimension *this)
{
  return CoreML::Specification::MILSpec::Dimension::MergeFrom((uint64_t *)this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9565750;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair");
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(a2, v3);
  return v3;
}

void sub_1D3B1B640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::Clear(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((_UNKNOWN *)this != &CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = this;
    v6 = *(_QWORD *)(this + 16);
    if (v6)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = *(_QWORD *)(v5 + 24);
    if (v7)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ListValue::~ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  CoreML::Specification::MILSpec::ListValue::~ListValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565CA8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ListValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListValue");
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this)
{
  return CoreML::Specification::MILSpec::ListValue::New(this, 0);
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ListValue *v3;

  v3 = (CoreML::Specification::MILSpec::ListValue *)operator new();
  CoreML::Specification::MILSpec::ListValue::ListValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListValue>(a2, v3);
  return v3;
}

void sub_1D3B1B884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::MILSpec::Value **v3;
  CoreML::Specification::MILSpec::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::MILSpec::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListValue::IsInitialized(CoreML::Specification::MILSpec::ListValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>((uint64_t)v4);
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::ListValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListValue::GetCachedSize(CoreML::Specification::MILSpec::ListValue *this)
{
  return *((unsigned int *)this + 10);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t a1)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v4 - v3 + 1);
      v2 = *(int **)(a1 + 16);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Value **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::Value::Value(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
    CoreML::Specification::MILSpec::Value::Value(Aligned);
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_1D3B1BBBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TupleValue::~TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  CoreML::Specification::MILSpec::TupleValue::~TupleValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9564DD0;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TupleValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleValue");
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this)
{
  return CoreML::Specification::MILSpec::TupleValue::New(this, 0);
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TupleValue *v3;

  v3 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
  CoreML::Specification::MILSpec::TupleValue::TupleValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleValue>(a2, v3);
  return v3;
}

void sub_1D3B1BD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::MILSpec::Value **v3;
  CoreML::Specification::MILSpec::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::MILSpec::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::IsInitialized(CoreML::Specification::MILSpec::TupleValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>((uint64_t)v4);
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::TupleValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::GetCachedSize(CoreML::Specification::MILSpec::TupleValue *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue::~TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  CoreML::Specification::MILSpec::TensorValue::~TensorValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9564E68;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue");
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this)
{
  return CoreML::Specification::MILSpec::TensorValue::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
  CoreML::Specification::MILSpec::TensorValue::TensorValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue>(a2, v3);
  return v3;
}

void sub_1D3B1C054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::IsInitialized(CoreML::Specification::MILSpec::TensorValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v9;
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v15;
  BOOL v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t result;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_29:
      if ((_DWORD)v7)
        v16 = (v7 & 7) == 4;
      else
        v16 = 1;
      if (v16)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_91;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_29;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_91;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v33 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v34)
          goto LABEL_91;
        v35 = v31;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(v9, (char **)a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 2u:
        if (v7 != 18)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0)
            goto LABEL_91;
        }
        else
        {
          v20 = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        v39 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v34)
          goto LABEL_91;
        v35 = v37;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(v10, a2, v38);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 3u:
        if (v7 != 26)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0)
            goto LABEL_91;
        }
        else
        {
          v22 = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        v42 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v34)
          goto LABEL_91;
        v35 = v40;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(v11, a2, v41);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 4u:
        if (v7 != 34)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            goto LABEL_91;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        v45 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v45--, 1);
        *((_DWORD *)a2 + 13) = v45;
        if (v45 < 0 != v34)
          goto LABEL_91;
        v35 = v43;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(v12, (char **)a2, v44);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 5u:
        if (v7 != 42)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 5)
        {
          v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v25 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v25 < 0)
        {
          v26 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v26 < 0)
            goto LABEL_91;
        }
        else
        {
          v26 = *v25;
          *(_QWORD *)a2 = v25 + 1;
        }
        v46 = google::protobuf::io::CodedInputStream::PushLimit(a2, v26);
        v48 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v48--, 1);
        *((_DWORD *)a2 + 13) = v48;
        if (v48 < 0 != v34)
          goto LABEL_91;
        v35 = v46;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(v13, a2, v47);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 6u:
        if (v7 != 50)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 6)
        {
          v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v27 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
        {
          v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v28 < 0)
            goto LABEL_91;
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)a2 = v27 + 1;
        }
        v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
        v51 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v51--, 1);
        *((_DWORD *)a2 + 13) = v51;
        if (v51 < 0 != v34)
          goto LABEL_91;
        v35 = v49;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(v14, (char **)a2, v50);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 7u:
        if (v7 != 58)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 7)
        {
          v15 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 7;
          v15 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v15);
          *((_QWORD *)this + 2) = v15;
        }
        v29 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
        {
          v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v30 < 0)
            goto LABEL_91;
        }
        else
        {
          v30 = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
        v54 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v54--, 1);
        *((_DWORD *)a2 + 13) = v54;
        if (v54 < 0 != v34)
          goto LABEL_91;
        v35 = v52;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(v15, (char **)a2, v53);
        if (!(_DWORD)result)
          return result;
LABEL_90:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35))
          continue;
LABEL_91:
        result = 0;
        break;
      default:
        goto LABEL_29;
    }
    return result;
  }
}

void sub_1D3B1C684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 6)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 7)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::GetCachedSize(CoreML::Specification::MILSpec::TensorValue *this)
{
  return *((unsigned int *)this + 6);
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(10, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 2;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 2;
        do
        {
          v30 = 0;
          v22 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<int>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 4 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_DWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 3)
    {
      google::protobuf::RepeatedField<int>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 4 * v26 - 4 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 4 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  signed int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  int v19;
  uint64_t Varint32Fallback;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;

  v5 = (signed int *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v6 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      break;
LABEL_8:
    if ((v8 & 0xFFFFFFF8) != 8)
      break;
    if (v8 == 8)
    {
      if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(10, (unint64_t *)a2, v5) & 1) != 0)continue;
      return 0;
    }
    if (v8 != 10)
      break;
    v10 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v10;
      *(_QWORD *)a2 = v10 + 1;
    }
    v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    while (1)
    {
      v14 = *((_DWORD *)a2 + 10);
      v15 = *((int *)a2 + 11);
      v16 = *((_QWORD *)a2 + 1);
      v17 = *((_DWORD *)a2 + 6);
      if (v14 == 0x7FFFFFFF)
        break;
      v18 = *(char **)a2;
      if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
        break;
      if ((unint64_t)v18 >= v16)
      {
        v19 = 0;
      }
      else
      {
        v19 = *v18;
        if ((*v18 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v18 + 1;
          goto LABEL_31;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
      v19 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_31:
      v21 = *((_DWORD *)this + 4);
      if (v21 == *((_DWORD *)this + 5))
      {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v5, v21 + 1);
        v21 = *v5;
      }
      v22 = *((_QWORD *)this + 3);
      *((_DWORD *)this + 4) = v21 + 1;
      *(_DWORD *)(v22 + 4 * v21 + 8) = v19;
    }
    *((_DWORD *)a2 + 10) = v13;
    v23 = v16 + v15;
    *((_QWORD *)a2 + 1) = v23;
    v24 = *((_DWORD *)a2 + 12);
    if (v24 >= v13)
      v24 = v13;
    v25 = __OFSUB__(v17, v24);
    v26 = v17 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v26 = 0;
    else
      *((_QWORD *)a2 + 1) = v23 - v26;
    *((_DWORD *)a2 + 11) = v26;
    *((_BYTE *)a2 + 36) = 0;
  }
  if ((_DWORD)v8)
    v12 = (v8 & 7) == 4;
  else
    v12 = 1;
  if (v12)
    return 1;
  if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0)
    goto LABEL_2;
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t Varint64Fallback;
  char v20;
  BOOL v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(10, (unint64_t *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v20 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v21 = Varint64Fallback != 0;
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_BYTE *)(v23 + v22 + 8) = v21;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, char **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  std::string *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 result;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;

  v5 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_26:
          *v12 = v14 + 1;
          v16 = *v5;
          if (*v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
            *v17 = (google::protobuf::Arena *)Aligned;
            v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v18 = (unint64_t *)((char *)v16 + 32);
            do
              v19 = __ldxr(v18);
            while (__stxr((unint64_t)v17, v18));
            v17[2] = (google::protobuf::Arena *)v19;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v20 = *((_QWORD *)this + 4);
          v21 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
          goto LABEL_32;
        }
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_32:
      result = google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
      if (!result)
        return result;
      v23 = *((_QWORD *)this + 4);
      v24 = *(unsigned int **)(v23 + 8 * *((int *)this + 6));
      if (*((char *)v24 + 23) < 0)
      {
        v24 = *(unsigned int **)v24;
        v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values"))return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t Varint64Fallback;
  char v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, (unint64_t *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v21 & 1) == 0)
              return 0;
            v19 = Varint64Fallback;
          }
          else
          {
            v19 = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_QWORD *)(v23 + 8 * v22 + 8) = v19;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, char **a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v11;

  v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *v4;
      if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v4;
      }
      if (!google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11))
        return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(int a1, unint64_t *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t Varint64Fallback;
  char v9;
  signed int v11;
  int v12;
  uint64_t v13;
  signed int v14;
  int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v6 = (char *)*a2;
  if (*a2 >= a2[1] || *v6 < 0)
  {
    Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
    if ((v9 & 1) == 0)
      return 0;
    v7 = Varint64Fallback;
  }
  else
  {
    v7 = *v6;
    *a2 = (unint64_t)(v6 + 1);
  }
  v11 = *(_DWORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v11 + 1);
    v11 = *(_DWORD *)a3;
    v12 = *(_DWORD *)(a3 + 4);
  }
  v13 = *(_QWORD *)(a3 + 8);
  v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(_QWORD *)(v13 + 8 * v11 + 8) = v7;
  if (v12 - (v11 + 1) >= 1)
  {
    v15 = v12 - v11;
    do
    {
      v16 = (unsigned __int8 *)*a2;
      v17 = a2[1];
      if (*a2 >= v17 || *v16 != a1)
        break;
      *a2 = (unint64_t)(v16 + 1);
      if ((unint64_t)(v16 + 1) >= v17 || (char)v16[1] < 0)
      {
        v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v19 & 1) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(_DWORD *)a3;
      }
      else
      {
        v18 = v16[1];
        *a2 = (unint64_t)(v16 + 2);
      }
      v20 = v13 + 8 * v14++;
      *(_DWORD *)a3 = v14;
      *(_QWORD *)(v20 + 8) = v18;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(int a1, unint64_t *a2, uint64_t a3)
{
  char *v6;
  unint64_t Varint64Fallback;
  char v8;
  BOOL v10;
  signed int v11;
  int v12;
  uint64_t v13;
  signed int v14;
  int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v6 = (char *)*a2;
  if (*a2 >= a2[1] || *v6 < 0)
  {
    Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
    if ((v8 & 1) == 0)
      return 0;
  }
  else
  {
    Varint64Fallback = *v6;
    *a2 = (unint64_t)(v6 + 1);
  }
  v10 = Varint64Fallback != 0;
  v11 = *(_DWORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)a3, v11 + 1);
    v11 = *(_DWORD *)a3;
    v12 = *(_DWORD *)(a3 + 4);
  }
  v13 = *(_QWORD *)(a3 + 8);
  v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(_BYTE *)(v13 + v11 + 8) = v10;
  if (v12 - (v11 + 1) >= 1)
  {
    v15 = v12 - v11;
    do
    {
      v16 = (unsigned __int8 *)*a2;
      v17 = a2[1];
      if (*a2 >= v17 || *v16 != a1)
        break;
      *a2 = (unint64_t)(v16 + 1);
      if ((unint64_t)(v16 + 1) >= v17 || (char)v16[1] < 0)
      {
        v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v19 & 1) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(_DWORD *)a3;
      }
      else
      {
        v18 = v16[1];
        *a2 = (unint64_t)(v16 + 2);
      }
      v20 = v13 + v14++;
      *(_DWORD *)a3 = v14;
      *(_BYTE *)(v20 + 8) = v18 != 0;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(int a1, unint64_t *a2, signed int *a3)
{
  char *v6;
  int v7;
  uint64_t Varint32Fallback;
  signed int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (char *)*a2;
  if (*a2 >= a2[1])
  {
    v7 = 0;
  }
  else
  {
    v7 = *v6;
    if ((*v6 & 0x80000000) == 0)
    {
      *a2 = (unint64_t)(v6 + 1);
      goto LABEL_6;
    }
  }
  Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v7);
  v7 = Varint32Fallback;
  if (Varint32Fallback < 0)
    return 0;
LABEL_6:
  v9 = *a3;
  if (*a3 == a3[1])
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a3, v9 + 1);
    v9 = *a3;
  }
  v10 = *((_QWORD *)a3 + 1);
  *a3 = v9 + 1;
  *(_DWORD *)(v10 + 4 * v9 + 8) = v7;
  v11 = a3[1] - *a3;
  if (v11 >= 1)
  {
    v12 = v11 + 1;
    while (1)
    {
      v13 = (unsigned __int8 *)*a2;
      v14 = a2[1];
      if (*a2 >= v14 || *v13 != a1)
        return 1;
      v15 = (char *)(v13 + 1);
      *a2 = (unint64_t)(v13 + 1);
      if ((unint64_t)(v13 + 1) >= v14)
        break;
      v16 = *v15;
      if (*v15 < 0)
        goto LABEL_16;
      *a2 = (unint64_t)(v13 + 2);
LABEL_18:
      v18 = *a3;
      *a3 = v18 + 1;
      *(_DWORD *)(v10 + 4 * v18 + 8) = v16;
      if (--v12 <= 1)
        return 1;
    }
    v16 = 0;
LABEL_16:
    v17 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v16);
    if (v17 < 0)
      return 0;
    v16 = v17;
    v10 = *((_QWORD *)a3 + 1);
    goto LABEL_18;
  }
  return 1;
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(int a1, unsigned int **this, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  signed int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  int v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL8 result;
  unsigned int v21;

  v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 4)
  {
    v21 = 0;
    result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21);
    if (!result)
      return result;
    v7 = v21;
  }
  else
  {
    v7 = *v6;
    *this = v6 + 1;
  }
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a3, v8 + 1);
    v8 = *(_DWORD *)a3;
  }
  v9 = *(_QWORD *)(a3 + 8);
  v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(_DWORD *)(v9 + 4 * v8 + 8) = v7;
  v11 = *this;
  v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    v13 = *(_DWORD *)(a3 + 4) - v10;
    v14 = v12 / 5u;
    if ((int)(v12 / 5u) >= v13)
      v14 = *(_DWORD *)(a3 + 4) - v10;
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = v9 + 4 * v10 + 8;
      v17 = v8 + 2;
      v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x3333333333333334uLL) >> 64;
      if (v18 >= v13)
        LODWORD(v18) = v13;
      while (*(unsigned __int8 *)v11 == a1)
      {
        v19 = *(unsigned int *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(_DWORD *)(v16 + 4 * v15++) = v19;
        v11 = (unsigned int *)((char *)v11 + 5);
        if ((_DWORD)v18 == (_DWORD)v15)
          goto LABEL_15;
      }
      v14 = v15;
LABEL_15:
      if (v14 >= 1)
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 5 * v14);
    }
  }
  return 1;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::~TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(_QWORD *)this = &off_1E95653C0;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E95653C0;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBytes");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(a2, v3);
  return v3;
}

void sub_1D3B1DD4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 16);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v3 + 23))
      return this;
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  }
  if (*(_QWORD *)(v3 + 8))
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E95656B8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E95656B8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(a2, v3);
  return v3;
}

void sub_1D3B1DF44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::Clear(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;

  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v4 = this;
    v5 = -v2;
    v6 = 1;
    do
    {
      v7 = *(unsigned int **)(*(_QWORD *)(v4 + 32) + 8 * v6);
      if (*((char *)v7 + 23) < 0)
      {
        v7 = *(unsigned int **)v7;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values");
      this = google::protobuf::internal::WireFormatLite::WriteString(1u, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E9565328;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBools");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(a2, v3);
  return v3;
}

void sub_1D3B1E110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1)
  {
    if ((v1 & 0x80000000) != 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2 + v1;
  *((_DWORD *)this + 8) = v1;
  *((_DWORD *)this + 9) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E95657E8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(a2, v3);
  return v3;
}

void sub_1D3B1E3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E9565290;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedInts");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(a2, v3);
  return v3;
}

void sub_1D3B1E700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(int *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E9565620;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(a2, v3);
  return v3;
}

void sub_1D3B1EA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E95654F0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedFloats");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(a2, v3);
  return v3;
}

void sub_1D3B1ECF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 4 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Value::~Value(CoreML::Specification::MILSpec::Value *this)
{
  CoreML::Specification::MILSpec::Value::~Value(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E9565918;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_DWORD *)this + 11))
    CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Value::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value");
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this)
{
  return CoreML::Specification::MILSpec::Value::New(this, 0);
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value *v3;

  v3 = (CoreML::Specification::MILSpec::Value *)operator new();
  CoreML::Specification::MILSpec::Value::Value(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value>(a2, v3);
  return v3;
}

void sub_1D3B1EFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::IsInitialized(CoreML::Specification::MILSpec::Value *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = *((_QWORD *)this + 2);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    LODWORD(v7) = *(unsigned __int8 *)(result + 23);
    if (!*(_BYTE *)(result + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(result + 8);
  if (v7)
  {
    result = *(_QWORD *)result;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.docString");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  v9 = *((_DWORD *)this + 11);
  if (v9 == 3)
  {
    result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *((_QWORD *)this + 4), a2, a4);
    v9 = *((_DWORD *)this + 11);
  }
  if (v9 == 5)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *((_QWORD *)this + 4), a2, a4);
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value::GetCachedSize(CoreML::Specification::MILSpec::Value *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E95651F8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Value_ImmediateValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.ImmediateValue");
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return CoreML::Specification::MILSpec::Value_ImmediateValue::New(this, 0);
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value_ImmediateValue *v3;

  v3 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
  CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_ImmediateValue>(a2, v3);
  return v3;
}

void sub_1D3B1F280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::IsInitialized(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::GetCachedSize(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_ImmediateValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension::~Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  CoreML::Specification::MILSpec::Dimension::~Dimension(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565C10;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Dimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension");
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this)
{
  return CoreML::Specification::MILSpec::Dimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension *)operator new();
  CoreML::Specification::MILSpec::Dimension::Dimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension>(a2, v3);
  return v3;
}

void sub_1D3B1F490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::IsInitialized(CoreML::Specification::MILSpec::Dimension *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Dimension_ConstantDimension *v10;
  CoreML::Specification::MILSpec::Dimension_UnknownDimension *v11;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  int v23;
  unsigned int v24;
  int v25;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_18;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_18;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_18;
      if (*((_DWORD *)this + 7) == 2)
      {
        v11 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v11 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)operator new();
        CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v25 = *((_DWORD *)a2 + 13);
      v20 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 != v20)
        return 0;
      v21 = v23;
      result = CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(v11, (char **)a2, v24);
      if (!(_DWORD)result)
        return result;
LABEL_39:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
        return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v10 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v10 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)operator new();
        CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
      {
        v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v14 < 0)
          return 0;
      }
      else
      {
        v14 = *v13;
        *(_QWORD *)a2 = v13 + 1;
      }
      v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
      v19 = *((_DWORD *)a2 + 13);
      v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a2 + 13) = v19;
      if (v19 < 0 != v20)
        return 0;
      v21 = v17;
      result = CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(v10, (char **)a2, v18);
      if (!(_DWORD)result)
        return result;
      goto LABEL_39;
    }
LABEL_18:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B1F700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v11;
  char v12;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        *((_QWORD *)this + 2) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v11;
        *a2 = v11 + 1;
      }
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension_UnknownDimension::~Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_1E9565458;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E9565458;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.UnknownDimension");
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension_UnknownDimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)operator new();
  CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(a2, v3);
  return v3;
}

void sub_1D3B1FB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return 1;
}

std::string *CoreML::Specification::MILSpec::Dimension_UnknownDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension_ConstantDimension::~Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_1E9565588;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E9565588;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.ConstantDimension");
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension_ConstantDimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)operator new();
  CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(a2, v3);
  return v3;
}

void sub_1D3B1FCF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return 1;
}

std::string *CoreML::Specification::MILSpec::Dimension_ConstantDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

unint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    v1 = ((9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteUInt64(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::StateType::~StateType(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::StateType::~StateType(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9556158;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::StateType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.StateType");
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this)
{
  return CoreML::Specification::MILSpec::StateType::New(this, 0);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::StateType *v3;

  v3 = (CoreML::Specification::MILSpec::StateType *)operator new();
  CoreML::Specification::MILSpec::StateType::StateType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::StateType>(a2, v3);
  return v3;
}

void sub_1D3B1FEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::StateType::Clear(CoreML::Specification::MILSpec::StateType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::StateType::IsInitialized(CoreML::Specification::MILSpec::StateType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::StateType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B20064(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::StateType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::StateType::GetCachedSize(CoreML::Specification::MILSpec::StateType *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::StateType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9564F00;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryType");
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return CoreML::Specification::MILSpec::DictionaryType::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryType *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryType *)operator new();
  CoreML::Specification::MILSpec::DictionaryType::DictionaryType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryType>(a2, v3);
  return v3;
}

void sub_1D3B20204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::Clear(CoreML::Specification::MILSpec::DictionaryType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::IsInitialized(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B2041C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::GetCachedSize(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ListType::~ListType(CoreML::Specification::MILSpec::ListType *this)
{
  CoreML::Specification::MILSpec::ListType::~ListType(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9565B78;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ListType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListType");
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this)
{
  return CoreML::Specification::MILSpec::ListType::New(this, 0);
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ListType *v3;

  v3 = (CoreML::Specification::MILSpec::ListType *)operator new();
  CoreML::Specification::MILSpec::ListType::ListType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListType>(a2, v3);
  return v3;
}

void sub_1D3B2060C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListType::Clear(CoreML::Specification::MILSpec::ListType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::ListType::IsInitialized(CoreML::Specification::MILSpec::ListType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v10;
  char *v11;
  int v12;
  CoreML::Specification::MILSpec::Dimension *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t result;
  int v22;
  unsigned int v23;
  int v24;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_24;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_24;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_24;
      v13 = (CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)this + 3);
      if (!v13)
      {
        v13 = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(v13);
        *((_QWORD *)this + 3) = v13;
      }
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v24 = *((_DWORD *)a2 + 13);
      v19 = __OFSUB__(v24--, 1);
      *((_DWORD *)a2 + 13) = v24;
      if (v24 < 0 != v19)
        return 0;
      v20 = v22;
      result = CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(v13, a2, v23);
      if (!(_DWORD)result)
        return result;
LABEL_37:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v20))
        return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v12 < 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v12);
      v18 = *((_DWORD *)a2 + 13);
      v19 = __OFSUB__(v18--, 1);
      *((_DWORD *)a2 + 13) = v18;
      if (v18 < 0 != v19)
        return 0;
      v20 = v17;
      result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_37;
    }
LABEL_24:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B20884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::ListType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListType::GetCachedSize(CoreML::Specification::MILSpec::ListType *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TupleType::~TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  CoreML::Specification::MILSpec::TupleType::~TupleType(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565DD8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TupleType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleType");
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this)
{
  return CoreML::Specification::MILSpec::TupleType::New(this, 0);
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TupleType *v3;

  v3 = (CoreML::Specification::MILSpec::TupleType *)operator new();
  CoreML::Specification::MILSpec::TupleType::TupleType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleType>(a2, v3);
  return v3;
}

void sub_1D3B20A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::ValueType::clear_type(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleType::IsInitialized(CoreML::Specification::MILSpec::TupleType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::ValueType *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::TupleType *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::ValueType **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v25 = *((_DWORD *)a2 + 13);
      v26 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 == v26)
      {
        v27 = v24;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(Aligned, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B20D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleType::GetCachedSize(CoreML::Specification::MILSpec::TupleType *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_1D3B20EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v8 = *(uint64_t **)v5;
            do
            {
              v9 = (void **)v8[4];
              v10 = (uint64_t *)v8[1];
              v11 = v8;
              if (v10)
              {
                do
                {
                  v12 = v10;
                  v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v12 = (uint64_t *)v11[2];
                  v13 = *v12 == (_QWORD)v11;
                  v11 = v12;
                }
                while (!v13);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v8);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v9);
              v8 = v12;
            }
            while (v12 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v5);
            goto LABEL_17;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_17:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      CoreML::Specification::MILSpec::Value::~Value((CoreML::Specification::MILSpec::Value *)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x10B2C40CC7398DALL);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

BOOL google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned __int8 **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v3 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v4)
    return 1;
  if (v7 && v7 != *(_QWORD *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        break;
      if ((unsigned __int8 *)v7 == v4)
        return 1;
    }
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v13, v3, v4, a2);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = 0;
  v2 = result[1];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 32);
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * a2);
      if (v5)
        break;
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6)
      *result = *(_QWORD *)(*(_QWORD *)v5 + 32);
    else
      *result = v5;
  }
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  google::protobuf::Arena **v9;
  __int128 v11;
  unsigned int v12[258];
  std::random_device v13;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v13);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v12[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v12);
  v11 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v12, &v11);
  std::random_device::~random_device(&v13);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(a2, 8, v8);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v9;
  a1[1] = 8;
  return a1;
}

void sub_1D3B21524(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B214E0);
}

void CoreML::Specification::MILSpec::TensorType::~TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  CoreML::Specification::MILSpec::TensorType::~TensorType(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9564D38;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorType");
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this)
{
  return CoreML::Specification::MILSpec::TensorType::New(this, 0);
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorType *v3;

  v3 = (CoreML::Specification::MILSpec::TensorType *)operator new();
  CoreML::Specification::MILSpec::TensorType::TensorType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorType>(a2, v3);
  return v3;
}

void sub_1D3B215E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorType::Clear(CoreML::Specification::MILSpec::TensorType *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((_QWORD *)this + 6);
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t CoreML::Specification::MILSpec::TensorType::IsInitialized(CoreML::Specification::MILSpec::TensorType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  char *v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  char *v12;
  int v13;
  char *v14;
  unint64_t Varint64Fallback;
  int *v16;
  int v17;
  int v18;
  CoreML::Specification::MILSpec::Dimension *Aligned;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int *p_p;
  int v30;
  _BOOL4 v31;
  BOOL v32;
  google::protobuf::Arena *v33;
  google::protobuf::Arena **v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int VarintSizeAsIntFallback;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t Varint32Fallback;
  uint64_t result;
  _QWORD v47[2];
  void *__p;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = (char *)this + 40;
  v6 = (char *)this + 48;
  v7 = (CoreML::Specification::MILSpec::TensorType *)((char *)this + 16);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_25:
    if ((_DWORD)v10)
      v22 = (v10 & 7) == 4;
    else
      v22 = 1;
    if (v22)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))goto LABEL_77;
LABEL_30:
    v23 = 0;
LABEL_31:
    if (v23)
      goto LABEL_77;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) == 0)
    goto LABEL_25;
LABEL_8:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 8)
        goto LABEL_25;
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v13 = 0;
      }
      else
      {
        v13 = *v12;
        if ((*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v12 + 1;
          goto LABEL_76;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
      v13 = Varint32Fallback;
      if (Varint32Fallback < 0)
        goto LABEL_77;
LABEL_76:
      *((_DWORD *)this + 20) = v13;
      goto LABEL_30;
    case 2u:
      if (v10 != 16)
        goto LABEL_25;
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v24 & 1) == 0)
          goto LABEL_77;
      }
      else
      {
        Varint64Fallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      *((_QWORD *)this + 9) = Varint64Fallback;
      goto LABEL_30;
    case 3u:
      if (v10 != 26)
        goto LABEL_25;
      v16 = (int *)*((_QWORD *)this + 4);
      if (!v16)
      {
        v17 = *((_DWORD *)this + 6);
        v18 = *((_DWORD *)this + 7);
LABEL_56:
        if (v17 <= v18)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v18 - v17 + 1);
          v16 = (int *)*((_QWORD *)this + 4);
        }
        v18 = *v16;
        goto LABEL_59;
      }
      v17 = *((_DWORD *)this + 6);
      v18 = *v16;
      if (v17 < *v16)
      {
        *((_DWORD *)this + 6) = v17 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Dimension **)&v16[2 * v17 + 2];
        goto LABEL_65;
      }
      if (v18 == *((_DWORD *)this + 7))
        goto LABEL_56;
LABEL_59:
      *v16 = v18 + 1;
      v33 = *(google::protobuf::Arena **)v7;
      if (*(_QWORD *)v7)
      {
        CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
        v34 = google::protobuf::Arena::AllocateAligned(v33, 0, 24);
        *v34 = Aligned;
        v34[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
        v35 = (unint64_t *)((char *)v33 + 32);
        do
          v36 = __ldxr(v35);
        while (__stxr((unint64_t)v34, v35));
        v34[2] = (google::protobuf::Arena *)v36;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
      }
      v37 = *((_QWORD *)this + 4);
      v38 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v38 + 1;
      *(_QWORD *)(v37 + 8 * v38 + 8) = Aligned;
LABEL_65:
      v39 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v39 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_77;
      }
      else
      {
        VarintSizeAsIntFallback = *v39;
        *(_QWORD *)a2 = v39 + 1;
      }
      v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v43 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v43--, 1);
      *((_DWORD *)a2 + 13) = v43;
      if (v43 < 0 == v27)
      {
        v44 = v41;
        if (CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(Aligned, a2, v42))
        {
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v44))
            goto LABEL_30;
        }
      }
LABEL_77:
      result = 0;
      break;
    case 4u:
      if (v10 != 34)
        goto LABEL_25;
      v47[0] = v5;
      v47[1] = v6;
      v49 = 0;
      v50 = 0;
      __p = 0;
      v51 = 0;
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          goto LABEL_73;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 != v27
        || (v28 = v25,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v47, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
      {
LABEL_73:
        v32 = 0;
        v23 = 6;
        goto LABEL_48;
      }
      if (v50 >= 0)
        p_p = (unsigned int *)&__p;
      else
        p_p = (unsigned int *)__p;
      if (v50 >= 0)
        v30 = HIBYTE(v50);
      else
        v30 = v49;
      v31 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v30, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      v32 = v31;
      if (v31)
        v23 = 0;
      else
        v23 = 6;
LABEL_48:
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      if (SHIBYTE(v50) < 0)
        operator delete(__p);
      if (!v32)
        goto LABEL_31;
      goto LABEL_30;
    default:
      goto LABEL_25;
  }
  return result;
}

void sub_1D3B21A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  MEMORY[0x1D8251A40](v19, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  unint64_t v7;
  int v8;
  int i;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::io::CodedOutputStream *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned __int8 *v30[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 80);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 72);
  if (v7)
    this = google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  v8 = *(_DWORD *)(v5 + 24);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v10 = *(unint64_t **)(v5 + 64);
  v11 = *v10;
  if (*v10)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v11 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_31:
        v19 = operator new[]();
        google::protobuf::Map<std::string,std::string>::begin(v30, *(_QWORD **)(v5 + 64));
        v20 = v30[0];
        if (v30[0])
        {
          v21 = 0;
          do
          {
            *(_QWORD *)(v19 + 8 * v21) = *((_QWORD *)v20 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v30);
            ++v21;
            v20 = v30[0];
          }
          while (v30[0]);
        }
        else
        {
          v21 = 0;
        }
        v22 = 126 - 2 * __clz(v21);
        if (v21)
          v23 = v22;
        else
          v23 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v19, (char *)(v19 + 8 * v21), v23, 1);
        if (v21)
        {
          v24 = 0;
          v25 = 0;
          do
          {
            v27 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v19 + 8 * v24), *(_QWORD *)(v19 + 8 * v24) + 24, *(google::protobuf::Arena **)(v5 + 40));
            if (v25 != v27)
            {
              if (v25)
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              v25 = v27;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v25, a2, v26);
            v28 = *(unsigned int **)(v19 + 8 * v24);
            if (*((char *)v28 + 23) < 0)
            {
              v28 = *(unsigned int **)v28;
              v29 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v24) + 8);
            }
            else
            {
              LODWORD(v29) = *((unsigned __int8 *)v28 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
            ++v24;
          }
          while (v21 != v24);
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        return MEMORY[0x1D8251A28](v19, 0x60C8044C4A2DFLL);
      }
    }
    else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_31;
    }
    this = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v30, v10);
    v13 = 0;
    while (v30[0])
    {
      v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v30[0] + 3), *((_QWORD *)v30[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 40));
      if (v13 != v15)
      {
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v13 = v15;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v13, a2, v14);
      v16 = (unsigned int *)*((_QWORD *)v30[0] + 3);
      if (*((char *)v16 + 23) < 0)
      {
        v16 = *(unsigned int **)v16;
        v17 = *(_QWORD *)(*((_QWORD *)v30[0] + 3) + 8);
      }
      else
      {
        LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v30);
    }
    if (v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

void sub_1D3B21DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorType::GetCachedSize(CoreML::Specification::MILSpec::TensorType *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::MILSpec::Value *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v4 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, a1 + 16), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v11 + 16), *(google::protobuf::Arena ***)(v11 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v8 < 0)
  {
    VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  v16 = *(_DWORD *)(a2 + 52);
  v17 = __OFSUB__(v16--, 1);
  *(_DWORD *)(a2 + 52) = v16;
  if (v16 < 0 != v17)
    goto LABEL_29;
  v18 = v15;
  if (!CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v7, (google::protobuf::io::CodedInputStream *)a2)|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v18))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Value *v6;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Value **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Value::Value(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
      CoreML::Specification::MILSpec::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::MILSpec::Value::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((uint64_t *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_1D3B2227C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95675F8;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Value **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Value::Value(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
      CoreML::Specification::MILSpec::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  return CoreML::Specification::MILSpec::Value::Swap((uint64_t)v3, Aligned);
}

void sub_1D3B22400(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Swap(uint64_t this, CoreML::Specification::MILSpec::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != (CoreML::Specification::MILSpec::Value *)this)
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    v4 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v4;
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ValueType::~ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  CoreML::Specification::MILSpec::ValueType::~ValueType(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565E70;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ValueType");
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this)
{
  return CoreML::Specification::MILSpec::ValueType::New(this, 0);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ValueType *v3;

  v3 = (CoreML::Specification::MILSpec::ValueType *)operator new();
  CoreML::Specification::MILSpec::ValueType::ValueType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ValueType>(a2, v3);
  return v3;
}

void sub_1D3B225B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::IsInitialized(CoreML::Specification::MILSpec::ValueType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ValueType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::ValueType::GetCachedSize(CoreML::Specification::MILSpec::ValueType *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E9564F98;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::NamedValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.NamedValueType");
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return CoreML::Specification::MILSpec::NamedValueType::New(this, 0);
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::NamedValueType *v3;

  v3 = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
  CoreML::Specification::MILSpec::NamedValueType::NamedValueType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::NamedValueType>(a2, v3);
  return v3;
}

void sub_1D3B227E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::Clear(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::IsInitialized(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  unsigned int *v13;
  std::string::size_type size;
  CoreML::Specification::MILSpec::ValueType *v15;
  char *v16;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_25;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_25;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_25;
        v15 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
        if (!v15)
        {
          v15 = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v15);
          *((_QWORD *)this + 3) = v15;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v19 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v21 = *((_DWORD *)a2 + 13);
        v22 = __OFSUB__(v21--, 1);
        *((_DWORD *)a2 + 13) = v21;
        if (v21 < 0 == v22)
        {
          v23 = v19;
          result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v15, a2, v20);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v23))
            continue;
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name"))return 0;
    }
LABEL_25:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B22A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::TensorType **v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v6 = (CoreML::Specification::MILSpec::TensorType **)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::SerializeWithCachedSizes(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::GetCachedSize(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return *((unsigned int *)this + 8);
}

void CoreML::Specification::MILSpec::NamedValueType::MergeFrom(CoreML::Specification::MILSpec::NamedValueType *this, const CoreML::Specification::MILSpec::NamedValueType *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  CoreML::Specification::MILSpec::ValueType *v8;
  const CoreML::Specification::MILSpec::ValueType *v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      CoreML::Specification::MILSpec::ValueType::MergeFrom((std::string *)v8, v9);
    }
  }
}

void sub_1D3B22CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  *(_QWORD *)this = &off_1E9564F98;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B22D4C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::NamedValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      CoreML::Specification::MILSpec::Argument::~Argument((CoreML::Specification::MILSpec::Argument *)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x10B2C40C743746ALL);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::MILSpec::Argument::~Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(_QWORD *)this = &off_1E9565A48;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::MILSpec::Argument::~Argument(this);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  google::protobuf::Arena **v9;
  __int128 v11;
  unsigned int v12[258];
  std::random_device v13;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v13);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v12[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v12);
  v11 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v12, &v11);
  std::random_device::~random_device(&v13);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(a2, 8, v8);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v9;
  a1[1] = 8;
  return a1;
}

void sub_1D3B23264(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B23220);
}

void CoreML::Specification::MILSpec::Operation::~Operation(CoreML::Specification::MILSpec::Operation *this)
{
  CoreML::Specification::MILSpec::Operation::~Operation(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9565D40;
  v2 = *((_QWORD *)this + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 13);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 9);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Operation::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Operation");
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this)
{
  return CoreML::Specification::MILSpec::Operation::New(this, 0);
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Operation *v3;

  v3 = (CoreML::Specification::MILSpec::Operation *)operator new();
  CoreML::Specification::MILSpec::Operation::Operation(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Operation>(a2, v3);
  return v3;
}

void sub_1D3B2331C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Operation::Clear(CoreML::Specification::MILSpec::Operation *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Block **v6;
  CoreML::Specification::MILSpec::Block *v7;
  uint64_t v8;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear((_QWORD *)this + 3);
  v2 = *((unsigned int *)this + 14);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 14) = 0;
  }
  v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::MILSpec::Block **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::MILSpec::Block::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 20) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((_QWORD *)this + 13);
  v8 = *((_QWORD *)this + 16);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Operation::IsInitialized(CoreML::Specification::MILSpec::Operation *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  _QWORD *v6;
  std::string **v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  std::string *v12;
  unsigned int *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  CoreML::Specification::MILSpec::NamedValueType *v17;
  char *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  CoreML::Specification::MILSpec::Block *Aligned;
  char *v24;
  int VarintSizeAsIntFallback;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  int v33;
  _BOOL4 v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  google::protobuf::io::CodedInputStream *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  CoreML::Specification::MILSpec::Argument *v46;
  char *v47;
  int v48;
  uint64_t v49;
  std::string *v50;
  int BeyondKeyValuePair;
  BOOL v52;
  google::protobuf::Arena *v53;
  google::protobuf::Arena **v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int *p_p;
  int v69;
  uint64_t result;
  google::protobuf::internal::RepeatedPtrFieldBase *v71;
  google::protobuf::Arena **v72;
  _QWORD *v73;
  google::protobuf::Arena **v74;
  google::protobuf::Arena **v75;
  _QWORD *v76;
  std::string __p;
  google::protobuf::Arena **v78;
  uint64_t v79;

  v73 = (_QWORD *)((char *)this + 104);
  v74 = (google::protobuf::Arena **)((char *)this + 96);
  v5 = (char *)this + 48;
  v71 = (CoreML::Specification::MILSpec::Operation *)((char *)this + 72);
  v72 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (_QWORD *)((char *)this + 24);
  v7 = (std::string **)((char *)this + 128);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_31:
    if ((_DWORD)v10)
      v26 = (v10 & 7) == 4;
    else
      v26 = 1;
    if (v26)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))goto LABEL_131;
LABEL_36:
    v27 = 0;
LABEL_37:
    if (v27)
      goto LABEL_131;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) == 0)
    goto LABEL_31;
LABEL_8:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 10)
        goto LABEL_31;
      v12 = *v7;
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v7;
      }
      if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v12))
        goto LABEL_131;
      v13 = (unsigned int *)*v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.type"))goto LABEL_131;
      goto LABEL_36;
    case 2u:
      if (v10 != 18)
        goto LABEL_31;
      v75 = v72;
      v76 = v6;
      memset(&__p, 0, sizeof(__p));
      v79 = 0;
      v24 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v24 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_127;
      }
      else
      {
        VarintSizeAsIntFallback = *v24;
        *(_QWORD *)a2 = v24 + 1;
      }
      v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v42 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v42--, 1);
      *((_DWORD *)a2 + 13) = v42;
      if (v42 < 0 != v30)
        goto LABEL_127;
      v43 = v41;
      v44 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v44 == 10)
      {
        *(_QWORD *)a2 = v44 + 1;
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, &__p))
          goto LABEL_127;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
        {
          v45 = *(_QWORD *)v76[2];
          v78 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)v76, (uint64_t)&__p);
          if (v45 != *(_QWORD *)v76[2])
          {
            google::protobuf::io::CodedInputStream::Skip(a2, 1u);
            v46 = (CoreML::Specification::MILSpec::Argument *)v78;
            v47 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v47 < 0)
            {
              v48 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v48 < 0)
                goto LABEL_126;
            }
            else
            {
              v48 = *v47;
              *(_QWORD *)a2 = v47 + 1;
            }
            v64 = google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
            v66 = *((_DWORD *)a2 + 13);
            v30 = __OFSUB__(v66--, 1);
            *((_DWORD *)a2 + 13) = v66;
            if (v66 < 0 != v30
              || (v67 = v64,
                  !CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(v46, a2, v65))
              || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v67))
            {
LABEL_126:
              google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(v76, (unsigned __int8 *)&__p);
              goto LABEL_127;
            }
            if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              *((_BYTE *)a2 + 36) = 1;
              goto LABEL_109;
            }
            BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair((uint64_t)&v75, (uint64_t)a2);
            goto LABEL_108;
          }
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        memset(&__p, 0, sizeof(__p));
      }
      v49 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v75);
      if (v79 != v49)
      {
        if (v79)
          (*(void (**)(void))(*(_QWORD *)v79 + 8))();
        v79 = v49;
      }
      v50 = *(std::string **)(v49 + 16);
      *(_DWORD *)(v49 + 40) |= 1u;
      if (v50 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v49 + 16), *(google::protobuf::Arena ***)(v49 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v50 = *(std::string **)(v49 + 16);
      }
      std::string::operator=(v50, &__p);
      BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v79 + 88))(v79, a2);
      if (BeyondKeyValuePair)
        google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry((uint64_t)&v75);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79))
      {
        v79 = 0;
        if ((BeyondKeyValuePair & 1) == 0)
        {
          v52 = 0;
          v27 = 6;
          goto LABEL_122;
        }
        goto LABEL_109;
      }
LABEL_108:
      if (!BeyondKeyValuePair)
        goto LABEL_127;
LABEL_109:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v43))
        goto LABEL_127;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (unsigned int *)&__p;
      else
        p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v69 = __p.__r_.__value_.__r.__words[1];
      v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v69, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
LABEL_117:
      v52 = v34;
      if (v34)
        v27 = 0;
      else
        v27 = 6;
LABEL_120:
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
LABEL_122:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v52)
        goto LABEL_37;
      goto LABEL_36;
    case 3u:
      if (v10 != 26)
        goto LABEL_31;
      v17 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)v5);
      v18 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
      {
        v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v19 < 0)
          goto LABEL_131;
      }
      else
      {
        v19 = *v18;
        *(_QWORD *)a2 = v18 + 1;
      }
      v35 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
      v37 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v37--, 1);
      *((_DWORD *)a2 + 13) = v37;
      if (v37 < 0 != v30)
        goto LABEL_131;
      v38 = v35;
      if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v17, a2, v36))
        goto LABEL_131;
      v39 = a2;
      v40 = v38;
      goto LABEL_100;
    case 4u:
      if (v10 != 34)
        goto LABEL_31;
      v20 = (int *)*((_QWORD *)this + 11);
      if (!v20)
      {
        v21 = *((_DWORD *)this + 20);
        v22 = *((_DWORD *)this + 21);
LABEL_84:
        if (v21 <= v22)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v71, v22 - v21 + 1);
          v20 = (int *)*((_QWORD *)this + 11);
        }
        v22 = *v20;
        goto LABEL_87;
      }
      v21 = *((_DWORD *)this + 20);
      v22 = *v20;
      if (v21 < *v20)
      {
        *((_DWORD *)this + 20) = v21 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Block **)&v20[2 * v21 + 2];
        goto LABEL_93;
      }
      if (v22 == *((_DWORD *)this + 21))
        goto LABEL_84;
LABEL_87:
      *v20 = v22 + 1;
      v53 = *(google::protobuf::Arena **)v71;
      if (*(_QWORD *)v71)
      {
        CoreML::Specification::MILSpec::Block::Block(Aligned);
        v54 = google::protobuf::Arena::AllocateAligned(v53, 0, 24);
        *v54 = Aligned;
        v54[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
        v55 = (unint64_t *)((char *)v53 + 32);
        do
          v56 = __ldxr(v55);
        while (__stxr((unint64_t)v54, v55));
        v54[2] = (google::protobuf::Arena *)v56;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
        CoreML::Specification::MILSpec::Block::Block(Aligned);
      }
      v57 = *((_QWORD *)this + 11);
      v58 = *((int *)this + 20);
      *((_DWORD *)this + 20) = v58 + 1;
      *(_QWORD *)(v57 + 8 * v58 + 8) = Aligned;
LABEL_93:
      v59 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v59 < 0)
      {
        v60 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v60 < 0)
          goto LABEL_131;
      }
      else
      {
        v60 = *v59;
        *(_QWORD *)a2 = v59 + 1;
      }
      v61 = google::protobuf::io::CodedInputStream::PushLimit(a2, v60);
      v62 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v62--, 1);
      *((_DWORD *)a2 + 13) = v62;
      if (v62 < 0 == v30)
      {
        v63 = v61;
        if (CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(Aligned, a2))
        {
          v39 = a2;
          v40 = v63;
LABEL_100:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v39, v40))
            goto LABEL_36;
        }
      }
LABEL_131:
      result = 0;
      break;
    case 5u:
      if (v10 != 42)
        goto LABEL_31;
      v75 = v74;
      v76 = v73;
      memset(&__p, 0, sizeof(__p));
      v79 = 0;
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
      {
        v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0)
          goto LABEL_127;
      }
      else
      {
        v16 = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
      v29 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v29--, 1);
      *((_DWORD *)a2 + 13) = v29;
      if (v29 < 0 != v30
        || (v31 = v28,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v75, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31))
      {
LABEL_127:
        v52 = 0;
        v27 = 6;
        goto LABEL_120;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = (unsigned int *)&__p;
      else
        v32 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v33 = __p.__r_.__value_.__r.__words[1];
      v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v32, v33, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      goto LABEL_117;
    default:
      goto LABEL_31;
  }
  return result;
}

void sub_1D3B23B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  MEMORY[0x1D8251A40](v23, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Operation::ByteSizeLong(CoreML::Specification::MILSpec::Operation *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v25[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,std::string>::begin(v25, v2);
  v4 = 0;
  while (v25[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v25[0] + 3), *((_QWORD *)v25[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v25);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v7 = *((unsigned int *)this + 14);
  v8 = v3 + v7;
  if ((_DWORD)v7)
  {
    v9 = 0;
    do
    {
      v10 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 8) + 8 * v9 + 8));
      v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while ((_DWORD)v7 != v9);
  }
  v11 = *((unsigned int *)this + 20);
  v12 = v8 + v11;
  if ((_DWORD)v11)
  {
    v13 = 0;
    do
    {
      v14 = CoreML::Specification::MILSpec::Block::ByteSizeLong(*(CoreML::Specification::MILSpec::Block **)(*((_QWORD *)this + 11) + 8 * v13 + 8));
      v12 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v13;
    }
    while ((_DWORD)v11 != v13);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 15);
  v16 = *(unsigned int *)v15;
  google::protobuf::Map<std::string,std::string>::begin(v25, v15);
  v17 = 0;
  v18 = v16 + v12;
  while (v25[0])
  {
    v19 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v25[0] + 3), *((_QWORD *)v25[0] + 3) + 24, *((google::protobuf::Arena **)this + 12));
    if (v17 != (_DWORD *)v19)
    {
      if (v17)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      v17 = (_DWORD *)v19;
    }
    v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v17);
    v18 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v25);
  }
  if (v17)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  v21 = *((_QWORD *)this + 16);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(_QWORD *)(v21 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v21 + 23))
  {
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v18 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 34) = v18;
  return v18;
}

void sub_1D3B23E44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Operation::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::io::CodedOutputStream *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  int i;
  int v30;
  int j;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  google::protobuf::io::CodedOutputStream *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  google::protobuf::io::CodedOutputStream *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned __int8 *v52[3];

  result = *((_QWORD *)this + 16);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.type");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 16), a2);
  }
LABEL_7:
  v8 = (unint64_t *)*((_QWORD *)this + 5);
  v9 = *v8;
  if (!*v8)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v9 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v17 = operator new[]();
      google::protobuf::Map<std::string,std::string>::begin(v52, *((_QWORD **)this + 5));
      v18 = v52[0];
      if (v52[0])
      {
        v19 = 0;
        do
        {
          *(_QWORD *)(v17 + 8 * v19) = *((_QWORD *)v18 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v52);
          ++v19;
          v18 = v52[0];
        }
        while (v52[0]);
      }
      else
      {
        v19 = 0;
      }
      v20 = 126 - 2 * __clz(v19);
      if (v19)
        v21 = v20;
      else
        v21 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(v17, (char *)(v17 + 8 * v19), v21, 1);
      if (v19)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v25 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v17 + 8 * v22), *(_QWORD *)(v17 + 8 * v22) + 24, *((google::protobuf::Arena **)this + 2));
          if (v23 != v25)
          {
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v23 = v25;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v23, a2, v24);
          v26 = *(unsigned int **)(v17 + 8 * v22);
          if (*((char *)v26 + 23) < 0)
          {
            v26 = *(unsigned int **)v26;
            v27 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v22) + 8);
          }
          else
          {
            LODWORD(v27) = *((unsigned __int8 *)v26 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
          ++v22;
        }
        while (v19 != v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      result = MEMORY[0x1D8251A28](v17, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v9 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v52, v8);
  v11 = 0;
  while (v52[0])
  {
    v13 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v52[0] + 3), *((_QWORD *)v52[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v11 != v13)
    {
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v11 = v13;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v11, a2, v12);
    v14 = (unsigned int *)*((_QWORD *)v52[0] + 3);
    if (*((char *)v14 + 23) < 0)
    {
      v14 = *(unsigned int **)v14;
      v15 = *(_QWORD *)(*((_QWORD *)v52[0] + 3) + 8);
    }
    else
    {
      LODWORD(v15) = *((unsigned __int8 *)v14 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v52);
  }
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_50:
  v28 = *((_DWORD *)this + 14);
  if (v28)
  {
    for (i = 0; i != v28; ++i)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 8) + 8 * i + 8), a2, a4);
  }
  v30 = *((_DWORD *)this + 20);
  if (v30)
  {
    for (j = 0; j != v30; ++j)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j + 8), a2, a4);
  }
  v32 = (unint64_t *)*((_QWORD *)this + 15);
  v33 = *v32;
  if (*v32)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v33 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_79:
        v41 = operator new[]();
        google::protobuf::Map<std::string,std::string>::begin(v52, *((_QWORD **)this + 15));
        v42 = v52[0];
        if (v52[0])
        {
          v43 = 0;
          do
          {
            *(_QWORD *)(v41 + 8 * v43) = *((_QWORD *)v42 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v52);
            ++v43;
            v42 = v52[0];
          }
          while (v52[0]);
        }
        else
        {
          v43 = 0;
        }
        v44 = 126 - 2 * __clz(v43);
        if (v43)
          v45 = v44;
        else
          v45 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v41, (char *)(v41 + 8 * v43), v45, 1);
        if (v43)
        {
          v46 = 0;
          v47 = 0;
          do
          {
            v49 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v41 + 8 * v46), *(_QWORD *)(v41 + 8 * v46) + 24, *((google::protobuf::Arena **)this + 12));
            if (v47 != v49)
            {
              if (v47)
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
              v47 = v49;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v47, a2, v48);
            v50 = *(unsigned int **)(v41 + 8 * v46);
            if (*((char *)v50 + 23) < 0)
            {
              v50 = *(unsigned int **)v50;
              v51 = *(_QWORD *)(*(_QWORD *)(v41 + 8 * v46) + 8);
            }
            else
            {
              LODWORD(v51) = *((unsigned __int8 *)v50 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v50, v51, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
            ++v46;
          }
          while (v43 != v46);
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
        return MEMORY[0x1D8251A28](v41, 0x60C8044C4A2DFLL);
      }
    }
    else if (v33 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_79;
    }
    result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v52, v32);
    v35 = 0;
    while (v52[0])
    {
      v37 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v52[0] + 3), *((_QWORD *)v52[0] + 3) + 24, *((google::protobuf::Arena **)this + 12));
      if (v35 != v37)
      {
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v35 = v37;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v35, a2, v36);
      v38 = (unsigned int *)*((_QWORD *)v52[0] + 3);
      if (*((char *)v38 + 23) < 0)
      {
        v38 = *(unsigned int **)v38;
        v39 = *(_QWORD *)(*((_QWORD *)v52[0] + 3) + 8);
      }
      else
      {
        LODWORD(v39) = *((unsigned __int8 *)v38 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v52);
    }
    if (v35)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

void sub_1D3B24384(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Operation::GetCachedSize(CoreML::Specification::MILSpec::Operation *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566AD0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E95676A0;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95676A0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 24);
    if ((int)v4 >= 1)
    {
      v5 = (uint64_t *)(*(_QWORD *)(v3 + 32) + 8);
      do
      {
        v6 = *v5++;
        result = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(v3 + 24) = 0;
    }
  }
  *(_DWORD *)(v1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Argument *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Argument::MergeFrom(*(CoreML::Specification::MILSpec::Argument **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_1D3B24EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*a2;
        if (*a2 >= a2[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = (unsigned __int8 *)(v6 + 1);
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = (char *)*a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = (unsigned __int8 *)(v11 + 1);
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Argument **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = (char *)*a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *a2 = (unsigned __int8 *)(v17 + 1);
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)a2 + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)a2 + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(Aligned, (google::protobuf::io::CodedInputStream *)a2, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_1D3B25168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Argument *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Argument::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t CoreML::Specification::MILSpec::Argument::ByteSizeLong(CoreML::Specification::MILSpec::Argument *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(*(CoreML::Specification::MILSpec::Argument_Binding **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v7 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*((CoreML::Specification::MILSpec::Value **)this + 2));
    v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
  }
  else
  {
    if (v2 != 1)
    {
      result = 0;
      goto LABEL_9;
    }
    v3 = *((_QWORD *)this + 2);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
  }
  result = v6 + 1;
LABEL_9:
  *((_DWORD *)this + 6) = result;
  return result;
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(_QWORD *)this = &off_1E9565A48;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::Argument *)&CoreML::Specification::MILSpec::_Argument_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B25584(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::Argument_Binding *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::Argument *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Argument_Binding **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
        CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B257F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  std::string *v12;
  uint64_t result;
  int v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type size;
  char *v19;
  int VarintSizeAsIntFallback;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = *v5;
        }
        else
        {
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (std::string *)operator new();
          CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)v12);
          *v5 = v12;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v23 = *((_DWORD *)a2 + 13);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a2 + 13) = v23;
        if (v23 < 0 == v24)
        {
          v25 = v21;
          result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)v12, a2, v22);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v25))
            continue;
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_27:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        goto LABEL_28;
      }
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_27;
LABEL_28:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v15 = *((_DWORD *)this + 7);
      v16 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v16 = *v5;
      if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
        v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
      v17 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v17 = *v5;
      if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        size = v17->__r_.__value_.__l.__size_;
      else
        LODWORD(size) = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v16, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name"))return 0;
    }
LABEL_20:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B25A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::clear_binding(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else if (v2 == 1)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1D8251A40](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  *(_QWORD *)this = &off_1E95650C8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Argument_Binding *)&CoreML::Specification::MILSpec::_Argument_Binding_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B25B68(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::Specification::MILSpec::Argument::MergeFrom(CoreML::Specification::MILSpec::Argument *this, const CoreML::Specification::MILSpec::Argument *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const CoreML::Specification::MILSpec::Argument_Binding **v12;
  CoreML::Specification::MILSpec::Argument_Binding **v13;
  const CoreML::Specification::MILSpec::Argument_Binding *v14;
  const CoreML::Specification::MILSpec::Argument_Binding *v15;
  CoreML::Specification::MILSpec::Argument_Binding *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::MILSpec::Argument_Binding **v20;
  const CoreML::Specification::MILSpec::Argument_Binding **v21;
  const CoreML::Specification::MILSpec::Argument_Binding *v22;
  CoreML::Specification::MILSpec::Argument_Binding *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v29 = *((_QWORD *)a2 + 4);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Argument *)((char *)this + 16), v5);
    v7 = v6;
    v8 = **((int **)this + 4);
    v9 = *((int *)this + 6);
    v10 = v8 - v9;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v29 + 8);
      v13 = (CoreML::Specification::MILSpec::Argument_Binding **)v6;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v5)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v5 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::MILSpec::Argument_Binding **)((char *)v7 + v19);
      v21 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v19 + v29 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
          CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v27 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v27;
    v28 = (int *)*((_QWORD *)this + 4);
    if (*v28 < v27)
      *v28 = v27;
  }
}

void sub_1D3B25D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(const CoreML::Specification::MILSpec::Argument_Binding *a1, CoreML::Specification::MILSpec::Argument_Binding *a2)
{
  CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(a2, a1);
}

void CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(CoreML::Specification::MILSpec::Argument_Binding *this, const CoreML::Specification::MILSpec::Argument_Binding *a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  CoreML::Specification::MILSpec::Value *v8;
  CoreML::Specification::MILSpec::Value *v9;
  const CoreML::Specification::MILSpec::Value *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*((_DWORD *)this + 7) == 2)
    {
      v8 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = (CoreML::Specification::MILSpec::Value *)operator new();
      v9 = CoreML::Specification::MILSpec::Value::Value(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
        goto LABEL_16;
      }
    }
    v10 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
LABEL_16:
    CoreML::Specification::MILSpec::Value::MergeFrom(v8, v10);
    return;
  }
  if (v5 == 1)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) == 1)
    {
      v7 = (std::string *)*((_QWORD *)this + 2);
      if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v7, v6);
        return;
      }
    }
    else
    {
      CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v6);
  }
}

void sub_1D3B25E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9566B78;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_1D3B25FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t CoreML::Specification::MILSpec::Block::ByteSizeLong(CoreML::Specification::MILSpec::Block *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  v12 = *((unsigned int *)this + 18);
  v13 = v7 + v12;
  if ((_DWORD)v12)
  {
    v14 = 0;
    do
    {
      v15 = CoreML::Specification::MILSpec::Operation::ByteSizeLong(*(CoreML::Specification::MILSpec::Operation **)(*((_QWORD *)this + 10) + 8 * v14 + 8));
      v13 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      ++v14;
    }
    while ((_DWORD)v12 != v14);
  }
  v16 = (_QWORD *)*((_QWORD *)this + 14);
  v17 = *(unsigned int *)v16;
  google::protobuf::Map<std::string,std::string>::begin(v23, v16);
  v18 = 0;
  v19 = v17 + v13;
  while (v23[0])
  {
    v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v23[0] + 3), *((_QWORD *)v23[0] + 3) + 24, *((google::protobuf::Arena **)this + 11));
    if (v18 != (_DWORD *)v20)
    {
      if (v18)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      v18 = (_DWORD *)v20;
    }
    v21 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v18);
    v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v23);
  }
  if (v18)
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  *((_DWORD *)this + 30) = v19;
  return v19;
}

void sub_1D3B26344(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

CoreML::Specification::MILSpec::NamedValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(uint64_t a1)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::MILSpec::NamedValueType *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v4 - v3 + 1);
      v2 = *(int **)(a1 + 16);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::NamedValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_1D3B26488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Block *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::NamedValueType *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int *v16;
  int v17;
  int v18;
  CoreML::Specification::MILSpec::Operation *v19;
  char *v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  std::string *Aligned;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int *p_p;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  google::protobuf::Arena *v40;
  google::protobuf::Arena **v41;
  unint64_t *v42;
  unint64_t v43;
  google::protobuf::Arena *v44;
  google::protobuf::Arena **v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  char *v61;
  _QWORD v62[2];
  void *__p;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = (char *)this + 88;
  v5 = (char *)this + 96;
  v6 = (CoreML::Specification::MILSpec::Block *)((char *)this + 64);
  v7 = (CoreML::Specification::MILSpec::Block *)((char *)this + 40);
  v8 = (char *)this + 16;
  while (1)
  {
    v9 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v10 = *v9;
    if (*v9 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v9 + 1;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) == 0)
      goto LABEL_25;
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_25;
        v13 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)v8);
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v30 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v31)
          return 0;
        v32 = v28;
        if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v13, a2, v29))
          return 0;
        goto LABEL_82;
      case 2u:
        if (v11 != 18)
          goto LABEL_25;
        v22 = (int *)*((_QWORD *)this + 7);
        if (!v22)
        {
          v23 = *((_DWORD *)this + 12);
          v24 = *((_DWORD *)this + 13);
LABEL_67:
          if (v23 <= v24)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v24 - v23 + 1);
            v22 = (int *)*((_QWORD *)this + 7);
          }
          v24 = *v22;
          goto LABEL_70;
        }
        v23 = *((_DWORD *)this + 12);
        v24 = *v22;
        if (v23 < *v22)
        {
          *((_DWORD *)this + 12) = v23 + 1;
          Aligned = *(std::string **)&v22[2 * v23 + 2];
          goto LABEL_86;
        }
        if (v24 == *((_DWORD *)this + 13))
          goto LABEL_67;
LABEL_70:
        *v22 = v24 + 1;
        v44 = *(google::protobuf::Arena **)v7;
        if (*(_QWORD *)v7)
        {
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          v45 = google::protobuf::Arena::AllocateAligned(v44, 0, 24);
          *v45 = (google::protobuf::Arena *)Aligned;
          v45[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
          v46 = (unint64_t *)((char *)v44 + 32);
          do
            v47 = __ldxr(v46);
          while (__stxr((unint64_t)v45, v46));
          v45[2] = (google::protobuf::Arena *)v47;
        }
        else
        {
          Aligned = (std::string *)operator new();
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
        }
        v55 = *((_QWORD *)this + 7);
        v56 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v56 + 1;
        *(_QWORD *)(v55 + 8 * v56 + 8) = Aligned;
LABEL_86:
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, Aligned))
          return 0;
        v57 = *((_QWORD *)this + 7);
        v58 = *(unsigned int **)(v57 + 8 * *((int *)this + 12));
        if (*((char *)v58 + 23) < 0)
        {
          v58 = *(unsigned int **)v58;
          v59 = *(_QWORD *)(*(_QWORD *)(v57 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v59) = *((unsigned __int8 *)v58 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v58, v59, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs"))return 0;
        break;
      case 3u:
        if (v11 != 26)
          goto LABEL_25;
        v16 = (int *)*((_QWORD *)this + 10);
        if (!v16)
        {
          v17 = *((_DWORD *)this + 18);
          v18 = *((_DWORD *)this + 19);
LABEL_59:
          if (v17 <= v18)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v6, v18 - v17 + 1);
            v16 = (int *)*((_QWORD *)this + 10);
          }
          v18 = *v16;
          goto LABEL_62;
        }
        v17 = *((_DWORD *)this + 18);
        v18 = *v16;
        if (v17 < *v16)
        {
          *((_DWORD *)this + 18) = v17 + 1;
          v19 = *(CoreML::Specification::MILSpec::Operation **)&v16[2 * v17 + 2];
          goto LABEL_76;
        }
        if (v18 == *((_DWORD *)this + 19))
          goto LABEL_59;
LABEL_62:
        *v16 = v18 + 1;
        v40 = *(google::protobuf::Arena **)v6;
        if (*(_QWORD *)v6)
        {
          CoreML::Specification::MILSpec::Operation::Operation(v19);
          v41 = google::protobuf::Arena::AllocateAligned(v40, 0, 24);
          *v41 = v19;
          v41[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>;
          v42 = (unint64_t *)((char *)v40 + 32);
          do
            v43 = __ldxr(v42);
          while (__stxr((unint64_t)v41, v42));
          v41[2] = (google::protobuf::Arena *)v43;
        }
        else
        {
          v19 = (CoreML::Specification::MILSpec::Operation *)operator new();
          CoreML::Specification::MILSpec::Operation::Operation(v19);
        }
        v48 = *((_QWORD *)this + 10);
        v49 = *((int *)this + 18);
        *((_DWORD *)this + 18) = v49 + 1;
        *(_QWORD *)(v48 + 8 * v49 + 8) = v19;
LABEL_76:
        v50 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v50 < 0)
        {
          v51 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v51 < 0)
            return 0;
        }
        else
        {
          v51 = *v50;
          *(_QWORD *)a2 = v50 + 1;
        }
        v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v51);
        v54 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v54--, 1);
        *((_DWORD *)a2 + 13) = v54;
        if (v54 < 0 != v31)
          return 0;
        v32 = v52;
        if (!CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(v19, a2, v53))
          return 0;
LABEL_82:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v32))
          return 0;
        break;
      case 4u:
        if (v11 != 34)
          goto LABEL_25;
        v62[0] = v61;
        v62[1] = v5;
        v64 = 0;
        v65 = 0;
        __p = 0;
        v66 = 0;
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_92;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v34 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v34--, 1);
        *((_DWORD *)a2 + 13) = v34;
        if (v34 < 0 != v31
          || (v35 = v33,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v62, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35))
        {
LABEL_92:
          v39 = 0;
          v27 = 6;
          goto LABEL_50;
        }
        if (v65 >= 0)
          p_p = (unsigned int *)&__p;
        else
          p_p = (unsigned int *)__p;
        if (v65 >= 0)
          v37 = HIBYTE(v65);
        else
          v37 = v64;
        v38 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v37, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
        v39 = v38;
        if (v38)
          v27 = 0;
        else
          v27 = 6;
LABEL_50:
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        if (!v39)
          goto LABEL_31;
        break;
      default:
        goto LABEL_25;
    }
LABEL_30:
    v27 = 0;
LABEL_31:
    if (v27)
      return 0;
  }
  LODWORD(v10) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
  v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_25:
  if ((_DWORD)v11)
    v26 = (v11 & 7) == 4;
  else
    v26 = 1;
  if (!v26)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3))return 0;
    goto LABEL_30;
  }
  return 1;
}

void sub_1D3B26A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  MEMORY[0x1D8251A40](v19, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 72);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_1D3B26D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1D8251A40](v14, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Argument *v6;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Argument **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::MILSpec::Argument::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((uint64_t *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_1D3B26F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E95676A0;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  return CoreML::Specification::MILSpec::Argument::Swap((uint64_t)v3, Aligned);
}

void sub_1D3B270F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::Swap(uint64_t this, CoreML::Specification::MILSpec::Argument *a2)
{
  uint64_t v2;

  if (a2 != (CoreML::Specification::MILSpec::Argument *)this)
  {
    v2 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Operation::MergeFrom(CoreML::Specification::MILSpec::Operation *this, const CoreML::Specification::MILSpec::Operation *a2)
{
  const CoreML::Specification::MILSpec::Operation *v2;
  uint64_t v4;
  unsigned __int8 *i;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Argument *v7;
  google::protobuf::Arena **v8;
  google::protobuf::Arena **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  CoreML::Specification::MILSpec::NamedValueType **v14;
  unsigned int *v15;
  signed int v16;
  signed int *v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const CoreML::Specification::MILSpec::Block **v25;
  CoreML::Specification::MILSpec::Block **v26;
  const CoreML::Specification::MILSpec::Block *v27;
  const CoreML::Specification::MILSpec::Block *v28;
  CoreML::Specification::MILSpec::Block *v29;
  google::protobuf::Arena *v30;
  int v31;
  uint64_t v32;
  CoreML::Specification::MILSpec::Block **v33;
  const CoreML::Specification::MILSpec::Block **v34;
  const CoreML::Specification::MILSpec::Block *v35;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena **v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  std::string *v43;
  std::string **v44;
  std::string *v45;
  const CoreML::Specification::MILSpec::Operation *v46;
  uint64_t v47;
  unsigned __int8 *v48[3];

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::Map<std::string,std::string>::begin(v48, *((_QWORD **)v2 + 5));
  for (i = v48[0]; v48[0]; i = v48[0])
  {
    v6 = *((_QWORD *)i + 3);
    v7 = (const CoreML::Specification::MILSpec::Argument *)(v6 + 24);
    v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::MILSpec::Argument *)v8)
    {
      v9 = v8;
      v10 = *((unsigned int *)v8 + 6);
      if ((int)v10 >= 1)
      {
        v11 = (uint64_t *)((char *)v8[4] + 8);
        do
        {
          v12 = *v11++;
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v12);
          --v10;
        }
        while (v10);
        *((_DWORD *)v9 + 6) = 0;
      }
      CoreML::Specification::MILSpec::Argument::MergeFrom((CoreML::Specification::MILSpec::Argument *)v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v48);
  }
  v13 = *((_DWORD *)v2 + 14);
  if (v13)
  {
    v14 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)v2 + 8) + 8);
    v15 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Operation *)((char *)this + 48), *((_DWORD *)v2 + 14));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 6, (CoreML::Specification::MILSpec::NamedValueType **)v15, v14, v13, **((_DWORD **)this + 8) - *((_DWORD *)this + 14));
    v16 = *((_DWORD *)this + 14) + v13;
    *((_DWORD *)this + 14) = v16;
    v17 = (signed int *)*((_QWORD *)this + 8);
    if (*v17 < v16)
      *v17 = v16;
  }
  v18 = *((_DWORD *)v2 + 20);
  if (v18)
  {
    v46 = v2;
    v47 = *((_QWORD *)v2 + 11);
    v19 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Operation *)((char *)this + 72), v18);
    v20 = v19;
    v21 = **((int **)this + 11);
    v22 = *((int *)this + 20);
    v23 = v21 - v22;
    if ((int)v21 - (int)v22 >= v18)
      v24 = v18;
    else
      v24 = v23;
    if ((int)v24 >= 1)
    {
      v25 = (const CoreML::Specification::MILSpec::Block **)(v47 + 8);
      v26 = (CoreML::Specification::MILSpec::Block **)v19;
      do
      {
        v28 = *v25++;
        v27 = v28;
        v29 = *v26++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v27, v29);
        --v24;
      }
      while (v24);
    }
    if (v23 < v18)
    {
      v30 = (google::protobuf::Arena *)*((_QWORD *)this + 9);
      v31 = v22 + v18 - v21;
      v32 = 8 * v21 - 8 * v22;
      v33 = (CoreML::Specification::MILSpec::Block **)((char *)v20 + v32);
      v34 = (const CoreML::Specification::MILSpec::Block **)(v32 + v47 + 8);
      do
      {
        v35 = *v34;
        if (v30)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v37 = google::protobuf::Arena::AllocateAligned(v30, 0, 24);
          *v37 = Aligned;
          v37[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v38 = (unint64_t *)((char *)v30 + 32);
          do
            v39 = __ldxr(v38);
          while (__stxr((unint64_t)v37, v38));
          v37[2] = (google::protobuf::Arena *)v39;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v35, Aligned);
        *v33++ = Aligned;
        ++v34;
        --v31;
      }
      while (v31);
    }
    v40 = *((_DWORD *)this + 20) + v18;
    *((_DWORD *)this + 20) = v40;
    v41 = (int *)*((_QWORD *)this + 11);
    v2 = v46;
    if (*v41 < v40)
      *v41 = v40;
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 96, (uint64_t)v2 + 96);
  v42 = *((_QWORD *)v2 + 16);
  if (*(char *)(v42 + 23) < 0)
  {
    if (!*(_QWORD *)(v42 + 8))
      return;
  }
  else if (!*(_BYTE *)(v42 + 23))
  {
    return;
  }
  v45 = (std::string *)*((_QWORD *)this + 16);
  v44 = (std::string **)((char *)this + 128);
  v43 = v45;
  if (v45 != (std::string *)v42)
  {
    if (v43 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v44, v42);
    else
      std::string::operator=(v43, (const std::string *)v42);
  }
}

void sub_1D3B274C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::MILSpec::NamedValueType **a2, CoreML::Specification::MILSpec::NamedValueType **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  CoreML::Specification::MILSpec::NamedValueType **v11;
  CoreML::Specification::MILSpec::NamedValueType **v12;
  CoreML::Specification::MILSpec::NamedValueType *v13;
  CoreML::Specification::MILSpec::NamedValueType *v14;
  CoreML::Specification::MILSpec::NamedValueType *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::MILSpec::NamedValueType **v19;
  CoreML::Specification::MILSpec::NamedValueType **v20;
  CoreML::Specification::MILSpec::NamedValueType *v21;
  CoreML::Specification::MILSpec::NamedValueType *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
        CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_1D3B27608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(const CoreML::Specification::MILSpec::Block *a1, CoreML::Specification::MILSpec::Block *a2)
{
  return CoreML::Specification::MILSpec::Block::MergeFrom(a2, a1);
}

void *CoreML::Specification::MILSpec::Block::MergeFrom(CoreML::Specification::MILSpec::Block *this, const CoreML::Specification::MILSpec::Block *a2)
{
  const CoreML::Specification::MILSpec::Block *v2;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::NamedValueType **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const std::string **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  CoreML::Specification::MILSpec::Operation **v22;
  CoreML::Specification::MILSpec::Operation **v23;
  CoreML::Specification::MILSpec::Operation *v24;
  CoreML::Specification::MILSpec::Operation *v25;
  CoreML::Specification::MILSpec::Operation *v26;
  google::protobuf::Arena *v27;
  int v28;
  uint64_t v29;
  CoreML::Specification::MILSpec::Operation **v30;
  CoreML::Specification::MILSpec::Operation **v31;
  CoreML::Specification::MILSpec::Operation *v32;
  CoreML::Specification::MILSpec::Operation *Aligned;
  google::protobuf::Arena **v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int *v38;
  const CoreML::Specification::MILSpec::Block *v40;
  uint64_t v41;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)v2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)v2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 16), *((_DWORD *)v2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::MILSpec::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)v2 + 12);
  if (v10)
  {
    v11 = (const std::string **)(*((_QWORD *)v2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 40), *((_DWORD *)v2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)v2 + 18);
  if (v15)
  {
    v40 = v2;
    v41 = *((_QWORD *)v2 + 10);
    v16 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 64), v15);
    v17 = v16;
    v18 = **((int **)this + 10);
    v19 = *((int *)this + 18);
    v20 = v18 - v19;
    if ((int)v18 - (int)v19 >= v15)
      v21 = v15;
    else
      v21 = v20;
    if ((int)v21 >= 1)
    {
      v22 = (CoreML::Specification::MILSpec::Operation **)(v41 + 8);
      v23 = (CoreML::Specification::MILSpec::Operation **)v16;
      do
      {
        v25 = *v22++;
        v24 = v25;
        v26 = *v23++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(v24, v26);
        --v21;
      }
      while (v21);
    }
    if (v20 < v15)
    {
      v27 = (google::protobuf::Arena *)*((_QWORD *)this + 8);
      v28 = v19 + v15 - v18;
      v29 = 8 * v18 - 8 * v19;
      v30 = (CoreML::Specification::MILSpec::Operation **)((char *)v17 + v29);
      v31 = (CoreML::Specification::MILSpec::Operation **)(v29 + v41 + 8);
      do
      {
        v32 = *v31;
        if (v27)
        {
          CoreML::Specification::MILSpec::Operation::Operation(Aligned);
          v34 = google::protobuf::Arena::AllocateAligned(v27, 0, 24);
          *v34 = Aligned;
          v34[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>;
          v35 = (unint64_t *)((char *)v27 + 32);
          do
            v36 = __ldxr(v35);
          while (__stxr((unint64_t)v34, v35));
          v34[2] = (google::protobuf::Arena *)v36;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Operation *)operator new();
          CoreML::Specification::MILSpec::Operation::Operation(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(v32, Aligned);
        *v30++ = Aligned;
        ++v31;
        --v28;
      }
      while (v28);
    }
    v37 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v37;
    v38 = (int *)*((_QWORD *)this + 10);
    v2 = v40;
    if (*v38 < v37)
      *v38 = v37;
  }
  return google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 88, (uint64_t)v2 + 88);
}

void sub_1D3B278B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(CoreML::Specification::MILSpec::Operation *a1, CoreML::Specification::MILSpec::Operation *this)
{
  CoreML::Specification::MILSpec::Operation::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(CoreML::Specification::MILSpec::NamedValueType *a1, CoreML::Specification::MILSpec::NamedValueType *this)
{
  CoreML::Specification::MILSpec::NamedValueType::MergeFrom(this, a1);
}

void CoreML::Specification::MILSpec::Block::Clear(CoreML::Specification::MILSpec::Block *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Operation **v6;
  CoreML::Specification::MILSpec::Operation *v7;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  v5 = *((unsigned int *)this + 18);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::MILSpec::Operation **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::MILSpec::Operation::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 18) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((_QWORD *)this + 12);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Operation>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::Argument::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument");
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this)
{
  return CoreML::Specification::MILSpec::Argument::New(this, 0);
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Argument *v3;

  v3 = (CoreML::Specification::MILSpec::Argument *)operator new();
  CoreML::Specification::MILSpec::Argument::Argument(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument>(a2, v3);
  return v3;
}

void sub_1D3B27B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument::IsInitialized(CoreML::Specification::MILSpec::Argument *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Argument::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument::GetCachedSize(CoreML::Specification::MILSpec::Argument *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E95650C8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Argument_Binding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument.Binding");
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return CoreML::Specification::MILSpec::Argument_Binding::New(this, 0);
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Argument_Binding *v3;

  v3 = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
  CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument_Binding>(a2, v3);
  return v3;
}

void sub_1D3B27D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::IsInitialized(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    v7 = *(unsigned int **)(this + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name");
    if (*(_DWORD *)(v5 + 28) == 1)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::GetCachedSize(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument_Binding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Block::~Block(CoreML::Specification::MILSpec::Block *this)
{
  CoreML::Specification::MILSpec::Block::~Block(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9565880;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 12);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Block::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Block");
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this)
{
  return CoreML::Specification::MILSpec::Block::New(this, 0);
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Block *v3;

  v3 = (CoreML::Specification::MILSpec::Block *)operator new();
  CoreML::Specification::MILSpec::Block::Block(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Block>(a2, v3);
  return v3;
}

void sub_1D3B27F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::IsInitialized(CoreML::Specification::MILSpec::Block *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Block::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  int j;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  google::protobuf::io::CodedOutputStream *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::io::CodedOutputStream *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned __int8 *v35[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned int **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        v11 = *(unsigned int **)v11;
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  v13 = *(_DWORD *)(v5 + 72);
  if (v13)
  {
    for (j = 0; j != v13; ++j)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * j + 8), a2, a4);
  }
  v15 = *(unint64_t **)(v5 + 112);
  v16 = *v15;
  if (*v15)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v16 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_36:
        v24 = operator new[]();
        google::protobuf::Map<std::string,std::string>::begin(v35, *(_QWORD **)(v5 + 112));
        v25 = v35[0];
        if (v35[0])
        {
          v26 = 0;
          do
          {
            *(_QWORD *)(v24 + 8 * v26) = *((_QWORD *)v25 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v35);
            ++v26;
            v25 = v35[0];
          }
          while (v35[0]);
        }
        else
        {
          v26 = 0;
        }
        v27 = 126 - 2 * __clz(v26);
        if (v26)
          v28 = v27;
        else
          v28 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v24, (char *)(v24 + 8 * v26), v28, 1);
        if (v26)
        {
          v29 = 0;
          v30 = 0;
          do
          {
            v32 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v24 + 8 * v29), *(_QWORD *)(v24 + 8 * v29) + 24, *(google::protobuf::Arena **)(v5 + 88));
            if (v30 != v32)
            {
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              v30 = v32;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v30, a2, v31);
            v33 = *(unsigned int **)(v24 + 8 * v29);
            if (*((char *)v33 + 23) < 0)
            {
              v33 = *(unsigned int **)v33;
              v34 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v29) + 8);
            }
            else
            {
              LODWORD(v34) = *((unsigned __int8 *)v33 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
            ++v29;
          }
          while (v26 != v29);
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        return MEMORY[0x1D8251A28](v24, 0x60C8044C4A2DFLL);
      }
    }
    else if (v16 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_36;
    }
    this = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v35, v15);
    v18 = 0;
    while (v35[0])
    {
      v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v35[0] + 3), *((_QWORD *)v35[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 88));
      if (v18 != v20)
      {
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v18 = v20;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v18, a2, v19);
      v21 = (unsigned int *)*((_QWORD *)v35[0] + 3);
      if (*((char *)v21 + 23) < 0)
      {
        v21 = *(unsigned int **)v21;
        v22 = *(_QWORD *)(*((_QWORD *)v35[0] + 3) + 8);
      }
      else
      {
        LODWORD(v22) = *((unsigned __int8 *)v21 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v21, v22, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v35);
    }
    if (v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return this;
}

void sub_1D3B2826C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::GetCachedSize(CoreML::Specification::MILSpec::Block *this)
{
  return *((unsigned int *)this + 30);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_1D3B2842C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      CoreML::Specification::MILSpec::Block::~Block((CoreML::Specification::MILSpec::Block *)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x10B2C4008C62E43);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  google::protobuf::Arena **v9;
  __int128 v11;
  unsigned int v12[258];
  std::random_device v13;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v13);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v12[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v12);
  v11 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v12, &v11);
  std::random_device::~random_device(&v13);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(a2, 8, v8);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v9;
  a1[1] = 8;
  return a1;
}

void sub_1D3B2881C(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B287D8);
}

void CoreML::Specification::MILSpec::Function::~Function(CoreML::Specification::MILSpec::Function *this)
{
  CoreML::Specification::MILSpec::Function::~Function(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9565AE0;
  v2 = *((_QWORD *)this + 13);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 10);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((_QWORD *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Function::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Function");
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this)
{
  return CoreML::Specification::MILSpec::Function::New(this, 0);
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Function *v3;

  v3 = (CoreML::Specification::MILSpec::Function *)operator new();
  CoreML::Specification::MILSpec::Function::Function(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Function>(a2, v3);
  return v3;
}

void sub_1D3B288D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Function::Clear(CoreML::Specification::MILSpec::Function *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((_QWORD *)this + 6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 13);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Function::IsInitialized(CoreML::Specification::MILSpec::Function *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  _QWORD *v5;
  std::string **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::NamedValueType *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  char *v15;
  int v16;
  char *v17;
  int v18;
  std::string *v19;
  unsigned int *v20;
  std::string::size_type size;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char *v28;
  uint64_t v29;
  CoreML::Specification::MILSpec::Block *v30;
  char *v31;
  int v32;
  uint64_t v33;
  std::string *v34;
  int BeyondKeyValuePair;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  unsigned int *v40;
  int v41;
  _BOOL4 v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int *p_p;
  int v52;
  _QWORD *v54;
  google::protobuf::Arena **v55;
  google::protobuf::Arena **v56;
  _QWORD *v57;
  std::string __p;
  google::protobuf::Arena **v59;
  uint64_t v60;

  v54 = (_QWORD *)((char *)this + 80);
  v55 = (google::protobuf::Arena **)((char *)this + 72);
  v4 = (google::protobuf::Arena **)((char *)this + 40);
  v5 = (_QWORD *)((char *)this + 48);
  v6 = (std::string **)((char *)this + 104);
  v7 = (char *)this + 16;
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v9 = *v8;
      if (*v8 >= 1)
      {
        *(_QWORD *)a2 = v8 + 1;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) != 0)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
    v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v10 & 0x100000000) != 0)
    {
LABEL_8:
      switch(v10 >> 3)
      {
        case 1u:
          if (v10 != 10)
            break;
          v12 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)v7);
          v13 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *(_QWORD *)a2 = v13 + 1;
          }
          v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v45 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v45--, 1);
          *((_DWORD *)a2 + 13) = v45;
          if (v45 < 0 == v26)
          {
            v46 = v43;
            if (CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v12, a2, v44))
            {
              if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46))
                goto LABEL_32;
            }
          }
          return 0;
        case 2u:
          if (v10 != 18)
            break;
          v19 = *v6;
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v19 = *v6;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v19))
            return 0;
          v20 = (unsigned int *)*v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v20 = *(unsigned int **)v20;
            size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.opset"))return 0;
          goto LABEL_32;
        case 3u:
          if (v10 != 26)
            break;
          v56 = v4;
          v57 = v5;
          memset(&__p, 0, sizeof(__p));
          v60 = 0;
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v16 < 0)
              goto LABEL_104;
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
          v25 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v25--, 1);
          *((_DWORD *)a2 + 13) = v25;
          if (v25 < 0 != v26)
            goto LABEL_104;
          v27 = v24;
          v28 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v28 == 10)
          {
            *(_QWORD *)a2 = v28 + 1;
            if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, &__p))
              goto LABEL_104;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
            {
              v29 = *(_QWORD *)v57[2];
              v59 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)v57, (uint64_t)&__p);
              if (v29 != *(_QWORD *)v57[2])
              {
                google::protobuf::io::CodedInputStream::Skip(a2, 1u);
                v30 = (CoreML::Specification::MILSpec::Block *)v59;
                v31 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
                {
                  v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v32 < 0)
                    goto LABEL_103;
                }
                else
                {
                  v32 = *v31;
                  *(_QWORD *)a2 = v31 + 1;
                }
                v47 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
                v49 = *((_DWORD *)a2 + 13);
                v26 = __OFSUB__(v49--, 1);
                *((_DWORD *)a2 + 13) = v49;
                if (v49 < 0 != v26
                  || (v50 = v47,
                      !CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(v30, a2, v48))
                  || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v50))
                {
LABEL_103:
                  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(v57, (unsigned __int8 *)&__p);
                  goto LABEL_104;
                }
                if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  *((_BYTE *)a2 + 36) = 1;
                  goto LABEL_86;
                }
                BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair((uint64_t)&v56, (uint64_t)a2);
                goto LABEL_85;
              }
            }
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            memset(&__p, 0, sizeof(__p));
          }
          v33 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v56);
          if (v60 != v33)
          {
            if (v60)
              (*(void (**)(void))(*(_QWORD *)v60 + 8))();
            v60 = v33;
          }
          v34 = *(std::string **)(v33 + 16);
          *(_DWORD *)(v33 + 40) |= 1u;
          if (v34 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v33 + 16), *(google::protobuf::Arena ***)(v33 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *(std::string **)(v33 + 16);
          }
          std::string::operator=(v34, &__p);
          BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v60 + 88))(v60, a2);
          if (BeyondKeyValuePair)
            google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry((uint64_t)&v56);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60))
          {
            v60 = 0;
            if ((BeyondKeyValuePair & 1) == 0)
            {
              v36 = 0;
              v23 = 6;
              goto LABEL_99;
            }
            goto LABEL_86;
          }
LABEL_85:
          if (!BeyondKeyValuePair)
            goto LABEL_104;
LABEL_86:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
            goto LABEL_104;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (unsigned int *)&__p;
          else
            p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v52 = __p.__r_.__value_.__r.__words[1];
          v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v52, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
LABEL_94:
          v36 = v42;
          if (v42)
            v23 = 0;
          else
            v23 = 6;
LABEL_97:
          if (v60)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
LABEL_99:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v36)
            goto LABEL_33;
          goto LABEL_32;
        case 4u:
          if (v10 != 34)
            break;
          v56 = v55;
          v57 = v54;
          memset(&__p, 0, sizeof(__p));
          v60 = 0;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
          {
            v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v18 < 0)
              goto LABEL_104;
          }
          else
          {
            v18 = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
          v38 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v38--, 1);
          *((_DWORD *)a2 + 13) = v38;
          if (v38 < 0 != v26
            || (v39 = v37,
                !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v56, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v39))
          {
LABEL_104:
            v36 = 0;
            v23 = 6;
            goto LABEL_97;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = (unsigned int *)&__p;
          else
            v40 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v41 = __p.__r_.__value_.__r.__words[1];
          v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v40, v41, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
          goto LABEL_94;
        default:
          break;
      }
    }
LABEL_27:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))return 0;
LABEL_32:
    v23 = 0;
LABEL_33:
    if (v23)
      return 0;
  }
}

void sub_1D3B28F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Function::ByteSizeLong(CoreML::Specification::MILSpec::Function *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  v7 = *(unsigned int *)v6;
  google::protobuf::Map<std::string,std::string>::begin(v22, v6);
  v8 = 0;
  v9 = v7 + v4;
  while (v22[0])
  {
    v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v22[0] + 3), *((_QWORD *)v22[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v8 != (_DWORD *)v10)
    {
      if (v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v8 = (_DWORD *)v10;
    }
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v8);
    v9 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v22);
  }
  if (v8)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v12 = (_QWORD *)*((_QWORD *)this + 12);
  v13 = *(unsigned int *)v12;
  google::protobuf::Map<std::string,std::string>::begin(v22, v12);
  v14 = 0;
  v15 = v13 + v9;
  while (v22[0])
  {
    v16 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v22[0] + 3), *((_QWORD *)v22[0] + 3) + 24, *((google::protobuf::Arena **)this + 9));
    if (v14 != (_DWORD *)v16)
    {
      if (v14)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      v14 = (_DWORD *)v16;
    }
    v17 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v14);
    v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v22);
  }
  if (v14)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  v18 = *((_QWORD *)this + 13);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_29;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_29:
  *((_DWORD *)this + 28) = v15;
  return v15;
}

void sub_1D3B291DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Function::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::io::CodedOutputStream *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  google::protobuf::io::CodedOutputStream *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  google::protobuf::io::CodedOutputStream *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned __int8 *v50[3];

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  result = *((_QWORD *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      goto LABEL_10;
    result = *(_QWORD *)result;
    goto LABEL_9;
  }
  LODWORD(v9) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_9:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.opset");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 13), a2);
  }
LABEL_10:
  v10 = (unint64_t *)*((_QWORD *)this + 8);
  v11 = *v10;
  if (!*v10)
    goto LABEL_53;
  if (*((_BYTE *)a2 + 26))
  {
    if (v11 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_33:
      v19 = operator new[]();
      google::protobuf::Map<std::string,std::string>::begin(v50, *((_QWORD **)this + 8));
      v20 = v50[0];
      if (v50[0])
      {
        v21 = 0;
        do
        {
          *(_QWORD *)(v19 + 8 * v21) = *((_QWORD *)v20 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v50);
          ++v21;
          v20 = v50[0];
        }
        while (v50[0]);
      }
      else
      {
        v21 = 0;
      }
      v22 = 126 - 2 * __clz(v21);
      if (v21)
        v23 = v22;
      else
        v23 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(v19, (char *)(v19 + 8 * v21), v23, 1);
      if (v21)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v27 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v19 + 8 * v24), *(_QWORD *)(v19 + 8 * v24) + 24, *((google::protobuf::Arena **)this + 5));
          if (v25 != v27)
          {
            if (v25)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v25 = v27;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v25, a2, v26);
          v28 = *(unsigned int **)(v19 + 8 * v24);
          if (*((char *)v28 + 23) < 0)
          {
            v28 = *(unsigned int **)v28;
            v29 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v24) + 8);
          }
          else
          {
            LODWORD(v29) = *((unsigned __int8 *)v28 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
          ++v24;
        }
        while (v21 != v24);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      result = MEMORY[0x1D8251A28](v19, 0x60C8044C4A2DFLL);
      goto LABEL_53;
    }
  }
  else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_33;
  }
  result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v50, v10);
  v13 = 0;
  while (v50[0])
  {
    v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v50[0] + 3), *((_QWORD *)v50[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v13 != v15)
    {
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v13 = v15;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v13, a2, v14);
    v16 = (unsigned int *)*((_QWORD *)v50[0] + 3);
    if (*((char *)v16 + 23) < 0)
    {
      v16 = *(unsigned int **)v16;
      v17 = *(_QWORD *)(*((_QWORD *)v50[0] + 3) + 8);
    }
    else
    {
      LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v50);
  }
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_53:
  v30 = (unint64_t *)*((_QWORD *)this + 12);
  v31 = *v30;
  if (!*v30)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v31 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_76:
      v39 = operator new[]();
      google::protobuf::Map<std::string,std::string>::begin(v50, *((_QWORD **)this + 12));
      v40 = v50[0];
      if (v50[0])
      {
        v41 = 0;
        do
        {
          *(_QWORD *)(v39 + 8 * v41) = *((_QWORD *)v40 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v50);
          ++v41;
          v40 = v50[0];
        }
        while (v50[0]);
      }
      else
      {
        v41 = 0;
      }
      v42 = 126 - 2 * __clz(v41);
      if (v41)
        v43 = v42;
      else
        v43 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v39, (char *)(v39 + 8 * v41), v43, 1);
      if (v41)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v47 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v39 + 8 * v44), *(_QWORD *)(v39 + 8 * v44) + 24, *((google::protobuf::Arena **)this + 9));
          if (v45 != v47)
          {
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            v45 = v47;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v45, a2, v46);
          v48 = *(unsigned int **)(v39 + 8 * v44);
          if (*((char *)v48 + 23) < 0)
          {
            v48 = *(unsigned int **)v48;
            v49 = *(_QWORD *)(*(_QWORD *)(v39 + 8 * v44) + 8);
          }
          else
          {
            LODWORD(v49) = *((unsigned __int8 *)v48 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v48, v49, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
          ++v44;
        }
        while (v41 != v44);
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      return MEMORY[0x1D8251A28](v39, 0x60C8044C4A2DFLL);
    }
  }
  else if (v31 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_76;
  }
  result = (uint64_t)google::protobuf::Map<std::string,std::string>::begin(v50, v30);
  v33 = 0;
  while (v50[0])
  {
    v35 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v50[0] + 3), *((_QWORD *)v50[0] + 3) + 24, *((google::protobuf::Arena **)this + 9));
    if (v33 != v35)
    {
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v33 = v35;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v33, a2, v34);
    v36 = (unsigned int *)*((_QWORD *)v50[0] + 3);
    if (*((char *)v36 + 23) < 0)
    {
      v36 = *(unsigned int **)v36;
      v37 = *(_QWORD *)(*((_QWORD *)v50[0] + 3) + 8);
    }
    else
    {
      LODWORD(v37) = *((unsigned __int8 *)v36 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v36, v37, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v50);
  }
  if (v33)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  return result;
}

void sub_1D3B296EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Function::GetCachedSize(CoreML::Specification::MILSpec::Function *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566830;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E9567550;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567550;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Block *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::MILSpec::Block **)(a1 + 24);
  if (v3)
    CoreML::Specification::MILSpec::Block::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Block *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Block::MergeFrom(*(CoreML::Specification::MILSpec::Block **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_1D3B2A220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*a2;
        if (*a2 >= a2[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = (unsigned __int8 *)(v6 + 1);
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = (char *)*a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = (unsigned __int8 *)(v11 + 1);
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Block **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = (char *)*a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *a2 = (unsigned __int8 *)(v17 + 1);
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)a2 + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)a2 + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(Aligned, (google::protobuf::io::CodedInputStream *)a2, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_1D3B2A4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Block *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Block::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 120) + ((9 * (__clz(*(_DWORD *)(v4 + 120) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E95668D8;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_1D3B2A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 152);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_1D3B2AC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1D8251A40](v14, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Block *v6;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Block **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Block **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Block::Block(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
      CoreML::Specification::MILSpec::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::MILSpec::Block::InternalSwap(Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((uint64_t *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_1D3B2AEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567550;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  unsigned __int8 **result;
  uint64_t v4;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Block **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Block::Block(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
      CoreML::Specification::MILSpec::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::MILSpec::Block *)result)
    return CoreML::Specification::MILSpec::Block::InternalSwap((CoreML::Specification::MILSpec::Block *)result, Aligned);
  return result;
}

void sub_1D3B2B078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Block::InternalSwap(CoreML::Specification::MILSpec::Block *this, CoreML::Specification::MILSpec::Block *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **result;
  int v8;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 12, (uint64_t)a2 + 96);
  v8 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  return result;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap(unsigned __int8 **result, uint64_t a2)
{
  unsigned __int8 **v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD v8[3];
  __int128 v9;

  v3 = result;
  if (*result == *(unsigned __int8 **)a2)
  {
    v4 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v4;
    v5 = result[2];
    result[2] = *(unsigned __int8 **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    v6 = 0;
    v7 = *((_DWORD *)result + 2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)&v6);
    google::protobuf::Map<std::string,std::string>::begin(&v9, v3[2]);
    memset(v8, 0, sizeof(v8));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(&v6, &v9, v8);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(v3, a2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=((unsigned __int8 **)a2, (uint64_t)&v6);
    return (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(&v6);
  }
  return result;
}

void sub_1D3B2B21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear(a1);
    google::protobuf::Map<std::string,std::string>::begin(&v6, *(_QWORD **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Value *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Value *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v12, *(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        v6 = *(_QWORD *)(v10 + 24);
        v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
        {
          v9 = (CoreML::Specification::MILSpec::Value *)v8;
          CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
          CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
        }
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Function::MergeFrom(CoreML::Specification::MILSpec::Function *this, const CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::NamedValueType **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned __int8 *i;
  uint64_t v11;
  const CoreML::Specification::MILSpec::Block *v12;
  google::protobuf::Arena **v13;
  CoreML::Specification::MILSpec::Block *v14;
  uint64_t v15;
  std::string *v16;
  std::string **v17;
  std::string *v18;
  unsigned __int8 *v19[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Function *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::MILSpec::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  google::protobuf::Map<std::string,std::string>::begin(v19, *((_QWORD **)a2 + 8));
  for (i = v19[0]; v19[0]; i = v19[0])
  {
    v11 = *((_QWORD *)i + 3);
    v12 = (const CoreML::Specification::MILSpec::Block *)(v11 + 24);
    v13 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)this + 48, v11);
    if (v12 != (const CoreML::Specification::MILSpec::Block *)v13)
    {
      v14 = (CoreML::Specification::MILSpec::Block *)v13;
      CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v13);
      CoreML::Specification::MILSpec::Block::MergeFrom(v14, v12);
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v19);
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 72, (uint64_t)a2 + 72);
  v15 = *((_QWORD *)a2 + 13);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      return;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    return;
  }
  v18 = (std::string *)*((_QWORD *)this + 13);
  v17 = (std::string **)((char *)this + 104);
  v16 = v18;
  if (v18 != (std::string *)v15)
  {
    if (v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, v15);
    else
      std::string::operator=(v16, (const std::string *)v15);
  }
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      CoreML::Specification::MILSpec::Function::~Function((CoreML::Specification::MILSpec::Function *)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x10B2C40A53FFCBDLL);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  google::protobuf::Arena **v9;
  __int128 v11;
  unsigned int v12[258];
  std::random_device v13;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v13);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v12[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v12);
  v11 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v12, &v11);
  std::random_device::~random_device(&v13);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(a2, 8, v8);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v9;
  a1[1] = 8;
  return a1;
}

void sub_1D3B2B9FC(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B2B9B8);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_1D3B2BAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9566A28;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E9567748;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567748;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Function *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::MILSpec::Function **)(a1 + 24);
  if (v3)
    CoreML::Specification::MILSpec::Function::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Function *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Function::Function(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
          CoreML::Specification::MILSpec::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Function::MergeFrom(*(CoreML::Specification::MILSpec::Function **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_1D3B2BE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*a2;
        if (*a2 >= a2[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = (unsigned __int8 *)(v6 + 1);
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = (char *)*a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = (unsigned __int8 *)(v11 + 1);
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Function **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Function::Function(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
          CoreML::Specification::MILSpec::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = (char *)*a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *a2 = (unsigned __int8 *)(v17 + 1);
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)a2 + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)a2 + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(Aligned, (google::protobuf::io::CodedInputStream *)a2, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_1D3B2C0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Function *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Function::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 112) + ((9 * (__clz(*(_DWORD *)(v4 + 112) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_1D3B2C40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9566CC8;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::~Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(_QWORD *)this = &off_1E9565160;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E9565160;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::MILSpec::Value_BlobFileValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.BlobFileValue");
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return CoreML::Specification::MILSpec::Value_BlobFileValue::New(this, 0);
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value_BlobFileValue *v3;

  v3 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
  CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_BlobFileValue>(a2, v3);
  return v3;
}

void sub_1D3B2C5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::IsInitialized(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    return google::protobuf::internal::WireFormatLite::WriteUInt64(2, v8, a2, a4);
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::GetCachedSize(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_BlobFileValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 144);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_1D3B2CCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1D8251A40](v14, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Function *v6;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Function **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Function **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Function::Function(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
      CoreML::Specification::MILSpec::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::MILSpec::Function::InternalSwap(Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((uint64_t *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_1D3B2CF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567748;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  unsigned __int8 **result;
  uint64_t v4;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Function **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Function::Function(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
      CoreML::Specification::MILSpec::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::MILSpec::Function *)result)
    return CoreML::Specification::MILSpec::Function::InternalSwap((CoreML::Specification::MILSpec::Function *)result, Aligned);
  return result;
}

void sub_1D3B2D0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Function::InternalSwap(CoreML::Specification::MILSpec::Function *this, CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 **result;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  _QWORD v17[3];
  __int128 v18;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v6 = (unsigned __int8 **)((char *)this + 48);
  v5 = *((_QWORD *)this + 6);
  v7 = *((_DWORD *)this + 6);
  v9 = (unsigned __int8 **)((char *)a2 + 48);
  v8 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v10 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v10;
  if (v5 == v8)
  {
    v11 = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v11;
    v12 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v12;
  }
  else
  {
    v15 = 0;
    v16 = *((_DWORD *)this + 14);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)&v15);
    google::protobuf::Map<std::string,std::string>::begin(&v18, *((_QWORD **)this + 8));
    memset(v17, 0, sizeof(v17));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(&v15, &v18, v17);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v6, (uint64_t)v9);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v9, (uint64_t)&v15);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(&v15);
  }
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 10, (uint64_t)a2 + 80);
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  return result;
}

void sub_1D3B2D1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear(a1);
    google::protobuf::Map<std::string,std::string>::begin(&v6, *(_QWORD **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Block *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Block *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v12, *(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        v6 = *(_QWORD *)(v10 + 24);
        v7 = (const CoreML::Specification::MILSpec::Block *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Block *)v8)
        {
          v9 = (CoreML::Specification::MILSpec::Block *)v8;
          CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v8);
          CoreML::Specification::MILSpec::Block::MergeFrom(v9, v7);
        }
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Program::MergeFrom(CoreML::Specification::MILSpec::Program *this, const CoreML::Specification::MILSpec::Program *a2)
{
  uint64_t v4;
  unsigned __int8 *i;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Function *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Function *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 *v13[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::Map<std::string,std::string>::begin(v13, *((_QWORD **)a2 + 5));
  for (i = v13[0]; v13[0]; i = v13[0])
  {
    v6 = *((_QWORD *)i + 3);
    v7 = (const CoreML::Specification::MILSpec::Function *)(v6 + 24);
    v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::MILSpec::Function *)v8)
    {
      v9 = (CoreML::Specification::MILSpec::Function *)v8;
      CoreML::Specification::MILSpec::Function::Clear((CoreML::Specification::MILSpec::Function *)v8);
      CoreML::Specification::MILSpec::Function::MergeFrom(v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v13);
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 48, (uint64_t)a2 + 48);
  v10 = *((_QWORD *)a2 + 10);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_15;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 10);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v10);
    else
      std::string::operator=(*((std::string **)this + 10), (const std::string *)v10);
  }
LABEL_15:
  v12 = *((_QWORD *)a2 + 11);
  if (v12)
    *((_QWORD *)this + 11) = v12;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Program>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a1, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_1E955AA88;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E955AA88;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(this, 0);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(a2, v3);
  return v3;
}

void sub_1D3B2D658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_1E955AA88;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B2D77C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_ = (uint64_t)&off_1E955AA88;
  qword_1EDB8F358 = 0;
  dword_1EDB8F360 = 0;
  byte_1EDB8F368 = 1;
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_ = (uint64_t)&off_1E955A958;
  *(_QWORD *)algn_1EDB8F2F0 = 0;
  qword_1EDB8F300 = 0;
  byte_1EDB8F308 = 1;
  return result;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(this);
  JUMPOUT(0x1D8251A40);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E955A958;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(a2, v3);
  return v3;
}

void sub_1D3B2D928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      LODWORD(v8) = 0;
LABEL_21:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_22;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_22;
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v16 = *((_DWORD *)a2 + 13);
      v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + 13) = v16;
      if (v16 < 0 == v17)
      {
        v18 = (int)v14;
        result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(v14, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_21;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_22:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B2DB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 7) == 20)
  {
    *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
    v1 = 3;
  }
  else
  {
    v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return *((unsigned int *)this + 6);
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *a2)
{
  std::string *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) == 20)
    {
      v5 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
    }
    else
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      v5 = (uint64_t *)operator new();
      this = (std::string *)CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)v5);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        this = (std::string *)CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)this);
        v6 = &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_;
LABEL_9:
        v7 = v6[1];
        if ((v7 & 1) != 0)
          return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v7 & 0xFFFFFFFFFFFFFFFELL);
        return this;
      }
    }
    v6 = (uint64_t *)*((_QWORD *)a2 + 2);
    goto LABEL_9;
  }
  return this;
}

void sub_1D3B2DC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(_QWORD *)this = &off_1E955A958;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B2DCE8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E9561E50;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::GLMClassifier_DoubleArray::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier.DoubleArray");
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return CoreML::Specification::GLMClassifier_DoubleArray::New(this, 0);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::GLMClassifier_DoubleArray *v3;

  v3 = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
  CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(a2, v3);
  return v3;
}

void sub_1D3B2DE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::IsInitialized(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return 1;
}

BOOL CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier_DoubleArray *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::ByteSizeLong(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::GetCachedSize(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9561E50;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMClassifier_DoubleArray *)&CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B2E348(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMClassifier_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_GLMClassifier_default_instance_ = (uint64_t)&off_1E955B370;
  result = 0.0;
  unk_1EDB8FC90 = 0u;
  unk_1EDB8FCA0 = 0u;
  unk_1EDB8FCB0 = 0u;
  unk_1EDB8FCC4 = 0;
  qword_1EDB8FCD8 = 0;
  byte_1EDB8FCE0 = 1;
  return result;
}

void CoreML::Specification::GLMClassifier::~GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  CoreML::Specification::GLMClassifier::~GLMClassifier(this);
  JUMPOUT(0x1D8251A40);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E955B370;
  if (*((_DWORD *)this + 21))
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::GLMClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier");
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this)
{
  return CoreML::Specification::GLMClassifier::New(this, 0);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::GLMClassifier *v3;

  v3 = (CoreML::Specification::GLMClassifier *)operator new();
  CoreML::Specification::GLMClassifier::GLMClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(a2, v3);
  return v3;
}

void sub_1D3B2E504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 60) = 0;
  return CoreML::Specification::GLMClassifier::clear_ClassLabels(this);
}

uint64_t CoreML::Specification::GLMClassifier::IsInitialized(CoreML::Specification::GLMClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int v16;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;
  CoreML::Specification::Int64Vector *v18;
  char *v19;
  unsigned int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  CoreML::Specification::StringVector *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t result;
  int v36;
  unsigned int v37;
  int v38;
  google::protobuf::Arena *v39;
  google::protobuf::Arena **v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int VarintSizeAsIntFallback;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  signed int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  signed int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int TagFallback;
  BOOL v67;
  uint64_t Varint32Fallback;
  uint64_t v69;
  unint64_t v70;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (CoreML::Specification::GLMClassifier *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v7 = *(unsigned __int8 **)a2;
    v8 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v8)
    {
      LODWORD(v10) = 0;
      goto LABEL_108;
    }
    v9 = v7 + 1;
    v10 = *v7;
    if ((char)*v7 >= 1)
    {
      *(_QWORD *)a2 = v9;
      v11 = v10 | 0x100000000;
      if ((v11 & 0x100000000) != 0)
        goto LABEL_9;
      goto LABEL_109;
    }
    if ((unint64_t)v9 < v8)
    {
      v12 = *v9;
      if ((v10 & ~v12) >= 0x80)
        break;
    }
LABEL_108:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_109:
    if ((_DWORD)v11)
      v67 = (v11 & 7) == 4;
    else
      v67 = 1;
    if (v67)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
  *(_QWORD *)a2 = v7 + 2;
  v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
  v13 = v11 >> 3;
  switch(v11 >> 3)
  {
    case 1u:
      if (v11 != 10)
        goto LABEL_109;
      v14 = (int *)*((_QWORD *)this + 4);
      if (!v14)
      {
        v15 = *((_DWORD *)this + 6);
        v16 = *((_DWORD *)this + 7);
LABEL_55:
        if (v15 <= v16)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v6, v16 - v15 + 1);
          v14 = (int *)*((_QWORD *)this + 4);
        }
        v16 = *v14;
        goto LABEL_58;
      }
      v15 = *((_DWORD *)this + 6);
      v16 = *v14;
      if (v15 < *v14)
      {
        *((_DWORD *)this + 6) = v15 + 1;
        Aligned = *(CoreML::Specification::GLMClassifier_DoubleArray **)&v14[2 * v15 + 2];
        goto LABEL_64;
      }
      if (v16 == *((_DWORD *)this + 7))
        goto LABEL_55;
LABEL_58:
      *v14 = v16 + 1;
      v39 = *(google::protobuf::Arena **)v6;
      if (*(_QWORD *)v6)
      {
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
        v40 = google::protobuf::Arena::AllocateAligned(v39, 0, 24);
        *v40 = Aligned;
        v40[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>;
        v41 = (unint64_t *)((char *)v39 + 32);
        do
          v42 = __ldxr(v41);
        while (__stxr((unint64_t)v40, v41));
        v40[2] = (google::protobuf::Arena *)v42;
      }
      else
      {
        Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
      }
      v43 = *((_QWORD *)this + 4);
      v44 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v44 + 1;
      *(_QWORD *)(v43 + 8 * v44 + 8) = Aligned;
LABEL_64:
      v45 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v45;
        *(_QWORD *)a2 = v45 + 1;
      }
      v47 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v49 = *((_DWORD *)a2 + 13);
      v33 = __OFSUB__(v49--, 1);
      *((_DWORD *)a2 + 13) = v49;
      if (v49 < 0 != v33)
        return 0;
      v34 = v47;
      result = CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(Aligned, (char **)a2, v48);
      if ((_DWORD)result)
        goto LABEL_70;
      return result;
    case 2u:
      if (v11 == 17)
      {
        if (google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(18, (unint64_t **)a2, (uint64_t)v5))
        {
          goto LABEL_2;
        }
        return 0;
      }
      if (v11 != 18)
        goto LABEL_109;
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if ((v20 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      if ((v20 & 7) != 0)
        return 0;
      v50 = *((_DWORD *)a2 + 12);
      if (v50 == 0x7FFFFFFF)
        v51 = -1;
      else
        v51 = v50 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v52 = *((_DWORD *)a2 + 10);
      if (v52 == 0x7FFFFFFF)
        v53 = -1;
      else
        v53 = v52 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v54 = *v5;
      v55 = v20 >> 3;
      if (v53 >= v51)
        v56 = v51;
      else
        v56 = v53;
      if (v51 == -1)
        v57 = v53;
      else
        v57 = v56;
      if (v57 < (uint64_t)v20)
      {
        if (v20 < 8)
          goto LABEL_2;
        if (v55 <= 1)
          v58 = 1;
        else
          v58 = v20 >> 3;
        while (1)
        {
          v70 = 0;
          v59 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v70);
            if (!(_DWORD)result)
              return result;
            v60 = v70;
            v54 = *v5;
          }
          else
          {
            v60 = *v59;
            *(_QWORD *)a2 = v59 + 1;
          }
          if (v54 == *((_DWORD *)this + 11))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v54 + 1);
            v54 = *v5;
          }
          v61 = *((_QWORD *)this + 6) + 8 * v54;
          *((_DWORD *)this + 10) = v54 + 1;
          *(_QWORD *)(v61 + 8) = v60;
          ++v54;
          if (!--v58)
            goto LABEL_2;
        }
      }
      v62 = v54 + v55;
      if (v20 > 7)
      {
        google::protobuf::RepeatedField<double>::Reserve(v5, v54 + v55);
        v63 = *((_QWORD *)this + 6);
        v64 = 8 * v62 - 8 * *((int *)this + 10);
        if (v64 >= 1)
          bzero((void *)(v63 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
      }
      else
      {
        v63 = *((_QWORD *)this + 6);
      }
      *v5 = v62;
      v65 = v63 + 8;
      if (!v63)
        v65 = 0;
      if (google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v65 + 8 * v54), v20))
        goto LABEL_2;
      if ((int)*v5 < 1)
        return 0;
      result = 0;
      *v5 = v54;
      return result;
    case 3u:
      if (v11 != 24)
        goto LABEL_109;
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v22 = 0;
      }
      else
      {
        v22 = *v21;
        if ((*v21 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v21 + 1;
LABEL_117:
          *((_DWORD *)this + 15) = v22;
          goto LABEL_2;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v22);
      v22 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_117;
    case 4u:
      if (v11 != 32)
        goto LABEL_109;
      v23 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v24 = 0;
      }
      else
      {
        v24 = *v23;
        if ((*v23 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v23 + 1;
          goto LABEL_120;
        }
      }
      v69 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
      v24 = v69;
      if (v69 < 0)
        return 0;
LABEL_120:
      *((_DWORD *)this + 16) = v24;
      goto LABEL_2;
    default:
      if (v13 == 100)
      {
        if (v11 != 34)
          goto LABEL_109;
        if (*((_DWORD *)this + 21) == 100)
        {
          v25 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 9);
        }
        else
        {
          CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 21) = 100;
          v25 = (CoreML::Specification::StringVector *)operator new();
          CoreML::Specification::StringVector::StringVector(v25);
          *((_QWORD *)this + 9) = v25;
        }
        v28 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
        {
          v29 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v29 < 0)
            return 0;
        }
        else
        {
          v29 = *v28;
          *(_QWORD *)a2 = v28 + 1;
        }
        v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
        v38 = *((_DWORD *)a2 + 13);
        v33 = __OFSUB__(v38--, 1);
        *((_DWORD *)a2 + 13) = v38;
        if (v38 < 0 != v33)
          return 0;
        v34 = v36;
        result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v25, (char **)a2, v37);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v13 != 101 || v11 != 42)
          goto LABEL_109;
        if (*((_DWORD *)this + 21) == 101)
        {
          v18 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 9);
        }
        else
        {
          CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 21) = 101;
          v18 = (CoreML::Specification::Int64Vector *)operator new();
          CoreML::Specification::Int64Vector::Int64Vector(v18);
          *((_QWORD *)this + 9) = v18;
        }
        v26 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
        {
          v27 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v27 < 0)
            return 0;
        }
        else
        {
          v27 = *v26;
          *(_QWORD *)a2 = v26 + 1;
        }
        v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
        v32 = *((_DWORD *)a2 + 13);
        v33 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v33)
          return 0;
        v34 = v30;
        result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v18, a2, v31);
        if (!(_DWORD)result)
          return result;
      }
LABEL_70:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v34))
        return 0;
      goto LABEL_2;
  }
}

void sub_1D3B2EC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::ByteSizeLong(CoreML::Specification::GLMClassifier *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 4);
    v5 = *((unsigned int *)this + 6);
    do
    {
      v6 = *(unsigned int **)(v4 + 8 * v3 + 8);
      v7 = v6[4];
      v8 = 8 * v7;
      if ((_DWORD)v7)
      {
        if ((v8 & 0x80000000) != 0)
          v9 = 11;
        else
          v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 + v8;
      v6[8] = v8;
      v6[9] = v10;
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v5 = 0;
  }
  v11 = *((unsigned int *)this + 10);
  v12 = 8 * v11;
  if ((_DWORD)v11)
  {
    if ((v12 & 0x80000000) != 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 += v13;
  }
  *((_DWORD *)this + 14) = v12;
  v14 = v5 + v12;
  v15 = *((_DWORD *)this + 15);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v16;
  }
  v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0)
      v18 = 11;
    else
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v18;
  }
  v19 = *((_DWORD *)this + 21);
  if (v19 == 101)
  {
    v20 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 9));
    goto LABEL_30;
  }
  if (v19 == 100)
  {
    v20 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
LABEL_30:
    v14 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 20) = v14;
  return v14;
}

uint64_t CoreML::Specification::GLMClassifier::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  signed int v17;
  signed int v18;
  int v19;
  char __src[5];

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 18;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
      if (v9 < 0x80)
      {
        v12 = *(_DWORD *)(v5 + 56);
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      *v11 = v12;
      v14 = (_DWORD)v11 - v10 + 1;
      *((_QWORD *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    v15 = *(_QWORD *)(v5 + 48);
    if (v15)
      v16 = (char *)(v15 + 8);
    else
      v16 = 0;
    this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, v16, 8 * *(_DWORD *)(v5 + 40));
  }
  v17 = *(_DWORD *)(v5 + 60);
  if (v17)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(3, v17, a2, a4);
  v18 = *(_DWORD *)(v5 + 64);
  if (v18)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(4, v18, a2, a4);
  v19 = *(_DWORD *)(v5 + 84);
  if (v19 == 100)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(v5 + 72), a2, a4);
    v19 = *(_DWORD *)(v5 + 84);
  }
  if (v19 == 101)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x65, *(_QWORD *)(v5 + 72), a2, a4);
  return this;
}

uint64_t CoreML::Specification::GLMClassifier::GetCachedSize(CoreML::Specification::GLMClassifier *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CoreML::Specification::GLMClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 84);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 72);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

std::string *CoreML::Specification::GLMClassifier::MergeFrom(std::string *this, const CoreML::Specification::GLMClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  google::protobuf::Arena **v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v15;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::GLMClassifier_DoubleArray **v20;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v21;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v22;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  CoreML::Specification::StringVector *v33;
  CoreML::Specification::Int64Vector *v34;
  CoreML::Specification::StringVector *v35;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v36;
  CoreML::Specification::Int64Vector *v37;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (google::protobuf::Arena **)(v3 + 16);
    v40 = *((_QWORD *)a2 + 4);
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    v7 = this;
    v8 = **(int **)(v3 + 32);
    v39 = v3;
    v9 = *(int *)(v3 + 24);
    v10 = v8 - v9;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v40 + 8);
      v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)this;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        this = (std::string *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v5)
    {
      v17 = *v6;
      v18 = v9 + v5 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::GLMClassifier_DoubleArray **)((char *)v7 + v19);
      v21 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v19 + v40 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
          CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
        }
        this = (std::string *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v3 = v39;
    v27 = *(_DWORD *)(v39 + 24) + v5;
    *(_DWORD *)(v39 + 24) = v27;
    v28 = *(int **)(v39 + 32);
    if (*v28 < v27)
      *v28 = v27;
  }
  v29 = *((_DWORD *)a2 + 10);
  if (v29)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 40), *(_DWORD *)(v3 + 40) + v29);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 48) + 8 * *(int *)(v3 + 40) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
  }
  v30 = *((_DWORD *)a2 + 15);
  if (v30)
    *(_DWORD *)(v3 + 60) = v30;
  v31 = *((_DWORD *)a2 + 16);
  if (v31)
    *(_DWORD *)(v3 + 64) = v31;
  v32 = *((_DWORD *)a2 + 21);
  if (v32 == 101)
  {
    if (*(_DWORD *)(v3 + 84) == 101)
    {
      v34 = *(CoreML::Specification::Int64Vector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 101;
      v34 = (CoreML::Specification::Int64Vector *)operator new();
      v37 = CoreML::Specification::Int64Vector::Int64Vector(v34);
      *(_QWORD *)(v3 + 72) = v34;
      if (*((_DWORD *)a2 + 21) != 101)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v37);
        v38 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v34, v38);
      }
    }
    v38 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 9);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v34, v38);
  }
  if (v32 == 100)
  {
    if (*(_DWORD *)(v3 + 84) == 100)
    {
      v33 = *(CoreML::Specification::StringVector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 100;
      v33 = (CoreML::Specification::StringVector *)operator new();
      v35 = CoreML::Specification::StringVector::StringVector(v33);
      *(_QWORD *)(v3 + 72) = v33;
      if (*((_DWORD *)a2 + 21) != 100)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v35);
        v36 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v33, v36);
      }
    }
    v36 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 9);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v33, v36);
  }
  return this;
}

void sub_1D3B2F39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E955B370;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 60) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B2F448(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v2 + 48);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Imputer::~Imputer(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::~Imputer(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E9564CA0;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  if (*((_DWORD *)this + 10))
    CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Imputer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Imputer");
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this)
{
  return CoreML::Specification::Imputer::New(this, 0);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Imputer *v3;

  v3 = (CoreML::Specification::Imputer *)operator new();
  CoreML::Specification::Imputer::Imputer(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Imputer>(a2, v3);
  return v3;
}

void sub_1D3B2F620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40D8CFA532);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::Clear(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  return CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
}

uint64_t CoreML::Specification::Imputer::IsInitialized(CoreML::Specification::Imputer *this)
{
  return 1;
}

uint64_t CoreML::Specification::Imputer::MergePartialFromCodedStream(CoreML::Specification::Imputer *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t Varint64Fallback;
  std::string *v16;
  CoreML::Specification::DoubleVector *v17;
  CoreML::Specification::Int64Vector *v18;
  CoreML::Specification::StringToDoubleMap *v19;
  CoreML::Specification::Int64ToDoubleMap *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  std::string *v25;
  uint64_t result;
  int v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type size;
  char *v31;
  int VarintSizeAsIntFallback;
  char *v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  std::string *v40;
  char v41;
  char v42;
  int v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  const char *v57;
  unint64_t v58;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1))
        break;
      LODWORD(v8) = 0;
LABEL_7:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 9)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v58 = 0;
          v12 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v58);
            if (!(_DWORD)result)
              return result;
            v13 = v58;
          }
          else
          {
            v13 = *v12;
            *(_QWORD *)a2 = v12 + 1;
          }
          *((_QWORD *)this + 2) = v13;
          *((_DWORD *)this + 9) = 1;
          continue;
        case 2u:
          if (v9 != 16)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v41 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v14;
            *(_QWORD *)a2 = v14 + 1;
          }
          *((_QWORD *)this + 2) = Varint64Fallback;
          *((_DWORD *)this + 9) = 2;
          continue;
        case 3u:
          if (v9 != 26)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 3)
          {
            v16 = *v6;
            if (*v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_53;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 3;
            *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
LABEL_53:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v16);
          if (!(_DWORD)result)
            return result;
          v27 = *((_DWORD *)this + 9);
          v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v28 = *v6;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v29 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v29 = *v6;
          if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
            size = v29->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v57 = "CoreML.Specification.Imputer.imputedStringValue";
          goto LABEL_114;
        case 4u:
          if (v9 != 34)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 4)
          {
            v17 = (CoreML::Specification::DoubleVector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 4;
            v17 = (CoreML::Specification::DoubleVector *)operator new();
            CoreML::Specification::DoubleVector::DoubleVector(v17);
            *v6 = (std::string *)v17;
          }
          v31 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v31;
            *(_QWORD *)a2 = v31 + 1;
          }
          v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v45 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v45--, 1);
          *((_DWORD *)a2 + 13) = v45;
          if (v45 < 0 != v46)
            return 0;
          v47 = v43;
          result = CoreML::Specification::DoubleVector::MergePartialFromCodedStream(v17, (char **)a2, v44);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 5u:
          if (v9 != 42)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 5)
          {
            v18 = (CoreML::Specification::Int64Vector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 5;
            v18 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v18);
            *v6 = (std::string *)v18;
          }
          v33 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
          {
            v34 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v34 < 0)
              return 0;
          }
          else
          {
            v34 = *v33;
            *(_QWORD *)a2 = v33 + 1;
          }
          v48 = google::protobuf::io::CodedInputStream::PushLimit(a2, v34);
          v50 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v50--, 1);
          *((_DWORD *)a2 + 13) = v50;
          if (v50 < 0 != v46)
            return 0;
          v47 = v48;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v18, a2, v49);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 6u:
          if (v9 != 50)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 6)
          {
            v19 = (CoreML::Specification::StringToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 6;
            v19 = (CoreML::Specification::StringToDoubleMap *)operator new();
            CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v19);
            *v6 = (std::string *)v19;
          }
          v35 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
          {
            v36 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v36 < 0)
              return 0;
          }
          else
          {
            v36 = *v35;
            *(_QWORD *)a2 = v35 + 1;
          }
          v51 = google::protobuf::io::CodedInputStream::PushLimit(a2, v36);
          v53 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v53--, 1);
          *((_DWORD *)a2 + 13) = v53;
          if (v53 < 0 != v46)
            return 0;
          v47 = v51;
          result = CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(v19, a2, v52);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 7u:
          if (v9 != 58)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 7)
          {
            v20 = (CoreML::Specification::Int64ToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 7;
            v20 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
            CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v20);
            *v6 = (std::string *)v20;
          }
          v37 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v37 < 0)
          {
            v38 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v38 < 0)
              return 0;
          }
          else
          {
            v38 = *v37;
            *(_QWORD *)a2 = v37 + 1;
          }
          v54 = google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
          v56 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v56--, 1);
          *((_DWORD *)a2 + 13) = v56;
          if (v56 < 0 != v46)
            return 0;
          v47 = v54;
          result = CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(v20, a2, v55);
          if (!(_DWORD)result)
            return result;
LABEL_108:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v47))
            continue;
          return 0;
        case 0xBu:
          if (v9 != 89)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v58 = 0;
          v21 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v58);
            if (!(_DWORD)result)
              return result;
            v22 = v58;
          }
          else
          {
            v22 = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *((_QWORD *)this + 3) = v22;
          *((_DWORD *)this + 10) = 11;
          break;
        case 0xCu:
          if (v9 != 96)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v42 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          *((_QWORD *)this + 3) = v24;
          *((_DWORD *)this + 10) = 12;
          continue;
        case 0xDu:
          if (v9 != 106)
            goto LABEL_8;
          if (*((_DWORD *)this + 10) == 13)
          {
            v25 = *v5;
            if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_80;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v25 = *v5;
LABEL_80:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v25);
          if (!(_DWORD)result)
            return result;
          v39 = *((_DWORD *)this + 10);
          v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v28 = *v5;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v40 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v40 = *v5;
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
            size = v40->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v40->__r_.__value_.__r.__words[2]);
          v57 = "CoreML.Specification.Imputer.replaceStringValue";
LABEL_114:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v28, size, 0, (uint64_t)v57))
            return 0;
          continue;
        default:
          goto LABEL_8;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_14;
LABEL_8:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B2FD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::ByteSizeLong(CoreML::Specification::Imputer *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v2 = 9;
      break;
    case 2:
      v3 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
      goto LABEL_18;
    case 3:
      v4 = *((_QWORD *)this + 2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_18;
    case 4:
      v7 = (unsigned int *)*((_QWORD *)this + 2);
      v8 = v7[4];
      v9 = 8 * v8;
      if ((_DWORD)v8)
      {
        if ((v9 & 0x80000000) != 0)
          v10 = 11;
        else
          v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v10 = 0;
      }
      v12 = v10 + v9;
      v7[8] = v9;
      v7[9] = v12;
      v3 = v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_18;
    case 5:
      v11 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
      goto LABEL_14;
    case 6:
      v11 = CoreML::Specification::StringToDoubleMap::ByteSizeLong(*((CoreML::Specification::StringToDoubleMap **)this
                                                                   + 2));
      goto LABEL_14;
    case 7:
      v11 = CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(*((CoreML::Specification::Int64ToDoubleMap **)this + 2));
LABEL_14:
      v3 = v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
LABEL_18:
      v2 = v3 + 1;
      break;
    default:
      v2 = 0;
      break;
  }
  v13 = *((_DWORD *)this + 10);
  switch(v13)
  {
    case 13:
      v15 = *((_QWORD *)this + 3);
      v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = *(_QWORD *)(v15 + 8);
      if ((v16 & 0x80u) == 0)
        v17 = v16;
      v18 = v2 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_28;
    case 12:
      v18 = v2 + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_28:
      result = v18 + 1;
      break;
    case 11:
      result = v2 + 9;
      break;
    default:
      result = v2;
      break;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CoreML::Specification::Imputer::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    v7 = *(unsigned int **)(v5 + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.Imputer.imputedStringValue");
    if (*(_DWORD *)(v5 + 36) == 3)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  v10 = *(_DWORD *)(v5 + 40);
  if (v10 == 11)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0xB, a2, *(double *)(v5 + 24), a3);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 12)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(12, *(_QWORD *)(v5 + 24), a2, a4);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 13)
  {
    v11 = *(unsigned int **)(v5 + 24);
    if (*((char *)v11 + 23) < 0)
    {
      v11 = *(unsigned int **)v11;
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Imputer.replaceStringValue");
    if (*(_DWORD *)(v5 + 40) == 13)
      v13 = *(uint64_t **)(v5 + 24);
    else
      v13 = &google::protobuf::internal::fixed_address_empty_string;
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xDu, (uint64_t)v13, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Imputer::GetCachedSize(CoreML::Specification::Imputer *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::Imputer::clear_ImputedValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 3:
      v2 = *(_QWORD *)(this + 16);
      if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0)
          operator delete(*(void **)v2);
        this = MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
      }
      break;
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ReplaceValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 13)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

void CoreML::Specification::Imputer::MergeFrom(CoreML::Specification::Imputer *this, const CoreML::Specification::Imputer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  CoreML::Specification::DoubleVector *v9;
  CoreML::Specification::StringToDoubleMap *v10;
  CoreML::Specification::Int64ToDoubleMap *v11;
  CoreML::Specification::DoubleVector *v12;
  uint64_t *v13;
  CoreML::Specification::Int64Vector *v14;
  CoreML::Specification::StringToDoubleMap *v15;
  const CoreML::Specification::StringToDoubleMap *v16;
  CoreML::Specification::Int64ToDoubleMap *v17;
  const CoreML::Specification::Int64ToDoubleMap *v18;
  int v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  uint64_t v23;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v5 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
      }
      *((_QWORD *)this + 2) = v5;
      goto LABEL_38;
    case 2:
      v6 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
      }
      *((_QWORD *)this + 2) = v6;
      goto LABEL_38;
    case 3:
      v7 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) == 3)
      {
        v8 = (std::string *)*((_QWORD *)this + 2);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v8, *((const std::string **)a2 + 2));
          goto LABEL_38;
        }
      }
      else
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v7);
      goto LABEL_38;
    case 4:
      if (*((_DWORD *)this + 9) == 4)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_24:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v12 = CoreML::Specification::DoubleVector::DoubleVector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 4)
        goto LABEL_24;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v12);
      v13 = &CoreML::Specification::_DoubleVector_default_instance_;
      goto LABEL_32;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_26:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v14 = CoreML::Specification::Int64Vector::Int64Vector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 5)
        goto LABEL_26;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v14);
      v13 = &CoreML::Specification::_Int64Vector_default_instance_;
LABEL_32:
      CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v9, (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v13);
      goto LABEL_38;
    case 6:
      if (*((_DWORD *)this + 9) == 6)
      {
        v10 = (CoreML::Specification::StringToDoubleMap *)*((_QWORD *)this + 2);
LABEL_28:
        v16 = (const CoreML::Specification::StringToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      v10 = (CoreML::Specification::StringToDoubleMap *)operator new();
      v15 = CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 9) == 6)
        goto LABEL_28;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_;
LABEL_35:
      CoreML::Specification::StringToDoubleMap::MergeFrom(v10, v16);
      goto LABEL_38;
    case 7:
      if (*((_DWORD *)this + 9) == 7)
      {
        v11 = (CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)this + 2);
LABEL_30:
        v18 = (const CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_37;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      v11 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
      v17 = CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 9) == 7)
        goto LABEL_30;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_;
LABEL_37:
      CoreML::Specification::Int64ToDoubleMap::MergeFrom(v11, v18);
LABEL_38:
      v19 = *((_DWORD *)a2 + 10);
      switch(v19)
      {
        case 13:
          v21 = (const std::string *)*((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) == 13)
          {
            v22 = (std::string *)*((_QWORD *)this + 3);
            if (v22 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              std::string::operator=(v22, v21);
              return;
            }
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v21);
          break;
        case 12:
          v23 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 12)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 12;
          }
          *((_QWORD *)this + 3) = v23;
          break;
        case 11:
          v20 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 11)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 11;
          }
          *((_QWORD *)this + 3) = v20;
          break;
      }
      return;
    default:
      goto LABEL_38;
  }
}

void sub_1D3B305D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::Imputer(CoreML::Specification::Imputer *this)
{
  *(_QWORD *)this = &off_1E9564CA0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_)
    CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B30664(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Imputer>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(CoreML::Specification::protobuf_Imputer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Imputer_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_Imputer_default_instance_ = (uint64_t)&off_1E9564CA0;
  unk_1EDB8F5A0 = 0;
  dword_1EDB8F5C0 = 0;
  qword_1EDB8F5B8 = 0;
  byte_1EDB8F5C8 = 1;
  return result;
}

void CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(this);
  JUMPOUT(0x1D8251A40);
}

{
  *(_QWORD *)this = &off_1E95641F0;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CustomModel_CustomModelParamValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel.CustomModelParamValue");
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return CoreML::Specification::CustomModel_CustomModelParamValue::New(this, 0);
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CustomModel_CustomModelParamValue *v3;

  v3 = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
  CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(a2, v3);
  return v3;
}

void sub_1D3B30854(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::IsInitialized(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return 1;
}

BOOL CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(CoreML::Specification::CustomModel_CustomModelParamValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int TagFallback;
  unsigned int v14;
  char *v15;
  int v16;
  std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  char *v21;
  unint64_t Varint64Fallback;
  char *v23;
  unint64_t v24;
  _BOOL8 result;
  int v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type size;
  char v30;
  char v31;
  uint64_t Varint32Fallback;
  unint64_t v33;

  v5 = (std::string **)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          v8 = v6 + 1;
          v9 = *v6;
          if ((char)*v6 >= 1)
          {
            *(_QWORD *)a2 = v8;
            v10 = v9 | 0x100000000;
            if ((v10 & 0x100000000) == 0)
              goto LABEL_9;
            goto LABEL_17;
          }
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
        v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v10 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v14 = v10 >> 3;
        if (v10 >> 3 <= 0x27)
          break;
        if (v14 == 40)
        {
          if (v10 != 64)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v21 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v30 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *v5 = (std::string *)Varint64Fallback;
          goto LABEL_73;
        }
        if (v14 == 50)
        {
          if (v10 != 144)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v31 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          *(_BYTE *)v5 = v24 != 0;
LABEL_73:
          *((_DWORD *)this + 7) = v14;
        }
        else
        {
          if (v14 != 60 || v10 != 226)
            goto LABEL_9;
          if (*((_DWORD *)this + 7) != 60)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 60;
            *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_49:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v17 = *v5;
            goto LABEL_50;
          }
          v17 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_49;
LABEL_50:
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v17))
            return 0;
        }
      }
      if (v14 == 10)
      {
        if (v10 != 81)
          goto LABEL_9;
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v33 = 0;
        v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v33);
          if (!result)
            return result;
          v19 = v33;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        *v5 = (std::string *)v19;
        goto LABEL_73;
      }
      if (v14 != 20)
        break;
      if (v10 != 162)
        goto LABEL_9;
      if (*((_DWORD *)this + 7) != 20)
      {
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 20;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_53:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
        goto LABEL_54;
      }
      v20 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_53;
LABEL_54:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20);
      if (!result)
        return result;
      v26 = *((_DWORD *)this + 7);
      v27 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v27 = *v5;
      if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
        v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
      v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v28 = *v5;
      if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
        size = v28->__r_.__value_.__l.__size_;
      else
        LODWORD(size) = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v27, size, 0, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue"))return 0;
    }
    if (v14 == 30 && v10 == 240)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v16 = 0;
      }
      else
      {
        v16 = *v15;
        if ((*v15 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v15 + 1;
LABEL_72:
          *(_DWORD *)v5 = v16;
          goto LABEL_73;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
      v16 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_72;
    }
LABEL_9:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = 0;
  v2 = *((_DWORD *)this + 7);
  if (v2 <= 39)
  {
    if (v2 == 10)
    {
      v1 = 9;
      goto LABEL_18;
    }
    if (v2 != 20)
    {
      if (v2 == 30)
      {
        v3 = *((_DWORD *)this + 4);
        v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2;
        if (v3 >= 0)
          v1 = v4;
        else
          v1 = 12;
      }
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  switch(v2)
  {
    case '(':
      v8 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
LABEL_16:
      v1 = v8 + 2;
      break;
    case '2':
      v1 = 3;
      break;
    case '<':
LABEL_11:
      v5 = *((_QWORD *)this + 2);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v7 = v6;
      v8 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_16;
  }
LABEL_18:
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 10)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0xA, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 20)
  {
    v7 = *(unsigned int **)(v5 + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue");
    if (*(_DWORD *)(v5 + 28) == 20)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x14u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 30)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt32(30, *(_DWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 40)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(40, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 50)
  {
    this = google::protobuf::internal::WireFormatLite::WriteBool(50, *(unsigned __int8 *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 60)
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x3Cu, *(_QWORD *)(v5 + 16), a2);
  return this;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::GetCachedSize(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 60 || v2 == 20)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1D8251A40](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(CoreML::Specification::CustomModel_CustomModelParamValue *this, const CoreML::Specification::CustomModel_CustomModelParamValue *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  char v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 > 39)
  {
    switch(v5)
    {
      case '(':
        v10 = *((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) != 40)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 40;
        }
        *((_QWORD *)this + 2) = v10;
        break;
      case '2':
        v12 = *((_BYTE *)a2 + 16);
        if (*((_DWORD *)this + 7) != 50)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 50;
        }
        *((_BYTE *)this + 16) = v12;
        break;
      case '<':
        v7 = (const std::string *)*((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) == 60)
        {
LABEL_22:
          v11 = (std::string *)*((_QWORD *)this + 2);
          if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            std::string::operator=(v11, v7);
            return;
          }
          goto LABEL_30;
        }
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v8 = 60;
LABEL_29:
        *((_DWORD *)this + 7) = v8;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_30:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v7);
        return;
      default:
        return;
    }
  }
  else
  {
    if (v5 != 10)
    {
      if (v5 != 20)
      {
        if (v5 == 30)
        {
          v6 = *((_DWORD *)a2 + 4);
          if (*((_DWORD *)this + 7) != 30)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 30;
          }
          *((_DWORD *)this + 4) = v6;
        }
        return;
      }
      v7 = (const std::string *)*((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 7) == 20)
        goto LABEL_22;
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v8 = 20;
      goto LABEL_29;
    }
    v9 = *((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) != 10)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 10;
    }
    *((_QWORD *)this + 2) = v9;
  }
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  *(_QWORD *)this = &off_1E95641F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CustomModel_CustomModelParamValue *)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B31088(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(CoreML::Specification::protobuf_CustomModel_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

CoreML::Specification::CustomModel *CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct *this)
{
  CoreML::Specification::CustomModel *result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_ = (uint64_t)&off_1E95641F0;
  unk_1EDB936E8 = 0;
  qword_1EDB936F8 = 0;
  byte_1EDB93700 = 1;
  qword_1EDB92F20 = 0;
  unk_1EDB92F28 = 0;
  qword_1EDB92F10 = 0;
  unk_1EDB92F18 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EDB92F30 = 0;
  CoreML::Specification::_CustomModel_ParametersEntry_default_instance_ = (uint64_t)&off_1E9567400;
  byte_1EDB92F38 = 1;
  result = CoreML::Specification::CustomModel::CustomModel((CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_);
  *((_BYTE *)result + 72) = 1;
  qword_1EDB92F10 = (uint64_t)&CoreML::Specification::_CustomModel_ParametersEntry_default_instance_;
  qword_1EDB92F20 = (uint64_t)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_;
  return result;
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::CustomModel(CoreML::Specification::CustomModel *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_CustomModel_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9559F40;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_CustomModel_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1D3B31278(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x1D8251A40](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1D8251A40](v7, 0x10B2C4015637A22);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  std::random_device *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  google::protobuf::Arena **v9;
  __int128 v11;
  unsigned int v12[258];
  std::random_device v13;

  *a1 = 0;
  v4 = std::random_device::random_device[abi:ne180100](&v13);
  v5 = MEMORY[0x1D82518F0](v4);
  v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  if (v6 <= 1)
    v6 = 1;
  v12[0] = v6;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v12);
  v11 = xmmword_1D3BDFCA0;
  v7 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v12, &v11);
  std::random_device::~random_device(&v13);
  a1[2] = v7;
  a1[4] = 0;
  a1[5] = a2;
  v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<void *>::allocate(a2, 8, v8);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v9;
  a1[1] = 8;
  return a1;
}

void sub_1D3B316CC(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3B31688);
}

void CoreML::Specification::CustomModel::~CustomModel(CoreML::Specification::CustomModel *this)
{
  CoreML::Specification::CustomModel::~CustomModel(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E9559F40;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1D8251A40](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1D8251A40](v4, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CustomModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel");
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this)
{
  return CoreML::Specification::CustomModel::New(this, 0);
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CustomModel *v3;

  v3 = (CoreML::Specification::CustomModel *)operator new();
  CoreML::Specification::CustomModel::CustomModel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(a2, v3);
  return v3;
}

void sub_1D3B31784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C405C383CC1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CustomModel::Clear(CoreML::Specification::CustomModel *this)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::CustomModel::IsInitialized(CoreML::Specification::CustomModel *this)
{
  return 1;
}

uint64_t CoreML::Specification::CustomModel::MergePartialFromCodedStream(CoreML::Specification::CustomModel *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  google::protobuf::Arena **v5;
  _QWORD *v6;
  std::string **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type size;
  char *v18;
  int VarintSizeAsIntFallback;
  std::string *v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  CoreML::Specification::CustomModel_CustomModelParamValue *v27;
  char *v28;
  int v29;
  uint64_t v30;
  std::string *v31;
  int BeyondKeyValuePair;
  __n128 v33;
  BOOL v34;
  int v35;
  const char *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int *p_p;
  int v42;
  _BOOL4 v43;
  unsigned int TagFallback;
  google::protobuf::Arena **v47;
  _QWORD *v48;
  std::string __p;
  google::protobuf::Arena **v50;
  uint64_t v51;

  v4 = (std::string **)((char *)this + 56);
  v5 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (_QWORD *)((char *)this + 24);
  v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 **)a2;
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v9)
      {
        LODWORD(v11) = 0;
LABEL_86:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
        v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v12 & 0x100000000) == 0)
          goto LABEL_87;
        goto LABEL_9;
      }
      v10 = v8 + 1;
      v11 = *v8;
      if ((char)*v8 >= 1)
        break;
      if ((unint64_t)v10 >= v9)
        goto LABEL_86;
      v13 = *v10;
      if ((v11 & ~v13) < 0x80)
        goto LABEL_86;
      *(_QWORD *)a2 = v8 + 2;
      v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
LABEL_9:
      v14 = v12 >> 3;
      if (v12 >> 3 == 40)
      {
        if (v12 != 66)
          goto LABEL_87;
        v20 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v20 = *v4;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20))
          return 0;
        v16 = *v4;
        if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          size = (*v4)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
        }
        v36 = "CoreML.Specification.CustomModel.description";
LABEL_57:
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v16, size, 0, (uint64_t)v36))
          return 0;
      }
      else
      {
        if (v14 != 30)
        {
          if (v14 != 10 || v12 != 82)
            goto LABEL_87;
          v15 = *v7;
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v15 = *v7;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v15))
            return 0;
          v16 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v36 = "CoreML.Specification.CustomModel.className";
          goto LABEL_57;
        }
        if (v12 != 242)
          goto LABEL_87;
        v47 = v5;
        v48 = v6;
        memset(&__p, 0, sizeof(__p));
        v51 = 0;
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_84;
        }
        else
        {
          VarintSizeAsIntFallback = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v22 = *((_DWORD *)a2 + 13);
        v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a2 + 13) = v22;
        if (v22 < 0 != v23)
          goto LABEL_84;
        v24 = v21;
        v25 = *(_BYTE **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v25 == 10)
        {
          *(_QWORD *)a2 = v25 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, &__p))
            goto LABEL_84;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
          {
            v26 = *(_QWORD *)v48[2];
            v50 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[]((uint64_t)v48, (uint64_t)&__p);
            if (v26 != *(_QWORD *)v48[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v27 = (CoreML::Specification::CustomModel_CustomModelParamValue *)v50;
              v28 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
              {
                v29 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if ((v29 & 0x80000000) == 0)
                  goto LABEL_60;
              }
              else
              {
                v29 = *v28;
                *(_QWORD *)a2 = v28 + 1;
LABEL_60:
                v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
                v39 = *((_DWORD *)a2 + 13);
                v23 = __OFSUB__(v39--, 1);
                *((_DWORD *)a2 + 13) = v39;
                if (v39 < 0 == v23)
                {
                  v40 = v37;
                  if (CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(v27, a2, v38)&& google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v40))
                  {
                    if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                    {
                      *((_DWORD *)a2 + 8) = 0;
                      *((_BYTE *)a2 + 36) = 1;
                      goto LABEL_66;
                    }
                    BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair((uint64_t)&v47, (uint64_t)a2);
LABEL_65:
                    if (BeyondKeyValuePair)
                    {
LABEL_66:
                      if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24))
                      {
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          p_p = (unsigned int *)&__p;
                        else
                          p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        else
                          v42 = __p.__r_.__value_.__r.__words[1];
                        v43 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v42, 0, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
                        v34 = v43;
                        if (v43)
                          v35 = 0;
                        else
                          v35 = 6;
LABEL_76:
                        if (v51)
                          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
                        goto LABEL_78;
                      }
                    }
LABEL_84:
                    v34 = 0;
                    v35 = 6;
                    goto LABEL_76;
                  }
                }
              }
              google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(v48, (unsigned __int8 *)&__p);
              goto LABEL_84;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v30 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v47);
        if (v51 != v30)
        {
          if (v51)
            (*(void (**)(void))(*(_QWORD *)v51 + 8))();
          v51 = v30;
        }
        v31 = *(std::string **)(v30 + 16);
        *(_DWORD *)(v30 + 40) |= 1u;
        if (v31 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v30 + 16), *(google::protobuf::Arena ***)(v30 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v31 = *(std::string **)(v30 + 16);
        }
        std::string::operator=(v31, &__p);
        BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v51 + 88))(v51, a2);
        if (BeyondKeyValuePair)
          v33.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry((uint64_t)&v47);
        if (!(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v51 + 40))(v51, v33))
          goto LABEL_65;
        v51 = 0;
        if ((BeyondKeyValuePair & 1) != 0)
          goto LABEL_66;
        v34 = 0;
        v35 = 6;
LABEL_78:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v34 && v35)
          return 0;
      }
    }
    *(_QWORD *)a2 = v10;
    v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_87:
    if (!(_DWORD)v12 || (v12 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0;
  }
}

void sub_1D3B31D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CustomModel::ByteSizeLong(CoreML::Specification::CustomModel *this)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15[3];

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = *v2;
  google::protobuf::Map<std::string,std::string>::begin(v15, v2);
  v4 = 0;
  v5 = 2 * v3;
  while (v15[0])
  {
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v15[0] + 3), *((_QWORD *)v15[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v6)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v6;
    }
    v7 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v15);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v8 = *((_QWORD *)this + 6);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v11 = *((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v5 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_20:
  *((_DWORD *)this + 16) = v5;
  return v5;
}

void sub_1D3B31EFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CustomModel::SerializeWithCachedSizes(CoreML::Specification::CustomModel *this, google::protobuf::io::CodedOutputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  google::protobuf::io::CodedOutputStream *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::io::CodedOutputStream *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unsigned __int8 *v28[3];

  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(unsigned int **)v4;
    goto LABEL_6;
  }
  LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.CustomModel.className");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = (unint64_t *)*((_QWORD *)this + 5);
  v7 = *v6;
  if (!*v6)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v7 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v15 = operator new[]();
      google::protobuf::Map<std::string,std::string>::begin(v28, *((_QWORD **)this + 5));
      v16 = v28[0];
      if (v28[0])
      {
        v17 = 0;
        do
        {
          *(_QWORD *)(v15 + 8 * v17) = *((_QWORD *)v16 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v28);
          ++v17;
          v16 = v28[0];
        }
        while (v28[0]);
      }
      else
      {
        v17 = 0;
      }
      v18 = 126 - 2 * __clz(v17);
      if (v17)
        v19 = v18;
      else
        v19 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v15, (char *)(v15 + 8 * v17), v19, 1);
      if (v17)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v23 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v15 + 8 * v20), *(_QWORD *)(v15 + 8 * v20) + 24, *((google::protobuf::Arena **)this + 2));
          if (v21 != v23)
          {
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v21 = v23;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1E, v21, a2, v22);
          v24 = *(unsigned int **)(v15 + 8 * v20);
          if (*((char *)v24 + 23) < 0)
          {
            v24 = *(unsigned int **)v24;
            v25 = *(_QWORD *)(*(_QWORD *)(v15 + 8 * v20) + 8);
          }
          else
          {
            LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
          ++v20;
        }
        while (v17 != v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      MEMORY[0x1D8251A28](v15, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v7 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  google::protobuf::Map<std::string,std::string>::begin(v28, v6);
  v9 = 0;
  while (v28[0])
  {
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v28[0] + 3), *((_QWORD *)v28[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v9 != v11)
    {
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v9 = v11;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1E, v9, a2, v10);
    v12 = (unsigned int *)*((_QWORD *)v28[0] + 3);
    if (*((char *)v12 + 23) < 0)
    {
      v12 = *(unsigned int **)v12;
      v13 = *(_QWORD *)(*((_QWORD *)v28[0] + 3) + 8);
    }
    else
    {
      LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v28);
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_50:
  result = *((_QWORD *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    v27 = *(_QWORD *)(result + 8);
    if (!v27)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_55;
  }
  LODWORD(v27) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_55:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v27, 1, (uint64_t)"CoreML.Specification.CustomModel.description");
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x28u, *((_QWORD *)this + 7), a2);
  }
  return result;
}

void sub_1D3B32200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1D8251A28](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CustomModel::GetCachedSize(CoreML::Specification::CustomModel *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::less<std::string>::operator()[abi:ne180100](v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::less<std::string>::operator()[abi:ne180100](v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::less<std::string>::operator()[abi:ne180100](v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::less<std::string>::operator()[abi:ne180100](v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::less<std::string>::operator()[abi:ne180100](*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::less<std::string>::operator()[abi:ne180100](*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::less<std::string>::operator()[abi:ne180100](v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::less<std::string>::operator()[abi:ne180100](v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::less<std::string>::operator()[abi:ne180100](v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::less<std::string>::operator()[abi:ne180100](v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::less<std::string>::operator()[abi:ne180100](v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::less<std::string>::operator()[abi:ne180100](v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E9566590;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_1D3BDFB5D);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E9567400;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567400;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(*(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_1D3B32D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  _BOOL8 result;
  int v10;
  char *v11;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*a2;
        if (*a2 >= a2[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = (unsigned __int8 *)(v6 + 1);
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v8);
        if (!result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = (char *)*a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = (unsigned __int8 *)(v11 + 1);
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = (char *)*a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *a2 = (unsigned __int8 *)(v17 + 1);
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)a2 + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)a2 + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(Aligned, (google::protobuf::io::CodedInputStream *)a2, v20);
      if (!result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v23);
      if (!result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_1D3B32FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::CustomModel_CustomModelParamValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 24) + ((9 * (__clz(*(_DWORD *)(v4 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9566638;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_1D3B33378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::less<std::string>::operator()[abi:ne180100](v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::less<std::string>::operator()[abi:ne180100](*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::less<std::string>::operator()[abi:ne180100](v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 56);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_1D3B33784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1D8251A40](v14, 0x10B2C4015637A22);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(_QWORD *)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = (google::protobuf::Arena *)Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
  {
    v12 = *(_QWORD *)(Aligned + 16);
    *(_QWORD *)(Aligned + 16) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v12;
    v13 = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = *(_DWORD *)(v6 + 28);
    *(_DWORD *)(v6 + 28) = v13;
    v14 = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v14;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v15 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v15 + 40) |= 1u;
  v16 = *(_QWORD *)(v15 + 16);
  if ((uint64_t *)v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v15 + 16), *(google::protobuf::Arena ***)(v15 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *(_QWORD *)(v15 + 16);
  }
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  v17 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v18)
    v19.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v19))
    *(_QWORD *)(a1 + 48) = 0;
  return v18;
}

void sub_1D3B33A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E9567400;
  return result;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  double result;
  uint64_t v5;
  uint64_t Aligned;
  google::protobuf::Arena *v7;
  google::protobuf::Arena **v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v5 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v5 + 40) |= 2u;
  Aligned = *(_QWORD *)(v5 + 24);
  if (!Aligned)
  {
    v7 = *(google::protobuf::Arena **)(v5 + 32);
    if (v7)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      v8 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
      *v8 = (google::protobuf::Arena *)Aligned;
      v8[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
      v9 = (unint64_t *)((char *)v7 + 32);
      do
        v10 = __ldxr(v9);
      while (__stxr((unint64_t)v8, v9));
      v8[2] = (google::protobuf::Arena *)v10;
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v5 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  if ((google::protobuf::Arena **)Aligned != v3)
  {
    result = *((double *)v3 + 2);
    v3[2] = *(google::protobuf::Arena **)(Aligned + 16);
    *(double *)(Aligned + 16) = result;
    v11 = *((_DWORD *)v3 + 7);
    *((_DWORD *)v3 + 7) = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = v11;
    v12 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = v12;
  }
  return result;
}

void sub_1D3B33BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::CustomModel::MergeFrom(CoreML::Specification::CustomModel *this, const CoreML::Specification::CustomModel *a2)
{
  uint64_t v4;
  unsigned __int8 *i;
  uint64_t v6;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::CustomModel_CustomModelParamValue *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::string *v13;
  std::string **v14;
  std::string *v15;
  unsigned __int8 *v16[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::Map<std::string,std::string>::begin(v16, *((_QWORD **)a2 + 5));
  for (i = v16[0]; v16[0]; i = v16[0])
  {
    v6 = *((_QWORD *)i + 3);
    v7 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)(v6 + 24);
    v8 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::CustomModel_CustomModelParamValue *)v8)
    {
      v9 = (CoreML::Specification::CustomModel_CustomModelParamValue *)v8;
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)v8);
      CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair const>::operator++(v16);
  }
  v10 = *((_QWORD *)a2 + 6);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_15;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 6);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v10);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v10);
  }
LABEL_15:
  v12 = *((_QWORD *)a2 + 7);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      return;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    return;
  }
  v15 = (std::string *)*((_QWORD *)this + 7);
  v14 = (std::string **)((char *)this + 56);
  v13 = v15;
  if (v15 != (std::string *)v12)
  {
    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v14, v12);
    else
      std::string::operator=(v13, (const std::string *)v12);
  }
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1D8251A40);
}

void CoreML::Specification::LinearKernel::~LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_1E955ACE8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E955ACE8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1D8251A40);
}

_QWORD *CoreML::Specification::LinearKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinearKernel");
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this)
{
  return CoreML::Specification::LinearKernel::New(this, 0);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::LinearKernel *v3;

  v3 = (CoreML::Specification::LinearKernel *)operator new();
  CoreML::Specification::LinearKernel::LinearKernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(a2, v3);
  return v3;
}

void sub_1D3B33FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinearKernel::IsInitialized(CoreML::Specification::LinearKernel *this)
{
  return 1;
}

std::string *CoreML::Specification::LinearKernel::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::LinearKernel::MergePartialFromCodedStream(CoreML::Specification::LinearKernel *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::LinearKernel::ByteSizeLong(CoreML::Specification::LinearKernel *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::LinearKernel::GetCachedSize(CoreML::Specification::LinearKernel *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_1E955ACE8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinearKernel *)&CoreML::Specification::_LinearKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B340E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t *CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(CoreML::Specification::protobuf_SVM_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E9567B38;
    v3[1] = CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_SVM_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_LinearKernel_default_instance_ = (uint64_t)&off_1E955ACE8;
  qword_1EDB8FA68 = 0;
  dword_1EDB8FA70 = 0;
  byte_1EDB8FA78 = 1;
  qword_1EDB8F740 = 0;
  qword_1EDB8F748 = 0;
  CoreML::Specification::_RBFKernel_default_instance_ = (uint64_t)&off_1E9566298;
  dword_1EDB8F750 = 0;
  byte_1EDB8F758 = 1;
  CoreML::Specification::_PolyKernel_default_instance_ = (uint64_t)&off_1E9559E10;
  result = 0.0;
  *(_OWORD *)algn_1EDB8F7E0 = 0u;
  *(_OWORD *)&algn_1EDB8F7E0[16] = 0u;
  byte_1EDB8F800 = 1;
  CoreML::Specification::_SigmoidKernel_default_instance_ = (uint64_t)&off_1E955B538;
  unk_1EDB8FDA0 = 0;
  qword_1EDB8FDA8 = 0;
  unk_1EDB8FDB0 = 0;
  dword_1EDB8FDB8 = 0;
  byte_1EDB8FDC0 = 1;
  CoreML::Specification::_Kernel_default_instance_ = (uint64_t)&off_1E9564AD8;
  unk_1EDB8F4D8 = 0;
  qword_1EDB8F4E8 = 0;
  byte_1EDB8F4F0 = 1;
  CoreML::Specification::_SparseSupportVectors_default_instance_ = (uint64_t)&off_1E955FBE0;
  unk_1EDB91A28 = 0u;
  unk_1EDB91A38 = 0u;
  dword_1EDB91A48 = 0;
  byte_1EDB91A50 = 1;
  CoreML::Specification::_DenseSupportVectors_default_instance_ = (uint64_t)&off_1E955EDA0;
  unk_1EDB91590 = 0u;
  unk_1EDB915A0 = 0u;
  dword_1EDB915B0 = 0;
  byte_1EDB915B8 = 1;
  CoreML::Specification::_Coefficients_default_instance_ = (uint64_t)&off_1E955A498;
  *(_QWORD *)algn_1EDB8F9B8 = 0;
  qword_1EDB8F9C0 = 0;
  unk_1EDB8F9C8 = 0;
  dword_1EDB8F9D4 = 0;
  byte_1EDB8F9D8 = 1;
  CoreML::Specification::_SupportVectorRegressor_default_instance_ = (uint64_t)&off_1E9560EE0;
  qword_1EDB921E0 = 0;
  *(_OWORD *)algn_1EDB921B8 = 0u;
  xmmword_1EDB921C8 = 0u;
  byte_1EDB921E8 = 1;
  qword_1EDB92630 = 0;
  unk_1EDB92638 = 0;
  qword_1EDB92648 = 0;
  unk_1EDB92650 = 0;
  CoreML::Specification::_SupportVectorClassifier_default_instance_ = (uint64_t)&off_1E9561730;
  unk_1EDB925E0 = 0;
  qword_1EDB925E8 = 0;
  unk_1EDB925F0 = 0;
  unk_1EDB92600 = 0u;
  unk_1EDB92610 = 0u;
  qword_1EDB92620 = 0;
  dword_1EDB92680 = 0;
  qword_1EDB92678 = 0;
  byte_1EDB92688 = 1;
  qword_1EDB921C0 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  *(_QWORD *)&xmmword_1EDB921C8 = &CoreML::Specification::_Coefficients_default_instance_;
  qword_1EDB92660 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  return result;
}

void CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(this);
  JUMPOUT(0x1D8251A40);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E9561730;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v2 = *((_QWORD *)this + 17);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 41))
    CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  if (*((_DWORD *)this + 42))
    CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
  v3 = (_QWORD *)*((_QWORD *)this + 15);
  if (v3 && !*v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  if (v4 && !*v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 9);
  if (v5 && !*v5)
    operator delete(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_QWORD *)this + 5);
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if (v6 && !*v6)
    operator delete(v6);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::SupportVectorClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorClassifier");
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this)
{
  return CoreML::Specification::SupportVectorClassifier::New(this, 0);
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SupportVectorClassifier *v3;

  v3 = (CoreML::Specification::SupportVectorClassifier *)operator new();
  CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(a2, v3);
  return v3;
}

void sub_1D3B343CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C4069FFF750);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::Clear(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *((_DWORD *)this + 4) = 0;
  v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v4 = *v3++;
      *(_DWORD *)(v4 + 16) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  v5 = *((_QWORD *)this + 17);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 17) = 0;
  CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  return CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorClassifier::IsInitialized(CoreML::Specification::SupportVectorClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(CoreML::Specification::SupportVectorClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  google::protobuf::internal::RepeatedPtrFieldBase *v8;
  signed int *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unsigned int TagFallback;
  unsigned int v18;
  CoreML::Specification::Kernel *v19;
  char *v20;
  int VarintSizeAsIntFallback;
  CoreML::Specification::Int64Vector *v22;
  char *v23;
  int v24;
  CoreML::Specification::SparseSupportVectors *v25;
  CoreML::Specification::DenseSupportVectors *v26;
  int *v27;
  int v28;
  int v29;
  CoreML::Specification::Coefficients *Aligned;
  char *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  CoreML::Specification::StringVector *v37;
  int v38;
  unint64_t **v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t result;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  google::protobuf::Arena *v67;
  google::protobuf::Arena **v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  char *v83;
  int v84;
  uint64_t Varint32Fallback;
  signed int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  signed int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  google::protobuf::internal::RepeatedPtrFieldBase *v103;
  unsigned int *v104;
  unsigned int *v105;
  signed int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  signed int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  google::protobuf::internal::RepeatedPtrFieldBase *v120;
  unsigned int *v121;
  unsigned int *v122;
  signed int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  signed int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  google::protobuf::internal::RepeatedPtrFieldBase *v137;
  unsigned int *v138;
  unsigned int *v139;
  signed int v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  signed int *v149;
  unint64_t v150;

  v5 = (unsigned int *)((char *)this + 112);
  v6 = (unsigned int *)((char *)this + 88);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = (CoreML::Specification::SupportVectorClassifier *)((char *)this + 40);
  v9 = (signed int *)((char *)this + 16);
  v149 = (signed int *)((char *)this + 16);
LABEL_2:
  while (2)
  {
    v10 = *(unsigned __int8 **)a2;
    v11 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v11)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v12 = v10 + 1;
      v13 = *v10;
      if ((char)*v10 >= 1)
      {
        *(_QWORD *)a2 = v12;
        v14 = v13 | 0x100000000;
        if ((v14 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v12 < v11)
      {
        v15 = *v12;
        if ((v13 & ~v15) >= 0x80)
        {
          *(_QWORD *)a2 = v10 + 2;
          v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
    v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v14 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v18 = v14 >> 3;
    switch(v14 >> 3)
    {
      case 1u:
        if (v14 != 10)
          goto LABEL_9;
        v19 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
        if (!v19)
        {
          v19 = (CoreML::Specification::Kernel *)operator new();
          CoreML::Specification::Kernel::Kernel(v19);
          *((_QWORD *)this + 17) = v19;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v51 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v51--, 1);
        *((_DWORD *)a2 + 13) = v51;
        if (v51 < 0 != v52)
          return 0;
        v53 = v49;
        result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v19, a2, v50);
        if ((_DWORD)result)
          goto LABEL_122;
        return result;
      case 2u:
        if (v14 == 16)
        {
          if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(18, (unint64_t *)a2, v9) & 1) != 0)continue;
          return 0;
        }
        if (v14 != 18)
          goto LABEL_9;
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            return 0;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v78 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        while (1)
        {
          v79 = *((_DWORD *)a2 + 10);
          v80 = *((int *)a2 + 11);
          v81 = *((_QWORD *)a2 + 1);
          v82 = *((_DWORD *)a2 + 6);
          if (v79 == 0x7FFFFFFF || (v83 = *(char **)a2, (int)(v79 - v82 + v80 + v81 - *(_QWORD *)a2) < 1))
          {
            *((_DWORD *)a2 + 10) = v78;
            v88 = v81 + v80;
            *((_QWORD *)a2 + 1) = v88;
            v89 = *((_DWORD *)a2 + 12);
            if (v89 >= v78)
              v89 = v78;
            v52 = __OFSUB__(v82, v89);
            v90 = v82 - v89;
            if ((v90 < 0) ^ v52 | (v90 == 0))
              v90 = 0;
            else
              *((_QWORD *)a2 + 1) = v88 - v90;
            *((_DWORD *)a2 + 11) = v90;
            *((_BYTE *)a2 + 36) = 0;
            goto LABEL_2;
          }
          if ((unint64_t)v83 >= v81)
          {
            v84 = 0;
          }
          else
          {
            v84 = *v83;
            if ((*v83 & 0x80000000) == 0)
            {
              *(_QWORD *)a2 = v83 + 1;
              goto LABEL_133;
            }
          }
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v84);
          v84 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_133:
          v86 = *((_DWORD *)this + 4);
          if (v86 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v86 + 1);
            v86 = *v9;
          }
          v87 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v86 + 1;
          *(_DWORD *)(v87 + 4 * v86 + 8) = v84;
        }
      case 3u:
        if (v14 != 26)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 3)
        {
          v25 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 3;
          v25 = (CoreML::Specification::SparseSupportVectors *)operator new();
          CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v25);
          *((_QWORD *)this + 18) = v25;
        }
        v43 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v43 < 0)
        {
          v44 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v44 < 0)
            return 0;
        }
        else
        {
          v44 = *v43;
          *(_QWORD *)a2 = v43 + 1;
        }
        v58 = google::protobuf::io::CodedInputStream::PushLimit(a2, v44);
        v60 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v60--, 1);
        *((_DWORD *)a2 + 13) = v60;
        if (v60 < 0 != v52)
          return 0;
        v53 = v58;
        result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v25, a2, v59);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 4u:
        if (v14 != 34)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 4)
        {
          v26 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 4;
          v26 = (CoreML::Specification::DenseSupportVectors *)operator new();
          CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v26);
          *((_QWORD *)this + 18) = v26;
        }
        v45 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
        {
          v46 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v46 < 0)
            return 0;
        }
        else
        {
          v46 = *v45;
          *(_QWORD *)a2 = v45 + 1;
        }
        v61 = google::protobuf::io::CodedInputStream::PushLimit(a2, v46);
        v63 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v63--, 1);
        *((_DWORD *)a2 + 13) = v63;
        if (v63 < 0 != v52)
          return 0;
        v53 = v61;
        result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v26, a2, v62);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 5u:
        if (v14 != 42)
          goto LABEL_9;
        v27 = (int *)*((_QWORD *)this + 7);
        if (!v27)
        {
          v28 = *((_DWORD *)this + 12);
          v29 = *((_DWORD *)this + 13);
LABEL_107:
          if (v28 <= v29)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v8, v29 - v28 + 1);
            v27 = (int *)*((_QWORD *)this + 7);
          }
          v29 = *v27;
          goto LABEL_110;
        }
        v28 = *((_DWORD *)this + 12);
        v29 = *v27;
        if (v28 < *v27)
        {
          *((_DWORD *)this + 12) = v28 + 1;
          Aligned = *(CoreML::Specification::Coefficients **)&v27[2 * v28 + 2];
          goto LABEL_116;
        }
        if (v29 == *((_DWORD *)this + 13))
          goto LABEL_107;
LABEL_110:
        *v27 = v29 + 1;
        v67 = *(google::protobuf::Arena **)v8;
        if (*(_QWORD *)v8)
        {
          CoreML::Specification::Coefficients::Coefficients(Aligned);
          v68 = google::protobuf::Arena::AllocateAligned(v67, 0, 24);
          *v68 = Aligned;
          v68[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>;
          v69 = (unint64_t *)((char *)v67 + 32);
          do
            v70 = __ldxr(v69);
          while (__stxr((unint64_t)v68, v69));
          v68[2] = (google::protobuf::Arena *)v70;
        }
        else
        {
          Aligned = (CoreML::Specification::Coefficients *)operator new();
          CoreML::Specification::Coefficients::Coefficients(Aligned);
        }
        v71 = *((_QWORD *)this + 7);
        v72 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v72 + 1;
        *(_QWORD *)(v71 + 8 * v72 + 8) = Aligned;
LABEL_116:
        v73 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v73 < 0)
        {
          v74 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v74 < 0)
            return 0;
        }
        else
        {
          v74 = *v73;
          *(_QWORD *)a2 = v73 + 1;
        }
        v75 = google::protobuf::io::CodedInputStream::PushLimit(a2, v74);
        v77 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v77--, 1);
        *((_DWORD *)a2 + 13) = v77;
        if (v77 < 0 != v52)
          return 0;
        v53 = v75;
        result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(Aligned, (char **)a2, v76);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 6u:
        if (v14 == 49)
        {
          v38 = 50;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v7;
          goto LABEL_67;
        }
        if (v14 != 50)
          goto LABEL_9;
        v31 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
        {
          v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v32 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v32 = *v31;
          *(_QWORD *)a2 = v31 + 1;
        }
        if ((v32 & 7) != 0)
          return 0;
        v91 = *((_DWORD *)a2 + 12);
        if (v91 == 0x7FFFFFFF)
          v92 = -1;
        else
          v92 = v91 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v93 = *((_DWORD *)a2 + 10);
        if (v93 == 0x7FFFFFFF)
          v94 = -1;
        else
          v94 = v93 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v95 = *v7;
        v96 = v32 >> 3;
        if (v94 >= v92)
          v97 = v92;
        else
          v97 = v94;
        if (v92 == -1)
          v98 = v94;
        else
          v98 = v97;
        if (v98 >= (uint64_t)v32)
        {
          v103 = v8;
          v104 = v6;
          v105 = v5;
          v106 = v95 + v96;
          if (v32 > 7)
          {
            google::protobuf::RepeatedField<double>::Reserve(v7, v95 + v96);
            v107 = *((_QWORD *)this + 9);
            v143 = 8 * v106 - 8 * *((int *)this + 16);
            if (v143 >= 1)
              bzero((void *)(v107 + 8 + 8 * *((int *)this + 16)), 8 * (((unint64_t)v143 >> 3) - ((unint64_t)v143 > 7)) + 8);
          }
          else
          {
            v107 = *((_QWORD *)this + 9);
          }
          *v7 = v106;
          v144 = v107 + 8;
          if (!v107)
            v144 = 0;
          v5 = v105;
          v6 = v104;
          v8 = v103;
          v9 = v149;
          if (!google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v144 + 8 * v95), v32))
          {
            if ((int)*v7 < 1)
              return 0;
            result = 0;
            *v7 = v95;
            return result;
          }
        }
        else if (v32 >= 8)
        {
          if (v96 <= 1)
            v99 = 1;
          else
            v99 = v32 >> 3;
          do
          {
            v150 = 0;
            v100 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
              if (!(_DWORD)result)
                return result;
              v101 = v150;
              v95 = *v7;
            }
            else
            {
              v101 = *v100;
              *(_QWORD *)a2 = v100 + 1;
            }
            if (v95 == *((_DWORD *)this + 17))
            {
              google::protobuf::RepeatedField<double>::Reserve(v7, v95 + 1);
              v95 = *v7;
            }
            v102 = *((_QWORD *)this + 9) + 8 * v95;
            *((_DWORD *)this + 16) = v95 + 1;
            *(_QWORD *)(v102 + 8) = v101;
            ++v95;
            --v99;
          }
          while (v99);
        }
        continue;
      case 7u:
        if (v14 == 57)
        {
          v38 = 58;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v6;
          goto LABEL_67;
        }
        if (v14 != 58)
          goto LABEL_9;
        v33 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
        {
          v34 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v34 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v34 = *v33;
          *(_QWORD *)a2 = v33 + 1;
        }
        if ((v34 & 7) != 0)
          return 0;
        v108 = *((_DWORD *)a2 + 12);
        if (v108 == 0x7FFFFFFF)
          v109 = -1;
        else
          v109 = v108 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v110 = *((_DWORD *)a2 + 10);
        if (v110 == 0x7FFFFFFF)
          v111 = -1;
        else
          v111 = v110 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v112 = *v6;
        v113 = v34 >> 3;
        if (v111 >= v109)
          v114 = v109;
        else
          v114 = v111;
        if (v109 == -1)
          v115 = v111;
        else
          v115 = v114;
        if (v115 >= (uint64_t)v34)
        {
          v120 = v8;
          v121 = v7;
          v122 = v5;
          v123 = v112 + v113;
          if (v34 > 7)
          {
            google::protobuf::RepeatedField<double>::Reserve(v6, v112 + v113);
            v124 = *((_QWORD *)this + 12);
            v145 = 8 * v123 - 8 * *((int *)this + 22);
            if (v145 >= 1)
              bzero((void *)(v124 + 8 + 8 * *((int *)this + 22)), 8 * (((unint64_t)v145 >> 3) - ((unint64_t)v145 > 7)) + 8);
          }
          else
          {
            v124 = *((_QWORD *)this + 12);
          }
          *v6 = v123;
          v146 = v124 + 8;
          if (!v124)
            v146 = 0;
          v5 = v122;
          v7 = v121;
          v8 = v120;
          v9 = v149;
          if (!google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v146 + 8 * v112), v34))
          {
            if ((int)*v6 < 1)
              return 0;
            result = 0;
            *v6 = v112;
            return result;
          }
        }
        else if (v34 >= 8)
        {
          if (v113 <= 1)
            v116 = 1;
          else
            v116 = v34 >> 3;
          do
          {
            v150 = 0;
            v117 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
              if (!(_DWORD)result)
                return result;
              v118 = v150;
              v112 = *v6;
            }
            else
            {
              v118 = *v117;
              *(_QWORD *)a2 = v117 + 1;
            }
            if (v112 == *((_DWORD *)this + 23))
            {
              google::protobuf::RepeatedField<double>::Reserve(v6, v112 + 1);
              v112 = *v6;
            }
            v119 = *((_QWORD *)this + 12) + 8 * v112;
            *((_DWORD *)this + 22) = v112 + 1;
            *(_QWORD *)(v119 + 8) = v118;
            ++v112;
            --v116;
          }
          while (v116);
        }
        continue;
      case 8u:
        if (v14 == 65)
        {
          v38 = 66;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v5;
LABEL_67:
          if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(v38, v39, v40))return 0;
          continue;
        }
        if (v14 != 66)
        {
LABEL_9:
          if ((_DWORD)v14)
            v16 = (v14 & 7) == 4;
          else
            v16 = 1;
          if (v16)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0;
          continue;
        }
        v35 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
        {
          v36 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v36 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v36 = *v35;
          *(_QWORD *)a2 = v35 + 1;
        }
        if ((v36 & 7) != 0)
          return 0;
        v125 = *((_DWORD *)a2 + 12);
        if (v125 == 0x7FFFFFFF)
          v126 = -1;
        else
          v126 = v125 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v127 = *((_DWORD *)a2 + 10);
        if (v127 == 0x7FFFFFFF)
          v128 = -1;
        else
          v128 = v127 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v129 = *v5;
        v130 = v36 >> 3;
        if (v128 >= v126)
          v131 = v126;
        else
          v131 = v128;
        if (v126 == -1)
          v132 = v128;
        else
          v132 = v131;
        if (v132 < (uint64_t)v36)
        {
          if (v36 >= 8)
          {
            if (v130 <= 1)
              v133 = 1;
            else
              v133 = v36 >> 3;
            do
            {
              v150 = 0;
              v134 = *(unint64_t **)a2;
              if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
              {
                result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
                if (!(_DWORD)result)
                  return result;
                v135 = v150;
                v129 = *v5;
              }
              else
              {
                v135 = *v134;
                *(_QWORD *)a2 = v134 + 1;
              }
              if (v129 == *((_DWORD *)this + 29))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v129 + 1);
                v129 = *v5;
              }
              v136 = *((_QWORD *)this + 15) + 8 * v129;
              *((_DWORD *)this + 28) = v129 + 1;
              *(_QWORD *)(v136 + 8) = v135;
              ++v129;
              --v133;
            }
            while (v133);
          }
          continue;
        }
        v137 = v8;
        v138 = v7;
        v139 = v6;
        v140 = v129 + v130;
        if (v36 > 7)
        {
          v141 = v5;
          google::protobuf::RepeatedField<double>::Reserve(v5, v129 + v130);
          v142 = *((_QWORD *)this + 15);
          v147 = 8 * v140 - 8 * *((int *)this + 28);
          if (v147 >= 1)
            bzero((void *)(v142 + 8 + 8 * *((int *)this + 28)), 8 * (((unint64_t)v147 >> 3) - ((unint64_t)v147 > 7)) + 8);
        }
        else
        {
          v141 = v5;
          v142 = *((_QWORD *)this + 15);
        }
        *v141 = v140;
        v148 = v142 + 8;
        v16 = v142 == 0;
        v5 = v141;
        if (v16)
          v148 = 0;
        v6 = v139;
        v7 = v138;
        v8 = v137;
        v9 = v149;
        if (google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v148 + 8 * v129), v36))
          continue;
        if ((int)*v5 >= 1)
        {
          result = 0;
          *v5 = v129;
          return result;
        }
        return 0;
      default:
        if (v18 == 100)
        {
          if (v14 != 34)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 100)
          {
            v37 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 100;
            v37 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v37);
            *((_QWORD *)this + 19) = v37;
          }
          v47 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v47 < 0)
          {
            v48 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v48 < 0)
              return 0;
          }
          else
          {
            v48 = *v47;
            *(_QWORD *)a2 = v47 + 1;
          }
          v64 = google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
          v66 = *((_DWORD *)a2 + 13);
          v52 = __OFSUB__(v66--, 1);
          *((_DWORD *)a2 + 13) = v66;
          if (v66 < 0 != v52)
            return 0;
          v53 = v64;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v37, (char **)a2, v65);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v18 != 101 || v14 != 42)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 101)
          {
            v22 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 101;
            v22 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v22);
            *((_QWORD *)this + 19) = v22;
          }
          v41 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v41 < 0)
          {
            v42 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v42 < 0)
              return 0;
          }
          else
          {
            v42 = *v41;
            *(_QWORD *)a2 = v41 + 1;
          }
          v55 = google::protobuf::io::CodedInputStream::PushLimit(a2, v42);
          v57 = *((_DWORD *)a2 + 13);
          v52 = __OFSUB__(v57--, 1);
          *((_DWORD *)a2 + 13) = v57;
          if (v57 < 0 != v52)
            return 0;
          v53 = v55;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v22, a2, v56);
          if (!(_DWORD)result)
            return result;
        }
LABEL_122:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v53))
          return 0;
        continue;
    }
  }
}

void sub_1D3B352D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::ByteSizeLong(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CoreML::Specification::Kernel *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size(*((_DWORD *)this + 4), *((_QWORD *)this + 3));
  if (v2)
  {
    v3 = 11;
    v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v2 >= 0)
      v3 = v4;
    v5 = v2;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  v6 = *((unsigned int *)this + 12);
  v7 = v3 + v6 + v2;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 7);
    do
    {
      v10 = *(unsigned int **)(v9 + 8 * v8 + 8);
      v11 = v10[4];
      v12 = 8 * v11;
      if ((_DWORD)v11)
      {
        if ((v12 & 0x80000000) != 0)
          v13 = 11;
        else
          v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = v13 + v12;
      v10[8] = v12;
      v10[9] = v14;
      v7 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v15 = *((unsigned int *)this + 16);
  v16 = 8 * v15;
  v17 = 11;
  v18 = ((9 * (__clz((8 * v15) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 0x10000000) == 0)
    v17 = v18;
  v19 = v17 + v7;
  if ((_DWORD)v15)
    v7 = v19;
  *((_DWORD *)this + 20) = v16;
  v20 = v7 + v16;
  v21 = *((unsigned int *)this + 22);
  v22 = 8 * v21;
  v23 = 11;
  v24 = ((9 * (__clz((8 * v21) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x10000000) == 0)
    v23 = v24;
  v25 = v23 + v20;
  if ((_DWORD)v21)
    v20 = v25;
  *((_DWORD *)this + 26) = v22;
  v26 = v20 + v22;
  v27 = *((unsigned int *)this + 28);
  v28 = 8 * v27;
  v29 = 11;
  v30 = ((9 * (__clz((8 * v27) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x10000000) == 0)
    v29 = v30;
  v31 = v29 + v26;
  if ((_DWORD)v27)
    v26 = v31;
  *((_DWORD *)this + 32) = v28;
  v32 = v26 + v28;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v33 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
    if (v33)
    {
      v34 = CoreML::Specification::Kernel::ByteSizeLong(v33);
      v32 += v34 + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v35 = *((_DWORD *)this + 41);
  if (v35 == 4)
  {
    v36 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 18));
  }
  else
  {
    if (v35 != 3)
      goto LABEL_34;
    v36 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 18));
  }
  v32 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_34:
  v37 = *((_DWORD *)this + 42);
  if (v37 == 101)
  {
    v38 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 19));
    goto LABEL_38;
  }
  if (v37 == 100)
  {
    v38 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 19));
LABEL_38:
    v32 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 40) = v32;
  return v32;
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int j;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  char __src[5];

  v5 = this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v6 = this[17];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*((int *)v5 + 4) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 18;
      this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v7 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v7 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v7;
    }
    v8 = *((_DWORD *)v5 + 8);
    if (v7 < 5)
    {
      this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v8);
    }
    else
    {
      v9 = *((_QWORD *)a2 + 1);
      if (v8 < 0x80)
      {
        v11 = *((_DWORD *)v5 + 8);
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v10++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      *v10 = v11;
      v13 = (_DWORD)v10 - v9 + 1;
      *((_QWORD *)a2 + 1) += v13;
      *((_DWORD *)a2 + 4) -= v13;
    }
    v14 = *((unsigned int *)v5 + 4);
    if ((int)v14 >= 1)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(int *)(v5[3] + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v16);
        }
        else
        {
          v17 = *((_QWORD *)a2 + 1);
          if (v16 < 0x80)
          {
            LODWORD(v19) = *(_DWORD *)(v5[3] + 4 * i + 8);
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v18++ = v16 | 0x80;
              v19 = v16 >> 7;
              v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *v18 = v19;
          v21 = (_DWORD)v18 - v17 + 1;
          *((_QWORD *)a2 + 1) += v21;
          *((_DWORD *)a2 + 4) -= v21;
        }
      }
    }
  }
  v22 = *((_DWORD *)v5 + 41);
  if (v22 == 3)
  {
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v5[18], a2, a4);
    v22 = *((_DWORD *)v5 + 41);
  }
  if (v22 == 4)
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v5[18], a2, a4);
  v23 = *((_DWORD *)v5 + 12);
  if (v23)
  {
    for (j = 0; j != v23; ++j)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5[7] + 8 * j + 8), a2, a4);
  }
  if (*((int *)v5 + 16) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 50;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v25 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 50;
      v25 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v25;
    }
    v26 = *((_DWORD *)v5 + 20);
    if (v25 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v26);
    }
    else
    {
      v27 = *((_QWORD *)a2 + 1);
      if (v26 < 0x80)
      {
        v29 = *((_DWORD *)v5 + 20);
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v28++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
      }
      *v28 = v29;
      v31 = (_DWORD)v28 - v27 + 1;
      *((_QWORD *)a2 + 1) += v31;
      *((_DWORD *)a2 + 4) -= v31;
    }
    v32 = v5[9];
    if (v32)
      v33 = (char *)(v32 + 8);
    else
      v33 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v33, 8 * *((_DWORD *)v5 + 16));
  }
  if (*((int *)v5 + 22) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 58;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v34 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 58;
      v34 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v34;
    }
    v35 = *((_DWORD *)v5 + 26);
    if (v34 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v35);
    }
    else
    {
      v36 = *((_QWORD *)a2 + 1);
      if (v35 < 0x80)
      {
        v38 = *((_DWORD *)v5 + 26);
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v37++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
      }
      *v37 = v38;
      v40 = (_DWORD)v37 - v36 + 1;
      *((_QWORD *)a2 + 1) += v40;
      *((_DWORD *)a2 + 4) -= v40;
    }
    v41 = v5[12];
    if (v41)
      v42 = (char *)(v41 + 8);
    else
      v42 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v42, 8 * *((_DWORD *)v5 + 22));
  }
  if (*((int *)v5 + 28) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 66;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v43 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 66;
      v43 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v43;
    }
    v44 = *((_DWORD *)v5 + 32);
    if (v43 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v44);
    }
    else
    {
      v45 = *((_QWORD *)a2 + 1);
      if (v44 < 0x80)
      {
        v47 = *((_DWORD *)v5 + 32);
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v46++ = v44 | 0x80;
          v47 = v44 >> 7;
          v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
      }
      *v46 = v47;
      v49 = (_DWORD)v46 - v45 + 1;
      *((_QWORD *)a2 + 1) += v49;
      *((_DWORD *)a2 + 4) -= v49;
    }
    v50 = v5[15];
    if (v50)
      v51 = (char *)(v50 + 8);
    else
      v51 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v51, 8 * *((_DWORD *)v5 + 28));
  }
  v52 = *((_DWORD *)v5 + 42);
  if (v52 == 100)
  {
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v5[19], a2, a4);
    v52 = *((_DWORD *)v5 + 42);
  }
  if (v52 == 101)
    return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x65, v5[19], a2, a4);
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::GetCachedSize(CoreML::Specification::SupportVectorClassifier *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t CoreML::Specification::Kernel::ByteSizeLong(CoreML::Specification::Kernel *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
      result = 2;
      break;
    case 2:
      v3 = *((_QWORD *)this + 2);
      v4 = 9;
      if (*(double *)(v3 + 16) == 0.0)
        v4 = 0;
      *(_DWORD *)(v3 + 24) = v4;
      result = v4 | 2;
      break;
    case 3:
      v5 = CoreML::Specification::PolyKernel::ByteSizeLong(*((CoreML::Specification::PolyKernel **)this + 2));
      v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      v7 = *((_QWORD *)this + 2);
      v8 = 9;
      if (*(double *)(v7 + 16) == 0.0)
        v8 = 0;
      if (*(double *)(v7 + 24) != 0.0)
        v8 += 9;
      *(_DWORD *)(v7 + 32) = v8;
      v6 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      result = v6 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::SparseSupportVectors::ByteSizeLong(CoreML::Specification::SparseSupportVectors *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseVector::ByteSizeLong(*(CoreML::Specification::SparseVector **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::DenseSupportVectors::ByteSizeLong(CoreML::Specification::DenseSupportVectors *this)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SparseVector::ByteSizeLong(CoreML::Specification::SparseVector *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseNode::ByteSizeLong(*(CoreML::Specification::SparseNode **)(*((_QWORD *)this + 4)
                                                                                                 + 8 * v3
                                                                                                 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SparseNode::ByteSizeLong(CoreML::Specification::SparseNode *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  v2 = *((_DWORD *)this + 6);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CoreML::Specification::PolyKernel::ByteSizeLong(CoreML::Specification::PolyKernel *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  v2 = *((_DWORD *)this + 8);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 9) = v1;
  return v1;
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::Kernel(CoreML::Specification::Kernel *this)
{
  *(_QWORD *)this = &off_1E9564AD8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B35EB0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::MergePartialFromCodedStream(CoreML::Specification::Kernel *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::LinearKernel *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  CoreML::Specification::RBFKernel *v12;
  CoreML::Specification::PolyKernel *v13;
  CoreML::Specification::SigmoidKernel *v14;
  BOOL v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  CoreML::Specification::LinearKernel *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t result;
  google::protobuf::io::CodedInputStream *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_23:
      if ((_DWORD)v7)
        v15 = (v7 & 7) == 4;
      else
        v15 = 1;
      if (v15)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_58;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::LinearKernel *)operator new();
          CoreML::Specification::LinearKernel::LinearKernel(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v22 = (CoreML::Specification::LinearKernel *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25)
          goto LABEL_58;
        v26 = (int)v22;
        result = CoreML::Specification::LinearKernel::MergePartialFromCodedStream(v22, (char **)a2, v23);
        if (!(_DWORD)result)
          return result;
        v28 = a2;
        v29 = v26;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = (CoreML::Specification::RBFKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (CoreML::Specification::RBFKernel *)operator new();
          CoreML::Specification::RBFKernel::RBFKernel(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
        v32 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v25)
          goto LABEL_58;
        v33 = v30;
        result = CoreML::Specification::RBFKernel::MergePartialFromCodedStream(v12, (char **)a2, v31);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 3u:
        if (v7 != 26)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 3)
        {
          v13 = (CoreML::Specification::PolyKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v13 = (CoreML::Specification::PolyKernel *)operator new();
          CoreML::Specification::PolyKernel::PolyKernel(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        v36 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v25)
          goto LABEL_58;
        v33 = v34;
        result = CoreML::Specification::PolyKernel::MergePartialFromCodedStream(v13, (char **)a2, v35);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 4u:
        if (v7 != 34)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 4)
        {
          v14 = (CoreML::Specification::SigmoidKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v14 = (CoreML::Specification::SigmoidKernel *)operator new();
          CoreML::Specification::SigmoidKernel::SigmoidKernel(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v39 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v25)
          goto LABEL_58;
        v33 = v37;
        result = CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(v14, (char **)a2, v38);
        if (!(_DWORD)result)
          return result;
LABEL_56:
        v28 = a2;
        v29 = v33;
LABEL_57:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v28, v29))
          continue;
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_1D3B36294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_supportVectors(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 164);
  if (v2 == 4 || v2 == 3)
  {
    this = *(_QWORD *)(this + 144);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 164) = 0;
  return this;
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(_QWORD *)this = &off_1E955FBE0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B3639C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::SparseSupportVectors *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::SparseVector *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::SparseSupportVectors *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::SparseVector **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::SparseVector::SparseVector(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::SparseVector *)operator new();
        CoreML::Specification::SparseVector::SparseVector(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::SparseVector::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B365FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(_QWORD *)this = &off_1E955EDA0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B36680(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::DenseSupportVectors *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::DenseVector *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::DenseSupportVectors *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::DenseVector **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::DenseVector::DenseVector(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::DenseVector *)operator new();
        CoreML::Specification::DenseVector::DenseVector(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::DenseVector::MergePartialFromCodedStream(Aligned, (char **)a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B368E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::Coefficients::MergePartialFromCodedStream(CoreML::Specification::Coefficients *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 168);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 152);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 168) = 0;
  return this;
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::Coefficients(CoreML::Specification::Coefficients *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E955A498;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Coefficients *)&CoreML::Specification::_Coefficients_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B36C9C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL CoreML::Specification::DenseVector::MergePartialFromCodedStream(CoreML::Specification::DenseVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::DenseVector(CoreML::Specification::DenseVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E9559FD8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::DenseVector *)&CoreML::Specification::_DenseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1D3B37020(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL CoreML::Specification::SparseVector::MergePartialFromCodedStream(CoreML::Specification::SparseVector *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::SparseNode *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::SparseVector *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::SparseNode **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::SparseNode::SparseNode(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::SparseNode *)operator new();
        CoreML::Specification::SparseNode::SparseNode(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::SparseNode::MergePartialFromCodedStream(Aligned, (char **)a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_1D3B37294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8251A40](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SparseNode::MergePartialFromCodedStream(CoreML::Specification::SparseNode *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v17;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v17 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17);
          if (!result)
            return result;
          v13 = v17;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 2) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1])
      {
        v11 = 0;
      }
      else
      {
        v11 = *v10;
        if ((*v10 & 0x80000000) == 0)
        {
          *a2 = v10 + 1;
          goto LABEL_28;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v11);
      v11 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_28:
      *((_DWORD *)this + 6) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    if (v14)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::SparseNode(CoreML::Specification::SparseNode *this)
{
  *(_QWORD *)this = &off_1E9559EA8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SparseNode *)&CoreML::Specification::_SparseNode_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1D3B37454(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::SparseVector(CoreML::Specification::SparseVector *this)
{
  *(_QWORD *)this = &off_1E955AEB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseVector *)&CoreML::Specification::_SparseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1D3B374D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::Kernel::clear_kernel(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(_QWORD *)this = &off_1E9566298;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::RBFKernel *)&CoreML::Specification::_RBFKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1D3B375AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::RBFKernel::MergePartialFromCodedStream(CoreML::Specification::RBFKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  _BOOL8 result;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 9 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v14 = 0;
      v12 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v14);
        if (!result)
          return result;
        v13 = v14;
      }
      else
      {
        v13 = *v12;
        *a2 = (char *)(v12 + 1);
      }
      *((_QWORD *)this + 2) = v13;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    result = v10;
    if (v10)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(_QWORD *)this = &off_1E9559E10;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1D3B37708(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::PolyKernel::MergePartialFromCodedStream(CoreML::Specification::PolyKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  char *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v20;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = *a2;
          if (*a2 >= a2[1])
          {
            LODWORD(v6) = 0;
LABEL_6:
            TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
            v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0)
              goto LABEL_25;
            goto LABEL_7;
          }
          v6 = *v5;
          if (*v5 < 1)
            goto LABEL_6;
          *a2 = v5 + 1;
          v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0)
            goto LABEL_25;
LABEL_7:
          v9 = v7 >> 3;
          if (v7 >> 3 != 3)
            break;
          if (v7 != 25)
            goto LABEL_25;
          v20 = 0;
          v13 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
            if (!result)
              return result;
            v14 = v20;
          }
          else
          {
            v14 = *v13;
            *a2 = (char *)(v13 + 1);
          }
          *((_QWORD *)this + 3) = v14;
        }
        if (v9 != 2)
          break;
        if (v7 != 17)
          goto LABEL_25;
        v20 = 0;
        v15 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
          if (!result)
            return result;
          v16 = v20;
        }
        else
        {
          v16 = *v15;
          *a2 = (char *)(v15 + 1);
        }
        *((_QWORD *)this + 2) = v16;
      }
      if (v9 != 1 || v7 != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_33;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_33:
      *((_DWORD *)this + 8) = v12;
    }
LABEL_25:
    if ((_DWORD)v7)
      v17 = (v7 & 7) == 4;
    else
      v17 = 1;
    if (v17)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(_QWORD *)this = &off_1E955B538;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1D3B37910(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(CoreML::Specification::SigmoidKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v13 = v16;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 3) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 9)
        break;
      v16 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
        if (!result)
          return result;
        v11 = v16;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    result = v14;
    if (v14)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::SupportVectorClassifier::MergeFrom(std::string *this, const CoreML::Specification::SupportVectorClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  google::protobuf::Arena **v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v15;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v16;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  CoreML::Specification::Coefficients **v21;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v22;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v23;
  CoreML::Specification::Coefficients *Aligned;
  google::protobuf::Arena **v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  const CoreML::Specification::Kernel *v33;
  CoreML::Specification::Kernel *v34;
  const CoreML::Specification::Kernel *v35;
  int v36;
  CoreML::Specification::SparseSupportVectors *v37;
  CoreML::Specification::DenseSupportVectors *v38;
  CoreML::Specification::SparseSupportVectors *v39;
  const CoreML::Specification::SparseSupportVectors *v40;
  CoreML::Specification::DenseSupportVectors *v41;
  const CoreML::Specification::DenseSupportVectors *v42;
  int v43;
  CoreML::Specification::StringVector *v44;
  CoreML::Specification::Int64Vector *v45;
  CoreML::Specification::StringVector *v46;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v47;
  CoreML::Specification::Int64Vector *v48;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v49;
  uint64_t v50;
  uint64_t v51;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), *(_DWORD *)(v3 + 16) + v5);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 24) + 4 * *(int *)(v3 + 16) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 12);
  if (v6)
  {
    v7 = (google::protobuf::Arena **)(v3 + 40);
    v51 = *((_QWORD *)a2 + 7);
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), v6);
    v8 = this;
    v9 = **(int **)(v3 + 56);
    v50 = v3;
    v10 = *(int *)(v3 + 48);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v6)
      v12 = v6;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v51 + 8);
      v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)this;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        this = (std::string *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v6)
    {
      v18 = *v7;
      v19 = v10 + v6 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (CoreML::Specification::Coefficients **)((char *)v8 + v20);
      v22 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v20 + v51 + 8);
      do
      {
        v23 = *v22;
        if (v18)
        {
          CoreML::Specification::Coefficients::Coefficients(Aligned);
          v25 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
          *v25 = Aligned;
          v25[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>;
          v26 = (unint64_t *)((char *)v18 + 32);
          do
            v27 = __ldxr(v26);
          while (__stxr((unint64_t)v25, v26));
          v25[2] = (google::protobuf::Arena *)v27;
        }
        else
        {
          Aligned = (CoreML::Specification::Coefficients *)operator new();
          CoreML::Specification::Coefficients::Coefficients(Aligned);
        }
        this = (std::string *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v23, Aligned);
        *v21++ = Aligned;
        ++v22;
        --v19;
      }
      while (v19);
    }
    v3 = v50;
    v28 = *(_DWORD *)(v50 + 48) + v6;
    *(_DWORD *)(v50 + 48) = v28;
    v29 = *(int **)(v50 + 56);
    if (*v29 < v28)
      *v29 = v28;
  }
  v30 = *((_DWORD *)a2 + 16);
  if (v30)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 64), *(_DWORD *)(v3 + 64) + v30);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 72) + 8 * *(int *)(v3 + 64) + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
  }
  v31 = *((_DWORD *)a2 + 22);
  if (v31)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 88), *(_DWORD *)(v3 + 88) + v31);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 96) + 8 * *(int *)(v3 + 88) + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    *(_DWORD *)(v3 + 88) += *((_DWORD *)a2 + 22);
  }
  v32 = *((_DWORD *)a2 + 28);
  if (v32)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 112), *(_DWORD *)(v3 + 112) + v32);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 120) + 8 * *(int *)(v3 + 112) + 8), (const void *)(*((_QWORD *)a2 + 15) + 8), 8 * *((int *)a2 + 28));
    *(_DWORD *)(v3 + 112) += *((_DWORD *)a2 + 28);
  }
  if (a2 != (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v33 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
    if (v33)
    {
      v34 = *(CoreML::Specification::Kernel **)(v3 + 136);
      if (!v34)
      {
        v34 = (CoreML::Specification::Kernel *)operator new();
        CoreML::Specification::Kernel::Kernel(v34);
        *(_QWORD *)(v3 + 136) = v34;
        v33 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
      }
      if (v33)
        v35 = v33;
      else
        v35 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_;
      this = CoreML::Specification::Kernel::MergeFrom((std::string *)v34, v35);
    }
  }
  v36 = *((_DWORD *)a2 + 41);
  if (v36 != 4)
  {
    if (v36 != 3)
      goto LABEL_50;
    if (*(_DWORD *)(v3 + 164) == 3)
    {
      v37 = *(CoreML::Specification::SparseSupportVectors **)(v3 + 144);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 164) = 3;
      v37 = (CoreML::Specification::SparseSupportVectors *)operator new();
      v39 = CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v37);
      *(_QWORD *)(v3 + 144) = v37;
      if (*((_DWORD *)a2 + 41) != 3)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v39);
        v40 = (const CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_;
        goto LABEL_47;
      }
    }
    v40 = (const CoreML::Specification::SparseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_47:
    this = (std::string *)CoreML::Specification::SparseSupportVectors::MergeFrom((uint64_t *)v37, v40);
    goto LABEL_50;
  }
  if (*(_DWORD *)(v3 + 164) == 4)
  {
    v38 = *(CoreML::Specification::DenseSupportVectors **)(v3 + 144);
  }
  else
  {
    CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
    *(_DWORD *)(v3 + 164) = 4;
    v38 = (CoreML::Specification::DenseSupportVectors *)operator new();
    v41 = CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v38);
    *(_QWORD *)(v3 + 144) = v38;
    if (*((_DWORD *)a2 + 41) != 4)
    {
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v41);
      v42 = (const CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_;
      goto LABEL_49;
    }
  }
  v42 = (const CoreML::Specification::DenseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_49:
  this = (std::string *)CoreML::Specification::DenseSupportVectors::MergeFrom((uint64_t *)v38, v42);
LABEL_50:
  v43 = *((_DWORD *)a2 + 42);
  if (v43 == 101)
  {
    if (*(_DWORD *)(v3 + 168) == 101)
    {
      v45 = *(CoreML::Specification::Int64Vector **)(v3 + 152);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 101;
      v45 = (CoreML::Specification::Int64Vector *)operator new();
      v48 = CoreML::Specification::Int64Vector::Int64Vector(v45);
      *(_QWORD *)(v3 + 152) = v45;
      if (*((_DWORD *)a2 + 42) != 101)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v48);
        v49 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v45, v49);
      }
    }
    v49 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 19);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v45, v49);
  }
  if (v43 == 100)
  {
    if (*(_DWORD *)(v3 + 168) == 100)
    {
      v44 = *(CoreML::Specification::StringVector **)(v3 + 152);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 100;
      v44 = (CoreML::Specification::StringVector *)operator new();
      v46 = CoreML::Specification::StringVector::StringVector(v44);
      *(_QWORD *)(v3 + 152) = v44;
      if (*((_DWORD *)a2 + 42) != 100)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v46);
        v47 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v44, v47);
      }
    }
    v47 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 19);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v44, v47);
  }
  return this;
}

