void sub_2098BCED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a6);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner((uint64_t *)va);
  if (*(char *)(v6 - 137) < 0)
    operator delete(*(void **)(v6 - 160));
  v8 = *(void **)(v6 - 136);
  if (v8)
  {
    *(_QWORD *)(v6 - 128) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v6 - 112);
  if (v9)
  {
    *(_QWORD *)(v6 - 104) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align<std::__wrap_iter<TWord const**>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unsigned __int16 v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  BOOL v69;
  unint64_t v70;
  char v71;
  int v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;

  v6 = a4;
  v7 = a2;
  v9 = ((a3 - (uint64_t)a2) >> 3) + 1;
  v10 = ((a5 - (uint64_t)a4) >> 3) + 1;
  if (v10 >= v9)
  {
    v77 = 73;
    v11 = 68;
    v12 = ((a3 - (uint64_t)a2) >> 3) + 1;
    v13 = ((a5 - (uint64_t)a4) >> 3) + 1;
  }
  else
  {
    v77 = 68;
    v11 = 73;
    v7 = a4;
    v6 = a2;
    v12 = ((a5 - (uint64_t)a4) >> 3) + 1;
    v13 = ((a3 - (uint64_t)a2) >> 3) + 1;
  }
  v75 = v11;
  v14 = a1[13];
  v15 = a1 + 13;
  v79 = v13;
  v16 = v13 * v12;
  v17 = a1[14] - v14;
  if (v16 <= v17)
  {
    if (v16 < v17)
      a1[14] = v14 + v16;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 13), v16 - v17);
  }
  v18 = a1 + 7;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 7), 3 * v12);
  v19 = v12;
  v20 = a1 + 10;
  std::vector<unsigned short>::resize((uint64_t)(a1 + 10), 2 * v19);
  v21 = (_QWORD *)a1[7];
  v21[2 * v19] = 0;
  *v21 = 0;
  *(_WORD *)a1[10] = 0;
  *(_BYTE *)a1[13] = 0;
  v78 = v19;
  if (v19 >= 2)
  {
    v22 = 0;
    v23 = 3;
    if (v10 < v9)
      v23 = 5;
    do
    {
      v24 = a1[v23];
      v25 = (_QWORD *)(a1[7] + 8 * v22);
      *(_QWORD *)((char *)v25 + ((16 * v19) | 8)) = v24;
      v25[1] = *v25 + v24;
      *(_WORD *)(a1[10] + 2 * v22 + 2) = 0;
      *(_BYTE *)(a1[13] + v22++ + 1) = v75;
    }
    while (v19 - 1 != v22);
  }
  v26 = v19;
  if (v79 >= 2)
  {
    v27 = 0;
    v28 = 0;
    v29 = 40;
    if (v10 < v9)
      v29 = 24;
    v76 = v29;
    v30 = v19 + 1;
    v31 = 1;
    v32 = v19;
    v33 = (16 * v19) | 8;
    while (1)
    {
      v34 = *(uint64_t *)((char *)a1 + v76);
      v81 = v32;
      v82 = v28;
      *(_QWORD *)(a1[7] + 8 * v32) = *(_QWORD *)(a1[7] + 8 * v28) + v34;
      *(_WORD *)(a1[10] + 2 * v32) = 0;
      v80 = v31;
      *(_BYTE *)(a1[13] + v31 * v19) = v77;
      if (v19 >= 2)
        break;
LABEL_49:
      v28 = v81;
      v31 = v80 + 1;
      ++v6;
      v19 = v78;
      v30 += v78;
      v27 += v78;
      v32 = v82;
      v26 = v82;
      if (v80 + 1 == v79)
        goto LABEL_50;
    }
    v35 = 0;
    v36 = v32 - 1;
    v37 = 2 * v28;
    v38 = 8 * v28;
    v39 = v28 + 1;
    v40 = 2 * v32 + 2;
    v41 = 8 * v32 + 8;
    v42 = 1;
    while (1)
    {
      if (v10 >= v9)
      {
        v43 = v7[v35];
        v44 = *v6;
      }
      else
      {
        v43 = *v6;
        v44 = v7[v35];
      }
      if (v43 == v44)
      {
        v46 = 0;
        v47 = *(_QWORD *)(*v18 + v38 + 8 * v35);
        if (*(_BYTE *)(*v15 + v27 + v35) == 67)
          v48 = *(_WORD *)(*v20 + v37 + 2 * v35);
        else
          v48 = *(_WORD *)(*v20 + v37 + 2 * v35) + 1;
        v49 = 67;
      }
      else
      {
        v45 = a1[1];
        if (v45 == -1)
        {
          v49 = 0;
          v47 = 0;
          v48 = 0;
          v46 = 1;
        }
        else
        {
          v46 = 0;
          v47 = *(_QWORD *)(*v18 + v38 + 8 * v35) + v45;
          v48 = *(_WORD *)(*v20 + v37 + 2 * v35);
          v49 = 83;
        }
      }
      v50 = *v18;
      if (v10 >= v9)
      {
        v51 = v39 + v35;
        v52 = v34;
      }
      else
      {
        v51 = v36 + v42;
        v52 = *(_QWORD *)(v50 + v33 + 8 * v35);
      }
      v53 = *(_QWORD *)(v50 + 8 * v51) + v52;
      if (v53 < v47)
        v54 = 1;
      else
        v54 = v46;
      if (v54 == 1)
      {
        LOWORD(v51) = *(_WORD *)(*v20 + 2 * v51);
      }
      else
      {
        if (v53 != v47)
          goto LABEL_40;
        LODWORD(v51) = *(unsigned __int16 *)(*v20 + 2 * v51);
        if (v51 >= v48)
          goto LABEL_40;
      }
      v49 = 73;
      v47 = v53;
      v48 = v51;
LABEL_40:
      if (v10 >= v9)
      {
        v55 = v36 + v42;
        v56 = *(_QWORD *)(v50 + v33 + 8 * v35);
      }
      else
      {
        v55 = v39 + v35;
        v56 = v34;
      }
      v57 = *(_QWORD *)(v50 + 8 * v55) + v56;
      if (v57 >= v47)
      {
        v58 = *v20;
        if (v57 != v47)
          goto LABEL_48;
        LODWORD(v55) = *(unsigned __int16 *)(v58 + 2 * v55);
        if (v55 >= v48)
          goto LABEL_48;
      }
      else
      {
        v58 = *v20;
        LOWORD(v55) = *(_WORD *)(*v20 + 2 * v55);
      }
      v49 = 68;
      v47 = v57;
      v48 = v55;
LABEL_48:
      *(_QWORD *)(v50 + v41 + 8 * v35) = v47;
      *(_WORD *)(v58 + v40 + 2 * v35) = v48;
      *(_BYTE *)(*v15 + v30 + v35) = v49;
      ++v42;
      if (v78 - 1 == ++v35)
        goto LABEL_49;
    }
  }
LABEL_50:
  MEMORY[0x20BD14750](a6, &byte_209A88803);
  std::string::reserve((std::string *)a6, v79 + v19);
  v59 = a1[13];
  v60 = ~v59 + a1[14];
  v61 = 0;
  while (v60)
  {
    std::string::push_back((std::string *)a6, *(_BYTE *)(v59 + v60));
    v59 = *v15;
    v62 = *(unsigned __int8 *)(*v15 + v60);
    if (v62 != 67)
      ++v61;
    v63 = v60 + ~v19;
    if (v62 == v75)
      v63 = v60 - 1;
    if (v62 == v77)
      v60 -= v19;
    else
      v60 = v63;
  }
  v64 = *(char *)(a6 + 23);
  v65 = v64 < 0;
  if (v64 >= 0)
    v66 = a6;
  else
    v66 = *(_QWORD *)a6;
  if (v65)
    v67 = *(_QWORD *)(a6 + 8);
  else
    v67 = *(unsigned __int8 *)(a6 + 23);
  v68 = (_BYTE *)(v66 + v67 - 1);
  if (v67)
    v69 = (unint64_t)v68 > v66;
  else
    v69 = 0;
  if (v69)
  {
    v70 = v66 + 1;
    do
    {
      v71 = *(_BYTE *)(v70 - 1);
      *(_BYTE *)(v70 - 1) = *v68;
      *v68-- = v71;
    }
    while (v70++ < (unint64_t)v68);
  }
  return *(_QWORD *)(*v18 + 8 * (v19 + v26) - 8);
}

BOOL TResultManager::replace(char **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v13;
  char *v14;
  unint64_t j;
  uint64_t v17;
  char *v18;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  int64_t v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  char *v112;
  int v113;
  int v114;
  int v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  size_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  size_t *v150;
  char *v151;
  size_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  size_t v159;
  char *v160;
  size_t *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  char *v171;
  size_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  size_t *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  size_t *v187;
  char *v188;
  size_t v189;
  uint64_t v190;
  _BYTE *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t ActiveConfigHandle;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int ****v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  void **v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t **v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  uint64_t *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  _BYTE *v274;
  int v275;
  uint64_t v276;
  char **v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  char *v285;
  unint64_t v286;
  char v287;
  size_t v289;
  void *v290[2];
  char v291;
  void *__p;
  char *v293;
  char *v294;
  void *v295;
  _BYTE *v296;
  uint64_t v297;
  void *v298[2];
  uint64_t v299;
  uint64_t *v300[28];
  void *v301;
  void *v302;
  uint64_t v303;
  uint64_t *v304[28];
  _BYTE *v305;
  __int128 v306;
  _BYTE v307[17];
  char v308;
  _BYTE *v309;
  __int128 v310;
  _BYTE v311[17];
  char v312;
  char *v313;
  __int128 v314;
  _BYTE v315[17];
  char v316;
  const char *v317;
  __int128 v318;
  _BYTE v319[256];
  char v320;
  uint64_t v321;

  v321 = *MEMORY[0x24BDAC8D0];
  v317 = v319;
  v318 = xmmword_209A57DD0;
  v320 = 1;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v13 = 0;
      v14 = *(char **)(*(_QWORD *)&a1[5][8 * *(_QWORD *)(a2 + 8 * i) - 8] + 16);
      while (v14[v13++])
        ;
      TBuffer<char>::insert((uint64_t)&v317, *((unint64_t *)&v318 + 1), v14, v13 - 1);
    }
  }
  v313 = v315;
  v314 = xmmword_209A57DD0;
  v316 = 1;
  for (j = a5 + a4; j < a3; ++j)
  {
    v17 = 0;
    v18 = *(char **)(*(_QWORD *)&a1[5][8 * *(_QWORD *)(a2 + 8 * j) - 8] + 16);
    while (v18[v17++])
      ;
    TBuffer<char>::insert((uint64_t)&v313, *((unint64_t *)&v314 + 1), v18, v17 - 1);
  }
  if (*((_QWORD *)&v318 + 1) >= (unint64_t)v318)
  {
    if (v320)
    {
      LOBYTE(v309) = 0;
      TBuffer<char>::insert((uint64_t)&v317, *((unint64_t *)&v318 + 1), (char *)&v309, 1uLL);
      --*((_QWORD *)&v318 + 1);
    }
    else if ((_QWORD)v318)
    {
      v317[v318 - 1] = 0;
    }
  }
  else
  {
    v317[*((_QWORD *)&v318 + 1)] = 0;
  }
  v20 = v317;
  if (*((_QWORD *)&v314 + 1) >= (unint64_t)v314)
  {
    if (v316)
    {
      LOBYTE(v309) = 0;
      TBuffer<char>::insert((uint64_t)&v313, *((unint64_t *)&v314 + 1), (char *)&v309, 1uLL);
      --*((_QWORD *)&v314 + 1);
    }
    else if ((_QWORD)v314)
    {
      v313[(_QWORD)v314 - 1] = 0;
    }
  }
  else
  {
    v313[*((_QWORD *)&v314 + 1)] = 0;
  }
  v21 = TTokenizer::tokenize((uint64_t)a1[4], a6, v20, v313, *(_QWORD *)(*((_QWORD *)a1[4] + 3) + 29784), 0);
  TFsa::TFsa((TFsa *)v304);
  v301 = 0;
  v302 = 0;
  v303 = 0;
  tokenizerResultToFsa(v21, 0, (uint64_t)a1[3], a1[4], (TAllocator *)v304, &v301);
  TTokenizer::release((uint64_t)a1[4], v21);
  TFsa::TFsa((TFsa *)v300);
  v22 = TFsa::newState((TAllocator *)v300, 0);
  TFsa::addExtremity((uint64_t)v300, (uint64_t)v22, 0);
  TFsa::addExtremity((uint64_t)v300, (uint64_t)v22, 1u);
  if (a5)
  {
    v23 = (_QWORD *)(a2 + 8 * a4);
    v24 = a5;
    do
    {
      v25 = *(_QWORD *)&a1[5][8 * *v23 - 8];
      wordsToFsa(*(_QWORD *)(v25 + 32), *(_QWORD *)(v25 + 40), (uint64_t)a1[3], v300);
      ++v23;
      --v24;
    }
    while (v24);
  }
  v298[0] = 0;
  v298[1] = 0;
  v299 = 0;
  v295 = 0;
  v296 = 0;
  v297 = 0;
  alignFsa((TAllocator *)v300, v304, (unint64_t)v298, &v295);
  v26 = TResultManager::merge(a1, (_QWORD *)(a2 + 8 * a4), a5);
  v27 = v26;
  v28 = a1[5];
  v278 = a1 + 5;
  if (v26 - 1 >= (unint64_t)((a1[6] - v28) >> 3))
  {
    v29 = 0;
  }
  else
  {
    v29 = *(_QWORD **)&v28[8 * v26 - 8];
    if (v29)
    {
      v287 = 0;
      v30 = (char *)v29[2];
      goto LABEL_31;
    }
  }
  v30 = &byte_209A88803;
  v287 = 1;
LABEL_31:
  v31 = *a6;
  if (*a6)
  {
    v32 = 0;
    while (v31 == v30[v32])
    {
      v33 = v32 + 1;
      v31 = a6[++v32];
      if (!v31)
        goto LABEL_38;
    }
    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
LABEL_38:
  v294 = 0;
  v34 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, 1uLL);
  *v34 = 0;
  v36 = v34 + 1;
  __p = v34;
  v294 = (char *)&v34[v35];
  v293 = (char *)(v34 + 1);
  v283 = v30;
  v279 = v27;
  if ((v287 & 1) == 0)
  {
    v37 = v29[13];
    if (v29[14] != v37)
    {
      v38 = 0;
      while (1)
      {
        v39 = *(_QWORD *)(v37 + 8 * v38) + *(v36 - 1);
        if (v39 > v33)
          break;
        if (v36 >= (unint64_t *)v294)
        {
          v41 = (unint64_t *)__p;
          v42 = ((char *)v36 - (_BYTE *)__p) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v44 = v294 - (_BYTE *)__p;
          if ((v294 - (_BYTE *)__p) >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v45);
            v41 = (unint64_t *)__p;
            v36 = (unint64_t *)v293;
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = v39;
          v40 = v47 + 8;
          while (v36 != v41)
          {
            v48 = *--v36;
            *((_QWORD *)v47 - 1) = v48;
            v47 -= 8;
          }
          __p = v47;
          v293 = v40;
          v294 = &v46[8 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v36 = v39;
          v40 = (char *)(v36 + 1);
        }
        v293 = v40;
        v38 += 2;
        v37 = v29[13];
        v36 = (unint64_t *)v40;
        if (v38 >= (v29[14] - v37) >> 3)
          goto LABEL_61;
      }
    }
  }
  v40 = (char *)v36;
LABEL_61:
  v49 = (char *)__p;
  v50 = (v40 - (_BYTE *)__p) >> 3;
  v289 = strlen(a6);
  v281 = v50;
  if (v40 >= v294)
  {
    v52 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v53 = v294 - (_BYTE *)__p;
    if ((v294 - (_BYTE *)__p) >> 2 > v52)
      v52 = v53 >> 2;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
      v54 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v54);
      v56 = (char *)__p;
      v57 = v293;
    }
    else
    {
      v55 = 0;
      v56 = (char *)__p;
      v57 = v40;
    }
    v58 = &v55[8 * v50];
    v59 = &v55[8 * v54];
    *(_QWORD *)v58 = 0;
    v51 = (unint64_t *)(v58 + 8);
    while (v57 != v56)
    {
      v60 = *((_QWORD *)v57 - 1);
      v57 -= 8;
      *((_QWORD *)v58 - 1) = v60;
      v58 -= 8;
    }
    __p = v58;
    v293 = (char *)v51;
    v294 = v59;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v40 = 0;
    v51 = (unint64_t *)(v40 + 8);
  }
  v285 = v49;
  v293 = (char *)v51;
  v61 = v295;
  if (v296 != v295)
  {
    v62 = 0;
    do
    {
      v63 = *(_QWORD *)(v61[v62] + 8);
      v64 = (char *)v301;
      v65 = (unint64_t *)((char *)v301 + 16 * v63);
      v66 = *v65;
      if (*v65 != 0xFFFFFFFF)
      {
        if (v66 > v33)
          break;
        if (v51 >= (unint64_t *)v294)
        {
          v68 = (unint64_t *)__p;
          v69 = ((char *)v51 - (_BYTE *)__p) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
            goto LABEL_396;
          v71 = v294 - (_BYTE *)__p;
          if ((v294 - (_BYTE *)__p) >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v72);
            v68 = (unint64_t *)__p;
            v51 = (unint64_t *)v293;
            v66 = *v65;
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[8 * v69];
          *(_QWORD *)v74 = v66;
          v67 = v74 + 8;
          while (v51 != v68)
          {
            v75 = *--v51;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          __p = v74;
          v293 = v67;
          v294 = &v73[8 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *v51 = v66;
          v67 = (char *)(v51 + 1);
        }
        v293 = v67;
        v64 = (char *)v301;
        v51 = (unint64_t *)v67;
      }
      v76 = &v64[16 * v63];
      v79 = *((_QWORD *)v76 + 1);
      v78 = (unint64_t *)(v76 + 8);
      v77 = v79;
      if (v79 != 0xFFFFFFFF)
      {
        if (v77 > v33)
          break;
        if (v51 >= (unint64_t *)v294)
        {
          v81 = (unint64_t *)__p;
          v82 = ((char *)v51 - (_BYTE *)__p) >> 3;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 61)
LABEL_396:
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v84 = v294 - (_BYTE *)__p;
          if ((v294 - (_BYTE *)__p) >> 2 > v83)
            v83 = v84 >> 2;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
            v85 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v85);
            v81 = (unint64_t *)__p;
            v51 = (unint64_t *)v293;
            v77 = *v78;
          }
          else
          {
            v86 = 0;
          }
          v87 = &v86[8 * v82];
          *(_QWORD *)v87 = v77;
          v80 = v87 + 8;
          while (v51 != v81)
          {
            v88 = *--v51;
            *((_QWORD *)v87 - 1) = v88;
            v87 -= 8;
          }
          __p = v87;
          v293 = v80;
          v294 = &v86[8 * v85];
          if (v81)
            operator delete(v81);
        }
        else
        {
          *v51 = v77;
          v80 = (char *)(v51 + 1);
        }
        v293 = v80;
        v51 = (unint64_t *)v80;
      }
      ++v62;
      v61 = v295;
    }
    while (v62 < (v296 - (_BYTE *)v295) >> 3);
  }
  if (v289 == v33)
  {
    if (v51 >= (unint64_t *)v294)
    {
      v90 = (unint64_t *)__p;
      v91 = ((char *)v51 - (_BYTE *)__p) >> 3;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v93 = v294 - (_BYTE *)__p;
      if ((v294 - (_BYTE *)__p) >> 2 > v92)
        v92 = v93 >> 2;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
        v94 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v94);
        v90 = (unint64_t *)__p;
        v51 = (unint64_t *)v293;
      }
      else
      {
        v95 = 0;
      }
      v96 = (unint64_t *)&v95[8 * v91];
      v97 = &v95[8 * v94];
      *v96 = v33;
      v89 = (char *)(v96 + 1);
      while (v51 != v90)
      {
        v98 = *--v51;
        *--v96 = v98;
      }
      __p = v96;
      v293 = v89;
      v294 = v97;
      if (v90)
        operator delete(v90);
    }
    else
    {
      *v51 = v33;
      v89 = (char *)(v51 + 1);
    }
    v293 = v89;
    v51 = (unint64_t *)v89;
  }
  v99 = (char *)v51 - (_BYTE *)__p;
  std::vector<unsigned long>::resize((uint64_t)&__p, v99 >> 2);
  v100 = __p;
  v101 = (char *)__p + v99;
  if (v40 == v285 || v281 == v99 >> 3)
  {
    v105 = (char *)__p + v99;
  }
  else
  {
    v102 = (char *)__p + 8 * v281;
    v103 = (char *)__p;
    v104 = v102;
    v105 = (char *)__p + v99;
    do
    {
      v106 = *(_QWORD *)v103;
      if (*(_QWORD *)v103 >= *(_QWORD *)v104)
      {
        if (*(_QWORD *)v104 >= v106)
        {
          *(_QWORD *)v105 = v106;
          v105 += 8;
          v103 += 8;
        }
        v104 += 8;
      }
      else
      {
        v103 += 8;
      }
    }
    while (v103 != v102 && v104 != v101);
  }
  std::vector<unsigned long>::resize((uint64_t)&__p, (v105 - v100) >> 3);
  v286 = *((_QWORD *)v293 - 1);
  v107 = strlen(a6);
  v108 = strlen(v283);
  v109 = 0;
  if (v107 > (uint64_t)v33 && v108 > (uint64_t)v33)
  {
    v110 = 0;
    v111 = &v283[v108 - 1];
    v112 = &a6[v107 - 1];
    while (1)
    {
      v114 = *v112--;
      v113 = v114;
      v115 = *(unsigned __int8 *)v111--;
      if (v113 != v115)
        break;
      v109 = v110 + 1;
      if (&a6[v107] > &a6[v33 + 1 + v110])
      {
        v116 = (unint64_t)&v283[v33 + 1 + v110++];
        if ((unint64_t)&v283[v108] > v116)
          continue;
      }
      goto LABEL_156;
    }
    v109 = v110;
  }
LABEL_156:
  std::vector<unsigned long>::resize((uint64_t)&__p, 0);
  v117 = v293;
  if (v293 >= v294)
  {
    v119 = (char *)__p;
    v120 = (v293 - (_BYTE *)__p) >> 3;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v122 = v294 - (_BYTE *)__p;
    if ((v294 - (_BYTE *)__p) >> 2 > v121)
      v121 = v122 >> 2;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
      v123 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    if (v123)
    {
      v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v123);
      v119 = (char *)__p;
      v117 = v293;
    }
    else
    {
      v124 = 0;
    }
    v125 = &v124[8 * v120];
    v126 = &v124[8 * v123];
    *(_QWORD *)v125 = 0;
    v118 = v125 + 8;
    while (v117 != v119)
    {
      v127 = *((_QWORD *)v117 - 1);
      v117 -= 8;
      *((_QWORD *)v125 - 1) = v127;
      v125 -= 8;
    }
    __p = v125;
    v293 = v118;
    v294 = v126;
    if (v119)
      operator delete(v119);
  }
  else
  {
    *(_QWORD *)v293 = 0;
    v118 = v117 + 8;
  }
  v293 = v118;
  if ((v287 & 1) == 0)
  {
    v128 = v29[13];
    v129 = v29[14] - v128;
    if (v129)
    {
      v130 = 0;
      v131 = v129 >> 3;
      while (1)
      {
        v132 = *(_QWORD *)(v128 + 8 * (v131 - v130) - 16) + *((_QWORD *)v118 - 1);
        if (v132 > v109)
          break;
        if (v118 >= v294)
        {
          v134 = (char *)__p;
          v135 = (v118 - (_BYTE *)__p) >> 3;
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v137 = v294 - (_BYTE *)__p;
          if ((v294 - (_BYTE *)__p) >> 2 > v136)
            v136 = v137 >> 2;
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
            v138 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v138 = v136;
          if (v138)
          {
            v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v138);
            v134 = (char *)__p;
            v118 = v293;
          }
          else
          {
            v139 = 0;
          }
          v140 = &v139[8 * v135];
          *(_QWORD *)v140 = v132;
          v133 = v140 + 8;
          while (v118 != v134)
          {
            v141 = *((_QWORD *)v118 - 1);
            v118 -= 8;
            *((_QWORD *)v140 - 1) = v141;
            v140 -= 8;
          }
          __p = v140;
          v293 = v133;
          v294 = &v139[8 * v138];
          if (v134)
            operator delete(v134);
        }
        else
        {
          *(_QWORD *)v118 = v132;
          v133 = v118 + 8;
        }
        v293 = v133;
        v130 += 2;
        v128 = v29[13];
        v131 = (v29[14] - v128) >> 3;
        v118 = v133;
        if (v130 >= v131)
          goto LABEL_195;
      }
    }
  }
  v133 = v118;
LABEL_195:
  v142 = (v133 - (_BYTE *)__p) >> 3;
  v280 = (char *)__p;
  v282 = v142;
  if (v133 >= v294)
  {
    v144 = v142 + 1;
    if ((unint64_t)(v142 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v145 = v294 - (_BYTE *)__p;
    if ((v294 - (_BYTE *)__p) >> 2 > v144)
      v144 = v145 >> 2;
    if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
      v146 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v146 = v144;
    if (v146)
    {
      v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v146);
      v148 = (char *)__p;
      v149 = v293;
    }
    else
    {
      v147 = 0;
      v148 = (char *)__p;
      v149 = v133;
    }
    v150 = (size_t *)&v147[8 * v142];
    v151 = &v147[8 * v146];
    *v150 = 0;
    v143 = v150 + 1;
    while (v149 != v148)
    {
      v152 = *((_QWORD *)v149 - 1);
      v149 -= 8;
      *--v150 = v152;
    }
    __p = v150;
    v293 = (char *)v143;
    v294 = v151;
    if (v148)
      operator delete(v148);
  }
  else
  {
    *(_QWORD *)v133 = 0;
    v143 = (size_t *)(v133 + 8);
  }
  v293 = (char *)v143;
  v153 = v295;
  if (v296 != v295)
  {
    v154 = 0;
    v155 = (v296 - (_BYTE *)v295) >> 3;
    do
    {
      v156 = *(_QWORD *)(v153[v155 + ~v154] + 8);
      v157 = v301;
      v158 = *((_QWORD *)v301 + 2 * v156 + 1);
      if (v158 != 0xFFFFFFFFLL)
      {
        v159 = v289 - v158;
        if (v289 - v158 <= v109)
        {
          if (v143 >= (size_t *)v294)
          {
            v161 = (size_t *)__p;
            v162 = ((char *)v143 - (_BYTE *)__p) >> 3;
            v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v164 = v294 - (_BYTE *)__p;
            if ((v294 - (_BYTE *)__p) >> 2 > v163)
              v163 = v164 >> 2;
            if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8)
              v165 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v165 = v163;
            if (v165)
            {
              v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v165);
              v161 = (size_t *)__p;
              v143 = (size_t *)v293;
            }
            else
            {
              v166 = 0;
            }
            v167 = &v166[8 * v162];
            *(_QWORD *)v167 = v159;
            v160 = v167 + 8;
            while (v143 != v161)
            {
              v168 = *--v143;
              *((_QWORD *)v167 - 1) = v168;
              v167 -= 8;
            }
            __p = v167;
            v293 = v160;
            v294 = &v166[8 * v165];
            if (v161)
              operator delete(v161);
          }
          else
          {
            *v143 = v159;
            v160 = (char *)(v143 + 1);
          }
          v293 = v160;
          v157 = v301;
          v143 = (size_t *)v160;
        }
      }
      v169 = v157[2 * v156];
      if (v169 != 0xFFFFFFFFLL)
      {
        v170 = v289 - v169;
        if (v289 - v169 <= v109)
        {
          if (v143 >= (size_t *)v294)
          {
            v172 = (size_t *)__p;
            v173 = ((char *)v143 - (_BYTE *)__p) >> 3;
            v174 = v173 + 1;
            if ((unint64_t)(v173 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v175 = v294 - (_BYTE *)__p;
            if ((v294 - (_BYTE *)__p) >> 2 > v174)
              v174 = v175 >> 2;
            if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8)
              v176 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v176 = v174;
            if (v176)
            {
              v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v176);
              v172 = (size_t *)__p;
              v143 = (size_t *)v293;
            }
            else
            {
              v177 = 0;
            }
            v178 = &v177[8 * v173];
            *(_QWORD *)v178 = v170;
            v171 = v178 + 8;
            while (v143 != v172)
            {
              v179 = *--v143;
              *((_QWORD *)v178 - 1) = v179;
              v178 -= 8;
            }
            __p = v178;
            v293 = v171;
            v294 = &v177[8 * v176];
            if (v172)
              operator delete(v172);
          }
          else
          {
            *v143 = v170;
            v171 = (char *)(v143 + 1);
          }
          v293 = v171;
          v143 = (size_t *)v171;
        }
      }
      ++v154;
      v153 = v295;
      v155 = (v296 - (_BYTE *)v295) >> 3;
    }
    while (v154 < v155);
  }
  if (v289 == v109)
  {
    if (v143 >= (size_t *)v294)
    {
      v181 = (size_t *)__p;
      v182 = ((char *)v143 - (_BYTE *)__p) >> 3;
      v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v184 = v294 - (_BYTE *)__p;
      if ((v294 - (_BYTE *)__p) >> 2 > v183)
        v183 = v184 >> 2;
      if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
        v185 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v185 = v183;
      if (v185)
      {
        v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v185);
        v181 = (size_t *)__p;
        v143 = (size_t *)v293;
      }
      else
      {
        v186 = 0;
      }
      v187 = (size_t *)&v186[8 * v182];
      v188 = &v186[8 * v185];
      *v187 = v289;
      v180 = (char *)(v187 + 1);
      while (v143 != v181)
      {
        v189 = *--v143;
        *--v187 = v189;
      }
      __p = v187;
      v293 = v180;
      v294 = v188;
      if (v181)
        operator delete(v181);
    }
    else
    {
      *v143 = v289;
      v180 = (char *)(v143 + 1);
    }
    v293 = v180;
    v143 = (size_t *)v180;
  }
  v190 = (char *)v143 - (_BYTE *)__p;
  std::vector<unsigned long>::resize((uint64_t)&__p, ((char *)v143 - (_BYTE *)__p) >> 2);
  v191 = __p;
  v192 = (char *)__p + v190;
  if (v133 == v280 || v282 == v190 >> 3)
  {
    v196 = (char *)__p + v190;
  }
  else
  {
    v193 = (char *)__p + 8 * v282;
    v194 = (char *)__p;
    v195 = v193;
    v196 = (char *)__p + v190;
    do
    {
      v197 = *(_QWORD *)v194;
      if (*(_QWORD *)v194 >= *(_QWORD *)v195)
      {
        if (*(_QWORD *)v195 >= v197)
        {
          *(_QWORD *)v196 = v197;
          v196 += 8;
          v194 += 8;
        }
        v195 += 8;
      }
      else
      {
        v194 += 8;
      }
    }
    while (v194 != v193 && v195 != v192);
  }
  std::vector<unsigned long>::resize((uint64_t)&__p, (v196 - v191) >> 3);
  v198 = *((_QWORD *)v293 - 1);
  v309 = v311;
  v310 = xmmword_209A57DD0;
  v312 = 1;
  v305 = v307;
  v306 = xmmword_209A57DD0;
  v308 = 1;
  if ((v287 & 1) == 0)
  {
    v199 = v29[2];
    v200 = v29[3];
    TBuffer<char>::resize((uint64_t)&v309, 0);
    TBuffer<char>::insert((uint64_t)&v309, 0, (char *)(v199 + v286), v200 - (v198 + v286));
  }
  TBuffer<char>::resize((uint64_t)&v305, 0);
  TBuffer<char>::insert((uint64_t)&v305, 0, &a6[v286], v289 - (v286 + v198));
  v201 = a1[1];
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v201 + 19248));
  if (v201[TParam::getValidConfig((TParam *)(v201 + 19248), ActiveConfigHandle) + 19400])
  {
    tknPrintf("Old text: <%s>\n", v203, v204, v205, v206, v283);
    if ((v287 & 1) == 0)
    {
      v211 = v29[4];
      if (v29[5] != v211)
      {
        v212 = 0;
        v213 = 0;
        do
        {
          v214 = (unsigned int *)(v211 + v212);
          if (*(char *)(v211 + v212 + 23) < 0)
            v214 = *(unsigned int **)v214;
          loggableUnicode(v214, v290);
          if (v291 >= 0)
            v219 = v290;
          else
            v219 = (void **)v290[0];
          tknPrintf("Token: <%s>\n", v215, v216, v217, v218, v219);
          if (v291 < 0)
            operator delete(v290[0]);
          ++v213;
          v211 = v29[4];
          v212 += 24;
        }
        while (v213 < 0xAAAAAAAAAAAAAAABLL * ((v29[5] - v211) >> 3));
      }
    }
    tknPrintf("New text: <%s>\n", v207, v208, v209, v210, a6);
    v224 = (unsigned int ****)v295;
    if (v296 != v295)
    {
      v225 = 0;
      do
      {
        loggableUnicode(**v224[v225], v290);
        if (v291 >= 0)
          v230 = v290;
        else
          v230 = (void **)v290[0];
        tknPrintf("Token: <%s>\n", v226, v227, v228, v229, v230);
        if (v291 < 0)
          operator delete(v290[0]);
        ++v225;
        v224 = (unsigned int ****)v295;
      }
      while (v225 < (v296 - (_BYTE *)v295) >> 3);
    }
    v231 = v298;
    if (v299 < 0)
      v231 = (void **)v298[0];
    tknPrintf("Alignment: <%s>\n", v220, v221, v222, v223, v231);
    if (*((_QWORD *)&v310 + 1) >= (unint64_t)v310)
    {
      if (v312)
      {
        LOBYTE(v290[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v309, *((unint64_t *)&v310 + 1), (char *)v290, 1uLL);
        --*((_QWORD *)&v310 + 1);
      }
      else if ((_QWORD)v310)
      {
        v309[(_QWORD)v310 - 1] = 0;
      }
    }
    else
    {
      v309[*((_QWORD *)&v310 + 1)] = 0;
    }
    v235 = v309;
    v236 = *((_QWORD *)&v306 + 1);
    if (*((_QWORD *)&v306 + 1) >= (unint64_t)v306)
    {
      if (v308)
      {
        LOBYTE(v290[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v305, *((unint64_t *)&v306 + 1), (char *)v290, 1uLL);
        --*((_QWORD *)&v306 + 1);
      }
      else if ((_QWORD)v306)
      {
        v305[(_QWORD)v306 - 1] = 0;
      }
    }
    else
    {
      v305[*((_QWORD *)&v306 + 1)] = 0;
    }
    tknPrintf("Substitution ranges: Old <%s> New <%s>\n", v236, v232, v233, v234, v235, v305);
  }
  v237 = (uint64_t **)a7;
  **(_QWORD **)a7 = -1;
  *(_QWORD *)(*(_QWORD *)a7 + 8) = -1;
  *(_QWORD *)(*(_QWORD *)a7 + 16) = -1;
  if ((v287 & 1) == 0)
  {
    std::vector<unsigned long>::resize((uint64_t)&__p, 0);
    v239 = v293;
    v238 = v294;
    if (v293 >= v294)
    {
      v241 = (char *)__p;
      v242 = (v293 - (_BYTE *)__p) >> 3;
      v243 = v242 + 1;
      if ((unint64_t)(v242 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v244 = v294 - (_BYTE *)__p;
      if ((v294 - (_BYTE *)__p) >> 2 > v243)
        v243 = v244 >> 2;
      if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF8)
        v245 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v245 = v243;
      if (v245)
      {
        v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v245);
        v241 = (char *)__p;
        v239 = v293;
      }
      else
      {
        v246 = 0;
      }
      v247 = (unint64_t *)&v246[8 * v242];
      v238 = &v246[8 * v245];
      *v247 = v286;
      v240 = (char *)(v247 + 1);
      while (v239 != v241)
      {
        v248 = *((_QWORD *)v239 - 1);
        v239 -= 8;
        *--v247 = v248;
      }
      __p = v247;
      v293 = v240;
      v294 = v238;
      if (v241)
      {
        operator delete(v241);
        v238 = v294;
      }
    }
    else
    {
      *(_QWORD *)v293 = v286;
      v240 = v239 + 8;
    }
    v293 = v240;
    v249 = v29[3] - v198;
    if (v240 >= v238)
    {
      v251 = (char *)__p;
      v252 = (v240 - (_BYTE *)__p) >> 3;
      v253 = v252 + 1;
      if ((unint64_t)(v252 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v254 = v238 - (_BYTE *)__p;
      if (v254 >> 2 > v253)
        v253 = v254 >> 2;
      if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8)
        v255 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v255 = v253;
      if (v255)
      {
        v256 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v294, v255);
        v251 = (char *)__p;
        v240 = v293;
      }
      else
      {
        v256 = 0;
      }
      v257 = &v256[8 * v252];
      v258 = &v256[8 * v255];
      *(_QWORD *)v257 = v249;
      v250 = v257 + 8;
      while (v240 != v251)
      {
        v259 = *((_QWORD *)v240 - 1);
        v240 -= 8;
        *((_QWORD *)v257 - 1) = v259;
        v257 -= 8;
      }
      __p = v257;
      v293 = v250;
      v294 = v258;
      if (v251)
        operator delete(v251);
    }
    else
    {
      *(_QWORD *)v240 = v249;
      v250 = v240 + 8;
    }
    v293 = v250;
    TResultManager::split(a1, v279, (unint64_t **)&__p, a7);
    v237 = (uint64_t **)a7;
    TResultManager::destroy((TResult *)a1, *(_QWORD *)(*(_QWORD *)a7 + 8));
    TResultManager::destroy((TResult *)a1, v279);
  }
  v260 = create((uint64_t)a6, v286, v289 - v198, (uint64_t *)&v295, (uint64_t *)&v301, (uint64_t *)v298, (uint64_t)a1[3]);
  v261 = (unint64_t)a1[7];
  v262 = (uint64_t *)a1[6];
  if ((unint64_t)v262 >= v261)
  {
    v264 = ((char *)v262 - *v278) >> 3;
    if ((unint64_t)(v264 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v265 = v261 - (_QWORD)*v278;
    v266 = v265 >> 2;
    if (v265 >> 2 <= (unint64_t)(v264 + 1))
      v266 = v264 + 1;
    if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
      v267 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v267 = v266;
    if (v267)
      v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v267);
    else
      v268 = 0;
    v269 = (uint64_t *)&v268[8 * v264];
    v270 = &v268[8 * v267];
    *v269 = v260;
    v263 = (char *)(v269 + 1);
    v272 = a1[5];
    v271 = a1[6];
    if (v271 != v272)
    {
      do
      {
        v273 = *((_QWORD *)v271 - 1);
        v271 -= 8;
        *--v269 = v273;
      }
      while (v271 != v272);
      v271 = *v278;
    }
    a1[5] = (char *)v269;
    a1[6] = v263;
    a1[7] = v270;
    if (v271)
      operator delete(v271);
  }
  else
  {
    *v262 = v260;
    v263 = (char *)(v262 + 1);
  }
  a1[6] = v263;
  (*v237)[1] = (v263 - a1[5]) >> 3;
  v274 = *(_BYTE **)&a1[5][8 * (*v237)[1] - 8];
  v275 = *v274;
  if (!*v274)
  {
    v276 = TResultManager::merge(a1, *v237, 3);
    TResultManager::destroy((TResult *)a1, **v237);
    TResultManager::destroy((TResult *)a1, (*v237)[1]);
    TResultManager::destroy((TResult *)a1, (*v237)[2]);
    **v237 = -1;
    (*v237)[1] = v276;
    (*v237)[2] = -1;
  }
  if (v308 && v305 != v307 && v305)
    MEMORY[0x20BD149A8]();
  if (v312 && v309 != v311 && v309)
    MEMORY[0x20BD149A8]();
  if (__p)
  {
    v293 = (char *)__p;
    operator delete(__p);
  }
  if (v295)
  {
    v296 = v295;
    operator delete(v295);
  }
  if (SHIBYTE(v299) < 0)
    operator delete(v298[0]);
  TFsa::~TFsa((TFsa *)v300);
  if (v301)
  {
    v302 = v301;
    operator delete(v301);
  }
  TFsa::~TFsa((TFsa *)v304);
  if (v316 && v313 != v315 && v313)
    MEMORY[0x20BD149A8]();
  if (v320 && v317 != v319 && v317)
    MEMORY[0x20BD149A8]();
  return v275 == 0;
}

void sub_2098BEAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t a70;
  char a72;
  uint64_t v72;
  uint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;

  if (LOBYTE(STACK[0x3D8]))
  {
    if (STACK[0x2C0] != v72 && STACK[0x2C0] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x4F8]))
  {
    v76 = STACK[0x3E0];
    if (STACK[0x3E0] != v73)
    {
      if (v76)
        MEMORY[0x20BD149A8](v76, 0x1000C4077774924);
    }
  }
  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a40 < 0)
    operator delete(a35);
  TFsa::~TFsa((TFsa *)&a41);
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  TFsa::~TFsa((TFsa *)&a72);
  if (LOBYTE(STACK[0x618]))
  {
    v77 = STACK[0x500];
    if (STACK[0x500] != a11)
    {
      if (v77)
        MEMORY[0x20BD149A8](v77, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x738]))
  {
    v78 = STACK[0x620];
    if (STACK[0x620] != a12)
    {
      if (v78)
        MEMORY[0x20BD149A8](v78, 0x1000C4077774924);
    }
  }
  _Unwind_Resume(a1);
}

void TResultManager::getAllHints(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  TBuffer<TPItnRuleHandle_fake **>::resize(a2, 0);
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v4 = 0;
    do
    {
      v5 = ++v4;
      TBuffer<TPItnRuleHandle_fake **>::insert(a2, *(_QWORD *)(a2 + 16), (uint64_t *)&v5, 1uLL);
    }
    while (v4 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3));
  }
}

uint64_t TResultManager::getHintDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;

  v3 = *(_QWORD *)(a1 + 64) + 104 * a2;
  v4 = (unsigned __int8 *)(v3 - 24);
  if (*(char *)(v3 - 1) < 0)
    v4 = *(unsigned __int8 **)v4;
  return TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 24) + 240, v4, a3);
}

uint64_t TResultManager::createHint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD v18[2];
  void *v19[2];
  void *v20[4];
  void *__p[2];
  uint64_t v22;

  v22 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  v10 = a1[9];
  if (v10 >= a1[10])
  {
    v14 = std::vector<THint>::__push_back_slow_path<THint>(a1 + 8, (uint64_t)v18);
    v15 = SHIBYTE(v22);
    a1[9] = v14;
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v10 = 0uLL;
    *(_OWORD *)(v10 + 16) = 0uLL;
    v11 = *(_OWORD *)v19;
    *(void **)(v10 + 48) = v20[0];
    *(_OWORD *)(v10 + 32) = v11;
    v19[1] = 0;
    v20[0] = 0;
    v19[0] = 0;
    v12 = v20[3];
    *(_OWORD *)(v10 + 56) = *(_OWORD *)&v20[1];
    *(_QWORD *)(v10 + 72) = v12;
    v20[1] = 0;
    v20[2] = 0;
    v13 = *(_OWORD *)__p;
    *(_QWORD *)(v10 + 96) = v22;
    *(_OWORD *)(v10 + 80) = v13;
    __p[1] = 0;
    v22 = 0;
    v20[3] = 0;
    __p[0] = 0;
    a1[9] = v10 + 104;
  }
  if (SHIBYTE(v20[3]) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
  v16 = a1[9];
  *(_QWORD *)(v16 - 104) = a2;
  *(_QWORD *)(v16 - 96) = a3;
  *(_QWORD *)(v16 - 88) = a5;
  *(_QWORD *)(v16 - 80) = *(_QWORD *)(a1[1] + 136);
  if (a4)
  {
    MEMORY[0x20BD14750](v16 - 24, a4);
    v16 = a1[9];
  }
  return v16 - 104;
}

void sub_2098BEE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  THint::~THint(&a9);
  _Unwind_Resume(a1);
}

void THint::~THint(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

uint64_t TResultManager::createHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  TStringParam *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const __int32 *v22;
  __int32 *v23;
  const void *v24;
  TParam *v25;
  __int32 v26;
  uint64_t ActiveConfigHandle;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *p_p;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t Hint;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  __int32 *v65;
  int v66;
  int v67;
  unint64_t v68;
  char v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const __int32 *v74;
  int v75;
  const __int32 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  __int32 *v88;
  __int32 *v89;
  __int32 **v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  __int32 **v97;
  char *v98;
  __int32 **v99;
  char *v100;
  char *v101;
  __int32 *v102;
  __int32 **v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  __int32 **v108;
  char *v109;
  char *v110;
  char *v111;
  __int32 *v112;
  uint64_t v113;
  unsigned int *v114;
  __int32 *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  __int32 **v119;
  unint64_t v120;
  void *v121;
  __int128 v122;
  _BYTE v123[785];
  char v124;
  void *__p;
  __int128 v126;
  _BYTE v127[2048];
  char v128;
  __int32 *v129;
  __int128 v130;
  _BYTE v131[1024];
  char v132;
  int v133;
  _BYTE *v134;
  __int128 v135;
  _BYTE v136[256];
  char v137;
  uint64_t v138;

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v11 = v10;
  v12 = v9;
  v13 = v8;
  v14 = v6;
  v15 = (_QWORD *)v5;
  v138 = *MEMORY[0x24BDAC8D0];
  v134 = v136;
  v135 = xmmword_209A57DD0;
  v137 = 1;
  if (v8 == 1)
  {
    v116 = v6;
    v117 = v7;
    v24 = (const void *)TParamManager::nameToParam(*(_QWORD *)(v5 + 8), v9);
    if (v24 || (v24 = (const void *)TParamManager::nameToParam(*(_QWORD *)(v15[3] + 336), v12)) != 0)
    else
      v25 = 0;
    v26 = *v11;
    ActiveConfigHandle = TParam::getActiveConfigHandle(v25);
    if ((v26 != 48) != (*((_BYTE *)v25 + TParam::getValidConfig(v25, ActiveConfigHandle) + 152) != 0))
    {
      v28 = (char *)v25 + 24 * (v26 != 48);
      v29 = v28 + 200;
      v30 = v28[223];
      if (v30 < 0)
      {
        if (*((_QWORD *)v29 + 1))
        {
          v29 = *(char **)v29;
          if (v29)
            goto LABEL_48;
        }
      }
      else if (v30)
      {
        goto LABEL_48;
      }
      v50 = v15[1];
      v51 = TParam::getActiveConfigHandle((TParam *)(v50 + 19248));
      if (*(_BYTE *)(v50 + TParam::getValidConfig((TParam *)(v50 + 19248), v51) + 19400))
      {
        v56 = "false";
        if (v26 != 48)
          v56 = "true";
        tknPrintf("No description found for allowable value '%s'; hint rejected.\n", v52, v53, v54, v55, v56);
      }
      goto LABEL_102;
    }
    v32 = v15[1];
    v33 = TParam::getActiveConfigHandle((TParam *)(v32 + 19248));
    if (!*(_BYTE *)(v32 + TParam::getValidConfig((TParam *)(v32 + 19248), v33) + 19400))
    {
LABEL_102:
      Hint = 0;
      goto LABEL_107;
    }
    loggableUnicode((unsigned int *)v12, &__p);
    if (v126 >= 0)
      p_p = &__p;
    else
      p_p = __p;
LABEL_41:
    tknPrintf("Parameter %s already set to desired value; hint rejected.\n", v34, v35, v36, v37, p_p);
    goto LABEL_42;
  }
  if (v8 == 3)
  {
    v116 = v6;
    v117 = v7;
    v129 = (__int32 *)v131;
    v130 = xmmword_209A57DD0;
    v132 = 1;
    TLexicon::getWrittenForm(*(_QWORD *)(v5 + 24), v9, (uint64_t)&v129);
    if (!*((_QWORD *)&v130 + 1))
    {
      v39 = v15[1];
      v40 = TParam::getActiveConfigHandle((TParam *)(v39 + 19248));
      if (*(_BYTE *)(v39 + TParam::getValidConfig((TParam *)(v39 + 19248), v40) + 19400))
      {
        loggableUnicode((unsigned int *)v12, &__p);
        v45 = v126 >= 0 ? &__p : (void **)__p;
        tknPrintf("Can't create hint for wordname with empty written form: '%s'; hint rejected;\n",
          v41,
          v42,
          v43,
          v44,
          v45);
        if (SHIBYTE(v126) < 0)
          operator delete(__p);
      }
      goto LABEL_96;
    }
    if (!*v11)
      goto LABEL_70;
    if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
    {
      if (v132)
      {
        LODWORD(__p) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v129, *((unint64_t *)&v130 + 1), (int *)&__p, 1uLL);
        v23 = v129;
        --*((_QWORD *)&v130 + 1);
      }
      else
      {
        v23 = v129;
        if ((_QWORD)v130)
          v129[(_QWORD)v130 - 1] = 0;
      }
    }
    else
    {
      v23 = v129;
      v129[*((_QWORD *)&v130 + 1)] = 0;
    }
    if (!wcscmp(v23, v11))
    {
LABEL_70:
      v66 = 0;
      v67 = 0;
      v64 = (char *)v15[2];
      v65 = (__int32 *)(v64 + 88);
      if (v64[111] < 0)
      {
LABEL_71:
        v65 = *(__int32 **)v65;
        v67 = v66;
      }
    }
    else
    {
      v64 = (char *)v15[2];
      v65 = (__int32 *)(v64 + 112);
      v66 = 1;
      v67 = 1;
      if (v64[135] < 0)
        goto LABEL_71;
    }
    if (*v65)
    {
      __p = v127;
      v126 = xmmword_209A57DD0;
      v128 = 1;
      v115 = v65;
      (*(void (**)(char *, __int32 *, _QWORD, void **))(*(_QWORD *)v64 + 48))(v64, v12, 0, &__p);
      if (*((_QWORD *)&v126 + 1))
      {
        v68 = 0;
        v69 = 0;
        v70 = 0;
        do
        {
          v71 = *((_QWORD *)__p + v68);
          if (v71 && (v72 = *(_QWORD *)(v15[2] + 32), v71 <= (*(_QWORD *)(v15[2] + 40) - v72) >> 3))
            v73 = *(_QWORD *)(v72 + 8 * v71 - 8);
          else
            v73 = 0;
          v74 = (const __int32 *)(v73 + 120);
          v75 = *(char *)(v73 + 143);
          v76 = (const __int32 *)(v73 + 120);
          if (v75 < 0)
            v76 = *(const __int32 **)v74;
          if (*v76)
          {
            if (*(_QWORD *)(v73 + 192) != -1)
              goto LABEL_126;
            if (!v67)
              goto LABEL_185;
            if (v75 < 0)
              v74 = *(const __int32 **)v74;
            if (!wcscmp(v74, v11))
            {
LABEL_185:
              if (*(_BYTE *)(v73 + 144))
              {
                if (*(_QWORD *)(v73 + 56) == *(_QWORD *)(v73 + 48) && *(_QWORD *)(v73 + 32) == *(_QWORD *)(v73 + 24))
                {
                  v70 = 1;
                }
                else
                {
                  v70 = 1;
                  v69 = 1;
                }
              }
            }
          }
          ++v68;
        }
        while (v68 < *((_QWORD *)&v126 + 1));
      }
      else
      {
        v70 = 0;
        v69 = 0;
      }
      if ((v69 & 1) == 0 && ((v67 ^ v70) & 1) == 0)
      {
        v81 = v15[1];
        v82 = TParam::getActiveConfigHandle((TParam *)(v81 + 19248));
        if (*(_BYTE *)(v81 + TParam::getValidConfig((TParam *)(v81 + 19248), v82) + 19400))
        {
          loggableUnicode((unsigned int *)v12, &v121);
          v87 = v122 >= 0 ? &v121 : (void **)v121;
          tknPrintf("Rewrite rule already defined for '%s'; hint rejected.\n", v83, v84, v85, v86, v87);
          if (SHIBYTE(v122) < 0)
            operator delete(v121);
        }
        v79 = 1;
LABEL_177:
        if (v128 && __p != v127 && __p)
          MEMORY[0x20BD149A8]();
LABEL_97:
        if (v132 && v129 != (__int32 *)v131 && v129)
          MEMORY[0x20BD149A8]();
        if (!v79)
          goto LABEL_103;
        goto LABEL_102;
      }
LABEL_126:
      v120 = 0;
      v121 = v123;
      v122 = xmmword_209A57DD0;
      v124 = 1;
      v118 = 0;
      v119 = 0;
      if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
      {
        if (v132)
        {
          v133 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v129, *((unint64_t *)&v130 + 1), &v133, 1uLL);
          v88 = v129;
          --*((_QWORD *)&v130 + 1);
          v90 = v119;
          v91 = v120;
          goto LABEL_130;
        }
        v88 = v129;
        if (!(_QWORD)v130)
        {
LABEL_129:
          v90 = 0;
          v91 = 0;
LABEL_130:
          v92 = ((char *)v90 - (_BYTE *)v118) >> 3;
          if ((unint64_t)(v92 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v93 = v91 - (_QWORD)v118;
          v94 = v93 >> 2;
          if (v93 >> 2 <= (unint64_t)(v92 + 1))
            v94 = v92 + 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
            v95 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          if (v95)
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v95);
          else
            v96 = 0;
          v97 = (__int32 **)&v96[8 * v92];
          v98 = &v96[8 * v95];
          *v97 = v88;
          v99 = v97 + 1;
          v101 = (char *)v118;
          v100 = (char *)v119;
          if (v119 != v118)
          {
            do
            {
              v102 = (__int32 *)*((_QWORD *)v100 - 1);
              v100 -= 8;
              *--v97 = v102;
            }
            while (v100 != v101);
            v100 = (char *)v118;
          }
          v118 = v97;
          v119 = v99;
          v120 = (unint64_t)v98;
          if (v100)
            operator delete(v100);
          v119 = v99;
          if ((unint64_t)v99 >= v120)
          {
            v104 = ((char *)v99 - (_BYTE *)v118) >> 3;
            if ((unint64_t)(v104 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v105 = (uint64_t)(v120 - (_QWORD)v118) >> 2;
            if (v105 <= v104 + 1)
              v105 = v104 + 1;
            if (v120 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
              v106 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v106 = v105;
            if (v106)
              v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v106);
            else
              v107 = 0;
            v108 = (__int32 **)&v107[8 * v104];
            v109 = &v107[8 * v106];
            *v108 = v11;
            v103 = v108 + 1;
            v111 = (char *)v118;
            v110 = (char *)v119;
            if (v119 != v118)
            {
              do
              {
                v112 = (__int32 *)*((_QWORD *)v110 - 1);
                v110 -= 8;
                *--v108 = v112;
              }
              while (v110 != v111);
              v110 = (char *)v118;
            }
            v118 = v108;
            v119 = v103;
            v120 = (unint64_t)v109;
            if (v110)
              operator delete(v110);
          }
          else
          {
            *v99 = v11;
            v103 = v99 + 1;
          }
          v119 = v103;
          formatString(v115, &v118, (uint64_t)&v121);
          v113 = v15[3];
          if (*((_QWORD *)&v122 + 1) >= (unint64_t)v122)
          {
            if (v124)
            {
              v133 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v121, *((unint64_t *)&v122 + 1), &v133, 1uLL);
              v114 = (unsigned int *)v121;
              --*((_QWORD *)&v122 + 1);
            }
            else
            {
              v114 = (unsigned int *)v121;
              if ((_QWORD)v122)
                *((_DWORD *)v121 + v122 - 1) = 0;
            }
          }
          else
          {
            v114 = (unsigned int *)v121;
            *((_DWORD *)v121 + *((_QWORD *)&v122 + 1)) = 0;
          }
          TLocaleInfo::unicodeToMultiByte(v113 + 240, v114, (uint64_t)&v134);
          if (v118)
          {
            v119 = (__int32 **)v118;
            operator delete(v118);
          }
          if (v124 && v121 != v123 && v121)
            MEMORY[0x20BD149A8]();
          v79 = 0;
          goto LABEL_177;
        }
        v89 = &v129[v130 - 1];
      }
      else
      {
        v88 = v129;
        v89 = &v129[*((_QWORD *)&v130 + 1)];
      }
      *v89 = 0;
      goto LABEL_129;
    }
    v77 = v15[1];
    v78 = TParam::getActiveConfigHandle((TParam *)(v77 + 19248));
    if (*(_BYTE *)(v77 + TParam::getValidConfig((TParam *)(v77 + 19248), v78) + 19400))
      tknPrintString("Hint template not found for rule rewrite; hint rejected.\n");
LABEL_96:
    v79 = 1;
    goto LABEL_97;
  }
  if (v8 != 2)
  {
    v31 = 0;
    goto LABEL_105;
  }
  v116 = v6;
  v117 = v7;
  v16 = (const void *)TParamManager::nameToParam(*(_QWORD *)(v5 + 8), v9);
  if (v16 || (v16 = (const void *)TParamManager::nameToParam(*(_QWORD *)(v15[3] + 336), v12)) != 0)
  else
    v17 = 0;
  v18 = TStringParam::get(v17);
  if (wcscmp((const __int32 *)v18, v11))
  {
    v19 = *((_QWORD *)v17 + 163);
    if (*((_QWORD *)v17 + 164) == v19)
    {
LABEL_103:
      v31 = *((_QWORD *)&v135 + 1);
      if (*((_QWORD *)&v135 + 1) >= (unint64_t)v135)
      {
        if (v137)
        {
          LOBYTE(__p) = 0;
          TBuffer<char>::insert((uint64_t)&v134, *((unint64_t *)&v135 + 1), (char *)&__p, 1uLL);
          --*((_QWORD *)&v135 + 1);
          v14 = v116;
          v7 = v117;
        }
        else
        {
          v14 = v116;
          v7 = v117;
          if ((_QWORD)v135)
            v134[(_QWORD)v135 - 1] = 0;
        }
        goto LABEL_106;
      }
      v14 = v116;
      v7 = v117;
LABEL_105:
      v134[v31] = 0;
LABEL_106:
      Hint = TResultManager::createHint(v15, v14, v7, (uint64_t)v134, v13);
      MEMORY[0x20BD147A4](Hint + 32, v12);
      MEMORY[0x20BD147A4](Hint + 56, v11);
      goto LABEL_107;
    }
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = (const __int32 *)(v19 + v20);
      if (*(char *)(v19 + v20 + 23) < 0)
        v22 = *(const __int32 **)v22;
      if (!wcscmp(v11, v22))
        break;
      ++v21;
      v19 = *((_QWORD *)v17 + 163);
      v20 += 24;
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v17 + 164) - v19) >> 3))
        goto LABEL_103;
    }
    v49 = *((_QWORD *)v17 + 169);
    if (v49 != *((_QWORD *)v17 + 170))
    {
      v29 = (char *)(v49 + v20);
      if ((*(char *)(v49 + v20 + 23) & 0x80000000) == 0 || (v29 = *(char **)v29) != 0)
      {
LABEL_48:
        TLocaleInfo::unicodeToMultiByte(v15[3] + 240, (unsigned int *)v29, (uint64_t)&v134);
        goto LABEL_103;
      }
    }
    v57 = v15[1];
    v58 = TParam::getActiveConfigHandle((TParam *)(v57 + 19248));
    if (*(_BYTE *)(v57 + TParam::getValidConfig((TParam *)(v57 + 19248), v58) + 19400))
    {
      loggableUnicode((unsigned int *)v11, &__p);
      if (v126 >= 0)
        v63 = &__p;
      else
        v63 = __p;
      tknPrintf("No description found for allowable value '%s'; hint rejected.\n", v59, v60, v61, v62, v63);
LABEL_42:
      if (SHIBYTE(v126) < 0)
        operator delete(__p);
      goto LABEL_44;
    }
    goto LABEL_102;
  }
  v46 = v15[1];
  v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 19248));
  if (*(_BYTE *)(v46 + TParam::getValidConfig((TParam *)(v46 + 19248), v47) + 19400))
  {
    loggableUnicode((unsigned int *)v12, &__p);
    if (v126 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    goto LABEL_41;
  }
LABEL_44:
  Hint = 0;
LABEL_107:
  if (v137 && v134 != v136 && v134)
    MEMORY[0x20BD149A8]();
  return Hint;
}

void sub_2098BFAA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  if (LOBYTE(STACK[0x11D8]))
  {
    v3 = STACK[0x10C0];
    if (STACK[0x10C0] != v1)
    {
      if (v3)
        MEMORY[0x20BD149A8](v3, 0x1000C4077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TResultManager::applyHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __int32 *v12;
  const __int32 *v13;
  _QWORD *v14;
  _QWORD *v15;
  TParam *v16;
  uint64_t ActiveConfigHandle;
  const __int32 *v18;
  const __int32 *v19;
  const __int32 *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int32 *v25;
  __int32 *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __int32 *v43;
  uint64_t v44;
  __int32 *v45;
  const __int32 *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __int32 *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  unint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  _BYTE *v63;
  _QWORD *v64;
  _BYTE *v65;
  _QWORD *v66;
  _BYTE *v67;
  _BYTE *v68;
  _QWORD *v69;
  _BYTE *v70;
  __int32 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int32 *v75;
  __int32 *v76;
  uint64_t v77;
  const __int32 *v78;
  uint64_t v79;
  uint64_t v80;
  const __int32 **v81;
  unsigned int v82;
  _BYTE *v83;
  __int128 v84;
  _BYTE v85[4096];
  char v86;
  _BYTE *v87;
  __int128 v88;
  _BYTE v89[4096];
  char v90;
  _BYTE *v91;
  __int128 v92;
  _BYTE v93[2048];
  char v94;
  _BYTE *v95;
  __int128 v96;
  _BYTE v97[2048];
  char v98;
  _BYTE *v99;
  __int128 v100;
  _BYTE v101[2048];
  char v102;
  _BYTE *v103;
  __int128 v104;
  _BYTE v105[2048];
  char v106;
  __int32 *v107;
  __int128 v108;
  _BYTE v109[1024];
  char v110;
  __int32 *v111;
  __int128 v112;
  _BYTE v113[1024];
  char v114;
  _BYTE *v115;
  __int128 v116;
  _BYTE v117[2048];
  char v118;
  _BYTE *v119;
  __int128 v120;
  _BYTE v121[2048];
  char v122;
  __int128 v123;

  result = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = result;
  if (v6 && (v8 = *(_QWORD *)(result + 64), 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(result + 72) - v8) >> 3) >= v6))
    v9 = v8 + 104 * v6 - 104;
  else
    v9 = 0;
  v10 = *(_QWORD *)(result + 8);
  v73 = *(_QWORD *)(v10 + 136);
  v74 = v10;
  *(_QWORD *)(v10 + 136) = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v9 + 16);
  if ((unint64_t)(v11 - 1) < 2)
  {
    v12 = (const __int32 *)(v9 + 32);
    v13 = (const __int32 *)(v9 + 32);
    if (*(char *)(v9 + 55) < 0)
      v13 = *(const __int32 **)v12;
    v14 = (_QWORD *)TParamManager::nameToParam(v10, v13);
    if (!v14)
    {
      if (*(char *)(v9 + 55) < 0)
        v12 = *(const __int32 **)v12;
      v14 = (_QWORD *)TParamManager::nameToParam(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 336), v12);
    }
    v15 = (_QWORD *)(v9 + 56);
    if (*(char *)(v9 + 79) < 0)
      v15 = (_QWORD *)*v15;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(*v14 + 32))(v14, *(_QWORD *)(v9 + 24), v15);
    result = v14[18];
    if (result)
    {
      ActiveConfigHandle = TParam::getActiveConfigHandle(v16);
      result = TParam::getValidConfig(v16, ActiveConfigHandle);
      if (!*((_BYTE *)v16 + result + 152))
        result = TBoolParam::set(v16, 1);
    }
    goto LABEL_214;
  }
  if (v11 != 3)
    goto LABEL_214;
  v119 = v121;
  v120 = xmmword_209A57DD0;
  v122 = 1;
  v115 = v117;
  v116 = xmmword_209A57DD0;
  v118 = 1;
  v81 = (const __int32 **)(v9 + 32);
  (*(void (**)(_QWORD))(**(_QWORD **)(result + 16) + 48))(*(_QWORD *)(result + 16));
  v18 = (const __int32 *)(v9 + 32);
  if (*(char *)(v9 + 55) < 0)
    v18 = *v81;
  (*(void (**)(_QWORD, const __int32 *, uint64_t, _BYTE **))(**(_QWORD **)(v7 + 16) + 48))(*(_QWORD *)(v7 + 16), v18, 1, &v115);
  v19 = (const __int32 *)(v9 + 32);
  if (*(char *)(v9 + 55) < 0)
    v19 = *v81;
  v20 = (const __int32 *)(v9 + 56);
  if (*(char *)(v9 + 79) < 0)
    v20 = *(const __int32 **)(v9 + 56);
  result = wcscmp(v19, v20);
  v21 = result;
  v75 = (__int32 *)(v9 + 56);
  v80 = v9;
  v111 = (__int32 *)v113;
  v112 = xmmword_209A57DD0;
  v114 = 1;
  v107 = (__int32 *)v109;
  v108 = xmmword_209A57DD0;
  v110 = 1;
  v103 = v105;
  v104 = xmmword_209A57DD0;
  v106 = 1;
  v99 = v101;
  v100 = xmmword_209A57DD0;
  v102 = 1;
  v95 = v97;
  v96 = xmmword_209A57DD0;
  v98 = 1;
  v91 = v93;
  v92 = xmmword_209A57DD0;
  v94 = 1;
  v87 = v89;
  v88 = xmmword_209A57DD0;
  v90 = 1;
  v83 = v85;
  v84 = xmmword_209A57DD0;
  v86 = 1;
  if (!*((_QWORD *)&v120 + 1))
  {
    v79 = -1;
    if (!(_DWORD)result)
      goto LABEL_174;
LABEL_168:
    if (v79 == -1)
    {
      v71 = v75;
      if (*(char *)(v80 + 55) < 0)
        v81 = (const __int32 **)*v81;
      if (*(char *)(v80 + 79) < 0)
        v71 = *(__int32 **)v75;
      LOBYTE(v72) = 0;
      result = (*(uint64_t (**)(_QWORD, const __int32 **, __int32 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), v81, v71, 1, 0, 0, 0, 0, 0, 0, -1, v72);
    }
    goto LABEL_174;
  }
  v22 = 0;
  v79 = -1;
  do
  {
    (*(void (**)(_QWORD, _QWORD, __int32 **))(**(_QWORD **)(v7 + 16) + 64))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22], &v111);
    (*(void (**)(_QWORD, _QWORD, _QWORD, _BYTE **))(**(_QWORD **)(v7 + 16) + 72))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22], 0, &v103);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE **))(**(_QWORD **)(v7 + 16) + 72))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22], 1, &v95);
    if (v21)
    {
      if (*((_QWORD *)&v116 + 1))
      {
        v23 = 0;
        v24 = -1;
        do
        {
          if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 112))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v115[8 * v23]))
          {
            (*(void (**)(_QWORD, _QWORD, __int32 **))(**(_QWORD **)(v7 + 16) + 64))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v115[8 * v23], &v107);
            if (*((_QWORD *)&v112 + 1) >= (unint64_t)v112)
            {
              if (v114)
              {
                LODWORD(v123) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
                v25 = v111;
                --*((_QWORD *)&v112 + 1);
              }
              else
              {
                v25 = v111;
                if ((_QWORD)v112)
                  v111[(_QWORD)v112 - 1] = 0;
              }
            }
            else
            {
              v25 = v111;
              v111[*((_QWORD *)&v112 + 1)] = 0;
            }
            if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(v123) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v123, 1uLL);
                v26 = v107;
                --*((_QWORD *)&v108 + 1);
              }
              else
              {
                v26 = v107;
                if ((_QWORD)v108)
                  v107[(_QWORD)v108 - 1] = 0;
              }
            }
            else
            {
              v26 = v107;
              v107[*((_QWORD *)&v108 + 1)] = 0;
            }
            if (!wcscmp(v25, v26))
            {
              (*(void (**)(_QWORD, _QWORD, _QWORD, _BYTE **))(**(_QWORD **)(v7 + 16) + 72))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v115[8 * v23], 0, &v99);
              v27 = *((_QWORD *)&v104 + 1);
              if (*((_QWORD *)&v104 + 1) == *((_QWORD *)&v100 + 1))
              {
                if (*((_QWORD *)&v104 + 1))
                {
                  v28 = v103;
                  v29 = v99;
                  while (*v28 == *v29)
                  {
                    ++v28;
                    ++v29;
                    if (!--v27)
                      goto LABEL_48;
                  }
                }
                else
                {
LABEL_48:
                  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE **))(**(_QWORD **)(v7 + 16) + 72))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v115[8 * v23], 1, &v91);
                  v30 = *((_QWORD *)&v96 + 1);
                  if (*((_QWORD *)&v96 + 1) == *((_QWORD *)&v92 + 1))
                  {
                    if (*((_QWORD *)&v96 + 1))
                    {
                      v31 = v95;
                      v32 = v91;
                      while (*v31 == *v32)
                      {
                        ++v31;
                        ++v32;
                        if (!--v30)
                          goto LABEL_53;
                      }
                    }
                    else
                    {
LABEL_53:
                      if (v24 == -1
                        || (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v115[8 * v23]) == -1)
                      {
                        v24 = *(_QWORD *)&v115[8 * v23];
                      }
                    }
                  }
                }
              }
            }
          }
          ++v23;
        }
        while (v23 < *((_QWORD *)&v116 + 1));
        if (v24 != -1)
          (*(void (**)(_QWORD, uint64_t, _BYTE **))(**(_QWORD **)(v7 + 16) + 80))(*(_QWORD *)(v7 + 16), v24, &v83);
        v33 = *((_QWORD *)&v104 + 1);
        v34 = *((_QWORD *)&v96 + 1);
      }
      else
      {
        v33 = *((_QWORD *)&v104 + 1);
        v34 = *((_QWORD *)&v96 + 1);
        v24 = -1;
      }
      if (!(v33 | v34))
        goto LABEL_64;
      if (*((_QWORD *)&v112 + 1) >= (unint64_t)v112)
      {
        if (v114)
        {
          LODWORD(v123) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
          v37 = v111;
          --*((_QWORD *)&v112 + 1);
        }
        else
        {
          v37 = v111;
          if ((_QWORD)v112)
            v111[(_QWORD)v112 - 1] = 0;
        }
      }
      else
      {
        v37 = v111;
        v111[*((_QWORD *)&v112 + 1)] = 0;
      }
      v46 = v75;
      if (*(char *)(v80 + 79) < 0)
        v46 = *(const __int32 **)v75;
      v82 = wcscmp(v37, v46) == 0;
LABEL_92:
      if (v82 == (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 112))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22]))
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22]);
        if (result == -1)
          goto LABEL_164;
      }
      if (v24 == -1)
      {
        (*(void (**)(_QWORD, _QWORD, _BYTE **))(**(_QWORD **)(v7 + 16) + 80))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22], &v87);
        TBuffer<TPItnRuleControl>::resize((uint64_t)&v83, 0);
        v47 = *((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v48 = 0;
          v49 = 0;
          while (!v21)
          {
            v50 = *(_QWORD *)&v87[v48];
            if ((unint64_t)(v50 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
              goto LABEL_100;
LABEL_101:
            ++v49;
            v48 += 16;
            if (v49 >= v47)
              goto LABEL_102;
          }
          v50 = *(_QWORD *)&v87[v48];
LABEL_100:
          v51 = *(_QWORD *)&v87[v48 + 8];
          *(_QWORD *)&v123 = v50;
          *((_QWORD *)&v123 + 1) = v51;
          TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
          v47 = *((_QWORD *)&v88 + 1);
          goto LABEL_101;
        }
      }
LABEL_102:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22]);
      v52 = (const __int32 *)v81;
      if (*(char *)(v80 + 55) < 0)
        v52 = *v81;
      v77 = *(_QWORD *)(v7 + 16);
      v78 = v52;
      if (*((_QWORD *)&v112 + 1) >= (unint64_t)v112)
      {
        if (v114)
        {
          LODWORD(v123) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
          v76 = v111;
          --*((_QWORD *)&v112 + 1);
        }
        else
        {
          v76 = v111;
          if ((_QWORD)v112)
            v111[(_QWORD)v112 - 1] = 0;
        }
      }
      else
      {
        v76 = v111;
        v111[*((_QWORD *)&v112 + 1)] = 0;
      }
      v53 = *((_QWORD *)&v104 + 1);
      v54 = v104;
      if (*((_QWORD *)&v104 + 1) >= (unint64_t)v104)
      {
        if (v106)
        {
          *(_QWORD *)&v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v103, *((unint64_t *)&v104 + 1), (uint64_t *)&v123, 1uLL);
          v54 = v104;
          v53 = --*((_QWORD *)&v104 + 1);
        }
        else
        {
          v55 = v103;
          if (!(_QWORD)v104)
            goto LABEL_122;
          *(_QWORD *)&v103[8 * v104 - 8] = 0;
        }
      }
      else
      {
        *(_QWORD *)&v103[8 * *((_QWORD *)&v104 + 1)] = 0;
      }
      v55 = v103;
      if (v53 >= v54)
      {
        if (v106)
        {
          *(_QWORD *)&v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v103, v53, (uint64_t *)&v123, 1uLL);
          v53 = --*((_QWORD *)&v104 + 1);
        }
        else if (v54)
        {
          *(_QWORD *)&v103[8 * v54 - 8] = 0;
        }
      }
      else
      {
        *(_QWORD *)&v103[8 * v53] = 0;
      }
LABEL_122:
      v56 = v103;
      v57 = v96;
      if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
      {
        if (v98)
        {
          *(_QWORD *)&v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (uint64_t *)&v123, 1uLL);
          v57 = v96;
          --*((_QWORD *)&v96 + 1);
        }
        else
        {
          v58 = v95;
          if (!(_QWORD)v96)
          {
LABEL_134:
            v59 = v95;
            v60 = *((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
            {
              if (v86)
              {
                v123 = 0uLL;
                TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
                --*((_QWORD *)&v84 + 1);
              }
              else if ((_QWORD)v84)
              {
                v62 = &v83[16 * v84];
                *((_QWORD *)v62 - 2) = 0;
                *((_QWORD *)v62 - 1) = 0;
              }
            }
            else
            {
              v61 = &v83[16 * *((_QWORD *)&v84 + 1)];
              *v61 = 0;
              v61[1] = 0;
            }
            v63 = v83;
            if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
            {
              if (v86)
              {
                v123 = 0uLL;
                TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
                --*((_QWORD *)&v84 + 1);
              }
              else if ((_QWORD)v84)
              {
                v65 = &v83[16 * v84];
                *((_QWORD *)v65 - 2) = 0;
                *((_QWORD *)v65 - 1) = 0;
              }
            }
            else
            {
              v64 = &v83[16 * *((_QWORD *)&v84 + 1)];
              *v64 = 0;
              v64[1] = 0;
            }
            LOBYTE(v72) = 0;
            result = (*(uint64_t (**)(uint64_t, const __int32 *, __int32 *, _QWORD, _BYTE *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, int))(*(_QWORD *)v77 + 16))(v77, v78, v76, v82, v55, &v56[8 * v53], v58, &v59[8 * v60], v63, &v83[16 * *((_QWORD *)&v84 + 1)], -1, v72);
            goto LABEL_164;
          }
          *(_QWORD *)&v95[8 * v96 - 8] = 0;
        }
      }
      else
      {
        *(_QWORD *)&v95[8 * *((_QWORD *)&v96 + 1)] = 0;
      }
      v58 = v95;
      if (*((_QWORD *)&v96 + 1) >= v57)
      {
        if (v98)
        {
          *(_QWORD *)&v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (uint64_t *)&v123, 1uLL);
          --*((_QWORD *)&v96 + 1);
        }
        else if (v57)
        {
          *(_QWORD *)&v95[8 * v57 - 8] = 0;
        }
      }
      else
      {
        *(_QWORD *)&v95[8 * *((_QWORD *)&v96 + 1)] = 0;
      }
      goto LABEL_134;
    }
    v24 = -1;
    if (*((_QWORD *)&v104 + 1) | *((_QWORD *)&v96 + 1))
    {
      v82 = 0;
      goto LABEL_92;
    }
LABEL_64:
    if (v79 != -1)
    {
      v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22]);
      v36 = *(_QWORD *)(v7 + 16);
      if (v35 != -1)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 24))(v36, *(_QWORD *)&v119[8 * v22]);
        goto LABEL_164;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 24))(v36, v79);
    }
    if (v24 == -1)
    {
      (*(void (**)(_QWORD, _QWORD, _BYTE **))(**(_QWORD **)(v7 + 16) + 80))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22], &v87);
      TBuffer<TPItnRuleControl>::resize((uint64_t)&v83, 0);
      v38 = *((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v39 = 0;
        v40 = 0;
        while (!v21)
        {
          v41 = *(_QWORD *)&v87[v39];
          if ((unint64_t)(v41 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
            goto LABEL_78;
LABEL_79:
          ++v40;
          v39 += 16;
          if (v40 >= v38)
            goto LABEL_80;
        }
        v41 = *(_QWORD *)&v87[v39];
LABEL_78:
        v42 = *(_QWORD *)&v87[v39 + 8];
        *(_QWORD *)&v123 = v41;
        *((_QWORD *)&v123 + 1) = v42;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        v38 = *((_QWORD *)&v88 + 1);
        goto LABEL_79;
      }
    }
LABEL_80:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_QWORD *)(v7 + 16), *(_QWORD *)&v119[8 * v22]);
    v43 = (const __int32 *)v81;
    if (*(char *)(v80 + 55) < 0)
      v43 = *v81;
    v44 = *(_QWORD *)(v7 + 16);
    if (v21)
    {
      v45 = v75;
      if (*(char *)(v80 + 79) < 0)
        v45 = *(__int32 **)v75;
    }
    else if (*((_QWORD *)&v112 + 1) >= (unint64_t)v112)
    {
      if (v114)
      {
        LODWORD(v123) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
        v45 = v111;
        --*((_QWORD *)&v112 + 1);
      }
      else
      {
        v45 = v111;
        if ((_QWORD)v112)
          v111[(_QWORD)v112 - 1] = 0;
      }
    }
    else
    {
      v45 = v111;
      v111[*((_QWORD *)&v112 + 1)] = 0;
    }
    if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
    {
      if (v86)
      {
        v123 = 0uLL;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        --*((_QWORD *)&v84 + 1);
      }
      else if ((_QWORD)v84)
      {
        v67 = &v83[16 * v84];
        *((_QWORD *)v67 - 2) = 0;
        *((_QWORD *)v67 - 1) = 0;
      }
    }
    else
    {
      v66 = &v83[16 * *((_QWORD *)&v84 + 1)];
      *v66 = 0;
      v66[1] = 0;
    }
    v68 = v83;
    if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
    {
      if (v86)
      {
        v123 = 0uLL;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        --*((_QWORD *)&v84 + 1);
      }
      else if ((_QWORD)v84)
      {
        v70 = &v83[16 * v84];
        *((_QWORD *)v70 - 2) = 0;
        *((_QWORD *)v70 - 1) = 0;
      }
    }
    else
    {
      v69 = &v83[16 * *((_QWORD *)&v84 + 1)];
      *v69 = 0;
      v69[1] = 0;
    }
    LOBYTE(v72) = 0;
    result = (*(uint64_t (**)(uint64_t, const __int32 *, __int32 *, BOOL, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t, int))(*(_QWORD *)v44 + 16))(v44, v43, v45, v21 != 0, 0, 0, 0, 0, v68, &v83[16 * *((_QWORD *)&v84 + 1)], -1, v72);
    v79 = result;
LABEL_164:
    ++v22;
  }
  while (v22 < *((_QWORD *)&v120 + 1));
  if (v21)
    goto LABEL_168;
LABEL_174:
  if (v86)
  {
    result = (uint64_t)v83;
    if (v83 != v85)
    {
      if (v83)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v90)
  {
    result = (uint64_t)v87;
    if (v87 != v89)
    {
      if (v87)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v94)
  {
    result = (uint64_t)v91;
    if (v91 != v93)
    {
      if (v91)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v98)
  {
    result = (uint64_t)v95;
    if (v95 != v97)
    {
      if (v95)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v102)
  {
    result = (uint64_t)v99;
    if (v99 != v101)
    {
      if (v99)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v106)
  {
    result = (uint64_t)v103;
    if (v103 != v105)
    {
      if (v103)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v110)
  {
    result = (uint64_t)v107;
    if (v107 != (__int32 *)v109)
    {
      if (v107)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v114)
  {
    result = (uint64_t)v111;
    if (v111 != (__int32 *)v113)
    {
      if (v111)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v118)
  {
    result = (uint64_t)v115;
    if (v115 != v117)
    {
      if (v115)
        result = MEMORY[0x20BD149A8]();
    }
  }
  if (v122)
  {
    result = (uint64_t)v119;
    if (v119 != v121)
    {
      if (v119)
        result = MEMORY[0x20BD149A8]();
    }
  }
LABEL_214:
  *(_QWORD *)(v74 + 136) = v73;
  return result;
}

void sub_2098C0D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_BYTE *a24,uint64_t a25,uint64_t a26,uint64_t a27,_BYTE *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  if (*a28)
  {
    if (a38 != a14 && a38 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (*a24)
  {
    v41 = STACK[0x1108];
    if (STACK[0x1108] != a15)
    {
      if (v41)
        MEMORY[0x20BD149A8](v41, 0x80C40803F642BLL);
    }
  }
  if (LOBYTE(STACK[0x2940]))
  {
    v42 = STACK[0x2128];
    if (STACK[0x2128] != a16)
    {
      if (v42)
        MEMORY[0x20BD149A8](v42, 0x80C40B8603338);
    }
  }
  if (LOBYTE(STACK[0x3160]))
  {
    v43 = STACK[0x2948];
    if (STACK[0x2948] != a17)
    {
      if (v43)
        MEMORY[0x20BD149A8](v43, 0x80C40B8603338);
    }
  }
  if (LOBYTE(STACK[0x3980]))
  {
    v44 = STACK[0x3168];
    if (STACK[0x3168] != a18)
    {
      if (v44)
        MEMORY[0x20BD149A8](v44, 0x80C40B8603338);
    }
  }
  if (LOBYTE(STACK[0x41A0]))
  {
    v45 = STACK[0x3988];
    if (STACK[0x3988] != a19)
    {
      if (v45)
        MEMORY[0x20BD149A8](v45, 0x80C40B8603338);
    }
  }
  if (*(_BYTE *)(v38 + 1048))
  {
    v46 = STACK[0x41A8];
    if (STACK[0x41A8] != a20)
    {
      if (v46)
        MEMORY[0x20BD149A8](v46, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x49E0]))
  {
    v47 = STACK[0x45C8];
    if (STACK[0x45C8] != a21)
    {
      if (v47)
        MEMORY[0x20BD149A8](v47, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x5200]))
  {
    v48 = STACK[0x49E8];
    if (STACK[0x49E8] != a22)
    {
      if (v48)
        MEMORY[0x20BD149A8](v48, 0x80C40B8603338);
    }
  }
  if (LOBYTE(STACK[0x5A20]))
  {
    v49 = STACK[0x5208];
    if (STACK[0x5208] != a23)
    {
      if (v49)
        MEMORY[0x20BD149A8](v49, 0x80C40B8603338);
    }
  }
  *(_QWORD *)(a26 + 136) = a25;
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::set(TBoolParam *this, char a2)
{
  uint64_t ActiveConfigHandle;

  ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  *((_BYTE *)this + ActiveConfigHandle + 176) = a2;
  *((_QWORD *)this + 14) |= 1 << (ActiveConfigHandle + 33);
  return TParam::notifyChange((uint64_t)this, ActiveConfigHandle);
}

uint64_t TResultManager::getHintRange(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 104 * a2 - 104);
}

uint64_t TResultManager::getResultWithHints(TResultManager *this)
{
  return *((_QWORD *)this + 11);
}

BOOL TResultManager::isValidHint(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  return 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 72) - v2) >> 3) >= a2 && v2 != 0;
}

void std::vector<std::pair<unsigned long,unsigned long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<std::pair<unsigned long,unsigned long>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<std::pair<unsigned long,unsigned long>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unsigned __int16 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v128;
  void **v130;
  int v131;
  int v132;
  _QWORD *v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  unint64_t v165;
  char v166;
  BOOL v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  unint64_t v178;
  uint64_t v179;
  unint64_t *v181;
  unint64_t *v182;
  uint64_t v186;
  void **v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;

  v8 = a1;
  v9 = (uint64_t *)(a1 + 152);
  TFsa::topologicalSort(a2, (char **)(a1 + 152));
  v189 = (uint64_t *)(v8 + 176);
  TFsa::topologicalSort(a3, (char **)(v8 + 176));
  v181 = a3;
  v182 = a2;
  v10 = a2[14] - a2[13];
  v11 = v10 >> 3;
  v12 = (uint64_t)(a3[14] - a3[13]) >> 3;
  v198 = (uint64_t *)(v8 + 56);
  std::vector<unsigned long>::resize(v8 + 56, 2 * ((v10 >> 1) + (v10 >> 3)));
  v13 = (_QWORD *)(v8 + 80);
  std::vector<unsigned short>::resize(v8 + 80, (uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 3);
  std::vector<unsigned long>::resize(v8 + 200, 0);
  v187 = (void **)(v8 + 200);
  std::vector<unsigned long>::reserve((void **)(v8 + 200), 0xAuLL);
  v14 = (_QWORD *)(v8 + 216);
  v15 = *(char **)(v8 + 208);
  v16 = 1;
  v188 = (_QWORD *)(v8 + 216);
  v192 = v9;
  do
  {
    v17 = v16 * v11;
    if ((unint64_t)v15 >= *v14)
    {
      v20 = (char *)*v187;
      v21 = (v15 - (_BYTE *)*v187) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
LABEL_259:
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v23 = *v14 - (_QWORD)v20;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v14, v24);
        v20 = *(char **)(v8 + 200);
        v15 = *(char **)(v8 + 208);
      }
      else
      {
        v25 = 0;
      }
      v26 = (unint64_t *)&v25[8 * v21];
      *v26 = v17;
      v18 = (char *)(v26 + 1);
      if (v15 == v20)
      {
        v19 = v192;
      }
      else
      {
        v19 = v192;
        do
        {
          v27 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v26 = v27;
        }
        while (v15 != v20);
      }
      *(_QWORD *)(v8 + 200) = v26;
      *(_QWORD *)(v8 + 208) = v18;
      *(_QWORD *)(v8 + 216) = &v25[8 * v24];
      if (v20)
        operator delete(v20);
      v14 = (_QWORD *)(v8 + 216);
    }
    else
    {
      *(_QWORD *)v15 = v17;
      v18 = v15 + 8;
      v19 = v192;
    }
    *(_QWORD *)(v8 + 208) = v18;
    ++v16;
    v15 = v18;
  }
  while (v16 != 10);
  v28 = (_QWORD *)(v8 + 224);
  std::vector<unsigned long>::resize(v8 + 224, v12);
  v29 = *(_QWORD *)(v8 + 104);
  v30 = *(_QWORD *)(v8 + 112);
  v31 = (_QWORD *)(v8 + 104);
  v32 = v12 * v11;
  if (v12 * v11 <= v30 - v29)
  {
    if (v12 * v11 < v30 - v29)
    {
      v30 = v29 + v32;
      *(_QWORD *)(v8 + 112) = v29 + v32;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(v8 + 104), v12 * v11 - (v30 - v29));
    v29 = *(_QWORD *)(v8 + 104);
    v30 = *(_QWORD *)(v8 + 112);
  }
  v33 = (_QWORD *)(v8 + 128);
  std::vector<unsigned long>::resize(v8 + 128, v30 - v29);
  v34 = (uint64_t *)v182[13];
  v35 = (uint64_t *)v182[14];
  if (v34 == v35)
  {
    v36 = (_QWORD *)(v8 + 216);
  }
  else
  {
    v36 = (_QWORD *)(v8 + 216);
    while (!*v34)
    {
      if (++v34 == v35)
        goto LABEL_38;
    }
  }
  if (v34 != v35)
  {
    v37 = *(_QWORD *)(v8 + 56);
LABEL_34:
    v39 = *v34;
    v38 = v34 + 1;
    *(_QWORD *)(v37 + 8 * *(_QWORD *)(v39 + 8)) = *(_QWORD *)(v8 + 24);
    while (v38 != v35)
    {
      if (*v38++)
      {
        v34 = v38 - 1;
        goto LABEL_34;
      }
    }
  }
LABEL_38:
  v41 = *(_QWORD *)(v8 + 176);
  v191 = (_QWORD *)(v8 + 128);
  if (*(_QWORD *)(v8 + 184) == v41)
    goto LABEL_141;
  v42 = 0;
  v186 = 10;
  v190 = v8;
  do
  {
    v43 = *(_QWORD *)(v41 + 8 * v42);
    v44 = *(_QWORD **)(v43 + 24);
    v193 = v42;
    if (!v44)
      goto LABEL_119;
    do
    {
      v45 = *(char **)(v8 + 208);
      v194 = v44;
      if (*(char **)(v8 + 200) == v45)
      {
        v46 = v186;
        v47 = 2 * v186;
        std::vector<unsigned long>::resize((uint64_t)v198, 2 * v186 * v11);
        std::vector<unsigned short>::resize((uint64_t)v13, (uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 3);
        v45 = *(char **)(v8 + 208);
        if (v186 < 1)
        {
          v186 *= 2;
          v42 = v193;
          v44 = v194;
        }
        else
        {
          v48 = v188;
          v42 = v193;
          v44 = v194;
          do
          {
            v49 = v46 * v11;
            if ((unint64_t)v45 >= *v48)
            {
              v50 = (char *)*v187;
              v51 = (v45 - (_BYTE *)*v187) >> 3;
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61)
                goto LABEL_259;
              v53 = *v48 - (_QWORD)v50;
              if (v53 >> 2 > v52)
                v52 = v53 >> 2;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                v54 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v48, v54);
                v50 = *(char **)(v8 + 200);
                v45 = *(char **)(v8 + 208);
              }
              else
              {
                v55 = 0;
              }
              v56 = (unint64_t *)&v55[8 * v51];
              *v56 = v49;
              v57 = (char *)(v56 + 1);
              if (v45 == v50)
              {
                v19 = v192;
              }
              else
              {
                v19 = v192;
                do
                {
                  v58 = *((_QWORD *)v45 - 1);
                  v45 -= 8;
                  *--v56 = v58;
                }
                while (v45 != v50);
              }
              *(_QWORD *)(v8 + 200) = v56;
              *(_QWORD *)(v8 + 208) = v57;
              *(_QWORD *)(v8 + 216) = &v55[8 * v54];
              if (v50)
                operator delete(v50);
              v45 = v57;
              v48 = v188;
              v42 = v193;
              v44 = v194;
              v47 = 2 * v186;
            }
            else
            {
              *(_QWORD *)v45 = v49;
              v45 += 8;
            }
            *(_QWORD *)(v8 + 208) = v45;
            ++v46;
          }
          while (v46 < v47);
          v186 = v47;
        }
      }
      v59 = *((_QWORD *)v45 - 1);
      *(_QWORD *)(v8 + 208) = v45 - 8;
      *(_QWORD *)(*(_QWORD *)(v8 + 224) + 8 * v44[1]) = v59;
      v61 = *(_QWORD *)(v8 + 152);
      v60 = *(_QWORD *)(v8 + 160);
      if (v60 == v61)
        goto LABEL_117;
      v62 = 0;
      v63 = *(_QWORD *)(v8 + 40);
      v64 = v44[1] * v11;
      do
      {
        v65 = *(uint64_t **)(*(_QWORD *)(v61 + 8 * v62) + 24);
        if (!v65)
          goto LABEL_116;
        v195 = v62;
        do
        {
          v66 = *v19;
          v67 = *v65;
          v68 = v65[1];
          v69 = *v44;
          if (*v65 == *v44)
          {
            v70 = 0;
            v71 = *v189;
LABEL_75:
            v75 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v42) + 16);
            if (!v75)
            {
              LOBYTE(v72) = 0;
              v73 = 0;
              v74 = 0;
              v76 = -1;
              goto LABEL_104;
            }
            v74 = 0;
            v73 = 0;
            v72 = 0;
            v196 = *v19;
            v77 = *(_QWORD *)(*(_QWORD *)(v66 + 8 * v62) + 16);
            if (v67 == v69)
              v78 = 67;
            else
              v78 = 83;
            v76 = -1;
            v79 = v75;
            do
            {
              if (v77)
              {
                v80 = *(_QWORD *)(v79 + 8);
                v81 = *(_QWORD *)(*v28 + 8 * v80);
                v82 = v80 * v11;
                v83 = v77;
                do
                {
                  v84 = *(_QWORD *)(v83 + 8);
                  v85 = v84 + v81;
                  v86 = *(_WORD *)(*v13 + 2 * (v84 + v81));
                  v87 = v84 + v82;
                  if (v67 == v69 && *(_BYTE *)(*v31 + v87) != 67)
                    ++v86;
                  v88 = *(_QWORD *)(*v198 + 8 * v85) + v70;
                  if (!v72 || v88 < v73 || v88 == v73 && v86 < v74)
                  {
                    v76 = v87;
                    v72 = v78;
                    v73 = v88;
                    v74 = v86;
                  }
                  v83 = *(_QWORD *)(v83 + 32);
                }
                while (v83);
              }
              v79 = *(_QWORD *)(v79 + 32);
            }
            while (v79);
            v8 = v190;
            v33 = v191;
            v19 = v192;
            v42 = v193;
            v44 = v194;
            v62 = v195;
            v66 = v196;
LABEL_93:
            v89 = *v198;
            while (1)
            {
              v90 = *(_QWORD *)(v75 + 8);
              v91 = *(_QWORD *)(*v28 + 8 * v90) + v68;
              v92 = *(_QWORD *)(v89 + 8 * v91) + v63;
              if (v76 == -1 || v92 < v73)
              {
                LOWORD(v93) = *(_WORD *)(*v13 + 2 * v91);
              }
              else
              {
                if (v92 != v73)
                  goto LABEL_101;
                v93 = *(unsigned __int16 *)(*v13 + 2 * v91);
                if (v93 >= v74)
                  goto LABEL_101;
              }
              v76 = v68 + v90 * v11;
              LOBYTE(v72) = 73;
              v73 = *(_QWORD *)(v89 + 8 * v91) + v63;
              v74 = v93;
LABEL_101:
              v75 = *(_QWORD *)(v75 + 32);
              if (!v75)
                goto LABEL_104;
            }
          }
          v70 = *(_QWORD *)(v8 + 8);
          v71 = *(_QWORD *)(v8 + 176);
          if (v70 != -1)
            goto LABEL_75;
          LOBYTE(v72) = 0;
          v73 = 0;
          v74 = 0;
          v75 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v42) + 16);
          v76 = -1;
          if (v75)
            goto LABEL_93;
LABEL_104:
          v94 = *(_QWORD *)(*(_QWORD *)(v66 + 8 * v62) + 16);
          if (v94)
          {
            v95 = *v198;
            v96 = *(_QWORD *)(*v198 + 8 * v68);
            do
            {
              v97 = *(_QWORD *)(v94 + 8);
              v98 = v97 + v59;
              v99 = v96 + *(_QWORD *)(v95 + 8 * (v97 + v59));
              if (v76 == -1 || v99 < v73)
              {
                LOWORD(v100) = *(_WORD *)(*v13 + 2 * v98);
              }
              else
              {
                if (v99 != v73)
                  goto LABEL_113;
                v100 = *(unsigned __int16 *)(*v13 + 2 * v98);
                if (v100 >= v74)
                  goto LABEL_113;
              }
              v76 = v97 + v64;
              LOBYTE(v72) = 68;
              v73 = v96 + *(_QWORD *)(v95 + 8 * (v97 + v59));
              v74 = v100;
LABEL_113:
              v94 = *(_QWORD *)(v94 + 32);
            }
            while (v94);
          }
          *(_QWORD *)(*v33 + 8 * (v68 + v64)) = v76;
          *(_BYTE *)(*v31 + v68 + v64) = v72;
          *(_QWORD *)(*v198 + 8 * (v68 + v59)) = v73;
          *(_WORD *)(*v13 + 2 * (v68 + v59)) = v74;
          v65 = (uint64_t *)v65[5];
        }
        while (v65);
        v61 = *(_QWORD *)(v8 + 152);
        v60 = *(_QWORD *)(v8 + 160);
LABEL_116:
        ++v62;
      }
      while (v62 < (v60 - v61) >> 3);
LABEL_117:
      v44 = (_QWORD *)v44[5];
    }
    while (v44);
    v36 = v188;
    v41 = *v189;
    v43 = *(_QWORD *)(*v189 + 8 * v42);
LABEL_119:
    v101 = *(_QWORD *)(v43 + 16);
    if (v101)
    {
      v102 = *(char **)(v8 + 208);
      do
      {
        v103 = *(_QWORD *)(*v28 + 8 * *(_QWORD *)(v101 + 8));
        if ((unint64_t)v102 >= *v36)
        {
          v105 = (char *)*v187;
          v106 = (v102 - (_BYTE *)*v187) >> 3;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 61)
            goto LABEL_259;
          v108 = *v36 - (_QWORD)v105;
          if (v108 >> 2 > v107)
            v107 = v108 >> 2;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
            v109 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          if (v109)
          {
            v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v36, v109);
            v105 = *(char **)(v8 + 200);
            v102 = *(char **)(v8 + 208);
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[8 * v106];
          *(_QWORD *)v111 = v103;
          v104 = v111 + 8;
          while (v102 != v105)
          {
            v112 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v111 - 1) = v112;
            v111 -= 8;
          }
          *(_QWORD *)(v8 + 200) = v111;
          *(_QWORD *)(v8 + 208) = v104;
          *(_QWORD *)(v8 + 216) = &v110[8 * v109];
          if (v105)
            operator delete(v105);
          v36 = v188;
          v42 = v193;
        }
        else
        {
          *(_QWORD *)v102 = v103;
          v104 = v102 + 8;
        }
        *(_QWORD *)(v8 + 208) = v104;
        v101 = *(_QWORD *)(v101 + 32);
        v102 = v104;
      }
      while (v101);
      v41 = *v189;
      v19 = v192;
    }
    ++v42;
  }
  while (v42 < (*(_QWORD *)(v8 + 184) - v41) >> 3);
LABEL_141:
  v114 = (_QWORD *)v182[22];
  v113 = (_QWORD *)v182[23];
  if (v114 != v113)
  {
    while (!*v114)
    {
      if (++v114 == v113)
        goto LABEL_172;
    }
  }
  if (v114 == v113)
  {
LABEL_172:
    v116 = -1;
    v115 = -1;
  }
  else
  {
    v115 = -1;
    v116 = -1;
LABEL_147:
    v117 = *(_QWORD *)(*v114 + 16);
    if (v117)
    {
      v118 = (_QWORD *)v181[23];
      do
      {
        v119 = (_QWORD *)v181[22];
        if (v119 != v118)
        {
          v119 = (_QWORD *)v181[22];
          while (!*v119)
          {
            if (++v119 == v118)
              goto LABEL_167;
          }
        }
        if (v119 != v118)
        {
LABEL_155:
          v120 = *(_QWORD *)(*v119 + 16);
          if (v120)
          {
            v121 = *(_QWORD *)(v117 + 8);
            do
            {
              v122 = *(_QWORD *)(v120 + 8);
              v123 = v121 + *(_QWORD *)(*v28 + 8 * v122);
              if (v116 == -1
                || (v124 = *(_QWORD *)(*v198 + 8 * v123), v125 = *(_QWORD *)(*v198 + 8 * v115), v124 < v125)
                || v124 == v125
                && *(unsigned __int16 *)(*v13 + 2 * v123) < *(unsigned __int16 *)(*v13 + 2 * v115))
              {
                v116 = v121 + v122 * v11;
                v115 = v121 + *(_QWORD *)(*v28 + 8 * v122);
              }
              v120 = *(_QWORD *)(v120 + 32);
            }
            while (v120);
          }
          v126 = v119 + 1;
          while (v126 != v118)
          {
            if (*v126++)
            {
              v119 = v126 - 1;
              goto LABEL_155;
            }
          }
        }
LABEL_167:
        v117 = *(_QWORD *)(v117 + 32);
      }
      while (v117);
    }
    v128 = v114 + 1;
    while (v128 != v113)
    {
      if (*v128++)
      {
        v114 = v128 - 1;
        goto LABEL_147;
      }
    }
  }
  v130 = a6;
  if (a5)
  {
    std::vector<TItnRule *>::resize(a5, 0);
    std::vector<TPItnTagHandle_fake **>::reserve((void **)a5, (uint64_t)(*(_QWORD *)(v8 + 160) - *(_QWORD *)(v8 + 152)) >> 3);
  }
  if (a6)
  {
    std::vector<TItnRule *>::resize((uint64_t)a6, 0);
    std::vector<TPItnTagHandle_fake **>::reserve(a6, (uint64_t)(*(_QWORD *)(v8 + 184) - *(_QWORD *)(v8 + 176)) >> 3);
  }
  MEMORY[0x20BD14750](a4, &byte_209A88803);
  std::string::reserve((std::string *)a4, ((uint64_t)(*(_QWORD *)(v8 + 160) - *(_QWORD *)(v8 + 152)) >> 3)+ ((uint64_t)(*(_QWORD *)(v8 + 184) - *(_QWORD *)(v8 + 176)) >> 3)+ 1);
  if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * v116) != -1)
  {
    v197 = 0;
    while (1)
    {
      v131 = *(char *)(*v31 + v116);
      v132 = *(unsigned __int8 *)(*v31 + v116);
      std::string::push_back((std::string *)a4, *(_BYTE *)(*v31 + v116));
      if (v131 == 67)
        break;
      ++v197;
      v133 = (_QWORD *)a5;
      if ((v132 & 0xFFFFFFEF) == 0x43)
        goto LABEL_182;
      if (!a5 || v132 != 68)
        goto LABEL_208;
      v134 = 0;
LABEL_187:
      v135 = *(_QWORD *)(v182[13] + 8 * (v116 % v11));
      v137 = (_QWORD *)v133[1];
      v136 = v133[2];
      if ((unint64_t)v137 >= v136)
      {
        v139 = ((uint64_t)v137 - *v133) >> 3;
        if ((unint64_t)(v139 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v140 = v136 - *v133;
        v141 = v140 >> 2;
        if (v140 >> 2 <= (unint64_t)(v139 + 1))
          v141 = v139 + 1;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
          v142 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v142 = v141;
        if (v142)
          v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a5 + 16, v142);
        else
          v143 = 0;
        v144 = &v143[8 * v139];
        *(_QWORD *)v144 = v135;
        v138 = v144 + 8;
        v146 = *(char **)a5;
        v145 = *(char **)(a5 + 8);
        if (v145 == *(char **)a5)
        {
          v148 = (_QWORD *)a5;
        }
        else
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *((_QWORD *)v144 - 1) = v147;
            v144 -= 8;
          }
          while (v145 != v146);
          v148 = (_QWORD *)a5;
          v145 = *(char **)a5;
        }
        *v148 = v144;
        v148[1] = v138;
        v148[2] = &v143[8 * v142];
        if (v145)
        {
          operator delete(v145);
          v133 = (_QWORD *)a5;
        }
        else
        {
          v133 = v148;
        }
      }
      else
      {
        *v137 = v135;
        v138 = v137 + 1;
      }
      v133[1] = v138;
      v33 = v191;
      if ((v134 & 1) != 0)
      {
LABEL_206:
        v130 = a6;
        if (a6)
          goto LABEL_210;
        goto LABEL_227;
      }
LABEL_208:
      if (a6)
      {
        v130 = a6;
        if (v132 == 73)
        {
LABEL_210:
          v149 = *(_QWORD *)(v181[13] + 8 * (v116 / v11));
          v151 = v130[1];
          v150 = (unint64_t)v130[2];
          if ((unint64_t)v151 >= v150)
          {
            v153 = ((char *)v151 - (_BYTE *)*v130) >> 3;
            if ((unint64_t)(v153 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v154 = v150 - (_QWORD)*v130;
            v155 = v154 >> 2;
            if (v154 >> 2 <= (unint64_t)(v153 + 1))
              v155 = v153 + 1;
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
              v156 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v156 = v155;
            if (v156)
              v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a6 + 2), v156);
            else
              v157 = 0;
            v158 = &v157[8 * v153];
            *(_QWORD *)v158 = v149;
            v152 = v158 + 8;
            v160 = (char *)*v130;
            v159 = (char *)v130[1];
            if (v159 != *v130)
            {
              do
              {
                v161 = *((_QWORD *)v159 - 1);
                v159 -= 8;
                *((_QWORD *)v158 - 1) = v161;
                v158 -= 8;
              }
              while (v159 != v160);
              v159 = (char *)*v130;
            }
            *v130 = v158;
            v130[1] = v152;
            v130[2] = &v157[8 * v156];
            if (v159)
              operator delete(v159);
          }
          else
          {
            *v151 = v149;
            v152 = v151 + 1;
          }
          v130[1] = v152;
        }
      }
      else
      {
        v130 = 0;
      }
LABEL_227:
      v116 = *(_QWORD *)(*v33 + 8 * v116);
      if (*(_QWORD *)(*v33 + 8 * v116) == -1)
        goto LABEL_230;
    }
    v133 = (_QWORD *)a5;
LABEL_182:
    if (!v133)
      goto LABEL_206;
    v134 = 1;
    goto LABEL_187;
  }
LABEL_230:
  v162 = *(unsigned __int8 *)(a4 + 23);
  if ((v162 & 0x80u) == 0)
    v163 = a4;
  else
    v163 = *(_QWORD *)a4;
  if ((v162 & 0x80u) != 0)
    v162 = *(_QWORD *)(a4 + 8);
  if (v162)
  {
    v164 = (_BYTE *)(v163 + v162 - 1);
    if ((unint64_t)v164 > v163)
    {
      v165 = v163 + 1;
      do
      {
        v166 = *(_BYTE *)(v165 - 1);
        *(_BYTE *)(v165 - 1) = *v164;
        *v164-- = v166;
        v167 = v165++ >= (unint64_t)v164;
      }
      while (!v167);
    }
  }
  if (a5)
  {
    v168 = *(char **)a5;
    v169 = *(_QWORD *)(a5 + 8);
    v170 = (char *)(v169 - 8);
    if (*(_QWORD *)a5 != v169 && v170 > v168)
    {
      v172 = v168 + 8;
      do
      {
        v173 = *((_QWORD *)v172 - 1);
        *((_QWORD *)v172 - 1) = *(_QWORD *)v170;
        *(_QWORD *)v170 = v173;
        v170 -= 8;
        v167 = v172 >= v170;
        v172 += 8;
      }
      while (!v167);
    }
  }
  if (v130)
  {
    v174 = (unint64_t)*v130;
    v175 = (char *)v130[1];
    v176 = v175 - 8;
    if (*v130 != v175 && (unint64_t)v176 > v174)
    {
      v178 = v174 + 8;
      do
      {
        v179 = *(_QWORD *)(v178 - 8);
        *(_QWORD *)(v178 - 8) = *(_QWORD *)v176;
        *(_QWORD *)v176 = v179;
        v176 -= 8;
        v167 = v178 >= (unint64_t)v176;
        v178 += 8;
      }
      while (!v167);
    }
  }
  return *(_QWORD *)(*v198 + 8 * v115);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void TResult::TResult(TResult *this, const TResult *a2)
{
  char *v4;

  *(_WORD *)this = *(_WORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::wstring *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<TItnControlState>::__init_with_size[abi:ne180100]<TItnControlState*,TItnControlState*>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 6);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  v4 = (char *)operator new[]();
  *((_QWORD *)this + 2) = v4;
  strcpy(v4, *((const char **)a2 + 2));
}

void sub_2098C2038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a2);
  v7 = *v5;
  if (*v5)
  {
    v2[14] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v2[11] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v2[8] = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::wstring *std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::wstring *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::wstring *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::wstring>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::wstring *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_2098C20FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<TItnControlState>::__init_with_size[abi:ne180100]<TItnControlState*,TItnControlState*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TItnControlState>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2098C2178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnControlState>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2098C2264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[22];
  if (v4)
  {
    a1[23] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[19];
  if (v5)
  {
    a1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[16];
  if (v6)
  {
    a1[17] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[13];
  if (v7)
  {
    a1[14] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[10];
  if (v8)
  {
    a1[11] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  return a1;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 8 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2098C2600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(std::vector<std::wstring> *this, std::wstring *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::wstring *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::wstring>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::wstring>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_2098C2860(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2098C2868(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>(uint64_t a1, __int128 *a2, __int128 *a3, std::wstring *this)
{
  std::wstring *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::wstring *v11;
  std::wstring *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2098C2918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::wstring *std::vector<std::wstring>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(std::vector<std::wstring> *a1, std::wstring *a2, std::wstring *a3, __int128 *a4, uint64_t a5)
{
  std::wstring *v5;
  std::allocator<std::wstring> *p_end_cap;
  std::wstring *v10;
  std::wstring *value;
  std::wstring *v12;
  std::vector<std::wstring>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::wstring *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::wstring> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::wstring> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::wstring *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, v21, a4, *((std::wstring **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::wstring>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(a3, (std::wstring *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::wstring>::__construct_at_end_with_size<std::__wrap_iter<std::wstring const*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::wstring>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
    }
  }
  return v5;
}

void sub_2098C2ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::wstring>::__move_range(std::vector<std::wstring> *this, std::vector<std::wstring>::pointer __from_s, std::vector<std::wstring>::pointer __from_e, std::vector<std::wstring>::pointer __to)
{
  std::vector<std::wstring>::pointer end;
  char *v7;
  std::vector<std::wstring>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::wstring *,std::wstring *,std::wstring *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::wstring>::__construct_at_end_with_size<std::__wrap_iter<std::wstring const*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::wstring *v4;
  std::wstring *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::wstring **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_2098C2BE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::wstring>::pointer std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v, std::vector<std::wstring>::pointer __p)
{
  std::wstring *begin;
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *v8;
  std::wstring *v9;
  std::wstring *end;
  std::wstring *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::wstring>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::wstring *,std::wstring *,std::wstring *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_DWORD *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

char *std::vector<TItnControlState>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 6)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<TItnControlState>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 6;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 << 6);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<TItnControlState>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 6)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 6);
    if (v14 >> 58)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 6;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 5 > v14)
      v14 = v16 >> 5;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
      v17 = 0x3FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v41 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v9, v17);
    else
      v18 = 0;
    v30 = &v18[64 * v15];
    __p = v18;
    v38 = v30;
    v40 = &v18[64 * v17];
    v31 = a5 << 6;
    v32 = &v30[64 * a5];
    do
    {
      v33 = *(_OWORD *)v7;
      v34 = *((_OWORD *)v7 + 1);
      v35 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v30 + 3) = v35;
      *(_OWORD *)v30 = v33;
      *((_OWORD *)v30 + 1) = v34;
      v30 += 64;
      v7 += 64;
      v31 -= 64;
    }
    while (v31);
    v39 = v32;
    v5 = (char *)std::vector<TItnControlState>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38)
      v39 += (v38 - v39 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 6;
  if (v20 >= a5)
  {
    v21 = &__src[64 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[64 * a5];
    v25 = &v23[-64 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 64;
        v25 += 64;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-64 * ((v23 - v24) >> 6)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[64 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[64 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2098C3090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnControlState>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  void *v17;
  void *v18;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 4);
      v11 = *((_OWORD *)v8 - 3);
      v12 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 64);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v8 -= 64;
      v9 -= 64;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v14 + v15;
  v16 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v17;
  v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *a1, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  unsigned int v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_QWORD *)v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 4 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 4;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_QWORD *)v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<TItnControlState>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[64 * v10];
    v15 = &v13[64 * v12];
    memset(v14, 255, a2 << 6);
    v16 = &v14[64 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 4);
        v20 = *((_OWORD *)v17 - 3);
        v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<THint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<THint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<THint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0)
    operator delete(*(void **)(a2 + 80));
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
}

uint64_t std::vector<THint>::__push_back_slow_path<THint>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v18[5];

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v18[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[104 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[104 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v14 = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(v11 + 56) = v14;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v15 = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
  *((_OWORD *)v11 + 5) = v15;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v18[2] = v11 + 104;
  std::vector<THint>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<THint>::~__split_buffer(v18);
  return v16;
}

void sub_2098C3628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<THint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<THint>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<THint>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<THint>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v9 - 104) = v10;
      v11 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v11;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v12 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v12;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v13 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 104;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 -= 104;
      a3 -= 104;
    }
    while (a3 != a5);
    *((_QWORD *)&v18 + 1) = v9;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<THint>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<THint>::~__split_buffer(void **a1)
{
  std::__split_buffer<THint>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<THint>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<THint>::destroy[abi:ne180100](v4, i - 104);
  }
}

uint64_t TBuffer<TPItnRuleControl>::insert(uint64_t result, unint64_t a2, __int128 *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 4120))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, 16 * v7);
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x20BD149A8](v12, 0x80C40803F642BLL);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  if (v8 < v7)
  {
    v13 = *(_QWORD *)(v6 + 8);
    if (v8 + a4 < v13)
    {
      if (v13 >= v7 + a4)
        v13 = v7 + a4;
      v14 = v13 - (v8 + a4);
      if (v14)
      {
        v15 = 16 * v13 - 16;
        do
        {
          *(_OWORD *)(*(_QWORD *)v6 + v15) = *(_OWORD *)(*(_QWORD *)v6 + v15 - 16 * a4);
          v15 -= 16;
          --v14;
        }
        while (v14);
      }
    }
  }
  v16 = *(_QWORD *)(v6 + 8);
  v17 = v16 - v8;
  if (v16 > v8)
  {
    if (v17 >= a4)
      v17 = a4;
    if (v17)
    {
      v18 = 16 * v8;
      do
      {
        v19 = *a3++;
        *(_OWORD *)(*(_QWORD *)v6 + v18) = v19;
        v18 += 16;
        --v17;
      }
      while (v17);
      v16 = *(_QWORD *)(v6 + 8);
    }
  }
  v20 = *(_QWORD *)(v6 + 16) + a4;
  *(_QWORD *)(v6 + 16) = v20;
  if (v20 < v16)
  {
    v21 = (_QWORD *)(*(_QWORD *)v6 + 16 * v20);
    *v21 = 0;
    v21[1] = 0;
  }
  return result;
}

void OUTLINED_FUNCTION_0_2()
{
  JUMPOUT(0x20BD149A8);
}

void FileHistory::FileHistory(FileHistory *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((int32x2_t *)this + 2) = vdup_n_s32(0x3E8u);
  FileHistory::addEntryWithVersionAndCurrentTime(this, "CreationTime ", 0, 0);
}

void sub_2098C3AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<DgnString *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void FileHistory::FileHistory(FileHistory *this, int a2, int a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  FileHistory::addEntryWithVersionAndCurrentTime(this, "CreationTime ", 0, 0);
}

void sub_2098C3B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<DgnString *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void FileHistory::~FileHistory(FileHistory *this)
{
  DgnIOwnArray<DgnString *>::releaseAll((uint64_t)this);
  DgnIOwnArray<DgnString *>::releaseAll((uint64_t)this);
}

_QWORD *FileHistory::addEntryWithVersionAndCurrentTime(FileHistory *this, const char *a2, int a3, int a4)
{
  char *v7;
  DgnString *v8;

  FileHistory::addOneEntry(this, a2);
  addVersionAndCurrentTime(*(DgnString **)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1)));
  if (a3)
  {
    if (a4)
      v7 = " (text)";
    else
      v7 = " (binary)";
    DgnString::operator+=(*(DgnString **)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1)), v7);
  }
  v8 = *(DgnString **)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1));
  if (*((_DWORD *)v8 + 2) <= 0x4Fu)
  {
    do
      DgnString::operator+=(v8, " ");
    while (*((_DWORD *)v8 + 2) < 0x50u);
  }
  return FileHistory::limitEntries(this);
}

_QWORD *DgnIOwnArray<DgnString *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnString>(*(DgnString **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void FileHistory::loadFileHistory(FileHistory *this, DFile *a2, int a3)
{
  DgnStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;

  if (DFile::subFileExists((uint64_t)a2, 0x1Bu))
  {
    v6 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x1Bu, 3, 1);
    DgnIOwnArray<DgnString *>::releaseAll((uint64_t)this);
    DgnString::DgnString((DgnString *)&v13);
    while (((*(uint64_t (**)(DgnStream *))(*(_QWORD *)v6 + 56))(v6) & 1) == 0)
    {
      DgnStream::getLine(v6, (DgnString *)&v13, v7, v8, v9, v10, v11, v12);
      if (v14 >= 2)
        FileHistory::addOneEntry(this, v13);
    }
    (**(void (***)(DgnStream *))v6)(v6);
    MemChunkFree(v6, 0);
    FileHistory::addEntryWithVersionAndCurrentTime(this, "LoadTime ", 1, a3);
    FileHistory::limitEntries(this);
    DgnString::~DgnString((DgnString *)&v13);
  }
}

void sub_2098C3D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

DgnString *FileHistory::addOneEntry(FileHistory *this, const char *a2)
{
  uint64_t *v4;
  DgnString *result;
  unsigned int v6;

  v4 = MemChunkAlloc(0x10uLL, 0);
  result = DgnString::DgnString((DgnString *)v4, a2);
  v6 = *((_DWORD *)this + 2);
  if (v6 == *((_DWORD *)this + 3))
  {
    result = (DgnString *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 1, 1);
    v6 = *((_DWORD *)this + 2);
  }
  *(_QWORD *)(*(_QWORD *)this + 8 * v6) = v4;
  *((_DWORD *)this + 2) = v6 + 1;
  return result;
}

_QWORD *FileHistory::limitEntries(_QWORD *this)
{
  unsigned int v1;
  unsigned int v2;
  FileHistory *v3;
  int v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;

  v1 = *((_DWORD *)this + 2);
  v2 = *((_DWORD *)this + 4);
  if (v1 > v2 + *((_DWORD *)this + 5) + 1)
  {
    v3 = (FileHistory *)this;
    v14 = *this;
    v4 = *((_DWORD *)this + 3);
    v15 = v1;
    v16 = v4;
    *this = 0;
    this[1] = 0;
    if (v2)
    {
      v5 = 0;
      for (i = 0; i < v2; *(_QWORD *)(v14 + 8 * i++) = 0)
      {
        v7 = *(_QWORD *)(v14 + 8 * i);
        if (v5 == *((_DWORD *)v3 + 3))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
          v5 = *((_DWORD *)v3 + 2);
          v2 = *((_DWORD *)v3 + 4);
        }
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v5++) = v7;
        *((_DWORD *)v3 + 2) = v5;
      }
    }
    DgnString::DgnString((DgnString *)&v12);
    DgnString::operator=((DgnString *)&v12, "[ ... ClearTime ");
    addVersionAndCurrentTime((DgnString *)&v12);
    DgnString::operator+=((DgnString *)&v12, " ... ]");
    if (v13 <= 0x4F)
    {
      do
        DgnString::operator+=((DgnString *)&v12, " ");
      while (v13 < 0x50);
    }
    FileHistory::addOneEntry(v3, v12);
    v8 = *((_DWORD *)v3 + 5);
    if (v1 - v8 < v1)
    {
      v9 = *((_DWORD *)v3 + 2);
      v10 = 8 * (v1 - v8);
      do
      {
        v11 = *(_QWORD *)(v14 + v10);
        if (v9 == *((_DWORD *)v3 + 3))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
          v9 = *((_DWORD *)v3 + 2);
        }
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v9++) = v11;
        *((_DWORD *)v3 + 2) = v9;
        *(_QWORD *)(v14 + v10) = 0;
        v10 += 8;
        --v8;
      }
      while (v8);
    }
    DgnIOwnArray<DgnString *>::releaseAll((uint64_t)&v14);
    DgnString::~DgnString((DgnString *)&v12);
    return DgnIOwnArray<DgnString *>::releaseAll((uint64_t)&v14);
  }
  return this;
}

void sub_2098C3F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnIOwnArray<DgnString *>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FileHistory::saveFileHistory(FileHistory *this, DFile *a2, int a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;

  v5 = (_QWORD *)DFile::openSubFile((uint64_t)a2, 0x1Bu, 1, 1);
  if (*((_DWORD *)this + 2))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)this + 8 * v6);
      v8 = *(_DWORD *)(v7 + 8);
      if (v8)
        v9 = *(char **)v7;
      else
        v9 = &byte_209A88803;
      v10 = v8 != 0;
      v11 = v8 - 1;
      if (v10)
        v12 = v11;
      else
        v12 = 0;
      (*(void (**)(_QWORD *, char *, uint64_t))(*v5 + 80))(v5, v9, v12);
      (*(void (**)(_QWORD *, const char *, uint64_t))(*v5 + 80))(v5, "\n", 1);
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 2));
  }
  FileHistory::addEntryWithVersionAndCurrentTime(this, "SaveTime ", 1, a3);
  v13 = *(_QWORD *)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1));
  v14 = *(_DWORD *)(v13 + 8);
  if (v14)
    v15 = *(char **)v13;
  else
    v15 = &byte_209A88803;
  v10 = v14 != 0;
  v16 = v14 - 1;
  if (v10)
    v17 = v16;
  else
    v17 = 0;
  (*(void (**)(_QWORD *, char *, uint64_t))(*v5 + 80))(v5, v15, v17);
  (*(void (**)(_QWORD *, const char *, uint64_t))(*v5 + 80))(v5, "\n", 1);
  (*(void (**)(_QWORD *))*v5)(v5);
  return MemChunkFree(v5, 0);
}

DgnString *addVersionAndCurrentTime(DgnString *a1)
{
  DgnString *v2;
  char *MrecName;
  char *MrecVersion;

  DgnString::preAllocate((unint64_t)a1, 256);
  MrecTime::appendLocalTimeToString(a1, v2);
  DgnString::operator+=(a1, " ");
  MrecName = (char *)GetMrecName();
  DgnString::operator+=(a1, MrecName);
  DgnString::operator+=(a1, " ");
  MrecVersion = (char *)GetMrecVersion();
  return DgnString::operator+=(a1, MrecVersion);
}

_QWORD *FileHistory::addEntry(FileHistory *this, const char *a2)
{
  FileHistory::addOneEntry(this, a2);
  return FileHistory::limitEntries(this);
}

_QWORD *FileHistory::addEntryWithElapsedTime(FileHistory *this, const char *a2, const SnapTime *a3)
{
  DgnString *v5;

  FileHistory::addOneEntry(this, a2);
  SnapTime::appendReadableTimeToString(a3, *(DgnString **)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1)));
  v5 = *(DgnString **)(*(_QWORD *)this + 8 * (*((_DWORD *)this + 2) - 1));
  if (*((_DWORD *)v5 + 2) <= 0x4Fu)
  {
    do
      DgnString::operator+=(v5, " ");
    while (*((_DWORD *)v5 + 2) < 0x50u);
  }
  return FileHistory::limitEntries(this);
}

uint64_t sizeObject<DgnString *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

DgnString *DgnDelete<DgnString>(DgnString *result)
{
  _QWORD *v1;

  if (result)
  {
    DgnString::~DgnString(result);
    return (DgnString *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t PrefPronCmp(unsigned int a1, unsigned int a2, const Voc *this)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned __int16 *v13;

  v13 = 0;
  v12 = 0;
  Voc::getPrefPron((uint64_t)this, a1, (const unsigned __int16 **)&v13, &v12);
  v11 = 0;
  v10 = 0;
  Voc::getPrefPron((uint64_t)this, a2, (const unsigned __int16 **)&v11, &v10);
  v6 = 0;
  while (v12 != v6)
  {
    if (v10 == v6)
      return 1;
    v7 = v13[v6];
    v8 = v11[v6++];
    result = (v7 - v8);
    if (v7 != v8)
      return result;
  }
  if (v12 == v10)
    return a1 - a2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t PrefPicModelIdPronCmp(unsigned int a1, unsigned int a2, const Voc *this)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;

  v13 = 0;
  v12 = 0;
  Voc::getPrefPicModelIdPron(this, a1, (const unsigned int **)&v13, &v12);
  v11 = 0;
  v10 = 0;
  Voc::getPrefPicModelIdPron(this, a2, (const unsigned int **)&v11, &v10);
  v6 = 0;
  while (v12 != v6)
  {
    if (v10 == v6)
      return 1;
    v7 = v13[v6];
    v8 = v11[v6++];
    result = v7 - v8;
    if (v7 != v8)
      return result;
  }
  if (v12 == v10)
    return a1 - a2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t PrefiltererWordIdPronCollArray::getInsertIndex(PrefiltererWordIdPronCollArray *this, int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  int v8;
  uint64_t v9;

  v3 = a3;
  v4 = *((_QWORD *)this + 2);
  v8 = a2;
  v9 = v4;
  if (*(_QWORD *)(v4 + 292))
    v7 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPicModelIdPronSearchCmpFunc;
  else
    v7 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPronSearchCmpFunc;
  v5 = DgnPrimArray<unsigned int>::searchLastOrBefore(this, a3, *((_DWORD *)this + 2), (uint64_t)&v8, v7);
  if (v5 == -1)
    return v3;
  else
    return (v5 + 1);
}

uint64_t PrefWordIdPronSearchCmpFunc(unsigned int *a1, const void *a2)
{
  int v4;

  v4 = PrefPronCmp(*a1, *(_DWORD *)a2, *((const Voc **)a2 + 1));
  if (v4)
    return -v4;
  else
    return *a1 - *(_DWORD *)a2;
}

uint64_t PrefWordIdPicModelIdPronSearchCmpFunc(unsigned int *a1, const void *a2)
{
  uint64_t result;

  result = PrefPicModelIdPronCmp(*a1, *(_DWORD *)a2, *((const Voc **)a2 + 1));
  if (!(_DWORD)result)
    return *a1 - *(_DWORD *)a2;
  return result;
}

uint64_t PrefiltererWordIdPronCollArray::sortArray(uint64_t a1, uint64_t a2)
{
  const Voc *v2;

  v2 = *(const Voc **)(a1 + 16);
  if (*((_DWORD *)v2 + 73) || *((_DWORD *)v2 + 74))
    return mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, v2);
  else
    return mrec_qsort_r<SortWordIdsByPrefPronScope>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, v2);
}

uint64_t mrec_qsort_r<SortWordIdsByPrefPronScope>(uint64_t result, unint64_t a2, unint64_t a3, const Voc *a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  char v86;
  int v87;
  _QWORD *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  char v124;
  BOOL v125;
  int64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  unsigned int *v165;
  unint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  _BOOL4 v169;
  unint64_t v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int *v174;
  BOOL v175;
  int v176;
  uint64_t v177;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v175 = ((result | a3) & 7) == 0;
  v176 = v8;
  v177 = -(uint64_t)a3;
  if (a2 < 7)
  {
LABEL_159:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v173 = (unsigned int *)((char *)v6 + v5 * a3);
      v134 = (unsigned int *)((char *)v6 + a3);
      v135 = v6;
      do
      {
        if (v134 > v6)
        {
          v136 = v135;
          v137 = v134;
          do
          {
            v138 = v137;
            v137 = (unsigned int *)((char *)v137 + v7);
            v139 = *v137;
            v140 = *v138;
            result = PrefPronCmp(*v137, *v138, a4);
            v7 = v177;
            v141 = v139 - v140;
            if ((_DWORD)result)
              v141 = -(int)result;
            if (v141 < 1)
              break;
            if (v176)
            {
              if (v175)
              {
                v142 = 0;
                v143 = (uint64_t)v136 + a3;
                do
                {
                  v144 = *(_QWORD *)(v143 + 8 * v142);
                  *(_QWORD *)(v143 + 8 * v142) = *(_QWORD *)&v136[2 * v142];
                  *(_QWORD *)&v136[2 * v142++] = v144;
                }
                while (a3 >> 3 != v142);
              }
              else
              {
                v146 = 0;
                v147 = (uint64_t)v136 + a3;
                do
                {
                  v148 = *(_BYTE *)(v147 + v146);
                  *(_BYTE *)(v147 + v146) = *((_BYTE *)v136 + v146);
                  *((_BYTE *)v136 + v146++) = v148;
                }
                while (a3 != v146);
              }
            }
            else
            {
              v145 = *(_QWORD *)v138;
              *(_QWORD *)v138 = *(_QWORD *)v137;
              *(_QWORD *)v137 = v145;
            }
            v136 = (unsigned int *)((char *)v136 + v177);
          }
          while (v137 > v6);
        }
        v134 = (unsigned int *)((char *)v134 + a3);
        v135 = (unsigned int *)((char *)v135 + a3);
      }
      while (v134 < v173);
    }
    return result;
  }
  v169 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v170 = v5;
    if (v5 == 7)
      goto LABEL_81;
    v11 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v168 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v12 = (v5 >> 3) * a3;
      v13 = (unsigned int *)((char *)v6 + v12);
      v166 = v12;
      v14 = (unsigned int *)((char *)v6 + 2 * v12);
      v15 = *v6;
      v16 = *(unsigned int *)((char *)v6 + v12);
      v17 = PrefPronCmp(*v6, v16, a4);
      if (v17)
        v18 = -v17;
      else
        v18 = v15 - v16;
      v171 = v13;
      v19 = *v13;
      v20 = *v14;
      v21 = PrefPronCmp(*v13, *v14, a4);
      v22 = v19 - v20;
      if (v21)
        v22 = -v21;
      if (v18 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          v29 = *v6;
          v30 = *v14;
          v31 = PrefPronCmp(*v6, *v14, a4);
          v32 = v29 - v30;
          if (v31)
            v32 = -v31;
          if (v32 >= 0)
            v27 = v6;
          else
            v27 = v14;
          goto LABEL_27;
        }
      }
      else if (v22 <= 0)
      {
        v23 = *v6;
        v24 = *v14;
        v25 = PrefPronCmp(*v6, *v14, a4);
        v26 = v23 - v24;
        if (v25)
          v26 = -v25;
        if (v26 >= 0)
          v27 = v14;
        else
          v27 = v6;
LABEL_27:
        v171 = v27;
      }
      v33 = v166;
      v34 = (unsigned int *)((char *)v10 + v166);
      v165 = (unsigned int *)((char *)v10 - v166);
      v35 = *(unsigned int *)((char *)v10 - v166);
      v36 = *v10;
      v37 = PrefPronCmp(v35, *v10, a4);
      if (v37)
        v38 = -v37;
      else
        v38 = v35 - v36;
      v39 = *v10;
      v40 = *v34;
      v41 = PrefPronCmp(*v10, *v34, a4);
      v42 = v39 - v40;
      if (v41)
        v42 = -v41;
      if (v38 < 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          v10 = (unsigned int *)((char *)v10 - v166);
          v47 = *v165;
          v48 = *v34;
          v49 = PrefPronCmp(*v165, *v34, a4);
          v50 = v47 - v48;
          if (v49)
            v50 = -v49;
          if (v50 < 0)
            v10 = v34;
        }
      }
      else if (v42 <= 0)
      {
        v10 = (unsigned int *)((char *)v10 - v166);
        v43 = *v165;
        v44 = *v34;
        v45 = PrefPronCmp(*v165, *v34, a4);
        v46 = v43 - v44;
        if (v45)
          v46 = -v45;
        if (v46 >= 0)
          v10 = v34;
      }
      v11 = (unsigned int *)((char *)v168 - v166);
      v167 = (unsigned int *)((char *)v168 - 2 * v166);
      v51 = *v167;
      v52 = *(unsigned int *)((char *)v168 - v33);
      v53 = PrefPronCmp(*v167, v52, a4);
      if (v53)
        v54 = -v53;
      else
        v54 = v51 - v52;
      v55 = *v11;
      v56 = *v168;
      v57 = PrefPronCmp(*v11, *v168, a4);
      v58 = v55 - v56;
      if (v57)
        v58 = -v57;
      if (v54 < 0)
      {
        v5 = v170;
        if ((v58 & 0x80000000) == 0)
        {
          v11 = v167;
          v63 = *v167;
          v64 = *v168;
          v65 = PrefPronCmp(*v167, *v168, a4);
          v66 = v63 - v64;
          if (v65)
            v66 = -v65;
          if (v66 < 0)
            v11 = v168;
        }
      }
      else
      {
        v5 = v170;
        if (v58 <= 0)
        {
          v11 = v167;
          v59 = *v167;
          v60 = *v168;
          v61 = PrefPronCmp(*v167, *v168, a4);
          v62 = v59 - v60;
          if (v61)
            v62 = -v61;
          if (v62 >= 0)
            v11 = v168;
        }
      }
      v28 = v171;
      goto LABEL_63;
    }
    v28 = v6;
LABEL_63:
    v172 = v28;
    v67 = *v28;
    v68 = *v10;
    v69 = PrefPronCmp(*v28, *v10, a4);
    if (v69)
      v70 = -v69;
    else
      v70 = v67 - v68;
    v71 = *v10;
    v72 = *v11;
    result = PrefPronCmp(*v10, *v11, a4);
    v73 = v71 - v72;
    if ((_DWORD)result)
      v73 = -(int)result;
    if (v70 < 0)
    {
      if ((v73 & 0x80000000) == 0)
      {
        v77 = *v172;
        v78 = *v11;
        result = PrefPronCmp(*v172, *v11, a4);
        v79 = v77 - v78;
        if ((_DWORD)result)
          v79 = -(int)result;
        if (v79 >= 0)
          v10 = v172;
        else
          v10 = v11;
      }
    }
    else if (v73 <= 0)
    {
      v74 = *v172;
      v75 = *v11;
      result = PrefPronCmp(*v172, *v11, a4);
      v76 = v74 - v75;
      if ((_DWORD)result)
        v76 = -(int)result;
      if (v76 >= 0)
        v10 = v11;
      else
        v10 = v172;
    }
LABEL_81:
    if (v176)
    {
      if (v175)
      {
        v80 = v6;
        v81 = a3 >> 3;
        do
        {
          v82 = *(_QWORD *)v80;
          *(_QWORD *)v80 = *(_QWORD *)v10;
          v80 += 2;
          *(_QWORD *)v10 = v82;
          v10 += 2;
          --v81;
        }
        while (v81);
      }
      else
      {
        v84 = a3;
        v85 = v6;
        do
        {
          v86 = *(_BYTE *)v85;
          *(_BYTE *)v85 = *(_BYTE *)v10;
          v85 = (unsigned int *)((char *)v85 + 1);
          *(_BYTE *)v10 = v86;
          v10 = (unsigned int *)((char *)v10 + 1);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      v83 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v83;
    }
    v87 = 0;
    v88 = (_QWORD *)((char *)v6 + a3);
    v89 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v90 = v89;
    v91 = (unsigned int *)((char *)v6 + a3);
LABEL_90:
    while (v91 <= v90)
    {
      v92 = *v91;
      v93 = *v6;
      result = PrefPronCmp(*v91, *v6, a4);
      v94 = v92 - v93;
      if ((_DWORD)result)
        v94 = -(int)result;
      if (v94 > 0)
        break;
      if (!v94)
      {
        if (v176)
        {
          if (v175)
          {
            v95 = 0;
            do
            {
              v96 = v88[v95];
              v88[v95] = *(_QWORD *)&v91[2 * v95];
              *(_QWORD *)&v91[2 * v95++] = v96;
            }
            while (v9 != v95);
          }
          else
          {
            v110 = 0;
            do
            {
              v111 = *((_BYTE *)v88 + v110);
              *((_BYTE *)v88 + v110) = *((_BYTE *)v91 + v110);
              *((_BYTE *)v91 + v110++) = v111;
            }
            while (a3 != v110);
          }
        }
        else
        {
          v109 = *v88;
          *v88 = *(_QWORD *)v91;
          *(_QWORD *)v91 = v109;
        }
        v88 = (_QWORD *)((char *)v88 + a3);
        v87 = 1;
      }
      v91 = (unsigned int *)((char *)v91 + a3);
    }
    while (v91 <= v90)
    {
      v103 = *v90;
      v104 = *v6;
      result = PrefPronCmp(*v90, *v6, a4);
      v105 = v103 - v104;
      if ((_DWORD)result)
        v105 = -(int)result;
      if (v105 < 0)
      {
        if (v176)
        {
          v106 = v177;
          if (v175)
          {
            v107 = 0;
            do
            {
              v108 = *(_QWORD *)&v91[2 * v107];
              *(_QWORD *)&v91[2 * v107] = *(_QWORD *)&v90[2 * v107];
              *(_QWORD *)&v90[2 * v107++] = v108;
            }
            while (v9 != v107);
          }
          else
          {
            v113 = 0;
            do
            {
              v114 = *((_BYTE *)v91 + v113);
              *((_BYTE *)v91 + v113) = *((_BYTE *)v90 + v113);
              *((_BYTE *)v90 + v113++) = v114;
            }
            while (a3 != v113);
          }
        }
        else
        {
          v112 = *(_QWORD *)v91;
          *(_QWORD *)v91 = *(_QWORD *)v90;
          *(_QWORD *)v90 = v112;
          v106 = v177;
        }
        v91 = (unsigned int *)((char *)v91 + a3);
        v90 = (unsigned int *)((char *)v90 + v106);
        v87 = 1;
        goto LABEL_90;
      }
      if (v105)
      {
        v97 = v177;
      }
      else
      {
        v97 = v177;
        if (v176)
        {
          if (v175)
          {
            v98 = 0;
            do
            {
              v99 = *(_QWORD *)&v90[2 * v98];
              *(_QWORD *)&v90[2 * v98] = *(_QWORD *)&v89[2 * v98];
              *(_QWORD *)&v89[2 * v98++] = v99;
            }
            while (v9 != v98);
          }
          else
          {
            v101 = 0;
            do
            {
              v102 = *((_BYTE *)v90 + v101);
              *((_BYTE *)v90 + v101) = *((_BYTE *)v89 + v101);
              *((_BYTE *)v89 + v101++) = v102;
            }
            while (a3 != v101);
          }
        }
        else
        {
          v100 = *(_QWORD *)v90;
          *(_QWORD *)v90 = *(_QWORD *)v89;
          *(_QWORD *)v89 = v100;
        }
        v89 = (unsigned int *)((char *)v89 + v177);
        v87 = 1;
      }
      v90 = (unsigned int *)((char *)v90 + v97);
    }
    v115 = (char *)v6 + v170 * a3;
    if (!v87)
      break;
    v116 = (char *)v91 - (char *)v88;
    if ((char *)v88 - (char *)v6 >= (char *)v91 - (char *)v88)
      v117 = (char *)v91 - (char *)v88;
    else
      v117 = (char *)v88 - (char *)v6;
    if (v117)
    {
      if (v175)
      {
        v118 = (_QWORD *)((char *)v91 - v117);
        v119 = v117 >> 3;
        v120 = v6;
        do
        {
          v121 = *(_QWORD *)v120;
          *(_QWORD *)v120 = *v118;
          v120 += 2;
          *v118++ = v121;
          --v119;
        }
        while (v119);
      }
      else
      {
        v122 = -(uint64_t)v117;
        v123 = v6;
        do
        {
          v124 = *(_BYTE *)v123;
          *(_BYTE *)v123 = *((_BYTE *)v91 + v122);
          v123 = (unsigned int *)((char *)v123 + 1);
          *((_BYTE *)v91 + v122) = v124;
          v125 = __CFADD__(v122++, 1);
        }
        while (!v125);
      }
    }
    v126 = (char *)v89 - (char *)v90;
    if ((char *)v89 - (char *)v90 >= v115 - ((char *)v89 + a3))
      v127 = v115 - ((char *)v89 + a3);
    else
      v127 = (char *)v89 - (char *)v90;
    if (v127)
    {
      if (v175)
      {
        v128 = &v115[-v127];
        v129 = v127 >> 3;
        do
        {
          v130 = *(_QWORD *)v91;
          *(_QWORD *)v91 = *(_QWORD *)v128;
          v91 += 2;
          *(_QWORD *)v128 = v130;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        v131 = -(uint64_t)v127;
        do
        {
          v132 = *(_BYTE *)v91;
          *(_BYTE *)v91 = v115[v131];
          v91 = (unsigned int *)((char *)v91 + 1);
          v115[v131] = v132;
          v125 = __CFADD__(v131++, 1);
        }
        while (!v125);
      }
    }
    if (v116 > (uint64_t)a3)
      result = mrec_qsort_r<SortWordIdsByPrefPronScope>(v6, v116 / a3, a3, a4);
    v7 = v177;
    if (v126 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)&v115[-v126];
    v5 = v126 / a3;
    v133 = v169;
    if (((((_DWORD)v115 - (_DWORD)v126) | a3) & 7) != 0)
      v133 = 2;
    v175 = ((((_DWORD)v115 - (_DWORD)v126) | a3) & 7) == 0;
    v176 = v133;
    if (v5 < 7)
      goto LABEL_159;
  }
  v149 = v177;
  v150 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v170 * a3) > (uint64_t)a3)
  {
    v151 = v6;
    do
    {
      v174 = v150;
      if (v150 > v6)
      {
        v152 = v151;
        v153 = v150;
        do
        {
          v154 = v153;
          v153 = (unsigned int *)((char *)v153 + v149);
          v155 = *v153;
          v156 = *v154;
          result = PrefPronCmp(*v153, *v154, a4);
          v149 = v177;
          v157 = v155 - v156;
          if ((_DWORD)result)
            v157 = -(int)result;
          if (v157 < 1)
            break;
          if (v176)
          {
            if (v175)
            {
              v158 = 0;
              v159 = (uint64_t)v152 + a3;
              do
              {
                v160 = *(_QWORD *)(v159 + 8 * v158);
                *(_QWORD *)(v159 + 8 * v158) = *(_QWORD *)&v152[2 * v158];
                *(_QWORD *)&v152[2 * v158++] = v160;
              }
              while (v9 != v158);
            }
            else
            {
              v162 = 0;
              v163 = (uint64_t)v152 + a3;
              do
              {
                v164 = *(_BYTE *)(v163 + v162);
                *(_BYTE *)(v163 + v162) = *((_BYTE *)v152 + v162);
                *((_BYTE *)v152 + v162++) = v164;
              }
              while (a3 != v162);
            }
          }
          else
          {
            v161 = *(_QWORD *)v154;
            *(_QWORD *)v154 = *(_QWORD *)v153;
            *(_QWORD *)v153 = v161;
          }
          v152 = (unsigned int *)((char *)v152 + v177);
        }
        while (v153 > v6);
      }
      v150 = (unsigned int *)((char *)v174 + a3);
      v151 = (unsigned int *)((char *)v151 + a3);
    }
    while ((char *)v174 + a3 < v115);
  }
  return result;
}

uint64_t mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(uint64_t result, unint64_t a2, unint64_t a3, const Voc *a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  char v86;
  int v87;
  _QWORD *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  char v124;
  BOOL v125;
  int64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  unsigned int *v165;
  unint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  _BOOL4 v169;
  unint64_t v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int *v174;
  BOOL v175;
  int v176;
  uint64_t v177;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v175 = ((result | a3) & 7) == 0;
  v176 = v8;
  v177 = -(uint64_t)a3;
  if (a2 < 7)
  {
LABEL_159:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v173 = (unsigned int *)((char *)v6 + v5 * a3);
      v134 = (unsigned int *)((char *)v6 + a3);
      v135 = v6;
      do
      {
        if (v134 > v6)
        {
          v136 = v135;
          v137 = v134;
          do
          {
            v138 = v137;
            v137 = (unsigned int *)((char *)v137 + v7);
            v139 = *v137;
            v140 = *v138;
            result = PrefPicModelIdPronCmp(*v137, *v138, a4);
            v7 = v177;
            v141 = v139 - v140;
            if ((_DWORD)result)
              v141 = result;
            if (v141 < 1)
              break;
            if (v176)
            {
              if (v175)
              {
                v142 = 0;
                v143 = (uint64_t)v136 + a3;
                do
                {
                  v144 = *(_QWORD *)(v143 + 8 * v142);
                  *(_QWORD *)(v143 + 8 * v142) = *(_QWORD *)&v136[2 * v142];
                  *(_QWORD *)&v136[2 * v142++] = v144;
                }
                while (a3 >> 3 != v142);
              }
              else
              {
                v146 = 0;
                v147 = (uint64_t)v136 + a3;
                do
                {
                  v148 = *(_BYTE *)(v147 + v146);
                  *(_BYTE *)(v147 + v146) = *((_BYTE *)v136 + v146);
                  *((_BYTE *)v136 + v146++) = v148;
                }
                while (a3 != v146);
              }
            }
            else
            {
              v145 = *(_QWORD *)v138;
              *(_QWORD *)v138 = *(_QWORD *)v137;
              *(_QWORD *)v137 = v145;
            }
            v136 = (unsigned int *)((char *)v136 + v177);
          }
          while (v137 > v6);
        }
        v134 = (unsigned int *)((char *)v134 + a3);
        v135 = (unsigned int *)((char *)v135 + a3);
      }
      while (v134 < v173);
    }
    return result;
  }
  v169 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v170 = v5;
    if (v5 == 7)
      goto LABEL_81;
    v11 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v168 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v12 = (v5 >> 3) * a3;
      v13 = (unsigned int *)((char *)v6 + v12);
      v166 = v12;
      v14 = (unsigned int *)((char *)v6 + 2 * v12);
      v15 = *v6;
      v16 = *(unsigned int *)((char *)v6 + v12);
      v17 = PrefPicModelIdPronCmp(*v6, v16, a4);
      if (v17)
        v18 = v17;
      else
        v18 = v15 - v16;
      v171 = v13;
      v19 = *v13;
      v20 = *v14;
      v21 = PrefPicModelIdPronCmp(*v13, *v14, a4);
      v22 = v19 - v20;
      if (v21)
        v22 = v21;
      if ((v18 & 0x80000000) != 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          v29 = *v6;
          v30 = *v14;
          v31 = PrefPicModelIdPronCmp(*v6, *v14, a4);
          v32 = v29 - v30;
          if (v31)
            v32 = v31;
          if (v32 >= 0)
            v27 = v6;
          else
            v27 = v14;
          goto LABEL_27;
        }
      }
      else if (v22 <= 0)
      {
        v23 = *v6;
        v24 = *v14;
        v25 = PrefPicModelIdPronCmp(*v6, *v14, a4);
        v26 = v23 - v24;
        if (v25)
          v26 = v25;
        if (v26 >= 0)
          v27 = v14;
        else
          v27 = v6;
LABEL_27:
        v171 = v27;
      }
      v33 = v166;
      v34 = (unsigned int *)((char *)v10 + v166);
      v165 = (unsigned int *)((char *)v10 - v166);
      v35 = *(unsigned int *)((char *)v10 - v166);
      v36 = *v10;
      v37 = PrefPicModelIdPronCmp(v35, *v10, a4);
      if (v37)
        v38 = v37;
      else
        v38 = v35 - v36;
      v39 = *v10;
      v40 = *v34;
      v41 = PrefPicModelIdPronCmp(*v10, *v34, a4);
      v42 = v39 - v40;
      if (v41)
        v42 = v41;
      if ((v38 & 0x80000000) != 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          v10 = (unsigned int *)((char *)v10 - v166);
          v47 = *v165;
          v48 = *v34;
          v49 = PrefPicModelIdPronCmp(*v165, *v34, a4);
          v50 = v47 - v48;
          if (v49)
            v50 = v49;
          if (v50 < 0)
            v10 = v34;
        }
      }
      else if (v42 <= 0)
      {
        v10 = (unsigned int *)((char *)v10 - v166);
        v43 = *v165;
        v44 = *v34;
        v45 = PrefPicModelIdPronCmp(*v165, *v34, a4);
        v46 = v43 - v44;
        if (v45)
          v46 = v45;
        if (v46 >= 0)
          v10 = v34;
      }
      v11 = (unsigned int *)((char *)v168 - v166);
      v167 = (unsigned int *)((char *)v168 - 2 * v166);
      v51 = *v167;
      v52 = *(unsigned int *)((char *)v168 - v33);
      v53 = PrefPicModelIdPronCmp(*v167, v52, a4);
      if (v53)
        v54 = v53;
      else
        v54 = v51 - v52;
      v55 = *v11;
      v56 = *v168;
      v57 = PrefPicModelIdPronCmp(*v11, *v168, a4);
      v58 = v55 - v56;
      if (v57)
        v58 = v57;
      if ((v54 & 0x80000000) != 0)
      {
        v5 = v170;
        if ((v58 & 0x80000000) == 0)
        {
          v11 = v167;
          v63 = *v167;
          v64 = *v168;
          v65 = PrefPicModelIdPronCmp(*v167, *v168, a4);
          v66 = v63 - v64;
          if (v65)
            v66 = v65;
          if (v66 < 0)
            v11 = v168;
        }
      }
      else
      {
        v5 = v170;
        if (v58 <= 0)
        {
          v11 = v167;
          v59 = *v167;
          v60 = *v168;
          v61 = PrefPicModelIdPronCmp(*v167, *v168, a4);
          v62 = v59 - v60;
          if (v61)
            v62 = v61;
          if (v62 >= 0)
            v11 = v168;
        }
      }
      v28 = v171;
      goto LABEL_63;
    }
    v28 = v6;
LABEL_63:
    v172 = v28;
    v67 = *v28;
    v68 = *v10;
    v69 = PrefPicModelIdPronCmp(*v28, *v10, a4);
    if (v69)
      v70 = v69;
    else
      v70 = v67 - v68;
    v71 = *v10;
    v72 = *v11;
    result = PrefPicModelIdPronCmp(*v10, *v11, a4);
    v73 = v71 - v72;
    if ((_DWORD)result)
      v73 = result;
    if ((v70 & 0x80000000) != 0)
    {
      if ((v73 & 0x80000000) == 0)
      {
        v77 = *v172;
        v78 = *v11;
        result = PrefPicModelIdPronCmp(*v172, *v11, a4);
        v79 = v77 - v78;
        if ((_DWORD)result)
          v79 = result;
        if (v79 >= 0)
          v10 = v172;
        else
          v10 = v11;
      }
    }
    else if (v73 <= 0)
    {
      v74 = *v172;
      v75 = *v11;
      result = PrefPicModelIdPronCmp(*v172, *v11, a4);
      v76 = v74 - v75;
      if ((_DWORD)result)
        v76 = result;
      if (v76 >= 0)
        v10 = v11;
      else
        v10 = v172;
    }
LABEL_81:
    if (v176)
    {
      if (v175)
      {
        v80 = v6;
        v81 = a3 >> 3;
        do
        {
          v82 = *(_QWORD *)v80;
          *(_QWORD *)v80 = *(_QWORD *)v10;
          v80 += 2;
          *(_QWORD *)v10 = v82;
          v10 += 2;
          --v81;
        }
        while (v81);
      }
      else
      {
        v84 = a3;
        v85 = v6;
        do
        {
          v86 = *(_BYTE *)v85;
          *(_BYTE *)v85 = *(_BYTE *)v10;
          v85 = (unsigned int *)((char *)v85 + 1);
          *(_BYTE *)v10 = v86;
          v10 = (unsigned int *)((char *)v10 + 1);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      v83 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v83;
    }
    v87 = 0;
    v88 = (_QWORD *)((char *)v6 + a3);
    v89 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v90 = v89;
    v91 = (unsigned int *)((char *)v6 + a3);
LABEL_90:
    while (v91 <= v90)
    {
      v92 = *v91;
      v93 = *v6;
      result = PrefPicModelIdPronCmp(*v91, *v6, a4);
      v94 = v92 - v93;
      if ((_DWORD)result)
        v94 = result;
      if (v94 > 0)
        break;
      if (!v94)
      {
        if (v176)
        {
          if (v175)
          {
            v95 = 0;
            do
            {
              v96 = v88[v95];
              v88[v95] = *(_QWORD *)&v91[2 * v95];
              *(_QWORD *)&v91[2 * v95++] = v96;
            }
            while (v9 != v95);
          }
          else
          {
            v110 = 0;
            do
            {
              v111 = *((_BYTE *)v88 + v110);
              *((_BYTE *)v88 + v110) = *((_BYTE *)v91 + v110);
              *((_BYTE *)v91 + v110++) = v111;
            }
            while (a3 != v110);
          }
        }
        else
        {
          v109 = *v88;
          *v88 = *(_QWORD *)v91;
          *(_QWORD *)v91 = v109;
        }
        v88 = (_QWORD *)((char *)v88 + a3);
        v87 = 1;
      }
      v91 = (unsigned int *)((char *)v91 + a3);
    }
    while (v91 <= v90)
    {
      v103 = *v90;
      v104 = *v6;
      result = PrefPicModelIdPronCmp(*v90, *v6, a4);
      v105 = v103 - v104;
      if ((_DWORD)result)
        v105 = result;
      if ((v105 & 0x80000000) != 0)
      {
        if (v176)
        {
          v106 = v177;
          if (v175)
          {
            v107 = 0;
            do
            {
              v108 = *(_QWORD *)&v91[2 * v107];
              *(_QWORD *)&v91[2 * v107] = *(_QWORD *)&v90[2 * v107];
              *(_QWORD *)&v90[2 * v107++] = v108;
            }
            while (v9 != v107);
          }
          else
          {
            v113 = 0;
            do
            {
              v114 = *((_BYTE *)v91 + v113);
              *((_BYTE *)v91 + v113) = *((_BYTE *)v90 + v113);
              *((_BYTE *)v90 + v113++) = v114;
            }
            while (a3 != v113);
          }
        }
        else
        {
          v112 = *(_QWORD *)v91;
          *(_QWORD *)v91 = *(_QWORD *)v90;
          *(_QWORD *)v90 = v112;
          v106 = v177;
        }
        v91 = (unsigned int *)((char *)v91 + a3);
        v90 = (unsigned int *)((char *)v90 + v106);
        v87 = 1;
        goto LABEL_90;
      }
      if (v105)
      {
        v97 = v177;
      }
      else
      {
        v97 = v177;
        if (v176)
        {
          if (v175)
          {
            v98 = 0;
            do
            {
              v99 = *(_QWORD *)&v90[2 * v98];
              *(_QWORD *)&v90[2 * v98] = *(_QWORD *)&v89[2 * v98];
              *(_QWORD *)&v89[2 * v98++] = v99;
            }
            while (v9 != v98);
          }
          else
          {
            v101 = 0;
            do
            {
              v102 = *((_BYTE *)v90 + v101);
              *((_BYTE *)v90 + v101) = *((_BYTE *)v89 + v101);
              *((_BYTE *)v89 + v101++) = v102;
            }
            while (a3 != v101);
          }
        }
        else
        {
          v100 = *(_QWORD *)v90;
          *(_QWORD *)v90 = *(_QWORD *)v89;
          *(_QWORD *)v89 = v100;
        }
        v89 = (unsigned int *)((char *)v89 + v177);
        v87 = 1;
      }
      v90 = (unsigned int *)((char *)v90 + v97);
    }
    v115 = (char *)v6 + v170 * a3;
    if (!v87)
      break;
    v116 = (char *)v91 - (char *)v88;
    if ((char *)v88 - (char *)v6 >= (char *)v91 - (char *)v88)
      v117 = (char *)v91 - (char *)v88;
    else
      v117 = (char *)v88 - (char *)v6;
    if (v117)
    {
      if (v175)
      {
        v118 = (_QWORD *)((char *)v91 - v117);
        v119 = v117 >> 3;
        v120 = v6;
        do
        {
          v121 = *(_QWORD *)v120;
          *(_QWORD *)v120 = *v118;
          v120 += 2;
          *v118++ = v121;
          --v119;
        }
        while (v119);
      }
      else
      {
        v122 = -(uint64_t)v117;
        v123 = v6;
        do
        {
          v124 = *(_BYTE *)v123;
          *(_BYTE *)v123 = *((_BYTE *)v91 + v122);
          v123 = (unsigned int *)((char *)v123 + 1);
          *((_BYTE *)v91 + v122) = v124;
          v125 = __CFADD__(v122++, 1);
        }
        while (!v125);
      }
    }
    v126 = (char *)v89 - (char *)v90;
    if ((char *)v89 - (char *)v90 >= v115 - ((char *)v89 + a3))
      v127 = v115 - ((char *)v89 + a3);
    else
      v127 = (char *)v89 - (char *)v90;
    if (v127)
    {
      if (v175)
      {
        v128 = &v115[-v127];
        v129 = v127 >> 3;
        do
        {
          v130 = *(_QWORD *)v91;
          *(_QWORD *)v91 = *(_QWORD *)v128;
          v91 += 2;
          *(_QWORD *)v128 = v130;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        v131 = -(uint64_t)v127;
        do
        {
          v132 = *(_BYTE *)v91;
          *(_BYTE *)v91 = v115[v131];
          v91 = (unsigned int *)((char *)v91 + 1);
          v115[v131] = v132;
          v125 = __CFADD__(v131++, 1);
        }
        while (!v125);
      }
    }
    if (v116 > (uint64_t)a3)
      result = mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(v6, v116 / a3, a3, a4);
    v7 = v177;
    if (v126 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)&v115[-v126];
    v5 = v126 / a3;
    v133 = v169;
    if (((((_DWORD)v115 - (_DWORD)v126) | a3) & 7) != 0)
      v133 = 2;
    v175 = ((((_DWORD)v115 - (_DWORD)v126) | a3) & 7) == 0;
    v176 = v133;
    if (v5 < 7)
      goto LABEL_159;
  }
  v149 = v177;
  v150 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v170 * a3) > (uint64_t)a3)
  {
    v151 = v6;
    do
    {
      v174 = v150;
      if (v150 > v6)
      {
        v152 = v151;
        v153 = v150;
        do
        {
          v154 = v153;
          v153 = (unsigned int *)((char *)v153 + v149);
          v155 = *v153;
          v156 = *v154;
          result = PrefPicModelIdPronCmp(*v153, *v154, a4);
          v149 = v177;
          v157 = v155 - v156;
          if ((_DWORD)result)
            v157 = result;
          if (v157 < 1)
            break;
          if (v176)
          {
            if (v175)
            {
              v158 = 0;
              v159 = (uint64_t)v152 + a3;
              do
              {
                v160 = *(_QWORD *)(v159 + 8 * v158);
                *(_QWORD *)(v159 + 8 * v158) = *(_QWORD *)&v152[2 * v158];
                *(_QWORD *)&v152[2 * v158++] = v160;
              }
              while (v9 != v158);
            }
            else
            {
              v162 = 0;
              v163 = (uint64_t)v152 + a3;
              do
              {
                v164 = *(_BYTE *)(v163 + v162);
                *(_BYTE *)(v163 + v162) = *((_BYTE *)v152 + v162);
                *((_BYTE *)v152 + v162++) = v164;
              }
              while (a3 != v162);
            }
          }
          else
          {
            v161 = *(_QWORD *)v154;
            *(_QWORD *)v154 = *(_QWORD *)v153;
            *(_QWORD *)v153 = v161;
          }
          v152 = (unsigned int *)((char *)v152 + v177);
        }
        while (v153 > v6);
      }
      v150 = (unsigned int *)((char *)v174 + a3);
      v151 = (unsigned int *)((char *)v151 + a3);
    }
    while ((char *)v174 + a3 < v115);
  }
  return result;
}

uint64_t PrefiltererWordIdPronCollArray::removeAll(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t PrefiltererWordIdPronCollArray::mergeLargeSortedArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  unsigned int *v26;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int *v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v39;
  uint64_t v40;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *((_DWORD *)a2 + 2);
  v39 = 0;
  v40 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v39, (uint64_t *)a1, 0, v4);
  v6 = *((_DWORD *)a2 + 2);
  if ((v40 + v6) > HIDWORD(v40))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v39, (v40 + v6 - HIDWORD(v40)), 1);
    v6 = *((_DWORD *)a2 + 2);
  }
  v7 = v5 + v4;
  if (v6)
  {
    v8 = 0;
    v9 = *a2;
    v10 = v39;
    do
    {
      v10[(v8 + v40)] = *(_DWORD *)(v9 + 4 * v8);
      ++v8;
      v11 = *((unsigned int *)a2 + 2);
    }
    while (v8 < v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  LODWORD(v40) = v40 + v11;
  v12 = *(_DWORD *)(a1 + 12);
  if (v7 > v12)
    DgnPrimArray<unsigned int>::reallocElts(a1, v7 - v12, 0);
  *(_DWORD *)(a1 + 8) = v7;
  v13 = v39;
  v14 = (unint64_t)&v39[v4];
  v15 = (unint64_t)&v39[v7];
  v16 = *(unsigned int **)a1;
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 292) || *(_DWORD *)(v17 + 296))
  {
    if ((_DWORD)v4 && v4 < v7)
    {
      v18 = &v39[v4];
      do
      {
        v19 = *v13;
        v20 = *v18;
        v21 = PrefPicModelIdPronCmp(*v13, *v18, *(const Voc **)(a1 + 16));
        v22 = v19 - v20;
        if (v21)
          v22 = v21;
        v23 = v22 > 0;
        v24 = v22 < 1;
        v25 = v22 < 1;
        if (v24)
          v26 = v13;
        else
          v26 = v18;
        v13 += v25;
        v18 += v23;
        *v16++ = *v26;
      }
      while ((unint64_t)v13 < v14 && (unint64_t)v18 < v15);
      goto LABEL_42;
    }
LABEL_40:
    v18 = &v39[v4];
    goto LABEL_42;
  }
  if (!(_DWORD)v4 || v4 >= v7)
    goto LABEL_40;
  v18 = &v39[v4];
  do
  {
    v28 = *v13;
    v29 = *v18;
    v30 = PrefPronCmp(*v13, *v18, *(const Voc **)(a1 + 16));
    v31 = v28 - v29;
    if (v30)
      v31 = -v30;
    v32 = v31 > 0;
    v24 = v31 < 1;
    v33 = v31 < 1;
    if (v24)
      v34 = v13;
    else
      v34 = v18;
    v13 += v33;
    v18 += v32;
    *v16++ = *v34;
  }
  while ((unint64_t)v13 < v14 && (unint64_t)v18 < v15);
LABEL_42:
  while ((unint64_t)v13 < v14)
  {
    v36 = *v13++;
    *v16++ = v36;
  }
  while ((unint64_t)v18 < v15)
  {
    v37 = *v18++;
    *v16++ = v37;
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_2098C5B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererWordIdPronCollArray::mergeSmallSortedArray(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t InsertIndex;
  int *v12;
  unint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  void *v19;
  uint64_t v20;
  void *v21;

  v4 = a1[2];
  v5 = *((unsigned int *)a2 + 2);
  v19 = 0;
  v20 = 0;
  if ((_DWORD)v5 + (_DWORD)v4)
  {
    v21 = 0;
    HIDWORD(v20) = realloc_array(0, &v21, 4 * (v5 + v4), 0, 0, 1) >> 2;
    v6 = v21;
    v19 = v21;
  }
  else
  {
    v6 = 0;
  }
  LODWORD(v20) = v5 + v4;
  v7 = *(_QWORD *)a1;
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = *a2;
    do
    {
      InsertIndex = PrefiltererWordIdPronCollArray::getInsertIndex((PrefiltererWordIdPronCollArray *)a1, *(_DWORD *)(v10 + 4 * v8), v9);
      if (v9 < InsertIndex)
      {
        v12 = (int *)(v7 + 4 * v9);
        v13 = InsertIndex - (unint64_t)v9;
        do
        {
          v14 = *v12++;
          *v6++ = v14;
          --v13;
        }
        while (v13);
      }
      *v6++ = *(_DWORD *)(v10 + 4 * v8++);
      v9 = InsertIndex;
    }
    while (v8 != v5);
  }
  else
  {
    LODWORD(InsertIndex) = 0;
  }
  if (InsertIndex < v4)
  {
    v15 = (int *)(v7 + 4 * InsertIndex);
    v16 = v4 - InsertIndex;
    do
    {
      v17 = *v15++;
      *v6++ = v17;
      --v16;
    }
    while (v16);
  }
  if (*(_QWORD *)a1)
  {
    MemChunkFree(*(_QWORD **)a1, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)a1 = v19;
  *((_QWORD *)a1 + 1) = v20;
  v19 = 0;
  v20 = 0;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v19);
}

void sub_2098C5C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererWordIdPronCollArray::removeSortedArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const Voc *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD v24[2];
  unsigned int v25;
  const Voc *v26;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = **(_DWORD **)a2;
  v7 = *(const Voc **)(a1 + 16);
  v25 = v6;
  v26 = v7;
  if (*((_DWORD *)v7 + 73) || *((_DWORD *)v7 + 74))
  {
    if ((int)v4 >= 1)
    {
      v8 = 0;
      v9 = v4 - 1;
      do
      {
        v10 = v8 + v9;
        if (v8 + v9 < 0 != __OFADD__(v8, v9))
          ++v10;
        v11 = (v10 >> 1);
        v12 = *(_QWORD *)a1;
        v13 = PrefPicModelIdPronCmp(*(_DWORD *)(*(_QWORD *)a1 + 4 * v11), v6, v7);
        if (!v13 && (v14 = *(_DWORD *)(v12 + 4 * v11), v13 = v14 - v6, v14 == v6))
        {
          v15 = v9 == v8;
          v9 = v11;
          if (v15)
            goto LABEL_18;
        }
        else if (v13 >= 0)
        {
          v9 = v11 - 1;
        }
        else
        {
          v8 = v11 + 1;
        }
      }
      while (v8 <= v9);
    }
    LODWORD(v11) = -1;
  }
  else
  {
    LODWORD(v11) = DgnPrimArray<unsigned int>::searchFirstEqual((_QWORD *)a1, 0, v4, (uint64_t)&v25, (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPronSearchCmpFunc);
  }
LABEL_18:
  v16 = v4 - v5;
  v24[0] = 0;
  v24[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v24, (uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  if (v11 < v4)
  {
    v17 = 0;
    v18 = v24[0] + 4 * v4;
    v19 = (_DWORD *)(v24[0] + 4 * v11);
    v20 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v21 = *(unsigned int **)a2;
    do
    {
      if (*v19 == v21[v17])
      {
        if ((v17 + 1) < *(_DWORD *)(a2 + 8))
          ++v17;
      }
      else
      {
        *v20++ = *v19;
      }
      ++v19;
    }
    while ((unint64_t)v19 < v18);
  }
  v22 = *(_DWORD *)(a1 + 12);
  if (v16 > v22)
    DgnPrimArray<unsigned int>::reallocElts(a1, v16 - v22, 0);
  *(_DWORD *)(a1 + 8) = v16;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
}

void sub_2098C5E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned int *PrefiltererWordIdPronCollArray::addArray(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9[2];

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v5 = result[3];
    v6 = result[2] + v2;
    if (v6 > v5)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)result, v6 - v5, 0);
      v2 = *(_DWORD *)(a2 + 8);
    }
    v9[0] = 0;
    v9[1] = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v9, (uint64_t *)a2, 0, v2);
    PrefiltererWordIdPronCollArray::sortArray((uint64_t)v4, (uint64_t)v9);
    v7 = v4[2];
    if (v7 && (v8 = *(_DWORD *)(a2 + 8), onePlusHighestSet32(v7) * v8 <= v4[2]))
      PrefiltererWordIdPronCollArray::mergeSmallSortedArray(v4, v9);
    else
      PrefiltererWordIdPronCollArray::mergeLargeSortedArray((uint64_t)v4, v9);
    return (unsigned int *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  }
  return result;
}

void sub_2098C5EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererWordIdPronCollArray::removeArray(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v3 = result;
    v4[0] = 0;
    v4[1] = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v4, (uint64_t *)a2, 0, v2);
    PrefiltererWordIdPronCollArray::sortArray(v3, (uint64_t)v4);
    PrefiltererWordIdPronCollArray::removeSortedArray(v3, (uint64_t)v4);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  }
  return result;
}

void sub_2098C5F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererWordIdPronCollArray::writeObject(PrefiltererWordIdPronCollArray *this, DgnStream *a2, unsigned int *a3)
{
  return writeObject<unsigned int>((uint64_t)a2, (uint64_t)this, a3);
}

void PrefiltererWordIdPronCollArray::readObject(PrefiltererWordIdPronCollArray *this, DgnStream *a2, unsigned int *a3)
{
  readObject<unsigned int>(a2, (uint64_t)this, a3);
}

uint64_t PrefiltererWordIdPronCollArray::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sizeObject<unsigned int>(a1, a2);
  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  if (a2 == 3)
    v4 = 0;
  return v4 + v3;
}

void TRegExpCompiler::TRegExpCompiler(TRegExpCompiler *this, const TLocaleInfo *a2)
{
  TAllocator *v4;
  TAllocator *v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_24C215480;
  v4 = (TRegExpCompiler *)((char *)this + 232);
  v5 = (TRegExpCompiler *)((char *)this + 8);
  TFsa::TFsa((TRegExpCompiler *)((char *)this + 8));
  TAllocator::TAllocator(v4, 2048);
  *((_QWORD *)this + 34) = a2;
  v6 = TFsa::newState(v5, 0);
  TFsa::addExtremity((uint64_t)v5, (uint64_t)v6, 0);
}

void sub_2098C6054(_Unwind_Exception *a1)
{
  TFsa *v1;

  TFsa::~TFsa(v1);
  _Unwind_Resume(a1);
}

void TRegExpCompiler::~TRegExpCompiler(TRegExpCompiler *this)
{
  *(_QWORD *)this = &off_24C215480;
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TRegExpCompiler *)((char *)this + 8));
}

{
  TRegExpCompiler::~TRegExpCompiler(this);
  JUMPOUT(0x20BD149A8);
}

_QWORD *TRegExpCompiler::mergeStateData(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = a2 + 1;
  v2 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v5 = 0;
  do
  {
    v6 = (_QWORD *)v2[4];
    if (v6)
      v5 += *v6;
    v7 = (_QWORD *)v2[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v2[2];
        v9 = *v8 == (_QWORD)v2;
        v2 = v8;
      }
      while (!v9);
    }
    v2 = v8;
  }
  while (v8 != v3);
  if (!v5)
    return 0;
  if ((unint64_t)(v5 + 1) >> 61)
    v10 = -1;
  else
    v10 = 8 * (v5 + 1);
  result = TAllocator::allocate((TAllocator *)(a1 + 232), v10);
  *result = v5;
  v12 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v3)
  {
    v13 = 1;
    do
    {
      v14 = (unint64_t *)v12[4];
      if (v14 && *v14)
      {
        v15 = 0;
        do
        {
          v16 = v15 + 1;
          result[v13 + v15] = v14[v15 + 1];
          v15 = v16;
        }
        while (v16 < *v14);
        v13 += v16;
      }
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          v9 = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!v9);
      }
      v12 = v18;
    }
    while (v18 != v3);
  }
  return result;
}

_QWORD *TRegExpCompiler::compileCharacter(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v10;
  uint64_t v11;
  __int32 v12;
  __int32 v13;
  TAllocator *v14;
  _QWORD *v15;
  uint64_t v16;
  TAllocator *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  _QWORD *exception;
  std::string *v27;
  __int128 v28;
  void *v29[2];
  uint64_t v30;
  _BYTE __p[24];
  uint64_t v32;

  v10 = *a2;
  v11 = **a2;
  if ((_DWORD)v11 != 92)
    goto LABEL_12;
  v13 = v10[1];
  v12 = v13;
  *a2 = v10 + 1;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "search pattern not terminated");
    *(_QWORD *)__p = &unk_24C213620;
    if (SHIBYTE(v30) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v29[0], (std::string::size_type)v29[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v29;
      v32 = v30;
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v32 >= 0)
      v25 = &__p[8];
    else
      v25 = *(const char **)&__p[8];
    conditionalAssert(v25, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 336, v23, v24);
    *(_QWORD *)__p = &unk_24C213620;
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
    *exception = &unk_24C213620;
    v27 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v28 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    }
    *exception = &unk_24C215870;
  }
  if (wcschr(REGEXP_CHAR_CLASSES, v12))
  {
    v14 = (TAllocator *)(a1 + 8);
    v15 = TFsa::newState(v14, 0);
    TFsa::newTrans(v14, a4, (uint64_t)v15, 0xFFFFLL);
    if (**a2)
      v16 = **a2;
    else
      v16 = -1;
    v17 = v14;
    v18 = (uint64_t)v15;
LABEL_22:
    v19 = a5;
    goto LABEL_23;
  }
  v11 = **a2;
  if ((_DWORD)v11 == 116)
  {
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    v19 = a5;
    v16 = 9;
    goto LABEL_23;
  }
  if ((_DWORD)v11 == 114)
  {
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    v19 = a5;
    v16 = 13;
    goto LABEL_23;
  }
  if ((_DWORD)v11 != 110)
  {
LABEL_12:
    v20 = *(_QWORD *)(a1 + 272);
    if (a3 == 2)
    {
      v21 = *(_QWORD *)(v20 + 32);
      if (v21 && (unint64_t)(int)v11 < 0x10000)
        LODWORD(v11) = *(_DWORD *)(v21 + 4 * (int)v11);
    }
    else if (a3 == 1)
    {
      LODWORD(v11) = TLocaleInfo::toLower(v20, v11);
    }
    if ((_DWORD)v11)
      v16 = v11;
    else
      v16 = -1;
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    goto LABEL_22;
  }
  v17 = (TAllocator *)(a1 + 8);
  v18 = a4;
  v19 = a5;
  v16 = 10;
LABEL_23:
  result = TFsa::newTrans(v17, v18, v19, v16);
  ++*a2;
  return result;
}

void sub_2098C64AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

_QWORD *TRegExpCompiler::compileRange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _QWORD *exception;
  std::string *v34;
  __int128 v35;
  void *v36[2];
  uint64_t v37;
  _BYTE __p[24];
  uint64_t v39;
  _QWORD v40[33];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 272);
  if (a4 == 2)
  {
    v15 = *(_QWORD *)(v12 + 32);
    v13 = a2;
    v14 = a3;
    if (v15)
    {
      v13 = a2;
      if ((unint64_t)(int)a2 < 0x10000)
        v13 = *(_DWORD *)(v15 + 4 * (int)a2);
      if ((unint64_t)(int)a3 >= 0x10000)
        v14 = a3;
      else
        v14 = *(_DWORD *)(v15 + 4 * (int)a3);
    }
  }
  else
  {
    v13 = a2;
    v14 = a3;
    if (a4 == 1)
    {
      v13 = TLocaleInfo::toLower(v12, a2);
      v14 = TLocaleInfo::toLower(*(_QWORD *)(a1 + 272), v9);
    }
  }
  if (v13 > v14)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"invalid [", 9);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] range", 7);
    std::stringbuf::str();
    if (SHIBYTE(v37) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v36;
      v39 = v37;
    }
    if (v39 >= 0)
      v32 = &__p[8];
    else
      v32 = *(const char **)&__p[8];
    conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 386, v30, v31);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v39) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v37) < 0)
      operator delete(v36[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::stringbuf::str();
    *exception = aPpx;
    v34 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v34, aPpx, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v35 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    }
    *exception = &unk_24C215870;
  }
  v16 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), a5, (uint64_t)v16, 0xFFFFLL);
  v17 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v16, (uint64_t)v17, 114);
  v18 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  v19 = *(_QWORD *)(a1 + 272);
  if (a4 == 2)
  {
    v22 = *(_QWORD *)(v19 + 32);
    if (v22 && (unint64_t)(int)v10 < 0x10000)
      LODWORD(v10) = *(_DWORD *)(v22 + 4 * (int)v10);
    if ((_DWORD)v10)
      v23 = v10;
    else
      v23 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v23);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 32);
    if (v24 && (unint64_t)(int)v9 < 0x10000)
      LODWORD(v9) = *(_DWORD *)(v24 + 4 * (int)v9);
  }
  else if (a4 == 1)
  {
    v20 = TLocaleInfo::toLower(v19, v10);
    if (v20)
      v21 = v20;
    else
      v21 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v21);
    LODWORD(v9) = TLocaleInfo::toLower(*(_QWORD *)(a1 + 272), v9);
  }
  else
  {
    if ((_DWORD)v10)
      v25 = v10;
    else
      v25 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v25);
  }
  if ((_DWORD)v9)
    v26 = v9;
  else
    v26 = -1;
  return TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v18, a6, v26);
}

void sub_2098C68AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

_QWORD *TRegExpCompiler::compileNegatedSet(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  TAllocator *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int *v18;
  uint64_t v19;

  v10 = (TAllocator *)(a1 + 8);
  v11 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans(v10, a4, (uint64_t)v11, 0xFFFFLL);
  v12 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v11, (uint64_t)v12, 110);
  v13 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v13, a5, 110);
  v14 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v14, (uint64_t)v13, 0xFFFFLL);
  v15 = *a2;
  v16 = *a2;
  while (*v16 != 93)
  {
    if (!*v16)
      return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
LABEL_6:
    v17 = TFsa::newState(v10, 0);
    v18 = *a2;
    if ((*a2)[1] == 45 && (v19 = v18[2], (_DWORD)v19 != 93))
    {
      TRegExpCompiler::compileRange(a1, *v18, v19, a3, (uint64_t)v12, (uint64_t)v17);
      v16 = *a2 + 3;
      *a2 = v16;
      v12 = v17;
    }
    else
    {
      TRegExpCompiler::compileCharacter(a1, a2, a3, (uint64_t)v12, (uint64_t)v17);
      v16 = *a2;
      v12 = v17;
    }
  }
  if (v16 == v15)
    goto LABEL_6;
  return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
}

_QWORD *TRegExpCompiler::compileSet(_QWORD *result, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = (uint64_t)result;
  v10 = *a2;
  v11 = *a2;
  while (1)
  {
    v12 = *v11;
    if ((_DWORD)v12 == 93)
      break;
    if (!(_DWORD)v12)
      return result;
LABEL_6:
    if (v11[1] == 45 && (v13 = v11[2], (_DWORD)v13 != 93))
    {
      result = TRegExpCompiler::compileRange(v9, v12, v13, a3, a4, a5);
      v11 = *a2 + 3;
      *a2 = v11;
    }
    else
    {
      result = TRegExpCompiler::compileCharacter(v9, a2, a3, a4, a5);
      v11 = *a2;
    }
  }
  if (v11 == v10)
    goto LABEL_6;
  return result;
}

_QWORD *TRegExpCompiler::compile(_QWORD *a1, __int32 **a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  TAllocator *v8;
  uint64_t v9;
  int *v10;
  __int32 v11;
  _QWORD *v12;
  __int32 *v13;
  __int32 v14;
  __int32 *v15;
  __int32 v16;
  __int32 v17;
  _QWORD *v18;
  uint64_t v19;
  __int32 *v20;
  __int32 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v31;
  const __int32 *v32;
  TAllocator *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  std::string *v45;
  const char *v46;
  _QWORD *v47;
  std::string *v48;
  const char *v49;
  _QWORD *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _QWORD *exception;
  std::string *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  TAllocator *v63;
  _QWORD *v64;
  _BYTE __p[24];
  _QWORD v67[128];
  char v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72[3];

  if (wcschr(dword_209A75E90, **a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "*+?{ follows nothing");
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v70;
      v67[0] = v71;
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v67[0] >= 0)
      v54 = &__p[8];
    else
      v54 = *(const char **)&__p[8];
    conditionalAssert(v54, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 468, v52, v53);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v67[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v71) < 0)
      operator delete((void *)v70);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "*+?{ follows nothing");
    *exception = aPpx;
    v56 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v60 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v60;
    }
    *exception = &unk_24C215870;
  }
  v8 = (TAllocator *)(a1 + 1);
  v63 = (TAllocator *)(a1 + 29);
  v61 = (uint64_t)a4;
  v64 = a1;
  while (1)
  {
    v9 = (uint64_t)a4;
    v10 = *a2;
    v11 = **a2;
    if (!v11 || v11 == 41)
      return TFsa::newTrans(v8, (uint64_t)a4, a5, -1);
    v12 = TFsa::newState(v8, 0);
    TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
    a4 = TFsa::newState(v8, 0);
    v13 = *a2;
    v14 = **a2;
    if (v14 == 91)
    {
      v16 = v13[1];
      *a2 = v13 + 1;
      if (v16 == 94)
      {
        *a2 = v13 + 2;
        TRegExpCompiler::compileNegatedSet((uint64_t)a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      else
      {
        TRegExpCompiler::compileSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      v15 = *a2;
      if (**a2 != 93)
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "unmatched []");
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v70;
          v67[0] = v71;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v67[0] >= 0)
          v49 = &__p[8];
        else
          v49 = *(const char **)&__p[8];
        conditionalAssert(v49, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 509, v41, v42);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v67[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v71) < 0)
          operator delete((void *)v70);
        v50 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "unmatched []");
        *v50 = aPpx;
        v51 = (std::string *)(v50 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v59 = *(_OWORD *)__p;
          v50[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v59;
        }
        *v50 = &unk_24C215870;
      }
      goto LABEL_22;
    }
    if (v14 == 40)
    {
      *a2 = v13 + 1;
      TRegExpCompiler::compile(a1, a2, a3, v12, a4);
      v15 = *a2;
      if (**a2 != 41)
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "unmatched ()");
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v70;
          v67[0] = v71;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v67[0] >= 0)
          v46 = &__p[8];
        else
          v46 = *(const char **)&__p[8];
        conditionalAssert(v46, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 489, v39, v40);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v67[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v71) < 0)
          operator delete((void *)v70);
        v47 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
        *v47 = aPpx;
        v48 = (std::string *)(v47 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v58 = *(_OWORD *)__p;
          v47[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v58;
        }
        *v47 = &unk_24C215870;
      }
      goto LABEL_22;
    }
    if (wcschr(dword_209A75E90, v14))
    {
      std::string::basic_string[abi:ne180100]<0>(&v70, "nested *+?{");
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v70;
        v67[0] = v71;
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v67[0] >= 0)
        v43 = &__p[8];
      else
        v43 = *(const char **)&__p[8];
      conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 516, v37, v38);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v67[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v71) < 0)
        operator delete((void *)v70);
      v44 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "nested *+?{");
      *v44 = aPpx;
      v45 = (std::string *)(v44 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v57 = *(_OWORD *)__p;
        v44[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v57;
      }
      *v44 = &unk_24C215870;
    }
    v17 = **a2;
    if (v17 == 124)
    {
      TFsa::newTrans(v8, v9, a5, -1);
      a4 = TFsa::newState(v8, 0);
      TFsa::newTrans(v8, v61, (uint64_t)a4, -1);
      ++*a2;
    }
    else
    {
      if (wcschr(dword_209A75EA4, v17))
      {
        v18 = TFsa::newState(v8, 0);
        TFsa::newTrans(v8, (uint64_t)v12, (uint64_t)v18, 0xFFFFLL);
        if (**a2)
          v19 = **a2;
        else
          v19 = -1;
        a1 = v64;
        TFsa::newTrans(v8, (uint64_t)v18, (uint64_t)a4, v19);
        v15 = *a2;
LABEL_22:
        v20 = v15 + 1;
        *a2 = v15 + 1;
        goto LABEL_23;
      }
      TRegExpCompiler::compileCharacter((uint64_t)a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      v20 = *a2;
LABEL_23:
      v21 = *v20;
      if (*v20 == 123)
      {
        *a2 = v20 + 1;
        v69 = 0;
        *(_QWORD *)&v70 = 0;
        parseRepetition((unsigned int **)a2, &v70, &v69);
        *(_QWORD *)__p = v67;
        *(_OWORD *)&__p[8] = xmmword_209A57DD0;
        v68 = 1;
        v22 = v70;
        if ((unint64_t)v70 >= 2)
        {
          v23 = v70 - 1;
          do
          {
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v20 - v10);
            --v23;
          }
          while (v23);
        }
        v24 = v69;
        if (v69 == -1)
        {
          v27 = *(_QWORD *)&__p[16];
          if (v22)
          {
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v20 - v10);
            v27 = *(_QWORD *)&__p[16];
          }
          v72[0] = 42;
          TBuffer<wchar_t>::insert((uint64_t)__p, v27, v72, 1uLL);
        }
        else if (v69 > v22)
        {
          if (!v22)
          {
            v72[0] = 63;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
            *(_QWORD *)&v70 = 1;
            v22 = 1;
          }
          v25 = v24 - v22;
          if (v25)
          {
            v26 = v20 - v10;
            do
            {
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v26);
              v72[0] = 63;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
              --v25;
            }
            while (v25);
          }
        }
        v28 = 0;
        v29 = *a2;
        while (v29[v28++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v29, v28 - 1);
        if ((unint64_t)(*(_QWORD *)&__p[16] + 1) >> 62)
          v31 = -1;
        else
          v31 = 4 * (*(_QWORD *)&__p[16] + 1);
        a1 = v64;
        v20 = (__int32 *)TAllocator::allocate(v63, v31);
        if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
        {
          if (v68)
          {
            v72[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
            v32 = *(const __int32 **)__p;
            --*(_QWORD *)&__p[16];
          }
          else
          {
            v32 = *(const __int32 **)__p;
            if (*(_QWORD *)&__p[8])
              *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
          }
        }
        else
        {
          v32 = *(const __int32 **)__p;
          *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
        }
        wcscpy(v20, v32);
        *a2 = v20;
        if (v68 && *(_QWORD **)__p != v67 && *(_QWORD *)__p)
        {
          MEMORY[0x20BD149A8]();
          v20 = *a2;
        }
        v21 = *v20;
      }
      switch(v21)
      {
        case '?':
          *a2 = v20 + 1;
          goto LABEL_60;
        case '+':
          *a2 = v20 + 1;
          v33 = v8;
          v34 = (uint64_t)a4;
          v35 = (uint64_t)v12;
          goto LABEL_61;
        case '*':
          *a2 = v20 + 1;
          TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
LABEL_60:
          v33 = v8;
          v34 = v9;
          v35 = (uint64_t)a4;
LABEL_61:
          TFsa::newTrans(v33, v34, v35, -1);
          break;
      }
    }
  }
}

void sub_2098C7528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t parseRepetition(unsigned int **a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int *v8;
  unsigned __int8 v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned __int8 v15;
  unsigned int *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  TLocaleInfo *v20;
  const char *v21;
  _QWORD *exception;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  TLocaleInfo *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  std::string *v36;
  const char *v37;
  _QWORD *v38;
  std::string *v39;
  TLocaleInfo *v40;
  const char *v41;
  _QWORD *v42;
  std::string *v43;
  TLocaleInfo *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  const char *v52;
  _QWORD *v53;
  std::string *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  const char *v59;
  _QWORD *v60;
  std::string *v61;
  __int128 v62;
  const char *v63;
  _QWORD *v64;
  std::string *v65;
  __int128 v66;
  void *v67[2];
  uint64_t v68;
  _BYTE v69[24];
  uint64_t v70;
  _BYTE __p[24];
  uint64_t v72;

  *a2 = 0;
  *a3 = 0;
  v6 = **a1;
  {
    v20 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v20);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
  }
  if ((int)v6 < 48
    || v6 >= 0x3A
    && (v6 < 0x660
     || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6) == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "expected a digit after {");
    *(_QWORD *)__p = aPpx;
    if ((v69[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v69;
      v72 = *(_QWORD *)&v69[16];
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v72 >= 0)
      v21 = &__p[8];
    else
      v21 = *(const char **)&__p[8];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 264, v18, v19);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v72) < 0)
      operator delete(*(void **)&__p[8]);
    if ((v69[23] & 0x80000000) != 0)
      operator delete(*(void **)v69);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "expected a digit after {");
    *exception = aPpx;
    v23 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v51 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v51;
    }
    *exception = &unk_24C215870;
  }
  v8 = *a1;
  {
    v26 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v26);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v26;
  }
  result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, a1);
  *a2 = result;
  v11 = *a1;
  v12 = **a1;
  if (v12 != 44)
  {
    if (v12 != 125)
    {
      if (!v12)
      {
        std::string::basic_string[abi:ne180100]<0>(v69, "search pattern not terminated");
        *(_QWORD *)__p = aPpx;
        if ((v69[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v69;
          v72 = *(_QWORD *)&v69[16];
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v72 >= 0)
          v34 = &__p[8];
        else
          v34 = *(const char **)&__p[8];
        conditionalAssert(v34, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 270, v24, v25);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v72) < 0)
          operator delete(*(void **)&__p[8]);
        if ((v69[23] & 0x80000000) != 0)
          operator delete(*(void **)v69);
        v35 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
        *v35 = aPpx;
        v36 = (std::string *)(v35 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v55 = *(_OWORD *)__p;
          v35[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v55;
        }
        *v35 = &unk_24C215870;
      }
      std::string::basic_string[abi:ne180100]<0>(v69, "invalid {} range");
      *(_QWORD *)__p = aPpx;
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v69;
        v72 = *(_QWORD *)&v69[16];
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v72 >= 0)
        v37 = &__p[8];
      else
        v37 = *(const char **)&__p[8];
      conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 285, v27, v28);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v72) < 0)
        operator delete(*(void **)&__p[8]);
      if ((v69[23] & 0x80000000) != 0)
        operator delete(*(void **)v69);
      v38 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {} range");
      *v38 = aPpx;
      v39 = (std::string *)(v38 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v56 = *(_OWORD *)__p;
        v38[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v56;
      }
      *v38 = &unk_24C215870;
    }
    if (!(_DWORD)result)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "invalid {0} range");
      *(_QWORD *)__p = aPpx;
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v69;
        v72 = *(_QWORD *)&v69[16];
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v72 >= 0)
        v41 = &__p[8];
      else
        v41 = *(const char **)&__p[8];
      conditionalAssert(v41, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 276, v29, v30);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v72) < 0)
        operator delete(*(void **)&__p[8]);
      if ((v69[23] & 0x80000000) != 0)
        operator delete(*(void **)v69);
      v42 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {0} range");
      *v42 = aPpx;
      v43 = (std::string *)(v42 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v57 = *(_OWORD *)__p;
        v42[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v57;
      }
      *v42 = &unk_24C215870;
    }
    *a3 = result;
LABEL_21:
    v14 = v11 + 1;
    goto LABEL_22;
  }
  v13 = v11[1];
  *a1 = v11 + 1;
  if (v13 != 125)
  {
    if ((v15 & 1) == 0
    {
      v40 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v40);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v40;
    }
    if ((int)v13 < 48
      || v13 >= 0x3A
      && (v13 < 0x660
       || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13) == -1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"expected a digit after {", 24);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
      std::stringbuf::str();
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v68) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v67[0], (std::string::size_type)v67[1]);
      }
      else
      {
        *(_OWORD *)&v69[8] = *(_OWORD *)v67;
        v70 = v68;
      }
      *(_QWORD *)v69 = &unk_24C215870;
      if (v70 >= 0)
        v59 = &v69[8];
      else
        v59 = *(const char **)&v69[8];
      conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 300, v32, v33);
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)&v69[8]);
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      v60 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      *v60 = aPpx;
      v61 = (std::string *)(v60 + 1);
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        v62 = *(_OWORD *)v69;
        v60[3] = *(_QWORD *)&v69[16];
        *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
      }
      *v60 = &unk_24C215870;
    }
    v16 = *a1;
    if ((v17 & 1) == 0
    {
      v44 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v44);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
    }
    result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16, a1);
    *a3 = result;
    v11 = *a1;
    if (**a1 != 125)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "search pattern not terminated");
      *(_QWORD *)__p = aPpx;
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v69;
        v72 = *(_QWORD *)&v69[16];
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v72 >= 0)
        v52 = &__p[8];
      else
        v52 = *(const char **)&__p[8];
      conditionalAssert(v52, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 306, v45, v46);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v72) < 0)
        operator delete(*(void **)&__p[8]);
      if ((v69[23] & 0x80000000) != 0)
        operator delete(*(void **)v69);
      v53 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
      *v53 = aPpx;
      v54 = (std::string *)(v53 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v58 = *(_OWORD *)__p;
        v53[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v58;
      }
      *v53 = &unk_24C215870;
    }
    if (*a2 > (unint64_t)result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid {", 9);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)",", 1);
      v48 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"} range", 7);
      std::stringbuf::str();
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v68) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v67[0], (std::string::size_type)v67[1]);
      }
      else
      {
        *(_OWORD *)&v69[8] = *(_OWORD *)v67;
        v70 = v68;
      }
      *(_QWORD *)v69 = &unk_24C215870;
      if (v70 >= 0)
        v63 = &v69[8];
      else
        v63 = *(const char **)&v69[8];
      conditionalAssert(v63, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 313, v49, v50);
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)&v69[8]);
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      v64 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      *v64 = aPpx;
      v65 = (std::string *)(v64 + 1);
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        v66 = *(_OWORD *)v69;
        v64[3] = *(_QWORD *)&v69[16];
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
      }
      *v64 = &unk_24C215870;
    }
    goto LABEL_21;
  }
  *a3 = -1;
  v14 = v11 + 2;
LABEL_22:
  *a1 = v14;
  return result;
}

void sub_2098C80FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  MEMORY[0x20BD149A8](v34, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

__int32 *TRegExpCompiler::compileFlags(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t *a4, int *a5)
{
  __int32 *result;
  __int32 *v10;
  __int32 *v11;
  TAllocator *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD *exception;
  std::string *v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  _BYTE __p[24];
  uint64_t v27;
  _QWORD v28[33];

  *a4 = a3;
  result = wcschr(*a2, 58);
  if (result)
  {
    v10 = result;
    v11 = *a2;
    if (result == *a2 || *(result - 1) != 92)
    {
      if (v11 < result)
      {
        v12 = (TAllocator *)(a1 + 8);
        do
        {
          v13 = *v11;
          switch((_DWORD)v13)
          {
            case 'z':
              v14 = 0;
              break;
            case 'i':
              v14 = 1;
              break;
            case 'c':
              v14 = 2;
              break;
            default:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"invalid flag '", 14);
              v17 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
              std::stringbuf::str();
              if (SHIBYTE(v25) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v24[0], (std::string::size_type)v24[1]);
              }
              else
              {
                *(_OWORD *)&__p[8] = *(_OWORD *)v24;
                v27 = v25;
              }
              if (v27 >= 0)
                v20 = &__p[8];
              else
                v20 = *(const char **)&__p[8];
              conditionalAssert(v20, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 663, v18, v19);
              *(_QWORD *)__p = aPpx;
              if (SHIBYTE(v27) < 0)
                operator delete(*(void **)&__p[8]);
              if (SHIBYTE(v25) < 0)
                operator delete(v24[0]);
              exception = __cxa_allocate_exception(0x20uLL);
              std::stringbuf::str();
              *exception = aPpx;
              v22 = (std::string *)(exception + 1);
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v22, aPpx, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                v23 = *(_OWORD *)__p;
                exception[3] = *(_QWORD *)&__p[16];
                *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
              }
              *exception = &unk_24C215870;
          }
          *a5 = v14;
          v15 = TFsa::newState(v12, 0);
          TFsa::newTrans(v12, *a4, (uint64_t)v15, 0xFFFFLL);
          *a4 = (uint64_t)v15;
          v16 = TFsa::newState(v12, 0);
          result = (__int32 *)TFsa::newTrans(v12, *a4, (uint64_t)v16, v13);
          *a4 = (uint64_t)v16;
          v11 = *a2 + 1;
          *a2 = v11;
        }
        while (v11 < v10);
      }
      *a2 = v11 + 1;
    }
  }
  return result;
}

void sub_2098C850C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TRegExpCompiler::add(_QWORD *a1, __int32 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *exception;
  std::string *v13;
  __int128 v14;
  uint64_t v15[3];
  void *v16[2];
  uint64_t v17;
  _BYTE __p[24];
  uint64_t v19;
  __int32 *v20;
  unsigned int v21;

  v21 = 0;
  v15[0] = 0;
  v20 = a2;
  v5 = (uint64_t *)a1[20];
  v6 = (uint64_t *)a1[21];
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
      {
        v5 = (uint64_t *)a1[21];
        break;
      }
    }
  }
  TRegExpCompiler::compileFlags((uint64_t)a1, &v20, *v5, v15, (int *)&v21);
  v7 = TFsa::newState((TAllocator *)(a1 + 1), 0);
  TRegExpCompiler::compile(a1, &v20, v21, (_QWORD *)v15[0], (uint64_t)v7);
  if (*v20)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "unmatched ()");
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v16;
      v19 = v17;
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v19 >= 0)
      v11 = &__p[8];
    else
      v11 = *(const char **)&__p[8];
    conditionalAssert(v11, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 697, v9, v10);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
    *exception = aPpx;
    v13 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    *exception = &unk_24C215870;
  }
  v8 = TAllocator::allocate((TAllocator *)(a1 + 29), 16);
  *v8 = 1;
  v8[1] = a3;
  v7[1] = v8;
  TFsa::addExtremity((uint64_t)(a1 + 1), (uint64_t)v7, 1u);
}

void sub_2098C8790(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  __break(1u);
}

void sub_2098C89FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  int v25;
  void *v26;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v25)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a25);
    __cxa_end_catch();
    JUMPOUT(0x2098C8A9CLL);
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compressDfaRec(uint64_t result, uint64_t *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *i;
  _QWORD *v21;
  uint64_t v22;

  v6 = *a2;
  if (!*(_QWORD *)(*a6 + 8 * *a2))
  {
    v12 = result;
    v13 = *a3;
    v14 = (_QWORD *)*a5;
    *v13 = *a4;
    v13[1] = v14;
    v15 = *a3;
    *a3 += 2;
    *(_QWORD *)(*a6 + 8 * v6) = v15;
    v16 = (unint64_t *)a2[1];
    if (v16 && *v16)
    {
      v17 = 0;
      v18 = (_QWORD *)*a5;
      do
        *v18++ = v16[++v17];
      while (v17 < *v16);
      *a5 = v18;
    }
    v19 = *a4;
    result = TState::getTransCount((uint64_t)a2, 1u);
    *a4 += 16 * result;
    for (i = (_QWORD *)a2[3]; i; v19 += 16)
    {
      v21 = (_QWORD *)i[2];
      result = TRegExpCompiler::compressDfaRec(v12, v21, a3, a4, a5, a6);
      v22 = *(_QWORD *)(*a6 + 8 * *v21);
      *(_DWORD *)v19 = *i;
      *(_QWORD *)(v19 + 8) = v22;
      i = (_QWORD *)i[5];
    }
  }
  return result;
}

_QWORD *TRegExpCompiler::compressDfa(TRegExpCompiler *this, const TFsa *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  v4 = *((_QWORD *)a2 + 12);
  v5 = (_QWORD *)*((_QWORD *)a2 + 6);
  v6 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
        goto LABEL_13;
    }
  }
  if (v5 != v6)
  {
    v7 = 0;
LABEL_7:
    v8 = *(_QWORD **)(*v5 + 8);
    if (v8)
      v7 += *v8;
    v9 = v5 + 1;
    while (v9 != v6)
    {
      if (*v9++)
      {
        v5 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_13:
  v11 = *((_QWORD *)a2 + 5) + 1;
  v12 = (_QWORD *)operator new[]();
  *v12 = 16;
  v12[1] = v11;
  v13 = v12 + 2;
  v30 = v12 + 2;
  v14 = (_QWORD *)operator new[]();
  *v14 = 16;
  v14[1] = v4;
  v15 = v14 + 2;
  v29 = v14 + 2;
  v16 = operator new[]();
  v28 = v16;
  v17 = (_QWORD *)operator new();
  *v17 = v13;
  v17[1] = v15;
  v17[2] = v16;
  __p = 0;
  v26 = 0;
  v27 = 0;
  v18 = (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3;
  v24 = 0;
  std::vector<TSegment const*>::resize((uint64_t)&__p, v18, &v24);
  v19 = (uint64_t **)*((_QWORD *)a2 + 19);
  v20 = (uint64_t **)*((_QWORD *)a2 + 20);
  if (v19 != v20)
  {
    while (!*v19)
    {
      if (++v19 == v20)
      {
        v19 = (uint64_t **)*((_QWORD *)a2 + 20);
        break;
      }
    }
  }
  TRegExpCompiler::compressDfaRec((uint64_t)this, *v19, &v30, &v29, &v28, &__p);
  v21 = v30;
  v22 = v28;
  *v30 = v29;
  v21[1] = v22;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_2098C8DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TRegExpCompiler::compile(TRegExpCompiler *this)
{
  _QWORD *v2;
  _BYTE v4[224];

  TFsa::TFsa((TFsa *)v4);
  TFsa::nfaToDfa((uint64_t)this + 8, (TFsa *)v4, (uint64_t)this);
  v2 = TRegExpCompiler::compressDfa(this, (const TFsa *)v4);
  TFsa::clear((TRegExpCompiler *)((char *)this + 8));
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TFsa *)v4);
  return v2;
}

void sub_2098C8E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFsa::~TFsa((TFsa *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchNegatedRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  signed int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  v11 = *a2;
  v12 = a2[2];
  while (v11 < v12)
  {
    v13 = *(unint64_t **)(v11 + 8);
    v14 = *v13;
    v15 = v13[2];
    if (*v13 < v15)
    {
      do
      {
        if (v9 < *(_DWORD *)v11 || v9 > *(_DWORD *)v14)
        {
          result = TRegExpSearch::searchNegated(a1, *(_QWORD *)(v14 + 8), a3, a4);
          v15 = v13[2];
        }
        v14 += 16;
      }
      while (v14 < v15);
      v12 = a2[2];
    }
    v11 += 16;
  }
  return result;
}

uint64_t TRegExpSearch::searchNegated(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  signed int v9;
  uint64_t v10;
  unint64_t i;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  for (i = *a2; i < a2[2]; i += 16)
  {
    if (*(_DWORD *)i == 0xFFFF)
    {
      result = TRegExpSearch::searchNegatedCommand((uint64_t)a1, *(unint64_t **)(i + 8), a3, a4);
    }
    else if (v9 != *(_DWORD *)i)
    {
      result = TRegExpSearch::searchNegated(a1, *(_QWORD *)(i + 8), a3, a4);
    }
  }
  return result;
}

uint64_t TRegExpSearch::searchNegatedCommand(uint64_t result, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v8;
  unsigned int *v9;
  int v10;

  v4 = *a2;
  if (*a2 < a2[2])
  {
    v8 = (uint64_t *)result;
    v9 = a3 + 1;
    do
    {
      v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 == 114)
      {
        result = TRegExpSearch::searchNegatedRange(v8, *(unint64_t **)(v4 + 8), a3, a4);
      }
      else if (v10 == 110)
      {
        result = TRegExpSearch::search(v8, *(_QWORD *)(v4 + 8), v9, a4);
      }
      else
      {
        result = testCharClass(v10, *a3);
        if ((result & 1) == 0)
          result = TRegExpSearch::searchNegated(v8, *(_QWORD *)(v4 + 8), a3, a4);
      }
      v4 += 16;
    }
    while (v4 < a2[2]);
  }
  return result;
}

void TRegExpSearch::search(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  void **v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  while (1)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) == 0 || !*a3)
    {
      for (i = (uint64_t *)a2[1]; (unint64_t)i < a2[3]; ++i)
      {
        *(_BYTE *)(a1 + 41) = 1;
        v12 = *(void ***)(a1 + 16);
        if (v12)
        {
          v14 = (char *)*v12;
          v13 = v12[1];
          v15 = *i;
          v16 = ((char *)v13 - (_BYTE *)*v12) / 24;
          if (v13 == *v12)
          {
LABEL_18:
            v19 = *(_QWORD *)(a1 + 32);
            v20 = (unint64_t)v12[2];
            if ((unint64_t)v13 >= v20)
            {
              v22 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v14) >> 3);
              if (2 * v23 > v22)
                v22 = 2 * v23;
              if (v23 >= 0x555555555555555)
                v24 = 0xAAAAAAAAAAAAAAALL;
              else
                v24 = v22;
              if (v24)
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(v12 + 2), v24);
              else
                v25 = 0;
              v26 = &v25[24 * v16];
              *(_QWORD *)v26 = v19;
              *((_QWORD *)v26 + 1) = a3;
              *((_QWORD *)v26 + 2) = v15;
              v28 = (char *)*v12;
              v27 = (char *)v12[1];
              v29 = v26;
              if (v27 != *v12)
              {
                do
                {
                  v30 = *(_OWORD *)(v27 - 24);
                  *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v27 -= 24;
                }
                while (v27 != v28);
                v27 = (char *)*v12;
              }
              v21 = v26 + 24;
              *v12 = v29;
              v12[1] = v26 + 24;
              v12[2] = &v25[24 * v24];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *v13 = v19;
              v13[1] = a3;
              v21 = v13 + 3;
              v13[2] = v15;
            }
            v12[1] = v21;
          }
          else
          {
            if (v16 <= 1)
              v17 = 1;
            else
              v17 = ((char *)v13 - (_BYTE *)*v12) / 24;
            v18 = v14 + 16;
            while (*v18 != v15 || *(v18 - 2) != *(_QWORD *)(a1 + 32) || *(v18 - 1) >= (unint64_t)a3)
            {
              v18 += 3;
              if (!--v17)
                goto LABEL_18;
            }
            *(v18 - 1) = a3;
            *v18 = v15;
          }
        }
      }
    }
    v7 = a2[2];
    v8 = *a2;
    v9 = v7 - *a2;
    if (v7 == *a2)
      break;
    if (*(_DWORD *)v8 == 0xFFFF)
    {
      TRegExpSearch::searchCommand(a1, *(unsigned int ***)(v8 + 8), a3, a4);
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
    v31 = v9 >> 4;
    v32 = *a3;
    if (!(_DWORD)v32 && v10 < v31)
    {
      *(_BYTE *)(a1 + 40) = 1;
      return;
    }
    v33 = *(_QWORD *)a1;
    if (a4 == 2)
    {
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
        v35 = (unint64_t)(int)v32 < 0x10000;
      else
        v35 = 0;
      if (v35)
        LODWORD(v32) = *(_DWORD *)(v34 + 4 * (int)v32);
    }
    else if (a4 == 1)
    {
      LODWORD(v32) = TLocaleInfo::toLower(v33, v32);
    }
    v36 = v31 - 1;
    if (v10 < v31)
    {
      v37 = *a2;
      do
      {
        v38 = (v36 + v10) >> 1;
        v39 = *(_DWORD *)(v37 + 16 * v38);
        if ((_DWORD)v32 == v39)
          break;
        if ((int)v32 > v39)
          v36 = v38 - 1;
        else
          v10 = v38 + 1;
      }
      while (v10 <= v36);
      v8 = v37 + 16 * v38;
    }
    if (v10 > v36)
      return;
    a2 = *(uint64_t **)(v8 + 8);
    ++a3;
  }
}

uint64_t testCharClass(int a1, int a2)
{
  uint64_t result;
  unsigned __int8 v5;
  int isLower;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int DigitExtended;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  int v27;
  TLocaleInfo *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  TLocaleInfo *v33;
  TLocaleInfo *v34;
  TLocaleInfo *v35;
  TLocaleInfo *v36;
  TLocaleInfo *v37;
  TLocaleInfo *v38;
  TLocaleInfo *v39;
  TLocaleInfo *v40;
  TLocaleInfo *v41;

  result = 0;
  if (a1 <= 96)
  {
    switch(a1)
    {
      case 'L':
        if ((v5 & 1) == 0)
        {
          {
            v28 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v28);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v28;
          }
        }
        isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'M':
      case 'N':
      case 'O':
      case 'Q':
      case 'R':
      case 'T':
      case 'V':
        return result;
      case 'P':
        if ((v14 & 1) == 0
        {
          v32 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v32);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
        }
        isLower = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'S':
        if ((v16 & 1) == 0
        {
          v34 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v34);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v34;
        }
        result = 0;
        if (a2 > 159)
        {
          if (a2 >= 12288)
          {
            if (a2 == 12288)
              return result;
            v26 = 65279;
          }
          else
          {
            if (a2 == 160)
              return result;
            v26 = 8203;
          }
          if (a2 == v26)
            return result;
        }
        else if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
        {
          return result;
        }
        return 1;
      case 'U':
        if ((v12 & 1) == 0
        {
          v30 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v30);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
        }
        isLower = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'W':
        if ((v18 & 1) == 0
        {
          v36 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v36);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v36;
        }
        v19 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
        if (a2 >= 48
          && (a2 < 0x3A
           || a2 >= 0x660
           && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) != -1))
        {
          return 0;
        }
        v20 = v19;
        goto LABEL_52;
      default:
        if (a1 != 65)
        {
          if (a1 != 68)
            return result;
          if ((v8 & 1) == 0
          {
            v38 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v38);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v38;
          }
          DigitExtended = a2 - 48;
          if (a2 >= 48)
          {
            if (a2 <= 0x39)
              return DigitExtended == -1;
            if (a2 >= 0x660)
            {
              DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
              return DigitExtended == -1;
            }
          }
          DigitExtended = -1;
          return DigitExtended == -1;
        }
        if ((v23 & 1) == 0
        {
          v40 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v40);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v40;
        }
        v20 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_52:
        isLower = TLocaleInfo::isAlpha(v20, a2);
LABEL_53:
        result = isLower ^ 1u;
        break;
    }
    return result;
  }
  switch(a1)
  {
    case 'l':
      if ((v7 & 1) == 0
      {
        v29 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v29);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
      }
      return TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 'm':
    case 'n':
    case 'o':
    case 'q':
    case 'r':
    case 't':
    case 'v':
      return result;
    case 'p':
      if ((v15 & 1) == 0
      {
        v33 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v33);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
      }
      return TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 's':
      if ((v17 & 1) == 0
      {
        v35 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v35);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v35;
      }
      result = 1;
      if (a2 <= 159)
      {
        if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
          return result;
        return 0;
      }
      if (a2 >= 12288)
      {
        if (a2 == 12288)
          return result;
        v27 = 65279;
      }
      else
      {
        if (a2 == 160)
          return result;
        v27 = 8203;
      }
      if (a2 != v27)
        return 0;
      return result;
    case 'u':
      if ((v13 & 1) == 0
      {
        v31 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v31);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
      }
      return TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 'w':
      if ((v21 & 1) == 0
      {
        v37 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v37);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v37;
      }
      v22 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (a2 < 48
        || a2 >= 0x3A
        && (a2 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) == -1))
      {
        v11 = v22;
        return TLocaleInfo::isAlpha(v11, a2);
      }
      return 1;
    default:
      if (a1 != 100)
      {
        if (a1 == 97)
        {
          if ((v10 & 1) == 0
          {
            v39 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v39);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v39;
          }
          v11 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
          return TLocaleInfo::isAlpha(v11, a2);
        }
        return result;
      }
      if ((v24 & 1) == 0
      {
        v41 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v41);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v41;
      }
      v25 = a2 - 48;
      if (a2 < 48)
        goto LABEL_62;
      if (a2 > 0x39)
      {
        if (a2 < 0x660)
LABEL_62:
          v25 = -1;
        else
          v25 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
      }
      return v25 != -1;
  }
}

void sub_2098C9BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  v11 = *a2;
  v12 = a2[2];
  if (*a2 < v12)
  {
    v13 = a3 + 1;
    do
    {
      if (v9 >= *(_DWORD *)v11)
      {
        v14 = *(unint64_t **)(v11 + 8);
        v15 = *v14;
        v16 = v14[2];
        if (*v14 < v16)
        {
          do
          {
            if (v9 <= *(_DWORD *)v15)
            {
              result = TRegExpSearch::search(a1, *(_QWORD *)(v15 + 8), v13, a4);
              v16 = v14[2];
            }
            v15 += 16;
          }
          while (v15 < v16);
          v12 = a2[2];
        }
      }
      v11 += 16;
    }
    while (v11 < v12);
  }
  return result;
}

uint64_t TRegExpSearch::searchCommand(uint64_t result, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v4 = *a2;
  if (*a2 < a2[2])
  {
    v8 = result;
    v9 = a3 + 1;
    while (1)
    {
      result = *v4;
      if ((int)result > 98)
        break;
      if ((_DWORD)result == 36)
      {
        if (!*a3)
          goto LABEL_15;
      }
      else
      {
        if ((_DWORD)result != 94)
          goto LABEL_16;
        if (*(unsigned int **)(v8 + 24) == a3)
        {
LABEL_15:
          v10 = *((_QWORD *)v4 + 1);
          v11 = v8;
          v12 = a3;
          goto LABEL_22;
        }
      }
LABEL_24:
      v4 += 4;
      if (v4 >= a2[2])
        return result;
    }
    switch((_DWORD)result)
    {
      case 'c':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 2;
        break;
      case 'i':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 1;
        break;
      case 'z':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 0;
        break;
      default:
LABEL_16:
        if (!*a3)
        {
          *(_BYTE *)(v8 + 40) = 1;
          goto LABEL_24;
        }
        if ((_DWORD)result == 114)
        {
          result = TRegExpSearch::searchRange((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if ((_DWORD)result == 110)
        {
          result = TRegExpSearch::searchNegated((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if ((_DWORD)result != 46)
        {
          result = testCharClass(result, *a3);
          if (!(_DWORD)result)
            goto LABEL_24;
        }
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = v9;
LABEL_22:
        v13 = a4;
        break;
    }
    result = TRegExpSearch::search(v11, v10, v12, v13);
    goto LABEL_24;
  }
  return result;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  char v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;

  v4 = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (!*a2)
    return 0;
  v5 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v5, 0);
    if ((v4 & 2) != 0)
      break;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 4);
    v5 = (unsigned int *)(v7 + 4);
    *(_QWORD *)(a1 + 32) = v5;
  }
  while (v8);
  return *(_BYTE *)(a1 + 40) != 0;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3)
{
  char v3;
  unsigned int *v4;
  int v6;
  uint64_t v7;
  int v8;

  v3 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (!*a2)
    return 0;
  v4 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v4, 0);
    v6 = *(unsigned __int8 *)(a1 + 41);
    if (v3 & 2 | v6)
      break;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 4);
    v4 = (unsigned int *)(v7 + 4);
    *(_QWORD *)(a1 + 32) = v4;
  }
  while (v8);
  return v6 != 0;
}

_QWORD *TRegExp::TRegExp(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  result[2] = 0;
  *result = a2;
  return result;
}

void TRegExp::add(const TLocaleInfo **a1, __int32 *a2, uint64_t a3)
{
  TRegExpCompiler *v5;

  v5 = a1[1];
  if (!v5)
  {
    v5 = (TRegExpCompiler *)operator new();
    TRegExpCompiler::TRegExpCompiler(v5, *a1);
    a1[1] = v5;
  }
  TRegExpCompiler::add(v5, a2, a3);
}

void sub_2098CA088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x10F1C406FA3447ALL);
  _Unwind_Resume(a1);
}

TRegExpCompiler *TRegExp::doneAdding(TRegExp *this)
{
  TRegExpCompiler *result;

  result = (TRegExpCompiler *)*((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 2) = TRegExpCompiler::compile(result);
    result = (TRegExpCompiler *)*((_QWORD *)this + 1);
    if (result)
      result = (TRegExpCompiler *)(*(uint64_t (**)(TRegExpCompiler *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

uint64_t TRegExp::TRegExp(uint64_t a1, __int32 *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a3;
  TRegExp::add((const TLocaleInfo **)a1, a2, 0);
  TRegExp::doneAdding((TRegExp *)a1);
  return a1;
}

void TRegExp::~TRegExp(TRegExp *this)
{
  uint64_t v2;
  TRegExpGraph *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (TRegExpGraph *)*((_QWORD *)this + 2);
  if (v3)
  {
    TRegExpGraph::~TRegExpGraph(v3);
    MEMORY[0x20BD149A8]();
  }
}

BOOL TRegExp::match(_QWORD *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[6];

  v4 = a1[2];
  if (!v4)
    return 0;
  v6[0] = *a1;
  v6[1] = v4;
  return TRegExpSearch::operator()((uint64_t)v6, a2, a3, a4);
}

BOOL TRegExp::match(_QWORD *a1, unsigned int *a2, int a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v3 = a1[2];
  if (!v3)
    return 0;
  v5[0] = *a1;
  v5[1] = v3;
  return TRegExpSearch::operator()((uint64_t)v5, a2, a3);
}

uint64_t TRegExp::stringToRegExp(uint64_t result, uint64_t a2, int a3, char a4)
{
  __int32 *v6;
  int *v7;
  __int32 v8;
  __int32 *v9;
  __int32 v10;
  int v11;

  v6 = (__int32 *)result;
  if (a3 == 1)
  {
    v7 = (int *)&unk_209A75EB4;
  }
  else
  {
    if (a3 != 2)
      goto LABEL_6;
    v7 = (int *)&unk_209A75EC0;
  }
  result = TBuffer<wchar_t>::assign(a2, v7);
LABEL_6:
  if ((a4 & 2) != 0)
  {
    v11 = 94;
    result = TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
  }
  v8 = *v6;
  if (*v6)
  {
    v9 = v6 + 1;
    do
    {
      if (wcschr(dword_209A75ECC, v8))
      {
        v11 = 92;
        TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
      }
      v11 = *(v9 - 1);
      result = TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
      v10 = *v9++;
      v8 = v10;
    }
    while (v10);
  }
  if ((a4 & 1) != 0)
  {
    v11 = 36;
    return TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
  }
  return result;
}

void TRegExpGraph::~TRegExpGraph(TRegExpGraph *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)this)
    MEMORY[0x20BD14990](*(_QWORD *)this - 16, 0x70C80105F9A77);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x20BD14990](v2 - 16, 0x1060C807B16006ELL);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x20BD14990](v3, 0x1000C8000313F17);
}

uint64_t callBackParam(int a1, int a2, void *lpsrc, uint64_t *a4, TAllocator *a5)
{
  uint64_t v7;
  TParam *v8;
  TParam *v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  int v18;

  if (a4)
    v7 = *a4;
  else
    v7 = 1;
  if (*((_DWORD *)lpsrc + 2))
  {
    v14 = (__int32 *)v16;
    v15 = xmmword_209A57DD0;
    v17 = 1;
    (*(void (**)(void *, uint64_t, __int32 **))(*(_QWORD *)lpsrc + 16))(lpsrc, v7, &v14);
    if (*((_DWORD *)lpsrc + 2) == 4)
    {
      TStringParam::getGrammarValue(v8, v7, (uint64_t)&v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, __int32 **))(*(_QWORD *)lpsrc + 16))(lpsrc, v7, &v14);
    }
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v10 = -1;
    else
      v10 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v18, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16 && v14)
      MEMORY[0x20BD149A8]();
  }
  else
  {
    TParam::getValidConfig(v9, v7);
  }
  return 1;
}

void sub_2098CA554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  size_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  TLocaleInfo *v12;
  __int32 *v13;
  __int128 v14;
  _BYTE v15[1024];
  char v16;
  int v17;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v13 = (__int32 *)v15;
  v14 = xmmword_209A57DD0;
  v16 = 1;
  v7 = wcslen(*(const __int32 **)(a1 + 8));
  {
    v12 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v12);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v12;
  }
  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, (uint64_t)&v13, 0);
  if ((unint64_t)(*((_QWORD *)&v14 + 1) + 1) >> 62)
    v9 = -1;
  else
    v9 = 4 * (*((_QWORD *)&v14 + 1) + 1);
  v10 = (__int32 *)TAllocator::allocate(a5, v9);
  if (*((_QWORD *)&v14 + 1) >= (unint64_t)v14)
  {
    if (v16)
    {
      v17 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v17, 1uLL);
      v11 = v13;
      --*((_QWORD *)&v14 + 1);
    }
    else
    {
      v11 = v13;
      if ((_QWORD)v14)
        v13[(_QWORD)v14 - 1] = 0;
    }
  }
  else
  {
    v11 = v13;
    v13[*((_QWORD *)&v14 + 1)] = 0;
  }
  wcscpy(v10, v11);
  if (v16 && v13 != (__int32 *)v15)
  {
    if (v13)
      MEMORY[0x20BD149A8]();
  }
  return 1;
}

void sub_2098CA738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x20BD149A8](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackRomanToDigit(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  __int32 *v5;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  TLocaleInfo *v13;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  unint64_t v18;
  int v19;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v5 = (__int32 *)a1[1];
  if (*v5)
  {
    v18 = 0;
    if (romanToArabic(v5, &v18))
      return 0;
    v14 = (__int32 *)v16;
    v15 = xmmword_209A57DD0;
    v17 = 1;
    v8 = v18;
    {
      v13 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v13);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v13;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (uint64_t)&v14, 0);
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v10 = -1;
    else
      v10 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v19 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v19, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16)
    {
      if (v14)
        MEMORY[0x20BD149A8]();
    }
  }
  return 1;
}

void sub_2098CA96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x20BD149A8](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]) && a9 != v10)
  {
    if (a9)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackDigitToRoman(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v5;
  unsigned int *v7;
  unsigned __int8 v9;
  unsigned int v10;
  uint64_t v11;
  __int32 *v12;
  __int32 *v13;
  TLocaleInfo *v14;
  __int32 *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  BOOL v19;
  int v20;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v7 = (unsigned int *)a1[1];
  if (!*v7)
    return 1;
  v19 = 0;
  {
    v14 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v14);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
  }
  v10 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, &v19);
  v5 = 1;
  if (!v19)
  {
    v15 = (__int32 *)v17;
    v16 = xmmword_209A57DD0;
    v18 = 1;
    if (arabicToRoman(v10, (uint64_t)&v15))
    {
      v5 = 0;
    }
    else
    {
      if ((unint64_t)(*((_QWORD *)&v16 + 1) + 1) >> 62)
        v11 = -1;
      else
        v11 = 4 * (*((_QWORD *)&v16 + 1) + 1);
      v12 = (__int32 *)TAllocator::allocate(a5, v11);
      if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
      {
        if (v18)
        {
          v20 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v20, 1uLL);
          v13 = v15;
          --*((_QWORD *)&v16 + 1);
        }
        else
        {
          v13 = v15;
          if ((_QWORD)v16)
            v15[(_QWORD)v16 - 1] = 0;
        }
      }
      else
      {
        v13 = v15;
        v15[*((_QWORD *)&v16 + 1)] = 0;
      }
      wcscpy(v12, v13);
      v5 = 1;
    }
    if (v18 && v15 != (__int32 *)v17 && v15)
      MEMORY[0x20BD149A8]();
  }
  return v5;
}

void sub_2098CABC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackAllCaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, TAllocator *this)
{
  const __int32 *v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int32 *v21;
  __int32 *v22;
  void *__p[2];
  char v24;
  __int32 *v25;
  __int128 v26;
  _BYTE v27[1024];
  char v28;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v25 = (__int32 *)v27;
  v26 = xmmword_209A57DD0;
  v28 = 1;
  v8 = *(const __int32 **)(a1 + 8);
  if (*v8)
  {
    v9 = 0;
    v10 = a3 + 240;
    do
    {
      while (1)
      {
        v11 = wcsncmp(v8, (const __int32 *)&unk_209A75F40, 1uLL);
        v12 = *(unsigned int *)v8;
        if (v11)
          break;
        if ((_DWORD)v12)
        {
          while (wcsncmp(v8, (const __int32 *)&unk_209A75F48, 1uLL))
          {
            LODWORD(__p[0]) = *v8;
            TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
            v14 = v8[1];
            ++v8;
            if (!v14)
              goto LABEL_16;
          }
          v9 = 1;
          if (*v8)
            continue;
        }
        goto LABEL_16;
      }
      LODWORD(__p[0]) = TLocaleInfo::toUpper(v10, v12);
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      v13 = v8[1];
      ++v8;
    }
    while (v13);
    if ((v9 & 1) == 0)
      goto LABEL_21;
LABEL_16:
    loggableUnicode(*(unsigned int **)(a1 + 8), __p);
    if (v24 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    tknPrintf("Warning: '%s' : Performing AllCaps string function on a tagged value.\n", v15, v16, v17, v18, v19);
    if (v24 < 0)
      operator delete(__p[0]);
  }
LABEL_21:
  if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
    v20 = -1;
  else
    v20 = 4 * (*((_QWORD *)&v26 + 1) + 1);
  v21 = (__int32 *)TAllocator::allocate(this, v20);
  if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      v22 = v25;
      --*((_QWORD *)&v26 + 1);
    }
    else
    {
      v22 = v25;
      if ((_QWORD)v26)
        v25[(_QWORD)v26 - 1] = 0;
    }
  }
  else
  {
    v22 = v25;
    v25[*((_QWORD *)&v26 + 1)] = 0;
  }
  wcscpy(v21, v22);
  if (v28 && v25 != (__int32 *)v27)
  {
    if (v25)
      MEMORY[0x20BD149A8]();
  }
  return 1;
}

void sub_2098CAE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x438]))
  {
    if (a16 != v16 && a16 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackNoCaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, TAllocator *this)
{
  const __int32 *v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int32 *v21;
  __int32 *v22;
  void *__p[2];
  char v24;
  __int32 *v25;
  __int128 v26;
  _BYTE v27[1024];
  char v28;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v25 = (__int32 *)v27;
  v26 = xmmword_209A57DD0;
  v28 = 1;
  v8 = *(const __int32 **)(a1 + 8);
  if (*v8)
  {
    v9 = 0;
    v10 = a3 + 240;
    do
    {
      while (1)
      {
        v11 = wcsncmp(v8, (const __int32 *)&unk_209A75F40, 1uLL);
        v12 = *(unsigned int *)v8;
        if (v11)
          break;
        if ((_DWORD)v12)
        {
          while (wcsncmp(v8, (const __int32 *)&unk_209A75F48, 1uLL))
          {
            LODWORD(__p[0]) = *v8;
            TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
            v14 = v8[1];
            ++v8;
            if (!v14)
              goto LABEL_16;
          }
          v9 = 1;
          if (*v8)
            continue;
        }
        goto LABEL_16;
      }
      LODWORD(__p[0]) = TLocaleInfo::toLower(v10, v12);
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      v13 = v8[1];
      ++v8;
    }
    while (v13);
    if ((v9 & 1) == 0)
      goto LABEL_21;
LABEL_16:
    loggableUnicode(*(unsigned int **)(a1 + 8), __p);
    if (v24 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    tknPrintf("Warning: '%s' : Performing NoCaps string function on a tagged value.\n", v15, v16, v17, v18, v19);
    if (v24 < 0)
      operator delete(__p[0]);
  }
LABEL_21:
  if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
    v20 = -1;
  else
    v20 = 4 * (*((_QWORD *)&v26 + 1) + 1);
  v21 = (__int32 *)TAllocator::allocate(this, v20);
  if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      v22 = v25;
      --*((_QWORD *)&v26 + 1);
    }
    else
    {
      v22 = v25;
      if ((_QWORD)v26)
        v25[(_QWORD)v26 - 1] = 0;
    }
  }
  else
  {
    v22 = v25;
    v25[*((_QWORD *)&v26 + 1)] = 0;
  }
  wcscpy(v21, v22);
  if (v28 && v25 != (__int32 *)v27)
  {
    if (v25)
      MEMORY[0x20BD149A8]();
  }
  return 1;
}

void sub_2098CB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x438]))
  {
    if (a16 != v16 && a16 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCapitalize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  const __int32 *v8;
  size_t v9;
  uint64_t v10;
  __int32 *v11;
  uint64_t v12;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v8 = (const __int32 *)a1[1];
  v9 = wcslen(v8);
  if ((v9 + 1) >> 62)
    v10 = -1;
  else
    v10 = 4 * (v9 + 1);
  v11 = (__int32 *)TAllocator::allocate(a5, v10);
  wcscpy(v11, v8);
  v12 = *v11;
  if ((_DWORD)v12)
    *v11 = TLocaleInfo::toUpper(a3 + 240, v12);
  return 1;
}

uint64_t callBackRemoveDiacritics(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  int v19;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v15 = (__int32 *)v17;
  v16 = xmmword_209A57DD0;
  v18 = 1;
  v7 = (unsigned int *)a1[1];
  v8 = *v7;
  if ((_DWORD)v8)
  {
    v9 = a3 + 240;
    v10 = v7 + 1;
    do
    {
      v19 = TLocaleInfo::removeDiacritics(v9, v8);
      TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
      v11 = *v10++;
      v8 = v11;
    }
    while (v11);
    if ((unint64_t)(*((_QWORD *)&v16 + 1) + 1) >> 62)
      v12 = -1;
    else
      v12 = 4 * (*((_QWORD *)&v16 + 1) + 1);
  }
  else
  {
    v12 = 4;
  }
  v13 = (__int32 *)TAllocator::allocate(a5, v12);
  if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
  {
    if (v18)
    {
      v19 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
      v14 = v15;
      --*((_QWORD *)&v16 + 1);
    }
    else
    {
      v14 = v15;
      if ((_QWORD)v16)
        v15[(_QWORD)v16 - 1] = 0;
    }
  }
  else
  {
    v14 = v15;
    v15[*((_QWORD *)&v16 + 1)] = 0;
  }
  wcscpy(v13, v14);
  if (v18 && v15 != (__int32 *)v17)
  {
    if (v15)
      MEMORY[0x20BD149A8]();
  }
  return 1;
}

void sub_2098CB35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFormat(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v6;
  int *v7;
  int v8;
  const __int32 *v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  TLocaleInfo *v15;
  unint64_t v16;
  const __int32 **v17;
  uint64_t v18;
  int *v19;
  TLocaleInfo *v21;
  uint64_t v22;
  __int32 *v23;
  __int32 *v24;
  TAllocator *v27;
  const __int32 **v28;
  __int32 *v29;
  __int128 v30;
  _BYTE v31[1024];
  char v32;
  int v33[3];

  if (a2 <= 1 && *a1 > 1uLL)
    return 0;
  v29 = (__int32 *)v31;
  v30 = xmmword_209A57DD0;
  v32 = 1;
  v7 = (int *)a1[1];
  v8 = *v7;
  if (*v7)
  {
    v27 = a5;
    v28 = (const __int32 **)(a1 + 3);
    while (1)
    {
      while (1)
      {
        v9 = v7;
        if ((v10 & 1) == 0
        {
          v21 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v21);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
        }
        if (v8 > 159)
          break;
        if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
          goto LABEL_19;
LABEL_17:
        v11 = v7[1];
        v8 = v11;
        ++v7;
        if (!v11)
          goto LABEL_49;
      }
      if (v8 >= 12288)
      {
        if (v8 == 65279 || v8 == 12288)
          goto LABEL_17;
      }
      else if (v8 == 160 || v8 == 8203)
      {
        goto LABEL_17;
      }
LABEL_19:
      v12 = *v7;
      if (!*v7)
        goto LABEL_49;
      while (1)
      {
        if ((v13 & 1) == 0
        {
          v15 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v15);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
        }
        if (v12 <= 159)
        {
          if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
            goto LABEL_35;
          goto LABEL_31;
        }
        if (v12 >= 12288)
          break;
        if (v12 == 160 || v12 == 8203)
          goto LABEL_35;
LABEL_31:
        v14 = v7[1];
        ++v7;
        v12 = v14;
        if (!v14)
          goto LABEL_35;
      }
      if (v12 != 12288 && v12 != 65279)
        goto LABEL_31;
LABEL_35:
      if (a2 >= 3)
      {
        v16 = 2;
        v17 = v28;
        while (1)
        {
          if ((unint64_t)*(v17 - 1) > 1)
          {
            v6 = 0;
            goto LABEL_62;
          }
          if (v7 - v9 == (int)wcslen(*v17) && !wcsncmp(v9, *v17, v7 - v9))
            break;
          v17 += 4;
          v16 += 2;
          if (v16 >= a2)
            goto LABEL_45;
        }
        v18 = 0;
        v19 = (int *)v17[2];
        while (v19[v18++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v29, *((unint64_t *)&v30 + 1), v19, v18 - 1);
      }
LABEL_45:
      v8 = *v7;
      if (!*v7)
      {
LABEL_49:
        if ((unint64_t)(*((_QWORD *)&v30 + 1) + 1) >> 62)
          v22 = -1;
        else
          v22 = 4 * (*((_QWORD *)&v30 + 1) + 1);
        a5 = v27;
        goto LABEL_54;
      }
    }
  }
  v22 = 4;
LABEL_54:
  v23 = (__int32 *)TAllocator::allocate(a5, v22);
  if (*((_QWORD *)&v30 + 1) >= (unint64_t)v30)
  {
    if (v32)
    {
      v33[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v29, *((unint64_t *)&v30 + 1), v33, 1uLL);
      v24 = v29;
      --*((_QWORD *)&v30 + 1);
    }
    else
    {
      v24 = v29;
      if ((_QWORD)v30)
        v29[(_QWORD)v30 - 1] = 0;
    }
  }
  else
  {
    v24 = v29;
    v29[*((_QWORD *)&v30 + 1)] = 0;
  }
  wcscpy(v23, v24);
  v6 = 1;
LABEL_62:
  if (v32)
  {
    if (v29 != (__int32 *)v31 && v29 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v6;
}

void sub_2098CB728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x20BD149A8](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x438]) && a13 != a12)
  {
    if (a13)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetCategoryTag(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t result;
  __int32 *v6;
  uint64_t HeadClone;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int128 v13;
  _BYTE v14[1024];
  char v15;
  int v16;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v6 = (__int32 *)a1[1];
  if (!*v6)
    return 1;
  HeadClone = TLexicon::findHeadClone(a3, v6);
  result = 1;
  if (HeadClone)
  {
    v12 = (__int32 *)v14;
    v13 = xmmword_209A57DD0;
    v15 = 1;
    TWord::getCategoryTag(HeadClone, &v12);
    if ((unint64_t)(*((_QWORD *)&v13 + 1) + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (*((_QWORD *)&v13 + 1) + 1);
    v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((_QWORD *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        v16 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v16, 1uLL);
        v11 = v12;
        --*((_QWORD *)&v13 + 1);
      }
      else
      {
        v11 = v12;
        if ((_QWORD)v13)
          v12[(_QWORD)v13 - 1] = 0;
      }
    }
    else
    {
      v11 = v12;
      v12[*((_QWORD *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12)
        MEMORY[0x20BD149A8]();
    }
    return 1;
  }
  return result;
}

void sub_2098CB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetWrittenForm(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *p_p;
  uint64_t v14;
  __int32 *v15;
  const __int32 *v16;
  void *__p;
  __int128 v18;
  _BYTE v19[1024];
  char v20;
  int v21;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v6 = (unsigned int *)a1[1];
  if (*v6)
  {
    v8 = a3;
    if (TLexicon::checkName(a3, (int *)v6, 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(v6, &__p);
      if (v18 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      tknPrintf("Error: '%s' : Written form requested for an invalid word name.\n", v9, v10, v11, v12, p_p);
      if (SHIBYTE(v18) < 0)
        operator delete(__p);
      return 0;
    }
    __p = v19;
    v18 = xmmword_209A57DD0;
    v20 = 1;
    TLexicon::getWrittenForm(v8, (__int32 *)v6, (uint64_t)&__p);
    if ((unint64_t)(*((_QWORD *)&v18 + 1) + 1) >> 62)
      v14 = -1;
    else
      v14 = 4 * (*((_QWORD *)&v18 + 1) + 1);
    v15 = (__int32 *)TAllocator::allocate(a5, v14);
    if (*((_QWORD *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        v16 = (const __int32 *)__p;
        --*((_QWORD *)&v18 + 1);
      }
      else
      {
        v16 = (const __int32 *)__p;
        if ((_QWORD)v18)
          *((_DWORD *)__p + v18 - 1) = 0;
      }
    }
    else
    {
      v16 = (const __int32 *)__p;
      *((_DWORD *)__p + *((_QWORD *)&v18 + 1)) = 0;
    }
    wcscpy(v15, v16);
    if (v20 && __p != v19 && __p)
      MEMORY[0x20BD149A8]();
  }
  return 1;
}

void sub_2098CBAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  void *v10;

  if (LOBYTE(STACK[0x420]) && __p != v10)
  {
    if (__p)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t result;
  __int32 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  __int32 *v12;
  __int32 *v13;
  TLocaleInfo *v14;
  __int32 *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  int v19;

  if (a2 != 2 || *(_QWORD *)a1 > 1uLL || *(_QWORD *)(a1 + 16) > 1uLL)
    return 0;
  v8 = wcsstr(*(__int32 **)(a1 + 8), *(const __int32 **)(a1 + 24));
  result = 1;
  if (v8)
  {
    v15 = (__int32 *)v17;
    v16 = xmmword_209A57DD0;
    v18 = 1;
    v9 = *(_QWORD *)(a1 + 8);
    if ((v10 & 1) == 0
    {
      v14 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v14);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, ((uint64_t)v8 - v9) >> 2, (uint64_t)&v15, 0);
    if ((unint64_t)(*((_QWORD *)&v16 + 1) + 1) >> 62)
      v11 = -1;
    else
      v11 = 4 * (*((_QWORD *)&v16 + 1) + 1);
    v12 = (__int32 *)TAllocator::allocate(a5, v11);
    if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
    {
      if (v18)
      {
        v19 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
        v13 = v15;
        --*((_QWORD *)&v16 + 1);
      }
      else
      {
        v13 = v15;
        if ((_QWORD)v16)
          v15[(_QWORD)v16 - 1] = 0;
      }
    }
    else
    {
      v13 = v15;
      v15[*((_QWORD *)&v16 + 1)] = 0;
    }
    wcscpy(v12, v13);
    if (v18 && v15 != (__int32 *)v17)
    {
      if (v15)
        MEMORY[0x20BD149A8]();
    }
    return 1;
  }
  return result;
}

void sub_2098CBD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x20BD149A8](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCopy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  const __int32 *v8;
  unsigned int *v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v13;
  TLocaleInfo *v14;
  char *v15;
  TLocaleInfo *v16;
  size_t v17;
  unsigned int *v18;
  uint64_t GlobalLocaleInfo;
  unsigned int v20;
  size_t v21;
  uint64_t v22;
  __int32 *v23;
  TLocaleInfo *v24;
  BOOL v25;

  if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 2 || *a1 > 1uLL || a1[2] > 1uLL || a2 == 3 && a1[4] > 1uLL)
    return 0;
  v8 = (const __int32 *)a1[1];
  v25 = 0;
  v9 = (unsigned int *)a1[3];
  {
    v24 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v24);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
  }
  v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, &v25);
  if (v25)
    return 0;
  v13 = v11;
  v14 = (TLocaleInfo *)wcslen(v8);
  v15 = (char *)v14 - v13;
  if ((unint64_t)v14 >= v13)
  {
    v16 = v14;
    v17 = (size_t)v14;
    if (a2 == 3)
    {
      v18 = (unsigned int *)a1[5];
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(v14);
      v20 = TLocaleInfo::stringToUInt(GlobalLocaleInfo, v18, &v25);
      if (v25)
        return 0;
      v17 = v20;
    }
    if (v17 + v13 <= (unint64_t)v16)
      v21 = v17;
    else
      v21 = (size_t)v15;
    if ((v21 + 1) >> 62)
      v22 = -1;
    else
      v22 = 4 * (v21 + 1);
    v23 = (__int32 *)TAllocator::allocate(a5, v22);
    wcsncpy(v23, &v8[v13], v21);
    v23[v21] = 0;
  }
  return 1;
}

void sub_2098CBF2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t BasisAccum::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v4 = 12;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = 16;
      v3 = v4;
    }
    else
    {
      v5 = *(unsigned int *)(a1 + 24);
      if ((int)v5 <= 0)
        v6 = 0;
      else
        v6 = 8 * v5;
      v3 = v6 + v4;
      v7 = *(unsigned int *)(a1 + 40);
      if ((int)v7 >= 1)
        v4 += 8 * v7;
      v2 = 16;
    }
  }
  return v3 + v2 + v4;
}

uint64_t WeightAccum::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = 8;
    v3 = 12;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 8;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v4 = *(unsigned int *)(a1 + 16);
      if ((int)v4 >= 1)
        v3 += 8 * v4;
      v2 = 8;
    }
  }
  return v3 + v2;
}

uint64_t DurAccum::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = sizeObject<unsigned long long>(a1 + 8, a2) + 4 * (a2 != 3);
  return v4 + sizeObject<unsigned long long>(a1 + 24, a2);
}

uint64_t anyTagsMatch(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v3 = *a1;
  v2 = a1[1];
  v4 = a2[1];
  v5 = v4 - *a2;
  v6 = v4 == *a2 && v2 == *a1;
  v7 = v2 - v3;
  if (v2 != v3 && v4 != *a2)
  {
    if (v7 <= v5)
      v9 = *a1;
    else
      v9 = *a2;
    if (v7 <= v5)
      v10 = a1;
    else
      v10 = a2;
    v11 = v10[1];
    v12 = v11 - v9;
    if (v11 == v9)
    {
      return 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = v12 >> 3;
      if (v7 > v5)
      {
        v16 = a1;
      }
      else
      {
        v3 = *a2;
        v16 = a2;
      }
      v17 = ((v16[1] - v3) >> 3) - 1;
      if (v15 <= 1)
        v18 = 1;
      else
        v18 = v15;
      while (v14 > v17)
      {
LABEL_29:
        if (++v13 == v18)
          return 0;
      }
      v19 = *(_QWORD *)(v9 + 8 * v13);
      v20 = v17;
      while (1)
      {
        v21 = (v20 + v14) >> 1;
        v22 = *(_QWORD *)(v3 + 8 * v21);
        if (v22 == v19)
          return 1;
        if (v22 > v19)
        {
          if (v20 + v14 < 2)
            goto LABEL_29;
          v20 = v21 - 1;
        }
        else
        {
          v14 = v21 + 1;
        }
        if (v14 > v20)
          goto LABEL_29;
      }
    }
  }
  return v6;
}

void TTag::TTag(TTag *this, const TFileObject *a2, const TTagManager *a3)
{
  char *v6;
  uint64_t i;
  unsigned int *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  std::string *v36;
  const char *v37;
  _QWORD *v38;
  std::string *v39;
  __int128 v40;
  const char *v41;
  _QWORD *exception;
  std::string *v43;
  __int128 v44;
  const char *v45;
  _QWORD *v46;
  std::string *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  TLocaleInfo *v52;
  char *v53;
  void *v54[2];
  uint64_t v55;
  _BYTE __p[24];
  uint64_t v57;
  __int32 *v58;
  __int128 v59;
  uint64_t v60;
  __int32 *v61;
  __int128 v62;
  uint64_t v63;
  __int32 *v64;
  __int128 v65;
  uint64_t v66;
  __int32 *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  v6 = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v58 = dword_209A75F50;
  v59 = xmmword_209A57D60;
  v60 = -1;
  v61 = dword_209A75F64;
  v62 = xmmword_209A57D60;
  v63 = -1;
  v64 = dword_209A75F94;
  v65 = xmmword_209A57D80;
  v66 = -1;
  v67 = dword_209A75FC0;
  v68 = xmmword_209A57D80;
  v69 = -1;
  v53 = (char *)this + 48;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v58, 4uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v54;
      v57 = v55;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v57 >= 0)
      v41 = &__p[8];
    else
      v41 = *(const char **)&__p[8];
    conditionalAssert(v41, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 127, v32, v33);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v55) < 0)
      operator delete(v54[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v43 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v50 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v50;
    }
    *exception = &unk_24C214BA0;
  }
  *((_QWORD *)this + 4) = -1;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = 0;
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_209A75F50))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v54;
          v57 = v55;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v57 >= 0)
          v24 = &__p[8];
        else
          v24 = *(const char **)&__p[8];
        conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 137, v11, v12);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        v25 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v25 = aPpx;
        v26 = (std::string *)(v25 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v40 = *(_OWORD *)__p;
          v25[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v40;
        }
        *v25 = &unk_24C214BA0;
      }
      MEMORY[0x20BD147A4](this, *(_QWORD *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_209A75F64))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v54;
          v57 = v55;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v57 >= 0)
          v29 = &__p[8];
        else
          v29 = *(const char **)&__p[8];
        conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 142, v13, v14);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        v30 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v30 = aPpx;
        v31 = (std::string *)(v30 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v44 = *(_OWORD *)__p;
          v30[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v44;
        }
        *v30 = &unk_24C214BA0;
      }
      MEMORY[0x20BD147A4](v6, *(_QWORD *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_209A75FC0))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v54;
          v57 = v55;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v57 >= 0)
          v34 = &__p[8];
        else
          v34 = *(const char **)&__p[8];
        conditionalAssert(v34, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 147, v22, v23);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        v35 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v35 = aPpx;
        v36 = (std::string *)(v35 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v48 = *(_OWORD *)__p;
          v35[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v48;
        }
        *v35 = &unk_24C214BA0;
      }
      v10 = (*(uint64_t (**)(const TTagManager *, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(i + 24));
      *((_QWORD *)this + 4) = v10;
      if (v10 == -1)
      {
        loggableUnicode(*(unsigned int **)(i + 24), __p);
        if (__p[23] >= 0)
          v19 = __p;
        else
          v19 = *(_BYTE **)__p;
        tknPrintf("Error: %sTag hasn't been defined.\n", v15, v16, v17, v18, v19);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v54;
          v57 = v55;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v57 >= 0)
          v45 = &__p[8];
        else
          v45 = *(const char **)&__p[8];
        conditionalAssert(v45, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 153, v20, v21);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        v46 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v46 = aPpx;
        v47 = (std::string *)(v46 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v51 = *(_OWORD *)__p;
          v46[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v51;
        }
        *v46 = &unk_24C214BA0;
      }
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_209A75F94))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v54, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v54;
          v57 = v55;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v57 >= 0)
          v37 = &__p[8];
        else
          v37 = *(const char **)&__p[8];
        conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 158, v27, v28);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        v38 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v38 = aPpx;
        v39 = (std::string *)(v38 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v49 = *(_OWORD *)__p;
          v38[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v49;
        }
        *v38 = &unk_24C214BA0;
      }
      __p[0] = 0;
      v8 = *(unsigned int **)(i + 24);
      if ((v9 & 1) == 0)
      {
        {
          v52 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v52);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v52;
        }
      }
      *((_DWORD *)this + 10) = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, __p);
      v6 = v53;
    }
  }
}

void sub_2098CCAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  if (*(char *)(v27 + 71) < 0)
    operator delete(*a11);
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(a1);
}

uint64_t TTag::TTag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  MEMORY[0x20BD147A4]();
  return a1;
}

void sub_2098CCC94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  TTag::TTag(v1);
  _Unwind_Resume(a1);
}

void TTagManager::TTagManager(TTagManager *this, TInputStream *a2, TLexiconParamManager *a3, TItnParamManager *a4)
{
  TParam *v8;
  uint64_t ActiveConfigHandle;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  const __int32 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *ItnTagVersion;
  uint64_t v70;
  const TFileObject *i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  _QWORD *exception;
  std::string *v78;
  const char *v79;
  _QWORD *v80;
  std::string *v81;
  __int128 v82;
  __int128 v83;
  TInputStream *v84;
  void *v85[2];
  uint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  _BYTE v89[24];
  uint64_t v90;
  _BYTE __p[24];
  _QWORD v92[128];
  char v93;

  *(_QWORD *)this = &off_24C213CB0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_24C2197B8;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 66) = 1;
  *((_QWORD *)this + 9) = a4;
  v8 = (TItnParamManager *)((char *)a4 + 5768);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TItnParamManager *)((char *)a4 + 5768));
  if (!*((_BYTE *)a4 + TParam::getValidConfig(v8, ActiveConfigHandle) + 5920))
    goto LABEL_121;
  v84 = a2;
  *(_QWORD *)__p = v92;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v93 = 1;
  TParamManager::begin((uint64_t)a4, v89);
  while (1)
  {
    TParamManager::end((uint64_t)a4, v87);
    if (*(_QWORD *)v89 == *(_QWORD *)v87)
      break;
    v10 = *(_QWORD *)(*(_QWORD *)v89 + 40);
    if (v10 && (v11 = v10 - 1, v12 = *((_QWORD *)a4 + 3), v11 < (*((_QWORD *)a4 + 4) - v12) >> 3))
      v13 = *(_QWORD *)(v12 + 8 * v11);
    else
      v13 = 0;
    if (*(char *)(v13 + 111) < 0)
    {
      if (*(_QWORD *)(v13 + 96))
        goto LABEL_50;
    }
    else if (*(_BYTE *)(v13 + 111))
    {
      goto LABEL_50;
    }
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 == 4)
    {
      if (v20[164] != v20[163])
      {
        v21 = v20;
        TBuffer<wchar_t>::assign((uint64_t)__p, dword_209A75FEC);
        v22 = (int *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v22 = *(int **)v22;
        v23 = 0;
        while (v22[v23++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v22, v23 - 1);
        *(_DWORD *)v87 = 61;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
        v25 = v21[163];
        if (v21[164] != v25)
        {
          v26 = 0;
          v27 = *(_QWORD *)&__p[16];
          do
          {
            v28 = (uint64_t *)(v25 + 24 * v26);
            if (*((char *)v28 + 23) < 0)
              v28 = (uint64_t *)*v28;
            v29 = 0;
            while (*((_DWORD *)v28 + v29++))
              ;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v28, v29 - 1);
            if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
            {
              if (v93)
              {
                *(_DWORD *)v87 = 0;
                TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
                v31 = *(_QWORD *)__p;
                --*(_QWORD *)&__p[16];
              }
              else
              {
                v31 = *(_QWORD *)__p;
                if (*(_QWORD *)&__p[8])
                  *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
              }
            }
            else
            {
              v31 = *(_QWORD *)__p;
              *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
            }
            TTagManager::addParamTag(this, v31, -1);
            TBuffer<wchar_t>::resize((uint64_t)__p, v27);
            ++v26;
            v25 = v21[163];
          }
          while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v21[164] - v25) >> 3));
        }
      }
    }
    else if (!v14)
    {
      TBuffer<wchar_t>::assign((uint64_t)__p, dword_209A75FD0);
      v15 = (int *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0)
        v15 = *(int **)v15;
      v16 = 0;
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v15, v16 - 1);
      *(_DWORD *)v87 = 61;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
      v18 = *(_QWORD *)&__p[16];
      *(_DWORD *)v87 = 48;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v93)
        {
          *(_DWORD *)v87 = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
          v19 = *(_QWORD *)__p;
          --*(_QWORD *)&__p[16];
        }
        else
        {
          v19 = *(_QWORD *)__p;
          if (*(_QWORD *)&__p[8])
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        v19 = *(_QWORD *)__p;
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      TTagManager::addParamTag(this, v19, -1);
      TBuffer<wchar_t>::resize((uint64_t)__p, v18);
      *(_DWORD *)v87 = 49;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v93)
        {
          *(_DWORD *)v87 = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v87, 1uLL);
          v32 = *(_QWORD *)__p;
          --*(_QWORD *)&__p[16];
        }
        else
        {
          v32 = *(_QWORD *)__p;
          if (*(_QWORD *)&__p[8])
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        v32 = *(_QWORD *)__p;
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      TTagManager::addParamTag(this, v32, -1);
    }
LABEL_50:
    v33 = *(_QWORD **)v89;
    v34 = *(_QWORD **)(*(_QWORD *)v89 + 8);
    if (v34)
    {
      do
      {
        v35 = v34;
        v34 = (_QWORD *)*v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        v35 = (_QWORD *)v33[2];
        v36 = *v35 == (_QWORD)v33;
        v33 = v35;
      }
      while (!v36);
    }
    *(_QWORD *)v89 = v35;
  }
  TParamManager::begin((uint64_t)a3, v89);
  while (1)
  {
    TParamManager::end((uint64_t)a3, v87);
    if (*(_QWORD *)v89 == *(_QWORD *)v87)
      break;
    v37 = *(_QWORD *)(*(_QWORD *)v89 + 40);
    if (v37 && (v38 = v37 - 1, v39 = *((_QWORD *)a3 + 3), v38 < (*((_QWORD *)a3 + 4) - v39) >> 3))
      v40 = *(_QWORD *)(v39 + 8 * v38);
    else
      v40 = 0;
    v41 = (int *)(v40 + 16);
    v42 = (const __int32 *)(v40 + 16);
    if (*(char *)(v40 + 39) < 0)
      v42 = *(const __int32 **)v41;
    TParamManager::find((uint64_t)a4, v42, (uint64_t *)v87);
    TParamManager::end((uint64_t)a4, v85);
    if (*(void **)v87 != v85[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v87 + 40);
      if (v43)
      {
        v44 = v43 - 1;
        v45 = *((_QWORD *)a4 + 3);
        if (v44 >= (*((_QWORD *)a4 + 4) - v45) >> 3)
          v43 = 0;
        else
          v43 = *(_QWORD *)(v45 + 8 * v44);
      }
      if (*(char *)(v43 + 111) < 0)
      {
        if (!*(_QWORD *)(v43 + 96))
          goto LABEL_111;
      }
      else if (!*(_BYTE *)(v43 + 111))
      {
        goto LABEL_111;
      }
    }
    v46 = *(_DWORD *)(v40 + 8);
    if (v46 == 4)
    {
      if (v51[164] != v51[163])
      {
        v52 = v51;
        TBuffer<wchar_t>::assign((uint64_t)__p, dword_209A75FEC);
        if (*(char *)(v40 + 39) < 0)
          v41 = *(int **)v41;
        v53 = 0;
        while (v41[v53++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v41, v53 - 1);
        LODWORD(v85[0]) = 61;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
        v55 = v52[163];
        if (v52[164] != v55)
        {
          v56 = 0;
          v57 = *(_QWORD *)&__p[16];
          do
          {
            v58 = (uint64_t *)(v55 + 24 * v56);
            if (*((char *)v58 + 23) < 0)
              v58 = (uint64_t *)*v58;
            v59 = 0;
            while (*((_DWORD *)v58 + v59++))
              ;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v58, v59 - 1);
            if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
            {
              if (v93)
              {
                LODWORD(v85[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
                v61 = *(_QWORD *)__p;
                --*(_QWORD *)&__p[16];
              }
              else
              {
                v61 = *(_QWORD *)__p;
                if (*(_QWORD *)&__p[8])
                  *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
              }
            }
            else
            {
              v61 = *(_QWORD *)__p;
              *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
            }
            TTagManager::addParamTag(this, v61, -1);
            TBuffer<wchar_t>::resize((uint64_t)__p, v57);
            ++v56;
            v55 = v52[163];
          }
          while (v56 < 0xAAAAAAAAAAAAAAABLL * ((v52[164] - v55) >> 3));
        }
      }
    }
    else if (!v46)
    {
      TBuffer<wchar_t>::assign((uint64_t)__p, dword_209A75FD0);
      if (*(char *)(v40 + 39) < 0)
        v41 = *(int **)v41;
      v47 = 0;
      while (v41[v47++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v41, v47 - 1);
      LODWORD(v85[0]) = 61;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
      v49 = *(_QWORD *)&__p[16];
      LODWORD(v85[0]) = 48;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v93)
        {
          LODWORD(v85[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
          v50 = *(_QWORD *)__p;
          --*(_QWORD *)&__p[16];
        }
        else
        {
          v50 = *(_QWORD *)__p;
          if (*(_QWORD *)&__p[8])
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        v50 = *(_QWORD *)__p;
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      TTagManager::addParamTag(this, v50, -1);
      TBuffer<wchar_t>::resize((uint64_t)__p, v49);
      LODWORD(v85[0]) = 49;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v93)
        {
          LODWORD(v85[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v85, 1uLL);
          v62 = *(_QWORD *)__p;
          --*(_QWORD *)&__p[16];
        }
        else
        {
          v62 = *(_QWORD *)__p;
          if (*(_QWORD *)&__p[8])
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        v62 = *(_QWORD *)__p;
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      TTagManager::addParamTag(this, v62, -1);
    }
LABEL_111:
    v63 = *(_QWORD **)v89;
    v64 = *(_QWORD **)(*(_QWORD *)v89 + 8);
    if (v64)
    {
      do
      {
        v65 = v64;
        v64 = (_QWORD *)*v64;
      }
      while (v64);
    }
    else
    {
      do
      {
        v65 = (_QWORD *)v63[2];
        v36 = *v65 == (_QWORD)v63;
        v63 = v65;
      }
      while (!v36);
    }
    *(_QWORD *)v89 = v65;
  }
  v66 = TTagManager::addTag(this, dword_209A76008, -1);
  *((_QWORD *)this + 13) = v66;
  *((_QWORD *)this + 10) = TTagManager::addTag(this, dword_209A76050, v66);
  *((_QWORD *)this + 11) = TTagManager::addTag(this, dword_209A7609C, *((_QWORD *)this + 13));
  *((_QWORD *)this + 12) = TTagManager::addTag(this, dword_209A760E4, *((_QWORD *)this + 13));
  *((_QWORD *)this + 18) = TTagManager::addTag(this, dword_209A7612C, -1);
  v67 = TTagManager::addTag(this, dword_209A76184, -1);
  *((_QWORD *)this + 19) = v67;
  *((_QWORD *)this + 14) = TTagManager::addTag(this, dword_209A761D4, v67);
  *((_QWORD *)this + 15) = TTagManager::addTag(this, dword_209A76214, *((_QWORD *)this + 19));
  *((_QWORD *)this + 16) = TTagManager::addTag(this, dword_209A76258, *((_QWORD *)this + 19));
  *((_QWORD *)this + 17) = TTagManager::addTag(this, dword_209A762A8, *((_QWORD *)this + 19));
  a2 = v84;
  if (v93 && *(_QWORD **)__p != v92 && *(_QWORD *)__p)
    MEMORY[0x20BD149A8](*(_QWORD *)__p, 0x1000C4052888210);
LABEL_121:
  if (*((_BYTE *)a2 + 8))
  {
    v68 = *(_QWORD *)getItnTagVersion();
    ItnTagVersion = (_QWORD *)getItnTagVersion();
    if (TInputStream::verifyHeader((uint64_t)a2, "ItnTag", v68, (uint64_t)(ItnTagVersion[1] - *ItnTagVersion) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v89, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if ((v89[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v89, *(std::string::size_type *)&v89[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v89;
        v92[0] = *(_QWORD *)&v89[16];
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v92[0] >= 0)
        v76 = &__p[8];
      else
        v76 = *(const char **)&__p[8];
      conditionalAssert(v76, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 286, v72, v73);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v92[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if ((v89[23] & 0x80000000) != 0)
        operator delete(*(void **)v89);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v78 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v82 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v82;
      }
      *exception = &unk_24C214BA0;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
    v70 = *(_QWORD *)__p;
    *(_QWORD *)v89 = &unk_209A762F8;
    *(_OWORD *)&v89[8] = xmmword_209A57DB0;
    v90 = -1;
    if (TFileObject::verify(*(uint64_t *)__p, (uint64_t)v89, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v85, &byte_209A88803);
      *(_QWORD *)v87 = aPpx;
      if (SHIBYTE(v86) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v87[8], (const std::string::value_type *)v85[0], (std::string::size_type)v85[1]);
      }
      else
      {
        *(_OWORD *)&v87[8] = *(_OWORD *)v85;
        v88 = v86;
      }
      *(_QWORD *)v87 = &unk_24C214BA0;
      if (v88 >= 0)
        v79 = &v87[8];
      else
        v79 = *(const char **)&v87[8];
      conditionalAssert(v79, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 298, v74, v75);
      *(_QWORD *)v87 = aPpx;
      if (SHIBYTE(v88) < 0)
        operator delete(*(void **)&v87[8]);
      if (SHIBYTE(v86) < 0)
        operator delete(v85[0]);
      v80 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v87, &byte_209A88803);
      *v80 = aPpx;
      v81 = (std::string *)(v80 + 1);
      if ((v87[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)v87, *(std::string::size_type *)&v87[8]);
      }
      else
      {
        v83 = *(_OWORD *)v87;
        v80[3] = *(_QWORD *)&v87[16];
        *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v83;
      }
      *v80 = &unk_24C214BA0;
    }
    for (i = *(const TFileObject **)(v70 + 24); i; i = (const TFileObject *)*((_QWORD *)i + 2))
      TTagManager::addTag(this, i);
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
  }
}

void sub_2098CDAA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,void *a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v45);
  JUMPOUT(0x2098CDBCCLL);
}

void sub_2098CDBC4()
{
  JUMPOUT(0x2098CDBCCLL);
}

void sub_2098CDBF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  void **v5;

  __cxa_end_catch();
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(v4);
  v3 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_2098CDC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v27;
  void **v28;

  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0)
      MEMORY[0x20BD149A8]();
  }
  ((void (*)())THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase)();
  v27 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v24 + 16) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t TTagManager::addParamTag(TTagManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  TTag *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(TTagManager *))(*(_QWORD *)a1 + 16))(a1);
  if (result == -1)
  {
    v7 = (TTag *)operator new();
    TTag::TTag((uint64_t)v7, a2, 1, a3);
    return TTagManager::storeTag(a1, v7, v8, v9, v10);
  }
  return result;
}

void sub_2098CDD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1092C40905D918ALL);
  _Unwind_Resume(a1);
}

uint64_t TTagManager::addTag(TTagManager *a1, unsigned int *a2, uint64_t a3)
{
  TTag *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD *exception;
  std::string *v20;
  __int128 v21;
  void *v22[2];
  uint64_t v23;
  _BYTE __p[24];
  uint64_t v25;

  if ((*(uint64_t (**)(TTagManager *))(*(_QWORD *)a1 + 16))(a1) != -1)
  {
    loggableUnicode(a2, __p);
    if (__p[23] >= 0)
      v15 = __p;
    else
      v15 = *(_BYTE **)__p;
    tknPrintf("Error: Tag name already defined: '%s'\n", v11, v12, v13, v14, v15);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(v22, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v22[0], (std::string::size_type)v22[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v22;
      v25 = v23;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v25 >= 0)
      v18 = &__p[8];
    else
      v18 = *(const char **)&__p[8];
    conditionalAssert(v18, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 364, v16, v17);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v25) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v20 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v21 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    *exception = &unk_24C214BA0;
  }
  v6 = (TTag *)operator new();
  TTag::TTag((uint64_t)v6, (uint64_t)a2, 0, a3);
  return TTagManager::storeTag(a1, v6, v7, v8, v9);
}

void sub_2098CDF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t getItnTagVersion(void)
{
  unsigned __int8 v0;
  _QWORD *v2;
  _OWORD v3[4];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  {
    v2 = (_QWORD *)operator new();
    v3[0] = xmmword_24C21BA28;
    v3[1] = *(_OWORD *)&off_24C21BA38;
    v3[2] = xmmword_24C21BA48;
    v3[3] = *(_OWORD *)&off_24C21BA58;
    std::vector<TFileVersionDescriptor>::vector[abi:ne180100](v2, v3, 2uLL);
    getItnTagVersion(void)::pItnTagVersion = (uint64_t)v2;
  }
  return getItnTagVersion(void)::pItnTagVersion;
}

void sub_2098CE080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t TTagManager::addTag(TTagManager *this, const TFileObject *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *exception;
  std::string *v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  _BYTE __p[24];
  uint64_t v24;

  v4 = (char *)operator new();
  TTag::TTag((TTag *)v4, a2, this);
  v5 = v4;
  if (v4[23] < 0)
    v5 = *(char **)v4;
  if ((*(uint64_t (**)(TTagManager *, char *))(*(_QWORD *)this + 16))(this, v5) != -1)
  {
    loggableFileObject((uint64_t *)a2);
    if (__p[23] >= 0)
      v14 = __p;
    else
      v14 = *(_BYTE **)__p;
    tknPrintf("Error: %sTag name already defined\n", v10, v11, v12, v13, v14);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    TTag::~TTag((void **)v4);
    MEMORY[0x20BD149A8]();
    std::string::basic_string[abi:ne180100]<0>(v21, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v21;
      v24 = v22;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v24 >= 0)
      v17 = &__p[8];
    else
      v17 = *(const char **)&__p[8];
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 350, v15, v16);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v24) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v19 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *exception = &unk_24C214BA0;
  }
  return TTagManager::storeTag(this, (TTag *)v4, v6, v7, v8);
}

void sub_2098CE2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

_QWORD *TTagManager::freeMemory(TTagManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (v5)
      {
        TTag::~TTag(v5);
        MEMORY[0x20BD149A8]();
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  return THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear((_QWORD *)this + 4);
}

void TTagManager::~TTagManager(TTagManager *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C213CB0;
  TTagManager::freeMemory(this);
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase((_QWORD *)this + 4);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  TTagManager::~TTagManager(this);
  JUMPOUT(0x20BD149A8);
}

_QWORD *THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = v1[1];
      result = *(_QWORD **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          v5 = (_QWORD *)*result;
          MEMORY[0x20BD149A8]();
          result = v5;
        }
        while (v5);
        v4 = v1[1];
        v2 = v1[2];
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

uint64_t TTagManager::storeTag(TTagManager *this, TTag *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  const __int32 *v25;
  uint64_t v27;
  const __int32 *v28[2];

  v8 = (void **)((char *)this + 8);
  v7 = *((_QWORD *)this + 1);
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  v10 = ((uint64_t)v9 - v7) >> 3;
  v11 = v10 + 1;
  *((_QWORD *)a2 + 3) = v10 + 1;
  v14 = *((_QWORD *)this + 3);
  v12 = (char *)this + 24;
  v13 = v14;
  if ((unint64_t)v9 >= v14)
  {
    if (v11 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v16 = v13 - v7;
    v17 = v16 >> 2;
    if (v16 >> 2 <= v11)
      v17 = v10 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v12, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v10];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = a2;
    v15 = v20 + 8;
    v23 = (char *)*((_QWORD *)this + 1);
    v22 = (char *)*((_QWORD *)this + 2);
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)*v8;
    }
    *((_QWORD *)this + 1) = v20;
    *((_QWORD *)this + 2) = v15;
    *((_QWORD *)this + 3) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v9 = a2;
    v15 = v9 + 1;
  }
  *((_QWORD *)this + 2) = v15;
  v25 = (const __int32 *)a2;
  if (*((char *)a2 + 23) < 0)
    v25 = *(const __int32 **)a2;
  v28[0] = v25;
  v28[1] = (const __int32 *)a2;
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::insert((uint64_t)this + 32, v28, a3, a4, a5, (uint64_t)&v27);
  return v10 + 1;
}

uint64_t TTagManager::addWordRuleTag(TTagManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  TTag *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(TTagManager *))(*(_QWORD *)a1 + 16))(a1);
  if (result == -1)
  {
    v7 = (TTag *)operator new();
    TTag::TTag((uint64_t)v7, a2, 2, a3);
    return TTagManager::storeTag(a1, v7, v8, v9, v10);
  }
  return result;
}

void sub_2098CE648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1092C40905D918ALL);
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  const __int32 *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9 == *(_QWORD *)(a1 + 16))
  {
    if (v9)
    {
      if (*(_BYTE *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(_QWORD *)(a1 + 24));
        v9 = *(_QWORD *)(a1 + 16);
      }
      v10 = 2 * v9;
    }
    else
    {
      v10 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v10);
  }
  v11 = *a2;
  v12 = wcslen(*a2);
  v13 = 0;
  v14 = 4 * v12;
  if (4 * v12)
  {
    do
    {
      v15 = *(char *)v11;
      v11 = (const __int32 *)((char *)v11 + 1);
      v13 = 33 * v13 + v15;
      --v14;
    }
    while (v14);
  }
  v16 = v13 % *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8) + 8 * v16;
  while (1)
  {
    v17 = *(_QWORD *)v17;
    if (!v17)
      break;
    result = wcscmp(*(const __int32 **)(v17 + 8), *a2);
    if (!(_DWORD)result)
    {
      v19 = 0;
      goto LABEL_15;
    }
  }
  result = operator new();
  v17 = result;
  v20 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = *(_QWORD *)(v20 + 8 * v16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v20 + 8 * v16) = result;
  ++*(_QWORD *)(a1 + 24);
  v19 = 1;
LABEL_15:
  v21 = *(_QWORD *)(a1 + 8);
  v22 = v21 + 8 * v16;
  v23 = v21 + 8 * *(_QWORD *)(a1 + 16);
  *(_QWORD *)a6 = v22;
  *(_QWORD *)(a6 + 8) = v23;
  *(_QWORD *)(a6 + 16) = v17;
  *(_BYTE *)(a6 + 24) = v19;
  return result;
}

uint64_t TTagManager::getAllTags(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_QWORD *)(result + 16) != *(_QWORD *)(result + 8))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = ++v4;
      result = TBuffer<TPItnRuleHandle_fake **>::insert(a2, *(_QWORD *)(a2 + 16), (uint64_t *)&v5, 1uLL);
    }
    while (v4 < (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3);
  }
  return result;
}

uint64_t TTagManager::getTag(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2 - 1 >= (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * (a2 - 1));
}

uint64_t TTagManager::getTag(uint64_t a1, const __int32 *a2)
{
  const __int32 *v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[0] = a2;
  v3[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 32, v3, &v4);
  if (v5)
    return *(_QWORD *)(*(_QWORD *)(v5 + 16) + 24);
  else
    return -1;
}

uint64_t TTagManager::getTagName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2 - 1 >= (unint64_t)((*(_QWORD *)(a1 + 16) - v3) >> 3))
    v4 = 0;
  else
    v4 = *(int **)(v3 + 8 * (a2 - 1));
  if (*((char *)v4 + 23) < 0)
    v4 = *(int **)v4;
  return TBuffer<wchar_t>::assign(a3, v4);
}

uint64_t TTagManager::getTagDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2 - 8);
  v4 = (int *)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    v4 = *(int **)v4;
  return TBuffer<wchar_t>::assign(a3, v4);
}

uint64_t TTagManager::getTagClientData(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2 - 8) + 40);
}

uint64_t TTagManager::setTagClientData(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8 * a2 - 8) + 40) = a3;
  return result;
}

BOOL TTagManager::isValidTag(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return a2 - 1 < (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 3) && *(_QWORD *)(v2 + 8 * (a2 - 1)) != 0;
}

_QWORD *std::vector<TFileVersionDescriptor>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<TFileVersionDescriptor>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 32 * a3);
    a1[1] = &v6[32 * a3];
  }
  return a1;
}

void sub_2098CE984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TFileVersionDescriptor>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_QWORD *THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219E78;
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD14990](v2, 0x20C8093837F09);
  return a1;
}

void THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

void TTag::~TTag(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void THashMap<wchar_t const*,TTag const*,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

const char *GetMrecName(void)
{
  return "MREC";
}

const char *GetMrecVersion(void)
{
  return "v1.24.000.15488";
}

const char *GetMrecVersionNumberString(void)
{
  return "1.24.000.15488";
}

DgnString *GetFullMrecDescription(DgnString *a1)
{
  _BYTE v3[24];

  DgnString::operator=(a1, "MREC");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "v1.24.000.15488");
  DgnString::operator+=(a1, " - The modular recognizer\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " Build ");
  DgnString::operator+=(a1, "imgls");
  DgnString::operator+=(a1, " (");
  DgnString::operator+=(a1, "ARM");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "MacOS");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "GNU_C/C++");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "4.2.1");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "Large");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "\"Ship\"");
  DgnString::operator+=(a1, ")\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " Compiled ");
  MrecTime::MrecTime((MrecTime *)v3);
  MrecTime::setToPreprocessorStyleDateAndTime((MrecTime *)v3, "Aug  3 2024", "07:36:31");
  MrecTime::formatAndAppendToString((MrecTime *)v3, a1);
  DgnString::operator+=(a1, "\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "Copyright (c) -  All rights reserved.");
  return DgnString::operator+=(a1, "\n");
}

uint64_t InternalCompareMrecVersions(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v24[2];
  unsigned int *v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  ParseMrecVersion((uint64_t)a1, (uint64_t)&v25, a3, a4, a5, a6, a7, a8);
  v24[0] = 0;
  v24[1] = 0;
  ParseMrecVersion((uint64_t)a2, (uint64_t)v24, v9, v10, v11, v12, v13, v14);
  v15 = v26;
  if ((_DWORD)v26)
  {
    v16 = v25;
    v17 = (unsigned int *)v24[0];
    while (1)
    {
      v19 = *v16++;
      v18 = v19;
      v20 = *v17++;
      v21 = v18 >= v20;
      if (v18 > v20)
        break;
      if (!v21)
      {
        v22 = 0xFFFFFFFFLL;
        goto LABEL_9;
      }
      if (!--v15)
        goto LABEL_7;
    }
    v22 = 1;
  }
  else
  {
LABEL_7:
    v22 = 0;
  }
LABEL_9:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  return v22;
}

void sub_2098CED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ParseMrecVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  LODWORD(v9) = 0;
  v10 = MEMORY[0x24BDAC740];
  *(_DWORD *)(a2 + 8) = 0;
  do
  {
    while (1)
    {
      v11 = 0;
      v12 = *(unsigned __int8 *)(a1 + v9);
      do
      {
        if ((v12 & 0x80) != 0 || (*(_DWORD *)(v10 + 4 * v12 + 60) & 0x400) == 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 215, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
          LOBYTE(v12) = *(_BYTE *)(a1 + v9);
        }
        v13 = v12 - 48;
        if ((~((_BYTE)v12 - 48) | 0xFFFFFF01) / 0xA < v11)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 219, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
        v11 = v13 + 10 * v11;
        v9 = (v9 + 1);
        v12 = *(unsigned __int8 *)(a1 + v9);
      }
      while ((_DWORD)v12 != 46 && v12 != 0);
      v15 = *(unsigned int *)(a2 + 8);
      if (v15 == *(_DWORD *)(a2 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v15 = *(unsigned int *)(a2 + 8);
      }
      v16 = *(_QWORD *)a2;
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v15) = v11;
      v17 = *(_DWORD *)(a2 + 8);
      v18 = v17 + 1;
      *(_DWORD *)(a2 + 8) = v17 + 1;
      if (*(_BYTE *)(a1 + v9) != 46)
        break;
      LODWORD(v9) = v9 + 1;
    }
  }
  while (*(_BYTE *)(a1 + v9));
  if (v17 == 3)
  {
    if (v18 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      v21 = *(unsigned int *)(a2 + 8);
      v16 = *(_QWORD *)a2;
    }
    else
    {
      v21 = 4;
    }
    *(_DWORD *)(v16 + 4 * v21) = 0;
  }
  else
  {
    if (v17 != 2)
      goto LABEL_34;
    v19 = *(_DWORD *)(v16 + 8);
    if (v18 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      v20 = *(unsigned int *)(a2 + 8);
      v16 = *(_QWORD *)a2;
    }
    else
    {
      v20 = 3;
    }
    *(_DWORD *)(v16 + 4 * v20) = v19;
    ++*(_DWORD *)(a2 + 8);
    *(_DWORD *)(v16 + 8) = 0;
    v22 = *(_DWORD *)(a2 + 8);
    if (v22 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      v22 = *(_DWORD *)(a2 + 8);
      v16 = *(_QWORD *)a2;
    }
    *(_DWORD *)(v16 + 4 * v22) = 0;
  }
  v23 = *(_DWORD *)(a2 + 12);
  v24 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v24;
  if (v24 == v23)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
    v24 = *(_DWORD *)(a2 + 8);
    v16 = *(_QWORD *)a2;
  }
  *(_DWORD *)(v16 + 4 * v24) = 0;
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
LABEL_34:
  if (v18 != 6)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 247, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
}

uint64_t InternalCompareMrecForkVersions(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];

  v23[0] = 0;
  v23[1] = 0;
  ParseMrecVersion((uint64_t)a1, (uint64_t)v23, a3, a4, a5, a6, a7, a8);
  v22[0] = 0;
  v22[1] = 0;
  ParseMrecVersion((uint64_t)a2, (uint64_t)v22, v9, v10, v11, v12, v13, v14);
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = *(_DWORD *)(v23[0] + 4 * v16);
    v18 = *(_DWORD *)(v22[0] + 4 * v16);
    if (v17 > v18)
    {
      v20 = 1;
      goto LABEL_8;
    }
    v19 = v15 ^ 1;
    v15 = 1;
    v16 = 1;
  }
  while (((v17 >= v18) & v19) != 0);
  if (v17 >= v18)
    v20 = 0;
  else
    v20 = 0xFFFFFFFFLL;
LABEL_8:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  return v20;
}

void sub_2098CF0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MrecInitModule_fmpe_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugFmpe)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFmpe", (const char *)&unk_209A763F0, (const char *)&unk_209A763F0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugFmpe = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFmpe);
  }
}

void FmpeMgr::~FmpeMgr(PelMgr **this)
{
  DgnDelete<PelMgr>(this[14]);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 18));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 15));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 11));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4));
}

void FmpeMgr::printSize(FmpeMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  PelMgr *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 231, (DgnString *)&v143);
  if ((_DWORD)v144)
    v16 = (void *)v143;
  else
    v16 = &unk_209A763F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A763F0, a3, &unk_209A763F0, v16);
  DgnString::~DgnString((DgnString *)&v143);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A763F0);
  v21 = (PelMgr *)*((_QWORD *)this + 14);
  if (v21)
  {
    v142 = 0;
    v143 = 0;
    v22 = (a3 + 1);
    v141 = 0;
    PelMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v143, &v142, &v141);
    *a4 += v143;
    *a5 += v142;
    *a6 += v141;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 233, (DgnString *)&v143);
  if ((_DWORD)v144)
    v29 = (void *)v143;
  else
    v29 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_209A763F0, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v23;
  *a5 += v23;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v34 = (void *)v143;
  else
    v34 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v22, &unk_209A763F0, (34 - a3), (34 - a3), v34, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v39 = (void *)v143;
  else
    v39 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v22, &unk_209A763F0, (34 - a3), (34 - a3), v39, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v44 = (void *)v143;
  else
    v44 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v22, &unk_209A763F0, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v49 = (void *)v143;
  else
    v49 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v22, &unk_209A763F0, (34 - a3), (34 - a3), v49, 4, 4, 0);
  v140 = a3;
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v54 = (void *)v143;
  else
    v54 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v22, &unk_209A763F0, (34 - a3), (34 - a3), v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  v55 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 88, 0);
  v56 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 88, 1);
  v143 = 0;
  v144 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v143);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v61 = (void *)v143;
  else
    v61 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v22, &unk_209A763F0, v24, v24, v61, v55, v56, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v55;
  *a5 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v66 = (void *)v143;
  else
    v66 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v22, &unk_209A763F0, v24, v24, v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v71 = (void *)v143;
  else
    v71 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v22, &unk_209A763F0, v24, v24, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 12;
  else
    v72 = 16;
  v73 = *((unsigned int *)this + 10);
  v74 = *((_DWORD *)this + 11);
  if (v74 >= v73)
  {
    v75 = 0;
    if ((int)v73 > 0)
      v72 = (v72 | 2) + 2 * (v73 - 1);
    v76 = v72 + 2 * (v74 - v73);
  }
  else
  {
    v75 = 2 * v73;
    v76 = v72;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v81 = (void *)v143;
  else
    v81 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v22, &unk_209A763F0, v24, v24, v81, v76, v72, v75);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v76;
  *a5 += v72;
  *a6 += v75;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 12;
  else
    v82 = 16;
  v83 = *((unsigned int *)this + 18);
  v84 = *((_DWORD *)this + 19);
  if (v84 >= v83)
  {
    v85 = 0;
    if ((int)v83 > 0)
      v82 = (v82 | 2) + 2 * (v83 - 1);
    v86 = v82 + 2 * (v84 - v83);
  }
  else
  {
    v85 = 2 * v83;
    v86 = v82;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v91 = (void *)v143;
  else
    v91 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &unk_209A763F0, v24, v24, v91, v86, v82, v85);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v86;
  *a5 += v82;
  *a6 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v92 = 12;
  else
    v92 = 16;
  v93 = *((unsigned int *)this + 14);
  v94 = *((_DWORD *)this + 15);
  if (v94 >= v93)
  {
    v95 = 0;
    if ((int)v93 > 0)
      v92 += 4 * (v93 - 1) + 4;
    v96 = v92 + 4 * (v94 - v93);
  }
  else
  {
    v95 = 4 * v93;
    v96 = v92;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v101 = (void *)v143;
  else
    v101 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v22, &unk_209A763F0, v24, v24, v101, v96, v92, v95);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v96;
  *a5 += v92;
  *a6 += v95;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v106 = (void *)v143;
  else
    v106 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v22, &unk_209A763F0, v24, v24, v106, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v111 = (void *)v143;
  else
    v111 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v22, &unk_209A763F0, v24, v24, v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  v112 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v112 = 12;
  v113 = *((unsigned int *)this + 32);
  if ((int)v113 <= 0)
    v114 = 0;
  else
    v114 = 8 * v113;
  v115 = v114 + v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v120 = (void *)v143;
  else
    v120 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v22, &unk_209A763F0, v24, v24, v120, v115, v115, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v115;
  *a5 += v115;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v125 = (void *)v143;
  else
    v125 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_209A763F0, v24, v24, v125, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  v126 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v126 = 12;
  v127 = *((unsigned int *)this + 38);
  if ((int)v127 <= 0)
    v128 = 0;
  else
    v128 = 8 * v127;
  v129 = v128 + v126;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if ((_DWORD)v144)
    v134 = (void *)v143;
  else
    v134 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_209A763F0, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v129;
  *a5 += v129;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 236, (DgnString *)&v143);
  if ((_DWORD)v144)
    v139 = (void *)v143;
  else
    v139 = &unk_209A763F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v140, &unk_209A763F0, (35 - v140), (35 - v140), v139, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v143);
}

void sub_2098CFBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

char *writeSharedObject<short>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v18 = *(_DWORD *)(a2 + 8);
  result = (char *)writeObject((uint64_t)a1, &v18, a3);
  if (v18)
  {
    v12 = 2 * v18;
    result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, (2 * v18), v7, v8, v9, v10, v11);
    if (result)
    {
      v13 = result;
      v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        result = *(char **)a2;
        if (*(_QWORD *)a2)
          result = (char *)MemChunkFree(result, 0);
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a2 = v13;
    }
    else
    {
      v13 = *(const char **)a2;
    }
    if ((v12 + 3) >= 4)
    {
      v15 = 0;
      v16 = (v12 + 3) >> 2;
      do
      {
        v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      v15 = 0;
    }
    *a3 ^= v15;
  }
  return result;
}

char *writeSharedObject<unsigned int>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v18 = *(_DWORD *)(a2 + 8);
  result = (char *)writeObject((uint64_t)a1, &v18, a3);
  v12 = v18;
  if (v18)
  {
    result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, (4 * v18), v7, v8, v9, v10, v11);
    if (result)
    {
      v13 = result;
      v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        result = *(char **)a2;
        if (*(_QWORD *)a2)
          result = (char *)MemChunkFree(result, 0);
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a2 = v13;
    }
    else
    {
      v13 = *(const char **)a2;
    }
    v15 = 0;
    v16 = v12 & 0x3FFFFFFF;
    if ((v12 & 0x3FFFFFFF) != 0)
    {
      do
      {
        v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    *a3 ^= v15;
  }
  return result;
}

int *readSharedObject<short>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = 0;
  result = (int *)readObject((uint64_t)a1, &v19, a3);
  if (v19)
  {
    v13 = 2 * v19;
    result = (int *)DgnSharedMemStream::readSharedBytes(a1, 2 * v19, v7, v8, v9, v10, v11, v12);
    v14 = result;
    v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(_QWORD *)a2 = v14;
    if ((v13 + 3) >= 4)
    {
      v16 = 0;
      v17 = (v13 + 3) >> 2;
      do
      {
        v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

int *readSharedObject<unsigned int>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = 0;
  result = (int *)readObject((uint64_t)a1, &v19, a3);
  v13 = v19;
  if (v19)
  {
    result = (int *)DgnSharedMemStream::readSharedBytes(a1, 4 * v19, v7, v8, v9, v10, v11, v12);
    v14 = result;
    v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(_QWORD *)a2 = v14;
    v16 = 0;
    v17 = v13 & 0x3FFFFFFF;
    if ((v13 & 0x3FFFFFFF) != 0)
    {
      do
      {
        v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

uint64_t FmpeMgr::saveFmpeModel(FmpeMgr *this, DFile *a2, DFileChecksums *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  double v13;
  DgnStream *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t CurrentSubDirComponents;
  unsigned int v22;
  unint64_t v23;

  v8 = a5;
  v9 = a4;
  v23 = 0xFFFFFFFF00000003;
  DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v23, (uint64_t)a3, a4, a5, a6, a7, a8);
  PelMgr::savePelMgr(*((PelMgr **)this + 14), a2, a3, v9, v8, v13);
  if (v9)
  {
    FmpeMgr::saveProjectionMatrix(this, a2, v8);
  }
  else
  {
    v14 = OpenAndWriteMrecHeader((uint64_t)a2, 0x17u, v8, "MRFPB!?", 24, 7);
    v22 = 0;
    writeObject((uint64_t)v14, (int *)this, &v22);
    writeObject((uint64_t)v14, (int *)this + 1, &v22);
    writeObject((uint64_t)v14, (int *)this + 2, &v22);
    writeObject((uint64_t)v14, (int *)this + 3, &v22);
    writeObject((uint64_t)v14, (int *)this + 5, &v22);
    writeObject<DgnPrimArray<long long>>((uint64_t)v14, (uint64_t)this + 88, &v22);
    writeObject((uint64_t)v14, (int *)this + 4, &v22);
    writeObject((uint64_t)v14, (int *)this + 6, &v22);
    writeObject<short>((uint64_t)v14, (uint64_t)this + 32, &v22);
    writeObject<short>((uint64_t)v14, (uint64_t)this + 64, &v22);
    writeObject<unsigned int>((uint64_t)v14, (uint64_t)this + 48, &v22);
    writeObject(v14, (const double *)this + 10, &v22, v15, v16, v17, v18, v19);
    writeObject((uint64_t)v14, (int *)this + 26, &v22);
    writeObjectChecksum((uint64_t)v14, (int *)&v22);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x17u, v22);
    if (v14)
    {
      (**(void (***)(DgnStream *))v14)(v14);
      MemChunkFree(v14, 0);
    }
  }
  return DFile::popCurrentSubDirComponent((uint64_t)a2);
}

void FmpeMgr::saveProjectionMatrix(FmpeMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int i;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int j;
  uint64_t k;
  uint64_t v36;
  uint64_t v37;
  uint64_t m;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v52);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v52, (uint64_t)a2, 0x18u, a3);
  v50 = 0;
  v51 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v52, sFPT_Versions, (uint64_t)&v50, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v52, "FMPEProjectionMatrixText", (_QWORD *)(v50 + 8 * (v51 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "NumberOfMatrixMixtureComponents", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "NumberOfFeatures", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "InputContextWindowSize", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "OutputContextWindowSize", *((unsigned int *)this + 3));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "ProjectionMatrixIntScale", *((unsigned int *)this + 4));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "TimeAveragingMatrixIntScale", *((unsigned int *)this + 5));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "ProjectionMatrixQuantLevels", *((unsigned int *)this + 6));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v52, "ProjectionMatrixPostScale", *((double *)this + 10));
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  DgnString::DgnString((DgnString *)v45, "TableName");
  v11 = v49;
  if ((_DWORD)v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    v11 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v11), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  v12 = v47;
  if ((_DWORD)v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    v12 = v47;
  }
  *(_DWORD *)(v46 + 4 * v12) = 0;
  LODWORD(v47) = v12 + 1;
  v44 = v49;
  DgnString::DgnString((DgnString *)v45, "RowNum");
  v13 = v49;
  if ((_DWORD)v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    v13 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v13), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  v14 = v47;
  if ((_DWORD)v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    v14 = v47;
  }
  *(_DWORD *)(v46 + 4 * v14) = 3;
  LODWORD(v47) = v14 + 1;
  v15 = v49;
  DgnString::DgnString((DgnString *)v45, "ColNum");
  v16 = v49;
  if ((_DWORD)v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    v16 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v16), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  v17 = v47;
  if ((_DWORD)v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    v17 = v47;
  }
  *(_DWORD *)(v46 + 4 * v17) = 3;
  LODWORD(v47) = v17 + 1;
  v18 = v49;
  DgnString::DgnString((DgnString *)v45, "Value");
  v19 = v49;
  if ((_DWORD)v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    v19 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v19), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  v20 = v47;
  if ((_DWORD)v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    v20 = v47;
  }
  *(_DWORD *)(v46 + 4 * v20) = 1;
  LODWORD(v47) = v20 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v52, (uint64_t)&v46, (uint64_t)&v48);
  v21 = *((_DWORD *)this + 1);
  v22 = *(_DWORD *)this + *(_DWORD *)this * v21;
  v42 = *((_DWORD *)this + 3) * v21;
  if (*((_DWORD *)this + 6))
  {
    if (v21)
    {
      v23 = 0;
      v24 = 1;
      do
      {
        if (v24)
        {
          for (i = 0; i < v24; ++i)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrixQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, v23);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, i);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(__int16 *)(*((_QWORD *)this + 4) + 2 * (i + v23 * *((_DWORD *)this + 6))));
            DgnTextFileWriter::writeNextLine(v52);
            v24 = *((_DWORD *)this + 6);
          }
          v21 = *((_DWORD *)this + 1);
        }
        ++v23;
      }
      while (v23 < v21);
    }
    v41 = v22;
    if (v22)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = **((unsigned int **)this + 6);
      do
      {
        if ((_DWORD)v42)
        {
          v30 = 0;
          do
          {
            if (v27 == *((_DWORD *)this + 26))
            {
              v27 = 0;
              LODWORD(v29) = *(_DWORD *)(*((_QWORD *)this + 6) + 4 * ++v28);
            }
            v31 = *((_DWORD *)this + 6);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrix");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, v26);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, v30);
            v32 = v29 / v31;
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, v29 % v31);
            DgnTextFileWriter::writeNextLine(v52);
            ++v27;
            ++v30;
            LODWORD(v29) = v29 / v31;
          }
          while ((_DWORD)v42 != v30);
        }
        else
        {
          v32 = v29;
        }
        ++v26;
        v29 = v32;
      }
      while (v26 != v41);
    }
  }
  else if (v22)
  {
    v33 = 0;
    for (j = 0; j != v22; ++j)
    {
      if ((_DWORD)v42)
      {
        for (k = 0; k != v42; ++k)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, j);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, k);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(__int16 *)(*((_QWORD *)this + 8) + 2 * (v33 + k)));
          DgnTextFileWriter::writeNextLine(v52);
        }
      }
      v33 += v42;
    }
  }
  v43 = *((unsigned int *)this + 24);
  if ((_DWORD)v43)
  {
    v36 = 0;
    v37 = (*((_DWORD *)this + 3) * *((_DWORD *)this + 1));
    do
    {
      if ((_DWORD)v37)
      {
        for (m = 0; m != v37; ++m)
        {
          v39 = *((_DWORD *)this + 3);
          v40 = *((_DWORD *)this + 1);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "TimeAveragingMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, m / v40 + v39 * v36);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, m % v40);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16 * v36) + 8 * m));
          DgnTextFileWriter::writeNextLine(v52);
        }
      }
      ++v36;
    }
    while (v36 != v43);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v46);
  DgnArray<DgnString>::releaseAll((uint64_t)&v48);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v50);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v52);
}

void sub_2098D07F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

uint64_t FmpeMgr::getSelectedComponentsWithProbabilities(uint64_t a1, int a2, unsigned __int8 **a3, ReproData *this, unsigned __int16 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  double v39;
  uint64_t v41;
  int v42;
  double *v43;
  int v44;

  ReproData::setOptionalPronStateId((uint64_t)this, a2);
  PelScorer::setFrameStaticsNoMic((uint64_t)this, 0, a3, 0, 0);
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  *a5 = 0;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 140) == 1)
  {
    PelScorer::getComponentProbs(this, 0, (uint64_t)&v43, 0x10000);
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *a5;
    v16 = *(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14);
    v15 = *(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14 + 4);
    v17 = (v15 - v16);
    if (v15 == v16)
      goto LABEL_33;
    v18 = v43;
    v19 = 0.0;
    do
    {
      v20 = *v18++;
      v21 = v20;
      if (v20 > v19)
        v19 = v21;
      --v17;
    }
    while (v17);
    goto LABEL_20;
  }
  PelScorer::getComponentProbs(this, 0, (uint64_t)&v41, 0x10000);
  v22 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 456) + 4 * *a5 + 4)
                     - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 456) + 4 * *a5));
  if ((_DWORD)v22)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0.0;
    do
    {
      if (*(double *)(v41 + 8 * v24) > v26)
      {
        v25 = v24;
        v26 = *(double *)(v41 + 8 * v24);
      }
      ++v24;
    }
    while (v22 != v24);
    v23 = v25 + 1;
  }
  else
  {
    v23 = 1;
  }
  *a5 = v23;
  PelScorer::getComponentProbs(this, v23, (uint64_t)&v43, 0x10000);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *a5;
  v16 = *(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14);
  v15 = *(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14 + 4);
  v27 = (v15 - v16);
  if (v15 != v16)
  {
    v28 = v43;
    v19 = 0.0;
    do
    {
      v29 = *v28++;
      v30 = v29;
      if (v29 > v19)
        v19 = v30;
      --v27;
    }
    while (v27);
LABEL_20:
    if (v19 != 0.0)
    {
      v31 = 0.0;
      if (v15 != v16)
      {
        v32 = 0;
        v33 = v19 * *((double *)this + 18);
        do
        {
          v34 = v43[v32];
          if (v34 > v33)
          {
            v35 = *(unsigned int *)(a6 + 8);
            if (v35 == *(_DWORD *)(a6 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
              v35 = *(unsigned int *)(a6 + 8);
              v13 = *(_QWORD *)(a1 + 112);
              v14 = *a5;
            }
            v31 = v31 + v34;
            *(_DWORD *)(*(_QWORD *)a6 + 4 * v35) = v32;
            ++*(_DWORD *)(a6 + 8);
          }
          ++v32;
        }
        while (v32 < (*(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14 + 4)
                                   - *(_DWORD *)(*(_QWORD *)(v13 + 456) + 4 * v14)));
      }
      v36 = *(unsigned int *)(a6 + 8);
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = *(_DWORD *)(a7 + 8);
        do
        {
          v39 = v43[*(unsigned int *)(*(_QWORD *)a6 + 4 * v37)];
          if (v38 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a7, 1, 1);
            v38 = *(_DWORD *)(a7 + 8);
            v36 = *(unsigned int *)(a6 + 8);
          }
          *(double *)(*(_QWORD *)a7 + 8 * v38++) = v39 / v31;
          *(_DWORD *)(a7 + 8) = v38;
          ++v37;
        }
        while (v37 < v36);
      }
    }
  }
LABEL_33:
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v41);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v43);
}

void sub_2098D0B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t FmpeMgr::fmpeStage1(uint64_t a1, int a2, unsigned __int8 **a3, void **a4, ReproData *this)
{
  uint64_t v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  double *v34;
  double *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  double *v52;
  double v53;
  int v54;
  int v55;
  double *v56;
  uint64_t v57;
  int v58;
  int v59;
  void *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  void *v70;

  v9 = (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
  if ((_DWORD)v9)
    bzero(*a4, 8 * (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12)));
  v69 = 0;
  v67 = 0;
  v68 = 0;
  v66[0] = 0;
  v66[1] = 0;
  FmpeMgr::getSelectedComponentsWithProbabilities(a1, a2, a3, this, &v69, (uint64_t)&v67, (uint64_t)v66);
  if ((_DWORD)v68)
  {
    v11 = 0;
    v12 = v69;
    do
    {
      v13 = *(_QWORD *)(a1 + 112);
      v14 = *(_DWORD **)(v13 + 272);
      if ((_DWORD)v12)
        v15 = *v14 - v14[1];
      else
        v15 = 0;
      v16 = *(_DWORD *)(v67 + 4 * v11);
      v17 = *(_QWORD *)(v13 + 288);
      v18 = v14[*(unsigned __int16 *)(v17 + 2 * v12)];
      v19 = *(double *)(v66[0] + 8 * v11);
      v20 = *(double *)(a1 + 80);
      v65[0] = 0;
      v65[1] = 0;
      v64[0] = 0;
      v64[1] = 0;
      PelMgr::unpackGenoneComponent(v13, *(unsigned __int16 *)(v17 + 2 * v12), v16, (uint64_t)v65, (uint64_t)v64, v10);
      v22 = v19 * 6.38307649;
      v23 = v19 * v20;
      v24 = *(unsigned int *)(a1 + 4);
      LODWORD(v25) = v24 + 1;
      v26 = (v15 + v16 + v18) * v9 * (v24 + 1);
      v27 = *(_DWORD *)(a1 + 24);
      if (v27)
      {
        v28 = *(_DWORD *)(a1 + 104);
        v29 = v26 / v28;
        v30 = v26 % v28;
        v31 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * (v26 / v28));
        if (v26 % v28)
        {
          v32 = 0;
          do
          {
            ++v32;
            v31 /= v27;
          }
          while (v32 < v30);
        }
        v33 = *(unsigned int *)(a1 + 40);
        v34 = *(double **)(a1 + 144);
        v62 = 0;
        v63 = 0;
        if ((_DWORD)v33)
        {
          v70 = 0;
          HIDWORD(v63) = realloc_array(0, &v70, 8 * v33, 0, 0, 1) >> 3;
          v35 = (double *)v70;
          v62 = v70;
          LODWORD(v24) = *(_DWORD *)(a1 + 4);
          LODWORD(v25) = v24 + 1;
        }
        else
        {
          v35 = 0;
        }
        v45 = 0;
        LODWORD(v63) = v33;
        v46 = *a3;
        v47 = v65[0];
        v48 = v64[0];
        if (v25 <= 1)
          v25 = 1;
        else
          v25 = v25;
        do
        {
          v49 = v23;
          if (v45 < v24)
          {
            LODWORD(v21) = *(_DWORD *)(v48 + 4 * v45);
            v21 = (double)*(unint64_t *)&v21;
            v49 = v22 * (double)(v46[v45] - *(_DWORD *)(v47 + 4 * v45)) / v21;
          }
          v50 = v33;
          v51 = v35;
          v52 = v34;
          if ((_DWORD)v33)
          {
            do
            {
              v53 = *v52++;
              v21 = v49 * v53;
              *v51++ = v49 * v53;
              --v50;
            }
            while (v50);
          }
          if ((_DWORD)v9)
          {
            v54 = 0;
            v55 = *(_DWORD *)(a1 + 104);
            v56 = (double *)*a4;
            v57 = v9;
            v58 = *(_DWORD *)(a1 + 24);
            do
            {
              if (v30 == v55)
              {
                v30 = 0;
                v31 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * ++v29);
              }
              ++v30;
              v59 = v31 & 3;
              v31 >>= 2;
              if (v54 == (_DWORD)v33)
                v54 = 0;
              v21 = *v56;
              *v56 = v35[v59 + v54] + *v56;
              ++v56;
              v54 += v58;
              --v57;
            }
            while (v57);
          }
          ++v45;
        }
        while (v45 != v25);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
      }
      else
      {
        v36 = 0;
        v37 = *a3;
        v38 = v65[0];
        v39 = v64[0];
        if (v25 <= 1)
          v25 = 1;
        else
          v25 = v25;
        do
        {
          v40 = v23;
          if (v36 < v24)
          {
            LODWORD(v21) = *(_DWORD *)(v39 + 4 * v36);
            v21 = (double)*(unint64_t *)&v21;
            v40 = v22 * (double)(v37[v36] - *(_DWORD *)(v38 + 4 * v36)) / v21;
          }
          if ((_DWORD)v9)
          {
            v41 = *(_QWORD *)(a1 + 64);
            v42 = (double *)*a4;
            v43 = v9;
            v44 = v26;
            do
            {
              v21 = *v42 + v40 * (double)*(__int16 *)(v41 + 2 * v44);
              *v42++ = v21;
              ++v44;
              --v43;
            }
            while (v43);
          }
          ++v36;
          v26 += v9;
        }
        while (v36 != v25);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v64);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v65);
      ++v11;
    }
    while (v11 < v68);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v66);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
}

void sub_2098D0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t FmpeMgr::fmpeStage2(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  double *v21;
  uint64_t *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t i;
  double v30;
  double v31;
  double v32;
  int v33;
  void *v35;
  uint64_t v36;
  void *v37;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 132);
  v12 = (v11 * *(_DWORD *)(a1 + 12));
  v35 = 0;
  v36 = 0;
  if ((_DWORD)v12)
  {
    v37 = 0;
    v13 = realloc_array(0, &v37, 8 * v12, 0, 0, 1);
    v14 = (double *)v37;
    v35 = v37;
    LODWORD(v36) = v12;
    HIDWORD(v36) = v13 >> 3;
    bzero(v37, 8 * v12);
    if (!(_DWORD)v10)
      goto LABEL_12;
  }
  else
  {
    v14 = 0;
    LODWORD(v36) = 0;
    if (!(_DWORD)v10)
      goto LABEL_12;
  }
  v15 = 0;
  v16 = a2 - (v10 >> 1);
  v17 = *((_DWORD *)a4 + 4) - 1;
  v18 = *((_DWORD *)a4 + 2);
  v19 = *a4;
  do
  {
    v20 = v16 + v15;
    if ((int)(v16 + v15) >= 0 && v20 <= v17 && (_DWORD)v12)
    {
      v21 = *(double **)(v19 + 16 * (v20 % v18));
      v22 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 16 * v15);
      v23 = v12;
      v24 = v14;
      do
      {
        v25 = *v22++;
        v26 = v25;
        v27 = *v21++;
        *v24 = *v24 + (double)v26 * v27;
        ++v24;
        --v23;
      }
      while (v23);
    }
    ++v15;
  }
  while (v15 != v10);
LABEL_12:
  if (v11 < v12)
  {
    v28 = v11;
    do
    {
      v14[v28 % v11] = v14[v28] + v14[v28 % v11];
      ++v28;
    }
    while (v12 != v28);
  }
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v30 = v14[i];
      v31 = v30 / (double)(*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20));
      v14[i] = v31;
      LOBYTE(v30) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 16 * (a2 % *(_DWORD *)(a3 + 8))) + i);
      v32 = v31 + (double)*(unint64_t *)&v30;
      if (v32 + 0.5 <= 255.0)
      {
        if (v32 + 0.5 >= 0.0)
          v33 = (int)v32;
        else
          LOBYTE(v33) = 0;
      }
      else
      {
        LOBYTE(v33) = -1;
      }
      *(_BYTE *)(*a5 + i) = v33;
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v35);
}

void SDLm_LmScore(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t *a6, unsigned int a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, void *a12, unsigned int a13, unsigned int *a14, void **a15, unsigned int *a16, void (*a17)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a18)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ModelMgr *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int *v104;
  __int16 *v105;
  uint64_t v106;
  int *v107;
  int v108;
  uint64_t v109;
  int v110;
  char *v111;
  int v112;
  uint64_t v113;
  int v116;
  unsigned int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  __int128 v123;
  int v124;
  char v125;
  void *v126[7];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135[4];
  __int128 v136;
  __int128 v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD v140[2];
  _QWORD *v141;
  uint64_t v142;
  _BYTE v143[152];

  SdapiInsurance::SdapiInsurance(v143, "SDLm_LmScore", 1, 1, 131);
  if (v143[97])
  {
    v118 = a3;
    if (gbShowCalls)
    {
      v29 = "SD_TRUE";
      if (a1)
        v30 = "SD_TRUE";
      else
        v30 = "SD_FALSE";
      if (a2)
        v31 = "SD_TRUE";
      else
        v31 = "SD_FALSE";
      v32 = a8;
      if (!a3)
        v29 = "SD_FALSE";
      if (gbShowCallPointerArguments)
        v33 = a4;
      else
        v33 = 0;
      if (gbShowCallPointerArguments)
        v34 = a6;
      else
        v34 = 0;
      if (!gbShowCallPointerArguments)
        v32 = 0;
      v35 = a10;
      if (!gbShowCallPointerArguments)
        v35 = 0;
      v37 = a12;
      v36 = (uint64_t)a16;
      if (gbShowCallPointerArguments)
      {
        v38 = a14;
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      if (gbShowCallPointerArguments)
        v39 = (uint64_t)a15;
      else
        v39 = 0;
      if (!gbShowCallPointerArguments)
        v36 = 0;
      v40 = (uint64_t)a17;
      v41 = a18;
      if (!gbShowCallPointerArguments)
      {
        v40 = 0;
        v41 = 0;
      }
      xlprintf("Entering sdapi call %.500s(%.500s, %.500s, %.500s, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx)\n", v39, v36, v40, v41, "SDLm_LmScore", v30, v31, v29, v33, a5, v34, a7, v32, a9, v35, a11,
        v37,
        a13,
        v38,
        v39,
        v36,
        v40,
        v41);
    }
    if (!a4 && a5)
      throwBadLengthForNullPointer(a5, "DgnVerifyReadPtr", v23, v24, v25, v26, v27, v28);
    LOBYTE(v126[0]) = 0;
    if (!a6 && a7)
      throwBadLengthForNullPointer(a7, "DgnVerifyReadPtr", v23, v24, v25, v26, v27, v28);
    LOBYTE(v126[0]) = 0;
    if (!a8 && a9)
      throwBadLengthForNullPointer(a9, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
    if (a3 >= 2)
    {
      throwBadSdapiArgument("SDBool", (int)a3, v23, v24, v25, v26, v27, v28);
    }
    else if (a3 == 1)
    {
      if (!a10 && a11)
        throwBadLengthForNullPointer(a11, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      if (!a12 && a13)
        throwBadLengthForNullPointer(a13, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      if (!a14)
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      if (!a15)
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      if (!a16)
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      if (a11 != a9)
      {
        v113 = a9;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 212, (uint64_t)"sdapi/sdlm", 21, (uint64_t)"%u %u", v27, v28, a11);
      }
      v116 = 1;
      goto LABEL_75;
    }
    if (a10)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 216, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_209A76457);
    if (a11)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 217, (uint64_t)"sdapi/sdlm", 23, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_INVALID_COUNT_ARG);
    if (a12)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 218, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_209A76457);
    if (a13)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 219, (uint64_t)"sdapi/sdlm", 23, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_INVALID_COUNT_ARG);
    if (a14)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 220, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_209A76457);
    if (a15)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 221, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_209A76457);
    if (a16)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 222, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_209A76457);
    v116 = 0;
LABEL_75:
    if (a7 != a9)
    {
      v113 = a9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 226, (uint64_t)"sdapi/sdlm", 14, (uint64_t)"%u %u", v27, v28, a7);
    }
    if (!a7)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 227, (uint64_t)"sdapi/sdlm", 5, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_EMPTY_TRANSCRIPTION);
    v141 = 0;
    v142 = 0;
    sdUtilConvertSDWordSpecsToCwids(a4, a5, (uint64_t)&v141, 1, 0, 0, 1, v28);
    v140[1] = 0;
    v140[0] = 0;
    v42 = a7;
    sdUtilConvertSDWordSpecsToCwids(a6, a7, (uint64_t)v140, 0, 1, 0, 1, v43);
    v139 = 0;
    v138 = 0;
    v50 = *(unsigned int *)(*(_QWORD *)VocMgr::smpVocMgr + 8);
    if ((_DWORD)v50)
    {
      v126[0] = 0;
      HIDWORD(v139) = realloc_array(0, v126, 8 * v50, 0, 0, 1) >> 3;
      v138 = v126[0];
      LODWORD(v51) = v139;
      v44 = (v139 - v50);
      if (v139 > v50)
      {
        DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)&v138, v50, v44);
        goto LABEL_86;
      }
    }
    else
    {
      LODWORD(v51) = 0;
    }
    if (v51 < v50)
    {
      v51 = v51;
      do
        v138[v51++] = 0;
      while (v50 != v51);
    }
LABEL_86:
    LODWORD(v139) = v50;
    v52 = (ModelMgr *)ModelMgr::smpModelMgr;
    if ((_DWORD)v142)
    {
      v53 = v142 - 1;
      do
      {
        v54 = *((_DWORD *)v141 + v53);
        if (v54 >> 27 != 31 && *(_QWORD *)(ModelMgr::getVocOrThrow(v52, v54 >> 25, v44, v45, v46, v47, v48, v49) + 136))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 253, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v48, v49, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
      }
      while ((unint64_t)v53--);
    }
    v136 = 0u;
    v137 = 0u;
    *(_OWORD *)v135 = 0u;
    v134 = 0;
    v133 = 0;
    if (v42)
    {
      v56 = 0;
      v57 = v42;
      do
      {
        v58 = v142;
        v59 = *(_DWORD *)(v140[0] + 4 * v56);
        if (v59 == -50331651)
        {
          LODWORD(v60) = 16777213;
          if (!(_DWORD)v142)
            goto LABEL_105;
          v61 = 4 * v142 - 4;
          do
          {
            v62 = *(_DWORD *)((char *)v141 + v61);
            v63 = v62 >> 27 != 31 || v61 == 0;
            v61 -= 4;
          }
          while (!v63);
          LODWORD(v60) = 16777213;
          if (v62 >> 27 == 31)
            goto LABEL_105;
          v59 = v62 & 0xFE000000 | 0xFFFFFD;
          *(_DWORD *)(v140[0] + 4 * v56) = v59;
        }
        v60 = v59 & 0xFFFFFF;
        if (v59 >> 27 != 31)
        {
          v64 = v59 >> 25;
          if (*(_QWORD *)(ModelMgr::getVocOrThrow(v52, v59 >> 25, v44, v45, v46, v47, v48, v49) + 136))
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 300, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v69, v70, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
          if (v58 >= 3)
            v71 = 3;
          else
            v71 = v58;
          LODWORD(v134) = 0;
          if (v71)
          {
            v72 = 0;
            v73 = v58 - 1;
            if (v58 >= 3)
              v58 = 3;
            do
            {
              v74 = *((_DWORD *)v141 + v73);
              if (v74 >> 25 != (_DWORD)v64 && (v74 >> 25) - 125 >= 2)
                break;
              if (v72 == HIDWORD(v134))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v133, 1, 1);
                v72 = v134;
              }
              *(_DWORD *)(v133 + 4 * v72) = v74 & 0xFFFFFF;
              v72 = v134 + 1;
              LODWORD(v134) = v134 + 1;
              --v73;
              --v58;
            }
            while (v58);
          }
          v76 = *(_QWORD *)(ModelMgr::getVocOrThrow(v52, v64, v65, v66, v67, v68, v69, v70) + 72);
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          LMStats::resetStats((LMStats *)v126);
          v123 = xmmword_209A76430;
          v124 = 1;
          v125 = 1;
          v77 = v138[v64];
          if (!v77)
          {
            v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 464))(v76);
            v138[v64] = v78;
            v77 = v138[v64];
          }
          (*(void (**)(uint64_t, uint64_t *, _QWORD, void **, __int128 *, uint64_t))(*(_QWORD *)v76 + 472))(v76, &v133, 0, v126, &v123, v77);
          v122 = 0;
          v120 = 0u;
          v121 = 0u;
          v119 = 0u;
          if (a1 >= 2)
            throwBadSdapiArgument("SDBool", (int)a1, v79, v80, v81, v82, v83, v84);
          if (a2 >= 2)
            throwBadSdapiArgument("SDBool", (int)a2, v79, v80, v81, v82, v83, v84);
          v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t, __int128 *, BOOL, BOOL, char *, uint64_t))(*(_QWORD *)v76 + 504))(v76, v60, 0xFFFFLL, v126, v77, &v119, a1 == 1, a2 == 1, &v122, v113);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 480))(v76, v77);
          *(_DWORD *)(a8 + 4 * v56) = v85;
          if (v118 >= 2)
            throwBadSdapiArgument("SDBool", (int)v118, v86, v87, v88, v89, v90, v91);
          if (v116)
          {
            *(_DWORD *)(a10 + 4 * v56) = DWORD2(v119);
            LMScoreDetails::appendDetails((unint64_t)v135, (const LMScoreDetails *)&v119);
          }
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v121);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v120);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v119);
          goto LABEL_135;
        }
LABEL_105:
        *(_DWORD *)(a8 + 4 * v56) = 0;
        if (v118 >= 2)
          throwBadSdapiArgument("SDBool", (int)v118, v44, v45, v46, v47, v48, v49);
        if (v116)
          *(_DWORD *)(a10 + 4 * v56) = 0;
LABEL_135:
        if ((_DWORD)v60 == 16777213)
        {
          v92 = v141;
          if (!HIDWORD(v142))
          {
            v126[0] = 0;
            HIDWORD(v142) = realloc_array(v141, v126, 4uLL, 4 * v142, 4 * v142, 1) >> 2;
            v92 = v126[0];
            v141 = v126[0];
          }
          LODWORD(v142) = 1;
          *v92 = -50331650;
        }
        else
        {
          v93 = *(_DWORD *)(v140[0] + 4 * v56);
          v94 = v142;
          if (v142 == (unint64_t)HIDWORD(v142))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v141, 1, 1);
            v94 = v142;
          }
          *((_DWORD *)v141 + v94) = v93;
          LODWORD(v142) = v142 + 1;
        }
        ++v56;
      }
      while (v56 != v57);
    }
    if (v118 >= 2)
      throwBadSdapiArgument("SDBool", (int)v118, v44, v45, v46, v47, v48, v49);
    if (!v116)
      goto LABEL_164;
    v95 = v135[2];
    if (v135[2] <= a13)
    {
      *a15 = a12;
      *a16 = a13;
      v102 = v95;
      if (!v95)
      {
LABEL_163:
        *a14 = v95;
LABEL_164:
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v133);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v137);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v136);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v135);
        DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)&v138);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v140);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v141);
        goto LABEL_165;
      }
    }
    else
    {
      ApiState::callReallocateArrayCallback((ApiState *)ApiState::smpApiState, a17, a18, 16, v135[2], a12, a13, a15, a16);
      if (!*a15 && *a16)
        throwBadLengthForNullPointer(*a16, "DgnVerifyWritePtr", v96, v97, v98, v99, v100, v101);
      v102 = v135[2];
      if (!v135[2])
        goto LABEL_163;
    }
    v103 = 0;
    v104 = (int *)v136;
    v105 = *(__int16 **)v135;
    v106 = 16 * v102;
    v107 = (int *)v137;
    do
    {
      v108 = *v104++;
      v109 = 1;
      switch(v108)
      {
        case 0:
          break;
        case 1:
          v109 = 2;
          break;
        case 2:
          v109 = 3;
          break;
        case 3:
          v109 = 4;
          break;
        case 4:
          v109 = 5;
          break;
        case 5:
          v109 = 6;
          break;
        case 6:
          v109 = 7;
          break;
        default:
          v109 = 8;
          break;
      }
      *(_QWORD *)((char *)*a15 + v103) = v109;
      v110 = *v105++;
      v111 = (char *)*a15 + v103;
      *((_DWORD *)v111 + 2) = v110;
      v112 = *v107++;
      *((_DWORD *)v111 + 3) = v112;
      v103 += 16;
    }
    while (v106 != v103);
    goto LABEL_163;
  }
LABEL_165:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v143);
}

void sub_2098D1CE8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  ApiState *v5;
  DgnException *v6;
  void *v7;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x230]);
  LMScoreDetails::~LMScoreDetails((LMScoreDetails *)&STACK[0x240]);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)&STACK[0x278]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x288]);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 - 248);
  if (a2 == 2)
  {
    v5 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v5, v6);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)(v2 - 232));
      _Unwind_Resume(a1);
    }
    v7 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v7);
  }
  __cxa_end_catch();
  JUMPOUT(0x2098D1CC0);
}

unint64_t LMScoreDetails::appendDetails(unint64_t this, const LMScoreDetails *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  if (*((_DWORD *)a2 + 2))
  {
    v3 = this;
    v4 = 0;
    v5 = this + 16;
    v6 = this + 32;
    do
    {
      v7 = *(_WORD *)(*(_QWORD *)a2 + 2 * v4);
      v8 = *(_DWORD *)(v3 + 8);
      if (v8 == *(_DWORD *)(v3 + 12))
      {
        this = DgnPrimArray<short>::reallocElts(v3, 1, 1);
        v8 = *(_DWORD *)(v3 + 8);
      }
      *(_WORD *)(*(_QWORD *)v3 + 2 * v8) = v7;
      *(_DWORD *)(v3 + 8) = v8 + 1;
      v9 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 4 * v4);
      v10 = *(_DWORD *)(v3 + 24);
      if (v10 == *(_DWORD *)(v3 + 28))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v5, 1, 1);
        v10 = *(_DWORD *)(v3 + 24);
      }
      *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v10) = v9;
      *(_DWORD *)(v3 + 24) = v10 + 1;
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v4);
      v12 = *(unsigned int *)(v3 + 40);
      if (v12 == *(_DWORD *)(v3 + 44))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v6, 1, 1);
        v12 = *(unsigned int *)(v3 + 40);
      }
      *(_DWORD *)(*(_QWORD *)(v3 + 32) + 4 * v12) = v11;
      ++*(_DWORD *)(v3 + 40);
      ++v4;
    }
    while (v4 < *((unsigned int *)a2 + 2));
  }
  return this;
}

void LMScoreDetails::~LMScoreDetails(LMScoreDetails *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void SDLm_ClearLoadedData(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t VocOrThrow;
  uint64_t v18;
  unint64_t v19;
  _BYTE v20[144];

  SdapiInsurance::SdapiInsurance(v20, "SDLm_ClearLoadedData", 1, 0, 164);
  if (v20[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>)\n", v4, v5, v6, v7, "SDLm_ClearLoadedData", a1, a2);
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v5, v6, v7, v8, v9, v10);
    if (*(_QWORD *)(VocOrThrow + 136))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 1369, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v15, v16, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
    v18 = *(_QWORD *)(VocOrThrow + 72);
    v19 = a2 - 1;
    if (a2 - 1 >= 4)
    {
      throwBadSdapiArgument("SDLmClearLoadedType", a2, v11, v12, v13, v14, v15, v16);
      v19 = 0;
    }
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 432))(v18, v19);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v20);
}

void sub_2098D2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  ApiState *v14;
  DgnException *v15;
  void *v16;

  if (a2 == 2)
  {
    v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x2098D2034);
}

void MrecInitModule_dthread_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDiagnosticChecksumMemChunkRegionsOnSyncThread)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticChecksumMemChunkRegionsOnSyncThread", (const char *)&unk_209A76496, (const char *)&unk_209A76496, 0, SetShadowDiagnosticChecksumMemChunkRegionsOnSyncThread, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticChecksumMemChunkRegionsOnSyncThread = (uint64_t)v1;
    gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticChecksumMemChunkRegionsOnSyncThread);
  }
}

void DgnEvent::~DgnEvent(DgnEvent *this)
{
  pthread_cond_destroy((pthread_cond_t *)this);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
}

uint64_t DgnEvent::signal(DgnEvent *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  *((_BYTE *)this + 112) = 1;
  pthread_cond_signal((pthread_cond_t *)this);
  return pthread_mutex_unlock(v2);
}

uint64_t DgnEvent::wait(pthread_cond_t *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)&this[1];
  pthread_mutex_lock((pthread_mutex_t *)&this[1]);
  if (!this[2].__opaque[8])
    pthread_cond_wait(this, v2);
  this[2].__opaque[8] = 0;
  return pthread_mutex_unlock(v2);
}

BOOL DgnEvent::timedWait(DgnEvent *this, int a2)
{
  unint64_t v3;
  int v4;
  _BOOL8 v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  timespec v12;

  v3 = ClockTimer::getPlatformAbsoluteTime(this) + (1000 * a2);
  v12.tv_sec = v3 / 0xF4240;
  v12.tv_nsec = 1000 * (v3 % 0xF4240);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*((_BYTE *)this + 112))
  {
    v4 = 0;
    v5 = 1;
  }
  else
  {
    v4 = pthread_cond_timedwait((pthread_cond_t *)this, (pthread_mutex_t *)((char *)this + 48), &v12);
    v5 = v4 == 0;
  }
  *((_BYTE *)this + 112) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 48));
  if (!v5 && v4 != 60)
  {
    v6 = __error();
    v7 = strerror(*v6);
    DgnString::DgnString((DgnString *)&v11, v7);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 318, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v8, v9, (char)"acquire a DgnEvent lock");
    DgnString::~DgnString((DgnString *)&v11);
  }
  return v5;
}

void sub_2098D2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t recursive_mutex_init(_opaque_pthread_mutex_t *a1)
{
  uint64_t v2;
  pthread_mutexattr_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  return v2;
}

void DgnLock::~DgnLock(pthread_mutex_t *this)
{
  _opaque_pthread_t *v2;
  int v3;

  while (LODWORD(this[1].__sig))
  {
    v2 = *(_opaque_pthread_t **)this[1].__opaque;
    if (v2 != pthread_self())
      break;
    v3 = LODWORD(this[1].__sig) - 1;
    LODWORD(this[1].__sig) = v3;
    if (!v3)
      *(_QWORD *)this[1].__opaque = 0;
    pthread_mutex_unlock(this);
  }
  pthread_mutex_destroy(this);
}

void DgnReadWriteLock::DgnReadWriteLock(DgnReadWriteLock *this)
{
  pthread_rwlock_init((pthread_rwlock_t *)this, 0);
}

void DgnReadWriteLock::~DgnReadWriteLock(pthread_rwlock_t *this)
{
  pthread_rwlock_destroy(this);
}

void DgnSharedLock::create(DgnSharedLock *this, const char *a2)
{
  sem_t *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = sem_open(a2, 512, 384, 1);
  *(_QWORD *)this = v3;
  if (v3 == (sem_t *)-1)
  {
    __error();
    v4 = __error();
    v5 = strerror(*v4);
    DgnString::DgnString((DgnString *)&v8, v5);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 606, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v6, v7, (char)"create the global shared lock");
    DgnString::~DgnString((DgnString *)&v8);
  }
}

void sub_2098D25EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 32));
  _Unwind_Resume(a1);
}

BOOL DgnSharedLock::acquire(sem_t **this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;
  timespec __rqtp;

  if (a2 >= 0x7D0)
    v2 = a2 >> 1;
  else
    v2 = 1000;
  __rqtp = (timespec)xmmword_209A76460;
  if (!v2)
    return 1;
  if (sem_trywait(*this))
  {
    v4 = 0;
    while (1)
    {
      if (*__error() != 35)
      {
        __error();
        v5 = __error();
        v6 = strerror(*v5);
        DgnString::DgnString((DgnString *)&v11, v6);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 647, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v7, v8, (char)"acquire the global shared lock");
        DgnString::~DgnString((DgnString *)&v11);
      }
      nanosleep(&__rqtp, 0);
      if (v2 - 1 == v4)
        return 1;
      ++v4;
      if (!sem_trywait(*this))
      {
        v9 = v4 >= v2;
        goto LABEL_14;
      }
    }
  }
  v9 = 0;
LABEL_14:
  this[1] = (sem_t *)pthread_self();
  return v9;
}

void sub_2098D2768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnThreadTrace::DgnThreadTrace(DgnThreadTrace *this, const DgnThreadTrace *a2, MemChunkRegion *a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  v6 = (char *)this + 48;
  *((_OWORD *)this + 4) = 0u;
  v7 = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  v8 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  v9 = (char *)this + 96;
  *((_QWORD *)this + 1) = a3;
  *(_WORD *)this = *(_WORD *)a2;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 16, (_QWORD *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v5, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<int>::copyArraySlice((unint64_t)v6, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  if (*(_BYTE *)this)
  {
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v7, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v8, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  }
  if (*((_BYTE *)this + 1))
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v9, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
}

void sub_2098D2930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void DgnThreadTrace::~DgnThreadTrace(DgnThreadTrace *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

uint64_t CurryDgnThreadMain(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  const void *v13;
  pthread_key_t v14;
  unsigned int v15;
  void **v16;
  int v18;

  v18 = 0;
  pthread_setcancelstate(1, &v18);
  pthread_setcanceltype(0, &v18);
  *((_BYTE *)a1 + 12) = 1;
  v2 = DgnThreadMgr::smpThreadMgr;
  v3 = a1[4];
  DgnThreadMgr::validateDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, a1[4], v4, v5, v6, v7, v8, v9);
  pthread_setspecific(DgnThreadMgr::smTlsID, *(const void **)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3) + 32));
  v10 = *((_QWORD *)a1 + 5);
  if (MemChunkRegion::smTlsID == -1)
  {
    v12 = &gGlobalMemChunkRegion;
    goto LABEL_7;
  }
  v11 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v11)
    goto LABEL_5;
  v12 = *v11;
  if (!*v11)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    v12 = &gGlobalMemChunkRegion;
  }
LABEL_7:
  if (v12 != (void *)v10 && (v10 || v12 != &gGlobalMemChunkRegion))
  {
    if (!v10 || (_UNKNOWN *)v10 == &gGlobalMemChunkRegion)
    {
      v14 = MemChunkRegion::smTlsID;
      v13 = 0;
    }
    else
    {
      v13 = (const void *)(v10 + 1288);
      *(_QWORD *)(v10 + 1288) = v10;
      v14 = MemChunkRegion::smTlsID;
    }
    pthread_setspecific(v14, v13);
  }
  v15 = DgnThreadWorker::main((DgnThreadWorker *)a1);
  if (MemChunkRegion::smTlsID != -1)
  {
    v16 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v16)
    {
      if (*v16 != &gGlobalMemChunkRegion)
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  pthread_setspecific(DgnThreadMgr::smTlsID, 0);
  *((_BYTE *)a1 + 12) = 0;
  DgnEvent::signal((DgnEvent *)(*((_QWORD *)a1 + 6) + 1312));
  return v15;
}

uint64_t DgnThreadWorker::main(DgnThreadWorker *this)
{
  uint64_t *v2;
  DgnPrinterMgr *v3;
  DgnPrinter *v4;
  DgnPrinter *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int RegionChecksum;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  int v27;

  if (*((_BYTE *)this + 136))
    DgnThreadTrace::add((uint64_t)this + 144, -1, 2);
  *((_DWORD *)this + 16) = 1;
  v2 = MemChunkAlloc(0x20D8uLL, 0);
  DgnPrinter::DgnPrinter((DgnPrinter *)v2);
  *((_QWORD *)this + 7) = v3;
  DgnPrinterMgr::setAsCurrentPrinter(v3, v4);
  v5 = (DgnPrinter *)*((_QWORD *)this + 7);
  DgnString::makeStringPrintf((DgnString *)"DThread %u: ", v6, v7, v8, v9, *((unsigned int *)this + 4));
  if (v27)
    v10 = v26;
  else
    v10 = (const char *)&unk_209A76496;
  DgnPrinter::setInstancePrefix(v5, v10);
  DgnString::~DgnString((DgnString *)&v26);
  (*(void (**)(DgnThreadWorker *))(*(_QWORD *)this + 72))(this);
  *((_DWORD *)this + 16) = 2;
  DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 320));
  while (1)
  {
    *((_DWORD *)this + 16) = 2;
    if (*((_BYTE *)this + 136))
      DgnThreadTrace::add((uint64_t)this + 144, -1, 7);
    DgnEvent::wait((pthread_cond_t *)(*((_QWORD *)this + 6) + 72));
    if (*((_BYTE *)this + 136))
      DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
    v14 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v14 + 1564))
      break;
    v15 = *(_QWORD *)(v14 + 56);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 68))
        break;
    }
    v16 = *(unsigned int *)(v14 + 1560);
    if ((v16 - 2) >= 3)
    {
      if ((_DWORD)v16 == 6)
      {
        *((_DWORD *)this + 16) = 5;
        (*(void (**)(DgnThreadWorker *))(*(_QWORD *)this + 88))(this);
        DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 568));
        v24 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      *((_DWORD *)this + 16) = 3;
      (*(void (**)(DgnThreadWorker *))(*(_QWORD *)this + 80))(this);
      DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 568));
      if (*((_BYTE *)this + 88) && *((_DWORD *)this + 2) == 1)
      {
        if (*((_BYTE *)this + 136))
          DgnThreadTrace::add((uint64_t)this + 144, -1, 8);
        DgnEvent::wait((pthread_cond_t *)(*((_QWORD *)this + 6) + 72));
        RegionChecksum = GetRegionChecksum((MemChunkRegion *)&gGlobalMemChunkRegion);
        if (*((_BYTE *)this + 136))
          DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
      }
      else
      {
        RegionChecksum = 0;
      }
      v18 = (*(uint64_t (**)(DgnThreadWorker *, uint64_t))(*(_QWORD *)this + 96))(this, v16);
      if (*((_BYTE *)this + 88) && *((_DWORD *)this + 2) == 1)
      {
        if (*((_BYTE *)this + 136))
          DgnThreadTrace::add((uint64_t)this + 144, -1, 8);
        if (RegionChecksum != GetRegionChecksum((MemChunkRegion *)&gGlobalMemChunkRegion))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1829, (uint64_t)"mrecutil/dthread", 8, (uint64_t)"%u %u %u", v19, v20, *((_DWORD *)this + 4));
        if (*((_BYTE *)this + 136))
          DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
      }
      if (v18 == 1)
      {
        *((_DWORD *)this + 16) = 5;
        (*(void (**)(DgnThreadWorker *))(*(_QWORD *)this + 88))(this);
        v24 = 0;
        DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 568));
        goto LABEL_40;
      }
      if (v18 == 2)
        break;
      *((_DWORD *)this + 16) = 4;
      if (*((_BYTE *)this + 136))
        DgnThreadTrace::add((uint64_t)this + 144, -1, 4);
      DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 320));
      DgnEvent::wait((pthread_cond_t *)(*((_QWORD *)this + 6) + 816));
    }
  }
  *((_DWORD *)this + 16) = 7;
  v24 = 1;
  DgnThreadWorker::reportErrorAsWarning(this, 1, v11, v12, v13);
LABEL_40:
  result = *((unsigned int *)this + 18);
  if ((_DWORD)result != 2 && !*((_QWORD *)this + 10)
    || (*((_DWORD *)this + 16) = 7,
        *((_BYTE *)this + 68) = 1,
        DgnThreadWorker::reportErrorAsWarning(this, v24, v21, v22, v23),
        DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 320)),
        DgnEvent::signal((DgnEvent *)(*((_QWORD *)this + 6) + 568)),
        result = *((unsigned int *)this + 18),
        (_DWORD)result != 2))
  {
    if (!*((_QWORD *)this + 10))
    {
      if (*((_BYTE *)this + 136))
        DgnThreadTrace::add((uint64_t)this + 144, -1, 3);
      return 0;
    }
  }
  return result;
}

void sub_2098D2F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v14;
  int v15;

  if (a2 == 3)
  {
    v14 = __cxa_begin_catch(exception_object);
    v15 = 1;
  }
  else if (a2 == 2)
  {
    v14 = __cxa_begin_catch(exception_object);
    v15 = 0;
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    __cxa_begin_catch(exception_object);
    v14 = 0;
    v15 = 2;
  }
  *(_QWORD *)(v13 + 80) = v14;
  *(_DWORD *)(v13 + 72) = v15;
  __cxa_end_catch();
  JUMPOUT(0x2098D2E8CLL);
}

uint64_t DgnThreadClient::DgnThreadClient(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t NewThreadId;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  const char *v16;
  MemChunkRegion *v17;
  MemChunkRegion *v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C214F10;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = -1;
  v7 = a1 + 28;
  *(_OWORD *)(a1 + 32) = 0u;
  v8 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  pthread_cond_init((pthread_cond_t *)(a1 + 72), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 120), 0);
  *(_BYTE *)(a1 + 184) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 320), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 368), 0);
  *(_BYTE *)(a1 + 432) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 568), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 616), 0);
  *(_BYTE *)(a1 + 680) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 816), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 864), 0);
  *(_BYTE *)(a1 + 928) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 1064), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1112), 0);
  *(_BYTE *)(a1 + 1176) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 1312), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1360), 0);
  *(_BYTE *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1568) = 0;
  *(_WORD *)(a1 + 1572) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_DWORD *)(a1 + 1563) = 0;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v21, (uint64_t)&gGlobalMemChunkRegion);
  *v8 = v7;
  v9 = DgnThreadMgr::smpThreadMgr;
  NewThreadId = DgnThreadMgr::getNewThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr);
  v15 = *(_BYTE *)(v9 + 76);
  *(_DWORD *)(a1 + 28) = NewThreadId;
  *(_BYTE *)(a1 + 1572) = v15;
  *(_BYTE *)(a1 + 1573) = v15;
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * NewThreadId) = a1;
  ++*(_DWORD *)v9;
  if (!a3)
  {
    DgnString::makeStringPrintf((DgnString *)"Region for DThread %u", v11, v12, v13, v14, NewThreadId);
    if (a4)
    {
      DgnString::operator+=((DgnString *)&v19, ", ");
      DgnString::operator+=((DgnString *)&v19, a4);
    }
    if (v20)
      v17 = v19;
    else
      v17 = (MemChunkRegion *)&unk_209A76496;
    *(_QWORD *)(a1 + 16) = MemChunkRegion::newMemChunkRegion(v17, v16);
    *(_BYTE *)(a1 + 24) = 1;
    DgnString::~DgnString((DgnString *)&v19);
  }
  *(_BYTE *)(a1 + 1566) = gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v21);
  return a1;
}

void sub_2098D3230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, DgnEvent *a11, char a12, uint64_t a13, char a14)
{
  DgnEvent *v14;
  DgnEvent *v15;
  DgnEvent *v16;
  DgnEvent *v17;
  DgnEvent *v18;

  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&a14);
  DgnEvent::~DgnEvent(v18);
  DgnEvent::~DgnEvent(v17);
  DgnEvent::~DgnEvent(v16);
  DgnEvent::~DgnEvent(v15);
  DgnEvent::~DgnEvent(v14);
  DgnEvent::~DgnEvent(a11);
  _Unwind_Resume(a1);
}

void sub_2098D32B0()
{
  JUMPOUT(0x2098D3298);
}

void sub_2098D32B8()
{
  JUMPOUT(0x2098D32A0);
}

void DgnThreadClient::~DgnThreadClient(DgnThreadClient *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  MemChunkRegion *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  MemChunkRegion *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24C214F10;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v16, (uint64_t)&gGlobalMemChunkRegion);
  v2 = *((_DWORD *)this + 7);
  DgnThreadMgr::removeThread((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v2, v3, v4, v5, v6, v7, v8);
  *((_QWORD *)this + 4) = 0;
  v10 = *((_QWORD *)this + 7);
  if (*((_BYTE *)this + 1564))
  {
    if (!v10 || !*(_BYTE *)(v10 + 12))
      goto LABEL_17;
  }
  else
  {
    if (!v10)
      goto LABEL_17;
    v11 = *(_BYTE *)(v10 + 68) != 0;
    if (!*(_BYTE *)(v10 + 12))
      goto LABEL_12;
    if (!*(_BYTE *)(v10 + 68))
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 952, "mrecutil/dthread", 4, "%u %.500s", v2, "Notifying worker of potential error");
      if (DgnThreadClient::isPlaying(this))
        DgnThreadClient::error((uint64_t)this);
      v11 = 0;
      goto LABEL_9;
    }
  }
  v11 = 1;
LABEL_9:
  pthread_yield_np();
  ClockTimer::useFreeTimeVoid((ClockTimer *)&ClockTimer::smClockTimer);
  v12 = *((_QWORD *)this + 7);
  if (v12 && *(_BYTE *)(v12 + 12))
  {
    pthread_yield_np();
    *((_DWORD *)this + 7) = v2;
    (*(void (**)(DgnThreadClient *))(*(_QWORD *)this + 32))(this);
    *((_DWORD *)this + 7) = -1;
  }
LABEL_12:
  if (!v11 && *((_QWORD *)this + 7))
  {
    pthread_yield_np();
    Latch<MemChunkRegion,LatchAdapter>::Latch(&v15, *((_QWORD *)this + 2));
    v13 = (_QWORD *)*((_QWORD *)this + 7);
    if (v13)
    {
      (*(void (**)(_QWORD))(*v13 + 48))(*((_QWORD *)this + 7));
      MemChunkFree(v13, 0);
    }
    *((_QWORD *)this + 7) = 0;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v15);
  }
LABEL_17:
  if (*((_QWORD *)this + 6))
    *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)this + 24))
  {
    v14 = (MemChunkRegion *)*((_QWORD *)this + 2);
    if (v14)
    {
      MemChunkRegion::deleteMemChunkRegion(v14, v9);
      *((_QWORD *)this + 2) = 0;
    }
  }
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v16);
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 1312));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 1064));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 816));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 568));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 320));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 72));
}

{
  DgnThreadClient::~DgnThreadClient(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t DgnThreadMgr::removeThread(DgnThreadMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;

  DgnThreadMgr::validateDgnThreadId(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(v10 + 8 * a2);
  *(_QWORD *)(v10 + 8 * a2) = 0;
  if (*(_BYTE *)(v11 + 1573))
  {
    v12 = MemChunkAlloc(0x70uLL, 0);
    DgnThreadTrace::DgnThreadTrace((DgnThreadTrace *)v12, (const DgnThreadTrace *)(*(_QWORD *)(v11 + 56) + 144), (MemChunkRegion *)&gGlobalMemChunkRegion);
    v13 = *((_DWORD *)this + 50);
    if (v13 == *((_DWORD *)this + 51))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 192, 1, 1);
      v13 = *((_DWORD *)this + 50);
    }
    *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v13) = v12;
    *((_DWORD *)this + 50) = v13 + 1;
  }
  *(_DWORD *)(v11 + 28) = -1;
  IdMgr<unsigned int>::recycleId((unsigned int *)this + 6, a2);
  --*(_DWORD *)this;
  return v11;
}

BOOL DgnThreadClient::hasErrored(DgnThreadClient *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 1564))
    return 1;
  v2 = *((_QWORD *)this + 7);
  return v2 && *(_BYTE *)(v2 + 68) != 0;
}

BOOL DgnThreadClient::isLive(DgnThreadClient *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  return v1 && *(_BYTE *)(v1 + 12) != 0;
}

BOOL DgnThreadClient::isPlaying(DgnThreadClient *this)
{
  uint64_t v1;
  int v3;

  v1 = *((_QWORD *)this + 7);
  if (!v1 || !*(_BYTE *)(v1 + 12) || *((_BYTE *)this + 1564) || *(_BYTE *)(v1 + 68))
    return 0;
  v3 = *(_DWORD *)(v1 + 64);
  return !*((_DWORD *)this + 390) && v3 == 3;
}

uint64_t DgnThreadClient::error(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;

  v1 = this;
  if (!*(_BYTE *)(this + 1564))
  {
    *(_BYTE *)(this + 1564) = 1;
    v2 = *(_DWORD *)(*(_QWORD *)(this + 56) + 64);
    v3 = *(_DWORD *)(this + 1560);
    *(_DWORD *)(this + 1560) = 6;
    DgnEvent::signal((DgnEvent *)(this + 72));
    if (v3)
      v4 = 0;
    else
      v4 = v2 == 2;
    if (v4)
    {
      this = DgnEvent::signal((DgnEvent *)(v1 + 1064));
    }
    else
    {
      DgnEvent::signal((DgnEvent *)(v1 + 816));
      DgnEvent::signal((DgnEvent *)(v1 + 568));
      DgnEvent::signal((DgnEvent *)(v1 + 320));
      this = DgnEvent::signal((DgnEvent *)(v1 + 1064));
      *(_DWORD *)(v1 + 1560) = 6;
    }
  }
  *(_BYTE *)(v1 + 1564) = 1;
  return this;
}

void DgnThreadClient::printSize(DgnThreadClient *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  int v150;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1019, (DgnString *)&v149);
  if (v150)
    v16 = v149;
  else
    v16 = &unk_209A76496;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A76496, a3, &unk_209A76496, v16);
  DgnString::~DgnString((DgnString *)&v149);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A76496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1021, (DgnString *)&v149);
  if (v150)
    v25 = v149;
  else
    v25 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1022, (DgnString *)&v149);
  if (v150)
    v30 = v149;
  else
    v30 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v30, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 4;
  else
    v31 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1023, (DgnString *)&v149);
  if (v150)
    v36 = v149;
  else
    v36 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v31;
  *a5 += v31;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1024, (DgnString *)&v149);
  if (v150)
    v41 = v149;
  else
    v41 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v41, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1025, (DgnString *)&v149);
  if (v150)
    v46 = v149;
  else
    v46 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 4;
  else
    v47 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1026, (DgnString *)&v149);
  if (v150)
    v52 = v149;
  else
    v52 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1027, (DgnString *)&v149);
  if (v150)
    v58 = v149;
  else
    v58 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1028, (DgnString *)&v149);
  if (v150)
    v64 = v149;
  else
    v64 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v59;
  *a5 += v59;
  v65 = (_BYTE *)*((_QWORD *)this + 7);
  if (v65)
  {
    if (v65[12] && DgnThreadClient::isPlaying(this))
    {
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v66 = 4;
      else
        v66 = 8;
      getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1031, (DgnString *)&v149);
      if (v150)
        v71 = v149;
      else
        v71 = &unk_209A76496;
      xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v71, v66, v66, 0);
      goto LABEL_60;
    }
    v148 = 0;
    v149 = 0;
    v147 = 0;
    (*(void (**)(_BYTE *, uint64_t, _QWORD, void **, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 104))(v65, 0xFFFFFFFFLL, (a3 + 1), &v149, &v148, &v147);
    *a4 += (unint64_t)v149;
    *a5 += v148;
    *a6 += v147;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 4;
  else
    v66 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1036, (DgnString *)&v149);
  if (v150)
    v76 = v149;
  else
    v76 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v76, v66, v66, 0);
LABEL_60:
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v66;
  *a5 += v66;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v77 = 4;
  else
    v77 = 113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1039, (DgnString *)&v149);
  if (v150)
    v82 = v149;
  else
    v82 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v82, v77, v77, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v77;
  *a5 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 4;
  else
    v83 = 113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1040, (DgnString *)&v149);
  if (v150)
    v88 = v149;
  else
    v88 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v88, v83, v83, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v83;
  *a5 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v89 = 4;
  else
    v89 = 113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1041, (DgnString *)&v149);
  if (v150)
    v94 = v149;
  else
    v94 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v89;
  *a5 += v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v95 = 4;
  else
    v95 = 113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1042, (DgnString *)&v149);
  if (v150)
    v100 = v149;
  else
    v100 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v100, v95, v95, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v95;
  *a5 += v95;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v101 = 4;
  else
    v101 = 113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1044, (DgnString *)&v149);
  if (v150)
    v106 = v149;
  else
    v106 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v106, v101, v101, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v101;
  *a5 += v101;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1045, (DgnString *)&v149);
  if (v150)
    v111 = v149;
  else
    v111 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1047, (DgnString *)&v149);
  if (v150)
    v116 = v149;
  else
    v116 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v116, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1049, (DgnString *)&v149);
  if (v150)
    v121 = v149;
  else
    v121 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v121, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1051, (DgnString *)&v149);
  if (v150)
    v126 = v149;
  else
    v126 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v126, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1053, (DgnString *)&v149);
  if (v150)
    v131 = v149;
  else
    v131 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1056, (DgnString *)&v149);
  if (v150)
    v136 = v149;
  else
    v136 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v136, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1058, (DgnString *)&v149);
  if (v150)
    v141 = v149;
  else
    v141 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v141, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1060, (DgnString *)&v149);
  if (v150)
    v146 = v149;
  else
    v146 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, a3, &unk_209A76496, (35 - a3), (35 - a3), v146, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v149);
}

void sub_2098D4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnThreadMgr::recordTraceEvent(uint64_t result, unsigned int a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 76))
  {
    v4 = result;
    if (!*(_BYTE *)(result + 77))
    {
      *(_BYTE *)(result + 77) = 1;
      if (a2 == -1)
      {
        v7 = result + 80;
        if (a3 == -1)
          result = DgnThreadTrace::addInRegion(v7, -1, a4);
        else
          result = DgnThreadTrace::add(v7, a3, a4);
      }
      else
      {
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8 * a2) + 56) + 144;
        if (a2 == a3)
          v6 = -1;
        else
          v6 = a3;
        result = DgnThreadTrace::add(v5, v6, a4);
      }
      *(_BYTE *)(v4 + 77) = 0;
    }
  }
  return result;
}

void sub_2098D4290(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 77) = 0;
  _Unwind_Resume(a1);
}

uint64_t DgnThreadClient::startup(DgnThreadClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v10, (uint64_t)&gGlobalMemChunkRegion);
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 2);
  *((_DWORD *)this + 390) = 1;
  pthread_create((pthread_t *)this + 6, 0, (void *(__cdecl *)(void *))CurryDgnThreadMain, *((void **)this + 7));
  *((_QWORD *)this + 5) = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  *((_DWORD *)this + 390) = 0;
  DgnThreadClient::checkForWorkerError(this, v2, v3, v4, v5, v6, v7, v8);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v10);
}

void sub_2098D4370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void DgnThreadClient::checkForWorkerError(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 7);
  if (!v9 || *(_DWORD *)(v9 + 64) == 6)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1455, (uint64_t)"mrecutil/dthread", 9, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 7));
    v9 = *((_QWORD *)this + 7);
  }
  if (*(_BYTE *)(v9 + 68))
  {
    v10 = *(unsigned int *)(v9 + 72);
    if ((_DWORD)v10 == 2)
      DgnThreadClient::handleMemoryException(this);
    DgnThreadClient::handleException((uint64_t)this, *(_QWORD *)(v9 + 80), v10);
  }
}

void DgnThreadClient::shutdown(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 3);
  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 390) = 6;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  DgnThreadClient::waitForThreadDoneOrTerminate(this, 30000, v9, v10, v11);
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 3);
  DgnThreadClient::checkForWorkerError(this, v12, v13, v14, v15, v16, v17, v18);
  *((_DWORD *)this + 390) = 0;
}

uint64_t DgnThreadClient::waitForThreadDoneOrTerminate(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  void *v8[1028];

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v8[1027] = *(void **)MEMORY[0x24BDAC8D0];
  if (DgnEvent::timedWait((DgnEvent *)(v5 + 1312), v6))
  {
    v8[0] = 0;
    if (!pthread_join(*(pthread_t *)(v5 + 48), v8))
      return 1;
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1156, "mrecutil/dthread", 10, "%u", *(_DWORD *)(v5 + 28));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  return 0;
}

void sub_2098D4724()
{
  __cxa_end_catch();
  JUMPOUT(0x2098D45D0);
}

void DgnThreadClient::play(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 390) = 2;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  DgnEvent::wait((pthread_cond_t *)((char *)this + 568));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  *((_DWORD *)this + 390) = 0;
  DgnThreadClient::checkForWorkerError(this, v9, v10, v11, v12, v13, v14, v15);
  if (*((_DWORD *)this + 3) == 1)
  {
    if (*((_BYTE *)this + 1572))
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 7);
    if (*((_BYTE *)this + 1566))
      DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
    DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
    if (*((_BYTE *)this + 1572))
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    DgnEvent::signal((DgnThreadClient *)((char *)this + 320));
    if (*((_BYTE *)this + 1566))
    {
      if (*((_BYTE *)this + 1572))
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
      *((_DWORD *)this + 392) = GetRegionChecksum(*((MemChunkRegion **)this + 2));
      if (*((_BYTE *)this + 1572))
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    }
  }
}

void DgnThreadClient::playAllUntilWorkerPauses(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 390) = 4;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  DgnEvent::wait((pthread_cond_t *)((char *)this + 568));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  *((_DWORD *)this + 390) = 0;
  DgnThreadClient::checkForWorkerError(this, v9, v10, v11, v12, v13, v14, v15);
  if (*((_DWORD *)this + 3) == 1)
  {
    if (*((_BYTE *)this + 1572))
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 7);
    if (*((_BYTE *)this + 1566))
      DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
    DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
    if (*((_BYTE *)this + 1572))
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    DgnEvent::signal((DgnThreadClient *)((char *)this + 320));
    if (*((_BYTE *)this + 1566))
    {
      if (*((_BYTE *)this + 1572))
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
      *((_DWORD *)this + 392) = GetRegionChecksum(*((MemChunkRegion **)this + 2));
      if (*((_BYTE *)this + 1572))
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    }
  }
}

void DgnThreadClient::pause(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 390) = 5;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
  if (*((_BYTE *)this + 1566) && *((_DWORD *)this + 3) == 1)
  {
    if (*((_BYTE *)this + 1572))
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
    if (GetRegionChecksum(*((MemChunkRegion **)this + 2)) != *((_DWORD *)this + 392))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1326, (uint64_t)"mrecutil/dthread", 7, (uint64_t)"%u %u %u", v9, v10, *((_DWORD *)this + 7));
  }
  if (*((_BYTE *)this + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  *((_DWORD *)this + 390) = 0;
  *(_DWORD *)(*((_QWORD *)this + 7) + 64) = 2;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 816));
  DgnThreadClient::checkForWorkerError(this, v11, v12, v13, v14, v15, v16, v17);
}

BOOL DgnThreadClient::isPaused(DgnThreadClient *this)
{
  return !*((_DWORD *)this + 390) && *(_DWORD *)(*((_QWORD *)this + 7) + 64) == 2;
}

uint64_t DgnThreadClient::terminate(DgnThreadClient *this)
{
  uint64_t result;
  uint64_t v3;

  errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1379, "mrecutil/dthread", 5, "%u", *((_DWORD *)this + 7));
  result = pthread_kill(*((pthread_t *)this + 6), 20);
  v3 = *((_QWORD *)this + 7);
  *(_DWORD *)(v3 + 64) = 6;
  *(_BYTE *)(v3 + 12) = 0;
  return result;
}

uint64_t DgnThreadClient::getThreadState(DgnThreadClient *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 7) + 64);
}

uint64_t DgnThreadClient::newWorker(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1448, (uint64_t)"mrecutil/dthread", 4, (uint64_t)"%.500s", a7, a8, (char)"DgnThreadClient::newWorker");
  return 0;
}

void DgnThreadClient::handleMemoryException(DgnThreadClient *this)
{
  DgnThreadClient *v1;

  v1 = this;
  if (*((_BYTE *)this + 1572))
    this = (DgnThreadClient *)DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 16);
  if (!*((_BYTE *)v1 + 1565))
  {
    *((_BYTE *)v1 + 1565) = 1;
    if (DgnThreadMgr::getCurrentThreadId(this) == -1)
      snprintf(DgnThreadClient::handleMemoryException::buffer, 0x190uLL, "Memory allocation in worker thread %u failed: rethrowing memory exception in global thread.\n");
    else
      snprintf(DgnThreadClient::handleMemoryException::buffer, 0x190uLL, "Memory allocation in worker thread %u failed: rethrowing memory exception in client thread %u.\n");
    xprintString(DgnThreadClient::handleMemoryException::buffer);
    MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
  }
  ThrowMemoryException((uint64_t)v1 + 8);
}

uint64_t DgnThreadClient::handleException(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 1572))
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 28), 15);
  return errCopyAndThrowException(a3, a2);
}

double DgnThreadWorker::DgnThreadWorker(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_24C214F48;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a3 + 1572);
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = a5;
  *(_QWORD *)(a1 + 152) = a4;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a3 + 1566);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void DgnThreadWorker::~DgnThreadWorker(DgnThreadWorker *this)
{
  DgnPrinter *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_24C214F48;
  v2 = (DgnPrinter *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 7) = 0;
    DgnPrinter::~DgnPrinter(v2);
    MemChunkFree(v3, 0);
  }
  DgnThreadTrace::~DgnThreadTrace((DgnThreadWorker *)((char *)this + 144));
}

{
  DgnThreadWorker::~DgnThreadWorker(this);
  JUMPOUT(0x20BD149A8);
}

void DgnThreadWorker::printSize(DgnThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v123;
  int v124;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1598, (DgnString *)&v123);
  if (v124)
    v15 = v123;
  else
    v15 = &unk_209A76496;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A76496, a3, &unk_209A76496, v15);
  DgnString::~DgnString((DgnString *)&v123);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A76496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1599, (DgnString *)&v123);
  if (v124)
    v24 = v123;
  else
    v24 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v24, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1600, (DgnString *)&v123);
  if (v124)
    v29 = v123;
  else
    v29 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v29, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1601, (DgnString *)&v123);
  if (v124)
    v34 = v123;
  else
    v34 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v34, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 4;
  else
    v35 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1602, (DgnString *)&v123);
  if (v124)
    v40 = v123;
  else
    v40 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 4;
  else
    v41 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1603, (DgnString *)&v123);
  if (v124)
    v46 = v123;
  else
    v46 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 4;
  else
    v47 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1605, (DgnString *)&v123);
  if (v124)
    v52 = v123;
  else
    v52 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1606, (DgnString *)&v123);
  if (v124)
    v58 = v123;
  else
    v58 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v53;
  *a5 += v53;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1610, (DgnString *)&v123);
  if (v124)
    v63 = v123;
  else
    v63 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1612, (DgnString *)&v123);
  if (v124)
    v68 = v123;
  else
    v68 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v68, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1614, (DgnString *)&v123);
  if (v124)
    v73 = v123;
  else
    v73 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v74 = 4;
  else
    v74 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1615, (DgnString *)&v123);
  if (v124)
    v79 = v123;
  else
    v79 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v79, v74, v74, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v74;
  *a5 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1617, (DgnString *)&v123);
  if (v124)
    v84 = v123;
  else
    v84 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v84, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1620, (DgnString *)&v123);
  if (v124)
    v89 = v123;
  else
    v89 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1622, (DgnString *)&v123);
  if (v124)
    v94 = v123;
  else
    v94 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  v95 = SnapTime::sizeObject((uint64_t)this + 104, 0);
  v96 = SnapTime::sizeObject((uint64_t)this + 104, 1);
  v97 = SnapTime::sizeObject((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1624, (DgnString *)&v123);
  if (v124)
    v102 = v123;
  else
    v102 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v102, v95, v96, v97);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v95;
  *a5 += v96;
  *a6 += v97;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1626, (DgnString *)&v123);
  if (v124)
    v107 = v123;
  else
    v107 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v107, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  v108 = (char *)this + 144;
  v109 = sizeObject((uint64_t)this + 144, 0);
  v110 = sizeObject((uint64_t)v108, 1);
  v111 = sizeObject((uint64_t)v108, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1627, (DgnString *)&v123);
  if (v124)
    v116 = v123;
  else
    v116 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &unk_209A76496, (34 - a3), (34 - a3), v116, v109, v110, v111);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v109;
  *a5 += v110;
  *a6 += v111;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1629, (DgnString *)&v123);
  if (v124)
    v121 = v123;
  else
    v121 = &unk_209A76496;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, a3, &unk_209A76496, (35 - a3), (35 - a3), v121, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v123);
}

void sub_2098D56A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnThreadWorker::reportErrorAsWarning(DgnThreadWorker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  const char *v12;
  const char *v13;
  const char *v14;
  _BYTE v15[8192];
  int v16;
  char v17;
  const char *v18;
  int v19;
  uint64_t v20;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v5;
  v20 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(v5 + 72);
  if (v8 == 2)
  {
    if (v6)
    {
      strcpy((char *)DgnThreadWorker::reportErrorAsWarning(BOOL)::buffer, "Memory allocation in client thread failed.\n");
      xprintString((const char *)DgnThreadWorker::reportErrorAsWarning(BOOL)::buffer);
      MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1643, "mrecutil/dthread", 8, "%u");
    }
    else
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1648, "mrecutil/dthread", 9, "%u %u");
    }
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 80);
    if (v9)
      v10 = 1;
    else
      v10 = v6 == 0;
    if (v10)
    {
      if (v8 > 1 || v9 == 0)
      {
        errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1659, "mrecutil/dthread", 2, "%u %u");
      }
      else
      {
        DgnString::DgnString((DgnString *)&v18);
        v15[0] = 0;
        v16 = 0x2000;
        v17 = 0;
        v12 = (const char *)&unk_209A76496;
        MessageFormatPrefix((DgnThreadMgr *)v15, 0, 1, *(_DWORD *)(v9 + 72));
        if (v19)
          v13 = v18;
        else
          v13 = (const char *)&unk_209A76496;
        if (v17)
          v14 = v13;
        else
          v14 = v15;
        if (*(_DWORD *)(v9 + 64))
          v12 = *(const char **)(v9 + 56);
        errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1673, "mrecutil/dthread", 3, "%u %u %.500s %.500s", *(_DWORD *)(v7 + 16), *(_DWORD *)(v7 + 64), v14, v12);
        DgnString::~DgnString((DgnString *)&v18);
      }
    }
    else
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1653, "mrecutil/dthread", 1, "%u");
    }
  }
}

void sub_2098D598C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t DgnThreadWorker::play(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v11;
  DgnEvent *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)(v5 + 1564))
  {
    v7 = v4;
    do
    {
      v8 = *(_QWORD *)(v5 + 56);
      if (v8)
        LOBYTE(v8) = *(_BYTE *)(v8 + 68) != 0;
      result = 2;
      if ((v8 & 1) != 0 || v7 == 6)
        return result;
      v9 = *(_DWORD *)(v5 + 1560);
      if (v9 == 6 || v7 == 5)
        return 1;
      result = 0;
      if (a2 == 3 || v7 == 4)
        return result;
      if (v9 == 5)
      {
        if (!v7)
          goto LABEL_40;
      }
      else if (*(_DWORD *)(a1 + 8) != 1 || !v7)
      {
        goto LABEL_22;
      }
      if (a2 != 4 && v7 != 2)
        return 0;
LABEL_22:
      if ((v7 & 0xFFFFFFFE) != 2)
        goto LABEL_40;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      if (*(_BYTE *)(a1 + 136))
        DgnThreadTrace::add(a1 + 144, -1, 5);
      SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
      v11 = *(_DWORD *)(a1 + 96);
      v12 = (DgnEvent *)(*(_QWORD *)(a1 + 48) + 1064);
      if (v11)
        DgnEvent::timedWait(v12, v11);
      else
        DgnEvent::wait((pthread_cond_t *)v12);
      SnapTime::recordTime((SnapTime *)&v18, 1, 0, 0, 0);
      if (*(_BYTE *)(a1 + 136))
        DgnThreadTrace::add(a1 + 144, -1, 6);
      v13 = v21;
      v14 = v19;
      *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), vsubq_s64(v18, v20));
      *(int64x2_t *)(a1 + 120) = vaddq_s64(*(int64x2_t *)(a1 + 120), vsubq_s64(v14, v13));
      v15 = *(_QWORD *)(a1 + 48);
      if (*(_BYTE *)(v15 + 1564))
        return 2;
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 68))
          return 2;
      }
      v17 = *(_DWORD *)(v15 + 1560);
      if (v17 == 5)
      {
        if (a2 == 4)
          goto LABEL_40;
      }
      else
      {
        if (v17 == 6)
          return 1;
        if (a2 == 4 || *(_DWORD *)(a1 + 8) != 1)
          goto LABEL_40;
      }
      if (v7 == 3)
        return 0;
LABEL_40:
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      v5 = *(_QWORD *)(a1 + 48);
    }
    while (!*(_BYTE *)(v5 + 1564));
  }
  return 2;
}

uint64_t DgnThreadWorker::playOne(DgnThreadWorker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1916, (uint64_t)"mrecutil/dthread", 4, (uint64_t)"%.500s", a7, a8, (char)"DgnThreadWorker::playOne");
  return 6;
}

uint64_t DgnThreadWorker::notification(uint64_t a1)
{
  return DgnEvent::signal((DgnEvent *)(*(_QWORD *)(a1 + 48) + 1064));
}

void DgnThreadMgr::DgnThreadMgr(DgnThreadMgr *this)
{
  uint64_t v2;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0x10000001DLL;
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 40) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_DWORD *)((char *)this + 75) = 0;
  *((_DWORD *)this + 21) = -1;
  *((_QWORD *)this + 11) = &gGlobalMemChunkRegion;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 8, 1, 1);
  v2 = *((unsigned int *)this + 4);
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v2) = 0;
  *((_DWORD *)this + 4) = v2 + 1;
}

void sub_2098D5CE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  DgnThreadTrace *v4;

  DgnIOwnArray<DgnThreadTrace *>::releaseAll(v2 + 192);
  DgnThreadTrace::~DgnThreadTrace(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

void DgnThreadMgr::startupThreadMgr(DgnThreadMgr *this)
{
  int v1;
  pthread_key_t v2;
  uint64_t *v3;
  uint64_t v4;
  pthread_key_t v5;

  v5 = 0;
  v1 = pthread_key_create(&v5, 0);
  v2 = v5;
  if (v1)
    v2 = -1;
  DgnThreadMgr::smTlsID = v2;
  v3 = MemChunkAlloc(0xD0uLL, 0);
  DgnThreadMgr::DgnThreadMgr((DgnThreadMgr *)v3);
  DgnThreadMgr::smpThreadMgr = v4;
}

void DgnThreadMgr::throwBadDgnThreadId(DgnThreadMgr *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 2045, (uint64_t)"mrecutil/dthread", 1, (uint64_t)"%u", a7, a8, a2);
}

uint64_t DgnThreadMgr::getNewThreadId(DgnThreadMgr *this)
{
  uint64_t NextId;
  unsigned int i;

  NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 6);
  for (i = *((_DWORD *)this + 4); i <= NextId; *((_DWORD *)this + 4) = i)
  {
    if (i == *((_DWORD *)this + 5))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 8, 1, 1);
      i = *((_DWORD *)this + 4);
    }
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i++) = 0;
  }
  return NextId;
}

void DgnThreadMgr::validateDgnThreadId(DgnThreadMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 4) <= a2 || !*(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 2045, (uint64_t)"mrecutil/dthread", 1, (uint64_t)"%u", a7, a8, a2);
}

void DgnThreadMgr::broadcastError(DgnThreadMgr *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  DgnThreadClient *v9;

  if (DgnThreadMgr::smpThreadMgr)
  {
    *(_BYTE *)(DgnThreadMgr::smpThreadMgr + 4) = 1;
    pthread_yield_np();
    v1 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) >= 2u)
    {
      v2 = 1;
      do
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
        if (v3)
        {
          DgnThreadClient::error(v3);
          v1 = DgnThreadMgr::smpThreadMgr;
        }
        ++v2;
      }
      while (v2 < *(unsigned int *)(v1 + 16));
    }
    pthread_yield_np();
    v7 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) >= 2u)
    {
      v8 = 1;
      do
      {
        v9 = *(DgnThreadClient **)(*(_QWORD *)(v7 + 8) + 8 * v8);
        if (v9)
        {
          DgnThreadClient::waitForThreadDoneOrTerminate(v9, 1000, v4, v5, v6);
          v7 = DgnThreadMgr::smpThreadMgr;
        }
        ++v8;
      }
      while (v8 < *(unsigned int *)(v7 + 16));
    }
  }
}

DgnThreadMgr *DgnThreadMgr::startClientCallbackEvent(DgnThreadMgr *this)
{
  int v1;
  unsigned int CurrentThreadId;
  char v3;

  if (DgnThreadMgr::smpThreadMgr && *(_BYTE *)(DgnThreadMgr::smpThreadMgr + 76))
  {
    v1 = (int)this;
    CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
    if (v1)
      v3 = 12;
    else
      v3 = 11;
    return (DgnThreadMgr *)DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, CurrentThreadId, CurrentThreadId, v3);
  }
  return this;
}

DgnThreadMgr *DgnThreadMgr::endClientCallbackEvent(DgnThreadMgr *this)
{
  unsigned int CurrentThreadId;

  if (DgnThreadMgr::smpThreadMgr)
  {
    if (*(_BYTE *)(DgnThreadMgr::smpThreadMgr + 76))
    {
      CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
      return (DgnThreadMgr *)DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, CurrentThreadId, CurrentThreadId, 6);
    }
  }
  return this;
}

uint64_t DgnThreadMgr::beginFileLoadOrSave(DgnThreadMgr *this)
{
  _DWORD *FileLoadOrSaveCounter;
  uint64_t v2;

  FileLoadOrSaveCounter = (_DWORD *)DgnThreadMgr::getFileLoadOrSaveCounter(this);
  v2 = (*FileLoadOrSaveCounter + 1);
  *FileLoadOrSaveCounter = v2;
  return v2;
}

uint64_t DgnThreadMgr::getFileLoadOrSaveCounter(DgnThreadMgr *this)
{
  unsigned int CurrentThreadId;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
  if (CurrentThreadId == -1)
    return (uint64_t)this + 72;
  v9 = CurrentThreadId;
  DgnThreadMgr::validateDgnThreadId(this, CurrentThreadId, v3, v4, v5, v6, v7, v8);
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v9) + 56) + 92;
}

uint64_t DgnThreadMgr::endFileLoadOrSave(DgnThreadMgr *this)
{
  _DWORD *FileLoadOrSaveCounter;
  _DWORD *v2;
  uint64_t result;

  FileLoadOrSaveCounter = (_DWORD *)DgnThreadMgr::getFileLoadOrSaveCounter(this);
  if (!*FileLoadOrSaveCounter)
    return 0;
  v2 = FileLoadOrSaveCounter;
  result = (*FileLoadOrSaveCounter - 1);
  *v2 = result;
  return result;
}

void SetShadowDiagnosticChecksumMemChunkRegionsOnSyncThread(void)
{
  gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread = *(_BYTE *)(gParDiagnosticChecksumMemChunkRegionsOnSyncThread
                                                                  + 41);
}

uint64_t DgnThreadTrace::addInRegion(uint64_t a1, int a2, char a3)
{
  uint64_t v7;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v7, *(_QWORD *)(a1 + 8));
  DgnThreadTrace::add(a1, a2, a3);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v7);
}

void sub_2098D60EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t DgnPrimArray<unsigned long long>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = result;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + 8) = a4;
  }
  v9 = *a2;
  v10 = *(_QWORD **)v7;
  v11 = a4;
  do
  {
    *v10++ = *(_QWORD *)(v9 + 8 * a3++);
    --v11;
  }
  while (v11);
  return result;
}

_QWORD *DgnIOwnArray<DgnThreadTrace *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnThreadTrace>(*(DgnThreadTrace **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

DgnThreadTrace *DgnDelete<DgnThreadTrace>(DgnThreadTrace *result)
{
  _QWORD *v1;

  if (result)
  {
    DgnThreadTrace::~DgnThreadTrace(result);
    return (DgnThreadTrace *)MemChunkFree(v1, 0);
  }
  return result;
}

void TNewWords::TNewWords(TNewWords *this, TTokenizerParamManager *a2)
{
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = 0;
}

_QWORD *TNewWords::findAndAddWords(uint64_t a1, int *a2, uint64_t a3, char *a4, char a5)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t ActiveConfigHandle;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ValidConfig;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  __int128 v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  if (TLexicon::checkName(*(_QWORD *)(a1 + 24), a2, 0, 0xFFFFFFFFFFFFFFFFLL))
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  v11 = *(_QWORD **)(a1 + 24);
  v12 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 32) + 10744));
  v13 = *(_QWORD *)(a1 + 32);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 16464));
  v15 = *(int *)(v13 + 4 * TParam::getValidConfig((TParam *)(v13 + 16464), ActiveConfigHandle) + 16624);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 16112));
  ValidConfig = TParam::getValidConfig((TParam *)(v16 + 16112), v17);
  TLexicon::findHeadClonesCollated(v11, (unsigned int *)a2, v12, v15, *(int *)(v16 + 4 * ValidConfig + 16272), &__p);
  v19 = __p;
  v20 = v31;
  if (v31 == __p)
  {
    v10 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v10 = 0;
    do
    {
      if ((v19[v21 + 16] & 0xC0) == 0)
      {
        if (!v10)
        {
          v10 = TGraph::addVertex(*(TGraph **)(a1 + 8), a4);
          v19 = __p;
        }
        v23 = &v19[v21];
        v23[24] += a5;
        v24 = *(_QWORD **)(a1 + 8);
        v25 = *(_QWORD *)v23;
        v27 = 1;
        v28 = v25;
        v29 = *((_OWORD *)v23 + 1);
        TGraph::addEdge(v24, a3, v10, (uint64_t)&v27);
        v19 = __p;
        v20 = v31;
      }
      ++v22;
      v21 += 32;
    }
    while (v22 < (v20 - v19) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&__p, 0);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_2098D63C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL TNewWords::addAlphanumWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  char *v4;
  unint64_t v5;
  uint64_t Segment;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  _BOOL8 v12;
  int *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  int *v28;
  __int128 v29;
  _BYTE v30[1024];
  char v31;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1880);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  v4 = *(char **)(*(_QWORD *)this + 16);
  v28 = (int *)v30;
  v29 = xmmword_209A57DD0;
  v31 = 1;
  if (!*v4)
  {
    v12 = 0;
LABEL_36:
    if (v28 != (int *)v30 && v28 != 0)
      MEMORY[0x20BD149A8]();
    return v12;
  }
  v5 = 0;
  do
  {
    Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), v4);
    v7 = Segment;
    v8 = *(_DWORD *)(Segment + 24);
    if (v8 != 1 && (!v5 || v8 != 2))
      break;
    v9 = 0;
    v10 = *(int **)Segment;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), v10, v9 - 1);
    ++v5;
    v4 = *(char **)(v7 + 8);
  }
  while (*v4);
  v12 = v5 > 1;
  if (v5 >= 2)
  {
    if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
    {
      if (v31)
      {
        v24 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
        v13 = v28;
        --*((_QWORD *)&v29 + 1);
      }
      else
      {
        v13 = v28;
        if ((_QWORD)v29)
          v28[(_QWORD)v29 - 1] = 0;
      }
    }
    else
    {
      v13 = v28;
      v28[*((_QWORD *)&v29 + 1)] = 0;
    }
    if (!TNewWords::findAndAddWords((uint64_t)this, v13, *(_QWORD *)this, v4, 0))
    {
      v14 = *((_QWORD *)this + 3);
      if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
      {
        if (v31)
        {
          v24 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
          v15 = v28;
          --*((_QWORD *)&v29 + 1);
        }
        else
        {
          v15 = v28;
          if ((_QWORD)v29)
            v28[(_QWORD)v29 - 1] = 0;
        }
      }
      else
      {
        v15 = v28;
        v28[*((_QWORD *)&v29 + 1)] = 0;
      }
      if (!TLexicon::checkName(v14, v15, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        v16 = TGraph::addVertex(*((TGraph **)this + 1), v4);
        v17 = *((_QWORD *)this + 3);
        if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
        {
          if (v31)
          {
            v24 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
            v18 = v28;
            --*((_QWORD *)&v29 + 1);
          }
          else
          {
            v18 = v28;
            if ((_QWORD)v29)
              v28[(_QWORD)v29 - 1] = 0;
          }
        }
        else
        {
          v18 = v28;
          v28[*((_QWORD *)&v29 + 1)] = 0;
        }
        v19 = TLexicon::addTempWord(v17, v18, 0, 0, 0);
        v20 = *(_QWORD *)this;
        v21 = (_QWORD *)*((_QWORD *)this + 1);
        v24 = 4;
        v25 = v19;
        v26 = 0;
        v27 = 0;
        TGraph::addEdge(v21, v20, v16, (uint64_t)&v24);
      }
    }
    *((_QWORD *)this + 5) = v4;
  }
  if (v31)
    goto LABEL_36;
  return v12;
}

void sub_2098D66C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]))
  {
    if (a13 != v13 && a13 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addHyphenatedWord(TSegmenter **this)
{
  char *v1;
  uint64_t Segment;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const __int32 **v9;
  const __int32 **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  BOOL v15;
  BOOL v16;
  const __int32 **v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v24;
  int *v25;
  int *v27;
  int v28;
  TSegmenter *v29;
  uint64_t v30;
  TSegmenter *v31;
  uint64_t v32;
  uint64_t k;
  uint64_t v34;
  int *v35;
  uint64_t v37;
  int *v38;
  TSegmenter *v39;
  uint64_t ActiveConfigHandle;
  uint64_t j;
  uint64_t v42;
  int *v43;
  int *v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  TGraph *v49;
  TSegmenter *v50;
  _QWORD *v51;
  TSegmenter *v52;
  uint64_t v53;
  char v54;
  TSegmenter *v55;
  unint64_t v56;
  unint64_t v57;
  int **v58;
  char *v59;
  TSegmenter *v60;
  int *v61;
  _QWORD *v62;
  TSegmenter *v63;
  TLocaleInfo *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  int *v69;
  __int128 v70;
  _BYTE v71[1024];
  char v72;
  _OWORD v73[8];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)*((_QWORD *)*this + 2);
  if (!*v1)
    return 0;
  memset(v73, 0, sizeof(v73));
  Segment = TSegmenter::getSegment(this[2], v1);
  if (*(_DWORD *)(Segment + 24) == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v6;
      v8 = *(_QWORD *)Segment;
      v1 = *(char **)(Segment + 8);
      *((_QWORD *)v73 + v7) = *(_QWORD *)Segment;
      v4 |= *(_DWORD *)(v8 + 4) == 0;
      v9 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
      if (!v9)
        break;
      v10 = v9;
      if (wcscmp(*v9, (const __int32 *)"-"))
        break;
      v11 = TSegmenter::getSegment(this[2], (char *)v10[1]);
      if (!v11)
        break;
      v12 = v11;
      if (*(_DWORD *)(v11 + 24) == 5)
        break;
      v13 = **(_DWORD **)v11;
      if ((v14 & 1) == 0
      {
        v64 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v64);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v64;
      }
      v15 = v13 == 10 || v13 == 13;
      v16 = v15;
      v5 |= v16;
      v17 = v15 ? (const __int32 **)v12 : v10;
      v18 = (char *)v17[1];
      if (!*v18 || v7 >= 0xF)
        break;
      Segment = TSegmenter::getSegment(this[2], v18);
      v6 = v7 + 1;
    }
    while (*(_DWORD *)(Segment + 24) == 1);
    v20 = v7 + 1;
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v20 = 0;
  }
  if (v20 < 2)
    return 0;
  v69 = (int *)v71;
  v70 = xmmword_209A57DD0;
  v72 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
  for (i = 1; i != v20; ++i)
  {
    v65 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
    v24 = 0;
    v25 = (int *)*((_QWORD *)v73 + i);
    while (v25[v24++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v25, v24 - 1);
  }
  if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
  {
    if (v72)
    {
      v65 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
      v27 = v69;
      --*((_QWORD *)&v70 + 1);
    }
    else
    {
      v27 = v69;
      if ((_QWORD)v70)
        v69[(_QWORD)v70 - 1] = 0;
    }
  }
  else
  {
    v27 = v69;
    v69[*((_QWORD *)&v70 + 1)] = 0;
  }
  if (TNewWords::findAndAddWords((uint64_t)this, v27, (uint64_t)*this, v1, 0))
    goto LABEL_42;
  if ((v4 & 1) != 0)
    goto LABEL_44;
  if ((v5 & 1) != 0
    || (v39 = this[4],
        ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v39 + 1384)),
        *((_BYTE *)v39 + TParam::getValidConfig((TSegmenter *)((char *)v39 + 1384), ActiveConfigHandle) + 1536)))
  {
    TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
    for (j = 1; j != v20; ++j)
    {
      v42 = 0;
      v43 = (int *)*((_QWORD *)v73 + j);
      while (v43[v42++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v43, v42 - 1);
    }
    if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
    {
      if (v72)
      {
        v65 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
        v45 = v69;
        --*((_QWORD *)&v70 + 1);
      }
      else
      {
        v45 = v69;
        if ((_QWORD)v70)
          v69[(_QWORD)v70 - 1] = 0;
      }
    }
    else
    {
      v45 = v69;
      v69[*((_QWORD *)&v70 + 1)] = 0;
    }
    if (TNewWords::findAndAddWords((uint64_t)this, v45, (uint64_t)*this, v1, 1))
      goto LABEL_42;
  }
  v52 = this[4];
  v53 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v52 + 1632));
  if (!*((_BYTE *)v52 + TParam::getValidConfig((TSegmenter *)((char *)v52 + 1632), v53) + 1784))
  {
LABEL_44:
    v28 = 4;
  }
  else
  {
    v54 = 0;
    v55 = *this;
    v56 = v20 - 1;
    v57 = v20;
    v58 = (int **)v73;
    do
    {
      if (v56)
        v59 = 0;
      else
        v59 = v1;
      v60 = (TSegmenter *)TNewWords::findAndAddWords((uint64_t)this, *v58, (uint64_t)v55, v59, 1);
      if (!v60)
      {
        v61 = *v58;
        if (TLexicon::checkName((uint64_t)this[3], *v58, 0, 0xFFFFFFFFFFFFFFFFLL))
        {
          v60 = 0;
        }
        else
        {
          v62 = TLexicon::addTempWord((uint64_t)this[3], v61, 0, 0, 0);
          v60 = (TSegmenter *)TGraph::addVertex(this[1], v59);
          v63 = this[1];
          v65 = 0;
          v66 = v62;
          v67 = 0;
          v68 = 0;
          TGraph::addEdge(v63, (uint64_t)v55, v60, (uint64_t)&v65);
          v54 = 1;
        }
      }
      ++v58;
      --v56;
      v55 = v60;
      --v57;
    }
    while (v57);
    v28 = 0;
    v21 = 0;
    if ((v54 & 1) == 0)
      goto LABEL_53;
  }
  v29 = this[4];
  v30 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v29 + 1880));
  if (!*((_BYTE *)v29 + TParam::getValidConfig((TSegmenter *)((char *)v29 + 1880), v30) + 2032))
    goto LABEL_52;
  v31 = this[4];
  v32 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v31 + 1136));
  if (!*((_BYTE *)v31 + TParam::getValidConfig((TSegmenter *)((char *)v31 + 1136), v32) + 1288))
    goto LABEL_52;
  TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
  for (k = 1; k != v20; ++k)
  {
    v65 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
    v34 = 0;
    v35 = (int *)*((_QWORD *)v73 + k);
    while (v35[v34++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v35, v34 - 1);
  }
  v37 = (uint64_t)this[3];
  v38 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v69);
  if (TLexicon::checkName(v37, v38, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    v21 = 0;
    goto LABEL_53;
  }
  v46 = (uint64_t)this[3];
  v47 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v69);
  v48 = TLexicon::addTempWord(v46, v47, 0, 0, 0);
  v50 = *this;
  v49 = this[1];
  v51 = TGraph::addVertex(v49, v1);
  v65 = v28;
  v66 = v48;
  v67 = 0;
  v68 = 0;
  TGraph::addEdge(v49, (uint64_t)v50, v51, (uint64_t)&v65);
LABEL_42:
  this[5] = (TSegmenter *)v1;
  v21 = 1;
LABEL_53:
  if (v72 && v69 != (int *)v71 && v69)
    MEMORY[0x20BD149A8]();
  return v21;
}

void sub_2098D6D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addContractionWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  char *v4;
  __int32 *v5;
  __int32 **Segment;
  uint64_t PrevVertex;
  __int32 **v9;
  __int32 *v10;
  int *v11;
  uint64_t Vertex;
  uint64_t v13;
  uint64_t OutEdge;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  _QWORD *v31;
  TGraph *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  __int128 v39;
  _BYTE v40[1024];
  char v41;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1880);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  v4 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 4) + 2376));
  if (!*(_DWORD *)v4)
    return 0;
  v5 = (__int32 *)v4;
  Segment = (__int32 **)TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(_QWORD *)this + 16));
  if ((*Segment)[1])
    return 0;
  v9 = Segment;
  v10 = wcschr(v5, **Segment);
  if (!v10)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)this + 16) != *(_QWORD *)(*(_QWORD *)this + 24))
    return 0;
  v11 = v10;
  Vertex = TGraph::getVertex(*((TGraph **)this + 1), (const char *)v9[1]);
  if (!Vertex)
    return 0;
  v13 = Vertex;
  if (*(_QWORD *)(Vertex + 16) != *(_QWORD *)(Vertex + 24))
    return 0;
  OutEdge = TVertex::getOutEdge(*(_QWORD *)this);
  if (OutEdge)
  {
    if (*(_QWORD *)(OutEdge + 24) != v13)
      return 0;
    while (1)
    {
      OutEdge = *(_QWORD *)(OutEdge + 8);
      if (!OutEdge)
        break;
      if (!*(_BYTE *)(OutEdge + 32))
      {
        PrevVertex = 0;
        if (*(_QWORD *)(OutEdge + 24) != v13)
          return PrevVertex;
      }
    }
  }
  v15 = TVertex::getInEdge(v13);
  v16 = *(_QWORD *)this;
  if (!v15)
    goto LABEL_22;
  if (*(_QWORD *)(v15 + 16) != v16)
    return 0;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (!*(_BYTE *)(v15 + 32))
    {
      PrevVertex = 0;
      if (*(_QWORD *)(v15 + 16) != v16)
        return PrevVertex;
    }
  }
LABEL_22:
  PrevVertex = TGraph::getPrevVertex(*((TGraph **)this + 1), *(_QWORD *)(v16 + 24) - 1);
  if (!PrevVertex)
    return PrevVertex;
  v17 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(PrevVertex + 16));
  if (!v17 || *(_DWORD *)(v17 + 24) != 1 || *(_QWORD *)(v17 + 8) != *(_QWORD *)(*(_QWORD *)this + 24))
    return 0;
  v18 = 0;
  v38 = v40;
  v39 = xmmword_209A57DD0;
  v41 = 1;
  v19 = *(int **)v17;
  while (v19[v18++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, 0, v19, v18 - 1);
  v34 = *v11;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), &v34, 1uLL);
  v21 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(v13 + 16));
  v22 = v21;
  if (!v21 || *(_DWORD *)(v21 + 24) != 1)
    goto LABEL_35;
  v23 = 0;
  v24 = *(int **)v21;
  while (v24[v23++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), v24, v23 - 1);
  v26 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TNewWords::findAndAddWords((uint64_t)this, v26, PrevVertex, *(char **)(v22 + 8), 0))
    goto LABEL_33;
  v27 = *((_QWORD *)this + 3);
  v28 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TLexicon::checkName(v27, v28, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_35:
    PrevVertex = 0;
    goto LABEL_36;
  }
  v29 = *((_QWORD *)this + 3);
  v30 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  v31 = TLexicon::addTempWord(v29, v30, 0, 0, 0);
  v32 = (TGraph *)*((_QWORD *)this + 1);
  v33 = TGraph::addVertex(v32, *(char **)(v22 + 8));
  v34 = 4;
  v35 = v31;
  v36 = 0;
  v37 = 0;
  TGraph::addEdge(v32, PrevVertex, v33, (uint64_t)&v34);
LABEL_33:
  *((_QWORD *)this + 5) = *(_QWORD *)(v22 + 8);
  PrevVertex = 1;
LABEL_36:
  if (v41 && v38 != v40 && v38)
    MEMORY[0x20BD149A8]();
  return PrevVertex;
}

void sub_2098D7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

BOOL TNewWords::addAcronymWord(TSegmenter **this)
{
  char *v1;
  char v3;
  uint64_t Segment;
  uint64_t v5;
  int *v6;
  int v7;
  unsigned __int8 v8;
  char isUpper;
  uint64_t v10;
  int *v11;
  const __int32 **v13;
  const __int32 **v14;
  uint64_t v15;
  int *v16;
  TLocaleInfo *v18;
  _BOOL8 v19;
  unint64_t v20;
  signed int v21;
  unsigned __int8 v22;
  TLocaleInfo *v23;
  int *v24;
  _QWORD *v25;
  TSegmenter *v26;
  uint64_t ActiveConfigHandle;
  int *v28;
  uint64_t v29;
  int *v30;
  _QWORD *v31;
  uint64_t v32;
  int *v33;
  _QWORD *v34;
  TSegmenter *v35;
  TSegmenter *v36;
  int *v39;
  __int128 v40;
  _BYTE v41[785];
  char v42;
  int *v43;
  __int128 v44;
  _BYTE v45[1024];
  char v46;
  int v47[3];

  v1 = (char *)*((_QWORD *)*this + 2);
  v43 = (int *)v45;
  v44 = xmmword_209A57DD0;
  v46 = 1;
  if (!*v1)
  {
    v19 = 0;
LABEL_62:
    if (v43 != (int *)v45 && v43 != 0)
      MEMORY[0x20BD149A8]();
    return v19;
  }
  v3 = 1;
  do
  {
    Segment = TSegmenter::getSegment(this[2], v1);
    v5 = Segment;
    if (*(_DWORD *)(Segment + 24) != 1)
      break;
    v6 = *(int **)Segment;
    if (wcslen(*(const __int32 **)Segment) != 1)
      break;
    v7 = *v6;
    {
      v18 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v18);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v18;
    }
    isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
    v10 = 0;
    v11 = *(int **)v5;
    while (v11[v10++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v11, v10 - 1);
    v1 = *(char **)(v5 + 8);
    v13 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
    v14 = v13;
    v3 &= isUpper;
    if (!v13)
      break;
    if (wcscmp(*v13, (const __int32 *)"."))
      break;
    v15 = 0;
    v16 = (int *)*v14;
    while (v16[v15++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v16, v15 - 1);
    v1 = (char *)v14[1];
  }
  while (*v1);
  v19 = *((_QWORD *)&v44 + 1) > 3uLL;
  if (*((_QWORD *)&v44 + 1) >= 4uLL)
  {
    if ((v3 & 1) == 0)
      goto LABEL_38;
    v20 = 0;
    v39 = (int *)v41;
    v40 = xmmword_209A57DD0;
    v42 = 1;
    do
    {
      v21 = v43[v20];
      if ((v22 & 1) == 0
      {
        v23 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v23);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v23;
      }
      if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21))
      {
        v47[0] = v43[v20];
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v47, 1uLL);
      }
      ++v20;
    }
    while (v20 < *((_QWORD *)&v44 + 1));
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v47[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v47, 1uLL);
        v24 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v24 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v24 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    v25 = TNewWords::findAndAddWords((uint64_t)this, v24, (uint64_t)*this, v1, 1);
    if (v42 && v39 != (int *)v41 && v39)
      MEMORY[0x20BD149A8]();
    if (!v25)
    {
LABEL_38:
      v26 = this[4];
      ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v26 + 1880));
      if (*((_BYTE *)v26 + TParam::getValidConfig((TSegmenter *)((char *)v26 + 1880), ActiveConfigHandle) + 2032))
      {
        if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
        {
          if (v46)
          {
            LODWORD(v39) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
            v28 = v43;
            --*((_QWORD *)&v44 + 1);
          }
          else
          {
            v28 = v43;
            if ((_QWORD)v44)
              v43[(_QWORD)v44 - 1] = 0;
          }
        }
        else
        {
          v28 = v43;
          v43[*((_QWORD *)&v44 + 1)] = 0;
        }
        if (!TNewWords::findAndAddWords((uint64_t)this, v28, (uint64_t)*this, v1, 0))
        {
          v29 = (uint64_t)this[3];
          if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
          {
            if (v46)
            {
              LODWORD(v39) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
              v30 = v43;
              --*((_QWORD *)&v44 + 1);
            }
            else
            {
              v30 = v43;
              if ((_QWORD)v44)
                v43[(_QWORD)v44 - 1] = 0;
            }
          }
          else
          {
            v30 = v43;
            v43[*((_QWORD *)&v44 + 1)] = 0;
          }
          if (!TLexicon::checkName(v29, v30, 0, 0xFFFFFFFFFFFFFFFFLL))
          {
            v31 = TGraph::addVertex(this[1], v1);
            v32 = (uint64_t)this[3];
            if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
            {
              if (v46)
              {
                LODWORD(v39) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
                v33 = v43;
                --*((_QWORD *)&v44 + 1);
              }
              else
              {
                v33 = v43;
                if ((_QWORD)v44)
                  v43[(_QWORD)v44 - 1] = 0;
              }
            }
            else
            {
              v33 = v43;
              v43[*((_QWORD *)&v44 + 1)] = 0;
            }
            v34 = TLexicon::addTempWord(v32, v33, 0, 0, 0);
            v35 = *this;
            v36 = this[1];
            LODWORD(v39) = 4;
            v40 = (unint64_t)v34;
            v41[0] = 0;
            TGraph::addEdge(v36, (uint64_t)v35, v31, (uint64_t)&v39);
          }
        }
      }
    }
    this[5] = (TSegmenter *)v1;
  }
  if (v46)
    goto LABEL_62;
  return v19;
}

void sub_2098D7674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x20BD149A8](v11, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x428]) && a11 != v13 && a11)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x848]))
  {
    if (STACK[0x430] != v12 && STACK[0x430] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addAbbreviationWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  uint64_t result;
  int **v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  char *v11;
  uint64_t OutEdge;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t Segment;
  int v27;
  int v28;
  uint64_t GlobalLocaleInfo;
  BOOL v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE v37[1024];
  char v38;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1880);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  result = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(_QWORD *)this + 16));
  if (!result)
    return result;
  v5 = (int **)result;
  v6 = *(char **)(result + 8);
  v7 = (unint64_t)&v6[-*(_QWORD *)(*(_QWORD *)this + 16)];
  v8 = *(_DWORD *)(result + 24) == 1 && v7 >= 2;
  if (!v8 || v7 > 5)
    return 0;
  result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v6);
  if (!result)
    return result;
  v10 = result;
  if (wcscmp(*(const __int32 **)result, (const __int32 *)"."))
    return 0;
  v11 = *(char **)(v10 + 8);
  if (!*v11)
    return 0;
  OutEdge = TVertex::getOutEdge(*(_QWORD *)this);
  if (OutEdge)
  {
    v13 = OutEdge;
    if ((*(_BYTE *)(OutEdge + 64) & 0xC0) == 0)
      return 0;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        break;
      if (!*(_BYTE *)(v13 + 32))
      {
        result = 0;
        if ((*(_BYTE *)(v13 + 64) & 0xC0) == 0)
          return result;
      }
    }
  }
  if (!memchr(";:,!?", *v11, 6uLL))
  {
    result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v11);
    if (!result)
      return result;
    Segment = result;
    if (*(_DWORD *)(result + 24))
      return 0;
    while (1)
    {
      v27 = *(_DWORD *)(Segment + 24);
      v28 = **(_DWORD **)Segment;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)result);
      if (v27)
        break;
      result = 0;
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160)
          return result;
      }
      else
      {
        v30 = v28 == 8203 || v28 == 65279;
        if (!v30 && v28 != 12288)
          return result;
      }
      Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(Segment + 8));
      result = 0;
      if (!Segment)
        return result;
    }
    if ((TLocaleInfo::isUpper(GlobalLocaleInfo, v28) & 1) != 0)
      return 0;
  }
  v35 = v37;
  v36 = xmmword_209A57DD0;
  v38 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v35, *v5);
  v14 = 0;
  v15 = *(int **)v10;
  while (v15[v14++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v15, v14 - 1);
  v17 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
  if (!TNewWords::findAndAddWords((uint64_t)this, v17, *(_QWORD *)this, *(char **)(v10 + 8), 0))
  {
    v18 = *((_QWORD *)this + 3);
    v19 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
    if (!TLexicon::checkName(v18, v19, 0, 0xFFFFFFFFFFFFFFFFLL))
    {
      v20 = TGraph::addVertex(*((TGraph **)this + 1), *(char **)(v10 + 8));
      v21 = *((_QWORD *)this + 3);
      v22 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
      v23 = TLexicon::addTempWord(v21, v22, 0, 0, 0);
      v24 = *(_QWORD *)this;
      v25 = (_QWORD *)*((_QWORD *)this + 1);
      v31 = 4;
      v32 = v23;
      v33 = 0;
      v34 = 0;
      TGraph::addEdge(v25, v24, v20, (uint64_t)&v31);
    }
  }
  *((_QWORD *)this + 5) = *(_QWORD *)(v10 + 8);
  if (v38 && v35 != v37 && v35)
    MEMORY[0x20BD149A8]();
  return 1;
}

void sub_2098D7A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addWords(uint64_t this, TVertex *a2, TGraph *a3, TSegmenter *a4, TLexicon *a5)
{
  TSegmenter **v5;

  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a4;
  *(_QWORD *)(this + 24) = a5;
  if (*((_QWORD *)a2 + 2) >= *(_QWORD *)(this + 40))
  {
    v5 = (TSegmenter **)this;
    this = TNewWords::addAlphanumWord((TNewWords *)this);
    if ((this & 1) == 0)
    {
      this = TNewWords::addHyphenatedWord(v5);
      if ((this & 1) == 0)
      {
        this = TNewWords::addContractionWord((TNewWords *)v5);
        if ((this & 1) == 0)
        {
          this = TNewWords::addAcronymWord(v5);
          if ((this & 1) == 0)
            return TNewWords::addAbbreviationWord((TNewWords *)v5);
        }
      }
    }
  }
  return this;
}

void MrecInitModule_virtmap_fst(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugVirtMapShowContent)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugVirtMapShowContent", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugVirtMapShowContent = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugVirtMapShowContent);
  }
  if (!gParDebugVirtMapShowStats)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugVirtMapShowStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugVirtMapShowStats = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugVirtMapShowStats);
  }
}

void VirtMap::printSize(VirtMap *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t fixed;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  int v75;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 122, (DgnString *)&v74);
  if (v75)
    v16 = v74;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  v73 = a6;
  DgnString::~DgnString((DgnString *)&v74);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  fixed = sizeObject<DgnPrimFixArray<unsigned int>>((uint64_t)this, 0);
  v22 = sizeObject<DgnPrimFixArray<unsigned int>>((uint64_t)this, 1);
  v74 = 0;
  v75 = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 123, (DgnString *)&v74);
  if (v75)
    v27 = v74;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, fixed, v22, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += fixed;
  *a5 += v22;
  v28 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 16;
  v29 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 3;
  v30 = *((unsigned int *)this + 6);
  v31 = (((*((_DWORD *)this + 7) - v30) + v30) << v29) + v28;
  v32 = (v30 << v29) + v28;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 124, (DgnString *)&v74);
  if (v75)
    v37 = v74;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, v31, v32, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v31;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 12;
  else
    v38 = 16;
  v39 = *((unsigned int *)this + 10);
  v40 = *((_DWORD *)this + 11);
  if (v40 >= v39)
  {
    v41 = 0;
    if ((int)v39 > 0)
      v38 += 4 * (v39 - 1) + 4;
    v42 = v38 + 4 * (v40 - v39);
  }
  else
  {
    v41 = 4 * v39;
    v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 125, (DgnString *)&v74);
  if (v75)
    v47 = v74;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v42;
  *a5 += v38;
  *v73 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 126, (DgnString *)&v74);
  if (v75)
    v52 = v74;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 127, (DgnString *)&v74);
  if (v75)
    v57 = v74;
  else
    v57 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v57, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 128, (DgnString *)&v74);
  if (v75)
    v62 = v74;
  else
    v62 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v62, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 138, (DgnString *)&v74);
  if (v75)
    v67 = v74;
  else
    v67 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v67, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v74);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 139, (DgnString *)&v74);
  if (v75)
    v72 = v74;
  else
    v72 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, a3, &byte_209A88803, (35 - a3), (35 - a3), v72, *a4, *a5, *v73);
  DgnString::~DgnString((DgnString *)&v74);
}

void sub_2098D80B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimFixArray<unsigned int>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v2 = 0;
  v9 = 0;
  v10 = 0;
  v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  if (a2 != 3)
  {
    v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        v5 = v4 + 1;
        do
        {
          v6 = *(unsigned int *)(*(_QWORD *)a1 + 16 * (v5 - 2) + 8);
          if ((int)v6 <= 0)
            v7 = 0;
          else
            v7 = 4 * v6;
          v2 += v3 + v7;
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v9);
  return v2;
}

void VirtMap::VirtMap(VirtMap *this)
{
  *(_OWORD *)((char *)this + 45) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

uint64_t VirtMap::setEmpty(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 40);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 4 * v1;
    do
    {
      *(_QWORD *)(*(_QWORD *)(this + 16) + 8 * *(unsigned int *)(*(_QWORD *)(this + 32) + v2)) = 0;
      v2 += 4;
    }
    while (v3 != v2);
  }
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void VirtMap::~VirtMap(VirtMap *this)
{
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);
  DgnArray<DgnVector>::releaseAll((uint64_t)this);
}

void MrecInitModule_pel_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  if (!gParDebugShowPelInfoOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPelInfoOnLoad", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowPelInfoOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelInfoOnLoad);
  }
  if (!gParDebugAcousticMicPacking)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugAcousticMicPacking", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugAcousticMicPacking = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticMicPacking);
  }
  if (!gParDebugShowShortListFrameClassification)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowShortListFrameClassification", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowShortListFrameClassification = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListFrameClassification);
  }
  if (!gParDiagnosticPelHierarchyCreationUseReference)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticPelHierarchyCreationUseReference", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDiagnosticPelHierarchyCreationUseReference = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelHierarchyCreationUseReference);
  }
  if (!gParDebugShowShortListSetId)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugShowShortListSetId", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugShowShortListSetId = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListSetId);
  }
  if (!gParDiagnosticPelHierarchyUpdate)
  {
    v10 = MemChunkAlloc(0x38uLL, 0);
    v14 = 0x200000000;
    v11 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v10, (uint64_t)"DiagnosticPelHierarchyUpdate", (uint64_t)byte_209A76570, (uint64_t)byte_209A76570, 0, &v14, 0);
    *v11 = &unk_24C214A58;
    gParDiagnosticPelHierarchyUpdate = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelHierarchyUpdate);
  }
  if (!gParDebugExciseUnneededPelsGenonesComps)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugExciseUnneededPelsGenonesComps", byte_209A76570, byte_209A76570, 0, 0, 0);
    *v13 = &unk_24C214CE8;
    gParDebugExciseUnneededPelsGenonesComps = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugExciseUnneededPelsGenonesComps);
  }
}

uint64_t sizeObject<FrameDecisionTreeHyperplane>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  v9[0] = 0;
  v9[1] = 0;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
      goto LABEL_11;
    }
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      v2 = v3;
      if (a2)
        goto LABEL_11;
    }
    else
    {
      v7 = v6 + 1;
      v2 = v3;
      do
        v2 += sizeObject<unsigned int>(*(_QWORD *)a1 + 24 * (v7-- - 2) + 8, a2) + 4;
      while (v7 > 1);
      if (a2)
        goto LABEL_11;
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_2098D863C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t FrameDecisionTree::classifyFrame(unsigned __int16 **a1, unsigned __int8 **a2)
{
  _WORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int16 *v7;
  int v8;
  int *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;

  v2 = *a1;
  v3 = **a1;
  if (**a1)
  {
    v4 = 0;
    v5 = *((unsigned __int16 *)a1 + 16);
    v6 = *a2;
    v7 = a1[2];
    do
    {
      v8 = 0;
      if ((_DWORD)v5)
      {
        v9 = *(int **)&v7[12 * (unsigned __int16)v2[3 * v4 + 2] + 4];
        v10 = v5;
        v11 = v6;
        do
        {
          v13 = *v11++;
          v12 = v13;
          v14 = *v9++;
          v8 += v14 * v12;
          --v10;
        }
        while (v10);
      }
      if (*(_DWORD *)&v7[12 * (unsigned __int16)v2[3 * v4 + 2]] + v8 >= 0)
        v3 = (unsigned __int16)v2[3 * v4 + 1];
      v4 = v3;
      v3 = (unsigned __int16)v2[3 * v3];
    }
    while (v3);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  return (unsigned __int16)v2[3 * v4 + 2];
}

uint64_t FrameDecisionTree::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t i;
  unsigned __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t j;
  unsigned __int16 v15;
  unsigned __int16 v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;

  v19 = *(_DWORD *)(a1 + 8);
  writeObject(a2, &v19, a3);
  v18 = *(_DWORD *)(a1 + 24);
  writeObject(a2, &v18, a3);
  result = writeObject(a2, (unsigned __int16 *)(a1 + 32), a3);
  if (v18)
  {
    v7 = 0;
    for (i = 0; i < v18; ++i)
    {
      v17 = 0;
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v7);
      result = writeObject(a2, &v17, a3);
      v9 = v18;
      v7 += 24;
    }
    if (v18)
    {
      v10 = 0;
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 32);
      do
      {
        if ((_DWORD)v11)
        {
          v12 = 0;
          do
          {
            v17 = 0;
            v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v10 + 8) + 4 * v12);
            result = writeObject(a2, &v17, a3);
            ++v12;
            v11 = *(unsigned __int16 *)(a1 + 32);
          }
          while (v12 < v11);
          v9 = v18;
        }
        ++v10;
      }
      while (v10 < v9);
    }
  }
  if (v19)
  {
    v13 = 0;
    for (j = 0; j < v19; ++j)
    {
      LOWORD(v17) = 0;
      LOWORD(v17) = *(_WORD *)(*(_QWORD *)a1 + v13);
      writeObject(a2, (unsigned __int16 *)&v17, a3);
      v16 = 0;
      v16 = *(_WORD *)(*(_QWORD *)a1 + v13 + 2);
      writeObject(a2, &v16, a3);
      v15 = 0;
      v15 = *(_WORD *)(*(_QWORD *)a1 + v13 + 4);
      result = writeObject(a2, &v15, a3);
      v13 += 6;
    }
  }
  return result;
}

void PackingPars::printSize(PackingPars *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  PackingPars *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  int v82;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 852, (DgnString *)&v81);
  if (v82)
    v16 = v81;
  else
    v16 = byte_209A76570;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_209A76570, a3, byte_209A76570, v16);
  DgnString::~DgnString((DgnString *)&v81);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_209A76570);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 853, (DgnString *)&v81);
  if (v82)
    v27 = v81;
  else
    v27 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v27, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 854, (DgnString *)&v81);
  if (v82)
    v32 = v81;
  else
    v32 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v32, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 855, (DgnString *)&v81);
  if (v82)
    v37 = v81;
  else
    v37 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v37, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 856, (DgnString *)&v81);
  if (v82)
    v42 = v81;
  else
    v42 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v42, 8, 8, 0);
  v80 = a3;
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 857, (DgnString *)&v81);
  if (v82)
    v47 = v81;
  else
    v47 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 12;
  else
    v48 = 16;
  v49 = *((unsigned int *)this + 12);
  v50 = *((_DWORD *)this + 13);
  v51 = this;
  if (v50 >= v49)
  {
    v52 = 0;
    if ((int)v49 > 0)
      v48 = (v48 | 2) + 2 * (v49 - 1);
    v53 = v48 + 2 * (v50 - v49);
  }
  else
  {
    v52 = 2 * v49;
    v53 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 858, (DgnString *)&v81);
  if (v82)
    v58 = v81;
  else
    v58 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, byte_209A76570, v22, v22, v58, v53, v48, v52);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v53;
  *a5 += v48;
  *a6 += v52;
  v59 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 12;
  v60 = *((unsigned int *)v51 + 16);
  if ((int)v60 <= 0)
    v61 = 0;
  else
    v61 = 8 * v60;
  v62 = v61 + v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 859, (DgnString *)&v81);
  if (v82)
    v67 = v81;
  else
    v67 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, byte_209A76570, v22, v22, v67, v62, v62, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v62;
  *a5 += v62;
  v68 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v68 = 12;
  v69 = v68 + (*((_DWORD *)v51 + 20) & ~(*((int *)v51 + 20) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 860, (DgnString *)&v81);
  if (v82)
    v74 = v81;
  else
    v74 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, byte_209A76570, v22, v22, v74, v69, v69, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v69;
  *a5 += v69;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 861, (DgnString *)&v81);
  if (v82)
    v79 = v81;
  else
    v79 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v80, byte_209A76570, (35 - v80), (35 - v80), v79, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v81);
}

void sub_2098D8DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void PelMgr::~PelMgr(PelMgr *this)
{
  DgnDelete<PackingPars>(*((_QWORD *)this + 61));
  *((_QWORD *)this + 61) = 0;
  *(_QWORD *)this = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 720);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 704);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 688);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 672);
  DgnArray<AlignedArray<unsigned char>>::releaseAll((uint64_t)this + 656);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 640);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 624);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 600);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 584);
  BitArray::~BitArray((PelMgr *)((char *)this + 568));
  FrameDecisionTree::~FrameDecisionTree((PelMgr *)((char *)this + 528));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 432);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 416);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 320);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 304);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnArray<AlignedArray<unsigned char>>::releaseAll((uint64_t)this + 200);
  DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll((uint64_t)this + 184);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
}

uint64_t DgnDelete<PackingPars>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 72);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(v1 + 7));
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 5));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void PelMgr::printSize(PelMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  PelMgr *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  PackingPars *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  unint64_t *v432;
  uint64_t v433;
  unsigned int *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 955, (DgnString *)&v437);
  if ((_DWORD)v438)
    v16 = (char *)v437;
  else
    v16 = byte_209A76570;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_209A76570, a3, byte_209A76570, v16);
  DgnString::~DgnString((DgnString *)&v437);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_209A76570);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 956, (DgnString *)&v437);
  if ((_DWORD)v438)
    v28 = (char *)v437;
  else
    v28 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 958, (DgnString *)&v437);
  if ((_DWORD)v438)
    v33 = (char *)v437;
  else
    v33 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 960, (DgnString *)&v437);
  if ((_DWORD)v438)
    v38 = (char *)v437;
  else
    v38 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v38, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 962, (DgnString *)&v437);
  if ((_DWORD)v438)
    v43 = (char *)v437;
  else
    v43 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v43, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 963, (DgnString *)&v437);
  if ((_DWORD)v438)
    v48 = (char *)v437;
  else
    v48 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v48, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 964, (DgnString *)&v437);
  if ((_DWORD)v438)
    v53 = (char *)v437;
  else
    v53 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v53, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 965, (DgnString *)&v437);
  if ((_DWORD)v438)
    v58 = (char *)v437;
  else
    v58 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v58, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 966, (DgnString *)&v437);
  if ((_DWORD)v438)
    v63 = (char *)v437;
  else
    v63 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 967, (DgnString *)&v437);
  if ((_DWORD)v438)
    v68 = (char *)v437;
  else
    v68 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v68, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 968, (DgnString *)&v437);
  if ((_DWORD)v438)
    v73 = (char *)v437;
  else
    v73 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 970, (DgnString *)&v437);
  if ((_DWORD)v438)
    v78 = (char *)v437;
  else
    v78 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v78, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 972, (DgnString *)&v437);
  if ((_DWORD)v438)
    v83 = (char *)v437;
  else
    v83 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v83, 4, 4, 0);
  v433 = a3;
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 974, (DgnString *)&v437);
  if ((_DWORD)v438)
    v88 = (char *)v437;
  else
    v88 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), byte_209A76570, (34 - a3), (34 - a3), v88, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  v89 = this;
  v90 = (char *)this + 160;
  v91 = sizeObject((uint64_t)this + 160, 0);
  v92 = sizeObject((uint64_t)this + 160, 1);
  v93 = sizeObject((uint64_t)v90, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 976, (DgnString *)&v437);
  if ((_DWORD)v438)
    v98 = (char *)v437;
  else
    v98 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v22, byte_209A76570, v23, v23, v98, v91, v92, v93);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v91;
  *a5 += v92;
  *a6 += v93;
  v99 = sizeObject((uint64_t)v89 + 164, 0);
  v100 = sizeObject((uint64_t)v89 + 164, 1);
  v101 = sizeObject((uint64_t)v89 + 164, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 978, (DgnString *)&v437);
  if ((_DWORD)v438)
    v106 = (char *)v437;
  else
    v106 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v22, byte_209A76570, v23, v23, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  v107 = sizeObject<BinaryIntScale>((uint64_t)v89 + 168, 0);
  v108 = sizeObject<BinaryIntScale>((uint64_t)v89 + 168, 1);
  LODWORD(v437) = 0;
  sizeObject((uint64_t)&v437, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 980, (DgnString *)&v437);
  if ((_DWORD)v438)
    v113 = (char *)v437;
  else
    v113 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v22, byte_209A76570, v23, v23, v113, v107, v108, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v107;
  *a5 += v108;
  v114 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 0);
  v115 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 1);
  v116 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 982, (DgnString *)&v437);
  if ((_DWORD)v438)
    v121 = (char *)v437;
  else
    v121 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v22, byte_209A76570, v23, v23, v121, v114, v115, v116);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v114;
  *a5 += v115;
  *a6 += v116;
  v122 = sizeObject<AlignedArray<short>>((uint64_t)v89 + 200, 0);
  v123 = sizeObject<AlignedArray<short>>((uint64_t)v89 + 200, 1);
  v437 = 0;
  v438 = 0;
  LODWORD(v439) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 984, (DgnString *)&v437);
  if ((_DWORD)v438)
    v128 = (char *)v437;
  else
    v128 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v22, byte_209A76570, v23, v23, v128, v122, v123, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v122;
  *a5 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 12;
  else
    v129 = 16;
  v130 = *((_DWORD *)v89 + 56);
  v131 = *((_DWORD *)v89 + 57);
  v132 = v131 >= v130;
  v133 = v131 - v130;
  v434 = (unsigned int *)v89;
  if (v132)
  {
    v135 = v130 & ~(v130 >> 31);
    v130 = 0;
    v134 = v129 + v135;
    v129 += v135 + v133;
  }
  else
  {
    v134 = v129;
  }
  v136 = v130;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 986, (DgnString *)&v437);
  if ((_DWORD)v438)
    v141 = (char *)v437;
  else
    v141 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v22, byte_209A76570, v23, v23, v141, v129, v134, v136);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v129;
  *a5 += v134;
  *a6 += v136;
  v142 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v142 = 12;
  v143 = *((_DWORD *)v89 + 60);
  v144 = *((_DWORD *)v89 + 61);
  v145 = v144 - v143;
  if (v144 >= v143)
  {
    v147 = v143 & ~(v143 >> 31);
    v143 = 0;
    v146 = v142 + v147;
    v142 = v146 + v145;
  }
  else
  {
    v146 = v142;
  }
  v148 = v142 + 4;
  v149 = v146 + 4;
  v150 = v143;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 994, (DgnString *)&v437);
  if ((_DWORD)v438)
    v155 = (char *)v437;
  else
    v155 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v22, byte_209A76570, v23, v23, v155, v148, v149, v150);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v148;
  *a5 += v149;
  *a6 += v150;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v156 = 12;
  else
    v156 = 16;
  v157 = *((unsigned int *)v89 + 66);
  v158 = *((_DWORD *)v89 + 67);
  if (v158 >= v157)
  {
    v159 = 0;
    if ((int)v157 > 0)
      v156 += 4 * (v157 - 1) + 4;
    v160 = v156 + 4 * (v158 - v157);
  }
  else
  {
    v159 = 4 * v157;
    v160 = v156;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 996, (DgnString *)&v437);
  if ((_DWORD)v438)
    v165 = (char *)v437;
  else
    v165 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v161, v162, v163, v164, v22, byte_209A76570, v23, v23, v165, v160, v156, v159);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v160;
  *a5 += v156;
  *a6 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v166 = 12;
  else
    v166 = 16;
  v167 = *((unsigned int *)v89 + 70);
  v168 = *((_DWORD *)v89 + 71);
  if (v168 >= v167)
  {
    v169 = 0;
    if ((int)v167 > 0)
      v166 += 4 * (v167 - 1) + 4;
    v170 = v166 + 4 * (v168 - v167);
  }
  else
  {
    v169 = 4 * v167;
    v170 = v166;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 998, (DgnString *)&v437);
  if ((_DWORD)v438)
    v175 = (char *)v437;
  else
    v175 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v22, byte_209A76570, v23, v23, v175, v170, v166, v169);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v170;
  *a5 += v166;
  *a6 += v169;
  v176 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v176 = 12;
  v177 = *((unsigned int *)v89 + 74);
  if ((int)v177 <= 0)
    v178 = 0;
  else
    v178 = 2 * v177;
  v179 = v178 + v176;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 999, (DgnString *)&v437);
  if ((_DWORD)v438)
    v184 = (char *)v437;
  else
    v184 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v22, byte_209A76570, v23, v23, v184, v179, v179, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v179;
  *a5 += v179;
  v185 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v185 = 12;
  v186 = *((unsigned int *)v89 + 78);
  if ((int)v186 <= 0)
    v187 = 0;
  else
    v187 = 2 * v186;
  v188 = v187 + v185;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1000, (DgnString *)&v437);
  if ((_DWORD)v438)
    v193 = (char *)v437;
  else
    v193 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v189, v190, v191, v192, v22, byte_209A76570, v23, v23, v193, v188, v188, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v188;
  *a5 += v188;
  v194 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v194 = 12;
  v195 = *((unsigned int *)v89 + 82);
  if ((int)v195 <= 0)
    v196 = 0;
  else
    v196 = 2 * v195;
  v197 = v196 + v194;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1002, (DgnString *)&v437);
  if ((_DWORD)v438)
    v202 = (char *)v437;
  else
    v202 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v22, byte_209A76570, v23, v23, v202, v197, v197, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v197;
  *a5 += v197;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1004, (DgnString *)&v437);
  if ((_DWORD)v438)
    v207 = (char *)v437;
  else
    v207 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v22, byte_209A76570, v23, v23, v207, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v208 = 12;
  else
    v208 = 16;
  v209 = *((_DWORD *)v89 + 88);
  v210 = *((_DWORD *)v89 + 89);
  v132 = v210 >= v209;
  v211 = v210 - v209;
  if (v132)
  {
    v213 = v209 & ~(v209 >> 31);
    v209 = 0;
    v212 = v208 + v213;
    v208 += v213 + v211;
  }
  else
  {
    v212 = v208;
  }
  v214 = v209;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1005, (DgnString *)&v437);
  if ((_DWORD)v438)
    v219 = (char *)v437;
  else
    v219 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v22, byte_209A76570, v23, v23, v219, v208, v212, v214);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v208;
  *a5 += v212;
  *a6 += v214;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v220 = 12;
  else
    v220 = 16;
  v221 = *((unsigned int *)v89 + 92);
  v222 = *((_DWORD *)v89 + 93);
  if (v222 >= v221)
  {
    v223 = 0;
    if ((int)v221 > 0)
      v220 += 4 * (v221 - 1) + 4;
    v224 = v220 + 4 * (v222 - v221);
  }
  else
  {
    v223 = 4 * v221;
    v224 = v220;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1006, (DgnString *)&v437);
  if ((_DWORD)v438)
    v229 = (char *)v437;
  else
    v229 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v225, v226, v227, v228, v22, byte_209A76570, v23, v23, v229, v224, v220, v223);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v224;
  *a5 += v220;
  *a6 += v223;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v230 = 12;
  else
    v230 = 16;
  v231 = *((unsigned int *)v89 + 96);
  v232 = *((_DWORD *)v89 + 97);
  if (v232 >= v231)
  {
    v233 = 0;
    if ((int)v231 > 0)
      v230 = (v230 | 2) + 2 * (v231 - 1);
    v234 = v230 + 2 * (v232 - v231);
  }
  else
  {
    v233 = 2 * v231;
    v234 = v230;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1008, (DgnString *)&v437);
  if ((_DWORD)v438)
    v239 = (char *)v437;
  else
    v239 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v235, v236, v237, v238, v22, byte_209A76570, v23, v23, v239, v234, v230, v233);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v234;
  *a5 += v230;
  *a6 += v233;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1010, (DgnString *)&v437);
  if ((_DWORD)v438)
    v244 = (char *)v437;
  else
    v244 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v22, byte_209A76570, v23, v23, v244, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v437);
  ++*a4;
  ++*a5;
  v245 = sizeObject<DgnString>((uint64_t)v89 + 400, 0);
  v246 = sizeObject<DgnString>((uint64_t)v89 + 400, 1);
  v247 = sizeObject<DgnString>((uint64_t)v89 + 400, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1012, (DgnString *)&v437);
  if ((_DWORD)v438)
    v252 = (char *)v437;
  else
    v252 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v22, byte_209A76570, v23, v23, v252, v245, v246, v247);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v245;
  *a5 += v246;
  *a6 += v247;
  v253 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v253 = 12;
  v254 = *((unsigned int *)v89 + 106);
  if ((int)v254 <= 0)
    v255 = 0;
  else
    v255 = 4 * v254;
  v256 = v255 + v253;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1014, (DgnString *)&v437);
  if ((_DWORD)v438)
    v261 = (char *)v437;
  else
    v261 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, byte_209A76570, v23, v23, v261, v256, v256, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v256;
  *a5 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v262 = 12;
  else
    v262 = 16;
  v263 = *((unsigned int *)v89 + 110);
  v264 = *((_DWORD *)v89 + 111);
  if (v264 >= v263)
  {
    v265 = 0;
    if ((int)v263 > 0)
      v262 = (v262 | 2) + 2 * (v263 - 1);
    v266 = v262 + 2 * (v264 - v263);
  }
  else
  {
    v265 = 2 * v263;
    v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1016, (DgnString *)&v437);
  if ((_DWORD)v438)
    v271 = (char *)v437;
  else
    v271 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v22, byte_209A76570, v23, v23, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1018, (DgnString *)&v437);
  if ((_DWORD)v438)
    v276 = (char *)v437;
  else
    v276 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v272, v273, v274, v275, v22, byte_209A76570, v23, v23, v276, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v277 = 12;
  else
    v277 = 16;
  v278 = *((unsigned int *)v89 + 116);
  v279 = *((_DWORD *)v89 + 117);
  if (v279 >= v278)
  {
    v280 = 0;
    if ((int)v278 > 0)
      v277 += 4 * (v278 - 1) + 4;
    v281 = v277 + 4 * (v279 - v278);
  }
  else
  {
    v280 = 4 * v278;
    v281 = v277;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1020, (DgnString *)&v437);
  if ((_DWORD)v438)
    v286 = (char *)v437;
  else
    v286 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v22, byte_209A76570, v23, v23, v286, v281, v277, v280);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v281;
  *a5 += v277;
  *a6 += v280;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v287 = 12;
  else
    v287 = 16;
  v288 = *((unsigned int *)v89 + 120);
  v289 = *((_DWORD *)v89 + 121);
  if (v289 >= v288)
  {
    v290 = 0;
    if ((int)v288 > 0)
      v287 += 8 * (v288 - 1) + 8;
    v291 = v287 + 8 * (v289 - v288);
  }
  else
  {
    v290 = 8 * v288;
    v291 = v287;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1022, (DgnString *)&v437);
  if ((_DWORD)v438)
    v296 = (char *)v437;
  else
    v296 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v22, byte_209A76570, v23, v23, v296, v291, v287, v290);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v291;
  *a5 += v287;
  *a6 += v290;
  v297 = (PackingPars *)*((_QWORD *)v89 + 61);
  if (v297)
  {
    v437 = 0;
    v435 = 0;
    v436 = 0;
    PackingPars::printSize(v297, 0xFFFFFFFFLL, v22, &v437, &v436, &v435);
    *a4 += v437;
    *a5 += v436;
    *a6 += v435;
  }
  v432 = a6;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v298 = 4;
  else
    v298 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1024, (DgnString *)&v437);
  if ((_DWORD)v438)
    v303 = (char *)v437;
  else
    v303 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v22, byte_209A76570, v23, v23, v303, v298, v298, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v298;
  *a5 += v298;
  v304 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v305 = 12;
  else
    v305 = 16;
  v306 = v434[134];
  if ((int)v306 <= 0)
    v307 = 0;
  else
    v307 = 6 * v306;
  v308 = v434[135] - v306;
  v309 = sizeObject<FrameDecisionTreeHyperplane>((uint64_t)(v434 + 136), 0) + v307 + v305 + 6 * v308;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v304 = 12;
  v310 = v434[134];
  if ((int)v310 <= 0)
    v311 = 0;
  else
    v311 = 6 * v310;
  v312 = sizeObject<FrameDecisionTreeHyperplane>((uint64_t)(v434 + 136), 1) + v311 + v304;
  v438 = 0;
  v439 = 0;
  LODWORD(v437) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v438);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1026, (DgnString *)&v437);
  if ((_DWORD)v438)
    v317 = (char *)v437;
  else
    v317 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, byte_209A76570, v23, v23, v317, v309, v312, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v309;
  *a5 += v312;
  v318 = BitArray::sizeObject((uint64_t)(v434 + 142), 0);
  v319 = BitArray::sizeObject((uint64_t)(v434 + 142), 1);
  v320 = BitArray::sizeObject((uint64_t)(v434 + 142), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1028, (DgnString *)&v437);
  if ((_DWORD)v438)
    v325 = (char *)v437;
  else
    v325 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v321, v322, v323, v324, v22, byte_209A76570, v23, v23, v325, v318, v319, v320);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v318;
  *a5 += v319;
  *v432 += v320;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v326 = 12;
  else
    v326 = 16;
  v327 = v434[148];
  v328 = v434[149];
  if (v328 >= v327)
  {
    v329 = 0;
    if ((int)v327 > 0)
      v326 += 4 * (v327 - 1) + 4;
    v330 = v326 + 4 * (v328 - v327);
  }
  else
  {
    v329 = 4 * v327;
    v330 = v326;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1031, (DgnString *)&v437);
  if ((_DWORD)v438)
    v335 = (char *)v437;
  else
    v335 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v331, v332, v333, v334, v22, byte_209A76570, v23, v23, v335, v330, v326, v329);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v330;
  *a5 += v326;
  *v432 += v329;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v336 = 12;
  else
    v336 = 16;
  v337 = v434[152];
  v338 = v434[153];
  if (v338 >= v337)
  {
    v339 = 0;
    if ((int)v337 > 0)
      v336 = (v336 | 2) + 2 * (v337 - 1);
    v340 = v336 + 2 * (v338 - v337);
  }
  else
  {
    v339 = 2 * v337;
    v340 = v336;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1034, (DgnString *)&v437);
  if ((_DWORD)v438)
    v345 = (char *)v437;
  else
    v345 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v341, v342, v343, v344, v22, byte_209A76570, v23, v23, v345, v340, v336, v339);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v340;
  *a5 += v336;
  *v432 += v339;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1035, (DgnString *)&v437);
  if ((_DWORD)v438)
    v350 = (char *)v437;
  else
    v350 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v346, v347, v348, v349, v22, byte_209A76570, v23, v23, v350, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 8;
  *a5 += 8;
  v351 = CombineTable::sizeObject((uint64_t)(v434 + 126), 0);
  v352 = CombineTable::sizeObject((uint64_t)(v434 + 126), 1);
  v353 = CombineTable::sizeObject((uint64_t)(v434 + 126), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1037, (DgnString *)&v437);
  if ((_DWORD)v438)
    v358 = (char *)v437;
  else
    v358 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v22, byte_209A76570, v23, v23, v358, v351, v352, v353);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v351;
  *a5 += v352;
  *v432 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1039, (DgnString *)&v437);
  if ((_DWORD)v438)
    v363 = (char *)v437;
  else
    v363 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v359, v360, v361, v362, v22, byte_209A76570, v23, v23, v363, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v437);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1040, (DgnString *)&v437);
  if ((_DWORD)v438)
    v368 = (char *)v437;
  else
    v368 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v22, byte_209A76570, v23, v23, v368, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  v369 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 156), 0);
  v370 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 156), 1);
  v437 = 0;
  v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1041, (DgnString *)&v437);
  if ((_DWORD)v438)
    v375 = (char *)v437;
  else
    v375 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v22, byte_209A76570, v23, v23, v375, v369, v370, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v369;
  *a5 += v370;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v376 = 12;
  else
    v376 = 16;
  v377 = v434[162];
  v378 = v434[163];
  if (v378 >= v377)
  {
    v379 = 0;
    if ((int)v377 > 0)
      v376 += 4 * (v377 - 1) + 4;
    v380 = v376 + 4 * (v378 - v377);
  }
  else
  {
    v379 = 4 * v377;
    v380 = v376;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1043, (DgnString *)&v437);
  if ((_DWORD)v438)
    v385 = (char *)v437;
  else
    v385 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v381, v382, v383, v384, v22, byte_209A76570, v23, v23, v385, v380, v376, v379);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v380;
  *a5 += v376;
  *v432 += v379;
  v386 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 172), 0);
  v387 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 172), 1);
  v437 = 0;
  v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1044, (DgnString *)&v437);
  if ((_DWORD)v438)
    v392 = (char *)v437;
  else
    v392 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v388, v389, v390, v391, v22, byte_209A76570, v23, v23, v392, v386, v387, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v386;
  *a5 += v387;
  v393 = sizeObject<AlignedArray<unsigned char>>((uint64_t)(v434 + 164), 0);
  v394 = sizeObject<AlignedArray<unsigned char>>((uint64_t)(v434 + 164), 1);
  v437 = 0;
  v438 = 0;
  LODWORD(v439) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1046, (DgnString *)&v437);
  if ((_DWORD)v438)
    v399 = (char *)v437;
  else
    v399 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v395, v396, v397, v398, v22, byte_209A76570, v23, v23, v399, v393, v394, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v393;
  *a5 += v394;
  v400 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 168), 0);
  v401 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 168), 1);
  v437 = 0;
  v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1047, (DgnString *)&v437);
  if ((_DWORD)v438)
    v406 = (char *)v437;
  else
    v406 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v22, byte_209A76570, v23, v23, v406, v400, v401, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v400;
  *a5 += v401;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1048, (DgnString *)&v437);
  if ((_DWORD)v438)
    v411 = (char *)v437;
  else
    v411 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v407, v408, v409, v410, v22, byte_209A76570, v23, v23, v411, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v412 = 12;
  else
    v412 = 16;
  v413 = v434[178];
  v414 = v434[179];
  if (v414 >= v413)
  {
    v415 = 0;
    if ((int)v413 > 0)
      v412 = (v412 | 2) + 2 * (v413 - 1);
    v416 = v412 + 2 * (v414 - v413);
  }
  else
  {
    v415 = 2 * v413;
    v416 = v412;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1050, (DgnString *)&v437);
  if ((_DWORD)v438)
    v421 = (char *)v437;
  else
    v421 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v417, v418, v419, v420, v22, byte_209A76570, v23, v23, v421, v416, v412, v415);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v416;
  *a5 += v412;
  *v432 += v415;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1052, (DgnString *)&v437);
  if ((_DWORD)v438)
    v426 = (char *)v437;
  else
    v426 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v422, v423, v424, v425, v22, byte_209A76570, v23, v23, v426, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1053, (DgnString *)&v437);
  if ((_DWORD)v438)
    v431 = (char *)v437;
  else
    v431 = byte_209A76570;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v427, v428, v429, v430, v433, byte_209A76570, (35 - v433), (35 - v433), v431, *a4, *a5, *v432);
  DgnString::~DgnString((DgnString *)&v437);
}

void sub_2098DAEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<BinaryIntScale>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v10;

  v10 = 0;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 4 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t sizeObject<AlignedArray<short>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  int v10;

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
      goto LABEL_11;
    }
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      v2 = v3;
      if (a2)
        goto LABEL_11;
    }
    else
    {
      v7 = v6 + 1;
      v2 = v3;
      do
        v2 += sizeObject<unsigned short>(*(_QWORD *)a1 + 24 * (v7-- - 2), a2) + 4;
      while (v7 > 1);
      if (a2)
        goto LABEL_11;
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_2098DB19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<AlignedArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  int v10;

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
      goto LABEL_11;
    }
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      v2 = v3;
      if (a2)
        goto LABEL_11;
    }
    else
    {
      v7 = v6 + 1;
      v2 = v3;
      do
        v2 += sizeObject<unsigned char>(*(_QWORD *)a1 + 24 * (v7-- - 2), a2) + 4;
      while (v7 > 1);
      if (a2)
        goto LABEL_11;
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_2098DB298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PelMgr::getModelData(PelMgr *this, unsigned int a2)
{
  return *((_QWORD *)this + 29) + *((unsigned int *)this + 62) + *(unsigned int *)(*((_QWORD *)this + 32) + 4 * a2);
}

int *readSharedObject<unsigned char>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;

  v19 = 0;
  result = (int *)readObject((uint64_t)a1, &v19, a3);
  v13 = v19;
  if (v19)
  {
    result = (int *)DgnSharedMemStream::readSharedBytes(a1, v19, v7, v8, v9, v10, v11, v12);
    v14 = result;
    v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(_QWORD *)a2 = v14;
    if (v13 + 3 >= 4)
    {
      v16 = 0;
      v17 = (v13 + 3) >> 2;
      do
      {
        v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      result = *(int **)a2;
      if (*(_QWORD *)a2)
        result = (int *)MemChunkFree(result, 0);
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

void PelMgr::packRawMixtureComponent(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, double a5)
{
  switch(*(_DWORD *)(result + 12))
  {
    case 0:
      PelMgr::packMulTableRawMixtureComponent(result, a2, a3, a4);
      break;
    case 1:
      PelMgr::packPackedIntRawMixtureComponent(result, a2, (int **)a3, (unsigned int **)a4);
      break;
    case 2:
      PelMgr::packFloatRawMixtureComponent(result, a2, a3, a4, a5);
      break;
    case 3:
      PelMgr::packQuantPerDimRawMixtureComponent(result, (_BYTE *)a2, (int **)a3, (int **)a4);
      break;
    default:
      return;
  }
}

uint64_t PelMgr::packRawMixtureComponent(uint64_t a1, float *a2, char a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  int v10;

  v10 = *(_DWORD *)(a1 + 12);
  if (v10 == 1)
    return PelMgr::packPackedIntRawMixtureComponent(a1, (uint64_t)a2, a3, (uint64_t *)a4, a5, a6);
  if (v10 == 2)
    return PelMgr::packFloatRawMixtureComponent(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

BOOL PelMgr::getComponentByIndex(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v6;
  uint64_t v7;

  v6 = *(_DWORD *)(a1 + 136);
  if (v6 > a2)
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 432) + 2 * a2);
    PelMgr::unpackRawMixtureComponent(a1, *(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v7)+ *(_DWORD *)(a1 + 148) * (a2 - *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v7)), a3, a4, a5);
  }
  return v6 > a2;
}

BOOL PelMgr::getComponentByIndex(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;

  v5 = *(_DWORD *)(a1 + 136);
  if (v5 > a2)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 432) + 2 * a2);
    PelMgr::unpackRawMixtureComponent(a1, (float *)(*(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v6)+ *(_DWORD *)(a1 + 148) * (a2 - *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v6))), a3, a4);
  }
  return v5 > a2;
}

void PelMgr::unpackRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  switch(*(_DWORD *)(result + 12))
  {
    case 0:
      PelMgr::unpackMulTableRawMixtureComponent(result, a2, a3, a4);
      break;
    case 1:
      PelMgr::unpackPackedIntRawMixtureComponent(result, a2, a3, a4);
      break;
    case 2:
      PelMgr::unpackFloatRawMixtureComponent(result, a2, a3, a4, a5);
      break;
    case 3:
      PelMgr::unpackQuantPerDimRawMixtureComponent(result, a2, a3, a4);
      break;
    default:
      return;
  }
}

unint64_t PelMgr::unpackRawMixtureComponent(unint64_t result, float *a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = *(_DWORD *)(result + 12);
  if (v4 == 1)
    return PelMgr::unpackPackedIntRawMixtureComponent(result, (unsigned __int8 *)a2, a3, a4);
  if (v4 == 2)
    return PelMgr::unpackFloatRawMixtureComponent(result, a2, a3, a4);
  return result;
}

void PelMgr::unpackGenoneComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  PelMgr::unpackRawMixtureComponent(a1, *(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3), a4, a5, a6);
}

unint64_t PelMgr::unpackGenoneComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  return PelMgr::unpackRawMixtureComponent(a1, (float *)(*(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3)), a4, a5);
}

void PelMgr::packGenoneComponent(uint64_t a1, unsigned int a2, int a3, _QWORD *a4, _QWORD *a5, double a6)
{
  PelMgr::packRawMixtureComponent(a1, *(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3), a4, a5, a6);
}

uint64_t PelMgr::packGenoneComponent(uint64_t a1, unsigned int a2, int a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  return PelMgr::packRawMixtureComponent(a1, (float *)(*(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3)), a3, a4, a5, a6, a7, a8, a9, a10);
}

void PelMgr::unpackPelMixtureComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  PelMgr::unpackRawMixtureComponent(a1, *(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ (*(_DWORD *)(a1 + 148) * a3)+ *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 288) + 2 * a2)), a4, a5, a6);
}

unint64_t PelMgr::unpackPelMixtureComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  return PelMgr::unpackRawMixtureComponent(a1, (float *)(*(_QWORD *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ (*(_DWORD *)(a1 + 148) * a3)+ *(unsigned int *)(*(_QWORD *)(a1 + 256)+ 4 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 288) + 2 * a2))), a4, a5);
}

void PelMgr::savePelMgrBinary(PelMgr *this, DFile *a2, DFileChecksums *a3, int a4, DgnSharedMemStream *a5)
{
  DgnStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t CurrentSubDirComponents;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  char *v21;
  char *v22;
  int *v23;
  int *v24;
  char *v25;
  int *v26;
  char *v27;
  int *v28;
  int v29;
  int v30;
  unsigned int v31;

  v8 = a5;
  if (a2)
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Au, a4, "MRMPB!? ", 24, 24);
  v31 = 0;
  writeObject((uint64_t)v8, (int *)this + 2, &v31);
  v9 = 1;
  if (*((_DWORD *)this + 4) == 1)
    v10 = 2;
  else
    v10 = 1;
  v30 = v10;
  writeObject((uint64_t)v8, &v30, &v31);
  v11 = *((int *)this + 3);
  if (v11 <= 3)
    v9 = dword_209A76640[v11];
  v29 = v9;
  writeObject((uint64_t)v8, &v29, &v31);
  writeObject((uint64_t)v8, (int *)this + 5, &v31);
  writeObject((uint64_t)v8, (int *)this + 32, &v31);
  v12 = (int *)((char *)this + 132);
  v15 = (char *)this + 272;
  v16 = (char *)this + 288;
  v17 = (char *)this + 344;
  v18 = (char *)this + 360;
  v19 = (char *)this + 376;
  v20 = (unsigned __int8 *)this + 392;
  v21 = (char *)this + 400;
  v22 = (char *)this + 416;
  v23 = (int *)((char *)this + 152);
  v24 = (int *)((char *)this + 160);
  v25 = (char *)this + 184;
  v26 = (int *)((char *)this + 164);
  v27 = (char *)this + 168;
  v28 = (int *)((char *)this + 156);
  if (a2)
  {
    writeObject((uint64_t)v8, v12, &v31);
    writeObject((uint64_t)v8, (int *)this + 34, &v31);
    writeObject((uint64_t)v8, (int *)this + 35, &v31);
    writeObject((uint64_t)v8, (int *)this + 36, &v31);
    writeObject((uint64_t)v8, (int *)this + 37, &v31);
    AlignedArray<unsigned char>::writeObject((uint64_t)this + 232, (uint64_t)v8, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 256, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v15, &v31);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)v16, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)v17, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v18, &v31);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)v19, &v31);
    writeObject((uint64_t)v8, v20, &v31);
    writeObject<DgnString>((uint64_t)v8, (uint64_t)v21, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v22, &v31);
    writeObject((uint64_t)v8, v23, &v31);
    writeObject((uint64_t)v8, v24, &v31);
    writeObject<DgnArray<DgnPrimArray<int>>>((uint64_t)v8, (uint64_t)v25, &v31);
    writeObject((uint64_t)v8, v26, &v31);
    writeObject<BinaryIntScale>((uint64_t)v8, (uint64_t)v27, &v31);
    writeObject((uint64_t)v8, v28, &v31);
    writeObject<AlignedArray<short>>((uint64_t)v8, (uint64_t)this + 200, &v31);
    FrameDecisionTree::writeObject((uint64_t)this + 528, (uint64_t)v8, &v31);
    writeObject((uint64_t)v8, (uint64_t)this + 568, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 584, &v31);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 600, &v31);
    writeObject((uint64_t)v8, (int *)this + 155, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 624, &v31);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 640, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 688, &v31);
    writeObject<AlignedArray<unsigned char>>((uint64_t)v8, (uint64_t)this + 656, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 672, &v31);
    writeObject((uint64_t)v8, (int *)this + 6, &v31);
    writeObject((uint64_t)v8, (int *)this + 7, &v31);
    writeObject((uint64_t)v8, (int *)this + 8, &v31);
    writeObject((uint64_t)v8, (int *)this + 9, &v31);
    writeObject((uint64_t)v8, (int *)this + 10, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 48, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 64, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 80, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 96, &v31);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 112, &v31);
    writeObjectChecksum((uint64_t)v8, (int *)&v31);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Au, v31);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
  else
  {
    writeObject((uint64_t)a5, v12, &v31);
    writeObject((uint64_t)a5, (int *)this + 34, &v31);
    writeObject((uint64_t)a5, (int *)this + 35, &v31);
    writeObject((uint64_t)a5, (int *)this + 36, &v31);
    writeObject((uint64_t)a5, (int *)this + 37, &v31);
    AlignedArray<unsigned char>::writeSharedObject((uint64_t)this + 232, a5, &v31);
    writeSharedObject<unsigned int>(a5, (uint64_t)this + 256, &v31);
    writeSharedObject<unsigned int>(a5, (uint64_t)v15, &v31);
    writeObject<unsigned short>((uint64_t)a5, (uint64_t)v16, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)v17, &v31);
    writeSharedObject<unsigned int>(a5, (uint64_t)v18, &v31);
    writeSharedObject<short>(a5, (uint64_t)v19, &v31);
    writeObject((uint64_t)a5, v20, &v31);
    writeObject<DgnString>((uint64_t)a5, (uint64_t)v21, &v31);
    writeObject<unsigned int>((uint64_t)a5, (uint64_t)v22, &v31);
    writeObject((uint64_t)a5, v23, &v31);
    writeObject((uint64_t)a5, v24, &v31);
    writeObject<DgnArray<DgnPrimArray<int>>>((uint64_t)a5, (uint64_t)v25, &v31);
    writeObject((uint64_t)a5, v26, &v31);
    writeObject<BinaryIntScale>((uint64_t)a5, (uint64_t)v27, &v31);
    writeObject((uint64_t)a5, v28, &v31);
    writeObject<AlignedArray<short>>((uint64_t)a5, (uint64_t)this + 200, &v31);
    FrameDecisionTree::writeObject((uint64_t)this + 528, (uint64_t)a5, &v31);
    writeSharedObject(a5, (PelMgr *)((char *)this + 568), &v31);
    writeSharedObject<unsigned int>(a5, (uint64_t)this + 584, &v31);
    writeSharedObject<short>(a5, (uint64_t)this + 600, &v31);
    writeObject((uint64_t)a5, (int *)this + 155, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 624, &v31);
    writeObject<unsigned int>((uint64_t)a5, (uint64_t)this + 640, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 688, &v31);
    writeObject<AlignedArray<unsigned char>>((uint64_t)a5, (uint64_t)this + 656, &v31);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 672, &v31);
    writeObject((uint64_t)a5, (int *)this + 6, &v31);
    writeObject((uint64_t)a5, (int *)this + 7, &v31);
    writeObject((uint64_t)a5, (int *)this + 8, &v31);
    writeObject((uint64_t)a5, (int *)this + 9, &v31);
    writeObject((uint64_t)a5, (int *)this + 10, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 48, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 64, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 80, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 96, &v31);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 112, &v31);
    writeObject((uint64_t)v8, (int *)this + 184, &v31);
    writeObjectChecksum((uint64_t)v8, (int *)&v31);
  }
}

uint64_t writeObject<DgnArray<DgnPrimArray<int>>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<DgnPrimArray<unsigned int>>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<BinaryIntScale>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (int *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<AlignedArray<short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = AlignedArray<short>::writeObject(*(_QWORD *)a2 + v7, a1, a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<AlignedArray<unsigned char>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = AlignedArray<unsigned char>::writeObject(*(_QWORD *)a2 + v7, a1, a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

char *writeSharedObject<unsigned char>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v18 = *(_DWORD *)(a2 + 8);
  result = (char *)writeObject((uint64_t)a1, (int *)&v18, a3);
  v12 = v18;
  if (v18)
  {
    result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, v18, v7, v8, v9, v10, v11);
    if (result)
    {
      v13 = result;
      v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        result = *(char **)a2;
        if (*(_QWORD *)a2)
          result = (char *)MemChunkFree(result, 0);
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a2 = v13;
    }
    else
    {
      v13 = *(const char **)a2;
    }
    if (v12 + 3 >= 4)
    {
      v15 = 0;
      v16 = (v12 + 3) >> 2;
      do
      {
        v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      v15 = 0;
    }
    *a3 ^= v15;
  }
  return result;
}

uint64_t PelMgr::savePelMgrText(PelMgr *this, DFile *a2, int a3, double a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int i;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  float *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int j;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t k;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned __int16 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  double v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t m;
  int v154;
  int v155;
  int v157;
  DFile *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  int v165[2];
  unsigned int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  void *v170[35];
  _QWORD *v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t v176;
  _DWORD *v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t v180;
  void *v181;

  v7 = *((unsigned int *)this + 33);
  v179 = 0;
  v180 = 0;
  if ((_DWORD)v7)
  {
    v170[0] = 0;
    HIDWORD(v180) = realloc_array(0, v170, 4 * v7, 0, 0, 1) >> 2;
    v179 = v170[0];
  }
  LODWORD(v180) = v7;
  v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    LODWORD(v9) = 0;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    v9 = *((unsigned int *)this + 33);
    v177 = 0;
    v178 = 0;
    if (!(_DWORD)v9)
    {
      v8 = 0;
      LODWORD(v178) = 0;
      goto LABEL_12;
    }
    v170[0] = 0;
    HIDWORD(v178) = realloc_array(0, v170, 4 * v9, 0, 0, 1) >> 2;
    v177 = v170[0];
    v8 = *((_DWORD *)this + 4);
  }
  LODWORD(v178) = v9;
  if (v8 != 1)
  {
LABEL_12:
    LODWORD(v10) = 0;
    v175 = 0;
    v176 = 0;
    goto LABEL_13;
  }
  v10 = *((unsigned int *)this + 38);
  v175 = 0;
  v176 = 0;
  if (!(_DWORD)v10)
  {
    v173 = 0;
    v174 = 0;
    v171 = 0;
    v172 = 0;
LABEL_14:
    v12 = *((_DWORD *)this + 33);
    v11 = *((_DWORD *)this + 34);
    v13 = v12 * v11;
    if (v12 * v11)
    {
      v170[0] = 0;
      HIDWORD(v174) = realloc_array(0, v170, (v12 * v11), 0, 0, 1);
      v173 = v170[0];
      v11 = *((_DWORD *)this + 34);
      v14 = HIDWORD(v172);
    }
    else
    {
      v14 = 0;
    }
    LODWORD(v174) = v13;
    v17 = *((_DWORD *)this + 38) * v11;
    if (v14 < v17)
    {
      v170[0] = 0;
      HIDWORD(v172) = realloc_array(v171, v170, 4 * v17, 4 * v172, 4 * v172, 1) >> 2;
      v171 = v170[0];
    }
    LODWORD(v172) = v17;
    goto LABEL_23;
  }
  v170[0] = 0;
  HIDWORD(v176) = realloc_array(0, v170, 4 * v10, 0, 0, 1) >> 2;
  v175 = v170[0];
  v8 = *((_DWORD *)this + 4);
LABEL_13:
  LODWORD(v176) = v10;
  v173 = 0;
  v174 = 0;
  v171 = 0;
  v172 = 0;
  if (v8)
    goto LABEL_14;
  v15 = *((_DWORD *)this + 34) * *((_DWORD *)this + 33);
  v16 = 2 * v15;
  if (2 * v15)
  {
    v170[0] = 0;
    HIDWORD(v174) = realloc_array(0, v170, (2 * v15), 0, 0, 1);
    v173 = v170[0];
  }
  LODWORD(v174) = v16;
LABEL_23:
  v18 = *((_DWORD *)this + 35);
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    for (i = 0; i < v18; ++i)
    {
      v22 = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * (unsigned __int16)i);
      v23 = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * (unsigned __int16)i + 4);
      v24 = v23 - v22;
      if (v23 != v22)
      {
        v25 = 0;
        v26 = *((_QWORD *)this + 29)
            + *((unsigned int *)this + 62)
            + *(unsigned int *)(*((_QWORD *)this + 32) + 4 * (unsigned __int16)i);
        v27 = *((_DWORD *)this + 4);
        do
        {
          v28 = (float *)(v26 + (*((_DWORD *)this + 37) * v25));
          if (v27)
            PelMgr::unpackRawMixtureComponent((unint64_t)this, v28, (uint64_t)&v179, (uint64_t)&v175);
          else
            PelMgr::unpackRawMixtureComponent((unint64_t)this, (uint64_t)v28, (uint64_t)&v179, (uint64_t)&v177, a4);
          if (*((_DWORD *)this + 33))
          {
            v29 = 0;
            v30 = v19;
            do
            {
              v19 = v30 + 1;
              v173[v30] = v179[v29];
              if (!*((_DWORD *)this + 4))
              {
                v173[v19] = v177[v29];
                v19 = v30 + 2;
              }
              ++v29;
              v30 = v19;
            }
            while (v29 < *((unsigned int *)this + 33));
          }
          v27 = *((_DWORD *)this + 4);
          if (v27 == 1 && *((_DWORD *)this + 38))
          {
            v31 = 0;
            v32 = v175;
            v33 = v171;
            do
            {
              *((_DWORD *)v33 + (v20 + v31)) = v32[v31];
              ++v31;
            }
            while (v31 < *((unsigned int *)this + 38));
            v20 += v31;
          }
          ++v25;
        }
        while (v25 != v24);
        v18 = *((_DWORD *)this + 35);
      }
    }
  }
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x26u, 0);
  v168 = 0;
  v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMCT_Versions, (uint64_t)&v168, v34, v35, v36, v37, v38);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentText", (_QWORD *)(v168 + 8 * (v169 - 1)));
  v39 = *((_DWORD *)this + 4);
  if (v39)
  {
    if (v39 != 1)
      goto LABEL_48;
    v40 = "MixtureOfInverseCovarianceMatrices";
  }
  else
  {
    v40 = "DiagonalCovarianceMatrix";
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v170, "PrecisionModelingType", v40);
LABEL_48:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
  v41 = *((int *)this + 3);
  if (v41 <= 3)
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v170, "ComponentScoringType", off_24C21BA68[v41]);
  if (!*((_DWORD *)this + 4))
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "MinimumScaledDev", *((unsigned int *)this + 32));
  if (*((_DWORD *)this + 3) == 3)
  {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumMeanValueQuantLevels", *((unsigned int *)this + 6));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumDevValueQuantLevels", *((unsigned int *)this + 7));
  }
  DgnArray<DgnString>::DgnArray(v165, 4);
  v163 = 0;
  v164 = 0;
  v161 = 0;
  v42 = realloc_array(0, &v161, 0x10uLL, 0, 0, 1);
  v163 = v161;
  LODWORD(v164) = 4;
  HIDWORD(v164) = v42 >> 2;
  DgnString::operator=(*(DgnString **)v165, "TableName");
  *v163 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "Index1");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "Index2");
  v163[2] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 48), "Value1");
  v163[3] = 3;
  if (*((_DWORD *)this + 4))
  {
    v43 = -1;
  }
  else
  {
    DgnString::DgnString((DgnString *)&v161, "Value2");
    v44 = v166;
    if (v166 == v167)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v165, 1, 1);
      v44 = v166;
    }
    DgnString::DgnString((DgnString *)(*(_QWORD *)v165 + 16 * v44), (const DgnString *)&v161);
    ++v166;
    DgnString::~DgnString((DgnString *)&v161);
    v45 = v164;
    if ((_DWORD)v164 == HIDWORD(v164))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v163, 1, 1);
      v45 = v164;
    }
    v163[v45] = 3;
    LODWORD(v164) = v45 + 1;
    v43 = 4;
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  if (*((_DWORD *)this + 3) == 3)
  {
    PelMgr::saveQuantPerDimTableText((uint64_t)this, (DgnTextFileWriter *)v170, 0, 1u, 2u, 3u, v43, "MeanQuantTable", *((_DWORD *)this + 6), (_QWORD *)this + 6);
    PelMgr::saveQuantPerDimTableText((uint64_t)this, (DgnTextFileWriter *)v170, 0, 1u, 2u, 3u, v43, "DevQuantTable", *((_DWORD *)this + 7), (_QWORD *)this + 8);
  }
  v46 = *((_DWORD *)this + 34);
  if (v46)
  {
    v47 = 0;
    v48 = 0;
    v49 = *((_DWORD *)this + 33);
    do
    {
      if (v49)
      {
        for (j = 0; j < v49; ++j)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "Component");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v48);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, j);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 3u, v173[v47]);
          if (*((_DWORD *)this + 4))
          {
            ++v47;
          }
          else
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, v43, v173[v47 + 1]);
            v47 += 2;
          }
          DgnTextFileWriter::writeNextLine(v170);
          v49 = *((_DWORD *)this + 33);
        }
        v46 = *((_DWORD *)this + 34);
      }
      ++v48;
    }
    while (v48 < v46);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  if (*((_DWORD *)this + 4) == 1)
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 5u, a3);
    v168 = 0;
    v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sBMT_Versions, (uint64_t)&v168, v51, v52, v53, v54, v55);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentBasisMatrixText", (_QWORD *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfBasisMatrices", *((unsigned int *)this + 38));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "BMTIntScale", 1 << *((_DWORD *)this + 40));
    DgnArray<DgnString>::DgnArray(v165, 4);
    v163 = 0;
    v164 = 0;
    v161 = 0;
    v56 = realloc_array(0, &v161, 0x10uLL, 0, 0, 1);
    v163 = v161;
    LODWORD(v164) = 4;
    HIDWORD(v164) = v56 >> 2;
    DgnString::operator=(*(DgnString **)v165, "BasisMatrixIndex");
    *v163 = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "RowIndex");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "ColumnIndex");
    v163[2] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 48), "Value");
    v163[3] = 1;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    v57 = *((unsigned int *)this + 38);
    if ((_DWORD)v57)
    {
      v58 = 0;
      v59 = *((unsigned int *)this + 33);
      v60 = v59;
      do
      {
        if (v60)
        {
          v61 = 0;
          do
          {
            if (v59)
            {
              for (k = 0; k < v59; ++k)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v58);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v61);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, k);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 16 * v58) + 16 * v61) + 4 * k));
                DgnTextFileWriter::writeNextLine(v170);
                v59 = *((unsigned int *)this + 33);
              }
            }
            ++v61;
          }
          while (v61 < v59);
          v57 = *((unsigned int *)this + 38);
          v60 = v59;
        }
        ++v58;
      }
      while (v58 < v57);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 2u, 0);
    v168 = 0;
    v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sBCT_Versions, (uint64_t)&v168, v63, v64, v65, v66, v67);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentBasisCoefficientText", (_QWORD *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfBasisMatrices", *((unsigned int *)this + 38));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "BCTIntScale", 1 << *((_DWORD *)this + 41));
    DgnArray<DgnString>::DgnArray(v165, 3);
    v163 = 0;
    v164 = 0;
    v161 = 0;
    v68 = realloc_array(0, &v161, 0xCuLL, 0, 0, 1);
    v163 = v161;
    LODWORD(v164) = 3;
    HIDWORD(v164) = v68 >> 2;
    DgnString::operator=(*(DgnString **)v165, "ComponentIndex");
    *v163 = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "BasisMatrixIndex");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "BasisCoefficient");
    v163[2] = 1;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    v69 = *((_DWORD *)this + 34);
    if (v69)
    {
      v70 = 0;
      v71 = *((_DWORD *)this + 38);
      v72 = v71;
      do
      {
        if (v72)
        {
          v73 = 0;
          do
          {
            if (*((_DWORD *)v171 + v73 + v70 * v72))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v70);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v73);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *((_DWORD *)v171 + v73 + v70 * *((_DWORD *)this + 38)));
              DgnTextFileWriter::writeNextLine(v170);
              v71 = *((_DWORD *)this + 38);
            }
            ++v73;
            v72 = v71;
          }
          while (v73 < v71);
          v69 = *((_DWORD *)this + 34);
          v72 = v71;
        }
        ++v70;
      }
      while (v70 < v69);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  }
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x27u, a3);
  v168 = 0;
  v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMGT_Versions, (uint64_t)&v168, v74, v75, v76, v77, v78);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureGenoneText", (_QWORD *)(v168 + 8 * (v169 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
  DgnArray<DgnString>::DgnArray(v165, 3);
  v163 = 0;
  v164 = 0;
  v161 = 0;
  v79 = realloc_array(0, &v161, 0xCuLL, 0, 0, 1);
  v163 = v161;
  LODWORD(v164) = 3;
  HIDWORD(v164) = v79 >> 2;
  DgnString::operator=(*(DgnString **)v165, "GenId");
  *v163 = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "StartComponentIndex");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "NumberOfComponents");
  v163[2] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  if (*((_DWORD *)this + 35))
  {
    v80 = 0;
    do
    {
      v81 = (int *)(*((_QWORD *)this + 34) + 4 * (unsigned __int16)v80);
      v83 = *v81;
      v82 = v81[1];
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v80);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v80));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v82 - v83);
      DgnTextFileWriter::writeNextLine(v170);
      ++v80;
    }
    while (v80 < *((unsigned int *)this + 35));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x2Bu, a3);
  v168 = 0;
  v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMPT_Versions, (uint64_t)&v168, v84, v85, v86, v87, v88);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixturePelText", (_QWORD *)(v168 + 8 * (v169 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfPels", *((unsigned int *)this + 36));
  if (*((_BYTE *)this + 392))
    v89 = 0;
  else
    v89 = *((_DWORD *)this + 102);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfPelStatClasses", v89);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "AdaptationAccumulatorScale", *((unsigned int *)this + 5));
  DgnArray<DgnString>::DgnArray(v165, 5);
  v163 = 0;
  v164 = 0;
  v161 = 0;
  v90 = realloc_array(0, &v161, 0x14uLL, 0, 0, 1);
  v157 = a3;
  v158 = a2;
  v163 = v161;
  LODWORD(v164) = 5;
  HIDWORD(v164) = v90 >> 2;
  DgnString::operator=(*(DgnString **)v165, "PelId");
  *v163 = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "GenId");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "GenoneComponentIndex");
  v163[2] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 48), "MixtureWeight");
  v163[3] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 64), "BackoffPelId");
  v163[4] = 1;
  if (*((_BYTE *)this + 392))
  {
    v91 = -1;
  }
  else
  {
    DgnString::DgnString((DgnString *)&v161, "StatClassName");
    v92 = v166;
    if (v166 == v167)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v165, 1, 1);
      v92 = v166;
    }
    DgnString::DgnString((DgnString *)(*(_QWORD *)v165 + 16 * v92), (const DgnString *)&v161);
    ++v166;
    DgnString::~DgnString((DgnString *)&v161);
    v93 = v164;
    if ((_DWORD)v164 == HIDWORD(v164))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v163, 1, 1);
      v93 = v164;
    }
    v163[v93] = 0;
    LODWORD(v164) = v93 + 1;
    v91 = 5;
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  v94 = *((_DWORD *)this + 36);
  if (v94)
  {
    v95 = 0;
    v96 = 0;
    do
    {
      v97 = v96;
      v100 = (unsigned int *)(*((_QWORD *)this + 57) + 4 * v96);
      v98 = *v100;
      v99 = v100[1];
      v101 = v99 - v98;
      if (v99 != (_DWORD)v98)
      {
        v102 = 0;
        v103 = *(unsigned __int16 *)(*((_QWORD *)this + 36) + 2 * v97);
        v104 = *((_QWORD *)this + 43) + v98;
        do
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v95);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v103);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v102);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 3u, *(unsigned __int8 *)(v104 + v102));
          if (*(unsigned __int16 *)(*((_QWORD *)this + 47) + 2 * v97) == 0xFFFF)
            v105 = -1;
          else
            v105 = *(unsigned __int16 *)(*((_QWORD *)this + 47) + 2 * v97);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 4u, v105);
          if (!*((_BYTE *)this + 392))
          {
            v106 = *((_QWORD *)this + 50) + 16 * *(unsigned int *)(*((_QWORD *)this + 52) + 4 * v97);
            if (*(_DWORD *)(v106 + 8))
              v107 = *(char **)v106;
            else
              v107 = byte_209A76570;
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, v91, v107);
          }
          DgnTextFileWriter::writeNextLine(v170);
          ++v102;
        }
        while (v101 != v102);
        v94 = *((_DWORD *)this + 36);
      }
      v96 = v97 + 1;
      v95 = (unsigned __int16)(v97 + 1);
    }
    while (v94 > v95);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  v108 = (uint64_t)v158;
  if (*((_WORD *)this + 268))
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)v158, 0x2Cu, v157);
    v168 = 0;
    v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sMST_Versions, (uint64_t)&v168, v109, v110, v111, v112, v113);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureShortListText", (_QWORD *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfTreeNodes", *((unsigned __int16 *)this + 268));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfHyperplanes", *((unsigned __int16 *)this + 276));
    DgnArray<DgnString>::DgnArray(v165, 6);
    v163 = 0;
    v164 = 0;
    v161 = 0;
    v114 = realloc_array(0, &v161, 0x18uLL, 0, 0, 1);
    v163 = v161;
    LODWORD(v164) = 6;
    HIDWORD(v164) = v114 >> 2;
    DgnString::operator=(*(DgnString **)v165, "TableName");
    *v163 = 0;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "UnsValue1");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "IntValue1");
    v163[2] = 1;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 48), "IntValue2");
    v163[3] = 1;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 64), "UnsValue2");
    v163[4] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 80), "StrValue1");
    v163[5] = 0;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    if (*((_WORD *)this + 276))
    {
      v115 = 0;
      v116 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HyperplaneConstant");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v116);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *(_DWORD *)(*((_QWORD *)this + 68) + v115));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, -1);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_209A76570);
        DgnTextFileWriter::writeNextLine(v170);
        ++v116;
        v117 = *((unsigned __int16 *)this + 276);
        v115 += 24;
      }
      while (v116 < v117);
      if (*((_WORD *)this + 276))
      {
        v118 = 0;
        v119 = *((_DWORD *)this + 33);
        do
        {
          if (v119)
          {
            v120 = 0;
            v121 = 0;
            do
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HyperplaneCoefficient");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v118);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, v120);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 68) + 24 * v118 + 8) + 4 * (unsigned __int16)v121));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_209A76570);
              DgnTextFileWriter::writeNextLine(v170);
              v120 = (unsigned __int16)++v121;
              v119 = *((_DWORD *)this + 33);
            }
            while (v119 > (unsigned __int16)v121);
            LOWORD(v117) = *((_WORD *)this + 276);
          }
          ++v118;
        }
        while (v118 < (unsigned __int16)v117);
      }
    }
    if (*((_WORD *)this + 268))
    {
      v122 = 0;
      v123 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "FrameDecisionTree");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v123);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *(unsigned __int16 *)(*((_QWORD *)this + 66) + v122));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(unsigned __int16 *)(*((_QWORD *)this + 66) + v122 + 2));
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, *(unsigned __int16 *)(*((_QWORD *)this + 66) + v122 + 4));
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_209A76570);
        DgnTextFileWriter::writeNextLine(v170);
        ++v123;
        v122 += 6;
      }
      while (v123 < *((unsigned __int16 *)this + 268));
    }
    v124 = *((_DWORD *)this + 35);
    if (v124)
    {
      v125 = 0;
      v126 = 0;
      do
      {
        v127 = v126;
        if (*((_WORD *)this + 268))
        {
          v128 = 0;
          v129 = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v126 + 4) - *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v126);
          v130 = ((unint64_t)*((unsigned __int16 *)this + 268) + 1) >> 1;
          do
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "ShortList");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v125);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, v128);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, v129);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
            DgnString::DgnString((DgnString *)&v161, 48, v129);
            v131 = v130 * v125;
            v132 = *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v127)
                 + v129 * *(unsigned __int16 *)(*((_QWORD *)this + 75) + 2 * (v128 + v131));
            v133 = v132 + v129;
            if (v132 + v129 == -1)
              v133 = *((_DWORD *)this + 144);
            if (v132 < v133)
            {
              v134 = *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v127)
                   + v129 * *(unsigned __int16 *)(*((_QWORD *)this + 75) + 2 * (v128 + v131));
              while (((*(_DWORD *)(*((_QWORD *)this + 71) + 4 * (v134 >> 5)) >> v134) & 1) == 0)
              {
                if (++v134 >= v133)
                  goto LABEL_153;
              }
LABEL_148:
              v135 = v134;
              goto LABEL_149;
            }
            v134 = *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v127)
                 + v129 * *(unsigned __int16 *)(*((_QWORD *)this + 75) + 2 * (v128 + v131));
            while (1)
            {
              v135 = v133;
LABEL_149:
              if (v134 >= v133)
                break;
              *((_BYTE *)v161 + v135 - v132) = 49;
              if (++v134 < v133)
              {
                while (((*(_DWORD *)(*((_QWORD *)this + 71) + 4 * (v134 >> 5)) >> v134) & 1) == 0)
                {
                  if (v133 == ++v134)
                    goto LABEL_153;
                }
                goto LABEL_148;
              }
            }
LABEL_153:
            if ((_DWORD)v162)
              v136 = (char *)v161;
            else
              v136 = byte_209A76570;
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, v136);
            DgnTextFileWriter::writeNextLine(v170);
            DgnString::~DgnString((DgnString *)&v161);
            ++v128;
          }
          while (v128 != v130);
          v124 = *((_DWORD *)this + 35);
        }
        v126 = v127 + 1;
        v125 = (unsigned __int16)(v127 + 1);
      }
      while (v124 > v125);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
    v108 = (uint64_t)v158;
  }
  if (*((_DWORD *)this + 155))
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, v108, 0x1Cu, 0);
    v168 = 0;
    v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sHST_Versions, (uint64_t)&v168, v137, v138, v139, v140, v141);
    DgnTextFileWriter::setFileType((uint64_t)v170, "HierarchicalScorerText", (_QWORD *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumHSLevels", *((unsigned int *)this + 155));
    DgnArray<DgnString>::DgnArray(v165, 7);
    v163 = 0;
    v164 = 0;
    v161 = 0;
    v142 = realloc_array(0, &v161, 0x1CuLL, 0, 0, 1);
    v163 = v161;
    LODWORD(v164) = 7;
    HIDWORD(v164) = v142 >> 2;
    DgnString::operator=(*(DgnString **)v165, "Type");
    *v163 = 0;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 16), "Level");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 32), "Component");
    v163[2] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 48), "Parent");
    v163[3] = 1;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 64), "DimensionIndex");
    v163[4] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 80), "Mean");
    v163[5] = 3;
    DgnString::operator=((DgnString *)(*(_QWORD *)v165 + 96), "ScaledDev");
    v163[6] = 3;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    if (*((_DWORD *)this + 155) != -1)
    {
      v144 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "NumHSComponents");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v144);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, *(_DWORD *)(*((_QWORD *)this + 80) + 4 * v144));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 6u, 0);
        DgnTextFileWriter::writeNextLine(v170);
        ++v144;
      }
      while (v144 < (*((_DWORD *)this + 155) + 1));
    }
    v145 = *((unsigned int *)this + 33);
    v161 = 0;
    v162 = 0;
    if ((_DWORD)v145)
    {
      v159 = 0;
      v146 = realloc_array(0, &v159, 4 * v145, 0, 0, 1);
      v160 = 0;
      v161 = v159;
      v147 = *((unsigned int *)this + 33);
      LODWORD(v162) = v145;
      HIDWORD(v162) = v146 >> 2;
      v159 = 0;
      if ((_DWORD)v147)
      {
        v181 = 0;
        HIDWORD(v160) = realloc_array(0, &v181, 4 * v147, 0, 0, 1) >> 2;
        v159 = v181;
      }
    }
    else
    {
      LODWORD(v147) = 0;
      v159 = 0;
      v160 = 0;
    }
    LODWORD(v160) = v147;
    v148 = *((_DWORD *)this + 155);
    if (v148 != -1)
    {
      v149 = 0;
      v150 = 0;
      do
      {
        if (v149 >= v148)
        {
          v151 = 1;
        }
        else
        {
          v150 = *(_QWORD *)(*((_QWORD *)this + 82) + 24 * v149)
               + *(unsigned int *)(*((_QWORD *)this + 82) + 24 * v149 + 16);
          v151 = *((unsigned int *)this + 33);
        }
        if (*(_DWORD *)(*((_QWORD *)this + 80) + 4 * v149))
        {
          v152 = 0;
          do
          {
            if (v149 < *((unsigned int *)this + 155))
            {
              PelMgr::unpackRawMixtureComponent((unint64_t)this, v150, (uint64_t)&v161, (uint64_t)&v159, v143);
              v150 += *((unsigned int *)this + 37);
            }
            if (v151)
            {
              for (m = 0; m != v151; ++m)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HSComponentDefs");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v149);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v152);
                if (v149)
                  v154 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 78) + 16 * (v149 - 1)) + 4 * v152);
                else
                  v154 = -1;
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, v154);
                if (v149 >= *((unsigned int *)this + 155))
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, 0);
                  v155 = 0;
                }
                else
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, m);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, *((_DWORD *)v161 + m));
                  v155 = *((_DWORD *)v159 + m);
                }
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 6u, v155);
                DgnTextFileWriter::writeNextLine(v170);
              }
            }
            ++v152;
          }
          while (v152 < *(unsigned int *)(*((_QWORD *)this + 80) + 4 * v149));
          v148 = *((_DWORD *)this + 155);
        }
        ++v149;
      }
      while (v149 < v148 + 1);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v159);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v161);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v171);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v173);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v175);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v177);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v179);
}

void sub_2098DDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  va_list va3;
  uint64_t v21;
  va_list va4;

  va_start(va4, a8);
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v19 = va_arg(va4, _QWORD);
  v21 = va_arg(va4, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 112);
  _Unwind_Resume(a1);
}

void PelMgr::saveQuantPerDimTableText(uint64_t a1, DgnTextFileWriter *this, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, char *a8, int a9, _QWORD *a10)
{
  unsigned int v10;
  int v15;
  unsigned int i;
  int j;

  v10 = *(_DWORD *)(a1 + 132);
  if (v10)
  {
    v15 = 0;
    for (i = 0; i < v10; ++i)
    {
      if (a9)
      {
        for (j = 0; j != a9; ++j)
        {
          DgnTextFileWriter::setLineFieldValue(this, a3, a8);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a4, i);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a5, j);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a6, *(unsigned __int8 *)(*a10 + (v15 + j)));
          if (!*(_DWORD *)(a1 + 16))
            DgnTextFileWriter::setLineFieldUnsignedValue(this, a7, 0);
          DgnTextFileWriter::writeNextLine((void **)this);
        }
        v10 = *(_DWORD *)(a1 + 132);
        v15 += j;
      }
    }
  }
}

void PelMgr::savePelMgr(PelMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, double a6)
{
  if (a4)
    PelMgr::savePelMgrText(this, a2, a5, a6);
  else
    PelMgr::savePelMgrBinary(this, a2, a3, a5, 0);
}

void PelMgr::verifyFeatureDimension(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, NeuralNet *a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v15;
  int v17;
  int v19;
  unsigned int OutputSize;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v12 = a4;
  v15 = *(_DWORD *)(a1 + 132);
  if (a2)
  {
    if (v15 != *(_DWORD *)(a2 + 4))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3730, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"VarClass");
    if (v15 != *(_DWORD *)(a2 + 8))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3732, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"VarClass");
  }
  v17 = a3[2];
  if (v17 == *a3 && v15 != v17)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3738, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"SpeakerTransAcc");
    if (v15 != a3[2])
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3740, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"SpeakerTransAcc");
  }
  v19 = a3[3];
  if (v19 == *a3 && v15 != v19)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3746, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"ChannelTransAcc");
    if (v15 != a3[3])
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3748, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"ChannelTransAcc");
  }
  OutputSize = *(_DWORD *)(a1 + 8);
  if (v12 && OutputSize != v12)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3754, (uint64_t)"pel/pel", 16, (uint64_t)"%.500s", a7, a8, (char)"utterance");
  if (a5)
  {
    if (OutputSize != *(_DWORD *)(a5 + 8))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3759, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"BandwidthTransform");
    OutputSize = *(_DWORD *)(a5 + 12);
    if (OutputSize < *(_DWORD *)(a1 + 132))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3762, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"BandwidthTransform");
  }
  if (a6)
  {
    if (NeuralNet::isOutTypeBF(a6, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8))
    {
      if (OutputSize != NeuralNet::getFrameSize(a6, v22, v23, v24, v25, v26, v27, v28))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3770, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", v34, v35, (char)"DBNBottleneckFeature");
      OutputSize = NeuralNet::getOutputSize(a6, v29, v30, v31, v32, v33, v34, v35);
      if (OutputSize < *(_DWORD *)(a1 + 132))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3773, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DBNBottleneckFeature");
    }
    else if (NeuralNet::isOutTypeConcatenatedBF(a6, v22, v23, v24, v25, v26, v27, v28))
    {
      if (OutputSize != NeuralNet::getFrameSize(a6, v36, v37, v38, v39, v40, a7, a8))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3779, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", v46, v47, (char)"DBNConcatenatedBottleneckFeature");
      OutputSize += NeuralNet::getOutputSize(a6, v41, v42, v43, v44, v45, v46, v47);
      if (OutputSize < *(_DWORD *)(a1 + 132))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3782, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DBNConcatenatedBottleneckFeature");
    }
  }
  if (a7)
  {
    if (OutputSize != *(_DWORD *)(a7 + 8))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3789, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"Imelda");
    OutputSize = *(_DWORD *)(a7 + 12);
    if (OutputSize < *(_DWORD *)(a1 + 132))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3792, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"Imelda");
  }
  if (a8)
  {
    if (OutputSize != *(_DWORD *)(*(_QWORD *)(a8 + 112) + 132))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3798, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DFC");
    if (OutputSize < *(_DWORD *)(a1 + 132))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3800, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DFC");
  }
}

float PelMgr::packFloatRawMixtureComponent(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, double a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  double v20;
  float v21;
  float result;

  v7 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v7)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    LODWORD(a5) = *(_DWORD *)(a1 + 128);
    v12 = (double)*(unint64_t *)&a5;
    v13 = v12 * 0.125;
    v14 = 4 * v7;
    v15 = 0.0;
    do
    {
      LODWORD(v12) = *(_DWORD *)(*a4 + v10);
      v16 = (double)*(unint64_t *)&v12 * 0.125;
      if (v16 <= 31.875)
        v17 = v16;
      else
        v17 = 31.875;
      if (v16 >= v13)
        v18 = v17;
      else
        v18 = v13;
      v19 = v11 + 1;
      v20 = *(double *)(a1 + 496);
      *(float *)(a2 + 4 * v11) = (float)*(unsigned int *)(*a3 + v10);
      v21 = v20 / (v18 * (v18 * 3.14159265));
      v11 = (v11 + 2);
      *(float *)(a2 + 4 * v19) = v21;
      v12 = DgnLog(v18 * 0.25);
      v15 = v15 + v12;
      v10 += 4;
    }
    while (v14 != v10);
  }
  else
  {
    v11 = 0;
    v15 = 0.0;
  }
  result = v15 * *(double *)(a1 + 496);
  *(float *)(a2 + 4 * v11) = result;
  return result;
}

uint64_t PelMgr::packMulTableRawMixtureComponent(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(unsigned int *)(result + 132);
  if ((_DWORD)v4)
  {
    v8 = result;
    for (i = 0; i != v4; ++i)
    {
      v10 = *(_QWORD *)v8;
      v11 = *(_DWORD *)(*a4 + 4 * i);
      if (v11 >= 0xFF)
        v12 = 255;
      else
        v12 = *(_DWORD *)(*a4 + 4 * i);
      if (*(_DWORD *)(v8 + 128) <= v11)
        v13 = v12;
      else
        v13 = *(_DWORD *)(v8 + 128);
      if (*(_DWORD *)(v10 + 4) - 1 < v13)
        v13 = *(_DWORD *)(v10 + 4) - 1;
      result = MulTable::permute((MulTable *)v10, (unsigned __int16)((*(unsigned __int8 *)(*(_QWORD *)(v10 + 72) + v13) << 9)- *(_DWORD *)(*a3 + 4 * i)- 256));
      *(_WORD *)(a2 + 2 * i) = result;
    }
  }
  return result;
}

uint64_t PelMgr::packPackedIntRawMixtureComponent(uint64_t result, uint64_t a2, int **a3, unsigned int **a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(unsigned int *)(result + 132);
  v5 = (v4 + 7) & 0xFFFFFFF8;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a4;
    v9 = *(_QWORD *)(*(_QWORD *)(result + 488) + 72);
    do
    {
      v10 = *v7++;
      *(_BYTE *)(a2 + v6) = v10;
      v11 = *v8++;
      *(_BYTE *)(a2 + (v6 + 1)) = *(_BYTE *)(v9 + v11);
      v6 += 2;
    }
    while (2 * v4 != v6);
  }
  if (v4 < v5)
  {
    v12 = 2 * v4;
    v13 = v4 - v5;
    do
    {
      *(_BYTE *)(a2 + v12) = 0;
      *(_BYTE *)(a2 + v12 + 1) = 0;
      v12 += 2;
    }
    while (!__CFADD__(v13++, 1));
  }
  return result;
}

void PelMgr::packQuantPerDimRawMixtureComponent(uint64_t a1, _BYTE *a2, int **a3, int **a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  v4 = *(unsigned int *)(a1 + 132);
  v5 = (v4 + 7) & 0xFFFFFFF8;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a4;
    v9 = *(_QWORD *)(a1 + 96);
    v10 = a2;
    v11 = *(_QWORD *)(a1 + 112);
    do
    {
      v12 = *v7++;
      v13 = *(_BYTE *)(v9 + (v6 + v12));
      v14 = *v8++;
      *v10++ = *(_BYTE *)(v11 + (v6 + v14)) + 16 * v13;
      v6 += 256;
    }
    while (v4 << 8 != v6);
  }
  if (v4 < v5)
    bzero(&a2[v4], v5 + ~(_DWORD)v4 + 1);
}

uint64_t PelMgr::packFloatRawMixtureComponent(uint64_t a1, float *a2, char a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  float *v19;
  unsigned int v20;
  int v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  double v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  double v32;
  uint64_t *v33;
  uint64_t *v34;
  double v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  int *v48;
  int v49;
  float v50;
  int v51;
  double *v52;
  double v53;
  double v54;
  float v55;
  double *v58;
  uint64_t *v59;
  int v60;

  v15 = *(unsigned int *)(a1 + 132);
  v16 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v15)
  {
    v17 = *a4;
    v18 = *(unsigned int *)(a1 + 132);
    v19 = a2;
    do
    {
      v20 = *v17++;
      *v19++ = (float)v20;
      --v18;
    }
    while (v18);
  }
  v22 = *(_DWORD *)(a1 + 160);
  v21 = *(_DWORD *)(a1 + 164);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if ((a6 & 1) == 0)
  {
    LODWORD(v58) = v15;
    HIDWORD(v58) = v15;
    if ((_DWORD)v15 * (_DWORD)v15)
    {
      v59 = MemChunkAlloc(8 * (v15 * v15), 0);
      v60 = v15 * v15;
    }
  }
  v23 = 0.0;
  if (!(_DWORD)v15)
  {
    v42 = 0;
    v27 = 0.0;
    if ((a6 & 1) != 0)
      goto LABEL_25;
    goto LABEL_22;
  }
  v24 = 0;
  v25 = *(unsigned int *)(a1 + 152);
  v26 = *a4;
  v27 = 0.0;
  v28 = v15;
  do
  {
    v29 = 0;
    v30 = *a5;
    v31 = (int)v58;
    v32 = 0.0;
    v33 = v59;
    do
    {
      if ((_DWORD)v25)
      {
        v34 = *(uint64_t **)(a1 + 184);
        v35 = 0.0;
        v36 = v25;
        v37 = v30;
        do
        {
          v38 = *v37++;
          a10 = (double)v38;
          v39 = *v34;
          v34 += 2;
          v35 = v35 + a10 * (double)*(int *)(*(_QWORD *)(v39 + 16 * v24) + 4 * v29);
          --v36;
        }
        while (v36);
      }
      else
      {
        v35 = 0.0;
      }
      v40 = 1.0 / (double)(1 << (v22 + v21)) * v35;
      if ((a6 & 1) == 0)
        *(double *)&v33[(v24 + v31 * v29)] = v40;
      LODWORD(a10) = v26[v29];
      a10 = (double)*(unint64_t *)&a10;
      v32 = v32 + v40 * a10;
      ++v29;
    }
    while (v29 != v15);
    v41 = -(v32 * *(double *)(a1 + 496));
    *(float *)&v41 = v41;
    a2[v28] = *(float *)&v41;
    LODWORD(v41) = v26[v24];
    v42 = v28 + 1;
    v27 = v27 + v32 * (double)*(unint64_t *)&v41;
    ++v24;
    ++v28;
  }
  while (v24 != v15);
  if ((a6 & 1) == 0)
  {
LABEL_22:
    v45 = DgnMatrix::determinant(&v58);
    v23 = v45;
    if (v45 <= 0.0)
    {
      v23 = -v45;
      if (v45 == 0.0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 4146, (uint64_t)"pel/pel", 68, (uint64_t)"%u", v43, v44, a3);
    }
  }
LABEL_25:
  v46 = *(double *)(a1 + 496);
  if ((_DWORD)v16)
  {
    v47 = v46 * 0.5 / (double)(1 << *(_DWORD *)(a1 + 164));
    v48 = *a5;
    do
    {
      v49 = *v48++;
      v50 = v47 * (double)v49;
      v51 = v42 + 1;
      a2[v42++] = v50;
      --v16;
    }
    while (v16);
  }
  else
  {
    v51 = v42;
  }
  v52 = (double *)&a2[v51 + 1];
  if ((a6 & 1) != 0)
  {
    v53 = *v52;
  }
  else
  {
    v54 = DgnLog(v23);
    v53 = eround(v54, 10);
    v46 = *(double *)(a1 + 496);
  }
  v55 = v46 * 0.5 * (v27 - (double)v15 * DgnLog(25.1327412) - v53);
  a2[v51] = v55;
  if ((a6 & 1) == 0)
    *v52 = v53;
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v59);
}

void sub_2098DE9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PelMgr::packPackedIntRawMixtureComponent(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, int **a5, char a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int Bits;
  int v25;
  int *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  double v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  int *v44;
  double v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  int v55;
  _WORD *v56;
  __int16 v57;
  int v58;
  char v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  _WORD *v72;
  double v73;
  double v74;
  char v76;
  unsigned int v77;
  int v78;
  int v79;
  void *v80;
  uint64_t *v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;

  v12 = *(unsigned int *)(a1 + 132);
  v13 = (v12 + 1) & 0xFFFFFFFE;
  v14 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
      *(_BYTE *)(a2 + i) = *(_DWORD *)(*a4 + 4 * i);
  }
  v16 = v12;
  if (v12 < v13)
  {
    v17 = v12;
    do
      *(_BYTE *)(a2 + v17++) = 0;
    while (v13 != v17);
    v16 = (v12 + 1) & 0xFFFFFFFE;
  }
  v77 = v16;
  v78 = *(_DWORD *)(a1 + 164);
  v79 = *(_DWORD *)(a1 + 160);
  v85 = 0;
  v86 = 0;
  if ((_DWORD)v14)
  {
    v80 = 0;
    v18 = realloc_array(0, &v80, 4 * v14, 0, 0, 1);
    v19 = 0;
    v85 = v80;
    LODWORD(v86) = v14;
    HIDWORD(v86) = v18 >> 2;
    v20 = *a5;
    v21 = v14;
    do
    {
      v23 = *v20++;
      v22 = v23;
      if (v23 < 0)
        v22 = -v22;
      if (v19 <= v22)
        v19 = v22;
      --v21;
    }
    while (v21);
  }
  else
  {
    v19 = 0;
    LODWORD(v86) = 0;
  }
  Bits = BinaryIntScale::getBits(v19);
  if (Bits >= 15)
  {
    v25 = BinaryIntScale::getBits((1 << (Bits - 15)) + v19) - 14;
    if (!(_DWORD)v14)
      goto LABEL_25;
  }
  else
  {
    v25 = 0;
    if (!(_DWORD)v14)
      goto LABEL_25;
  }
  v26 = *a5;
  v27 = 1 << (v25 - 1);
  if (!v25)
    LODWORD(v27) = 0;
  v28 = v85;
  v29 = v14;
  do
  {
    v30 = *v26++;
    *v28++ = (__int16)((v30 + (int)v27) >> v25);
    --v29;
  }
  while (v29);
LABEL_25:
  v83 = 0;
  v84 = 0;
  if ((_DWORD)v12)
  {
    v80 = 0;
    HIDWORD(v84) = realloc_array(0, &v80, 8 * v12, 0, 0, 1) >> 3;
    v83 = v80;
  }
  v76 = a3;
  LODWORD(v84) = v12;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  if ((a6 & 1) == 0)
  {
    LODWORD(v80) = v12;
    HIDWORD(v80) = v12;
    if ((_DWORD)v12 * (_DWORD)v12)
    {
      v81 = MemChunkAlloc(8 * (v12 * v12), 0);
      v82 = v12 * v12;
    }
  }
  v31 = 0.0;
  if ((_DWORD)v12)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = *a4;
    v36 = v83;
    while (1)
    {
      v37 = 0;
      v38 = 0;
      v39 = v85;
      v40 = (int)v80;
      v41 = v81;
      do
      {
        v42 = 0;
        if ((_DWORD)v14)
        {
          v43 = *(_QWORD **)(a1 + 184);
          v44 = *a5;
          v45 = 0.0;
          v46 = v14;
          v47 = v39;
          do
          {
            v48 = *(_DWORD *)(*(_QWORD *)(*v43 + 16 * v32) + 4 * v37);
            if ((a6 & 1) == 0)
              v45 = v45 + (double)*v44 * (double)v48;
            v49 = *v47++;
            v42 += v48 * (uint64_t)v49;
            v43 += 2;
            ++v44;
            --v46;
          }
          while (v46);
          if ((a6 & 1) == 0)
LABEL_39:
            *(double *)&v41[(v32 + v40 * v37)] = 1.0
                                                             / (double)(1 << (v79
                                                                              + v78))
                                                             * v45;
        }
        else
        {
          v45 = 0.0;
          if ((a6 & 1) == 0)
            goto LABEL_39;
        }
        v38 += v42 * *(unsigned int *)(v35 + 4 * v37++);
      }
      while (v37 != v12);
      if (v38 >= 0)
        v50 = v38;
      else
        v50 = -v38;
      v36[v32] = -v38;
      if (v33 <= v50)
        v33 = v50;
      v34 += v38 * *(unsigned int *)(v35 + 4 * v32++);
      if (v32 == v12)
      {
        v51 = (double)v34;
        if ((a6 & 1) != 0)
          goto LABEL_56;
        goto LABEL_53;
      }
    }
  }
  v33 = 0;
  v51 = 0.0;
  if ((a6 & 1) != 0)
    goto LABEL_56;
LABEL_53:
  v54 = DgnMatrix::determinant((double **)&v80);
  v31 = v54;
  if (v54 <= 0.0)
  {
    v31 = -v54;
    if (v54 == 0.0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 4492, (uint64_t)"pel/pel", 68, (uint64_t)"%u", v52, v53, v76);
  }
LABEL_56:
  v55 = BinaryIntScale::getBits(v33);
  v56 = (_WORD *)(a2 + v77);
  v57 = v78 - v25;
  if (v55 <= 15)
    v58 = 0;
  else
    v58 = v55 - 15;
  v59 = v57 + v79;
  *v56 = v57 + v79 - v58;
  bzero(v56 + 1, ((v13 + 17) & 0xFFFFFFF0) - v13 - 2);
  v60 = (((v13 + 17) & 0xFFFFFFF0) - v13 - 2) >> 1;
  if ((_DWORD)v12)
  {
    v61 = v83;
    v62 = 1 << (v58 - 1);
    if (!v58)
      v62 = 0;
    v63 = v12;
    do
    {
      v64 = *v61++;
      v56[++v60] = (v64 + v62) >> v58;
      --v63;
    }
    while (v63);
  }
  v65 = v60 + 2;
  v56[v60 + 1] = v57;
  v66 = ((2 * v12 + 17) & 0xFFFFFFF0) - 2 * v12 - 2;
  bzero(&v56[v60 + 2], v66);
  v67 = v65 + (v66 >> 1);
  if ((_DWORD)v14)
  {
    v68 = v85;
    v69 = v14;
    do
    {
      v70 = *v68++;
      v71 = v67 + 1;
      v56[v67++] = v70;
      --v69;
    }
    while (v69);
  }
  else
  {
    v71 = v65 + (v66 >> 1);
  }
  bzero(&v56[v71], ((2 * (_DWORD)v14 + 27) & 0xFFFFFFF0) - 2 * (_DWORD)v14 - 12);
  v72 = &v56[v71 + ((((2 * (_DWORD)v14 + 27) & 0xFFFFFFF0) - 2 * (_DWORD)v14 - 12) >> 1)];
  if ((a6 & 1) != 0)
  {
    v73 = *(double *)(v72 + 2);
  }
  else
  {
    v74 = DgnLog(v31);
    v73 = eround(v74, 10);
  }
  *(_DWORD *)v72 = (int)((1.0 / (double)(1 << v59) * v51 - DgnLog(25.1327412) * (double)v12 - v73) * 0.5
                       + 0.5);
  if ((a6 & 1) == 0)
    *(double *)(v72 + 2) = v73;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v85);
}

void sub_2098DEEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t PelMgr::unpackFloatRawMixtureComponent(unint64_t result, float *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  float *v14;
  float v15;
  double v16;
  int v17;
  _DWORD *v18;
  float v19;
  double v20;
  double v21;

  v7 = result;
  v8 = *(unsigned int *)(result + 132);
  v9 = *(unsigned int *)(result + 152);
  v10 = *(_DWORD *)(a3 + 12);
  if (v8 > v10)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v10, 0);
  *(_DWORD *)(a3 + 8) = v8;
  v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11)
    result = DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
  *(_DWORD *)(a4 + 8) = v9;
  if ((_DWORD)v8)
  {
    v12 = *(_DWORD **)a3;
    v13 = v8;
    v14 = a2;
    do
    {
      v15 = *v14++;
      *v12++ = (v15 + 0.5);
      --v13;
    }
    while (v13);
  }
  if ((_DWORD)v9)
  {
    v16 = 2.0 / *(double *)(v7 + 496) * (double)(1 << *(_DWORD *)(v7 + 164));
    v17 = 2 * v8;
    v18 = *(_DWORD **)a4;
    do
    {
      v19 = a2[v17++];
      v20 = v16 * v19;
      if (v20 < 0.0)
        v21 = -0.5;
      else
        v21 = 0.5;
      *v18++ = (int)(v20 + v21);
      --v9;
    }
    while (v9);
  }
  return result;
}

unint64_t PelMgr::unpackPackedIntRawMixtureComponent(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  __int16 *v17;
  int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;

  v7 = result;
  v8 = *(unsigned int *)(result + 132);
  v9 = *(unsigned int *)(result + 152);
  v10 = *(_DWORD *)(a3 + 12);
  if (v8 > v10)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v10, 0);
  *(_DWORD *)(a3 + 8) = v8;
  v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11)
    result = DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
  *(_DWORD *)(a4 + 8) = v9;
  if ((_DWORD)v8)
  {
    v12 = *(_DWORD **)a3;
    v13 = v8;
    v14 = a2;
    do
    {
      v15 = *v14++;
      *v12++ = v15;
      --v13;
    }
    while (v13);
  }
  if ((_DWORD)v9)
  {
    v16 = &a2[2 * (_DWORD)v8
            + 2
            + 2 * (((((((_DWORD)v8 + 1) & 0xFFFFFFFE) + 17) & 0xFFFFFFF0) - (((_DWORD)v8 + 1) & 0xFFFFFFFE) - 2) >> 1)
            + (((_DWORD)v8 + 1) & 0xFFFFFFFE)];
    v18 = *(__int16 *)v16;
    v17 = (__int16 *)(v16 + 2);
    v19 = *(_DWORD *)(v7 + 164) - v18;
    v20 = (((2 * (_DWORD)v8 + 17) & 0xFFFFFFF0) - 2 * (_DWORD)v8 - 2) >> 1;
    v21 = *(_DWORD **)a4;
    do
    {
      *v21++ = v17[v20++] << v19;
      --v9;
    }
    while (v9);
  }
  return result;
}

void PelMgr::unpackFloatRawMixtureComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v9 = *(unsigned int *)(a1 + 132);
  v10 = *(_DWORD *)(a3 + 12);
  if (v9 > v10)
    DgnPrimArray<unsigned int>::reallocElts(a3, v9 - v10, 0);
  *(_DWORD *)(a3 + 8) = v9;
  v11 = *(_DWORD *)(a4 + 12);
  if (v9 <= v11)
  {
    *(_DWORD *)(a4 + 8) = v9;
    if (!(_DWORD)v9)
      return;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
    *(_DWORD *)(a4 + 8) = v9;
  }
  v12 = 0;
  v13 = 0;
  LODWORD(a5) = *(_DWORD *)(a1 + 128);
  v14 = (double)*(unint64_t *)&a5 * 0.125;
  do
  {
    v15 = v13 + 1;
    v16 = *(float *)(a2 + 4 * v13);
    v13 += 2;
    v17 = DgnSqrt(*(double *)(a1 + 496) / (*(float *)(a2 + 4 * v15) * 3.14159265));
    if (v17 <= 31.875)
      v18 = v17;
    else
      v18 = 31.875;
    if (v17 >= v14)
      v19 = v18;
    else
      v19 = v14;
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v12) = (v16 + 0.5);
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v12++) = (v19 * 8.0 + 0.5);
  }
  while (v9 != v12);
}

unint64_t PelMgr::unpackMulTableRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  MulTable *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;

  v7 = result;
  v8 = *(unsigned int *)(result + 132);
  v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  *(_DWORD *)(a3 + 8) = v8;
  v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!(_DWORD)v8)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  v11 = 0;
  v12 = *(_QWORD *)a4;
  do
  {
    v13 = *(MulTable **)v7;
    v14 = *(_QWORD *)a3;
    result = MulTable::unpermute(*(MulTable **)v7, *(_WORD *)(a2 + 2 * v11));
    *(_DWORD *)(v14 + 4 * v11) = -(char)result;
    *(_DWORD *)(v12 + 4 * v11) = *(unsigned __int16 *)(*((_QWORD *)v13 + 11) + 2 * (result >> 9));
    v12 = *(_QWORD *)a4;
    v15 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v11);
    if (v15 >= 0xFF)
      v16 = 255;
    else
      v16 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v11);
    if (*(_DWORD *)(v7 + 128) <= v15)
      v17 = v16;
    else
      v17 = *(_DWORD *)(v7 + 128);
    *(_DWORD *)(v12 + 4 * v11++) = v17;
  }
  while (v8 != v11);
  return result;
}

unint64_t PelMgr::unpackPackedIntRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;

  v7 = result;
  v8 = *(unsigned int *)(result + 132);
  v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  *(_DWORD *)(a3 + 8) = v8;
  v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!(_DWORD)v8)
      return result;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  v11 = *(_DWORD **)a3;
  v12 = *(_DWORD **)a4;
  v13 = *(_QWORD *)(*(_QWORD *)(v7 + 488) + 40);
  v14 = 1;
  do
  {
    *v11++ = *(unsigned __int8 *)(a2 + v14 - 1);
    *v12++ = *(unsigned __int16 *)(v13 + 2 * *(unsigned __int8 *)(a2 + v14));
    v14 += 2;
    --v8;
  }
  while (v8);
  return result;
}

unint64_t PelMgr::unpackQuantPerDimRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v7 = result;
  v8 = *(unsigned int *)(result + 132);
  v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  *(_DWORD *)(a3 + 8) = v8;
  v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!(_DWORD)v8)
      return result;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  v11 = 0;
  v12 = *(_QWORD *)a3;
  v13 = *(_QWORD *)a4;
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_QWORD *)(v7 + 64);
  do
  {
    v16 = *(unsigned __int8 *)(a2 + v11);
    *(_DWORD *)(v12 + 4 * v11) = *(unsigned __int8 *)(v14
                                                    + ((_DWORD)v11 << *(_DWORD *)(v7 + 32))
                                                    + (v16 >> *(_DWORD *)(v7 + 36)));
    *(_DWORD *)(v13 + 4 * v11) = *(unsigned __int8 *)(v15
                                                    + ((_DWORD)v11 << *(_DWORD *)(v7 + 36))
                                                    + (*(_DWORD *)(v7 + 40) & v16));
    ++v11;
  }
  while (v8 != v11);
  return result;
}

_QWORD *DgnArray<AlignedArray<unsigned char>>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 24;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -24);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<FrameDecisionTreeHyperplane>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void FrameDecisionTree::~FrameDecisionTree(FrameDecisionTree *this)
{
  DgnArray<FrameDecisionTreeHyperplane>::releaseAll((uint64_t)this + 16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this);
}

uint64_t AlignedArray<unsigned char>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= *(_DWORD *)(a1 + 12))
    v6 -= 15;
  v10 = v6;
  writeObject(a2, (int *)&v10, a3);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= *(_DWORD *)(a1 + 12))
    v8 = v7 - 15;
  else
    v8 = v7;
  return writeObjectArray(a2, (char *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16)), v8, a3);
}

uint64_t AlignedArray<short>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= *(_DWORD *)(a1 + 12))
    v6 -= 7;
  v10 = v6;
  writeObject(a2, (int *)&v10, a3);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= *(_DWORD *)(a1 + 12))
    v8 = v7 - 7;
  else
    v8 = *(_DWORD *)(a1 + 8);
  return writeObjectArray(a2, (__int16 *)(*(_QWORD *)a1 + 2 * *(unsigned int *)(a1 + 16)), v8, a3);
}

_QWORD *AlignedArray<unsigned char>::writeSharedObject(uint64_t a1, DgnSharedMemStream *a2, _DWORD *a3)
{
  unsigned int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= *(_DWORD *)(a1 + 12))
    v5 -= 15;
  v14 = v5;
  result = (_QWORD *)writeObject((uint64_t)a2, (int *)&v14, a3);
  if (v14)
  {
    result = (_QWORD *)DgnSharedMemStream::writeSharedBytes(a2, (const char *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16)), v14, v7, v8, v9, v10, v11);
    if (result)
    {
      v12 = result;
      result = *(_QWORD **)a1;
      if (*(_QWORD *)a1)
        result = (_QWORD *)MemChunkFree(result, 0);
      v13 = v14;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = v13;
      *(_QWORD *)a1 = v12;
    }
  }
  return result;
}

uint64_t Node::updateNodeOneBest1(Node *this, int a2, int a3, int a4, PelScoreCache **a5, HmmNet *a6)
{
  uint64_t ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v11;
  char *v12;

  ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(a5[3], *((unsigned __int16 *)this + 11), a2, a4);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a3)
  {
    v11 = ScoreAllowBackoff_updateNodeInSequence;
    Node::updateScore<false>((uint64_t)this, ScoreAllowBackoff_updateNodeInSequence);
    if (*((_DWORD *)a5 + 56) >= (int)v11)
      BestData::newOrTiedBestNode((uint64_t)(a5 + 24), v11, this, a6);
    v12 = (char *)a5 + 4 * (v11 + 5000);
    ++*((_DWORD *)v12 + 37848);
    ++*((_DWORD *)a5 + 75617);
    ++*((_DWORD *)v12 + 80);
    ++*((_DWORD *)a5 + 75616);
  }
  else
  {
    *((_DWORD *)this + 2) = 1310740000;
    return 20000;
  }
  return v11;
}

uint64_t Node::updateScore<false>(uint64_t result, __int16 a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  __int16 v7;

  v2 = *(_DWORD *)(result + 12);
  v3 = *(unsigned __int8 *)(result + 20);
  v4 = ((v2 >> 8) - v3) << 8;
  v5 = v4 | v3;
  v6 = v4 - ((v4 >> 31) & (v4 >> 8));
  if (v2 < 256)
    v6 = v5;
  *(_DWORD *)(result + 4) += 2 * *(_DWORD *)(result + 12) - v3;
  *(_DWORD *)(result + 12) = v6;
  if (v2 >= 256)
    v7 = (v2 >> 8) + a2;
  else
    v7 = a2;
  *(_WORD *)(result + 8) = v7;
  *(_WORD *)(result + 10) = a2;
  return result;
}

uint64_t Node::thresholdNode(Node *this, int a2)
{
  uint64_t result;

  if (*((__int16 *)this + 5) <= a2)
  {
    if (*((__int16 *)this + 4) > a2)
      *((_WORD *)this + 4) = 20000;
    return 1;
  }
  else
  {
    result = 0;
    *((_DWORD *)this + 2) = 1310740000;
  }
  return result;
}

uint64_t Node::scoreNodeActiveCurrActiveSeed(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5, PelScoreCache **a6, int a7, int a8, HmmNet *a9)
{
  int v9;
  int v10;
  int v11;
  int v12;

  v9 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  v10 = a8 + a7 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
  if (v10 < v9)
  {
    v11 = *(__int16 *)(a1 + 16);
    if (v11 >= 0)
      v12 = v11 << 8;
    else
      v12 = 255 * v11;
    *(_DWORD *)(a1 + 12) = v12;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
    *a5 = 1;
    v9 = v10;
  }
  return Node::updateNodeOneBest1((Node *)a1, v9, a3, a4, a6, a9);
}

uint64_t Node::scoreNodeOneBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, _BYTE *a7, PelScoreCache **a8, HmmNet *a9, _DWORD *a10, HmmNet *a11)
{
  int v11;

  v11 = *(__int16 *)(a1 + 10);
  if (v11 <= a4)
  {
    ++*a10;
    if (a3)
      return Node::scoreNodeActiveCurrActiveSeed(a1, a2, a5, a6, a7, a8, (int)a9, SHIDWORD(a9), a11);
    else
      return Node::updateNodeOneBest1((Node *)a1, *(unsigned __int8 *)(a1 + 12) + v11, a5, a6, a8, a11);
  }
  else
  {
    *a7 = a3;
    if (a3)
    {
      ++*a10;
      return Node::scoreNodeInactiveCurrActiveSeed(a1, a2, a5, a6, a8, (int)a9, SHIDWORD(a9), a11);
    }
    else
    {
      return 20000;
    }
  }
}

uint64_t Node::scoreNodeSuccessors(const Node *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  int v13;
  const Node *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  Node *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v39;
  Node *v42;
  int v43;
  int v44;

  v13 = a4;
  v14 = a1;
  v39 = (_DWORD *)(a8 + 302464);
  v15 = *(__int16 *)(a2 + 8);
  if (v15 == 20000)
    v16 = -2;
  else
    v16 = *(_DWORD *)a2;
  if (a7 >= 1)
  {
    v17 = 0;
    v18 = 0;
    if (a3)
    {
      v19 = 32;
    }
    else
    {
      v15 = 20000;
      v19 = 0;
    }
    v20 = *(_DWORD *)(a2 + 4);
    v21 = a7 + 1;
    v22 = (uint64_t)a1;
    v23 = a1;
    v24 = 20000;
    while (1)
    {
      v25 = *(__int16 *)(v22 + 10);
      if (v25 <= v13)
      {
        if (*(__int16 *)(v22 + 8) <= v13)
        {
          v26 = *(_WORD *)(v22 + 8);
          v27 = 17;
        }
        else
        {
          v26 = 20000;
          *(_WORD *)(v22 + 8) = 20000;
          v27 = 1;
        }
        ++v17;
        v19 |= v27;
      }
      else
      {
        *(_DWORD *)(v22 + 8) = 1310740000;
        v26 = 20000;
        v25 = 20000;
      }
      if ((v19 & 0x61) != 0)
      {
        v42 = v23;
        v43 = *(_DWORD *)v22;
        v44 = *(_DWORD *)(v22 + 4);
        v28 = *(unsigned __int8 *)(v22 + 12) + v25;
        v29 = a10 + a9 + v15 + *(char *)(v22 + 21);
        if (v29 < v28)
        {
          v30 = v20 + *(__int16 *)(v22 + 18);
          *(_DWORD *)v22 = v16;
          *(_DWORD *)(v22 + 4) = v30;
          v31 = *(__int16 *)(v22 + 16);
          if (v31 >= 0)
            v32 = v31 << 8;
          else
            v32 = 255 * v31;
          *(_DWORD *)(v22 + 12) = v32;
          v28 = v29;
        }
        ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a8 + 24), *(unsigned __int16 *)(v22 + 22), v28, a6);
        if ((int)ScoreAllowBackoff_updateNodeInSequence <= a5)
        {
          v34 = ScoreAllowBackoff_updateNodeInSequence;
          ++*(_DWORD *)(a8 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
          ++v39[1];
          Node::updateScore<false>(v22, ScoreAllowBackoff_updateNodeInSequence);
          if ((int)v34 <= (int)v24)
          {
            v14 = (const Node *)v22;
            v13 = a4;
            if ((int)v34 >= (int)v24)
            {
              v35 = *(unsigned __int16 *)(v22 + 22);
              v36 = *((unsigned __int16 *)v42 + 11);
              if (v35 < v36)
                v34 = v34;
              else
                v34 = v24;
              if (v35 < v36)
                v14 = (const Node *)v22;
              else
                v14 = v42;
            }
          }
          else
          {
            v34 = v24;
            v14 = v42;
            v13 = a4;
          }
        }
        else
        {
          *(_DWORD *)(v22 + 8) = 1310740000;
          v34 = v24;
          v14 = v42;
        }
        ++v18;
        if (v21 == 2)
          goto LABEL_38;
        v15 = v26;
        v16 = v43;
        v20 = v44;
        v23 = v14;
        v24 = v34;
        v19 = (2 * v19) & 0x22;
      }
      else
      {
        v34 = v24;
        v14 = v23;
      }
      --v21;
      v22 += 24;
      if (v21 <= 1)
        goto LABEL_38;
    }
  }
  v18 = 0;
  v17 = 0;
  v34 = 20000;
LABEL_38:
  *a11 += v18;
  *a12 += v17;
  if ((_DWORD)v34 != 20000)
  {
    if (*(_DWORD *)(a8 + 224) >= (int)v34)
      BestData::newOrTiedBestNode(a8 + 192, v34, v14, 0);
    ++*(_DWORD *)(a8 + 4 * (v34 + 5000) + 320);
    ++*v39;
  }
  return v34;
}

uint64_t Node::scoreNodeSuccessorsSkipOne(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned __int16 *v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v46;
  int v47;
  int v48;
  int v49;

  v12 = a8;
  v39 = a1;
  v40 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000)
    v13 = -2;
  else
    v13 = *(_DWORD *)a2;
  if (a7 < 1)
  {
    v14 = 0;
    v46 = 0;
    v41 = 20000;
    goto LABEL_43;
  }
  v46 = 0;
  v14 = 0;
  v15 = (a10 + a9);
  if (a3)
    v16 = 32;
  else
    v16 = 0;
  if (a3)
    v17 = *(__int16 *)(a2 + 8);
  else
    v17 = 20000;
  v18 = *(_DWORD *)(a2 + 4);
  v19 = a7 + 1;
  v20 = (uint64_t)a1;
  v41 = 20000;
  v42 = a4;
  v21 = v18;
  v22 = v13;
  v23 = v17;
  while (1)
  {
    v24 = *(__int16 *)(v20 + 10);
    if (v24 <= a4)
    {
      if (*(__int16 *)(v20 + 8) <= a4)
      {
        v25 = *(_WORD *)(v20 + 8);
        v26 = 17;
      }
      else
      {
        v25 = 20000;
        *(_WORD *)(v20 + 8) = 20000;
        v26 = 1;
      }
      ++v46;
      v16 |= v26;
    }
    else
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
      v25 = 20000;
      v24 = 20000;
    }
    if ((v16 & 0x61) != 0)
      break;
LABEL_37:
    --v19;
    v20 += 24;
    if (v19 <= 1)
      goto LABEL_43;
  }
  v47 = v18;
  v48 = v17;
  v49 = v13;
  v13 = *(_DWORD *)v20;
  v18 = *(_DWORD *)(v20 + 4);
  v27 = *(__int16 *)(v20 + 18);
  v28 = *(unsigned __int8 *)(v20 + 12) + v24;
  v29 = v15;
  v30 = v23 + v15 + *(char *)(v20 + 21);
  if (v30 < v28)
  {
    *(_DWORD *)v20 = v22;
    *(_DWORD *)(v20 + 4) = v21 + v27;
    v31 = *(__int16 *)(v20 + 16);
    if (v31 >= 0)
      v32 = v31 << 8;
    else
      v32 = 255 * v31;
    *(_DWORD *)(v20 + 12) = v32;
    v28 = v30;
  }
  ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), *(unsigned __int16 *)(v20 + 22), v28, a6);
  if (ScoreAllowBackoff_updateNodeInSequence > a5)
  {
    *(_DWORD *)(v20 + 8) = 1310740000;
LABEL_29:
    v15 = v29;
    goto LABEL_30;
  }
  v34 = v12;
  v35 = ScoreAllowBackoff_updateNodeInSequence;
  ++*(_DWORD *)(v34 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
  ++v40[1];
  Node::updateScore<false>(v20, ScoreAllowBackoff_updateNodeInSequence);
  if (v35 > v41)
    goto LABEL_29;
  if (v35 < v41)
  {
    v41 = v35;
    v39 = (unsigned __int16 *)v20;
    goto LABEL_29;
  }
  v15 = v29;
  if (*(unsigned __int16 *)(v20 + 22) < v39[11])
  {
    v41 = v35;
    v39 = (unsigned __int16 *)v20;
  }
LABEL_30:
  ++v14;
  if (v19 != 2)
  {
    v36 = v48 + v15 + v27;
    v21 = v47 + v27;
    v37 = v36 < v25;
    if (v36 >= v25)
      v23 = v25;
    else
      v23 = v48 + v15 + v27;
    v22 = v49;
    if (!v37)
    {
      v22 = v13;
      v21 = v18;
    }
    v16 = (2 * v16) & 0x66;
    v17 = v25;
    v12 = a8;
    a4 = v42;
    goto LABEL_37;
  }
  v12 = a8;
LABEL_43:
  *a11 += v14;
  *a12 += v46;
  if (v41 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v41)
      BestData::newOrTiedBestNode(v12 + 192, v41, (const Node *)v39, 0);
    ++*(_DWORD *)(v12 + 4 * (v41 + 5000) + 320);
    ++*v40;
  }
  return v41;
}

uint64_t Node::scoreNodeWithPattern(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, _BYTE *a9, HmmNet *a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v20;
  uint64_t v21;

  v14 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  if (a3 != 1)
  {
    v15 = a8 + a7 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
    if (a3 == 32 || v15 < v14)
    {
      v16 = *(__int16 *)(a1 + 16);
      if (v16 >= 0)
        v17 = v16 << 8;
      else
        v17 = 255 * v16;
      *(_DWORD *)(a1 + 12) = v17;
      v18 = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = v18;
      *a9 = 1;
      v14 = v15;
    }
  }
  ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a6 + 24), *(unsigned __int16 *)(a1 + 22), v14, a5);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a4)
  {
    v20 = ScoreAllowBackoff_updateNodeInSequence;
    Node::updateScore<false>(a1, ScoreAllowBackoff_updateNodeInSequence);
    if (*(_DWORD *)(a6 + 224) >= (int)v20)
      BestData::newOrTiedBestNode(a6 + 192, v20, (const Node *)a1, a10);
    v21 = a6 + 4 * (v20 + 5000);
    ++*(_DWORD *)(v21 + 151392);
    ++*(_DWORD *)(a6 + 302468);
    ++*(_DWORD *)(v21 + 320);
    ++*(_DWORD *)(a6 + 302464);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1310740000;
    return 20000;
  }
  return v20;
}

uint64_t Node::scoreNodeSuccessorsSkipMany(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int16 *v36;
  _DWORD *v37;
  int v38;
  int v39;
  int v43;
  int v44;
  int v45;
  __int16 v46;

  v12 = a8;
  v36 = a1;
  v37 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000)
    v13 = -2;
  else
    v13 = *(_DWORD *)a2;
  if (a7 < 1)
  {
    v14 = 0;
    v43 = 0;
    v38 = 20000;
    goto LABEL_44;
  }
  v43 = 0;
  v14 = 0;
  v15 = (a10 + a9);
  if (a3)
    v16 = 32;
  else
    v16 = 0;
  if (a3)
    v17 = *(__int16 *)(a2 + 8);
  else
    v17 = 20000;
  v18 = *(_DWORD *)(a2 + 4);
  v19 = a7 + 1;
  v20 = (uint64_t)a1;
  v38 = 20000;
  v39 = a4;
  while (1)
  {
    v21 = *(__int16 *)(v20 + 10);
    if (v21 <= a4)
    {
      if (*(__int16 *)(v20 + 8) <= a4)
      {
        v22 = *(_WORD *)(v20 + 8);
        v23 = 17;
      }
      else
      {
        v22 = 20000;
        *(_WORD *)(v20 + 8) = 20000;
        v23 = 1;
      }
      ++v43;
      v16 |= v23;
    }
    else
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
      v22 = 20000;
      v21 = 20000;
    }
    if ((v16 & 0x61) == 0)
      goto LABEL_38;
    v44 = *(_DWORD *)v20;
    v45 = *(_DWORD *)(v20 + 4);
    v46 = v22;
    v24 = *(__int16 *)(v20 + 18);
    v25 = *(unsigned __int8 *)(v20 + 12) + v21;
    v26 = v15;
    v27 = v17;
    v28 = v17 + v15 + *(char *)(v20 + 21);
    if (v28 < v25)
    {
      *(_DWORD *)v20 = v13;
      *(_DWORD *)(v20 + 4) = v18 + v24;
      v29 = *(__int16 *)(v20 + 16);
      if (v29 >= 0)
        v30 = v29 << 8;
      else
        v30 = 255 * v29;
      *(_DWORD *)(v20 + 12) = v30;
      v25 = v28;
    }
    ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), *(unsigned __int16 *)(v20 + 22), v25, a6);
    if (ScoreAllowBackoff_updateNodeInSequence > a5)
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
LABEL_29:
      v15 = v26;
      goto LABEL_30;
    }
    v32 = v12;
    v33 = ScoreAllowBackoff_updateNodeInSequence;
    ++*(_DWORD *)(v32 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
    ++v37[1];
    Node::updateScore<false>(v20, ScoreAllowBackoff_updateNodeInSequence);
    if (v33 > v38)
      goto LABEL_29;
    if (v33 < v38)
    {
      v38 = v33;
      v36 = (unsigned __int16 *)v20;
      goto LABEL_29;
    }
    v15 = v26;
    if (*(unsigned __int16 *)(v20 + 22) < v36[11])
    {
      v38 = v33;
      v36 = (unsigned __int16 *)v20;
    }
LABEL_30:
    ++v14;
    if (v19 == 2)
      break;
    v34 = v27 + v15 + v24;
    if (v34 >= v46)
      v17 = v46;
    else
      v17 = v27 + v15 + v24;
    if (v34 < v46)
    {
      v18 += v24;
    }
    else
    {
      v13 = v44;
      v18 = v45;
    }
    v16 = (2 * v16) & 0x66 | v16 & 0x40;
    v12 = a8;
    a4 = v39;
LABEL_38:
    --v19;
    v20 += 24;
    if (v19 <= 1)
      goto LABEL_44;
  }
  v12 = a8;
LABEL_44:
  *a11 += v14;
  *a12 += v43;
  if (v38 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v38)
      BestData::newOrTiedBestNode(v12 + 192, v38, (const Node *)v36, 0);
    ++*(_DWORD *)(v12 + 4 * (v38 + 5000) + 320);
    ++*v37;
  }
  return v38;
}

uint64_t Node::scoreNodeSuccessorsNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  int v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  unsigned __int16 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  unsigned __int16 *v47;
  _DWORD *v48;
  int v49;
  int v50;
  int v53;
  int v54;
  int v55;
  uint64_t v56;

  v12 = a8;
  v47 = a1;
  v48 = (_DWORD *)(a8 + 302464);
  v13 = *(__int16 *)(a2 + 8);
  if (v13 == 20000)
    v14 = -2;
  else
    v14 = *(_DWORD *)a2;
  if (a7 >= 1)
  {
    v55 = 0;
    v15 = 0;
    v50 = a4;
    if (a3)
    {
      v16 = 32;
    }
    else
    {
      v13 = 20000;
      v16 = 0;
    }
    v17 = *(_DWORD *)(a2 + 4);
    v45 = a8 + 302936;
    v18 = a7 + 1;
    v19 = a1;
    v49 = 20000;
    while (1)
    {
      v20 = (__int16)v19[5];
      if (v20 <= a4)
      {
        if ((__int16)v19[4] <= a4)
        {
          v21 = v19[4];
          v22 = 17;
        }
        else
        {
          v21 = 20000;
          v19[4] = 20000;
          v22 = 1;
        }
        ++v55;
        v16 |= v22;
      }
      else
      {
        *((_DWORD *)v19 + 2) = 1310740000;
        v21 = 20000;
        v20 = 20000;
      }
      if ((v16 & 0x61) != 0)
      {
        v23 = *(_DWORD *)v19;
        v24 = *((_DWORD *)v19 + 1);
        v25 = *((unsigned __int8 *)v19 + 12) + v20;
        v26 = a10 + a9 + v13 + *((char *)v19 + 21);
        v27 = v26 - v25;
        if (v26 - v25 < 0)
        {
          v27 = v25 - v26;
          *(_DWORD *)v19 = v14;
          *((_DWORD *)v19 + 1) = v17;
          v28 = (__int16)v19[8];
          if (v28 >= 0)
            v29 = v28 << 8;
          else
            v29 = 255 * v28;
          *((_DWORD *)v19 + 3) = v29;
          v25 = v26;
          v53 = v24;
          v54 = v23;
        }
        else
        {
          v53 = v17;
          v54 = v14;
        }
        ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), v19[11], v25, a6);
        if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
        {
          v31 = ScoreAllowBackoff_updateNodeInSequence;
          ++*(_DWORD *)(v12 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
          ++v48[1];
          v32 = *((_DWORD *)v19 + 3);
          v33 = *((unsigned __int8 *)v19 + 20);
          v34 = ((v32 >> 8) - v33) << 8;
          v35 = v34 | v33;
          v36 = v34 - ((v34 >> 31) & (v34 >> 8));
          v37 = (v32 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
          v38 = v32 < 256;
          if (v32 >= 256)
            v39 = v36;
          else
            v39 = v35;
          *((_DWORD *)v19 + 3) = v39;
          if (v38)
            v40 = ScoreAllowBackoff_updateNodeInSequence;
          else
            v40 = v37;
          v19[4] = v40;
          v19[5] = ScoreAllowBackoff_updateNodeInSequence;
          if (v27 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
          {
            v41 = *((_DWORD *)v19 + 1);
            v56 = 0;
            v42 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v45, &v56);
            v43 = v56;
            *(_DWORD *)(v56 + 4) = v41;
            *(_DWORD *)(v43 + 8) = v53;
            v12 = a8;
            *(_DWORD *)v43 = v54;
            *(_WORD *)(v43 + 12) = v27;
            *((_DWORD *)v19 + 1) = v42;
          }
          if (v31 <= v49 && (v31 < v49 || v19[11] < v47[11]))
          {
            v49 = v31;
            v47 = v19;
          }
        }
        else
        {
          *((_DWORD *)v19 + 2) = 1310740000;
        }
        ++v15;
        if (v18 == 2)
          goto LABEL_41;
        v13 = v21;
        v17 = v24;
        v14 = v23;
        v16 = (2 * v16) & 0x22;
        a4 = v50;
      }
      --v18;
      v19 += 12;
      if (v18 <= 1)
        goto LABEL_41;
    }
  }
  v15 = 0;
  v55 = 0;
  v49 = 20000;
LABEL_41:
  *a11 += v15;
  *a12 += v55;
  if (v49 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v49)
      BestData::newOrTiedBestNode(v12 + 192, v49, (const Node *)v47, 0);
    ++*(_DWORD *)(v12 + 4 * (v49 + 5000) + 320);
    ++*v48;
  }
  return v49;
}

uint64_t Node::scoreNodeSuccessorsSkipOneNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int16 *v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  int v54;
  int v55;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;

  v12 = a4;
  v47 = a1;
  v48 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000)
    v13 = -2;
  else
    v13 = *(_DWORD *)a2;
  if (a7 >= 1)
  {
    v55 = 0;
    v14 = 0;
    v59 = v13;
    v60 = a10 + a9;
    if (a3)
      v15 = *(__int16 *)(a2 + 8);
    else
      v15 = 20000;
    if (a3)
      v16 = 32;
    else
      v16 = 0;
    v17 = *(_DWORD *)(a2 + 4);
    v49 = a8 + 302936;
    v18 = a7 + 1;
    v19 = a1;
    v50 = 20000;
    v20 = v15;
    v21 = v17;
    while (1)
    {
      v22 = (__int16)v19[5];
      if (v22 <= v12)
      {
        if ((__int16)v19[4] <= v12)
        {
          v23 = v19[4];
          v24 = 17;
        }
        else
        {
          v23 = 20000;
          v19[4] = 20000;
          v24 = 1;
        }
        ++v55;
        v16 |= v24;
      }
      else
      {
        *((_DWORD *)v19 + 2) = 1310740000;
        v23 = 20000;
        v22 = 20000;
      }
      if ((v16 & 0x61) != 0)
        break;
LABEL_43:
      --v18;
      v19 += 12;
      if (v18 <= 1)
        goto LABEL_48;
    }
    v26 = *(_DWORD *)v19;
    v25 = *((_DWORD *)v19 + 1);
    v27 = *((unsigned __int8 *)v19 + 12) + v22;
    v28 = v15 + v60 + *((char *)v19 + 21);
    v29 = v28 - v27;
    v62 = v13;
    v57 = v16;
    v58 = v20;
    v61 = v17;
    if (v28 - v27 < 0)
    {
      v29 = v27 - v28;
      *(_DWORD *)v19 = v59;
      *((_DWORD *)v19 + 1) = v21;
      v30 = (__int16)v19[8];
      if (v30 >= 0)
        v31 = v30 << 8;
      else
        v31 = 255 * v30;
      *((_DWORD *)v19 + 3) = v31;
      v27 = v28;
      v59 = v26;
      v54 = v25;
    }
    else
    {
      v54 = v21;
    }
    v32 = (__int16)v19[9];
    ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a8 + 24), v19[11], v27, a6);
    if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
    {
      v34 = ScoreAllowBackoff_updateNodeInSequence;
      ++*(_DWORD *)(a8 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
      ++v48[1];
      v35 = *((_DWORD *)v19 + 3);
      v36 = *((unsigned __int8 *)v19 + 20);
      v37 = ((v35 >> 8) - v36) << 8;
      if (v35 < 256)
      {
        v38 = v37 | v36;
        v39 = ScoreAllowBackoff_updateNodeInSequence;
      }
      else
      {
        v38 = v37 - ((v37 >> 31) & (v37 >> 8));
        v39 = (v35 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
      }
      *((_DWORD *)v19 + 3) = v38;
      v19[4] = v39;
      v19[5] = ScoreAllowBackoff_updateNodeInSequence;
      if (v29 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
      {
        v40 = *((_DWORD *)v19 + 1);
        v63 = 0;
        v41 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v49, &v63);
        v42 = v63;
        *(_DWORD *)(v63 + 4) = v40;
        *(_DWORD *)(v42 + 8) = v54;
        *(_DWORD *)v42 = v59;
        *(_WORD *)(v42 + 12) = v29;
        *((_DWORD *)v19 + 1) = v41;
      }
      if (v34 <= v50)
      {
        if (v34 >= v50)
        {
          v12 = a4;
          if (v19[11] < v47[11])
          {
            v50 = v34;
            v47 = v19;
          }
          goto LABEL_36;
        }
        v50 = v34;
        v47 = v19;
      }
    }
    else
    {
      *((_DWORD *)v19 + 2) = 1310740000;
    }
    v12 = a4;
LABEL_36:
    ++v14;
    if (v18 == 2)
      goto LABEL_48;
    v15 = v58 + v60 + v32;
    v43 = v15 - v23;
    if (v43 < 0)
    {
      v43 = v23 - v15;
      v59 = v62;
      v21 = v61;
      v62 = v26;
      v61 = v25;
    }
    else
    {
      v59 = v26;
      v21 = v25;
      v15 = v23;
    }
    if (v15 + v43 <= v12)
    {
      v63 = 0;
      v44 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v49, &v63);
      v45 = v63;
      *(_DWORD *)(v63 + 4) = v21;
      *(_DWORD *)(v45 + 8) = v61;
      *(_DWORD *)v45 = v62;
      *(_WORD *)(v45 + 12) = v43;
      v21 = v44;
    }
    v17 = v25;
    v13 = v26;
    v20 = v23;
    v16 = (2 * v57) & 0x66;
    goto LABEL_43;
  }
  v14 = 0;
  v55 = 0;
  v50 = 20000;
LABEL_48:
  *a11 += v14;
  *a12 += v55;
  if (v50 != 20000)
  {
    if (*(_DWORD *)(a8 + 224) >= v50)
      BestData::newOrTiedBestNode(a8 + 192, v50, (const Node *)v47, 0);
    ++*(_DWORD *)(a8 + 4 * (v50 + 5000) + 320);
    ++*v48;
  }
  return v50;
}

uint64_t Node::scoreNodeWithPatternNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _BYTE *a10, HmmNet *a11)
{
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  if (a2)
    v16 = *(_DWORD *)a2;
  else
    v16 = -2;
  v17 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  if (a4 == 1)
  {
    v18 = -1;
  }
  else
  {
    v19 = a9 + a8 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
    v18 = v19 - v17;
    if (a4 == 32)
      v20 = -1;
    else
      v20 = v19 - v17;
    if (v20 < 0)
    {
      v21 = *(__int16 *)(a1 + 16);
      if (v21 >= 0)
        v22 = v21 << 8;
      else
        v22 = 255 * v21;
      *(_DWORD *)(a1 + 12) = v22;
      v16 = *(_DWORD *)a1;
      v23 = *(_DWORD *)(a1 + 4);
      v18 = -v20;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = a3;
      *a10 = 1;
      v17 = v19;
      a3 = v23;
    }
  }
  ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a7 + 24), *(unsigned __int16 *)(a1 + 22), v17, a6);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a5)
  {
    v25 = ScoreAllowBackoff_updateNodeInSequence;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(unsigned __int8 *)(a1 + 20);
    v28 = ((v26 >> 8) - v27) << 8;
    v29 = v28 | v27;
    v30 = v28 - ((v28 >> 31) & (v28 >> 8));
    v31 = (v26 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
    v32 = v26 < 256;
    if (v26 >= 256)
      v33 = v30;
    else
      v33 = v29;
    *(_DWORD *)(a1 + 12) = v33;
    if (v32)
      v34 = ScoreAllowBackoff_updateNodeInSequence;
    else
      v34 = v31;
    *(_WORD *)(a1 + 8) = v34;
    *(_WORD *)(a1 + 10) = ScoreAllowBackoff_updateNodeInSequence;
    if (a4 == 33 && (int)ScoreAllowBackoff_updateNodeInSequence + v18 <= a5)
    {
      v35 = *(_DWORD *)(a1 + 4);
      v40 = 0;
      v36 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(a7 + 302936, &v40);
      v37 = v40;
      *(_DWORD *)(v40 + 4) = v35;
      *(_DWORD *)(v37 + 8) = a3;
      *(_DWORD *)v37 = v16;
      *(_WORD *)(v37 + 12) = v18;
      *(_DWORD *)(a1 + 4) = v36;
    }
    if (*(_DWORD *)(a7 + 224) >= (int)v25)
      BestData::newOrTiedBestNode(a7 + 192, v25, (const Node *)a1, a11);
    v38 = a7 + 4 * (v25 + 5000);
    ++*(_DWORD *)(v38 + 151392);
    ++*(_DWORD *)(a7 + 302468);
    ++*(_DWORD *)(v38 + 320);
    ++*(_DWORD *)(a7 + 302464);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1310740000;
    return 20000;
  }
  return v25;
}

uint64_t Node::scoreNodeSuccessorsSkipManyNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int16 v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v51;
  unsigned __int16 *v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v12 = a8;
  v13 = a4;
  v52 = a1;
  v53 = (_DWORD *)(a8 + 302464);
  v14 = *(__int16 *)(a2 + 8);
  if (v14 == 20000)
    v15 = -2;
  else
    v15 = *(_DWORD *)a2;
  if (a7 < 1)
  {
    v16 = 0;
    v61 = 0;
    v55 = 20000;
    goto LABEL_55;
  }
  v61 = 0;
  v16 = 0;
  v65 = a10 + a9;
  if (!a3)
    v14 = 20000;
  v66 = v14;
  if (a3)
    v17 = 32;
  else
    v17 = 0;
  v18 = *(_DWORD *)(a2 + 4);
  v54 = a8 + 302936;
  v19 = a7 + 1;
  v20 = a1;
  v55 = 20000;
  v64 = v18;
  v21 = v15;
  while (1)
  {
    v22 = (__int16)v20[5];
    if (v22 <= v13)
    {
      if ((__int16)v20[4] <= v13)
      {
        v23 = v20[4];
        v24 = 17;
      }
      else
      {
        v23 = 20000;
        v20[4] = 20000;
        v24 = 1;
      }
      ++v61;
      v17 |= v24;
    }
    else
    {
      *((_DWORD *)v20 + 2) = 1310740000;
      v23 = 20000;
      v22 = 20000;
    }
    if ((v17 & 0x61) != 0)
      break;
LABEL_51:
    --v19;
    v20 += 12;
    if (v19 <= 1)
      goto LABEL_55;
  }
  v62 = v18;
  v63 = v15;
  v25 = *(_DWORD *)v20;
  v26 = *((_DWORD *)v20 + 1);
  v27 = *((unsigned __int8 *)v20 + 12) + v22;
  v28 = v66 + v65 + *((char *)v20 + 21);
  v29 = v28 - v27;
  if (v28 - v27 < 0)
  {
    v29 = v27 - v28;
    *(_DWORD *)v20 = v21;
    *((_DWORD *)v20 + 1) = v64;
    v30 = (__int16)v20[8];
    if (v30 >= 0)
      v31 = v30 << 8;
    else
      v31 = 255 * v30;
    *((_DWORD *)v20 + 3) = v31;
    v27 = v28;
    v60 = v25;
    v64 = v26;
  }
  else
  {
    v60 = v21;
  }
  v32 = (__int16)v20[9];
  ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), v20[11], v27, a6);
  if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
  {
    v34 = v12;
    v35 = ScoreAllowBackoff_updateNodeInSequence;
    ++*(_DWORD *)(v34 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
    ++v53[1];
    v36 = *((_DWORD *)v20 + 3);
    v37 = *((unsigned __int8 *)v20 + 20);
    v38 = ((v36 >> 8) - v37) << 8;
    if (v36 < 256)
    {
      v39 = v38 | v37;
      v40 = ScoreAllowBackoff_updateNodeInSequence;
    }
    else
    {
      v39 = v38 - ((v38 >> 31) & (v38 >> 8));
      v40 = (v36 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
    }
    *((_DWORD *)v20 + 3) = v39;
    v20[4] = v40;
    v20[5] = ScoreAllowBackoff_updateNodeInSequence;
    if (v29 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
    {
      v51 = *((_DWORD *)v20 + 1);
      v67 = 0;
      v41 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v54, &v67);
      v42 = v67;
      *(_DWORD *)(v67 + 4) = v51;
      *(_DWORD *)(v42 + 8) = v64;
      *(_DWORD *)v42 = v60;
      *(_WORD *)(v42 + 12) = v29;
      *((_DWORD *)v20 + 1) = v41;
    }
    if (v35 <= v55 && (v35 < v55 || v20[11] < v52[11]))
    {
      v55 = v35;
      v52 = v20;
    }
  }
  else
  {
    *((_DWORD *)v20 + 2) = 1310740000;
  }
  ++v16;
  if (v19 != 2)
  {
    v43 = v23;
    v44 = v66 + v65 + v32;
    if (v23 <= v44)
    {
      v21 = v25;
    }
    else
    {
      v43 = v66 + v65 + v32;
      v21 = v63;
    }
    if (v23 <= v44)
      v45 = v26;
    else
      v45 = v62;
    if (v23 > v44)
    {
      v46 = v26;
    }
    else
    {
      v25 = v63;
      v46 = v62;
    }
    if (v23 > v44)
      v47 = v23 - v44;
    else
      v47 = v44 - v23;
    v66 = v43;
    v13 = a4;
    if (v47 + v43 <= a4)
    {
      v67 = 0;
      v48 = v21;
      DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v54, &v67);
      v21 = v48;
      v49 = v67;
      *(_DWORD *)(v67 + 4) = v45;
      *(_DWORD *)(v49 + 8) = v46;
      *(_DWORD *)v49 = v25;
      *(_WORD *)(v49 + 12) = v47;
    }
    v17 = (2 * v17) & 0x66 | v17 & 0x40;
    v15 = v21;
    v64 = v45;
    v18 = v45;
    v12 = a8;
    goto LABEL_51;
  }
  v12 = a8;
LABEL_55:
  *a11 += v16;
  *a12 += v61;
  if (v55 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v55)
      BestData::newOrTiedBestNode(v12 + 192, v55, (const Node *)v52, 0);
    ++*(_DWORD *)(v12 + 4 * (v55 + 5000) + 320);
    ++*v53;
  }
  return v55;
}

void NodeNetNode::NodeNetNode(NodeNetNode *this, char a2)
{
  *((_QWORD *)this + 1) = 0x100000001;
  *((_DWORD *)this + 4) = 1310740000;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_DWORD *)this + 7) = -65536;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *(_QWORD *)this = &off_24C213AD0;
  *((_BYTE *)this + 42) = a2;
}

void NodeNetNode::~NodeNetNode(NodeNetNode *this)
{
  PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32));
}

{
  PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32));
}

{
  PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32));
  JUMPOUT(0x20BD149A8);
}

void PredStruct::~PredStruct(PredStruct *this)
{
  _QWORD *v2;

  if (*((unsigned __int16 *)this + 4) >= 2u)
  {
    v2 = *(_QWORD **)this;
    if (*(_QWORD *)this)
      MemChunkFree(v2, 0);
  }
}

uint64_t NodeNetNode::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    if (a2 == 3)
      v4 = 0;
    else
      v4 = 12;
    v5 = sizeObject(a1 + 20, a2) + v4;
  }
  else
  {
    v5 = 24;
    if (a2 == 3)
      v5 = 0;
  }
  if (a2 == 3)
  {
    v6 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a1 + 40);
    if (v7 <= 1)
      v8 = 0;
    else
      v8 = 8 * v7;
    v9 = v8 + 16;
    v6 = v8 + 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v6 = v9;
  }
  return v6 + v5;
}

uint64_t NodeNetNode::fill(uint64_t this, const NodeNetNode *a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)a2 + 8;
  if (!a2)
    v2 = 0;
  *(_DWORD *)(this + 16) = *((_DWORD *)v2 + 2);
  *(_DWORD *)(this + 8) = *(_DWORD *)v2;
  *(_DWORD *)(this + 12) = *((_DWORD *)v2 + 1);
  v3 = *(_QWORD *)(v2 + 12);
  *(_DWORD *)(this + 28) = *((_DWORD *)v2 + 5);
  *(_QWORD *)(this + 20) = v3;
  return this;
}

uint64_t NodeNetNode::fillAsEpsilon(NodeNetNode *this, const NodeNetNode *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  char v7;
  int v8;

  result = (*(uint64_t (**)(NodeNetNode *, const NodeNetNode *))(*(_QWORD *)this + 24))(this, a2);
  v4 = *((unsigned __int8 *)this + 28);
  v5 = v4 + *((__int16 *)this + 12);
  v6 = v5 << 8;
  if (v5 < 0)
  {
    v7 = (v5 + v4 < 0) ^ __OFADD__(v5, v4) | (v5 + v4 == 0);
    v8 = 255 * v5;
    v6 |= v4;
    if (!v7)
      v6 = v8;
  }
  *((_DWORD *)this + 5) = v6;
  return result;
}

uint64_t NodeNetNode::scoreNodeBWBack(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, int a5, int a6, HmmNet *a7)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;

  v8 = *(_DWORD *)(a1 + 20);
  v9 = *(unsigned __int8 *)(a1 + 28);
  v10 = (v8 >> 8) - v9;
  if (v8 <= 255)
    v11 = *(unsigned __int8 *)(a1 + 28) | (v10 << 8);
  else
    v11 = 255 * v10;
  if (v10 >= 0)
    v12 = v10 << 8;
  else
    v12 = v11;
  *(_DWORD *)(a1 + 20) = v12;
  v13 = *(__int16 *)(a2 + 8);
  v14 = *(__int16 *)(a1 + 18);
  v15 = 20000;
  if (v13 == 20000)
  {
    if (v14 == 20000)
      return v15;
  }
  else
  {
    v16 = *(__int16 *)(a1 + 24);
    if (v16 < 0)
      v17 = *(char *)(a1 + 29) + v16;
    else
      v17 = *(char *)(a1 + 29);
    LODWORD(v15) = a6 + a5 + v17 + v13;
  }
  v18 = v12 >> 8;
  if (v18 <= -v9)
    v19 = -v9;
  else
    v19 = v18;
  if (v19 >= 0 || v14 == 20000)
    v21 = 0;
  else
    v21 = v19;
  v22 = v14 - v21;
  if ((int)v15 >= v22)
  {
    LODWORD(v15) = v22;
  }
  else
  {
    v23 = *(__int16 *)(a1 + 24);
    if (v23 >= 0)
      v24 = v23 << 8;
    else
      v24 = 255 * v23;
    *(_DWORD *)(a1 + 20) = v24;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 26);
    v19 = v24 >> 8;
    *a3 = 1;
  }
  *(_WORD *)(a1 + 18) = v15;
  v25 = v15;
  if (*(_DWORD *)(a4 + 224) >= (int)v15)
  {
    BestData::newOrTiedBestNode(a4 + 192, v15, (const Node *)(a1 + 8), a7);
    v25 = *(_WORD *)(a1 + 18);
  }
  *(_WORD *)(a1 + 16) = v15 + (v19 & ~(unsigned __int16)(v19 >> 31));
  return v25;
}

uint64_t NodeNetNode::addAcousticsToScores(NodeNetNode *this, int a2, PelScoreCache **a3)
{
  uint64_t result;
  __int16 v6;
  int v7;
  int v8;

  result = PelScoreCache::getScoreNoBackoff(a3[3], *((unsigned __int16 *)this + 15));
  v6 = result;
  v7 = result + *((__int16 *)this + 9);
  *((_WORD *)this + 9) += result;
  if (*((_DWORD *)a3 + 56) >= v7)
    result = BestData::newOrTiedBestNode((uint64_t)(a3 + 24), v7, (NodeNetNode *)((char *)this + 8), 0);
  v8 = *((unsigned __int16 *)this + 8);
  if (v8 != 20000)
    *((_WORD *)this + 8) = v8 + v6;
  return result;
}

uint64_t *PredStruct::getBestPredWithTrace(unsigned __int16 *a1, _DWORD *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t *v5;
  int v6;
  _DWORD *v7;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;

  v4 = a1[4];
  v5 = *(uint64_t **)a1;
  v6 = v4 - 1;
  if (v4 == 1)
  {
    *a2 = *((_DWORD *)v5 + 1);
    return *(uint64_t **)a1;
  }
  else
  {
    v12 = *v5;
    v11 = v5 + 1;
    v10 = (_DWORD *)v12;
    v13 = *(__int16 *)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4);
    do
    {
      v15 = *(__int16 *)(*v11 + 8) - v13;
      if (v15 < 0)
      {
        v15 = v13 - *(__int16 *)(*v11 + 8);
        v7 = (_DWORD *)*v11;
        v13 = *(__int16 *)(*v11 + 8);
        v16 = *(unsigned int *)(*v11 + 4);
      }
      else
      {
        v7 = v10;
        v16 = v14;
        v10 = (_DWORD *)*v11;
        LODWORD(v14) = *(_DWORD *)(*v11 + 4);
      }
      if (v15 + v13 <= a4)
      {
        v17 = *v10;
        v22 = 0;
        v18 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(a3, &v22);
        v19 = v22;
        *(_DWORD *)(v22 + 4) = v16;
        *(_DWORD *)(v19 + 8) = v14;
        *(_DWORD *)v19 = v17;
        *(_WORD *)(v19 + 12) = v15;
        v14 = v18;
      }
      else
      {
        v14 = v16;
      }
      ++v11;
      v10 = v7;
      --v6;
    }
    while (v6);
    *a2 = v14;
  }
  return (uint64_t *)v7;
}

void TraceNode::~TraceNode(TraceNode *this)
{
  PredStruct *v1;

  *(_QWORD *)this = &off_24C219EF8;
  v1 = (TraceNode *)((char *)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  PredStruct::~PredStruct(v1);
}

{
  PredStruct *v1;

  *(_QWORD *)this = &off_24C219EF8;
  v1 = (TraceNode *)((char *)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  PredStruct::~PredStruct(v1);
  JUMPOUT(0x20BD149A8);
}

uint64_t TraceNode::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = NodeNetNode::sizeObject(a1, a2);
  v5 = sizeObject<SeederBlock>(a1 + 64, a2);
  v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v6 = 8;
  v7 = 12;
  if (a2 == 3)
    v8 = 0;
  else
    v8 = 12;
  if (a2 == 3)
    v6 = 0;
  if (*(_QWORD *)(a1 + 88))
    v9 = (a2 & 0xFFFFFFFE) == 2;
  else
    v9 = 1;
  if (v9)
    v7 = 0;
  return (v8 | (a2 != 3)) + 4 * (a2 != 3) + v4 + v5 + v7 + v6;
}

uint64_t TraceNode::fillTraceNode(uint64_t result, __int16 a2, uint64_t *a3, __int16 a4)
{
  uint64_t v4;

  v4 = *a3;
  *(_DWORD *)(result + 52) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(result + 44) = v4;
  *(_WORD *)(result + 80) = a4;
  *(_WORD *)(result + 56) = a2;
  return result;
}

uint64_t TraceNode::fill(uint64_t this, const NodeNetNode *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)a2 + 8;
  if (!a2)
    v2 = 0;
  *(_DWORD *)(this + 16) = *((_DWORD *)v2 + 2);
  *(_DWORD *)(this + 8) = *(_DWORD *)v2;
  *(_DWORD *)(this + 12) = *((_DWORD *)v2 + 1);
  v3 = *(_QWORD *)(v2 + 12);
  *(_DWORD *)(this + 28) = *((_DWORD *)v2 + 5);
  *(_QWORD *)(this + 20) = v3;
  *(_WORD *)(this + 56) = *((_WORD *)a2 + 28);
  v4 = *(_QWORD *)((char *)a2 + 44);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *(_QWORD *)(this + 44) = v4;
  *(_WORD *)(this + 80) = *((_WORD *)a2 + 40);
  return this;
}

unint64_t SeederStruct::updateSeederList(unint64_t result, signed int a2, uint64_t a3)
{
  unint64_t v4;
  int32x2_t v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  signed int *v10;
  signed int v11;
  signed int v12;
  int v13;
  int v14;
  int32x2_t *v15;
  int v16;
  int32x2_t *v17;

  v4 = result;
  v5 = (int32x2_t)(a3 - 8);
  v6 = *(_DWORD *)(result + 8);
  if (!v6)
  {
    v17 = *(int32x2_t **)result;
    *v17 = v5;
    v17[1].i32[0] = a2;
    v17[1].i32[1] = a2;
    v16 = 1;
LABEL_13:
    *(_DWORD *)(v4 + 8) = v16;
    return result;
  }
  v7 = v6 - 1;
  v8 = *(int32x2_t **)result;
  v9 = *(_QWORD *)result + 16 * v7;
  v12 = *(_DWORD *)(v9 + 12);
  v10 = (signed int *)(v9 + 12);
  v11 = v12;
  v13 = v12 - 1;
  if (v12 < a2)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (v14 != a2 || *(_QWORD *)&v8[2 * v7] != *(_QWORD *)&v5)
  {
    if (*(_DWORD *)(result + 12) == v6 && v6 >> 1 != -1 && v6 + (v6 >> 1) + 1 >= v6)
    {
      result = DgnArray<DgnPrimArray<double>>::reallocElts(result, (v6 >> 1) + 1, 0);
      v8 = *(int32x2_t **)v4;
      v6 = *(_DWORD *)(v4 + 8);
    }
    v15 = &v8[2 * v6];
    *v15 = v5;
    v15[1] = vdup_n_s32(a2);
    v16 = v6 + 1;
    goto LABEL_13;
  }
  *v10 = a2;
  return result;
}

uint64_t TraceNode::scoreNode(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, _BYTE *a7, PelScoreCache **a8, int a9, int a10, _DWORD *a11, HmmNet *a12)
{
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v18;

  *a7 = 0;
  v14 = a1 + 8;
  v15 = *(__int16 *)(a1 + 18);
  if (*(_WORD *)(a2 + 8) == 20000)
  {
    *(_QWORD *)(a1 + 88) = v14;
    if (v15 == 20000)
    {
      return 20000;
    }
    else
    {
      ++*a11;
      return Node::updateNodeOneBest1((Node *)(a1 + 8), *(unsigned __int8 *)(a1 + 20) + v15, a4, a5, a8, a12);
    }
  }
  else
  {
    ++*a11;
    if (v15 == 20000)
    {
      *a7 = 1;
      *(_QWORD *)(a1 + 88) = a2;
      return Node::scoreNodeInactiveCurrActiveSeed(a1 + 8, a2, a4, a5, a8, a9, a10, a12);
    }
    else
    {
      result = Node::scoreNodeActiveCurrActiveSeed(a1 + 8, a2, a4, a5, a7, a8, a9, a10, a12);
      if (*a7)
        v18 = a2;
      else
        v18 = v14;
      *(_QWORD *)(a1 + 88) = v18;
    }
  }
  return result;
}

uint64_t Node::scoreNodeInactiveCurrActiveSeed(uint64_t a1, uint64_t a2, int a3, int a4, PelScoreCache **a5, int a6, int a7, HmmNet *a8)
{
  int v8;
  int v9;
  int v10;

  v8 = a7 + a6 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
  v9 = *(__int16 *)(a1 + 16);
  if (v9 >= 0)
    v10 = v9 << 8;
  else
    v10 = 255 * v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
  return Node::updateNodeOneBest1((Node *)a1, v8, a3, a4, a5, a8);
}

unint64_t TraceNode::maybeSeedNode(unint64_t this, int a2, signed int a3)
{
  if (*(__int16 *)(this + 18) <= a2)
    return SeederStruct::updateSeederList(this + 64, a3, *(_QWORD *)(this + 88));
  return this;
}

void TraceExternalOutPort::seedOutPortForTraceBack2(TraceExternalOutPort *this, int a2, signed int a3, NetMgr *a4)
{
  int v4;
  uint64_t BestPred;
  char *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;

  v4 = *((__int16 *)this + 4);
  if (v4 <= a2)
  {
    BestPred = PredStruct::getBestPred((TraceExternalOutPort *)((char *)this + 16));
    v9 = (char *)this + 32;
    SeederStruct::updateSeederList((unint64_t)this + 32, a3, BestPred);
    v10 = *((_DWORD *)this + 10);
    if (!v10
      || ((v11 = *(_DWORD *)(*(_QWORD *)v9 + 8),
           v12 = *(_DWORD *)(*(_QWORD *)v9 + 16 * (v10 - 1) + 12),
           v11 != a3)
        ? (v13 = v12 == v11)
        : (v13 = 0),
          v13))
    {
      v14 = -1;
    }
    else if (v12 >= v11)
    {
      v14 = a3 - v11;
    }
    else
    {
      v14 = v11 - a3;
    }
    v15 = *((__int16 *)a4 + 124);
    while (*((_DWORD *)this + 14) < v14)
      BitArray::add((TraceExternalOutPort *)((char *)this + 48), 0);
    BitArray::add((TraceExternalOutPort *)((char *)this + 48), v4 <= v15);
  }
}

__n128 NodeData::maskedCwidac@<Q0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  __n128 result;

  v2 = *a1;
  *(_DWORD *)a2 = *a1;
  if (v2 >> 25 == 126)
  {
    result.n128_u64[0] = *(_QWORD *)(a1 + 3);
    *(_QWORD *)(a2 + 12) = result.n128_u64[0];
    *(_DWORD *)(a2 + 20) = a1[5];
    *(_QWORD *)(a2 + 4) = 0x3FFFLL;
  }
  else
  {
    *(_DWORD *)(a2 + 4) = a1[1];
    result = *(__n128 *)(a1 + 2);
    *(__n128 *)(a2 + 8) = result;
  }
  return result;
}

uint64_t NodeData::NodeData(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, __int16 a5, __int16 a6)
{
  uint64_t v10;
  int v11;
  int v12;

  v10 = *a4;
  *(_WORD *)(a1 + 8) = *((_WORD *)a4 + 4);
  *(_QWORD *)a1 = v10;
  *(_BYTE *)(a1 + 10) = *((_BYTE *)a4 + 10);
  *(_BYTE *)(a1 + 11) = *((_BYTE *)a4 + 11);
  NodeData::maskedCwidac(a3, a1 + 12);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 40) = a5;
  *(_WORD *)(a1 + 42) = a6;
  v11 = *(int *)(a2 + 12) >> 8;
  v12 = *(unsigned __int8 *)(a2 + 20);
  if (v11 <= -v12)
    v11 = -v12;
  *(_WORD *)(a1 + 44) = v11;
  return a1;
}

uint64_t sizeObject<SeederBlock>(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 12;
  else
    result = 16;
  if (a2 == 3)
    return 0;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    v5 = 1;
    if ((int)v4 > 0)
      v5 = v4 + 1;
    if (a2)
      result *= v5;
    else
      result *= v5 + (*(_DWORD *)(a1 + 12) - v4);
  }
  return result;
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v5 = *(_DWORD *)(a1 + 32);
    do
    {
      if (v5 == *(_DWORD *)(a1 + 8))
      {
        DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(a1);
        v5 = *(_DWORD *)(a1 + 32);
      }
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v5++);
      *(_DWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 16) = v4;
    }
    while (!v4);
  }
  result = *(unsigned int *)(v4 + 8);
  *a2 = v4;
  *(_QWORD *)(a1 + 16) = **(_QWORD **)(a1 + 16);
  return result;
}

unint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;

  result = (unint64_t)MemChunkAlloc(*(unsigned int *)(a1 + 24), 0);
  v3 = result;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 << 16;
  if (v4 == *(_DWORD *)(a1 + 12))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
    v4 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v3;
  *(_DWORD *)(a1 + 8) = v4 + 1;
  v6 = *(_DWORD *)(a1 + 28);
  if (v6 < 2)
  {
    v8 = v5;
    v9 = v3;
  }
  else
  {
    v7 = v6 + 1;
    do
    {
      v8 = v5 + 1;
      *(_DWORD *)(v3 + 8) = v5;
      v9 = v3 + 16;
      *(_QWORD *)v3 = v3 + 16;
      --v7;
      v3 += 16;
      ++v5;
    }
    while (v7 > 2);
  }
  *(_DWORD *)(v9 + 8) = v8;
  *(_QWORD *)v9 = 0;
  return result;
}

void errorBadCollationId(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/collarra.cpp", 33, (uint64_t)"fileutil/collarra", 2, (uint64_t)"%d", a7, a8, a1);
}

uint64_t TLattice::TLattice(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  TAllocator *v16;
  TAllocator *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *Registry;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  _QWORD *v61;
  std::string *v62;
  const char *v63;
  _QWORD *v64;
  std::string *v65;
  const char *v66;
  _QWORD *exception;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  _QWORD *v81;
  std::string *v82;
  const char *v83;
  _QWORD *v84;
  std::string *v85;
  const char *v86;
  _QWORD *v87;
  std::string *v88;
  const char *v89;
  _QWORD *v90;
  std::string *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  void *v99[2];
  uint64_t v100;
  _BYTE __p[24];
  uint64_t v102;
  _OWORD v103[6];
  void *v104[4];

  v15 = (uint64_t)a1;
  *a1 = &off_24C2197F8;
  a1[1] = -1;
  v16 = (TAllocator *)(a1 + 3);
  TFsa::TFsa((TFsa *)(a1 + 3));
  v17 = (TAllocator *)(v15 + 264);
  TAllocator::TAllocator((TAllocator *)(v15 + 264), 2048);
  *(_QWORD *)(v15 + 256) = a9;
  *(_QWORD *)(v15 + 16) = a8;
  *(_BYTE *)(v15 + 248) = a7;
  std::vector<TState *>::vector(v104, a4);
  v97 = a6;
  if (a3)
  {
    v96 = v15;
    v22 = 0;
    while (1)
    {
      v23 = TAllocator::allocate(v17, 144);
      v24 = *(_QWORD *)(*a2 + 8 * v22);
      v25 = *(_QWORD *)v24;
      v26 = *(__int32 **)(v24 + 8);
      v27 = *(_DWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 40);
      v29 = *(_QWORD *)(v24 + 48);
      v30 = *(_QWORD *)(v24 + 56);
      v31 = *(_OWORD *)(v24 + 112);
      v103[2] = *(_OWORD *)(v24 + 96);
      v103[3] = v31;
      v32 = *(_OWORD *)(v24 + 144);
      v103[4] = *(_OWORD *)(v24 + 128);
      v103[5] = v32;
      v33 = *(_OWORD *)(v24 + 80);
      v103[0] = *(_OWORD *)(v24 + 64);
      v103[1] = v33;
      TLatticeTransData::TLatticeTransData((uint64_t)v23, v17, v25, v26, v27, v28, v29, v30, v103);
      v38 = *(_QWORD *)(*a2 + 8 * v22);
      v39 = *(_QWORD *)(v38 + 24);
      if (v39 >= a4)
      {
        tknPrintf("Error: The source index (%llu) is larger than the given state count (%llu)\n", v34, v35, v36, v37, *(_QWORD *)(v38 + 24), a4);
        std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v100) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v99;
          v102 = v100;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v102 >= 0)
          v66 = &__p[8];
        else
          v66 = *(const char **)&__p[8];
        conditionalAssert(v66, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 58, v58, v59);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v102) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v100) < 0)
          operator delete(v99[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v68 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v77 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v77;
        }
        *exception = &unk_24C214BA0;
      }
      v40 = *(_QWORD *)(v38 + 32);
      if (v40 >= a4)
      {
        tknPrintf("Error: The target index (%llu) is larger than the given state count (%llu)\n", v34, v35, v36, v37, v40, a4);
        std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v100) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v99;
          v102 = v100;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v102 >= 0)
          v63 = &__p[8];
        else
          v63 = *(const char **)&__p[8];
        conditionalAssert(v63, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 65, v56, v57);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v102) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v100) < 0)
          operator delete(v99[0]);
        v64 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v64 = aPpx;
        v65 = (std::string *)(v64 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v76 = *(_OWORD *)__p;
          v64[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v76;
        }
        *v64 = &unk_24C214BA0;
      }
      v41 = (_QWORD *)*((_QWORD *)v104[0] + v39);
      v42 = (_QWORD *)*((_QWORD *)v104[0] + v40);
      if (v41)
      {
        if (!v42)
          goto LABEL_9;
      }
      else
      {
        v41 = TFsa::newState(v16, 0);
        *((_QWORD *)v104[0] + *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v22) + 24)) = v41;
        if (!v42)
        {
LABEL_9:
          v42 = TFsa::newState(v16, 0);
          *((_QWORD *)v104[0] + *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v22) + 32)) = v42;
        }
      }
      TFsa::newTrans(v16, (uint64_t)v41, (uint64_t)v42, (uint64_t)v23);
      if (a3 == ++v22)
      {
        v15 = v96;
        goto LABEL_14;
      }
    }
  }
  if (!a4)
  {
    tknPrintf("Error: Lattice needs at least one state\n", v18, v19, v20, v21);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      v102 = v100;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v102 >= 0)
      v89 = &__p[8];
    else
      v89 = *(const char **)&__p[8];
    conditionalAssert(v89, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 92, v78, v79);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v102) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v100) < 0)
      operator delete(v99[0]);
    v90 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v90 = aPpx;
    v91 = (std::string *)(v90 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v95 = *(_OWORD *)__p;
      v90[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v95;
    }
    *v90 = &unk_24C214BA0;
  }
  v47 = TFsa::newState(v16, 0);
  *(_QWORD *)v104[0] = v47;
LABEL_14:
  v48 = 0;
  do
  {
    v49 = *((_QWORD *)v104[0] + v48);
    if (!v49)
    {
      tknPrintf("Error: State was not set properly while creating lattice\n", v43, v44, v45, v46);
      std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v100) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v99;
        v102 = v100;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v102 >= 0)
        v60 = &__p[8];
      else
        v60 = *(const char **)&__p[8];
      conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 109, v54, v55);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v102) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v100) < 0)
        operator delete(v99[0]);
      v61 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v61 = aPpx;
      v62 = (std::string *)(v61 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v75 = *(_OWORD *)__p;
        v61[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v75;
      }
      *v61 = &unk_24C214BA0;
    }
    if (!*(_QWORD *)(v49 + 16))
      TFsa::addExtremity((uint64_t)v16, v49, 0);
    if (!*(_QWORD *)(v49 + 24))
      TFsa::addExtremity((uint64_t)v16, v49, 1u);
    ++v48;
  }
  while (a4 != v48);
  if (*(_QWORD *)(v15 + 64) != a4)
  {
    tknPrintf("Error: Expected state count to be %llu not %llu\n", v43, v44, v45, v46, *(_QWORD *)(v15 + 64), a4);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      v102 = v100;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v102 >= 0)
      v80 = &__p[8];
    else
      v80 = *(const char **)&__p[8];
    conditionalAssert(v80, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 117, v69, v70);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v102) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v100) < 0)
      operator delete(v99[0]);
    v81 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v81 = aPpx;
    v82 = (std::string *)(v81 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v92 = *(_OWORD *)__p;
      v81[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v92;
    }
    *v81 = &unk_24C214BA0;
  }
  v50 = *(_QWORD *)(v15 + 224);
  if (v50 != a5)
  {
    tknPrintf("Error: Expected starting state count to be %llu not %llu\n", v43, v44, v45, v46, a5, v50);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      v102 = v100;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v102 >= 0)
      v83 = &__p[8];
    else
      v83 = *(const char **)&__p[8];
    conditionalAssert(v83, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 124, v71, v72);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v102) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v100) < 0)
      operator delete(v99[0]);
    v84 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v84 = aPpx;
    v85 = (std::string *)(v84 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v93 = *(_OWORD *)__p;
      v84[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v93;
    }
    *v84 = &unk_24C214BA0;
  }
  v51 = *(_QWORD *)(v15 + 232);
  if (v51 != v97)
  {
    tknPrintf("Error: Expected accepting state count to be %llu not %llu\n", v43, v44, v45, v46, v97, v51);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      v102 = v100;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v102 >= 0)
      v86 = &__p[8];
    else
      v86 = *(const char **)&__p[8];
    conditionalAssert(v86, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 131, v73, v74);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v102) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v100) < 0)
      operator delete(v99[0]);
    v87 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v87 = aPpx;
    v88 = (std::string *)(v87 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v94 = *(_OWORD *)__p;
      v87[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v94;
    }
    *v87 = &unk_24C214BA0;
  }
  Registry = (_QWORD *)TRegisterable<TLattice>::getRegistry();
  *(_QWORD *)(v15 + 8) = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, v15);
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  return v15;
}

{
  return TLattice::TLattice(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_2098E2A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  int v29;
  TFsa *v30;
  TAllocator *v31;
  void *v32;
  uint64_t v33;
  void *v35;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      v35 = *(void **)(v33 - 112);
      if (v35)
      {
        *(_QWORD *)(v33 - 104) = v35;
        operator delete(v35);
      }
      TAllocator::clear(v31);
      TFsa::~TFsa(v30);
      TRegisterable<TLattice>::~TRegisterable(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

_QWORD *TRegisterable<TLattice>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C214990;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TLattice>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

void TLattice::~TLattice(TLattice *this)
{
  TAllocator *v2;

  *(_QWORD *)this = &off_24C2197F8;
  v2 = (TLattice *)((char *)this + 264);
  TAllocator::clear((TLattice *)((char *)this + 264));
  TAllocator::clear(v2);
  TFsa::~TFsa((TLattice *)((char *)this + 24));
  TRegisterable<TLattice>::~TRegisterable(this);
}

{
  TLattice::~TLattice(this);
  JUMPOUT(0x20BD149A8);
}

void TLatticeTransData::TLatticeTransData(uint64_t a1, TLatticeTransData *this, uint64_t a3, __int32 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  size_t v16;
  uint64_t v17;
  __int32 *v18;
  char *v19;

  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a8;
  v11 = a9[1];
  *(_OWORD *)(a1 + 48) = *a9;
  *(_OWORD *)(a1 + 64) = v11;
  v12 = a9[2];
  v13 = a9[3];
  v14 = a9[5];
  *(_OWORD *)(a1 + 112) = a9[4];
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  if (a3 == 3)
  {
    *(_DWORD *)(a1 + 8) = (_DWORD)a4;
  }
  else if (a3 == 2)
  {
    v16 = wcslen(a4);
    if ((v16 + 1) >> 62)
      v17 = -1;
    else
      v17 = 4 * (v16 + 1);
    v18 = (__int32 *)TAllocator::allocate(this, v17);
    wcscpy(v18, a4);
    *(_QWORD *)(a1 + 8) = v18;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v19 = (char *)TAllocator::allocate(this, 8);
    strcpy(v19, "?");
    *(_QWORD *)(a1 + 8) = v19;
  }
}

void TRegisterable<TLattice>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TLattice>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t TRegisterable<TLattice>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TLattice>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TLattice>::getRegistry(void)::s_registry;
}

void sub_2098E2E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<TState *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2098E2EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void WaveDecoder::saveWaveDecoder(WaveDecoder *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    WaveDecoder::saveWaveDecoderText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Cu, a5, "MRWDB!?", 18, 1);
    v10 = 0;
    writeObject<short>((uint64_t)v8, (uint64_t)this, &v10);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 16, &v10);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Cu, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void WaveDecoder::saveWaveDecoderText(WaveDecoder *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15[2];
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v21);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v21, (uint64_t)a2, 0x6Eu, a3);
  v19 = 0;
  v20 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v21, sWDT_Versions, (uint64_t)&v19, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v21, "WaveDataDecodeTableText", (_QWORD *)(v19 + 8 * (v20 - 1)));
  v15[0] = 0;
  v11 = realloc_array(0, v15, 0xCuLL, 0, 0, 1);
  v16 = v15[0];
  v17 = 3;
  v18 = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v15, 3);
  DgnString::operator=((DgnString *)v15[0], "Type");
  *v16 = 0;
  DgnString::operator=((DgnString *)((char *)v15[0] + 16), "OneByteFeature");
  v16[1] = 3;
  DgnString::operator=((DgnString *)((char *)v15[0] + 32), "TwoByteFeature");
  v16[2] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v21, (uint64_t)&v16, (uint64_t)v15);
  if (*((_DWORD *)this + 2))
  {
    v12 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "Linear");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v12);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*(_QWORD *)this + 2 * v12));
      DgnTextFileWriter::writeNextLine(v21);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 2));
  }
  if (*((_DWORD *)this + 6))
  {
    v13 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "Mu_Law");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v13);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*((_QWORD *)this + 2) + 2 * v13));
      DgnTextFileWriter::writeNextLine(v21);
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 6));
  }
  if (*((_DWORD *)this + 10))
  {
    v14 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "A_Law");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v14);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*((_QWORD *)this + 4) + 2 * v14));
      DgnTextFileWriter::writeNextLine(v21);
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 10));
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v21);
}

void sub_2098E3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t WaveDecoder::sizeObject(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 12;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = 16;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v2 = 24;
    }
    else
    {
      v4 = a1[2];
      if ((int)v4 <= 0)
        v5 = 0;
      else
        v5 = 2 * v4;
      v6 = a1[6];
      if ((int)v6 <= 0)
        v7 = 0;
      else
        v7 = 2 * v6;
      v2 = v5 + 2 * v3 + v7;
      v8 = a1[10];
      if ((int)v8 >= 1)
        v3 += 2 * v8;
    }
  }
  return v3 + v2;
}

void createFormatter(const TDataManager *a1, TDataManager *a2, TLexicon *a3, TTokenizer *a4)
{
  TFormatter *v8;

  v8 = (TFormatter *)operator new();
  TFormatter::TFormatter(v8, a1, a2, a3, a4);
}

void sub_2098E3388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x10B1C40A822F00CLL);
  _Unwind_Resume(a1);
}

void TFormatter::TFormatter(TFormatter *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4, TTokenizer *a5)
{
  TItnParamManager *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  TDataManager **v11;
  int IntVar;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD *exception;
  std::string *v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28[3];
  _QWORD v29[4];

  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a3;
  *(_QWORD *)this = &off_24C213640;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = &unk_24C213730;
  TAllocator::TAllocator((TFormatter *)((char *)this + 64), 2048);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  v7 = (TItnParamManager *)operator new();
  TItnParamManager::TItnParamManager(v7, (TLocaleInfo *)(*((_QWORD *)this + 4) + 240));
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 6) = v7;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 4;
  memset(v29, 0, 24);
  *((_QWORD *)v7 + 17) = 1;
  v8 = *((_QWORD *)this + 4);
  ++*(_DWORD *)(v8 + 360);
  v9 = *((_QWORD *)this + 2);
  if (v9)
    ++*(_DWORD *)(v9 + 120);
  v10 = (const char *)(v8 + 72);
  if (*(char *)(v8 + 95) < 0)
    v10 = *(const char **)v10;
  v11 = (TDataManager **)TInputModel::TInputModel((TInputModel *)v28, a2, *((const TDataManager **)this + 3), 0, v10);
  IntVar = TInputModel::getIntVar(v11, "ItnVersion", 1);
  *((_QWORD *)this + 21) = IntVar;
  if ((IntVar - 5) > 0xFFFFFFFB)
  {
    if (!*((_QWORD *)this + 3))
    {
      v17 = operator new();
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)v17 = v17 + 8;
      *((_QWORD *)this + 7) = v17;
      TDataSaver::load((uint64_t **)v17, a2, "ItnTag", 0);
      TDataSaver::load(*((uint64_t ***)this + 7), a2, "ItnGrammar", 0);
      TDataSaver::load(*((uint64_t ***)this + 7), a2, "ItnGrammar2", 0);
      TDataSaver::load(*((uint64_t ***)this + 7), a2, "ItnCompounderFeatureConfig", 0);
      TDataSaver::load(*((uint64_t ***)this + 7), a2, "ItnCompounderWordFlag", 0);
      TDataSaver::load(*((uint64_t ***)this + 7), a2, "ItnCompounderRules", 0);
    }
    if (TInputModel::isVar((TInputModel *)v28, "ItnParam"))
      TInputModel::getStringVar(v28, (uint64_t)"ItnParam", (uint64_t)v29);
    TItnParamManager::initializeParamConfigs(*((_QWORD *)this + 6));
    TInputModel::getStringVar(v28, (uint64_t)"ItnTag", (uint64_t)v29);
  }
  tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v13, v14, v15, v16, IntVar, "ItnVersion", 1, 4);
  std::string::basic_string[abi:ne180100]<0>(v24, &byte_209A88803);
  *(_QWORD *)v26 = aPpx;
  if (SHIBYTE(v25) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v26[8], (const std::string::value_type *)v24[0], (std::string::size_type)v24[1]);
  }
  else
  {
    *(_OWORD *)&v26[8] = *(_OWORD *)v24;
    v27 = v25;
  }
  *(_QWORD *)v26 = &unk_24C214BA0;
  if (v27 >= 0)
    v20 = &v26[8];
  else
    v20 = *(const char **)&v26[8];
  conditionalAssert(v20, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/formatter.cpp", 495, v18, v19);
  *(_QWORD *)v26 = aPpx;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)&v26[8]);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v26, &byte_209A88803);
  *exception = aPpx;
  v22 = (std::string *)(exception + 1);
  if ((v26[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v26, *(std::string::size_type *)&v26[8]);
  }
  else
  {
    v23 = *(_OWORD *)v26;
    exception[3] = *(_QWORD *)&v26[16];
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  *exception = &unk_24C214BA0;
}

void sub_2098E4304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, TAllocator *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,void *a44,int a45,__int16 a46,char a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  TFormatter *v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  if (a48 < 0)
  {
    operator delete(__p);
    if ((v53 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        TFormatter::freeMemory(v52);
        __cxa_rethrow();
      }
      *(_QWORD *)(v54 + 136) = a16;
      if (*(char *)(v56 - 89) < 0)
        operator delete(*(void **)(v56 - 112));
      TAllocator::clear(a14);
      TRegisterable<TIFormatter>::~TRegisterable(v52);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

void sub_2098E4560()
{
  __cxa_end_catch();
  JUMPOUT(0x2098E4568);
}

uint64_t TFormatter::freeMemory(TFormatter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  TGrammarManager2 *v7;
  TGrammarManager2 *v8;
  uint64_t v9;
  uint64_t v10;
  TDataSaver *v11;
  uint64_t v12;
  uint64_t result;

  --*(_DWORD *)(*((_QWORD *)this + 4) + 360);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    --*(_DWORD *)(v2 + 120);
  v3 = *((_QWORD *)this + 19);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 18);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 20);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 15);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (TGrammarManager2 *)*((_QWORD *)this + 13);
  if (v7)
  {
    TGrammarManager2::~TGrammarManager2(v7);
    MEMORY[0x20BD149A8]();
  }
  v8 = (TGrammarManager2 *)*((_QWORD *)this + 14);
  if (v8)
  {
    TGrammarManager2::~TGrammarManager2(v8);
    MEMORY[0x20BD149A8]();
  }
  v9 = *((_QWORD *)this + 17);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 16);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (TDataSaver *)*((_QWORD *)this + 7);
  if (v11)
  {
    TDataSaver::~TDataSaver(v11);
    MEMORY[0x20BD149A8]();
  }
  v12 = *((_QWORD *)this + 6);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void TFormatter::~TFormatter(TFormatter *this)
{
  *(_QWORD *)this = &off_24C213640;
  *((_QWORD *)this + 5) = &unk_24C213730;
  TFormatter::freeMemory(this);
  TAllocator::clear((TFormatter *)((char *)this + 64));
  TRegisterable<TIFormatter>::~TRegisterable(this);
}

{
  TFormatter::~TFormatter(this);
  JUMPOUT(0x20BD149A8);
}

void `non-virtual thunk to'TFormatter::~TFormatter(TFormatter *this)
{
  TFormatter::~TFormatter((TFormatter *)((char *)this - 40));
}

{
  TFormatter::~TFormatter((TFormatter *)((char *)this - 40));
  JUMPOUT(0x20BD149A8);
}

uint64_t TFormatter::save(TFormatter *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6;
  const char *v7;
  void *p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29[3];
  void *__p;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  _BYTE v35[152];
  _QWORD *v36[3];
  _BYTE v37[16];
  unint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  void *v45;
  char v46;
  _QWORD v47[20];

  v47[19] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 4);
  v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0)
    v7 = *(const char **)v7;
  TOutputModel::TOutputModel((TOutputModel *)v37, a2, a3, v7, *((const TDataManager **)this + 3));
  if (a2)
  {
    TDataManager::setIntVar(a2, "ItnVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    TOutputStream::TOutputStream(v36, &v39, (uint64_t)"ItnParam", *((_QWORD *)this + 4) + 240);
    TParamManager::save(*((_QWORD **)this + 6), v36, 0);
    std::stringbuf::str();
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v32 >= 0)
      v9 = HIBYTE(v32);
    else
      v9 = v31;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "ItnParam", p_p, v9);
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    v10 = MEMORY[0x24BEDB800];
    v11 = MEMORY[0x24BEDB848];
    if (v38 == 1 || TItnRuleManager::isCustomized(*((TItnRuleManager **)this + 15)))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      TOutputStream::TOutputStream(v29, &__p, (uint64_t)"ItnRule", *((_QWORD *)this + 4) + 240);
      TItnRuleManager::save(*((_QWORD *)this + 15), v29, 0);
      std::stringbuf::str();
      if ((v28 & 0x80u) == 0)
        v12 = &v26;
      else
        v12 = v26;
      if ((v28 & 0x80u) == 0)
        v13 = v28;
      else
        v13 = v27;
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "ItnRule", v12, v13);
      if ((char)v28 < 0)
        operator delete(v26);
      __p = *(void **)v10;
      *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v10 + 24);
      v31 = v11 + 16;
      if (v34 < 0)
        operator delete(v33);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v35);
    }
    if (v38 == 1)
    {
      v14 = (_QWORD *)*((_QWORD *)this + 7);
      if (v14)
        TDataSaver::save(v14, a2);
    }
    v39 = *(const char **)v10;
    *(const char **)((char *)&v39 + *((_QWORD *)v39 - 3)) = *(const char **)(v10 + 24);
    v40 = (const char *)(v11 + 16);
    if (v46 < 0)
      operator delete(v45);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v47);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "ItnVersion");
    if (v38 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
      TOutputStream::TOutputStream(v36, &v39, (uint64_t)"ItnParam", *((_QWORD *)this + 4) + 240);
      TParamManager::save(*((_QWORD **)this + 6), v36, 1);
      std::stringbuf::str();
      if (v32 >= 0)
        v15 = &__p;
      else
        v15 = __p;
      if (v32 >= 0)
        v16 = HIBYTE(v32);
      else
        v16 = v31;
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "ItnParam", v15, v16);
      if (SHIBYTE(v32) < 0)
        operator delete(__p);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      TOutputStream::TOutputStream(v29, &__p, (uint64_t)"ItnRule", *((_QWORD *)this + 4) + 240);
      TItnRuleManager::save(*((_QWORD *)this + 15), v29, 1);
      std::stringbuf::str();
      if ((v28 & 0x80u) == 0)
        v17 = &v26;
      else
        v17 = v26;
      if ((v28 & 0x80u) == 0)
        v18 = v28;
      else
        v18 = v27;
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "ItnRule", v17, v18);
      if ((char)v28 < 0)
        operator delete(v26);
      v19 = (_QWORD *)*((_QWORD *)this + 7);
      if (v19)
        TDataSaver::save(v19, a3);
      v20 = (void *)*MEMORY[0x24BEDB800];
      __p = v20;
      v21 = *(void **)(MEMORY[0x24BEDB800] + 24);
      *(void **)((char *)&__p + *((_QWORD *)v20 - 3)) = v21;
      v22 = MEMORY[0x24BEDB848] + 16;
      v31 = MEMORY[0x24BEDB848] + 16;
      if (v34 < 0)
        operator delete(v33);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v35);
      v39 = (const char *)v20;
      *(const char **)((char *)&v39 + *((_QWORD *)v20 - 3)) = (const char *)v21;
      v40 = (const char *)v22;
      if (v46 < 0)
        operator delete(v45);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v47);
    }
    if (!*((_QWORD *)this + 7))
    {
      v23 = 0;
      __p = 0;
      v31 = 0;
      v39 = "ItnTag";
      v40 = "ItnGrammar";
      v41 = "ItnGrammar2";
      v42 = "ItnCompounderFeatureConfig";
      v43 = "ItnCompounderWordFlag";
      v44 = "ItnCompounderRules";
      v32 = 0;
      do
      {
        v24 = (uint64_t)(&v39)[v23];
        if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v24, 0, 0))
        {
          TDataManager::getStringVar(*((_QWORD *)this + 3), v24, (uint64_t)&__p);
        }
        ++v23;
      }
      while (v23 != 6);
      if (SHIBYTE(v32) < 0)
        operator delete(__p);
    }
  }
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_2098E4D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::ostringstream::~ostringstream((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void TFormatter::importChanges(TFormatter *this, const TDataManager *a2, TLexicon *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const TDataManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int IntVar;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  TItnParamManager *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  __int32 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  const __int32 *v34;
  const __int32 *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const __int32 *v48;
  const __int32 *v49;
  TDataManager *v50;
  TDataManager *v51;
  TDataManager **v52;
  _QWORD *v53;
  _QWORD *v54;
  TDataManager *v55;
  TDataManager *v56;
  TDataManager **v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  _QWORD *exception;
  std::string *v62;
  __int128 v63;
  _QWORD *v64;
  TDataManager *v65;
  __int128 v66;
  _BYTE v67[1024];
  char v68;
  _BYTE __s[24];
  _BYTE v70[15];
  char v71;
  _BYTE v72[24];
  _QWORD v73[7];
  char v74;
  _QWORD *v75;
  TDataManager *v76;
  void *__p[2];
  uint64_t v78;
  _BYTE v79[1024];
  unint64_t v80[130];

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v8 = v7;
  v9 = v5;
  v80[128] = *MEMORY[0x24BDAC8D0];
  __p[1] = 0;
  __p[0] = 0;
  v78 = 0;
  if (!v7)
    v8 = *(_QWORD *)(v5 + 32);
  v10 = (const char *)(v8 + 72);
  if (*(char *)(v8 + 95) < 0)
    v10 = *(const char **)v10;
  TInputModel::TInputModel((TInputModel *)&v65, v6, 0, 1, v10);
  IntVar = TInputModel::getIntVar(&v65, "ItnVersion", 1);
  if ((IntVar - 5) <= 0xFFFFFFFB)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v12, v13, v14, v15, IntVar, "ItnVersion", 1, 4);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)v72 = aPpx;
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v72[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      *(_OWORD *)&v72[8] = *(_OWORD *)__s;
      v73[0] = *(_QWORD *)&__s[16];
    }
    *(_QWORD *)v72 = &unk_24C214BA0;
    if (v73[0] >= 0)
      v60 = &v72[8];
    else
      v60 = *(const char **)&v72[8];
    conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/formatter.cpp", 742, v58, v59);
    *(_QWORD *)v72 = aPpx;
    if (SHIBYTE(v73[0]) < 0)
      operator delete(*(void **)&v72[8]);
    if ((__s[23] & 0x80000000) != 0)
      operator delete(*(void **)__s);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v72, &byte_209A88803);
    *exception = aPpx;
    v62 = (std::string *)(exception + 1);
    if ((v72[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)v72, *(std::string::size_type *)&v72[8]);
    }
    else
    {
      v63 = *(_OWORD *)v72;
      exception[3] = *(_QWORD *)&v72[16];
      *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
    }
    *exception = &unk_24C214BA0;
  }
  v16 = (TItnParamManager *)operator new();
  TItnParamManager::TItnParamManager(v16, (TLocaleInfo *)(v8 + 240));
  if (TInputModel::isVar((TInputModel *)&v65, "ItnParam"))
    TInputModel::getStringVar((uint64_t *)&v65, (uint64_t)"ItnParam", (uint64_t)__p);
  TItnParamManager::initializeParamConfigs((uint64_t)v16);
  if (TInputModel::isVar((TInputModel *)&v65, "ItnRule"))
    TInputModel::getStringVar((uint64_t *)&v65, (uint64_t)"ItnRule", (uint64_t)__p);
  TParamManager::begin((uint64_t)v16, &v76);
  TParamManager::begin(*(_QWORD *)(v9 + 48), &v75);
  *(_QWORD *)v72 = v73;
  *(_OWORD *)&v72[8] = xmmword_209A57DD0;
  v74 = 1;
  *(_QWORD *)__s = v70;
  *(_OWORD *)&__s[8] = xmmword_209A57DD0;
  v71 = 1;
  TParamManager::getConfigHandles((uint64_t)v16, v80, 0x400uLL);
  if ((unint64_t)(((uint64_t)(*((_QWORD *)v16 + 10) - *((_QWORD *)v16 + 9)) >> 5) - 1) >= 0x400)
    v17 = 1024;
  else
    v17 = ((uint64_t)(*((_QWORD *)v16 + 10) - *((_QWORD *)v16 + 9)) >> 5) - 1;
  if (v17)
  {
    v18 = (uint64_t *)v79;
    v19 = v80;
    v20 = v17;
    do
    {
      v65 = (TDataManager *)v67;
      v66 = xmmword_209A57DD0;
      v68 = 1;
      v21 = *v19++;
      v22 = *((_QWORD *)v16 + 9) + 32 * v21;
      v23 = (int *)(v22 + 8);
      if (*(char *)(v22 + 31) < 0)
        v23 = *(int **)v23;
      TBuffer<wchar_t>::assign((uint64_t)&v65, v23);
      v24 = *(_QWORD *)(v9 + 48);
      if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
      {
        if (v68)
        {
          LODWORD(v64) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), (int *)&v64, 1uLL);
          v25 = (__int32 *)v65;
          --*((_QWORD *)&v66 + 1);
        }
        else
        {
          v25 = (__int32 *)v65;
          if ((_QWORD)v66)
            *((_DWORD *)v65 + v66 - 1) = 0;
        }
      }
      else
      {
        v25 = (__int32 *)v65;
        *((_DWORD *)v65 + *((_QWORD *)&v66 + 1)) = 0;
      }
      *v18 = TParamManager::getConfig(v24, v25);
      if (v68 && v65 != (TDataManager *)v67 && v65)
        MEMORY[0x20BD149A8]();
      ++v18;
      --v20;
    }
    while (v20);
  }
  while (1)
  {
    TParamManager::end((uint64_t)v16, &v65);
    if (v76 == v65)
      break;
    TParamManager::end(*(_QWORD *)(v9 + 48), &v64);
    if (v75 == v64)
      break;
    v26 = *((_QWORD *)v76 + 5);
    if (v26 && (v27 = v26 - 1, v28 = *((_QWORD *)v16 + 3), v27 < (*((_QWORD *)v16 + 4) - v28) >> 3))
      v29 = *(char **)(v28 + 8 * v27);
    else
      v29 = 0;
    v30 = v75[5];
    if (v30
      && (v31 = v30 - 1,
          v32 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 24),
          v31 < (*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) - v32) >> 3))
    {
      v33 = *(char **)(v32 + 8 * v31);
    }
    else
    {
      v33 = 0;
    }
    v34 = (const __int32 *)(v29 + 16);
    if (v29[39] < 0)
      v34 = *(const __int32 **)v34;
    v35 = (const __int32 *)(v33 + 16);
    if (v33[39] < 0)
      v35 = *(const __int32 **)v35;
    v36 = wcscmp(v34, v35);
    if (v36)
    {
      if ((v36 & 0x80000000) == 0)
      {
        v37 = v75;
        v38 = (_QWORD *)v75[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v37[2];
            v40 = *v39 == (_QWORD)v37;
            v37 = v39;
          }
          while (!v40);
        }
        goto LABEL_87;
      }
      v55 = v76;
      v56 = (TDataManager *)*((_QWORD *)v76 + 1);
      if (v56)
      {
        do
        {
          v57 = (TDataManager **)v56;
          v56 = *(TDataManager **)v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (TDataManager **)*((_QWORD *)v55 + 2);
          v40 = *v57 == v55;
          v55 = (TDataManager *)v57;
        }
        while (!v40);
      }
      v76 = (TDataManager *)v57;
    }
    else
    {
      if (v17)
      {
        v41 = v80;
        v42 = (uint64_t *)v79;
        v43 = v17;
        do
        {
          v45 = *v42++;
          v44 = v45;
          if (v45 != -1)
          {
            v46 = *v41;
            if (*v41 == 1
              || (v47 = *((_QWORD *)v29 + 14), ((v47 >> (v46 + 33)) & 1) != 0)
              || ((v47 >> (v46 + 9)) & 1) != 0)
            {
              (*(void (**)(char *))(*(_QWORD *)v29 + 24))(v29);
              (*(void (**)(char *, uint64_t, _BYTE *))(*(_QWORD *)v33 + 16))(v33, v44, __s);
              if (*(_QWORD *)&v72[16] >= *(_QWORD *)&v72[8])
              {
                if (v74)
                {
                  LODWORD(v65) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)v72, *(unint64_t *)&v72[16], (int *)&v65, 1uLL);
                  v48 = *(const __int32 **)v72;
                  --*(_QWORD *)&v72[16];
                }
                else
                {
                  v48 = *(const __int32 **)v72;
                  if (*(_QWORD *)&v72[8])
                    *(_DWORD *)(*(_QWORD *)v72 + 4 * *(_QWORD *)&v72[8] - 4) = 0;
                }
              }
              else
              {
                v48 = *(const __int32 **)v72;
                *(_DWORD *)(*(_QWORD *)v72 + 4 * *(_QWORD *)&v72[16]) = 0;
              }
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v71)
                {
                  LODWORD(v65) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)&v65, 1uLL);
                  v49 = *(const __int32 **)__s;
                  --*(_QWORD *)&__s[16];
                }
                else
                {
                  v49 = *(const __int32 **)__s;
                  if (*(_QWORD *)&__s[8])
                    *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                v49 = *(const __int32 **)__s;
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              if (!wcscmp(v48, v49))
              {
                (*(void (**)(char *, unint64_t, _BYTE *))(*(_QWORD *)v29 + 16))(v29, *v41, v72);
                if (*(_QWORD *)&v72[16] >= *(_QWORD *)&v72[8])
                {
                  if (v74)
                  {
                    LODWORD(v65) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)v72, *(unint64_t *)&v72[16], (int *)&v65, 1uLL);
                    --*(_QWORD *)&v72[16];
                  }
                  else if (*(_QWORD *)&v72[8])
                  {
                    *(_DWORD *)(*(_QWORD *)v72 + 4 * *(_QWORD *)&v72[8] - 4) = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)v72 + 4 * *(_QWORD *)&v72[16]) = 0;
                }
                (*(void (**)(char *, uint64_t))(*(_QWORD *)v33 + 32))(v33, v44);
              }
            }
          }
          ++v41;
          --v43;
        }
        while (v43);
      }
      v50 = v76;
      v51 = (TDataManager *)*((_QWORD *)v76 + 1);
      if (v51)
      {
        do
        {
          v52 = (TDataManager **)v51;
          v51 = *(TDataManager **)v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (TDataManager **)*((_QWORD *)v50 + 2);
          v40 = *v52 == v50;
          v50 = (TDataManager *)v52;
        }
        while (!v40);
      }
      v76 = (TDataManager *)v52;
      v53 = v75;
      v54 = (_QWORD *)v75[1];
      if (v54)
      {
        do
        {
          v39 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v53[2];
          v40 = *v39 == (_QWORD)v53;
          v53 = v39;
        }
        while (!v40);
      }
LABEL_87:
      v75 = v39;
    }
  }
  (*(void (**)(TItnParamManager *))(*(_QWORD *)v16 + 8))(v16);
  if (v71 && *(_BYTE **)__s != v70 && *(_QWORD *)__s)
    MEMORY[0x20BD149A8]();
  if (v74 && *(_QWORD **)v72 != v73 && *(_QWORD *)v72)
    MEMORY[0x20BD149A8]();
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
}

void sub_2098E5824()
{
  __break(1u);
}

void sub_2098E5980()
{
  __cxa_end_catch();
  JUMPOUT(0x2098E5A30);
}

void sub_2098E598C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2098E5A40);
}

void sub_2098E59A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  if (LOBYTE(STACK[0x470]))
    TSegmenter::findSegmentEnd((uint64_t *)va, v11);
  JUMPOUT(0x2098E59D0);
}

void sub_2098E59C4()
{
  JUMPOUT(0x2098E5A40);
}

void sub_2098E59CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v17;

  if (LOBYTE(STACK[0x890]))
  {
    if (STACK[0x478] != a14 && STACK[0x478] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0xCB0]))
  {
    v17 = STACK[0x898];
    if (STACK[0x898] != a15)
    {
      if (v17)
        MEMORY[0x20BD149A8](v17, 0x1000C4052888210);
    }
  }
  if (SLOBYTE(STACK[0xCDF]) < 0)
    operator delete((void *)STACK[0xCC8]);
  _Unwind_Resume(a1);
}

uint64_t **TBuffer<wchar_t>::~TBuffer(uint64_t **a1)
{
  uint64_t *v2;

  if (*((_BYTE *)a1 + 1048))
  {
    v2 = *a1;
    if (*a1 != (uint64_t *)(a1 + 3) && v2 != 0)
      MEMORY[0x20BD149A8]();
  }
  return a1;
}

uint64_t TFormatter::makeBlockForWord(TFormatter *this, const TWord *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int32 **v6;
  __int32 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ActiveConfigHandle;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[1809];
  char v21;
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[1024];
  char v25;
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[1024];
  char v29;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v8 = v5;
  v26 = v28;
  v27 = xmmword_209A57DD0;
  v29 = 1;
  TWord::getWrittenForm(v6, (uint64_t)&v26);
  v22 = v24;
  v23 = xmmword_209A57DD0;
  v25 = 1;
  TWord::getSpokenForm(v7, (uint64_t)&v22);
  v9 = *(_QWORD *)(v8 + 48);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 3792));
  if (*(_BYTE *)(v9 + TParam::getValidConfig((TParam *)(v9 + 3792), ActiveConfigHandle) + 3944))
    v11 = *((_QWORD *)&v27 + 1) == 0;
  else
    v11 = 1;
  if (v11)
  {
    v18 = v20;
    v19 = xmmword_209A57DD0;
    v21 = 1;
    (*(void (**)(_QWORD, __int32 *, _QWORD, _BYTE **))(**(_QWORD **)(v8 + 120) + 48))(*(_QWORD *)(v8 + 120), *v7, 0, &v18);
    if (*((_QWORD *)&v19 + 1)
      && (v12 = *(_QWORD *)v18) != 0
      && (v13 = *(_QWORD *)(*(_QWORD *)(v8 + 120) + 32), v12 <= (*(_QWORD *)(*(_QWORD *)(v8 + 120) + 40) - v13) >> 3))
    {
      v14 = *(_QWORD *)(v13 + 8 * v12 - 8);
    }
    else
    {
      v14 = 0;
    }
    if (v21 && v18 != v20 && v18)
      MEMORY[0x20BD149A8]();
  }
  else
  {
    v14 = 0;
  }
  v15 = operator new();
  if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
  {
    if (v29)
    {
      LODWORD(v18) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), (int *)&v18, 1uLL);
      v16 = v26;
      --*((_QWORD *)&v27 + 1);
    }
    else
    {
      v16 = v26;
      if ((_QWORD)v27)
        *(_DWORD *)&v26[4 * v27 - 4] = 0;
    }
  }
  else
  {
    v16 = v26;
    *(_DWORD *)&v26[4 * *((_QWORD *)&v27 + 1)] = 0;
  }
  if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
  {
    if (v25)
    {
      LODWORD(v18) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), (int *)&v18, 1uLL);
      --*((_QWORD *)&v23 + 1);
    }
    else if ((_QWORD)v23)
    {
      *(_DWORD *)&v22[4 * v23 - 4] = 0;
    }
  }
  else
  {
    *(_DWORD *)&v22[4 * *((_QWORD *)&v23 + 1)] = 0;
  }
  TBlock::TBlock(v15, v16, 0, v14);
  if (v25 && v22 != v24 && v22)
    MEMORY[0x20BD149A8]();
  if (v29 && v26 != v28 && v26)
    MEMORY[0x20BD149A8]();
  return v15;
}

void sub_2098E5D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  va_list va;

  va_start(va, a3);
  if (LOBYTE(STACK[0x828]))
    TFormatter::makeBlockForWord((uint64_t *)va, v3);
  if (LOBYTE(STACK[0xC48]))
  {
    v8 = STACK[0x830];
    if (STACK[0x830] != v6)
    {
      if (v8)
        MEMORY[0x20BD149A8](v8, 0x1000C4052888210);
    }
  }
  if (*(_BYTE *)(v5 + 1048))
  {
    if (STACK[0xC50] != v4 && STACK[0xC50] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TFormatter::splitPattern(uint64_t *a1, __int32 *a2, uint64_t *a3, uint64_t *a4)
{
  __int32 *v6;
  __int32 *v8;
  uint64_t v9;
  uint64_t BlockForWord;
  std::wstring *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  std::wstring *v17;
  std::wstring *v18;
  uint64_t v19;
  std::wstring *v20;
  std::wstring *p_str;
  const TWord *HeadClone;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::wstring *v26;
  uint64_t v27;
  __int32 v28;
  uint64_t v29;
  uint64_t v30;
  std::wstring v31;
  std::wstring __str;
  std::wstring v33;

  v6 = a2;
  if (*a2)
  {
    *a3 = 0;
    *a4 = 0;
    do
    {
      if (!wcsncmp(v6, (const __int32 *)&unk_209A766F8, 1uLL))
      {
        v12 = v6 + 1;
        v13 = wcsstr(v6 + 1, (const __int32 *)&unk_209A76700);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__str, v12);
        std::wstring::basic_string(&v33, &__str, 0, v13 - v12, (std::allocator<wchar_t> *)&v31);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v14 = v13 + 1;
        v6 = v13 + 1;
        v15 = 1;
        do
        {
          if (!*v6)
            break;
          if (!wcsncmp(v6, (const __int32 *)&unk_209A766F8, 1uLL))
            v16 = 1;
          else
            v16 = !wcsncmp(v6, (const __int32 *)&unk_209A76708, 1uLL) ? -1 : 0;
          ++v6;
          v15 += v16;
        }
        while (v15);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v31, v14);
        std::wstring::basic_string(&__str, &v31, 0, ((char *)v6 - (char *)v14 - 4) >> 2, (std::allocator<wchar_t> *)&v30);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v33;
        else
          v17 = (std::wstring *)v33.__r_.__value_.__r.__words[0];
        if (!wcscmp((const __int32 *)v17, dword_209A76710))
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::wstring *)__str.__r_.__value_.__r.__words[0];
          HeadClone = (const TWord *)TLexicon::findHeadClone(a1[4], (__int32 *)p_str);
          if (!HeadClone)
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = &__str;
            else
              v26 = (std::wstring *)__str.__r_.__value_.__r.__words[0];
            HeadClone = (const TWord *)TLexicon::addTempWord(a1[4], (int *)v26, 0, 0, 0);
          }
          BlockForWord = TFormatter::makeBlockForWord((TFormatter *)a1, HeadClone, v23, v24, v25);
        }
        else
        {
          v30 = 0;
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v33;
          else
            v18 = (std::wstring *)v33.__r_.__value_.__r.__words[0];
          v30 = (*(uint64_t (**)(uint64_t, std::wstring *))(*(_QWORD *)a1[17] + 16))(a1[17], v18);
          v31.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v31.__r_.__value_.__l.__size_;
          for (*(_OWORD *)&v31.__r_.__value_.__r.__words[1] = 0uLL;
                v30 != -1;
                v30 = *(_QWORD *)(TTagManager::getTag(a1[17], v30) + 32))
          {
            std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>((uint64_t **)&v31, (unint64_t *)&v30, &v30);
          }
          v19 = operator new();
          BlockForWord = v19;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &__str;
          else
            v20 = (std::wstring *)__str.__r_.__value_.__r.__words[0];
          TBlock::TBlock(v19, v20, 1, 0);
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v31, (_QWORD *)v31.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
      }
      else
      {
        v8 = wcsstr(v6, (const __int32 *)&unk_209A766F8);
        if (!v8)
          v8 = &v6[wcslen(v6)];
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__str, v6);
        std::wstring::basic_string(&v33, &__str, 0, v8 - v6, (std::allocator<wchar_t> *)&v31);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v9 = operator new();
        BlockForWord = v9;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v33;
        else
          v11 = (std::wstring *)v33.__r_.__value_.__r.__words[0];
        TBlock::TBlock(v9, v11, 0, 0);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        v6 = v8;
      }
      if (*a3)
      {
        v27 = *a4;
        *(_QWORD *)(*a4 + 144) = BlockForWord;
        if (BlockForWord)
          *(_QWORD *)(BlockForWord + 152) = v27;
      }
      else
      {
        *a3 = BlockForWord;
      }
      v28 = *v6;
      *a4 = BlockForWord;
    }
    while (v28);
  }
  else
  {
    v29 = operator new();
    TBlock::TBlock(v29, v6, 0, 0);
    *a4 = v29;
    *a3 = v29;
  }
}

void sub_2098E61F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  MEMORY[0x20BD149A8](v27, 0x10F2C405D5B575ELL);
  _Unwind_Resume(a1);
}

void TFormatter::assignWordRules(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const void *v35;
  TParam *v36;
  _BOOL4 v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void **v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  TBlock *v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL4 v104;
  uint64_t v105;
  int v107;
  _QWORD *v108;
  TAllocator *v109;
  _BOOL4 v110;
  unint64_t v111;
  char *v112;
  __int128 v113;
  _BYTE v114[2048];
  char v115;
  _QWORD v116[5];
  void *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  _QWORD v122[2];

  v120 = 0;
  v121 = 0;
  v122[0] = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v116[2] = &v117;
  v116[3] = &v117;
  v116[4] = 0;
  v116[0] = 0;
  v116[1] = 0;
  v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, 1uLL);
  v7 = &v5[8 * v6];
  *(_QWORD *)v5 = v116;
  v8 = v5 + 8;
  v10 = v120;
  v9 = v121;
  if (v121 != v120)
  {
    do
    {
      v11 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      *((_QWORD *)v5 - 1) = v11;
      v5 -= 8;
    }
    while (v9 != v10);
    v9 = v120;
  }
  v120 = v5;
  v121 = v8;
  v122[0] = v7;
  if (v9)
    operator delete(v9);
  v121 = v8;
  if (a2)
  {
    v12 = 0;
    v109 = (TAllocator *)(a1 + 64);
    v101 = (TBlock *)a2;
    v13 = a2;
    v102 = a1;
    while (1)
    {
      v14 = v12;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = (uint64_t *)(v15 + 136);
      v17 = *(_QWORD *)(v13 + 8);
      if (v17 == -1)
        goto LABEL_17;
      v18 = *a3 + 112 * v17;
      v19 = *(_QWORD *)(v18 + 80);
      v20 = *(_QWORD *)(v18 + 48);
      if (v19 != -1)
        v20 = v19;
      if (v20 != 9)
      {
        if (v20 == 8)
        {
          v21 = 27280;
          goto LABEL_16;
        }
        if (v20 != 7)
          goto LABEL_17;
      }
      v21 = 27272;
LABEL_16:
      v16 = (uint64_t *)(v15 + v21);
LABEL_17:
      if (!*(_QWORD *)(v13 + 144))
      {
        v23 = 1;
        goto LABEL_21;
      }
      v22 = *(_QWORD *)(v13 + 16);
      if (v22 != -1)
      {
        v23 = *(unsigned __int8 *)(*a3 + 112 * v22 + 32) != 0;
LABEL_21:
        v110 = v23;
        goto LABEL_23;
      }
      v110 = 0;
LABEL_23:
      v24 = v17 != -1 && *(unsigned __int8 *)(*a3 + 112 * v17 + 32) != 0;
      v25 = *v16;
      v12 = (v121 - v120) >> 3;
      v111 = v12;
      v112 = v114;
      v113 = xmmword_209A57DD0;
      v115 = 1;
      v26 = *(uint64_t **)(v13 + 40);
      if (!v26)
        goto LABEL_97;
      if (*((char *)v26 + 23) < 0)
        v26 = (uint64_t *)*v26;
      (*(void (**)(_QWORD, uint64_t *, _QWORD, char **))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), v26, 0, &v112);
      if (!*((_QWORD *)&v113 + 1))
      {
LABEL_97:
        if (v14 >= v12)
          goto LABEL_136;
        while (2)
        {
          v60 = *(_QWORD **)&v120[8 * v14];
          v61 = (_QWORD *)v60[3];
          if (v61[1] == *v61 || (anyTagsMatch(v61, (_QWORD *)(v13 + 120)) & 1) != 0)
          {
            if (*(char *)(v13 + 71) < 0)
            {
              if (!*(_QWORD *)(v13 + 56))
                goto LABEL_104;
LABEL_102:
              v62 = &v117;
              v63 = (_QWORD *)(v13 + 120);
            }
            else
            {
              if (*(_BYTE *)(v13 + 71))
                goto LABEL_102;
LABEL_104:
              v63 = (_QWORD *)v60[2];
              v62 = (void **)v60[3];
            }
            if (!v110 || *v62 == v62[1])
            {
              v64 = v120;
              if (v12 >= (v121 - v120) >> 3)
              {
LABEL_113:
                v67 = TAllocator::allocate(v109, 40);
                v68 = v67;
                v69 = v60[4] + 6;
                v67[2] = v63;
                v67[3] = v62;
                *v67 = 0;
                v67[1] = v60;
                v67[4] = v69;
                v70 = v121;
                if ((unint64_t)v121 >= v122[0])
                {
                  v72 = (v121 - v120) >> 3;
                  if ((unint64_t)(v72 + 1) >> 61)
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  v73 = (uint64_t)(v122[0] - (_QWORD)v120) >> 2;
                  if (v73 <= v72 + 1)
                    v73 = v72 + 1;
                  if (v122[0] - (_QWORD)v120 >= 0x7FFFFFFFFFFFFFF8uLL)
                    v74 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v74 = v73;
                  if (v74)
                    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, v74);
                  else
                    v75 = 0;
                  v76 = &v75[8 * v72];
                  *(_QWORD *)v76 = v68;
                  v71 = v76 + 8;
                  v78 = v120;
                  v77 = v121;
                  if (v121 == v120)
                  {
                    v12 = v111;
                  }
                  else
                  {
                    v12 = v111;
                    do
                    {
                      v79 = *((_QWORD *)v77 - 1);
                      v77 -= 8;
                      *((_QWORD *)v76 - 1) = v79;
                      v76 -= 8;
                    }
                    while (v77 != v78);
                    v77 = v120;
                  }
                  v120 = v76;
                  v121 = v71;
                  v122[0] = &v75[8 * v74];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *(_QWORD *)v121 = v67;
                  v71 = v70 + 8;
                  v12 = v111;
                }
                v121 = v71;
              }
              else
              {
                v65 = v111;
                while (1)
                {
                  v66 = *(_QWORD *)&v64[8 * v65];
                  if (!*(_QWORD *)v66
                    && anyTagsMatch(*(_QWORD **)(v66 + 16), v63)
                    && anyTagsMatch(*(_QWORD **)(v66 + 24), v62))
                  {
                    break;
                  }
                  ++v65;
                  v64 = v120;
                  if (v65 >= (v121 - v120) >> 3)
                    goto LABEL_113;
                }
                v80 = v60[4] + 6;
                v12 = v111;
                if (*(_QWORD *)(v66 + 32) > v80)
                {
                  *(_QWORD *)(v66 + 32) = v80;
                  *(_QWORD *)(v66 + 8) = v60;
                }
              }
            }
          }
          if (++v14 == v12)
            goto LABEL_136;
          continue;
        }
      }
      v27 = 0;
      v108 = (_QWORD *)(v13 + 120);
      v28 = 1;
      v105 = v13;
      v104 = v24;
      v103 = v25;
      do
      {
        v29 = *(_QWORD *)&v112[8 * v27];
        if (v29
          && (v30 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32),
              v29 <= (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) - v30) >> 3))
        {
          v31 = *(_QWORD *)(v30 + 8 * v29 - 8);
        }
        else
        {
          v31 = 0;
        }
        if (!*(_BYTE *)(v31 + 217))
        {
          v32 = *(_QWORD *)(v31 + 192);
          if (v32 == -1
            || (!v32
             || (v33 = v32 - 1,
                 v34 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24),
                 v33 >= (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) - v34) >> 3)
             || (v35 = *(const void **)(v34 + 8 * v33)) == 0
              ? (v36 = 0)
          {
            if (*(_QWORD *)(v31 + 56) == *(_QWORD *)(v31 + 48))
            {
              v28 = v28 & (*(_QWORD *)(v31 + 32) != *(_QWORD *)(v31 + 24));
              if (!v24)
                goto LABEL_51;
            }
            else
            {
              if (v110)
                goto LABEL_36;
              if (!v24)
                goto LABEL_51;
            }
            if (*(_QWORD *)(v31 + 32) != *(_QWORD *)(v31 + 24))
              goto LABEL_36;
LABEL_51:
            if (v14 >= v12)
              goto LABEL_36;
            v107 = v28;
            v38 = v14;
            while (2)
            {
              v39 = *(_QWORD **)&v120[8 * v38];
              if (*(_QWORD *)(v31 + 32) == *(_QWORD *)(v31 + 24)
                || (anyTagsMatch((_QWORD *)(v31 + 24), (_QWORD *)v39[2]) & 1) != 0)
              {
                if (*(_BYTE *)(v31 + 145))
                  goto LABEL_59;
                if ((anyTagsMatch((_QWORD *)v39[3], v108) & 1) != 0 || *(_QWORD *)(v39[3] + 8) == *(_QWORD *)v39[3])
                {
                  v40 = v108;
                  v41 = (_QWORD *)(v31 + 48);
                  if (*(_BYTE *)(v31 + 145))
                  {
LABEL_59:
                    v42 = (_QWORD *)v39[3];
                    v41 = (_QWORD *)(v31 + 48);
                    if (v42[1] != *v42)
                    {
                      if (*(_QWORD *)(v31 + 56) == *(_QWORD *)(v31 + 48))
                      {
                        v41 = (_QWORD *)v39[3];
                      }
                      else
                      {
                        v41 = (_QWORD *)(v31 + 48);
                        if (!anyTagsMatch(v42, (_QWORD *)(v31 + 48)))
                          goto LABEL_92;
                      }
                    }
                    v40 = (_QWORD *)v39[2];
                  }
                  if (!v110 || *v41 == v41[1])
                  {
                    v43 = v120;
                    if (v12 >= (v121 - v120) >> 3)
                    {
LABEL_73:
                      v46 = TAllocator::allocate(v109, 40);
                      v47 = v46;
                      v48 = *(_QWORD *)(v31 + 208) + v39[4];
                      v46[2] = v40;
                      v46[3] = v41;
                      *v46 = v31;
                      v46[1] = v39;
                      v46[4] = v48;
                      v49 = v121;
                      if ((unint64_t)v121 >= v122[0])
                      {
                        v51 = (v121 - v120) >> 3;
                        if ((unint64_t)(v51 + 1) >> 61)
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        v52 = (uint64_t)(v122[0] - (_QWORD)v120) >> 2;
                        if (v52 <= v51 + 1)
                          v52 = v51 + 1;
                        if (v122[0] - (_QWORD)v120 >= 0x7FFFFFFFFFFFFFF8uLL)
                          v53 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v53 = v52;
                        if (v53)
                          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, v53);
                        else
                          v54 = 0;
                        v55 = &v54[8 * v51];
                        *(_QWORD *)v55 = v47;
                        v50 = v55 + 8;
                        v57 = v120;
                        v56 = v121;
                        if (v121 == v120)
                        {
                          v12 = v111;
                        }
                        else
                        {
                          v12 = v111;
                          do
                          {
                            v58 = *((_QWORD *)v56 - 1);
                            v56 -= 8;
                            *((_QWORD *)v55 - 1) = v58;
                            v55 -= 8;
                          }
                          while (v56 != v57);
                          v56 = v120;
                        }
                        v120 = v55;
                        v121 = v50;
                        v122[0] = &v54[8 * v53];
                        if (v56)
                          operator delete(v56);
                      }
                      else
                      {
                        *(_QWORD *)v121 = v46;
                        v50 = v49 + 8;
                        v12 = v111;
                      }
                      v121 = v50;
                    }
                    else
                    {
                      v44 = v111;
                      while (1)
                      {
                        v45 = *(_QWORD *)&v43[8 * v44];
                        if (v31 == *(_QWORD *)v45
                          && anyTagsMatch(*(_QWORD **)(v45 + 16), v40)
                          && anyTagsMatch(*(_QWORD **)(v45 + 24), v41))
                        {
                          break;
                        }
                        ++v44;
                        v43 = v120;
                        if (v44 >= (v121 - v120) >> 3)
                          goto LABEL_73;
                      }
                      v59 = *(_QWORD *)(v31 + 208) + v39[4];
                      v12 = v111;
                      if (*(_QWORD *)(v45 + 32) > v59)
                      {
                        *(_QWORD *)(v45 + 32) = v59;
                        *(_QWORD *)(v45 + 8) = v39;
                      }
                    }
                  }
                }
              }
LABEL_92:
              if (++v38 >= v12)
              {
                a1 = v102;
                v25 = v103;
                v13 = v105;
                v24 = v104;
                v28 = v107;
                break;
              }
              continue;
            }
          }
        }
LABEL_36:
        ++v27;
      }
      while (v27 < *((_QWORD *)&v113 + 1));
      if ((v28 & 1) != 0)
        goto LABEL_97;
LABEL_136:
      if (v115 && v112 != v114 && v112)
        MEMORY[0x20BD149A8]();
      v13 = *(_QWORD *)(v13 + 144);
      if (!v13)
      {
        v81 = v12;
        v8 = v121;
        a2 = (uint64_t)v101;
        goto LABEL_143;
      }
    }
  }
  v81 = 0;
LABEL_143:
  v82 = (v8 - v120) >> 3;
  v83 = v82 > v81;
  v84 = v82 - v81;
  if (v83)
  {
    v85 = 0;
    v86 = (uint64_t *)&v120[8 * v81];
    do
    {
      v87 = *v86;
      if ((!v85 || *(_QWORD *)(v87 + 32) < *(_QWORD *)(v85 + 32))
        && *(_QWORD *)(*(_QWORD *)(v87 + 24) + 8) == **(_QWORD **)(v87 + 24))
      {
        v85 = *v86;
      }
      ++v86;
      --v84;
    }
    while (v84);
    v112 = 0;
    v113 = 0uLL;
    if (v85)
    {
      v97 = 0;
      do
      {
        if ((unint64_t)v97 >= *((_QWORD *)&v113 + 1))
        {
          v88 = (v97 - v112) >> 3;
          if ((unint64_t)(v88 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v89 = (uint64_t)(*((_QWORD *)&v113 + 1) - (_QWORD)v112) >> 2;
          if (v89 <= v88 + 1)
            v89 = v88 + 1;
          if (*((_QWORD *)&v113 + 1) - (_QWORD)v112 >= 0x7FFFFFFFFFFFFFF8uLL)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (v90)
            v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v113 + 8, v90);
          else
            v91 = 0;
          v92 = &v91[8 * v88];
          *(_QWORD *)v92 = v85;
          v97 = v92 + 8;
          v94 = v112;
          v93 = (char *)v113;
          if ((char *)v113 != v112)
          {
            do
            {
              v95 = *((_QWORD *)v93 - 1);
              v93 -= 8;
              *((_QWORD *)v92 - 1) = v95;
              v92 -= 8;
            }
            while (v93 != v94);
            v93 = v112;
          }
          v112 = v92;
          *(_QWORD *)&v113 = v97;
          *((_QWORD *)&v113 + 1) = &v91[8 * v90];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_QWORD *)v97 = v85;
          v97 += 8;
        }
        *(_QWORD *)&v113 = v97;
        v85 = *(_QWORD *)(v85 + 8);
      }
      while (v85);
      v96 = v112;
    }
    else
    {
      v96 = 0;
      v97 = 0;
    }
  }
  else
  {
    v96 = 0;
    v97 = 0;
    v112 = 0;
    v113 = 0uLL;
  }
  if ((unint64_t)(v97 - v96) >= 9)
  {
    v98 = (v97 - v96) >> 3;
    v99 = -2;
    v100 = 1;
    do
    {
      TBlock::setRule(a2, **(const TItnRule ***)&v96[8 * v98 + 8 * v99]);
      a2 = *(_QWORD *)(a2 + 144);
      ++v100;
      v96 = v112;
      v98 = (uint64_t)(v113 - (_QWORD)v112) >> 3;
      --v99;
    }
    while (v100 < v98);
  }
  if (v96)
  {
    *(_QWORD *)&v113 = v96;
    operator delete(v96);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
}

void sub_2098E6C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(_QWORD *)(v1 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::stateToParamConfig(TFormatter *this, const TItnControlState *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)a2 + 5);
  if (v2 == -1)
    v2 = *((_QWORD *)a2 + 1);
  if (v2 != 9)
  {
    if (v2 == 8)
    {
      v3 = *((_QWORD *)this + 6);
      v4 = 27280;
      goto LABEL_8;
    }
    if (v2 != 7)
    {
      v5 = *((_QWORD *)this + 6) + 136;
      return *(_QWORD *)v5;
    }
  }
  v3 = *((_QWORD *)this + 6);
  v4 = 27272;
LABEL_8:
  v5 = v3 + v4;
  return *(_QWORD *)v5;
}

double TFormatter::makeUttState@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  int v42;
  char v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 v48;
  int v49;
  TLocaleInfo *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t i;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v7 = a4;
  v8 = a2;
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  v73 = v11;
  v74 = v11;
  v71 = v11;
  v72 = v11;
  if ((a6 & 4) == 0)
  {
    if (!a4)
    {
LABEL_17:
      a7[2] = v11;
      a7[3] = v11;
      *a7 = v11;
      a7[1] = v11;
      return *(double *)&v11;
    }
    v12 = (_QWORD *)TResultManager::getResult(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 8 * a4 - 8));
    v13 = v12[7];
    v14 = (v12[8] - v13) >> 6;
    if (v14 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[5] - v12[4]) >> 3))
    {
      v15 = v13 + (v14 << 6);
      v16 = *(_OWORD *)(v15 - 48);
      *a7 = *(_OWORD *)(v15 - 64);
      a7[1] = v16;
      v11 = *(_OWORD *)(v15 - 32);
      v17 = *(_OWORD *)(v15 - 16);
      a7[2] = v11;
      a7[3] = v17;
      return *(double *)&v11;
    }
LABEL_16:
    *(_QWORD *)&v11 = -1;
    *((_QWORD *)&v11 + 1) = -1;
    goto LABEL_17;
  }
  if (a5)
    a3 = a5 + a4;
  if (a3 <= a4)
    goto LABEL_16;
  v19 = a4;
  while (1)
  {
    v20 = (_QWORD *)TResultManager::getResult(*(_QWORD *)(a1 + 128), *(_QWORD *)(v8 + 8 * v19));
    v21 = v20[13];
    v22 = v20[14];
    v23 = v22 - v21;
    if (v22 != v21)
      break;
LABEL_15:
    if (++v19 >= a3)
      goto LABEL_16;
  }
  v24 = 0;
  v25 = 0;
  v26 = v23 >> 3;
  while (!*(_QWORD *)(v21 + 8 * v24) || !*(_QWORD *)(v21 + 8 * v24 + 8))
  {
    v25 += *(_QWORD *)(v21 + 8 * v24 + 8);
    v24 += 2;
    if (v24 >= v26)
      goto LABEL_15;
  }
  v61 = a7;
  v27 = (_OWORD *)(v20[7] + (v25 << 6));
  v28 = v27[1];
  v70[0] = *v27;
  v70[1] = v28;
  v29 = v27[3];
  v70[2] = v27[2];
  v70[3] = v29;
  *(_QWORD *)&v30 = -1;
  *((_QWORD *)&v30 + 1) = -1;
  v68 = v30;
  v69 = v30;
  v66 = v30;
  v67 = v30;
  if (!v7)
    goto LABEL_60;
  v31 = 0;
  v62 = v8;
  v63 = v7;
  do
  {
    while (1)
    {
      v32 = TResultManager::getResult(*(_QWORD *)(a1 + 128), *(_QWORD *)(v8 + 8 * (~v31 + v7)));
      v33 = *(_QWORD *)(v32 + 104);
      v34 = *(_QWORD *)(v32 + 112) - v33;
      if (v34)
        break;
      if (++v31 >= v7)
        goto LABEL_60;
    }
    v35 = (_QWORD *)v32;
    v64 = v31;
    v36 = v34 >> 3;
    v37 = 0;
    v38 = *(_QWORD *)(v32 + 16) + strlen(*(const char **)(v32 + 16));
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[5] - v35[4]) >> 3);
    do
    {
      v40 = *(_QWORD *)(v33 + 8 * (v36 - v37) - 16);
      v41 = v38 - v40;
      if (-v40 < 0)
      {
        v43 = 1;
        v44 = (unsigned __int8 *)(v38 - v40);
        while (1)
        {
          v65 = 0;
          v45 = TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 32) + 240, v44, &v65);
          if (v45 == -1)
          {
LABEL_44:
            v51 = v35[7] + (v39 << 6);
            v52 = *(_OWORD *)(v51 - 48);
            v66 = *(_OWORD *)(v51 - 64);
            v67 = v52;
            v53 = *(_OWORD *)(v51 - 16);
            v68 = *(_OWORD *)(v51 - 32);
            v69 = v53;
            v42 = 1;
            goto LABEL_45;
          }
          v46 = v45;
          if ((v43 & 1) == 0)
            goto LABEL_38;
          v47 = v65;
          if ((v48 & 1) == 0
          {
            v50 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v50);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v50;
          }
          v43 = 1;
          if (v47 <= 159)
          {
            if (v47 <= 0x20 && ((1 << v47) & 0x100002600) != 0)
              goto LABEL_39;
LABEL_38:
            v43 = 0;
            goto LABEL_39;
          }
          if (v47 >= 12288)
          {
            if (v47 == 12288)
              goto LABEL_39;
            v49 = 65279;
          }
          else
          {
            if (v47 == 160)
              goto LABEL_39;
            v49 = 8203;
          }
          if (v47 != v49)
            goto LABEL_38;
LABEL_39:
          v44 += v46;
          if ((unint64_t)v44 >= v38)
          {
            if ((v43 & 1) != 0)
              break;
            goto LABEL_44;
          }
        }
      }
      v42 = 0;
LABEL_45:
      v33 = v35[13];
      v54 = v35[14] - v33;
      if (v37 + 2 >= (unint64_t)(v54 >> 3))
        break;
      v36 = v54 >> 3;
      v39 -= *(_QWORD *)(v33 + 8 * (~v37 + (v54 >> 3)));
      v37 += 2;
      v38 = v41;
    }
    while ((v42 & 1) == 0);
    v7 = v63;
    v31 = v64 + 1;
    if (v64 + 1 >= v63)
      v55 = 1;
    else
      v55 = v42;
    v8 = v62;
  }
  while ((v55 & 1) == 0);
  if (v42)
  {
    for (i = 0; i != 32; i += 8)
    {
      v57 = *(_QWORD *)((char *)&v66 + i);
      if (v57 != -1 && v57 == *(_QWORD *)((char *)v70 + i))
      {
        *((_QWORD *)&v73 + getItnControlCategory(*(_QWORD *)((char *)&v66 + i))) = -1;
        *((_QWORD *)&v71 + getItnControlCategory(v57)) = v57;
      }
    }
  }
LABEL_60:
  v58 = v72;
  *v61 = v71;
  v61[1] = v58;
  *(_QWORD *)&v11 = v73;
  v59 = v74;
  v61[2] = v73;
  v61[3] = v59;
  return *(double *)&v11;
}

void sub_2098E7154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x20BD149A8](v2, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TFormatter::addWords(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t Word;
  uint64_t v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[70];

  std::vector<TItnWordData>::reserve(a4, 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4) + ((a2[1] - *a2) >> 3));
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    do
    {
      Word = TLexicon::findWord(*(_QWORD *)(a1 + 32), *(__int32 **)(v8 + 8 * v9));
      if (!Word)
        Word = (uint64_t)TLexicon::addTempWord(*(_QWORD *)(a1 + 32), *(int **)(*a2 + 8 * v9), 0, 0, 0);
      if (a3 && v9 != ((a2[1] - *a2) >> 3) - 1)
        v11 = *(unsigned int *)(a3 + 4 * v9);
      else
        v11 = 0;
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      *(_OWORD *)&v31[38] = v12;
      *(_OWORD *)&v31[54] = v12;
      *(_OWORD *)&v31[6] = v12;
      *(_OWORD *)&v31[22] = v12;
      v13 = (char *)a4[1];
      v14 = (char *)a4[2];
      if (v13 >= v14)
      {
        v16 = 0x6DB6DB6DB6DB6DB7 * ((v13 - (_BYTE *)*a4) >> 4);
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x249249249249249)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v18 = 0x6DB6DB6DB6DB6DB7 * ((v14 - (_BYTE *)*a4) >> 4);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x124924924924924)
          v19 = 0x249249249249249;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>((uint64_t)(a4 + 2), v19);
        else
          v20 = 0;
        v21 = &v20[112 * v16];
        *((_QWORD *)v21 + 12) = *(_QWORD *)&v31[62];
        *(_OWORD *)(v21 + 34) = *(_OWORD *)v31;
        *(_OWORD *)(v21 + 82) = *(_OWORD *)&v31[48];
        *(_OWORD *)(v21 + 66) = *(_OWORD *)&v31[32];
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = Word;
        *((_QWORD *)v21 + 3) = v11;
        *((_WORD *)v21 + 16) = 0;
        *(_OWORD *)(v21 + 50) = *(_OWORD *)&v31[16];
        *((_WORD *)v21 + 52) = 256;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *((_OWORD *)v22 - 7);
            v26 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v24 - 5) = v26;
            *((_OWORD *)v24 - 7) = v25;
            v27 = *((_OWORD *)v22 - 4);
            v28 = *((_OWORD *)v22 - 3);
            v29 = *((_OWORD *)v22 - 2);
            *(_OWORD *)(v24 - 22) = *(_OWORD *)(v22 - 22);
            *((_OWORD *)v24 - 3) = v28;
            *((_OWORD *)v24 - 2) = v29;
            *((_OWORD *)v24 - 4) = v27;
            v24 -= 112;
            v22 -= 112;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v15 = v21 + 112;
        *a4 = v24;
        a4[1] = v21 + 112;
        a4[2] = &v20[112 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)(v13 + 50) = *(_OWORD *)&v31[16];
        *(_OWORD *)(v13 + 66) = *(_OWORD *)&v31[32];
        *(_OWORD *)(v13 + 82) = *(_OWORD *)&v31[48];
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = Word;
        *((_QWORD *)v13 + 3) = v11;
        *((_WORD *)v13 + 16) = 0;
        *((_QWORD *)v13 + 12) = -1;
        *(_OWORD *)(v13 + 34) = *(_OWORD *)v31;
        v15 = v13 + 112;
        *((_WORD *)v13 + 52) = 256;
      }
      a4[1] = v15;
      ++v9;
      v8 = *a2;
      v30 = a2[1];
    }
    while (v9 < (v30 - *a2) >> 3);
    if (v8 != v30)
      *((_QWORD *)a4[1] - 11) = 1000;
  }
}

void std::vector<TItnWordData>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[112 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 7);
        v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        v15 = *((_OWORD *)v10 - 4);
        v16 = *((_OWORD *)v10 - 3);
        v17 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 22) = *(_OWORD *)(v10 - 22);
        *((_OWORD *)v12 - 3) = v16;
        *((_OWORD *)v12 - 2) = v17;
        *((_OWORD *)v12 - 4) = v15;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL TFormatter::addWords(uint64_t a1, uint64_t *a2, unint64_t a3, char a4, void **a5)
{
  void **v5;
  uint64_t *v6;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t Word;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _OWORD *v23;
  BOOL v24;
  BOOL v25;
  char v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE v57[70];

  if ((unint64_t)a2 >= a3)
    return 0;
  v5 = a5;
  v6 = a2;
  LOBYTE(v8) = 0;
  v51 = a4 ^ 1;
  v50 = (uint64_t)(a5 + 2);
  do
  {
    v9 = TResultManager::getResult(*(_QWORD *)(a1 + 128), *v6);
    v10 = v9;
    v11 = *(_BYTE *)(v9 + 1) != 0;
    v12 = v51;
    if (*(_BYTE *)(v9 + 1))
      v12 = 1;
    if ((v12 & 1) == 0)
      v11 = *(_BYTE *)v9 != 0;
    v52 = v8 || v11;
    std::vector<TItnWordData>::reserve(v5, 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[1] - (_BYTE *)*v5) >> 4)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v9 + 40) - *(_QWORD *)(v9 + 32)) >> 3));
    v13 = *(_QWORD *)(v10 + 104);
    v14 = *(_QWORD *)(v10 + 112);
    if (v14 != v13)
    {
      v15 = 0;
      v16 = 0;
      v53 = v10;
      do
      {
        v55 = v15 | 1;
        if (*(_QWORD *)(v13 + 8 * (v15 | 1)))
        {
          v17 = 0;
          v56 = v15;
          v54 = *(_QWORD *)(v13 + 8 * v15) == 0;
          do
          {
            v18 = *(_QWORD *)(v10 + 32) + 24 * v16;
            if (*(char *)(v18 + 23) < 0)
              v18 = *(_QWORD *)v18;
            Word = TLexicon::findWord(*(_QWORD *)(a1 + 32), (__int32 *)v18);
            if (!Word)
            {
              v20 = *(_QWORD *)(v10 + 32) + 24 * v16;
              if (*(char *)(v20 + 23) < 0)
                v20 = *(_QWORD *)v20;
              Word = (uint64_t)TLexicon::addTempWord(*(_QWORD *)(a1 + 32), (int *)v20, 0, 0, 0);
            }
            v21 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v16);
            v22 = v17 == 0;
            v23 = (_OWORD *)(*(_QWORD *)(v10 + 56) + (v16 << 6));
            *(_OWORD *)&v57[6] = *v23;
            *(_OWORD *)&v57[22] = v23[1];
            *(_OWORD *)&v57[38] = v23[2];
            *(_OWORD *)&v57[54] = v23[3];
            if (v16)
            {
              v24 = 0;
            }
            else
            {
              v25 = *(_BYTE *)(v10 + 1) != 0;
              v26 = v51;
              if (*(_BYTE *)(v10 + 1))
                v26 = 1;
              if ((v26 & 1) == 0)
                v25 = *(_BYTE *)v10 != 0;
              v24 = v52;
              v52 = v25;
            }
            v27 = (char *)v5[1];
            v28 = (char *)v5[2];
            if (v27 >= v28)
            {
              v30 = a1;
              v31 = v6;
              v32 = 0x6DB6DB6DB6DB6DB7 * ((v27 - (_BYTE *)*v5) >> 4);
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) > 0x249249249249249)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v34 = 0x6DB6DB6DB6DB6DB7 * ((v28 - (_BYTE *)*v5) >> 4);
              if (2 * v34 > v33)
                v33 = 2 * v34;
              if (v34 >= 0x124924924924924)
                v35 = 0x249249249249249;
              else
                v35 = v33;
              if (v35)
              {
                v36 = v5;
                v37 = v21;
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v50, v35);
                v21 = v37;
                v5 = v36;
                v22 = v17 == 0;
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[112 * v32];
              *((_QWORD *)v39 + 12) = *(_QWORD *)&v57[62];
              *(_OWORD *)(v39 + 34) = *(_OWORD *)v57;
              *(_OWORD *)(v39 + 82) = *(_OWORD *)&v57[48];
              *(_OWORD *)(v39 + 66) = *(_OWORD *)&v57[32];
              v6 = v31;
              *(_QWORD *)v39 = v31;
              *((_QWORD *)v39 + 1) = v56;
              *((_QWORD *)v39 + 2) = Word;
              *((_QWORD *)v39 + 3) = v21;
              v39[32] = v24;
              v39[33] = v54;
              *(_OWORD *)(v39 + 50) = *(_OWORD *)&v57[16];
              v39[104] = 1;
              v39[105] = v22;
              v41 = (char *)*v5;
              v40 = (char *)v5[1];
              v42 = v39;
              if (v40 != *v5)
              {
                do
                {
                  v43 = *((_OWORD *)v40 - 7);
                  v44 = *((_OWORD *)v40 - 5);
                  *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
                  *((_OWORD *)v42 - 5) = v44;
                  *((_OWORD *)v42 - 7) = v43;
                  v45 = *((_OWORD *)v40 - 4);
                  v46 = *((_OWORD *)v40 - 3);
                  v47 = *((_OWORD *)v40 - 2);
                  *(_OWORD *)(v42 - 22) = *(_OWORD *)(v40 - 22);
                  *((_OWORD *)v42 - 3) = v46;
                  *((_OWORD *)v42 - 2) = v47;
                  *((_OWORD *)v42 - 4) = v45;
                  v42 -= 112;
                  v40 -= 112;
                }
                while (v40 != v41);
                v40 = (char *)*v5;
              }
              a1 = v30;
              v10 = v53;
              v29 = v39 + 112;
              *v5 = v42;
              v5[1] = v39 + 112;
              v5[2] = &v38[112 * v35];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_OWORD *)(v27 + 50) = *(_OWORD *)&v57[16];
              *(_OWORD *)(v27 + 66) = *(_OWORD *)&v57[32];
              *(_OWORD *)(v27 + 82) = *(_OWORD *)&v57[48];
              *(_QWORD *)v27 = v6;
              *((_QWORD *)v27 + 1) = v56;
              *((_QWORD *)v27 + 2) = Word;
              *((_QWORD *)v27 + 3) = v21;
              v27[32] = v24;
              v27[33] = v54;
              *((_QWORD *)v27 + 12) = *(_QWORD *)&v57[62];
              *(_OWORD *)(v27 + 34) = *(_OWORD *)v57;
              v27[104] = 1;
              v29 = v27 + 112;
              v27[105] = v22;
              v10 = v53;
            }
            v5[1] = v29;
            ++v16;
            ++v17;
            v13 = *(_QWORD *)(v10 + 104);
          }
          while (v17 < *(_QWORD *)(v13 + 8 * v55));
          v14 = *(_QWORD *)(v10 + 112);
          v15 = v56;
        }
        v15 += 2;
      }
      while (v15 < (v14 - v13) >> 3);
    }
    ++v6;
    v8 = v52;
  }
  while ((unint64_t)v6 < a3);
  return v8;
}

void *TFormatter::addLeftContext(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, BOOL *a5)
{
  TParam *v10;
  uint64_t ActiveConfigHandle;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  TParam *v17;
  uint64_t v18;
  char v19;
  void *result;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;

  v10 = (TParam *)(*(_QWORD *)(a1 + 48) + 1520);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  v12 = 0;
  v13 = *((int *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 40);
  v14 = (uint64_t *)a3;
  do
  {
    if (v14 <= a2)
      break;
    v15 = *--v14;
    v16 = TResultManager::getResult(*(_QWORD *)(a1 + 128), v15);
    v12 -= 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v16 + 40) - *(_QWORD *)(v16 + 32)) >> 3);
  }
  while (v12 < v13);
  v17 = (TParam *)(*(_QWORD *)(a1 + 48) + 2472);
  v18 = TParam::getActiveConfigHandle(v17);
  v19 = *((_BYTE *)v17 + TParam::getValidConfig(v17, v18) + 152) == 0;
  result = (void *)TFormatter::addWords(a1, v14, a3, v19, (void **)a4);
  a5[1] = (char)result;
  *a5 = v14 == a2;
  if (v12 > v13)
  {
    v21 = 0;
    v22 = 0;
    v24 = *(char **)a4;
    v23 = *(char **)(a4 + 8);
    v25 = (uint64_t)&v23[-*(_QWORD *)a4];
    v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 4);
    v27 = v25 - 7;
    while (1)
    {
      v28 = v21 + 1;
      if (v24[v27])
      {
        v22 = v21 + 1;
        if (v28 >= v13)
          break;
      }
      v27 -= 112;
      ++v21;
      if (v12 == v28)
        goto LABEL_11;
    }
    v22 = v21 + 1;
LABEL_11:
    if (v22 != v26)
    {
      *a5 = 0;
      v29 = &v23[-112 * v22];
      if (v24 != v29)
      {
        v30 = 112 * v22;
        if (v23 != v29)
          result = memmove(v24, v29, v30 - 6);
        *(_QWORD *)(a4 + 8) = &v24[v30];
      }
    }
  }
  return result;
}

void TFormatter::addRightContext(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, BOOL *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t Result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  TParam *v19;
  uint64_t ActiveConfigHandle;
  char v21;
  unint64_t v22;
  BOOL v23;

  if (a2 >= a3)
  {
    v10 = 0;
    v11 = a2;
  }
  else
  {
    v10 = 0;
    v11 = a2;
    do
    {
      Result = TResultManager::getResult(*(_QWORD *)(a1 + 128), *v11);
      v13 = *(_QWORD *)(Result + 104);
      v14 = *(_QWORD *)(Result + 112);
      v15 = v14 - v13;
      if (v14 != v13)
      {
        v16 = 0;
        v17 = v15 >> 3;
        do
        {
          v15 = *(_QWORD *)(v13 + 8 * v16);
          if (v15)
            LOBYTE(v15) = *(_QWORD *)(v13 + 8 * v16 + 8) != 0;
          v10 += *(_QWORD *)(v13 + 8 * v16 + 8);
          v16 += 2;
        }
        while (v16 < v17 && (v15 & 1) == 0);
      }
      ++v11;
    }
    while (v11 < a3 && (v15 & 1) == 0);
  }
  v18 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
  v19 = (TParam *)(*(_QWORD *)(a1 + 48) + 2472);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v19);
  v21 = *((_BYTE *)v19 + TParam::getValidConfig(v19, ActiveConfigHandle) + 152) == 0;
  a5[1] = TFormatter::addWords(a1, a2, (unint64_t)v11, v21, (void **)a4);
  v22 = v10 + 0x6DB6DB6DB6DB6DB7 * v18;
  v23 = v11 == a3 && v22 == 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  *a5 = v23;
  std::vector<TItnWordData>::resize(a4, v22);
}

void std::vector<TItnWordData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TItnWordData>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 112 * a2;
  }
}

_QWORD *TFormatter::segment(TFormatter *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t ActiveConfigHandle;
  char v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  TFormatter *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ValidConfig;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  TFormatter *v87;
  unint64_t v88;
  double v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  void *v95;
  double v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int **v127;
  unint64_t v128;
  uint64_t v129;
  double v130;
  unint64_t v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void **v156;
  double v157;
  void *v158;
  uint64_t v159;
  __int32 *v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  const __int32 **v188;
  unint64_t v189;
  size_t v190;
  uint64_t v191;
  __int32 *v192;
  uint64_t v193;
  uint64_t v194;
  double *v195;
  double *v196;
  uint64_t v197;
  double *v198;
  double v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double **v204;
  void **v205;
  double **v206;
  unint64_t v207;
  _QWORD *v208;
  const __int32 **v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  double v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void **v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  double v227;
  char *v228;
  __int32 *v229;
  unint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  double **v236;
  char *v237;
  char *v238;
  double *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  const TWord *v254;
  uint64_t BlockForWord;
  _QWORD *v256;
  uint64_t v257;
  __int32 *v258;
  unint64_t v259;
  _BOOL4 v261;
  TFormatter *v262;
  unint64_t v263;
  int v264;
  _BOOL4 v265;
  _BOOL4 v266;
  unint64_t v267;
  unint64_t v269;
  uint64_t *v270;
  int v271;
  void *v272[2];
  char v273;
  void *v274;
  _BYTE *v275;
  uint64_t v276;
  void *v277[2];
  char v278;
  void *__p[2];
  _BYTE v280[32];
  __int128 v281;
  uint64_t v282;
  _QWORD v283[3];
  _BYTE v284[40];
  char *v285;
  uint64_t *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  _QWORD v291[4];

  v5 = a2;
  std::vector<TItnStateData>::vector(v291, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) + 1);
  *(_QWORD *)v291[0] = 0;
  v7 = *((_QWORD *)a1 + 6);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v7 + 18008));
  v9 = *(_BYTE *)(v7 + TParam::getValidConfig((TParam *)(v7 + 18008), ActiveConfigHandle) + 18160);
  v10 = (_BYTE *)*((_QWORD *)a1 + 13);
  v10[8] = v9;
  (*(void (**)(_BYTE *))(*(_QWORD *)v10 + 16))(v10);
  v11 = *((_QWORD *)a1 + 6);
  v12 = TParam::getActiveConfigHandle((TParam *)(v11 + 17760));
  v13 = *(_BYTE *)(v11 + TParam::getValidConfig((TParam *)(v11 + 17760), v12) + 17912);
  v14 = *((_QWORD *)a1 + 13);
  v15 = *(_QWORD *)(v14 + 16);
  *(_BYTE *)(v14 + 24) = v13;
  (*(void (**)(void))(v15 + 16))();
  v16 = *((_QWORD *)a1 + 6);
  v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 2720));
  v18 = *(double *)(v16 + 8 * TParam::getValidConfig((TParam *)(v16 + 2720), v17) + 2872);
  v19 = *((_QWORD *)a1 + 6);
  v20 = TParam::getActiveConfigHandle((TParam *)(v19 + 3256));
  v21 = *(double *)(v19 + 8 * TParam::getValidConfig((TParam *)(v19 + 3256), v20) + 3408);
  if (*((_QWORD *)a1 + 18)
    && (v22 = *((_QWORD *)a1 + 6),
        v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 9264)),
        *(_BYTE *)(v22 + TParam::getValidConfig((TParam *)(v22 + 9264), v23) + 9416)))
  {
    v24 = *((_QWORD *)a1 + 6);
    v25 = TParam::getActiveConfigHandle((TParam *)(v24 + 3792));
    v261 = *(_BYTE *)(v24 + TParam::getValidConfig((TParam *)(v24 + 3792), v25) + 3944) == 0;
  }
  else
  {
    v261 = 0;
  }
  if (*((_QWORD *)a1 + 19)
    && (v26 = *((_QWORD *)a1 + 6),
        v27 = TParam::getActiveConfigHandle((TParam *)(v26 + 9512)),
        *(_BYTE *)(v26 + TParam::getValidConfig((TParam *)(v26 + 9512), v27) + 9664)))
  {
    v28 = *((_QWORD *)a1 + 6);
    v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 3792));
    v266 = *(_BYTE *)(v28 + TParam::getValidConfig((TParam *)(v28 + 3792), v29) + 3944) == 0;
  }
  else
  {
    v266 = 0;
  }
  v262 = a1;
  if (*((_QWORD *)a1 + 20)
    && (v30 = *((_QWORD *)a1 + 6),
        v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 7640)),
        *(_BYTE *)(v30 + TParam::getValidConfig((TParam *)(v30 + 7640), v31) + 7792)))
  {
    v32 = *((_QWORD *)a1 + 6);
    v33 = TParam::getActiveConfigHandle((TParam *)(v32 + 3792));
    v265 = *(_BYTE *)(v32 + TParam::getValidConfig((TParam *)(v32 + 3792), v33) + 3944) == 0;
  }
  else
  {
    v265 = 0;
  }
  v288 = 0;
  v289 = 0;
  v290 = 0;
  v285 = 0;
  v286 = 0;
  v287 = 0;
  if (v261)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v280 = 0;
    v34 = *v5;
    if (v5[1] != *v5)
    {
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = *(_QWORD *)(v34 + 112 * v36 + 16);
        if ((unint64_t)v35 >= *(_QWORD *)v280)
        {
          v38 = (v35 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v39 = (uint64_t)(*(_QWORD *)v280 - (unint64_t)__p[0]) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if (*(_QWORD *)v280 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v280, v40);
          else
            v41 = 0;
          v42 = &v41[8 * v38];
          *(_QWORD *)v42 = v37;
          v35 = v42 + 8;
          v44 = (char *)__p[0];
          v43 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *((_QWORD *)v42 - 1) = v45;
              v42 -= 8;
            }
            while (v43 != v44);
            v43 = (char *)__p[0];
          }
          __p[0] = v42;
          __p[1] = v35;
          *(_QWORD *)v280 = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v35 = v37;
          v35 += 8;
        }
        __p[1] = v35;
        ++v36;
        v34 = *v5;
      }
      while (v36 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
    v46 = v262;
    TCompounder::apply(*((_QWORD *)v262 + 18), (uint64_t *)__p, a3, a4, 1, (void **)&v288);
LABEL_55:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_57;
  }
  v46 = a1;
  if (v266)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v280 = 0;
    v47 = *v5;
    if (v5[1] != *v5)
    {
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = *(_QWORD *)(v47 + 112 * v49 + 16);
        if ((unint64_t)v48 >= *(_QWORD *)v280)
        {
          v51 = (v48 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v51 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v52 = (uint64_t)(*(_QWORD *)v280 - (unint64_t)__p[0]) >> 2;
          if (v52 <= v51 + 1)
            v52 = v51 + 1;
          if (*(_QWORD *)v280 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v280, v53);
          else
            v54 = 0;
          v55 = &v54[8 * v51];
          *(_QWORD *)v55 = v50;
          v48 = v55 + 8;
          v57 = (char *)__p[0];
          v56 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v55 - 1) = v58;
              v55 -= 8;
            }
            while (v56 != v57);
            v56 = (char *)__p[0];
          }
          __p[0] = v55;
          __p[1] = v48;
          *(_QWORD *)v280 = &v54[8 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_QWORD *)v48 = v50;
          v48 += 8;
        }
        __p[1] = v48;
        ++v49;
        v47 = *v5;
      }
      while (v49 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
    v46 = v262;
    TRne::apply(*((_QWORD *)v262 + 19), __p, a3, a4, 1, (void **)&v288);
    goto LABEL_55;
  }
LABEL_57:
  if (v265)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v280 = 0;
    v59 = *v5;
    if (v5[1] != *v5)
    {
      v60 = 0;
      v61 = 0;
      do
      {
        v62 = *(_QWORD *)(v59 + 112 * v61 + 16);
        if ((unint64_t)v60 >= *(_QWORD *)v280)
        {
          v63 = (v60 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v64 = (uint64_t)(*(_QWORD *)v280 - (unint64_t)__p[0]) >> 2;
          if (v64 <= v63 + 1)
            v64 = v63 + 1;
          if (*(_QWORD *)v280 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v64;
          if (v65)
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v280, v65);
          else
            v66 = 0;
          v67 = &v66[8 * v63];
          *(_QWORD *)v67 = v62;
          v60 = v67 + 8;
          v69 = (char *)__p[0];
          v68 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v70 = *((_QWORD *)v68 - 1);
              v68 -= 8;
              *((_QWORD *)v67 - 1) = v70;
              v67 -= 8;
            }
            while (v68 != v69);
            v68 = (char *)__p[0];
          }
          __p[0] = v67;
          __p[1] = v60;
          *(_QWORD *)v280 = &v66[8 * v65];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *(_QWORD *)v60 = v62;
          v60 += 8;
        }
        __p[1] = v60;
        ++v61;
        v59 = *v5;
      }
      while (v61 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
    v46 = v262;
    TCliticsProc::apply(*((_QWORD *)v262 + 20), __p, a3, a4, 1, (uint64_t **)&v285);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v270 = v5;
  v71 = *((_QWORD *)v46 + 6);
  v72 = TParam::getActiveConfigHandle((TParam *)(v71 + 19000));
  ValidConfig = TParam::getValidConfig((TParam *)(v71 + 19000), v72);
  v271 = *(unsigned __int8 *)(v71 + ValidConfig + 19152);
  if (*(_BYTE *)(v71 + ValidConfig + 19152))
  {
    v74 = *v5;
    if (v5[1] != *v5)
    {
      v75 = 0;
      v76 = 0;
      do
      {
        loggableUnicode(**(unsigned int ***)(v74 + v75 + 16), __p);
        if (v76 >= a4)
          v81 = "RC";
        else
          v81 = "Utt";
        if (v76 < a3)
          v81 = "LC";
        if (v280[7] >= 0)
          v82 = __p;
        else
          v82 = (void **)__p[0];
        tknPrintf("DebugSegmentation: Word %llu: Position=%s, Name=%s PauseDurationAfter=%llu CrossUttBreakBefore=%d\n FirstWordInBlock=%d\n", v77, v78, v79, v80, v76, v81, v82, *(_QWORD *)(*v5 + v75 + 24), *(unsigned __int8 *)(*v5 + v75 + 32), *(unsigned __int8 *)(*v5 + v75 + 105));
        if ((v280[7] & 0x80000000) != 0)
          operator delete(__p[0]);
        ++v76;
        v74 = *v5;
        v75 += 112;
      }
      while (v76 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
  }
  TAllocator::TAllocator((TAllocator *)v284, 2048);
  std::vector<std::vector<TItnGrammarStateData const*>>::vector(v283, 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
  v87 = v262;
  v269 = 0;
  v263 = 0;
  v88 = 0;
  v264 = v261 || v266;
  v89 = v18 + v21;
  v267 = a3;
  while (1)
  {
    v90 = *v5;
    if (v88 >= 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4))
      break;
    if (*(_BYTE *)(v90 + 112 * v88 + 33))
    {
      v91 = v88 + 1;
      v92 = v291[0];
      v93 = v291[0] + 72 * v88;
      v94 = *(double *)v93;
      v95 = (void *)(*(_QWORD *)(v90 + 112 * v88 + 24) + *(_QWORD *)(v93 + 8));
      if (v271)
      {
        tknPrintf("DebugSegmentation: EdgeType=Epsilon WordRange=[%llu,%llu) Penalty=0 CumulatedPenalty=%f CumulatedPauseAtTarget=%llu\n", v83, v84, v85, v86, v88, v88 + 1, *(_QWORD *)&v94, v95);
        v92 = v291[0];
      }
      v96 = *(double *)(v92 + 72 * v91);
      if (v94 < v96 || v94 == v96 && (unint64_t)v95 > *(_QWORD *)(v92 + 72 * v91 + 8))
      {
        __p[0] = *(void **)&v94;
        __p[1] = v95;
        *(_OWORD *)v280 = v88;
        *(_OWORD *)&v280[16] = 0uLL;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v281, &dword_209A76728);
        v97 = v291[0] + 72 * v91;
        v98 = *(_OWORD *)&v280[16];
        v99 = *(_OWORD *)__p;
        *(_OWORD *)(v97 + 16) = *(_OWORD *)v280;
        *(_OWORD *)(v97 + 32) = v98;
        *(_OWORD *)v97 = v99;
        v100 = v97 + 48;
        if (*(char *)(v97 + 71) < 0)
          operator delete(*(void **)v100);
        v101 = v281;
        *(_QWORD *)(v100 + 16) = v282;
        *(_OWORD *)v100 = v101;
      }
    }
    v102 = v264;
    if (a3 != v88)
      v102 = 0;
    if (v102 == 1)
    {
      v103 = v269;
      if (v269 < (v289 - v288) >> 4)
      {
        v104 = &v288[16 * v269];
        v105 = *((_QWORD *)v104 + 1);
        if (v105 != 1)
        {
          v106 = v105 + a3;
          v107 = v291[0] + 72 * a3;
          v108 = v18 + *(double *)v107;
          v109 = *(_QWORD *)(*v5 + 112 * v106 - 88) + *(_QWORD *)(v107 + 8);
          if (v271)
          {
            if (v261)
            {
              loggableUnicode(**(unsigned int ***)v104, __p);
              v114 = __p;
              if (v280[7] < 0)
                v114 = (void **)__p[0];
              tknPrintf("DebugSegmentation: EdgeType=Compounder WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v110, v111, v112, v113, a3, v106, *(_QWORD *)&v18, *(_QWORD *)&v108, v109, v114);
            }
            else
            {
              loggableUnicode(**(unsigned int ***)v104, __p);
              v119 = __p;
              if (v280[7] < 0)
                v119 = (void **)__p[0];
              tknPrintf("DebugSegmentation: EdgeType=RNE WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v115, v116, v117, v118, a3, v106, *(_QWORD *)&v18, *(_QWORD *)&v108, v109, v119);
            }
            if ((v280[7] & 0x80000000) != 0)
              operator delete(__p[0]);
          }
          v120 = v291[0];
          v121 = v291[0] + 72 * v106;
          if (v108 < *(double *)v121 || v108 == *(double *)v121 && v109 > *(_QWORD *)(v291[0] + 72 * v106 + 8))
          {
            v122 = *(_QWORD *)&v288[16 * v269];
            *(double *)v121 = v108;
            *(_QWORD *)(v121 + 8) = v109;
            *(_QWORD *)(v121 + 16) = a3;
            *(_QWORD *)(v121 + 24) = 0;
            *(_QWORD *)(v121 + 32) = 0;
            *(_QWORD *)(v121 + 40) = v122;
            v123 = v120 + 72 * v106 + 48;
            if (*(char *)(v121 + 71) < 0)
              operator delete(*(void **)v123);
            *(_QWORD *)v123 = 0;
            *(_QWORD *)(v123 + 8) = 0;
            *(_QWORD *)(v123 + 16) = 0;
          }
        }
        a3 += *(_QWORD *)&v288[16 * v269 + 8];
        v103 = v269 + 1;
      }
    }
    else
    {
      v103 = v269;
    }
    v269 = v103;
    v124 = v265;
    if (v267 != v88)
      v124 = 0;
    if (v124 && v263 < ((char *)v286 - v285) >> 4)
    {
      v125 = (uint64_t *)&v285[16 * v263];
      v126 = v125[1];
      if (v126)
      {
        v127 = (unsigned int **)*v125;
        v128 = v126 + v267;
        v129 = v291[0] + 72 * v267;
        v130 = v18 + *(double *)v129;
        v131 = *(_QWORD *)(*v5 + 112 * v128 - 88) + *(_QWORD *)(v129 + 8);
        if (v271)
        {
          if (v127)
          {
            loggableUnicode(*v127, v277);
            v132 = v277;
            if (v278 < 0)
              v132 = (void **)v277[0];
          }
          else
          {
            v132 = (void **)&byte_209A88803;
          }
          tknPrintf("DebugSegmentation: EdgeType=Clitic WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu\n Replacement=%s", v83, v84, v85, v86, v267, v128, *(_QWORD *)&v18, *(_QWORD *)&v130, v131, v132);
          if (v127 && v278 < 0)
            operator delete(v277[0]);
        }
        v133 = v291[0];
        v134 = v291[0] + 72 * v128;
        if (v130 < *(double *)v134 || v130 == *(double *)v134 && v131 > *(_QWORD *)(v291[0] + 72 * v128 + 8))
        {
          *(double *)v134 = v130;
          *(_QWORD *)(v134 + 8) = v131;
          *(_QWORD *)(v134 + 16) = v267;
          *(_QWORD *)(v134 + 24) = 0;
          *(_QWORD *)(v134 + 32) = 0;
          *(_QWORD *)(v134 + 40) = v127;
          v135 = v133 + 72 * v128 + 48;
          if (*(char *)(v134 + 71) < 0)
            operator delete(*(void **)v135);
          *(_QWORD *)v135 = 0;
          *(_QWORD *)(v135 + 8) = 0;
          *(_QWORD *)(v135 + 16) = 0;
        }
      }
      v267 += *(_QWORD *)&v285[16 * v263++ + 8];
    }
    v136 = *((_QWORD *)v87 + 6);
    v137 = TParam::getActiveConfigHandle((TParam *)(v136 + 3792));
    if (!*(_BYTE *)(v136 + TParam::getValidConfig((TParam *)(v136 + 3792), v137) + 3944))
    {
      v142 = *(_QWORD *)(v283[0] + 24 * v88);
      if (*(_QWORD *)(v283[0] + 24 * v88 + 8) != v142)
      {
        v143 = 0;
        do
        {
          v144 = *(_QWORD *)(v142 + 8 * v143);
          v145 = *(_QWORD *)(v144 + 8);
          v146 = v291[0];
          v147 = v291[0] + 72 * v88;
          v148 = *(double *)v144;
          v149 = *(double *)v147 + *(double *)v144;
          v150 = (void *)(*(_QWORD *)(*v5 + 112 * v145 - 88) + *(_QWORD *)(v147 + 8));
          if (v271)
          {
            v151 = *(_QWORD *)(v144 + 16);
            loggableUnicode(*(unsigned int **)(v144 + 32), __p);
            v156 = __p;
            if (v280[7] < 0)
              v156 = (void **)__p[0];
            tknPrintf("DebugSegmentation: EdgeType=Grammar WordRange=[%llu,%llu) LC=%llu Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v152, v153, v154, v155, v88, v145, v151, *(_QWORD *)&v148, *(_QWORD *)&v149, v150, v156);
            if ((v280[7] & 0x80000000) != 0)
              operator delete(__p[0]);
            v146 = v291[0];
          }
          v157 = *(double *)(v146 + 72 * v145);
          if (v149 < v157
            || v149 == v157
            && ((v158 = *(void **)(v146 + 72 * v145 + 8), v150 > v158)
             || v150 == v158
             && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v283[0] + 24 * v88) + 8 * v143) + 16) > *(_QWORD *)(v146 + 72 * v145 + 24)))
          {
            v159 = *(_QWORD *)(*(_QWORD *)(v283[0] + 24 * v88) + 8 * v143);
            v160 = *(__int32 **)(v159 + 32);
            __p[0] = *(void **)&v149;
            __p[1] = v150;
            *(_QWORD *)v280 = v88;
            *(_OWORD *)&v280[8] = *(_OWORD *)(v159 + 16);
            *(_QWORD *)&v280[24] = 0;
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v281, v160);
            v161 = v291[0] + 72 * v145;
            v162 = *(_OWORD *)&v280[16];
            v163 = *(_OWORD *)__p;
            *(_OWORD *)(v161 + 16) = *(_OWORD *)v280;
            *(_OWORD *)(v161 + 32) = v162;
            *(_OWORD *)v161 = v163;
            v164 = v161 + 48;
            if (*(char *)(v161 + 71) < 0)
              operator delete(*(void **)v164);
            v165 = v281;
            *(_QWORD *)(v164 + 16) = v282;
            *(_OWORD *)v164 = v165;
          }
          ++v143;
          v142 = *(_QWORD *)(v283[0] + 24 * v88);
        }
        while (v143 < (*(_QWORD *)(v283[0] + 24 * v88 + 8) - v142) >> 3);
      }
      v166 = *((_QWORD *)v87 + 6);
      v167 = TParam::getActiveConfigHandle((TParam *)(v166 + 1872));
      v168 = TParam::getValidConfig((TParam *)(v166 + 1872), v167);
      v169 = *v5;
      if (0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4) >= v88 + *(int *)(v166 + 4 * v168 + 2032))
        v170 = v88 + *(int *)(v166 + 4 * v168 + 2032);
      else
        v170 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4);
      v274 = 0;
      v275 = 0;
      v276 = 0;
      v171 = v169 + 112 * v88;
      v172 = *(_QWORD *)(v171 + 80);
      v173 = *(_QWORD *)(v171 + 48);
      if (v172 != -1)
        v173 = v172;
      switch(v173)
      {
        case 9:
LABEL_176:
          v174 = *((_QWORD *)v87 + 6);
          v175 = 27272;
          break;
        case 8:
          v174 = *((_QWORD *)v87 + 6);
          v175 = 27280;
          break;
        case 7:
          goto LABEL_176;
        default:
          v176 = (uint64_t *)(*((_QWORD *)v87 + 6) + 136);
LABEL_180:
          v177 = *v176;
          TGrammarManager::search(*((_QWORD **)v87 + 13), v5, v88, v170, *v176, (uint64_t *)&v274);
          if (*((_QWORD *)v87 + 14))
          {
            v178 = *((_QWORD *)v87 + 6);
            v179 = TParam::getActiveConfigHandle((TParam *)(v178 + 19248));
            if (*(_BYTE *)(v178 + TParam::getValidConfig((TParam *)(v178 + 19248), v179) + 19400))
            {
              __p[0] = 0;
              __p[1] = 0;
              *(_QWORD *)v280 = 0;
              TGrammarManager2::search(*((_QWORD **)v87 + 14), v5, v88, v170, v177, (uint64_t *)__p);
              v180 = (char *)__p[0];
              if (__p[1] != __p[0])
              {
                v181 = 0;
                v182 = 8;
                do
                {
                  loggableUnicode(*(unsigned int **)&v180[v182], v272);
                  if (v273 >= 0)
                    v187 = v272;
                  else
                    v187 = (void **)v272[0];
                  tknPrintf("Adaptation Result[%llx]: \"%s\"\n", v183, v184, v185, v186, v181, v187);
                  if (v273 < 0)
                    operator delete(v272[0]);
                  ++v181;
                  v180 = (char *)__p[0];
                  v182 += 56;
                }
                while (v181 < 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3));
              }
              TGrammarManager2::clearResult(*((TGrammarManager2 **)v87 + 14));
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
          }
          v188 = (const __int32 **)v274;
          if (v275 != v274)
          {
            v189 = 0;
            do
            {
              if (v188[7 * v189 + 3])
              {
                v190 = wcslen(v188[7 * v189 + 1]);
                if ((v190 + 1) >> 62)
                  v191 = -1;
                else
                  v191 = 4 * (v190 + 1);
                v192 = (__int32 *)TAllocator::allocate((TAllocator *)v284, v191);
                wcscpy(v192, *((const __int32 **)v274 + 7 * v189 + 1));
                v193 = *((_QWORD *)v274 + 7 * v189 + 3);
                v194 = v283[0];
                v195 = (double *)TAllocator::allocate((TAllocator *)v284, 40);
                v196 = v195;
                v197 = v193 + v88;
                v198 = (double *)((char *)v274 + 56 * v189);
                v199 = v18 + v198[5];
                v200 = *((_QWORD *)v198 + 3);
                v201 = *((_QWORD *)v198 + 2) + v88;
                v202 = *((_QWORD *)v198 + 4);
                *v195 = v199;
                *((_QWORD *)v195 + 1) = v201 - v202;
                *((_QWORD *)v195 + 2) = v200;
                *((_QWORD *)v195 + 3) = v202;
                *((_QWORD *)v195 + 4) = v192;
                v203 = v194 + 24 * (v193 + v88);
                v206 = *(double ***)(v203 + 8);
                v205 = (void **)(v203 + 8);
                v204 = v206;
                v207 = (unint64_t)v205[1];
                if ((unint64_t)v206 >= v207)
                {
                  v221 = (void **)(v194 + 24 * v197);
                  v222 = ((char *)v204 - (_BYTE *)*v221) >> 3;
                  if ((unint64_t)(v222 + 1) >> 61)
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  v223 = v207 - (_QWORD)*v221;
                  v224 = v223 >> 2;
                  if (v223 >> 2 <= (unint64_t)(v222 + 1))
                    v224 = v222 + 1;
                  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
                    v225 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v225 = v224;
                  if (v225)
                    v226 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v205 + 1), v225);
                  else
                    v226 = 0;
                  v236 = (double **)&v226[8 * v222];
                  *v236 = v196;
                  v208 = v236 + 1;
                  v237 = (char *)*v205;
                  v238 = (char *)*v221;
                  v5 = v270;
                  if (*v205 != *v221)
                  {
                    do
                    {
                      v239 = (double *)*((_QWORD *)v237 - 1);
                      v237 -= 8;
                      *--v236 = v239;
                    }
                    while (v237 != v238);
                    v237 = (char *)*v221;
                  }
                  *v221 = v236;
                  *v205 = v208;
                  v205[1] = &v226[8 * v225];
                  if (v237)
                    operator delete(v237);
                }
                else
                {
                  *v204 = v195;
                  v208 = v204 + 1;
                  v5 = v270;
                }
                *v205 = v208;
              }
              else
              {
                v209 = &v188[7 * v189];
                v210 = (char *)v209[2] + v88 - (char *)v209[4];
                v211 = v291[0];
                v212 = v291[0] + 72 * v88;
                v213 = *((double *)v209 + 5);
                v214 = v18 + *(double *)v212 + v213;
                v215 = (void *)(*(_QWORD *)(*v5 + 112 * v210 - 88) + *(_QWORD *)(v212 + 8));
                if (v271)
                {
                  loggableUnicode((unsigned int *)v188[7 * v189 + 1], __p);
                  v220 = __p;
                  if (v280[7] < 0)
                    v220 = (void **)__p[0];
                  tknPrintf("DebugSegmentation: EdgeType=Grammar WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v216, v217, v218, v219, v88, v210, v18 + v213, *(_QWORD *)&v214, v215, v220);
                  if ((v280[7] & 0x80000000) != 0)
                    operator delete(__p[0]);
                  v211 = v291[0];
                }
                v227 = *(double *)(v211 + 72 * v210);
                if (v214 < v227 || v214 == v227 && (unint64_t)v215 > *(_QWORD *)(v211 + 72 * v210 + 8))
                {
                  v228 = (char *)v274 + 56 * v189;
                  v229 = (__int32 *)*((_QWORD *)v228 + 1);
                  v230 = *((_QWORD *)v228 + 4);
                  __p[0] = *(void **)&v214;
                  __p[1] = v215;
                  *(_OWORD *)v280 = v88;
                  *(_OWORD *)&v280[16] = v230;
                  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v281, v229);
                  v231 = v291[0] + 72 * v210;
                  v232 = *(_OWORD *)&v280[16];
                  v233 = *(_OWORD *)__p;
                  *(_OWORD *)(v231 + 16) = *(_OWORD *)v280;
                  *(_OWORD *)(v231 + 32) = v232;
                  *(_OWORD *)v231 = v233;
                  v234 = v231 + 48;
                  if (*(char *)(v231 + 71) < 0)
                    operator delete(*(void **)v234);
                  v235 = v281;
                  *(_QWORD *)(v234 + 16) = v282;
                  *(_OWORD *)v234 = v235;
                }
              }
              ++v189;
              v188 = (const __int32 **)v274;
            }
            while (v189 < 0x6DB6DB6DB6DB6DB7 * ((v275 - (_BYTE *)v274) >> 3));
          }
          v87 = v262;
          TGrammarManager2::clearResult(*((TGrammarManager2 **)v262 + 13));
          if (v274)
          {
            v275 = v274;
            operator delete(v274);
          }
          goto LABEL_230;
      }
      v176 = (uint64_t *)(v174 + v175);
      goto LABEL_180;
    }
LABEL_230:
    v240 = v88 + 1;
    v241 = v291[0];
    v242 = v291[0] + 72 * v88;
    v243 = v89 + *(double *)v242;
    v244 = *(_QWORD *)(*v5 + 112 * v88 + 24) + *(_QWORD *)(v242 + 8);
    if (v271)
    {
      tknPrintf("DebugSegmentation: EdgeType=Default WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu\n", v138, v139, v140, v141, v88, v88 + 1, *(_QWORD *)&v89, *(_QWORD *)&v243, v244);
      v241 = v291[0];
    }
    v245 = v241 + 72 * v240;
    if (v243 < *(double *)v245 || v243 == *(double *)v245 && v244 > *(_QWORD *)(v241 + 72 * v240 + 8))
    {
      v246 = *(_QWORD *)(*v5 + 112 * v88 + 16);
      *(double *)v245 = v243;
      *(_QWORD *)(v245 + 8) = v244;
      *(_QWORD *)(v245 + 16) = v88;
      *(_QWORD *)(v245 + 24) = 0;
      *(_QWORD *)(v245 + 32) = 0;
      *(_QWORD *)(v245 + 40) = v246;
      v247 = v241 + 72 * v240 + 48;
      if (*(char *)(v245 + 71) < 0)
        operator delete(*(void **)v247);
      *(_QWORD *)v247 = 0;
      *(_QWORD *)(v247 + 8) = 0;
      *(_QWORD *)(v247 + 16) = 0;
    }
    v248 = *((_QWORD *)v87 + 13);
    v249 = *(_QWORD *)(v248 + 16);
    *(_BYTE *)(v248 + 24) = 0;
    (*(void (**)(void))(v249 + 16))();
    v250 = (_BYTE *)*((_QWORD *)v87 + 13);
    v250[8] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v250 + 16))(v250);
    ++v88;
  }
  v251 = v291[0];
  v252 = 0x8E38E38E38E38E39 * ((uint64_t)(v291[1] - v291[0]) >> 3) - 1;
  if (*(_QWORD *)(v291[0] + 72 * v252 + 16) == -1)
  {
    v256 = 0;
  }
  else
  {
    v253 = 0;
    do
    {
      __p[0] = 0;
      v274 = 0;
      v254 = *(const TWord **)(v251 + 72 * v252 + 40);
      if (v254)
      {
        BlockForWord = TFormatter::makeBlockForWord(v87, v254, v84, v85, v86);
        v256 = (_QWORD *)BlockForWord;
      }
      else
      {
        v257 = v251 + 72 * v252;
        v258 = (__int32 *)(v257 + 48);
        if (*(char *)(v257 + 71) < 0)
          v258 = *(__int32 **)v258;
        TFormatter::splitPattern((uint64_t *)v87, v258, (uint64_t *)__p, (uint64_t *)&v274);
        v256 = __p[0];
        BlockForWord = (uint64_t)v274;
        if (__p[0] == v274)
        {
          if (*(_BYTE *)__p[0])
            *(_OWORD *)((char *)__p[0] + 24) = *(_OWORD *)(v291[0] + 72 * v252 + 24);
          BlockForWord = (uint64_t)v256;
        }
      }
      v251 = v291[0];
      v259 = *(_QWORD *)(v291[0] + 72 * v252 + 16);
      v256[1] = v259;
      *(_QWORD *)(BlockForWord + 16) = v252;
      *(_QWORD *)(BlockForWord + 144) = v253;
      if (v253)
        v253[19] = BlockForWord;
      v252 = v259;
      v253 = v256;
    }
    while (*(_QWORD *)(v251 + 72 * v259 + 16) != -1);
  }
  __p[0] = v283;
  std::vector<std::vector<TItnGrammarStateData const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  TAllocator::clear((TAllocator *)v284);
  if (v285)
  {
    v286 = (uint64_t *)v285;
    operator delete(v285);
  }
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  __p[0] = v291;
  std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v256;
}

void sub_2098E9198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  v49 = *(void **)(v47 - 192);
  if (v49)
  {
    *(_QWORD *)(v47 - 184) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v47 - 168);
  if (v50)
  {
    *(_QWORD *)(v47 - 160) = v50;
    operator delete(v50);
  }
  __p = (void *)(v47 - 144);
  std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::wstring *TFormatter::applyControls(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t i;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _BOOL4 v55;
  int *v56;
  int v57;
  int *v58;
  char v59;
  unsigned __int8 v60;
  int v61;
  unsigned int v62;
  unsigned __int8 v63;
  char v64;
  int v65;
  int v66;
  TLocaleInfo *v67;
  TLocaleInfo *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  int ItnControlCategory;
  int v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _OWORD *v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  int v101;
  int v102;
  char *v103;
  _QWORD *v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  char *v112;
  char *v113;
  __int128 v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  char *v126;
  char *v127;
  char *v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  __int128 v132;
  char *v133;
  __int128 v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;
  __int128 v138;
  unint64_t v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  __int128 v145;
  char *v146;
  __int128 v147;
  char *v148;
  __int128 v149;
  _QWORD *v150;
  _QWORD *v151;
  char *v152;
  __int128 v153;
  char *v154;
  __int128 v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  unint64_t v160;
  char *v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  __int128 v165;
  _QWORD *v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t ActiveConfigHandle;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  char *v191;
  _BYTE *v192;
  uint64_t v193;
  unint64_t j;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  void **v198;
  __int32 *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  TBlock *v208;
  void *v209;
  std::wstring *v210;
  std::wstring *data;
  TBlock *v213;
  char **v215;
  uint64_t v216;
  void **v217;
  TBlock *v218;
  uint64_t v219;
  char v220;
  unsigned __int8 *v223;
  void *v224[2];
  char v225;
  void *v226;
  void *v227;
  uint64_t v228;
  void *v229;
  _BYTE *v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  void *v236;
  char *v237;
  char *v238;
  void *__p;
  void *__dst;
  unint64_t v241;
  _OWORD v242[4];
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD v251[3];

  v249 = 0;
  v250 = 0;
  v251[0] = 0;
  std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&v249, *(const void **)a6, *(_QWORD *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3));
  v246 = 0;
  v247 = 0;
  v248 = 0;
  std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&v246, v249, (uint64_t)v250, 0xAAAAAAAAAAAAAAABLL * (v250 - v249));
  v243 = 0;
  v244 = 0;
  v245 = 0;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v242[2] = v9;
  v242[3] = v9;
  v242[0] = v9;
  v242[1] = v9;
  if (!a2)
  {
    v210 = 0;
    goto LABEL_372;
  }
  v10 = 0;
  v11 = -1;
  v215 = (char **)a7;
  v216 = -1;
  v218 = (TBlock *)a2;
  v213 = (TBlock *)a2;
  do
  {
    if ((v10 & 1) != 0)
      goto LABEL_6;
    if (*((_QWORD *)a2 + 1) == a5)
    {
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)&v243, (char *)v249, (uint64_t)v250, 0xAAAAAAAAAAAAAAABLL * (v250 - v249));
LABEL_6:
      v12 = 1;
      goto LABEL_8;
    }
    v12 = 0;
LABEL_8:
    if ((char)a2[71] < 0)
      v13 = *((_QWORD *)a2 + 7);
    else
      v13 = a2[71];
    v220 = v12;
    if (v13 && !*a2)
    {
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)&v246, (char *)v249, (uint64_t)v250, 0xAAAAAAAAAAAAAAABLL * (v250 - v249));
      v218 = (TBlock *)a2;
      v216 = v11;
    }
    v14 = *((_QWORD *)a2 + 1);
    __p = 0;
    __dst = 0;
    v241 = 0;
    std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&__p, v249, (uint64_t)v250, 0xAAAAAAAAAAAAAAABLL * (v250 - v249));
    v223 = a2;
    if (v14 != -1)
    {
      v15 = *a3;
      if (*(_BYTE *)(*a3 + 112 * v14 + 32))
      {
        v16 = (char *)__p;
        if (__dst == __p)
        {
          v19 = 0;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          do
          {
            if (getItnControlCategory(*(_QWORD *)&v16[v17]) != 1)
            {
              v20 = (char *)__p + 24 * v19++;
              v21 = *(_OWORD *)((char *)__p + v17);
              *((_QWORD *)v20 + 2) = *(_QWORD *)((char *)__p + v17 + 16);
              *(_OWORD *)v20 = v21;
            }
            ++v18;
            v16 = (char *)__p;
            v17 += 24;
          }
          while (v18 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)__p) >> 3));
        }
        std::vector<TItnControl>::resize((uint64_t)&__p, v19);
        v15 = *a3;
      }
      if (*(_BYTE *)(v15 + 112 * v14 + 104))
      {
        v22 = 0;
        if (v11 == -1)
          v23 = v242;
        else
          v23 = (_OWORD *)(v15 + 112 * v11 + 40);
        v24 = v15 + 112 * v14 + 40;
        do
        {
          v25 = *(_QWORD *)(v24 + 8 * v22);
          if (*((_QWORD *)v23 + v22) != v25)
          {
            if (v25 == -1)
              v26 = *((_QWORD *)v23 + v22);
            else
              v26 = *(_QWORD *)(v24 + 8 * v22);
            if (v25 == -1)
              v27 = 2;
            else
              v27 = 1;
            v28 = __dst;
            if ((unint64_t)__dst >= v241)
            {
              v30 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)__p) >> 3);
              v31 = v30 + 1;
              if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_384:
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v241 - (_QWORD)__p) >> 3) > v31)
                v31 = 0x5555555555555556 * ((uint64_t)(v241 - (_QWORD)__p) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v241 - (_QWORD)__p) >> 3) >= 0x555555555555555)
                v32 = 0xAAAAAAAAAAAAAAALL;
              else
                v32 = v31;
              if (v32)
                v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v241, v32);
              else
                v33 = 0;
              v34 = &v33[24 * v30];
              *(_QWORD *)v34 = v26;
              *((_QWORD *)v34 + 1) = v27;
              *((_QWORD *)v34 + 2) = 2;
              v36 = (char *)__p;
              v35 = (char *)__dst;
              v37 = v34;
              if (__dst == __p)
              {
                a2 = v223;
              }
              else
              {
                a2 = v223;
                do
                {
                  v38 = *(_OWORD *)(v35 - 24);
                  *((_QWORD *)v37 - 1) = *((_QWORD *)v35 - 1);
                  *(_OWORD *)(v37 - 24) = v38;
                  v37 -= 24;
                  v35 -= 24;
                }
                while (v35 != v36);
                v35 = (char *)__p;
              }
              v29 = v34 + 24;
              __p = v37;
              __dst = v34 + 24;
              v241 = (unint64_t)&v33[24 * v32];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *(_QWORD *)__dst = v26;
              v28[1] = v27;
              v29 = v28 + 3;
              v28[2] = 2;
            }
            __dst = v29;
          }
          ++v22;
        }
        while (v22 != 4);
        for (i = 0; i != 4; ++i)
        {
          v40 = *(_QWORD *)(v15 + 112 * v14 + 8 * i + 72);
          if (v40 != -1)
          {
            v41 = __dst;
            if ((unint64_t)__dst >= v241)
            {
              v43 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)__p) >> 3);
              v44 = v43 + 1;
              if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_384;
              if (0x5555555555555556 * ((uint64_t)(v241 - (_QWORD)__p) >> 3) > v44)
                v44 = 0x5555555555555556 * ((uint64_t)(v241 - (_QWORD)__p) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v241 - (_QWORD)__p) >> 3) >= 0x555555555555555)
                v45 = 0xAAAAAAAAAAAAAAALL;
              else
                v45 = v44;
              if (v45)
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v241, v45);
              else
                v46 = 0;
              v47 = &v46[24 * v43];
              *(_QWORD *)v47 = v40;
              *((_QWORD *)v47 + 1) = 3;
              *((_QWORD *)v47 + 2) = 2;
              v49 = (char *)__p;
              v48 = (char *)__dst;
              v50 = v47;
              if (__dst == __p)
              {
                a2 = v223;
              }
              else
              {
                a2 = v223;
                do
                {
                  v51 = *(_OWORD *)(v48 - 24);
                  *((_QWORD *)v50 - 1) = *((_QWORD *)v48 - 1);
                  *(_OWORD *)(v50 - 24) = v51;
                  v50 -= 24;
                  v48 -= 24;
                }
                while (v48 != v49);
                v48 = (char *)__p;
              }
              v42 = v47 + 24;
              __p = v50;
              __dst = v47 + 24;
              v241 = (unint64_t)&v46[24 * v45];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_QWORD *)__dst = v40;
              v41[1] = 3;
              v42 = v41 + 3;
              v41[2] = 2;
            }
            __dst = v42;
          }
        }
        v11 = v14;
      }
    }
    collectControls(&__p, (uint64_t)a2, 2, 0);
    collectControls(&__p, (uint64_t)a2, 1, 0);
    collectControls(&__p, (uint64_t)a2, 3, -1);
    collectControls(&__p, (uint64_t)a2, 6, 1);
    collectControls(&__p, (uint64_t)a2, 5, 0);
    v52 = *((_QWORD *)a2 + 18);
    if (v52)
    {
      v53 = 0;
      do
      {
        v54 = *(_QWORD *)(v52 + 8);
        v55 = v54 != -1 && *(unsigned __int8 *)(*a3 + 112 * v54 + 32) != 0;
        collectControls(&__p, v52, 6, -1);
        collectControls(&__p, v52, 4, -1);
        v53 |= v55;
        if ((v53 & 1) == 0)
          collectControls(&__p, v52, 4, 1);
        if (*(char *)(v52 + 71) < 0)
        {
          if (*(_QWORD *)(v52 + 56))
            goto LABEL_92;
        }
        else if (*(_BYTE *)(v52 + 71))
        {
          goto LABEL_92;
        }
        collectControls(&__p, v52, 2, -1);
        v52 = *(_QWORD *)(v52 + 144);
      }
      while (v52);
    }
    std::vector<TItnControl>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControl const*>,std::__wrap_iter<TItnControl const*>>((uint64_t)&__p, (uint64_t)__dst, *v215, v215[1], 0xAAAAAAAAAAAAAAABLL * ((v215[1] - *v215) >> 3));
LABEL_92:
    v236 = 0;
    v237 = 0;
    v238 = 0;
    v56 = (int *)(a2 + 48);
    if ((char)a2[71] < 0)
      v56 = (int *)*((_QWORD *)a2 + 6);
    v217 = (void **)(a2 + 48);
    v219 = v11;
    v57 = *v56;
    if (*v56)
    {
      v58 = v56 + 1;
      v59 = 1;
      while (1)
      {
        if ((v60 & 1) == 0
        {
          v67 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v67);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v67;
        }
        if (v57 > 159)
        {
          if (v57 >= 12288)
          {
            if (v57 == 12288)
              goto LABEL_109;
            v61 = 65279;
          }
          else
          {
            if (v57 == 160)
              goto LABEL_109;
            v61 = 8203;
          }
          if (v57 != v61)
            goto LABEL_107;
        }
        else if (v57 > 0x20 || ((1 << v57) & 0x100002600) == 0)
        {
LABEL_107:
          v62 = *(v58 - 1);
          if ((v63 & 1) == 0
          {
            v68 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v68);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v68;
            a2 = v223;
          }
          v59 = 0;
          v64 = 0;
          v65 = 0;
          if (!TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v62))
            goto LABEL_116;
        }
LABEL_109:
        v66 = *v58++;
        v57 = v66;
        if (!v66)
        {
          v65 = 1;
          v64 = v59;
          goto LABEL_116;
        }
      }
    }
    v64 = 0;
    v65 = 0;
LABEL_116:
    std::vector<TItnControl>::resize((uint64_t)&v236, 0);
    std::vector<TItnControl>::resize((uint64_t)&v249, 0);
    v69 = (char *)__p;
    v70 = (char *)__dst;
    if (__dst != __p)
    {
      v71 = 0;
      v72 = 0;
      while (1)
      {
        v73 = &v69[24 * v72];
        switch(*((_QWORD *)v73 + 1))
        {
          case 1:
            if (v70 == v69)
              goto LABEL_127;
            v74 = 0;
            v75 = 0;
            v70 = v69;
            do
            {
              if ((unint64_t)(*(_QWORD *)&v70[v74 + 8] - 1) <= 1)
              {
                ItnControlCategory = getItnControlCategory(*(_QWORD *)&v70[v74]);
                v77 = getItnControlCategory(*((_QWORD *)__p + 3 * v72));
                v70 = (char *)__p;
                if (ItnControlCategory == v77)
                {
                  v78 = *(_QWORD *)((char *)__p + v74 + 16);
                  v79 = *((_QWORD *)__p + 3 * v72 + 2);
                  if (v78 > v79 || v75 > v72 && v78 == v79)
                    goto LABEL_213;
                }
              }
              ++v75;
              v74 += 24;
            }
            while (v75 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - v70) >> 3));
LABEL_127:
            v80 = &v70[24 * v72];
            v81 = v250;
            if ((unint64_t)v250 >= v251[0])
            {
              v97 = 0xAAAAAAAAAAAAAAABLL * (v250 - v249);
              v98 = v97 + 1;
              if (v97 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_385;
              if (0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) > v98)
                v98 = 0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) >= 0x555555555555555)
                v99 = 0xAAAAAAAAAAAAAAALL;
              else
                v99 = v98;
              if (v99)
                v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v251, v99);
              else
                v100 = 0;
              v133 = &v100[24 * v97];
              v134 = *(_OWORD *)v80;
              *((_QWORD *)v133 + 2) = *((_QWORD *)v80 + 2);
              *(_OWORD *)v133 = v134;
              v136 = v249;
              v135 = v250;
              v137 = v133;
              if (v250 != v249)
              {
                do
                {
                  v138 = *(_OWORD *)(v135 - 3);
                  *((_QWORD *)v137 - 1) = *(v135 - 1);
                  *(_OWORD *)(v137 - 24) = v138;
                  v137 -= 24;
                  v135 -= 3;
                }
                while (v135 != v136);
                v135 = v249;
              }
              v83 = v133 + 24;
              v249 = v137;
              v250 = v133 + 24;
              v251[0] = &v100[24 * v99];
              if (v135)
                operator delete(v135);
            }
            else
            {
              v82 = *(_OWORD *)v80;
              v250[2] = *((_QWORD *)v80 + 2);
              *v81 = v82;
              v83 = (_QWORD *)v81 + 3;
            }
            v250 = v83;
            v70 = (char *)__p;
LABEL_213:
            if (__dst == v70)
            {
LABEL_220:
              v141 = &v70[24 * v72];
              v88 = v237;
              if (v237 >= v238)
              {
                v143 = 0xAAAAAAAAAAAAAAABLL * ((v237 - (_BYTE *)v236) >> 3);
                v144 = v143 + 1;
                if (v143 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_385;
                if (0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3) > v144)
                  v144 = 0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v236) >> 3) >= 0x555555555555555)
                  v91 = 0xAAAAAAAAAAAAAAALL;
                else
                  v91 = v144;
                if (v91)
                  v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v238, v91);
                else
                  v92 = 0;
                v124 = &v92[24 * v143];
                v145 = *(_OWORD *)v141;
                *((_QWORD *)v124 + 2) = *((_QWORD *)v141 + 2);
                *(_OWORD *)v124 = v145;
                v146 = (char *)v236;
                v126 = v237;
                v128 = v124;
                if (v237 != v236)
                {
                  do
                  {
                    v147 = *(_OWORD *)(v126 - 24);
                    *((_QWORD *)v128 - 1) = *((_QWORD *)v126 - 1);
                    *(_OWORD *)(v128 - 24) = v147;
                    v128 -= 24;
                    v126 -= 24;
                  }
                  while (v126 != v146);
LABEL_234:
                  v126 = (char *)v236;
                }
LABEL_235:
                v142 = v124 + 24;
                v236 = v128;
                v237 = v124 + 24;
                v238 = &v92[24 * v91];
                if (v126)
                  operator delete(v126);
              }
              else
              {
                v93 = *(_OWORD *)v141;
                v94 = *((_QWORD *)v141 + 2);
LABEL_222:
                *((_QWORD *)v88 + 2) = v94;
                *(_OWORD *)v88 = v93;
                v142 = v88 + 24;
              }
              v237 = v142;
            }
            else
            {
              v139 = ((_BYTE *)__dst - v70) / 24;
              if (v139 <= 1)
                v139 = 1;
              v140 = v70 + 8;
              while (*v140 != 5 || *(v140 - 1) != *(_QWORD *)&v70[24 * v72])
              {
                v140 += 3;
                if (!--v139)
                  goto LABEL_220;
              }
            }
            goto LABEL_238;
          case 2:
            v88 = v237;
            if (v237 < v238)
              goto LABEL_147;
            v95 = 0xAAAAAAAAAAAAAAABLL * ((v237 - (_BYTE *)v236) >> 3);
            v96 = v95 + 1;
            if (v95 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_385;
            if (0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3) > v96)
              v96 = 0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v236) >> 3) >= 0x555555555555555)
              v91 = 0xAAAAAAAAAAAAAAALL;
            else
              v91 = v96;
            if (v91)
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v238, v91);
            else
              v92 = 0;
            v124 = &v92[24 * v95];
            v130 = *(_OWORD *)v73;
            *((_QWORD *)v124 + 2) = *((_QWORD *)v73 + 2);
            *(_OWORD *)v124 = v130;
            v131 = (char *)v236;
            v126 = v237;
            v128 = v124;
            if (v237 == v236)
              goto LABEL_235;
            do
            {
              v132 = *(_OWORD *)(v126 - 24);
              *((_QWORD *)v128 - 1) = *((_QWORD *)v126 - 1);
              *(_OWORD *)(v128 - 24) = v132;
              v128 -= 24;
              v126 -= 24;
            }
            while (v126 != v131);
            goto LABEL_234;
          case 3:
            v84 = v71;
            v85 = v72;
            if (v72 >= 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3))
              goto LABEL_134;
            do
            {
              if (*(_QWORD *)&v69[v84 + 8] == 2)
              {
                v86 = getItnControlCategory(*(_QWORD *)&v69[v84]);
                v87 = getItnControlCategory(*((_QWORD *)__p + 3 * v72));
                v69 = (char *)__p;
                if (v86 == v87 && *(_QWORD *)((char *)__p + v84 + 16) == *((_QWORD *)__p + 3 * v72 + 2))
                  goto LABEL_173;
              }
              ++v85;
              v84 += 24;
            }
            while (v85 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - v69) >> 3));
LABEL_134:
            if ((char)a2[71] < 0)
            {
              if (!*((_QWORD *)a2 + 7))
                goto LABEL_170;
            }
            else if (!a2[71])
            {
              goto LABEL_170;
            }
            if ((v64 & 1) != 0
              && (v101 = getItnControlCategory(*(_QWORD *)&v69[24 * v72]), v69 = (char *)__p, v101 != 2)
              || v65
              && (v102 = getItnControlCategory(*(_QWORD *)&v69[24 * v72]), v69 = (char *)__p, !v102)
              && *((_QWORD *)__p + 3 * v72 + 2) == 1)
            {
LABEL_170:
              v103 = &v69[24 * v72];
              v104 = v250;
              if ((unint64_t)v250 < v251[0])
              {
                v105 = *(_OWORD *)v103;
                v106 = *((_QWORD *)v103 + 2);
                goto LABEL_172;
              }
              v116 = 0xAAAAAAAAAAAAAAABLL * (v250 - v249);
              v117 = v116 + 1;
              if (v116 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_385;
              if (0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) > v117)
                v117 = 0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) >= 0x555555555555555)
                v118 = 0xAAAAAAAAAAAAAAALL;
              else
                v118 = v117;
              if (v118)
                v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v251, v118);
              else
                v119 = 0;
              v148 = &v119[24 * v116];
              v149 = *(_OWORD *)v103;
              *((_QWORD *)v148 + 2) = *((_QWORD *)v103 + 2);
              *(_OWORD *)v148 = v149;
              v151 = v249;
              v150 = v250;
              v152 = v148;
              if (v250 != v249)
              {
                do
                {
                  v153 = *(_OWORD *)(v150 - 3);
                  *((_QWORD *)v152 - 1) = *(v150 - 1);
                  *(_OWORD *)(v152 - 24) = v153;
                  v152 -= 24;
                  v150 -= 3;
                }
                while (v150 != v151);
                goto LABEL_243;
              }
              goto LABEL_244;
            }
LABEL_173:
            if (__dst == v69)
            {
LABEL_180:
              v112 = &v69[24 * v72];
              v113 = v237;
              if (v237 >= v238)
              {
                v120 = 0xAAAAAAAAAAAAAAABLL * ((v237 - (_BYTE *)v236) >> 3);
                v121 = v120 + 1;
                if (v120 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_385;
                if (0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3) > v121)
                  v121 = 0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v236) >> 3) >= 0x555555555555555)
                  v122 = 0xAAAAAAAAAAAAAAALL;
                else
                  v122 = v121;
                if (v122)
                  v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v238, v122);
                else
                  v123 = 0;
                v154 = &v123[24 * v120];
                v155 = *(_OWORD *)v112;
                *((_QWORD *)v154 + 2) = *((_QWORD *)v112 + 2);
                *(_OWORD *)v154 = v155;
                v157 = (char *)v236;
                v156 = v237;
                v158 = v154;
                if (v237 != v236)
                {
                  do
                  {
                    v159 = *(_OWORD *)(v156 - 24);
                    *((_QWORD *)v158 - 1) = *((_QWORD *)v156 - 1);
                    *(_OWORD *)(v158 - 24) = v159;
                    v158 -= 24;
                    v156 -= 24;
                  }
                  while (v156 != v157);
                  v156 = (char *)v236;
                }
                v115 = v154 + 24;
                v236 = v158;
                v237 = v154 + 24;
                v238 = &v123[24 * v122];
                if (v156)
                  operator delete(v156);
              }
              else
              {
                v114 = *(_OWORD *)v112;
                *((_QWORD *)v237 + 2) = *((_QWORD *)v112 + 2);
                *(_OWORD *)v113 = v114;
                v115 = v113 + 24;
              }
              v237 = v115;
              v69 = (char *)__p;
            }
            else
            {
              v108 = 0;
              v109 = 0;
              while (1)
              {
                if (*(_QWORD *)&v69[v108 + 8] == 1)
                {
                  v110 = getItnControlCategory(*(_QWORD *)&v69[v108]);
                  v111 = getItnControlCategory(*((_QWORD *)__p + 3 * v72));
                  v69 = (char *)__p;
                  if (v110 == v111
                    && *(_QWORD *)((char *)__p + v108 + 16) == 3
                    && *((_QWORD *)__p + 3 * v72 + 2) == 2)
                  {
                    break;
                  }
                }
                ++v109;
                v108 += 24;
                if (v109 >= 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - v69) >> 3))
                  goto LABEL_180;
              }
            }
            if (__dst != v69)
            {
              v160 = ((_BYTE *)__dst - v69) / 24;
              v161 = &v69[24 * v72];
              if (v160 <= 1)
                v160 = 1;
              v162 = v69 + 8;
              while (*v162 != 6 || *(v162 - 1) != *(_QWORD *)v161)
              {
                v162 += 3;
                if (!--v160)
                  goto LABEL_238;
              }
              v104 = v250;
              if ((unint64_t)v250 >= v251[0])
              {
                v163 = 0xAAAAAAAAAAAAAAABLL * (v250 - v249);
                v164 = v163 + 1;
                if (v163 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_385:
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) > v164)
                  v164 = 0x5555555555555556 * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251[0] - (_QWORD)v249) >> 3) >= 0x555555555555555)
                  v118 = 0xAAAAAAAAAAAAAAALL;
                else
                  v118 = v164;
                if (v118)
                  v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v251, v118);
                else
                  v119 = 0;
                v148 = &v119[24 * v163];
                v165 = *(_OWORD *)v161;
                *((_QWORD *)v148 + 2) = *((_QWORD *)v161 + 2);
                *(_OWORD *)v148 = v165;
                v166 = v249;
                v150 = v250;
                v152 = v148;
                if (v250 != v249)
                {
                  do
                  {
                    v167 = *(_OWORD *)(v150 - 3);
                    *((_QWORD *)v152 - 1) = *(v150 - 1);
                    *(_OWORD *)(v152 - 24) = v167;
                    v152 -= 24;
                    v150 -= 3;
                  }
                  while (v150 != v166);
LABEL_243:
                  v150 = v249;
                }
LABEL_244:
                v107 = v148 + 24;
                v249 = v152;
                v250 = v148 + 24;
                v251[0] = &v119[24 * v118];
                if (v150)
                  operator delete(v150);
              }
              else
              {
                v105 = *(_OWORD *)v161;
                v106 = *((_QWORD *)v161 + 2);
LABEL_172:
                v104[2] = v106;
                *(_OWORD *)v104 = v105;
                v107 = v104 + 3;
              }
              v250 = v107;
            }
LABEL_238:
            ++v72;
            v69 = (char *)__p;
            v70 = (char *)__dst;
            v71 += 24;
            if (v72 >= 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)__p) >> 3))
              goto LABEL_276;
            break;
          case 4:
            v88 = v237;
            if (v237 < v238)
            {
LABEL_147:
              v93 = *(_OWORD *)v73;
              v94 = *((_QWORD *)v73 + 2);
              goto LABEL_222;
            }
            v89 = 0xAAAAAAAAAAAAAAABLL * ((v237 - (_BYTE *)v236) >> 3);
            v90 = v89 + 1;
            if (v89 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_385;
            if (0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3) > v90)
              v90 = 0x5555555555555556 * ((v238 - (_BYTE *)v236) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v236) >> 3) >= 0x555555555555555)
              v91 = 0xAAAAAAAAAAAAAAALL;
            else
              v91 = v90;
            if (v91)
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v238, v91);
            else
              v92 = 0;
            v124 = &v92[24 * v89];
            v125 = *(_OWORD *)v73;
            *((_QWORD *)v124 + 2) = *((_QWORD *)v73 + 2);
            *(_OWORD *)v124 = v125;
            v127 = (char *)v236;
            v126 = v237;
            v128 = v124;
            if (v237 == v236)
              goto LABEL_235;
            do
            {
              v129 = *(_OWORD *)(v126 - 24);
              *((_QWORD *)v128 - 1) = *((_QWORD *)v126 - 1);
              *(_OWORD *)(v128 - 24) = v129;
              v128 -= 24;
              v126 -= 24;
            }
            while (v126 != v127);
            goto LABEL_234;
          default:
            goto LABEL_238;
        }
      }
    }
LABEL_276:
    if (!*a2)
    {
      if ((char)a2[71] < 0)
      {
        if (!*((_QWORD *)a2 + 7))
        {
LABEL_290:
          collectControls((void **)&v249, (uint64_t)a2, 3, 1);
          a2 = (unsigned __int8 *)*((_QWORD *)a2 + 18);
          v11 = v219;
          goto LABEL_345;
        }
      }
      else if (!a2[71])
      {
        goto LABEL_290;
      }
      TBlock::applyControls((uint64_t)a2, (uint64_t *)&v236, *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336));
      *(_QWORD *)&v172 = -1;
      *((_QWORD *)&v172 + 1) = -1;
      v234 = v172;
      v235 = v172;
      v232 = v172;
      v233 = v172;
      TItnControlState::set(&v232, (uint64_t *)&__p, 0, 1, 1, 2uLL);
      v173 = v233;
      *((_OWORD *)a2 + 10) = v232;
      *((_OWORD *)a2 + 11) = v173;
      v174 = v235;
      *((_OWORD *)a2 + 12) = v234;
      *((_OWORD *)a2 + 13) = v174;
      goto LABEL_290;
    }
    if (*((_QWORD *)a2 + 2) != -1 && *((_QWORD *)a2 + 1) != -1)
    {
      *(_QWORD *)&v168 = -1;
      *((_QWORD *)&v168 + 1) = -1;
      v234 = v168;
      v235 = v168;
      v232 = v168;
      v233 = v168;
      TItnControlState::set(&v232, (uint64_t *)&v236, 1, 1, 1, 1uLL);
      v169 = *((_QWORD *)&v234 + 1);
      if (*((_QWORD *)&v234 + 1) == -1)
        v169 = *((_QWORD *)&v232 + 1);
      if (v169 != 9)
      {
        if (v169 == 8)
        {
          v170 = *(_QWORD *)(a1 + 48);
          v171 = 27280;
          goto LABEL_292;
        }
        if (v169 != 7)
        {
          v170 = *(_QWORD *)(a1 + 48);
          v175 = (uint64_t *)(v170 + 136);
LABEL_294:
          v176 = *a3 + 112 * *((_QWORD *)a2 + 1);
          v177 = *(_QWORD *)(v176 + 80);
          v178 = *(_QWORD *)(v176 + 48);
          if (v177 != -1)
            v178 = v177;
          if (v178 != 9)
          {
            if (v178 == 8)
            {
              v179 = 27280;
              goto LABEL_301;
            }
            if (v178 != 7)
            {
              v180 = (_QWORD *)(v170 + 136);
LABEL_303:
              v181 = *v175;
              if (*v180 != *v175)
              {
                v230 = 0;
                v231 = 0;
                v229 = 0;
                TGrammarManager::search(*(_QWORD **)(a1 + 104), a3, *((_QWORD *)a2 + 1) - *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4) + *((_QWORD *)a2 + 2), v181, (uint64_t *)&v229);
                if (*(_QWORD *)(a1 + 112))
                {
                  v182 = *(_QWORD *)(a1 + 48);
                  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v182 + 19248));
                  if (*(_BYTE *)(v182 + TParam::getValidConfig((TParam *)(v182 + 19248), ActiveConfigHandle) + 19400))
                  {
                    v227 = 0;
                    v228 = 0;
                    v226 = 0;
                    TGrammarManager2::search(*(_QWORD **)(a1 + 112), a3, *((_QWORD *)a2 + 1) - *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4) + *((_QWORD *)a2 + 2), v181, (uint64_t *)&v226);
                    if (v226 != v227)
                    {
                      v184 = *((_QWORD *)v226 + 3);
                      if (v184 == *((_QWORD *)a2 + 3))
                      {
                        v185 = *((_QWORD *)v226 + 4);
                        if (v185 == *((_QWORD *)a2 + 4)
                          && *((_QWORD *)v226 + 2) - (v185 + v184) == *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1))
                        {
                          loggableUnicode(*((unsigned int **)v226 + 1), v224);
                          v190 = v224;
                          if (v225 < 0)
                            v190 = (void **)v224[0];
                          tknPrintf("Adaptation Result: %s\n", v186, v187, v188, v189, v190);
                          if (v225 < 0)
                            operator delete(v224[0]);
                        }
                      }
                    }
                    TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 112));
                    if (v226)
                    {
                      v227 = v226;
                      operator delete(v226);
                    }
                  }
                }
                v191 = (char *)v229;
                v192 = v230;
                if (v230 != v229)
                {
                  v193 = 0;
                  for (j = 0; j < 0x6DB6DB6DB6DB6DB7 * ((v192 - v191) >> 3); ++j)
                  {
                    v195 = *(_QWORD *)&v191[v193 + 24];
                    v196 = *(_QWORD *)&v191[v193 + 32];
                    if (*(_QWORD *)&v191[v193 + 16] - (v195 + v196) == *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)
                      && v195 == *((_QWORD *)a2 + 3)
                      && v196 == *((_QWORD *)a2 + 4))
                    {
                      v226 = 0;
                      v224[0] = 0;
                      TFormatter::splitPattern((uint64_t *)a1, *(__int32 **)&v191[v193 + 8], (uint64_t *)&v226, (uint64_t *)v224);
                      v197 = (char *)v226;
                      if (v226 == v224[0] && *(_BYTE *)v226)
                      {
                        v206 = *((_QWORD *)a2 + 18);
                        *((_QWORD *)v226 + 18) = v206;
                        if (v206)
                          *(_QWORD *)(v206 + 152) = v197;
                        v207 = *((_QWORD *)a2 + 19);
                        if (v207)
                        {
                          *(_QWORD *)(v207 + 144) = v197;
                          *((_QWORD *)v197 + 19) = v207;
                        }
                        else
                        {
                          v208 = v218;
                          if (v218 == v213)
                            v208 = (TBlock *)v197;
                          v218 = v208;
                          v213 = (TBlock *)v197;
                        }
                        *((_QWORD *)v197 + 3) = *((_QWORD *)a2 + 3);
                        *(_OWORD *)(v197 + 8) = *(_OWORD *)(a2 + 8);
                        *((_QWORD *)v197 + 4) = *((_QWORD *)a2 + 4);
                        v209 = (void *)*((_QWORD *)a2 + 15);
                        if (v209)
                        {
                          *((_QWORD *)a2 + 16) = v209;
                          operator delete(v209);
                        }
                        if ((char)a2[119] < 0)
                          operator delete(*((void **)a2 + 12));
                        if ((char)a2[95] < 0)
                          operator delete(*((void **)a2 + 9));
                        if ((char)a2[71] < 0)
                          operator delete(*v217);
                        MEMORY[0x20BD149A8](a2, 0x10F2C405D5B575ELL);
                        a2 = (unsigned __int8 *)v226;
                        break;
                      }
                      v191 = (char *)v229;
                      v192 = v230;
                    }
                    v193 += 56;
                  }
                }
                TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 104));
                if (v229)
                {
                  v230 = v229;
                  operator delete(v229);
                }
              }
              goto LABEL_327;
            }
          }
          v179 = 27272;
LABEL_301:
          v180 = (_QWORD *)(v170 + v179);
          goto LABEL_303;
        }
      }
      v170 = *(_QWORD *)(a1 + 48);
      v171 = 27272;
LABEL_292:
      v175 = (uint64_t *)(v170 + v171);
      goto LABEL_294;
    }
LABEL_327:
    *(_QWORD *)&v232 = 0;
    v229 = 0;
    v198 = (void **)(a2 + 48);
    v199 = (__int32 *)(a2 + 48);
    if ((char)a2[71] < 0)
      v199 = (__int32 *)*v198;
    TFormatter::splitPattern((uint64_t *)a1, v199, (uint64_t *)&v232, (uint64_t *)&v229);
    v200 = v232;
    *(_QWORD *)(v232 + 8) = *((_QWORD *)a2 + 1);
    v201 = v229;
    *((_QWORD *)v229 + 2) = *((_QWORD *)a2 + 2);
    TFormatter::assignWordRules(a1, v200, a3);
    v202 = *((_QWORD *)a2 + 19);
    if (v202)
    {
      *(_QWORD *)(v202 + 144) = v200;
      *(_QWORD *)(v200 + 152) = v202;
    }
    else
    {
      v203 = (uint64_t)v218;
      if (v218 == v213)
        v203 = v200;
      v218 = (TBlock *)v203;
      v213 = (TBlock *)v200;
    }
    v204 = *((_QWORD *)a2 + 18);
    v201[18] = v204;
    if (v204)
      *(_QWORD *)(v204 + 152) = v201;
    v205 = (void *)*((_QWORD *)a2 + 15);
    if (v205)
    {
      *((_QWORD *)a2 + 16) = v205;
      operator delete(v205);
    }
    if ((char)a2[119] < 0)
      operator delete(*((void **)a2 + 12));
    if ((char)a2[95] < 0)
      operator delete(*((void **)a2 + 9));
    if ((char)a2[71] < 0)
      operator delete(*v198);
    MEMORY[0x20BD149A8](a2, 0x10F2C405D5B575ELL);
    std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)&v249, v246, (uint64_t)v247, 0xAAAAAAAAAAAAAAABLL * ((v247 - v246) >> 3));
    v11 = v216;
    a2 = (unsigned __int8 *)v218;
LABEL_345:
    if (v236)
    {
      v237 = (char *)v236;
      operator delete(v236);
    }
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
    v10 = v220;
  }
  while (a2);
  if ((v220 & 1) != 0)
  {
    v210 = (std::wstring *)v213;
    if (&v243 != v215)
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)v215, v243, (uint64_t)v244, 0xAAAAAAAAAAAAAAABLL * ((v244 - v243) >> 3));
    goto LABEL_374;
  }
  a7 = (char *)v215;
  v210 = (std::wstring *)v213;
LABEL_372:
  if (&v249 != (_QWORD **)a7)
    std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>(a7, (char *)v249, (uint64_t)v250, 0xAAAAAAAAAAAAAAABLL * (v250 - v249));
LABEL_374:
  if (v210)
  {
    data = v210;
    do
    {
      TBlock::adjustResult(data);
      data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
    }
    while (data);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  return v210;
}

void sub_2098EAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  void *v51;
  void *v52;
  void *v53;

  MEMORY[0x20BD149A8](v48, 0x1070C40ADD13FEBLL);
  if (__p)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  v51 = *(void **)(v49 - 168);
  if (v51)
  {
    *(_QWORD *)(v49 - 160) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v49 - 144);
  if (v52)
  {
    *(_QWORD *)(v49 - 136) = v52;
    operator delete(v52);
  }
  v53 = *(void **)(v49 - 120);
  if (v53)
  {
    *(_QWORD *)(v49 - 112) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

void collectControls(void **a1, uint64_t a2, uint64_t a3, int a4)
{
  const __int32 *v8;
  int v9;
  int *v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  TLocaleInfo *v14;
  int v15;
  unsigned __int8 v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int v30;
  unsigned __int8 v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _BYTE *v57;
  _QWORD *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  __int128 v70;
  TLocaleInfo *v71;
  TLocaleInfo *v72;
  uint64_t v73;

  v8 = (const __int32 *)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    v8 = *(const __int32 **)v8;
  v9 = *v8;
  if (*v8)
  {
    v10 = (int *)(v8 + 1);
    while (1)
    {
      if ((v11 & 1) == 0
      {
        v14 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v14);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
      }
      v12 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (v9 >= 48
        && (v9 < 0x3A
         || v9 >= 0x660
         && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) != -1))
      {
        break;
      }
      if ((TLocaleInfo::isAlpha(v12, v9) & 1) != 0)
        break;
      v13 = *v10++;
      v9 = v13;
      if (!v13)
      {
        v9 = 1;
        goto LABEL_16;
      }
    }
    v9 = 0;
  }
LABEL_16:
  if (a4 != 1)
  {
    v15 = *v8;
    if (*v8)
    {
      if (a3 == 3)
      {
        v30 = v8[wcslen(v8) - 1];
        if ((v31 & 1) == 0
        {
          v71 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v71);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v71;
        }
        if (v30 > 159)
        {
          if (v30 >= 12288)
          {
            if (v30 != 65279 && v30 != 12288)
              goto LABEL_76;
          }
          else if (v30 != 160 && v30 != 8203)
          {
            goto LABEL_76;
          }
        }
        else if (v30 > 0x20 || ((1 << v30) & 0x100002600) == 0)
        {
          goto LABEL_76;
        }
        v33 = (unint64_t)a1[2];
        v18 = a1[1];
        if ((unint64_t)v18 >= v33)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (_BYTE *)*a1) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)*a1) >> 3);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x555555555555555)
              v37 = 0xAAAAAAAAAAAAAAALL;
            else
              v37 = v35;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(a1 + 2), v37);
            else
              v38 = 0;
            v24 = &v38[24 * v34];
            v25 = &v38[24 * v37];
            *(_QWORD *)v24 = 1;
            *((_QWORD *)v24 + 1) = a3;
            *((_QWORD *)v24 + 2) = 1;
            v26 = v24 + 24;
            v39 = (char *)*a1;
            v27 = (char *)a1[1];
            if (v27 == *a1)
              goto LABEL_73;
            do
            {
              v40 = *(_OWORD *)(v27 - 24);
              *((_QWORD *)v24 - 1) = *((_QWORD *)v27 - 1);
              *(_OWORD *)(v24 - 24) = v40;
              v24 -= 24;
              v27 -= 24;
            }
            while (v27 != v39);
            goto LABEL_72;
          }
LABEL_131:
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
LABEL_60:
        *v18 = 1;
        v18[1] = a3;
        v18[2] = 1;
        v26 = v18 + 3;
LABEL_75:
        a1[1] = v26;
        goto LABEL_76;
      }
      if (a3 != 4)
        goto LABEL_76;
      if ((v16 & 1) == 0
      {
        v72 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v72);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v72;
      }
      if (v15 <= 159)
      {
        if (v15 > 0x20 || ((1 << v15) & 0x100002600) == 0)
          goto LABEL_76;
LABEL_31:
        v17 = (unint64_t)a1[2];
        v18 = a1[1];
        if ((unint64_t)v18 >= v17)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (_BYTE *)*a1) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)*a1) >> 3);
            if (2 * v21 > v20)
              v20 = 2 * v21;
            if (v21 >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v20;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(a1 + 2), v22);
            else
              v23 = 0;
            v24 = &v23[24 * v19];
            v25 = &v23[24 * v22];
            *(_QWORD *)v24 = 1;
            *((_QWORD *)v24 + 1) = 4;
            *((_QWORD *)v24 + 2) = 1;
            v26 = v24 + 24;
            v28 = (char *)*a1;
            v27 = (char *)a1[1];
            if (v27 == *a1)
              goto LABEL_73;
            do
            {
              v29 = *(_OWORD *)(v27 - 24);
              *((_QWORD *)v24 - 1) = *((_QWORD *)v27 - 1);
              *(_OWORD *)(v24 - 24) = v29;
              v24 -= 24;
              v27 -= 24;
            }
            while (v27 != v28);
LABEL_72:
            v27 = (char *)*a1;
LABEL_73:
            *a1 = v24;
            a1[1] = v26;
            a1[2] = v25;
            if (v27)
              operator delete(v27);
            goto LABEL_75;
          }
          goto LABEL_131;
        }
        goto LABEL_60;
      }
      if (v15 >= 12288)
      {
        if (v15 == 65279 || v15 == 12288)
          goto LABEL_31;
      }
      else if (v15 == 160 || v15 == 8203)
      {
        goto LABEL_31;
      }
    }
  }
LABEL_76:
  v41 = *(_QWORD *)(a2 + 40);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 152);
    if (*(_QWORD *)(v41 + 160) != v42)
    {
      v43 = 0;
      if (a3 != 6 || a4 != -1)
        v9 = 0;
      v73 = (uint64_t)(a1 + 2);
      while (1)
      {
        v45 = (uint64_t *)(v42 + 24 * v43);
        v46 = v45[1];
        if (v46 != a3)
          break;
        if (a4 != -1)
        {
          if (a4 && (a4 != 1 || getItnControlCategory(*v45) == 2))
            goto LABEL_129;
LABEL_108:
          v58 = a1[1];
          v57 = a1[2];
          if (v58 < (_QWORD *)v57)
          {
            v59 = *(_OWORD *)v45;
            v58[2] = v45[2];
            *(_OWORD *)v58 = v59;
            v51 = v58 + 3;
            goto LABEL_128;
          }
          v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (_BYTE *)*a1) >> 3);
          v61 = v60 + 1;
          if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_131;
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (_BYTE *)*a1) >> 3);
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x555555555555555)
            v55 = 0xAAAAAAAAAAAAAAALL;
          else
            v55 = v61;
          if (v55)
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v73, v55);
          else
            v56 = 0;
          v63 = &v56[24 * v60];
          v68 = *(_OWORD *)v45;
          *((_QWORD *)v63 + 2) = v45[2];
          *(_OWORD *)v63 = v68;
          v69 = (char *)*a1;
          v64 = (char *)a1[1];
          v66 = v63;
          if (v64 != *a1)
          {
            do
            {
              v70 = *(_OWORD *)(v64 - 24);
              *((_QWORD *)v66 - 1) = *((_QWORD *)v64 - 1);
              *(_OWORD *)(v66 - 24) = v70;
              v66 -= 24;
              v64 -= 24;
            }
            while (v64 != v69);
LABEL_125:
            v64 = (char *)*a1;
          }
LABEL_126:
          v51 = v63 + 24;
          *a1 = v66;
          a1[1] = v63 + 24;
          a1[2] = &v56[24 * v55];
          if (v64)
            operator delete(v64);
          goto LABEL_128;
        }
        if (getItnControlCategory(*v45) == 2)
          goto LABEL_108;
LABEL_129:
        ++v43;
        v42 = *(_QWORD *)(v41 + 152);
        if (v43 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v41 + 160) - v42) >> 3))
          return;
      }
      if (*v45 == 1)
        v47 = v9;
      else
        v47 = 0;
      if (v46 != 4 || v47 == 0)
        goto LABEL_129;
      v50 = a1[1];
      v49 = (unint64_t)a1[2];
      if ((unint64_t)v50 < v49)
      {
        *v50 = 3;
        v50[1] = 6;
        v51 = v50 + 3;
        v50[2] = 1;
LABEL_128:
        a1[1] = v51;
        goto LABEL_129;
      }
      v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (_BYTE *)*a1) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_131;
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)*a1) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      if (v55)
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v73, v55);
      else
        v56 = 0;
      v63 = &v56[24 * v52];
      *(_QWORD *)v63 = 3;
      *((_QWORD *)v63 + 1) = 6;
      *((_QWORD *)v63 + 2) = 1;
      v65 = (char *)*a1;
      v64 = (char *)a1[1];
      v66 = v63;
      if (v64 != *a1)
      {
        do
        {
          v67 = *(_OWORD *)(v64 - 24);
          *((_QWORD *)v66 - 1) = *((_QWORD *)v64 - 1);
          *(_OWORD *)(v66 - 24) = v67;
          v66 -= 24;
          v64 -= 24;
        }
        while (v64 != v65);
        goto LABEL_125;
      }
      goto LABEL_126;
    }
  }
}

void sub_2098EB30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFormatter::countRightContextSpaces(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a2 == a3)
    return 0;
  v4 = a2;
  v6 = 0;
  while (1)
  {
    v7 = TResultManager::getResult(*(_QWORD *)(a1 + 128), *v4);
    v8 = *(_QWORD *)(v7 + 104);
    v9 = *(_QWORD *)(v7 + 112);
    v10 = v9 - v8;
    if (v9 != v8)
      break;
LABEL_8:
    if (++v4 == a3)
      return v6;
  }
  v11 = 0;
  v12 = v10 >> 3;
  while (1)
  {
    v13 = *(_QWORD *)(v8 + 8 * v11);
    if (v13)
    {
      if (*(_QWORD *)(v8 + 8 * v11 + 8))
        return v6;
    }
    v6 += v13;
    v11 += 2;
    if (v11 >= v12)
      goto LABEL_8;
  }
}

uint64_t TFormatter::countLeftContextSpaces(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;

  *(_QWORD *)(a5 + 8) = a3;
  *(_QWORD *)(a5 + 16) = a4;
  *(_BYTE *)(a5 + 24) = 0;
  *(_QWORD *)a5 = 0;
  if (!a3)
    return result;
  v6 = a3;
  v7 = a2;
  if (a3 < a2)
  {
LABEL_3:
    v8 = 0;
    goto LABEL_20;
  }
  v9 = a4;
  v10 = result;
  while (1)
  {
    while (1)
    {
      while (!v9)
      {
        --v6;
        v9 = -1;
        if (v6 < v7)
          goto LABEL_3;
      }
      result = TResultManager::getResult(*(_QWORD *)(v10 + 128), *v6);
      if (v9 != -1)
        break;
      v11 = *(_QWORD *)(result + 104);
      v12 = *(_QWORD *)(result + 112) - v11;
      if (v12)
      {
        v9 = v12 >> 3;
        goto LABEL_10;
      }
      v9 = 0;
    }
    v11 = *(_QWORD *)(result + 104);
LABEL_10:
    v13 = *(_QWORD *)(v11 + 8 * v9 - 8);
    v14 = *(_QWORD *)(v11 + 8 * (v9 - 2));
    if (v13)
    {
      if (v14)
        break;
    }
    *(_QWORD *)a5 += v14;
    *(_BYTE *)(a5 + 24) |= *(_BYTE *)result;
    v9 -= 2;
  }
  result = TResultManager::getResult(*(_QWORD *)(v10 + 128), *v6);
  v15 = *(_QWORD *)(result + 112) - *(_QWORD *)(result + 104);
  v16 = v9 == v15 >> 3;
  if (v9 == v15 >> 3)
    v8 = 0;
  else
    v8 = v9;
  v7 = &v6[v16];
LABEL_20:
  *(_QWORD *)(a5 + 8) = v7;
  *(_QWORD *)(a5 + 16) = v8;
  return result;
}

void TFormatter::formatInternal(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, char **a6, char a7, int a8, uint64_t *a9, uint64_t **a10)
{
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t ActiveConfigHandle;
  unsigned __int8 *v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  std::wstring::__raw *v50;
  std::wstring *v51;
  unint64_t v52;
  BOOL v53;
  unsigned __int8 *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  std::wstring *v78;
  uint64_t v79;
  std::wstring *data;
  const __int32 *v81;
  const __int32 *v82;
  std::wstring::pointer v83;
  std::wstring::size_type v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  _QWORD *v89;
  _BOOL4 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t **v100;
  unint64_t v101;
  std::wstring::__raw *v102;
  std::wstring::__raw *v103;
  void **v104;
  _BYTE *v105;
  unint64_t v106;
  size_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  uint64_t *v123;
  std::wstring *v124;
  void *v125;
  uint64_t *v126;
  unint64_t v127;
  char v128;
  __int128 v129[4];
  void *v130;
  char *v131;
  unint64_t v132;
  void *__p;
  char *v134;
  unint64_t v135;
  BOOL v136;
  BOOL v137[2];
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  _QWORD v141[4];

  v141[2] = *MEMORY[0x24BDAC8D0];
  *a10 = (uint64_t *)a3;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  TFormatter::addLeftContext(a1, a2, a3, (uint64_t)&v138, v137);
  v123 = a2;
  v17 = v138;
  v16 = v139;
  std::vector<TItnWordData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData const*>,std::__wrap_iter<TItnWordData const*>>((uint64_t)&v138, (uint64_t)v139, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * ((a6[1] - *a6) >> 4));
  v19 = v138;
  v18 = v139;
  TFormatter::addRightContext(a1, a4, a5, (uint64_t)&v138, &v136);
  v20 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v17) >> 4);
  v21 = 0x6DB6DB6DB6DB6DB7 * ((v18 - v19) >> 4);
  v22 = v138;
  if (v21 != v20)
  {
    v23 = 1;
    if (a8)
    {
      v24 = v138;
      if (!v137[1])
      {
        v25 = *(_QWORD *)(a1 + 48);
        ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v25 + 3792));
        v23 = *(_BYTE *)(v25 + TParam::getValidConfig((TParam *)(v25 + 3792), ActiveConfigHandle) + 3944) != 0;
        v24 = v138;
      }
    }
    else
    {
      v24 = v138;
    }
    v22[112 * v20 + 32] = v23;
    v22 = v24;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((v139 - v22) >> 4) != v21)
    v22[112 * v21 + 32] = 1;
  v27 = (unsigned __int8 *)TFormatter::segment((TFormatter *)a1, (uint64_t *)&v138, v20, v21);
  TFormatter::assignWordRules(a1, (uint64_t)v27, &v138);
  __p = 0;
  v134 = 0;
  v135 = 0;
  v28 = (a7 & 1) == 0 || !v137[0];
  v29 = v28;
  if (!v28)
  {
    v30 = *(_QWORD *)(a1 + 48);
    v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 3792));
    if (!*(_BYTE *)(v30 + TParam::getValidConfig((TParam *)(v30 + 3792), v31) + 3944))
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)__p) >> 3) + 1;
      if (v32 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)__p) >> 3) > v32)
        v32 = 0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v135, v33);
      else
        v34 = 0;
      v35 = &v34[8 * ((v134 - (_BYTE *)__p) >> 3)];
      v36 = &v34[24 * v33];
      *(_QWORD *)v35 = 6;
      *((_QWORD *)v35 + 1) = 3;
      *((_QWORD *)v35 + 2) = 1;
      v37 = v35 + 24;
      v39 = (char *)__p;
      v38 = v134;
      if (v134 != __p)
      {
        do
        {
          v40 = *(_OWORD *)(v38 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v38 - 1);
          *(_OWORD *)(v35 - 24) = v40;
          v35 -= 24;
          v38 -= 24;
        }
        while (v38 != v39);
        v38 = (char *)__p;
      }
      __p = v35;
      v134 = v37;
      v135 = (unint64_t)v36;
      if (v38)
        operator delete(v38);
      v134 = v37;
    }
  }
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v132, 1uLL);
  v44 = &v41[24 * v43];
  *(_QWORD *)v41 = 1;
  *((_QWORD *)v41 + 1) = 4;
  *((_QWORD *)v41 + 2) = 1;
  v45 = v41 + 24;
  v47 = (char *)v130;
  v46 = v131;
  if (v131 != v130)
  {
    do
    {
      v48 = *(_OWORD *)(v46 - 24);
      *((_QWORD *)v41 - 1) = *((_QWORD *)v46 - 1);
      *(_OWORD *)(v41 - 24) = v48;
      v41 -= 24;
      v46 -= 24;
    }
    while (v46 != v47);
    v46 = (char *)v130;
  }
  v130 = v41;
  v131 = v45;
  v132 = (unint64_t)v44;
  if (v46)
    operator delete(v46);
  v131 = v45;
  v124 = TFormatter::applyControls(a1, v27, (uint64_t *)&v138, v42, v21, (uint64_t)&__p, (char *)&v130);
  *(_QWORD *)&v49 = -1;
  *((_QWORD *)&v49 + 1) = -1;
  v129[2] = v49;
  v129[3] = v49;
  v129[0] = v49;
  v129[1] = v49;
  TItnControlState::set(v129, (uint64_t *)&v130, 0, 1, 1, 2uLL);
  v50 = (std::wstring::__raw *)v124;
  if (!v124)
    goto LABEL_126;
  v51 = v124;
  do
  {
    v52 = v50->__words[1];
    if (v52 <= v20 && v138[112 * v52 + 32])
      v51 = (std::wstring *)v50;
    v53 = v52 != -1 && v52 >= v20;
    if (v53)
      break;
    v50 = (std::wstring::__raw *)v50[6].__words[0];
  }
  while (v50);
  if (v51 == (std::wstring *)v50)
    goto LABEL_116;
  v126 = 0;
  v127 = 0;
  v125 = 0;
  std::vector<TItnWordData>::__init_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData*>,std::__wrap_iter<TItnWordData*>>(&v125, v138, (uint64_t)&v138[112 * v20], v20);
  v54 = (unsigned __int8 *)TFormatter::segment((TFormatter *)a1, (uint64_t *)&v125, 0x6DB6DB6DB6DB6DB7 * (((char *)v126 - (_BYTE *)v125) >> 4), 0x6DB6DB6DB6DB6DB7 * (((char *)v126 - (_BYTE *)v125) >> 4));
  TFormatter::assignWordRules(a1, (uint64_t)v54, &v125);
  std::vector<TItnControl>::resize((uint64_t)&__p, 0);
  if ((v29 & 1) == 0)
  {
    v55 = v134;
    if ((unint64_t)v134 >= v135)
    {
      v57 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)__p) >> 3);
      v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)__p) >> 3) > v58)
        v58 = 0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v59 = 0xAAAAAAAAAAAAAAALL;
      else
        v59 = v58;
      if (v59)
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v135, v59);
      else
        v60 = 0;
      v61 = &v60[24 * v57];
      v62 = &v60[24 * v59];
      *(_QWORD *)v61 = 6;
      *((_QWORD *)v61 + 1) = 3;
      *((_QWORD *)v61 + 2) = 1;
      v56 = v61 + 24;
      v64 = (char *)__p;
      v63 = v134;
      if (v134 != __p)
      {
        do
        {
          v65 = *(_OWORD *)(v63 - 24);
          *((_QWORD *)v61 - 1) = *((_QWORD *)v63 - 1);
          *(_OWORD *)(v61 - 24) = v65;
          v61 -= 24;
          v63 -= 24;
        }
        while (v63 != v64);
        v63 = (char *)__p;
      }
      __p = v61;
      v134 = v56;
      v135 = (unint64_t)v62;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *(_QWORD *)v134 = 6;
      *((_QWORD *)v55 + 1) = 3;
      *((_QWORD *)v55 + 2) = 1;
      v56 = v55 + 24;
    }
    v134 = v56;
  }
  std::vector<TItnControl>::resize((uint64_t)&v130, 0);
  v67 = v131;
  if ((unint64_t)v131 >= v132)
  {
    v69 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (_BYTE *)v130) >> 3);
    v70 = v69 + 1;
    if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v132 - (_QWORD)v130) >> 3) > v70)
      v70 = 0x5555555555555556 * ((uint64_t)(v132 - (_QWORD)v130) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132 - (_QWORD)v130) >> 3) >= 0x555555555555555)
      v71 = 0xAAAAAAAAAAAAAAALL;
    else
      v71 = v70;
    if (v71)
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v132, v71);
    else
      v72 = 0;
    v73 = &v72[24 * v69];
    v74 = &v72[24 * v71];
    *(_QWORD *)v73 = 1;
    *((_QWORD *)v73 + 1) = 4;
    *((_QWORD *)v73 + 2) = 1;
    v68 = v73 + 24;
    v76 = (char *)v130;
    v75 = v131;
    if (v131 != v130)
    {
      do
      {
        v77 = *(_OWORD *)(v75 - 24);
        *((_QWORD *)v73 - 1) = *((_QWORD *)v75 - 1);
        *(_OWORD *)(v73 - 24) = v77;
        v73 -= 24;
        v75 -= 24;
      }
      while (v75 != v76);
      v75 = (char *)v130;
    }
    v130 = v73;
    v131 = v68;
    v132 = (unint64_t)v74;
    if (v75)
      operator delete(v75);
  }
  else
  {
    *(_QWORD *)v131 = 1;
    *((_QWORD *)v67 + 1) = 4;
    *((_QWORD *)v67 + 2) = 1;
    v68 = v67 + 24;
  }
  v131 = v68;
  v78 = TFormatter::applyControls(a1, v54, (uint64_t *)&v125, v66, 0x6DB6DB6DB6DB6DB7 * (((char *)v126 - (_BYTE *)v125) >> 4), (uint64_t)&__p, (char *)&v130);
  v79 = (uint64_t)v78;
  if (!v78)
    goto LABEL_107;
  data = v78;
  while (data->__r_.__value_.__l.__size_ != v51->__r_.__value_.__l.__size_)
  {
    data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
    if (!data)
      goto LABEL_107;
  }
  if (!v51)
    goto LABEL_107;
LABEL_88:
  if (data->__r_.__value_.__l.__size_ == v51->__r_.__value_.__l.__size_
    && data->__r_.__value_.__r.__words[2] == v51->__r_.__value_.__r.__words[2])
  {
    v81 = (const __int32 *)&data[3];
    if (SHIBYTE(data[3].__r_.__value_.__r.__words[2]) < 0)
      v81 = *(const __int32 **)v81;
    v82 = (const __int32 *)&v51[3];
    if (SHIBYTE(v51[3].__r_.__value_.__r.__words[2]) < 0)
      v82 = *(const __int32 **)v82;
    if (!wcscmp(v81, v82))
    {
      v83 = data[6].__r_.__value_.__l.__data_;
      if (!v83)
      {
        v51 = (std::wstring *)v51[6].__r_.__value_.__l.__data_;
        goto LABEL_107;
      }
      while (1)
      {
        if (*((char *)v83 + 71) < 0)
        {
          if (*((_QWORD *)v83 + 7))
          {
LABEL_102:
            if (data[9].__r_.__value_.__l.__size_ != v51[9].__r_.__value_.__l.__size_)
              break;
LABEL_103:
            v51 = (std::wstring *)v51[6].__r_.__value_.__l.__data_;
            data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
            if (!v51)
            {
LABEL_107:
              freeBlocks(v79);
              if (v51)
                goto LABEL_108;
              v50 = 0;
              goto LABEL_114;
            }
            goto LABEL_88;
          }
        }
        else if (*((_BYTE *)v83 + 71))
        {
          goto LABEL_102;
        }
        v83 = (std::wstring::pointer)*((_QWORD *)v83 + 18);
        if (!v83)
          goto LABEL_103;
      }
    }
  }
  freeBlocks(v79);
LABEL_108:
  v50 = (std::wstring::__raw *)v51;
  do
  {
    v84 = v50->__words[1];
    if (v84 != -1 && v138[112 * v84 + 105])
      break;
    v50 = (std::wstring::__raw *)v50[6].__words[1];
  }
  while (v50);
LABEL_114:
  if (v125)
  {
    v126 = (uint64_t *)v125;
    operator delete(v125);
  }
LABEL_116:
  if (v50)
  {
    v85 = 0;
    v86 = (uint64_t)v50;
    do
    {
      v87 = *(_QWORD *)(v86 + 8);
      v88 = v87 == v21;
      if (v87 == v21)
        break;
      v89 = (_QWORD *)(v86 + 72);
      if (*(char *)(v86 + 95) < 0)
        v89 = (_QWORD *)*v89;
      v90 = *(_DWORD *)v89 || *(_QWORD *)(v86 + 224) != 0;
      v85 |= v90;
      v86 = *(_QWORD *)(v86 + 144);
    }
    while (v86);
  }
  else
  {
LABEL_126:
    v85 = 0;
    v86 = 0;
    v88 = 0;
  }
  v91 = TFormatter::countRightContextSpaces(a1, a4, a5);
  v92 = v91;
  if ((v85 & v88) == 1)
  {
    v93 = v86;
    do
    {
      v93 = *(_QWORD *)(v93 + 152);
      v94 = (_QWORD *)(v93 + 72);
      if (*(char *)(v93 + 95) < 0)
        v94 = (_QWORD *)*v94;
      v95 = *(_DWORD *)v94;
      v96 = *(_QWORD *)(v93 + 224);
      if (v95)
        v97 = 0;
      else
        v97 = v96 == 0;
    }
    while (v97);
    v53 = v96 >= v91;
    v98 = v96 - v91;
    if (!v53)
      v98 = 0;
    *(_QWORD *)(v93 + 224) = v98;
  }
  if (v50 && (v99 = v50->__words[1], v99 < v20))
  {
    v100 = (uint64_t **)&v138[112 * v99];
    *a10 = *v100;
    v101 = (unint64_t)v100[1];
  }
  else
  {
    v101 = 0;
  }
  TFormatter::countLeftContextSpaces(a1, v123, *a10, v101, (uint64_t)&v125);
  if (!v50)
    goto LABEL_157;
  v102 = v50;
  while (1)
  {
    v102 = (std::wstring::__raw *)v102[6].__words[1];
    if (!v102)
      break;
    v103 = v102 + 3;
    if (SHIBYTE(v102[3].__words[2]) < 0)
      v103 = (std::wstring::__raw *)v103->__words[0];
    if (LODWORD(v103->__words[0]) || v102[9].__words[1])
    {
      v104 = (void **)&v102[9].__words[1];
      goto LABEL_151;
    }
  }
  v104 = &v125;
LABEL_151:
  v105 = *v104;
  if ((v85 & 1) != 0)
    v106 = 0;
  else
    v106 = v92;
  v107 = v105 - ((_BYTE *)v125 + v106);
  if (v105 < (char *)v125 + v106)
  {
    if (!v138[112 * v50->__words[1] + 32] || ((a8 ^ 1 | v85) & 1) == 0)
    {
      if (!v128
        || (v118 = *(_QWORD *)(a1 + 48),
            v119 = TParam::getActiveConfigHandle((TParam *)(v118 + 2472)),
            *(_BYTE *)(v118 + TParam::getValidConfig((TParam *)(v118 + 2472), v119) + 2624)))
      {
        v120 = (size_t)&v105[-v92];
        if ((unint64_t)v105 < v92)
          v120 = 0;
        if ((v85 & 1) != 0)
          v107 = (size_t)v105;
        else
          v107 = v120;
        v101 = v127;
        *a10 = v126;
        goto LABEL_158;
      }
    }
LABEL_157:
    v107 = 0;
  }
LABEL_158:
  v108 = *(uint64_t **)(a1 + 128);
  v109 = *(_QWORD *)(a1 + 48);
  v110 = TParam::getActiveConfigHandle((TParam *)(v109 + 3792));
  v111 = *(unsigned __int8 *)(v109 + TParam::getValidConfig((TParam *)(v109 + 3792), v110) + 3944);
  v112 = *(_QWORD *)(a1 + 48);
  v113 = TParam::getActiveConfigHandle((TParam *)(v112 + 16912));
  if (*(_BYTE *)(v112 + TParam::getValidConfig((TParam *)(v112 + 16912), v113) + 17064))
    v114 = 0;
  else
    v114 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 304) == 2;
  *a9 = TResultManager::create(v108, (uint64_t)v50, v86, v107, &v138, v129, v111 != 0, v114);
  if (*a10 != (uint64_t *)a3 && v101)
  {
    v115 = TResultManager::copyAlignRange(*(_QWORD **)(a1 + 128), **a10, 0, v101);
    v116 = *a9;
    v141[0] = v115;
    v141[1] = v116;
    v117 = TResultManager::merge(*(_QWORD **)(a1 + 128), v141, 2);
    TResultManager::destroy(*(TResult **)(a1 + 128), *a9);
    TResultManager::destroy(*(TResult **)(a1 + 128), v115);
    *a9 = v117;
  }
  TAllocator::clear((TAllocator *)(a1 + 64));
  freeBlocks((uint64_t)v124);
  if (v130)
  {
    v131 = (char *)v130;
    operator delete(v130);
  }
  if (__p)
  {
    v134 = (char *)__p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
}

void sub_2098EC048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t freeBlocks(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  if (result)
  {
    v1 = result;
    do
    {
      v2 = *(_QWORD *)(v1 + 144);
      v3 = *(void **)(v1 + 120);
      if (v3)
      {
        *(_QWORD *)(v1 + 128) = v3;
        operator delete(v3);
      }
      if (*(char *)(v1 + 119) < 0)
        operator delete(*(void **)(v1 + 96));
      if (*(char *)(v1 + 95) < 0)
        operator delete(*(void **)(v1 + 72));
      if (*(char *)(v1 + 71) < 0)
        operator delete(*(void **)(v1 + 48));
      result = MEMORY[0x20BD149A8](v1, 0x10F2C405D5B575ELL);
      v1 = v2;
    }
    while (v2);
  }
  return result;
}

uint64_t TFormatter::wordSequenceToResult(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, char a8, uint64_t **a9, uint64_t **a10)
{
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  uint64_t v22;
  _OWORD v24[4];
  void *__p;
  void *v26;
  uint64_t v27;

  __p = 0;
  v26 = 0;
  v27 = 0;
  if (*a6 != a6[1])
  {
    TFormatter::addWords(a1, a6, a7, &__p);
    TFormatter::makeUttState(a1, (uint64_t)a2, a5 - a2, (uint64_t)(a3 - (_QWORD)a2) >> 3, (uint64_t)((uint64_t)a4 - a3) >> 3, a8, v24);
    v16 = (char *)__p;
    v17 = v24[1];
    *(_OWORD *)((char *)__p + 40) = v24[0];
    *(_OWORD *)(v16 + 56) = v17;
    v18 = v24[3];
    *(_OWORD *)(v16 + 72) = v24[2];
    *(_OWORD *)(v16 + 88) = v18;
    v16[104] = 1;
  }
  *(_QWORD *)&v24[0] = -1;
  *a10 = a4;
  v19 = *(_QWORD *)(a1 + 48);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v19 + 2224));
  ValidConfig = TParam::getValidConfig((TParam *)(v19 + 2224), ActiveConfigHandle);
  TFormatter::formatInternal(a1, a2, a3, a4, a5, (char **)&__p, a8, *(unsigned __int8 *)(v19 + ValidConfig + 2376), (uint64_t *)v24, a9);
  v22 = *(_QWORD *)&v24[0];
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return v22;
}

void sub_2098EC2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'TFormatter::wordSequenceToResult(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, char a8, uint64_t **a9, uint64_t **a10)
{
  return TFormatter::wordSequenceToResult(a1 - 40, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void TFormatter::textToResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TFormatter::replace(a1, a2, (a5 - a2) >> 3, (a3 - a2) >> 3, (a4 - a3) >> 3);
}

void `non-virtual thunk to'TFormatter::textToResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TFormatter::replace(a1 - 40, a2, (a5 - a2) >> 3, (a3 - a2) >> 3, (a4 - a3) >> 3);
}

void TFormatter::generateResultAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  TParam *v20;
  uint64_t ActiveConfigHandle;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  char *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  _BOOL4 v149;
  uint64_t v150;
  uint64_t Result;
  uint64_t v152;
  unint64_t v153;
  __int32 *v154;
  __int32 **v155;
  __int32 **v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  __int32 **v162;
  __int32 **v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int32 *v170;
  char *v171;
  _BYTE *v172;
  TWord **v173;
  unint64_t v174;
  unsigned int UnigramScore;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  __int32 **v189;
  uint64_t v190;
  uint64_t v191;
  int *v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _OWORD *v203;
  __int128 *v204;
  __int128 v205;
  _QWORD *v206;
  void *v207;
  char v208;
  char v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  size_t v214;
  size_t v215;
  std::string *p_s1;
  BOOL v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  TResult *v223;
  uint64_t v224;
  char v225;
  BOOL v226;
  uint64_t v227;
  const char *v228;
  size_t v229;
  size_t v230;
  std::string *v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  TResult *v237;
  uint64_t v238;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD **v243;
  unint64_t j;
  void *v245;
  const char *v246;
  size_t v247;
  size_t v248;
  std::string *v249;
  BOOL v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  const char *v260;
  size_t v261;
  size_t v262;
  std::string *v263;
  BOOL v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  char *v270;
  unint64_t v271;
  int v273;
  unint64_t i;
  BOOL v275;
  unsigned int v276;
  unint64_t v277;
  unint64_t v278;
  unsigned int v279;
  uint64_t v280;
  int v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  void *__p;
  void *v286;
  uint64_t v287;
  void *v288;
  __int128 v289;
  _BYTE v290[785];
  char v291;
  _BYTE *v292;
  __int128 v293;
  _BYTE v294[2048];
  char v295;
  void *v296;
  _BYTE *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t (*v305)(uint64_t, uint64_t);
  __int128 v306;
  _BYTE v307[2048];
  char v308;
  std::string __s1;
  __int32 **v310;
  __int32 **v311;
  unint64_t v312;
  char *v313;
  char *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  unint64_t v318;
  char *v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327[2];

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = (_QWORD *)v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v283 = (uint64_t *)v5;
  TBuffer<TPItnRuleHandle_fake **>::resize(v6, 0);
  if (v13)
  {
    v18 = *v13;
    if (*v13 == v13[1])
      return;
  }
  else
  {
    v18 = 0;
  }
  TResultRelativePosition::TResultRelativePosition(&v325, v283[16], v17, v15, v18);
  if (v326)
    return;
  v19 = v13 ? v13[1] : -1;
  TResultRelativePosition::TResultRelativePosition(&v322, v283[16], v17, v15, v19);
  if (v324)
    return;
  v20 = (TParam *)(v283[6] + 9760);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v20);
  v22 = *((_DWORD *)v20 + TParam::getValidConfig(v20, ActiveConfigHandle) + 40);
  v319 = 0;
  v320 = 0;
  v321 = 0;
  if (!v22)
    return;
  v281 = v11;
  v23 = 0;
  v24 = 1;
  do
  {
    if ((v22 & 1) == 0)
      goto LABEL_60;
    if (v24 > 127)
    {
      if (v24 <= 1023)
      {
        switch(v24)
        {
          case 128:
            v49 = v283[6];
            v50 = TParam::getActiveConfigHandle((TParam *)(v49 + 12576));
            v27 = v49 + 4 * TParam::getValidConfig((TParam *)(v49 + 12576), v50);
            v28 = 12736;
            break;
          case 256:
            v53 = v283[6];
            v54 = TParam::getActiveConfigHandle((TParam *)(v53 + 12928));
            v27 = v53 + 4 * TParam::getValidConfig((TParam *)(v53 + 12928), v54);
            v28 = 13088;
            break;
          case 512:
            v33 = v283[6];
            v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 13280));
            v27 = v33 + 4 * TParam::getValidConfig((TParam *)(v33 + 13280), v34);
            v28 = 13440;
            break;
          default:
            goto LABEL_60;
        }
      }
      else if (v24 > 4095)
      {
        if (v24 == 4096)
        {
          v45 = v283[6];
          v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 14336));
          v27 = v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 14336), v46);
          v28 = 14496;
        }
        else
        {
          if (v24 != 0x10000)
            goto LABEL_60;
          v35 = v283[6];
          v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 14688));
          v27 = v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 14688), v36);
          v28 = 14848;
        }
      }
      else if (v24 == 1024)
      {
        v43 = v283[6];
        v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 13632));
        v27 = v43 + 4 * TParam::getValidConfig((TParam *)(v43 + 13632), v44);
        v28 = 13792;
      }
      else
      {
        if (v24 != 2048)
          goto LABEL_60;
        v29 = v283[6];
        v30 = TParam::getActiveConfigHandle((TParam *)(v29 + 13984));
        v27 = v29 + 4 * TParam::getValidConfig((TParam *)(v29 + 13984), v30);
        v28 = 14144;
      }
      goto LABEL_43;
    }
    if (v24 > 15)
    {
      switch(v24)
      {
        case 16:
          v47 = v283[6];
          v48 = TParam::getActiveConfigHandle((TParam *)(v47 + 11520));
          v27 = v47 + 4 * TParam::getValidConfig((TParam *)(v47 + 11520), v48);
          v28 = 11680;
          break;
        case 32:
          v51 = v283[6];
          v52 = TParam::getActiveConfigHandle((TParam *)(v51 + 11872));
          v27 = v51 + 4 * TParam::getValidConfig((TParam *)(v51 + 11872), v52);
          v28 = 12032;
          break;
        case 64:
          v31 = v283[6];
          v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 12224));
          v27 = v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 12224), v32);
          v28 = 12384;
          break;
        default:
          goto LABEL_60;
      }
LABEL_43:
      v55 = *(unsigned int *)(v27 + v28);
      v56 = v320;
      if (v320 >= v321)
      {
        v57 = ((char *)v320 - v319) >> 3;
        if ((unint64_t)(v57 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v58 = ((char *)v321 - v319) >> 2;
        if (v58 <= v57 + 1)
          v58 = v57 + 1;
        if ((unint64_t)((char *)v321 - v319) >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v321, v59);
        else
          v60 = 0;
        v61 = &v60[8 * v57];
        *(_QWORD *)v61 = v24 | (unint64_t)(v55 << 32);
        v23 = (uint64_t *)(v61 + 8);
        v63 = (uint64_t)v319;
        v62 = v320;
        if (v320 != (uint64_t *)v319)
        {
          do
          {
            v64 = *--v62;
            *((_QWORD *)v61 - 1) = v64;
            v61 -= 8;
          }
          while (v62 != (uint64_t *)v63);
          v62 = (uint64_t *)v319;
        }
        v319 = v61;
        v320 = v23;
        v321 = (uint64_t *)&v60[8 * v59];
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v320 = v24 | (unint64_t)(v55 << 32);
        v23 = v56 + 1;
      }
      v320 = v23;
      goto LABEL_60;
    }
    switch(v24)
    {
      case 1:
        v25 = v283[6];
        v26 = TParam::getActiveConfigHandle((TParam *)(v25 + 10112));
        v27 = v25 + 4 * TParam::getValidConfig((TParam *)(v25 + 10112), v26);
        v28 = 10272;
        goto LABEL_43;
      case 2:
        v37 = v283[6];
        v38 = TParam::getActiveConfigHandle((TParam *)(v37 + 10464));
        v27 = v37 + 4 * TParam::getValidConfig((TParam *)(v37 + 10464), v38);
        v28 = 10624;
        goto LABEL_43;
      case 4:
        v39 = v283[6];
        v40 = TParam::getActiveConfigHandle((TParam *)(v39 + 10816));
        v27 = v39 + 4 * TParam::getValidConfig((TParam *)(v39 + 10816), v40);
        v28 = 10976;
        goto LABEL_43;
      case 8:
        v41 = v283[6];
        v42 = TParam::getActiveConfigHandle((TParam *)(v41 + 11168));
        v27 = v41 + 4 * TParam::getValidConfig((TParam *)(v41 + 11168), v42);
        v28 = 11328;
        goto LABEL_43;
      default:
        break;
    }
LABEL_60:
    v24 *= 2;
    v226 = v22 >= 2;
    v22 >>= 1;
  }
  while (v226);
  if (v319 != (char *)v23)
  {
    v305 = (uint64_t (*)(uint64_t, uint64_t))priorityCompare;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>((uint64_t)v319, v23, &v305, 126 - 2 * __clz(((char *)v23 - v319) >> 3), 1);
    v316 = 0;
    v317 = 0;
    v318 = 0;
    v313 = 0;
    v314 = 0;
    v315 = 0;
    std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>((char *)&v316, v17, (uint64_t)&v17[8 * v325], v325);
    if (*((_QWORD *)&v325 + 1))
    {
      v65 = TResultManager::copyAlignRange((_QWORD *)v283[16], *(_QWORD *)&v17[8 * v325], 0, *((unint64_t *)&v325 + 1));
      v66 = v65;
      v67 = v317;
      if ((unint64_t)v317 < v318)
      {
        *v317 = v65;
        v68 = v67 + 1;
        goto LABEL_79;
      }
      v69 = v317 - v316;
      if ((unint64_t)(v69 + 1) >> 61)
        goto LABEL_463;
      v70 = (uint64_t)(v318 - (_QWORD)v316) >> 2;
      if (v70 <= v69 + 1)
        v70 = v69 + 1;
      if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      if (v71)
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v318, v71);
      else
        v72 = 0;
      v73 = (uint64_t *)&v72[8 * v69];
      v74 = &v72[8 * v71];
      *v73 = v66;
      v68 = v73 + 1;
      v76 = v316;
      v75 = v317;
      if (v317 != v316)
      {
        do
        {
          v77 = *--v75;
          *--v73 = v77;
        }
        while (v75 != v76);
        v75 = v316;
      }
      v316 = v73;
      v317 = v68;
      v318 = (unint64_t)v74;
      if (v75)
        operator delete(v75);
LABEL_79:
      v317 = v68;
      v78 = v314;
      if ((unint64_t)v314 < v315)
      {
        *(_QWORD *)v314 = v66;
        v79 = v78 + 8;
        goto LABEL_95;
      }
      v80 = (v314 - v313) >> 3;
      if ((unint64_t)(v80 + 1) >> 61)
LABEL_463:
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v81 = (uint64_t)(v315 - (_QWORD)v313) >> 2;
      if (v81 <= v80 + 1)
        v81 = v80 + 1;
      if (v315 - (unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v81;
      if (v82)
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v315, v82);
      else
        v83 = 0;
      v84 = (uint64_t *)&v83[8 * v80];
      v85 = &v83[8 * v82];
      *v84 = v66;
      v79 = (char *)(v84 + 1);
      v87 = v313;
      v86 = v314;
      if (v314 != v313)
      {
        do
        {
          v88 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *--v84 = v88;
        }
        while (v86 != v87);
        v86 = v313;
      }
      v313 = (char *)v84;
      v314 = v79;
      v315 = (unint64_t)v85;
      if (v86)
        operator delete(v86);
LABEL_95:
      v314 = v79;
    }
    v90 = v316;
    v89 = v317;
    v91 = v325;
    v92 = v322;
    if ((_QWORD)v325 == v322)
    {
      v93 = TResultManager::copyAlignRange((_QWORD *)v283[16], *(_QWORD *)&v17[8 * v325], *((unint64_t *)&v325 + 1), v323);
      v94 = v93;
      v95 = v317;
      if ((unint64_t)v317 < v318)
      {
        *v317 = v93;
        v96 = v95 + 1;
        goto LABEL_118;
      }
      v99 = v317 - v316;
      if ((unint64_t)(v99 + 1) >> 61)
        goto LABEL_465;
      v100 = (uint64_t)(v318 - (_QWORD)v316) >> 2;
      if (v100 <= v99 + 1)
        v100 = v99 + 1;
      if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
        v101 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      if (v101)
        v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v318, v101);
      else
        v102 = 0;
      v103 = (uint64_t *)&v102[8 * v99];
      v104 = &v102[8 * v101];
      *v103 = v94;
      v96 = v103 + 1;
      v106 = v316;
      v105 = v317;
      if (v317 != v316)
      {
        do
        {
          v107 = *--v105;
          *--v103 = v107;
        }
        while (v105 != v106);
        v105 = v316;
      }
      v316 = v103;
      v317 = v96;
      v318 = (unint64_t)v104;
      if (v105)
        operator delete(v105);
LABEL_118:
      v317 = v96;
      v108 = v314;
      if ((unint64_t)v314 < v315)
      {
        *(_QWORD *)v314 = v94;
        v109 = v108 + 8;
        goto LABEL_134;
      }
      v110 = (v314 - v313) >> 3;
      if ((unint64_t)(v110 + 1) >> 61)
LABEL_465:
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v111 = (uint64_t)(v315 - (_QWORD)v313) >> 2;
      if (v111 <= v110 + 1)
        v111 = v110 + 1;
      if (v315 - (unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8)
        v112 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v112 = v111;
      if (v112)
        v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v315, v112);
      else
        v113 = 0;
      v114 = (uint64_t *)&v113[8 * v110];
      v115 = &v113[8 * v112];
      *v114 = v94;
      v109 = (char *)(v114 + 1);
      v117 = v313;
      v116 = v314;
      if (v314 != v313)
      {
        do
        {
          v118 = *((_QWORD *)v116 - 1);
          v116 -= 8;
          *--v114 = v118;
        }
        while (v116 != v117);
        v116 = v313;
      }
      v313 = (char *)v114;
      v314 = v109;
      v315 = (unint64_t)v115;
      if (v116)
        operator delete(v116);
LABEL_134:
      v314 = v109;
    }
    else
    {
      if (*((_QWORD *)&v325 + 1))
      {
        v305 = 0;
        v305 = (uint64_t (*)(uint64_t, uint64_t))TResultManager::copyAlignRange((_QWORD *)v283[16], *(_QWORD *)&v17[8 * v325], *((unint64_t *)&v325 + 1), 0xFFFFFFFFFFFFFFFFLL);
        std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100]((void **)&v316, &v305);
        std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100]((void **)&v313, &v305);
        v97 = (uint64_t)v317;
        v98 = *((_QWORD *)&v325 + 1);
        v91 = v325;
        v92 = v322;
      }
      else
      {
        v98 = 0;
        v97 = (uint64_t)v317;
      }
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v316, v97, &v17[8 * v91 + 8 * (v98 != 0)], &v17[8 * v92], (8 * v92 - (8 * v91 + 8 * (v98 != 0))) >> 3);
      if (v323)
      {
        v305 = 0;
        v305 = (uint64_t (*)(uint64_t, uint64_t))TResultManager::copyAlignRange((_QWORD *)v283[16], *(_QWORD *)&v17[8 * v322], 0, v323);
        std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100]((void **)&v316, &v305);
        std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100]((void **)&v313, &v305);
      }
    }
    v119 = v316;
    v120 = v317;
    v279 = v9;
    if (v323)
    {
      v121 = TResultManager::copyAlignRange((_QWORD *)v283[16], *(_QWORD *)&v17[8 * v322], v323, 0xFFFFFFFFFFFFFFFFLL);
      v122 = v121;
      v123 = v317;
      if ((unint64_t)v317 < v318)
      {
        *v317 = v121;
        v124 = v123 + 1;
        goto LABEL_153;
      }
      v127 = v317 - v316;
      if ((unint64_t)(v127 + 1) >> 61)
        goto LABEL_464;
      v128 = (uint64_t)(v318 - (_QWORD)v316) >> 2;
      if (v128 <= v127 + 1)
        v128 = v127 + 1;
      if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
        v129 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v129 = v128;
      if (v129)
        v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v318, v129);
      else
        v130 = 0;
      v131 = (uint64_t *)&v130[8 * v127];
      v132 = &v130[8 * v129];
      *v131 = v122;
      v124 = v131 + 1;
      v134 = v316;
      v133 = v317;
      if (v317 != v316)
      {
        do
        {
          v135 = *--v133;
          *--v131 = v135;
        }
        while (v133 != v134);
        v133 = v316;
      }
      v316 = v131;
      v317 = v124;
      v318 = (unint64_t)v132;
      if (v133)
        operator delete(v133);
LABEL_153:
      v317 = v124;
      v136 = v314;
      if ((unint64_t)v314 < v315)
      {
        *(_QWORD *)v314 = v122;
        v137 = v136 + 8;
        goto LABEL_169;
      }
      v138 = (v314 - v313) >> 3;
      if ((unint64_t)(v138 + 1) >> 61)
LABEL_464:
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v139 = (uint64_t)(v315 - (_QWORD)v313) >> 2;
      if (v139 <= v138 + 1)
        v139 = v138 + 1;
      if (v315 - (unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8)
        v140 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v140 = v139;
      if (v140)
        v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v315, v140);
      else
        v141 = 0;
      v142 = (uint64_t *)&v141[8 * v138];
      v143 = &v141[8 * v140];
      *v142 = v122;
      v137 = (char *)(v142 + 1);
      v145 = v313;
      v144 = v314;
      if (v314 != v313)
      {
        do
        {
          v146 = *((_QWORD *)v144 - 1);
          v144 -= 8;
          *--v142 = v146;
        }
        while (v144 != v145);
        v144 = v313;
      }
      v313 = (char *)v142;
      v314 = v137;
      v315 = (unint64_t)v143;
      if (v144)
        operator delete(v144);
LABEL_169:
      v314 = v137;
      v126 = (uint64_t)v317;
      v125 = v323;
    }
    else
    {
      v125 = 0;
      v126 = (uint64_t)v317;
    }
    v147 = &v17[8 * v322 + 8 * (v125 != 0)];
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v316, v126, v147, v15, (v15 - v147) >> 3);
    v148 = v120 - v119;
    v149 = v325 == 0;
    v310 = 0;
    v311 = 0;
    v312 = 0;
    memset(&__s1, 0, sizeof(__s1));
    v277 = v89 - v90;
    v278 = v148;
    if (v277 < v148)
    {
      v150 = v89 - v90;
      do
      {
        Result = TResultManager::getResult(v283[16], v316[v150]);
        std::string::append(&__s1, *(const std::string::value_type **)(Result + 16));
        v152 = *(_QWORD *)(Result + 32);
        if (*(_QWORD *)(Result + 40) != v152)
        {
          v153 = 0;
          do
          {
            v154 = (__int32 *)(v152 + 24 * v153);
            if (*((char *)v154 + 23) < 0)
              v154 = *(__int32 **)v154;
            v155 = v311;
            if ((unint64_t)v311 >= v312)
            {
              v157 = v311 - v310;
              if ((unint64_t)(v157 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v158 = (uint64_t)(v312 - (_QWORD)v310) >> 2;
              if (v158 <= v157 + 1)
                v158 = v157 + 1;
              if (v312 - (unint64_t)v310 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v158;
              if (v159)
                v160 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v312, v159);
              else
                v160 = 0;
              v161 = &v160[8 * v157];
              *(_QWORD *)v161 = v154;
              v156 = (__int32 **)(v161 + 8);
              v163 = v310;
              v162 = v311;
              if (v311 != v310)
              {
                do
                {
                  v164 = (uint64_t)*--v162;
                  *((_QWORD *)v161 - 1) = v164;
                  v161 -= 8;
                }
                while (v162 != v163);
                v162 = v310;
              }
              v310 = (__int32 **)v161;
              v311 = v156;
              v312 = (unint64_t)&v160[8 * v159];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *v311 = v154;
              v156 = v155 + 1;
            }
            v311 = v156;
            ++v153;
            v152 = *(_QWORD *)(Result + 32);
          }
          while (v153 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(Result + 40) - v152) >> 3));
        }
        ++v150;
      }
      while (v150 != v278);
    }
    v305 = (uint64_t (*)(uint64_t, uint64_t))v307;
    v306 = xmmword_209A57DD0;
    v308 = 1;
    v165 = (uint64_t)v319;
    if (v320 != (uint64_t *)v319)
    {
      v276 = v281 & v149;
      v282 = v279;
      for (i = 0; i < ((char *)v320 - v319) >> 3; ++i)
      {
        if (v7[2] >= v282)
          break;
        v166 = *(_DWORD *)(v165 + 8 * i);
        if (v166 == 0x10000)
        {
          if (v310 != v311)
          {
            TParamSetter::TParamSetter(&v303, v283[6] + 2224, (uint64_t)&unk_209A7672C, *(_QWORD *)(v283[6] + 136));
            TParamSetter::TParamSetter(&v296, v283[6] + 2472, (uint64_t)&unk_209A7672C, *(_QWORD *)(v283[6] + 136));
            v292 = v294;
            v293 = xmmword_209A57DD0;
            v295 = 1;
            v287 = 0;
            v288 = v290;
            v289 = xmmword_209A57DD0;
            v291 = 1;
            v301 = 0;
            v300 = 0;
            v302 = 0;
            __p = 0;
            v286 = 0;
            std::vector<wchar_t const*>::__init_with_size[abi:ne180100]<wchar_t const**,wchar_t const**>(&__p, v310, (uint64_t)v311, v311 - v310);
            v189 = v310;
            if (v311 == v310 || v7[2] >= v282)
            {
LABEL_331:
              if (__p)
              {
                v286 = __p;
                operator delete(__p);
              }
              if (v300)
              {
                v301 = v300;
                operator delete(v300);
              }
              if (v291 && v288 != v290 && v288)
                MEMORY[0x20BD149A8]();
              if (v295 && v292 != v294 && v292)
                MEMORY[0x20BD149A8]();
              TParamSetter::~TParamSetter((TParamSetter *)&v296);
              TParamSetter::~TParamSetter((TParamSetter *)&v303);
              goto LABEL_435;
            }
            v190 = 0;
            while (2)
            {
              v280 = v190;
              (*(void (**)(uint64_t, __int32 *, _QWORD, _BYTE **))(*(_QWORD *)v283[15] + 48))(v283[15], v189[v190], 0, &v292);
              if (*((_QWORD *)&v293 + 1))
              {
                TLexicon::getWrittenForm(v283[4], v310[v280], (uint64_t)&v288);
                if (*((_QWORD *)&v289 + 1))
                {
                  TBuffer<wchar_t>::insert((uint64_t)&v288, *((unint64_t *)&v289 + 1), dword_209A76744, 0xBuLL);
                  v191 = v283[4];
                  if (*((_QWORD *)&v289 + 1) >= (unint64_t)v289)
                  {
                    if (v291)
                    {
                      LODWORD(v327[0]) = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&v288, *((unint64_t *)&v289 + 1), (int *)v327, 1uLL);
                      v192 = (int *)v288;
                      --*((_QWORD *)&v289 + 1);
                    }
                    else
                    {
                      v192 = (int *)v288;
                      if ((_QWORD)v289)
                        *((_DWORD *)v288 + v289 - 1) = 0;
                    }
                  }
                  else
                  {
                    v192 = (int *)v288;
                    *((_DWORD *)v288 + *((_QWORD *)&v289 + 1)) = 0;
                  }
                  TLexicon::addTempWord(v191, v192, 0, 0, 0);
                  if (*((_QWORD *)&v289 + 1) < (unint64_t)v289)
                  {
                    v193 = v288;
                    *((_DWORD *)v288 + *((_QWORD *)&v289 + 1)) = 0;
                    goto LABEL_239;
                  }
                  if (v291)
                  {
                    LODWORD(v327[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v288, *((unint64_t *)&v289 + 1), (int *)v327, 1uLL);
                    v193 = v288;
                    --*((_QWORD *)&v289 + 1);
LABEL_239:
                    v194 = v280;
                  }
                  else
                  {
                    v193 = v288;
                    v194 = v280;
                    if ((_QWORD)v289)
                      *((_DWORD *)v288 + v289 - 1) = 0;
                  }
                  *((_QWORD *)__p + v194) = v193;
                  v299 = 0;
                  v284 = 0;
                  v195 = v7[2];
                  if (*((_QWORD *)&v293 + 1) && v195 < v282)
                  {
                    v196 = 0;
                    v275 = 0;
                    while (1)
                    {
                      v197 = *(_QWORD *)&v292[8 * v196];
                      if (v197 && (v198 = *(_QWORD *)(v283[15] + 32), v197 <= (*(_QWORD *)(v283[15] + 40) - v198) >> 3))
                        v199 = *(_QWORD *)(v198 + 8 * v197 - 8);
                      else
                        v199 = 0;
                      if (!*(_BYTE *)(v199 + 145))
                      {
                        std::vector<TPItnRuleControl>::resize((uint64_t)&v300, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v199 + 160) - *(_QWORD *)(v199 + 152)) >> 3));
                        v201 = *(_QWORD *)(v199 + 152);
                        v200 = *(_QWORD *)(v199 + 160);
                        if (v200 != v201)
                        {
                          v202 = (v200 - v201) / 24;
                          v203 = v300;
                          if (v202 <= 1)
                            v202 = 1;
                          v204 = *(__int128 **)(v199 + 152);
                          do
                          {
                            v205 = *v204;
                            v204 = (__int128 *)((char *)v204 + 24);
                            *v203++ = v205;
                            --v202;
                          }
                          while (v202);
                        }
                        v206 = (_QWORD *)(v199 + 120);
                        if (*(char *)(v199 + 143) < 0)
                          v206 = (_QWORD *)*v206;
                        v207 = v200 == v201 ? 0 : v300;
                        v195 = v7[2];
                        if (v195 < v282)
                          break;
                      }
LABEL_294:
                      v226 = (unint64_t)++v196 >= *((_QWORD *)&v293 + 1) || v195 >= v282;
                      if (v226)
                        goto LABEL_301;
                    }
                    v208 = 0;
                    v209 = 1;
                    while (2)
                    {
                      if ((v209 & 1) == 0)
                      {
                        if (!*(_DWORD *)v206)
                          goto LABEL_294;
                        goto LABEL_266;
                      }
                      if (!*(_BYTE *)(v199 + 144))
                      {
                        if (v275)
                        {
                          v210 = 1;
                          goto LABEL_264;
                        }
                        if (*(_QWORD *)(v199 + 32) == *(_QWORD *)(v199 + 24)
                          && *(_QWORD *)(v199 + 56) == *(_QWORD *)(v199 + 48))
                        {
                          v210 = *(_QWORD *)(v199 + 192) == -1;
LABEL_264:
                          v275 = v210;
                        }
                        else
                        {
                          v275 = 0;
                        }
LABEL_266:
                        LOBYTE(v273) = 0;
                        v211 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, uint64_t, int))(*(_QWORD *)v283[15] + 16))(v283[15], *((_QWORD *)__p + v280), v206, v208 & 1, 0, 0, 0, 0, v207, (uint64_t)v207- 0x5555555555555550 * ((*(_QWORD *)(v199 + 160) - *(_QWORD *)(v199 + 152)) >> 3), -1, v273);
                        v212 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, void **, _QWORD, _QWORD, uint64_t *, uint64_t *))(*v283 + 96))(v283, v316, &v316[v277], &v316[v278], v317, &__p, 0, v276, &v299, &v284);
                        v213 = *(const char **)(TResultManager::getResult(v283[16], v212) + 16);
                        v214 = strlen(v213);
                        v215 = v214;
                        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                        {
                          if (v214 != __s1.__r_.__value_.__l.__size_)
                            goto LABEL_274;
                          if (v214 == -1)
LABEL_456:
                            std::wstring::__throw_out_of_range[abi:ne180100]();
                          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_273:
                          v217 = memcmp(p_s1, v213, v215) == 0;
                        }
                        else
                        {
                          if (v214 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                          {
                            if (v214 == -1)
                              goto LABEL_456;
                            p_s1 = &__s1;
                            goto LABEL_273;
                          }
LABEL_274:
                          v217 = 0;
                        }
                        if (v7[2] && !v217)
                        {
                          v218 = v206;
                          v219 = 0;
                          do
                          {
                            v220 = TResultManager::getResult(v283[16], *(_QWORD *)(*v7 + 8 * v219));
                            v221 = strcmp(*(const char **)(v220 + 16), v213);
                            v217 = v221 == 0;
                          }
                          while ((unint64_t)++v219 < v7[2] && v221 != 0);
                          v206 = v218;
                        }
                        v223 = (TResult *)v283[16];
                        if (v217)
                        {
                          TResultManager::destroy(v223, v212);
                        }
                        else
                        {
                          v224 = TResultManager::getResult((uint64_t)v223, v212);
                          MEMORY[0x20BD147A4](*(_QWORD *)(v224 + 32) + 24 * v280, v310[v280]);
                          v327[0] = v212;
                          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v7[2], v327, 1uLL);
                        }
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v283[15] + 24))(v283[15], v211);
                        v195 = v7[2];
                      }
                      v225 = v209 & (v195 < v282);
                      v208 = 1;
                      v209 = 0;
                      if ((v225 & 1) == 0)
                        goto LABEL_294;
                      continue;
                    }
                  }
                  v275 = 0;
LABEL_301:
                  if (!v275 && v195 < v282)
                  {
                    v227 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, void **, _QWORD, _QWORD, uint64_t *, uint64_t *))(*v283 + 96))(v283, v316, &v316[v277], &v316[v278], v317, &__p, 0, v276, &v299, &v284);
                    v228 = *(const char **)(TResultManager::getResult(v283[16], v227) + 16);
                    v229 = strlen(v228);
                    v230 = v229;
                    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (v229 != __s1.__r_.__value_.__l.__size_)
                        goto LABEL_313;
                      if (v229 == -1)
LABEL_461:
                        std::wstring::__throw_out_of_range[abi:ne180100]();
                      v231 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_312:
                      v232 = memcmp(v231, v228, v230) == 0;
                    }
                    else
                    {
                      if (v229 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                      {
                        if (v229 == -1)
                          goto LABEL_461;
                        v231 = &__s1;
                        goto LABEL_312;
                      }
LABEL_313:
                      v232 = 0;
                    }
                    if (v7[2] && !v232)
                    {
                      v233 = 0;
                      do
                      {
                        v234 = TResultManager::getResult(v283[16], *(_QWORD *)(*v7 + 8 * v233));
                        v235 = strcmp(*(const char **)(v234 + 16), v228);
                        v232 = v235 == 0;
                      }
                      while ((unint64_t)++v233 < v7[2] && v235 != 0);
                    }
                    v237 = (TResult *)v283[16];
                    if (v232)
                    {
                      TResultManager::destroy(v237, v227);
                    }
                    else
                    {
                      v238 = TResultManager::getResult((uint64_t)v237, v227);
                      MEMORY[0x20BD147A4](*(_QWORD *)(v238 + 32) + 24 * v280, v310[v280]);
                      v327[0] = v227;
                      TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v7[2], v327, 1uLL);
                    }
                  }
                  *((_QWORD *)__p + v280) = v310[v280];
                }
              }
              v190 = v280 + 1;
              v189 = v310;
              if (v280 + 1 >= (unint64_t)(v311 - v310) || v7[2] >= v282)
                goto LABEL_331;
              continue;
            }
          }
        }
        else if (v166 == 1)
        {
          if ((char *)v311 - (char *)v310 == 8)
          {
            v167 = v283[6];
            v168 = TParam::getActiveConfigHandle((TParam *)(v167 + 16416));
            if (!*(_BYTE *)(v167 + TParam::getValidConfig((TParam *)(v167 + 16416), v168) + 16568)
              || TLexicon::getPronCount(v283[4], *v310) == 1)
            {
              v297 = 0;
              v296 = 0;
              v298 = 0;
              v169 = v283[4];
              v170 = *v310;
              v171 = TStringParam::get((TStringParam *)(v283[6] + 15040));
              TLexicon::getHomophones(v169, v170, v171, &v296);
              v172 = v296;
              if (v296 != v297)
              {
                v288 = 0;
                v289 = 0uLL;
                std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v288, (v297 - (_BYTE *)v296) >> 3);
                v173 = (TWord **)v296;
                if (v297 == v296)
                {
                  v179 = (int *)v289;
                }
                else
                {
                  v174 = 0;
                  do
                  {
                    UnigramScore = TWord::getUnigramScore(v173[v174]);
                    v176 = *((_QWORD *)v296 + v174);
                    v177 = UnigramScore;
                    v178 = v289;
                    if ((unint64_t)v289 >= *((_QWORD *)&v289 + 1))
                    {
                      v180 = (uint64_t)(v289 - (_QWORD)v288) >> 4;
                      v181 = v180 + 1;
                      if ((unint64_t)(v180 + 1) >> 60)
                        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                      v182 = *((_QWORD *)&v289 + 1) - (_QWORD)v288;
                      if ((uint64_t)(*((_QWORD *)&v289 + 1) - (_QWORD)v288) >> 3 > v181)
                        v181 = v182 >> 3;
                      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF0)
                        v183 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v183 = v181;
                      if (v183)
                        v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v289 + 8, v183);
                      else
                        v184 = 0;
                      v185 = &v184[16 * v180];
                      *(_QWORD *)v185 = v177;
                      *((_QWORD *)v185 + 1) = v176;
                      v187 = (char *)v288;
                      v186 = (char *)v289;
                      v188 = v185;
                      if ((void *)v289 != v288)
                      {
                        do
                        {
                          *((_OWORD *)v188 - 1) = *((_OWORD *)v186 - 1);
                          v188 -= 16;
                          v186 -= 16;
                        }
                        while (v186 != v187);
                        v186 = (char *)v288;
                      }
                      v179 = (int *)(v185 + 16);
                      v288 = v188;
                      *(_QWORD *)&v289 = v185 + 16;
                      *((_QWORD *)&v289 + 1) = &v184[16 * v183];
                      if (v186)
                        operator delete(v186);
                    }
                    else
                    {
                      *(_QWORD *)v289 = UnigramScore;
                      *(_QWORD *)(v178 + 8) = v176;
                      v179 = (int *)(v178 + 16);
                    }
                    *(_QWORD *)&v289 = v179;
                    ++v174;
                    v173 = (TWord **)v296;
                  }
                  while (v174 < (v297 - (_BYTE *)v296) >> 3);
                }
                v241 = 126 - 2 * __clz(((char *)v179 - (_BYTE *)v288) >> 4);
                if (v179 == v288)
                  v242 = 0;
                else
                  v242 = v241;
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>((uint64_t)v288, v179, (uint64_t)&v292, v242, 1);
                TParamSetter::TParamSetter(&v292, v283[6] + 2224, (uint64_t)&unk_209A7672C, *(_QWORD *)(v283[6] + 136));
                TParamSetter::TParamSetter(&v303, v283[6] + 2472, (uint64_t)&unk_209A7672C, *(_QWORD *)(v283[6] + 136));
                std::vector<wchar_t const*>::vector(&v300, 1uLL);
                v243 = (_QWORD **)v288;
                if ((void *)v289 != v288 && v7[2] < v282)
                {
                  for (j = 0; j < (uint64_t)(v289 - (_QWORD)v288) >> 4 && v7[2] < v282; ++j)
                  {
                    v327[0] = 0;
                    v299 = 0;
                    *(_QWORD *)v300 = *v243[2 * j + 1];
                    v245 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, void **, _QWORD, _QWORD, uint64_t *, uint64_t *))(*v283 + 96))(v283, v316, &v316[v277], &v316[v278], v317, &v300, 0, v276, v327, &v299);
                    v246 = *(const char **)(TResultManager::getResult(v283[16], (uint64_t)v245) + 16);
                    v247 = strlen(v246);
                    v248 = v247;
                    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (v247 == __s1.__r_.__value_.__l.__size_)
                      {
                        if (v247 == -1)
LABEL_460:
                          std::wstring::__throw_out_of_range[abi:ne180100]();
                        v249 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                        goto LABEL_378;
                      }
                    }
                    else if (v247 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                    {
                      if (v247 == -1)
                        goto LABEL_460;
                      v249 = &__s1;
LABEL_378:
                      v250 = memcmp(v249, v246, v248) == 0;
                      goto LABEL_380;
                    }
                    v250 = 0;
LABEL_380:
                    v251 = v7[2];
                    if (v251 && !v250)
                    {
                      v252 = 0;
                      do
                      {
                        v253 = TResultManager::getResult(v283[16], *(_QWORD *)(*v7 + 8 * v252));
                        v254 = strcmp(*(const char **)(v253 + 16), v246);
                        v250 = v254 == 0;
                        ++v252;
                        v251 = v7[2];
                      }
                      while (v252 < v251 && v254 != 0);
                    }
                    if (v250)
                    {
                      TResultManager::destroy((TResult *)v283[16], (uint64_t)v245);
                    }
                    else
                    {
                      __p = v245;
                      TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v251, (uint64_t *)&__p, 1uLL);
                    }
                    v243 = (_QWORD **)v288;
                  }
                }
                if (v300)
                {
                  v301 = v300;
                  operator delete(v300);
                }
                TParamSetter::~TParamSetter((TParamSetter *)&v303);
                TParamSetter::~TParamSetter((TParamSetter *)&v292);
                if (v288)
                {
                  *(_QWORD *)&v289 = v288;
                  operator delete(v288);
                }
                v172 = v296;
              }
              if (v172)
              {
                v297 = v172;
                operator delete(v172);
              }
            }
          }
        }
        else if (v166 <= 0x1000)
        {
          if (v166 > 127)
          {
            if (v166 > 1023)
            {
              switch(v166)
              {
                case 1024:
                  v240 = 10;
                  break;
                case 2048:
                  v240 = 11;
                  break;
                case 4096:
                  v240 = 12;
                  break;
                default:
                  goto LABEL_435;
              }
            }
            else
            {
              switch(v166)
              {
                case 128:
                  v240 = 7;
                  break;
                case 256:
                  v240 = 8;
                  break;
                case 512:
                  v240 = 9;
                  break;
                default:
                  goto LABEL_435;
              }
            }
          }
          else if (v166 > 15)
          {
            switch(v166)
            {
              case 16:
                v240 = 4;
                break;
              case 32:
                v240 = 5;
                break;
              case 64:
                v240 = 6;
                break;
              default:
                goto LABEL_435;
            }
          }
          else
          {
            switch(v166)
            {
              case 2:
                v240 = 1;
                break;
              case 4:
                v240 = 2;
                break;
              case 8:
                v240 = 3;
                break;
              default:
                goto LABEL_435;
            }
          }
          v303 = v240;
          TBuffer<TPItnRuleHandle_fake **>::resize((uint64_t)&v305, 0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, _QWORD, uint64_t (**)(uint64_t, uint64_t)))(*v283 + 120))(v283, v316, &v316[v277], &v316[v278], v317, &v303, &v304, v276, &v305);
          if (*((_QWORD *)&v306 + 1))
          {
            if (v278 <= v277 + 1)
            {
              v258 = *(_QWORD *)v305;
            }
            else
            {
              v256 = (_QWORD *)v283[16];
              v257 = (_QWORD *)TBuffer<TPItnResultHandle_fake **>::data((uint64_t)&v305);
              v258 = TResultManager::merge(v256, v257, *((uint64_t *)&v306 + 1));
              if (*((_QWORD *)&v306 + 1))
              {
                v259 = 0;
                do
                  TResultManager::destroy((TResult *)v283[16], *((_QWORD *)v305 + v259++));
                while (v259 < *((_QWORD *)&v306 + 1));
              }
            }
            v260 = *(const char **)(TResultManager::getResult(v283[16], v258) + 16);
            v261 = strlen(v260);
            v262 = v261;
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v261 != __s1.__r_.__value_.__l.__size_)
                goto LABEL_423;
              if (v261 == -1)
LABEL_462:
                std::wstring::__throw_out_of_range[abi:ne180100]();
              v263 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_422:
              v264 = memcmp(v263, v260, v262) == 0;
            }
            else
            {
              if (v261 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
              {
                if (v261 == -1)
                  goto LABEL_462;
                v263 = &__s1;
                goto LABEL_422;
              }
LABEL_423:
              v264 = 0;
            }
            v265 = v7[2];
            if (v265 && !v264)
            {
              v266 = 0;
              do
              {
                v267 = TResultManager::getResult(v283[16], *(_QWORD *)(*v7 + 8 * v266));
                v268 = strcmp(*(const char **)(v267 + 16), v260);
                v264 = v268 == 0;
                ++v266;
                v265 = v7[2];
              }
              while (v266 < v265 && v268 != 0);
            }
            if (v264)
            {
              TResultManager::destroy((TResult *)v283[16], v258);
            }
            else
            {
              v292 = (_BYTE *)v258;
              TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v265, (uint64_t *)&v292, 1uLL);
            }
          }
        }
LABEL_435:
        v165 = (uint64_t)v319;
      }
    }
    v270 = v313;
    if (v314 != v313)
    {
      v271 = 0;
      do
      {
        TResultManager::destroy((TResult *)v283[16], *(_QWORD *)&v270[8 * v271++]);
        v270 = v313;
      }
      while (v271 < (v314 - v313) >> 3);
    }
    if (v308)
    {
      if ((char *)v305 != v307 && v305 != 0)
        MEMORY[0x20BD149A8]();
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    if (v310)
    {
      v311 = v310;
      operator delete(v310);
    }
    if (v313)
    {
      v314 = v313;
      operator delete(v313);
    }
    if (v316)
    {
      v317 = v316;
      operator delete(v316);
    }
    v23 = (uint64_t *)v319;
  }
  if (v23)
  {
    v320 = v23;
    operator delete(v23);
  }
}

void sub_2098EE0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(_QWORD *)(v1 - 184) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 168);
  if (v5)
  {
    *(_QWORD *)(v1 - 160) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

BOOL priorityCompare(uint64_t a1, uint64_t a2)
{
  return HIDWORD(a1) < HIDWORD(a2);
}

void std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t TBuffer<TPItnResultHandle_fake **>::data(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(_BYTE *)(a1 + 2072))
    {
      v5 = 0;
      TBuffer<TPItnRuleHandle_fake **>::insert(a1, v2, &v5, 1uLL);
      --*(_QWORD *)(a1 + 16);
    }
    else if (v3)
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3 - 8) = 0;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = 0;
  }
  return *(_QWORD *)a1;
}

void `non-virtual thunk to'TFormatter::generateResultAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TFormatter::generateResultAlternatives(a1 - 40, a2, a3, a4, a5);
}

void TFormatter::reformatResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Result;
  char *v21;
  _BYTE *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int ItnControlCategory;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v54;
  unint64_t v55;
  int v56;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;

  if (a4 != a3)
  {
    v9 = a2;
    v10 = a1;
    v11 = 0;
    v12 = (a3 - (uint64_t)a2) >> 3;
    v41 = (a5 - (uint64_t)a2) >> 3;
    v13 = a7 - a6;
    if (v13 <= 1)
      v13 = 1;
    v51 = v13;
    v44 = &a2[v12];
    v45 = (a3 - (uint64_t)a2) >> 3;
    v54 = v44 + 1;
    v55 = (a4 - a3) >> 3;
    v40 = v12 + 1;
    v39 = a3 + 8;
    v14 = 0;
    do
    {
      v15 = v11;
      v56 = *(unsigned __int8 *)(TResultManager::getResult(*(_QWORD *)(v10 + 128), v9[v11 + v45]) + 1);
      v50 = v15;
      v16 = -8 * v15;
      do
      {
        v17 = v14;
        v18 = v16;
        if (++v14 >= v55)
          break;
        v19 = v16;
        Result = TResultManager::getResult(*(_QWORD *)(v10 + 128), v54[v17]);
        v18 = v19;
        v16 = v19 - 8;
      }
      while ((v56 != 0) == (*(_BYTE *)(Result + 1) != 0));
      v48 = v17;
      v49 = v18;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      TFormatter::addWords(v10, &v44[v15], (unint64_t)v54 - v18, 0, (void **)&v64);
      v21 = v64;
      v22 = v65;
      v23 = a6;
      if (v65 != v64)
      {
        v24 = 0;
        v52 = v14;
        do
        {
          if (a7 == v23)
          {
            v25 = v24 + 1;
          }
          else
          {
            v25 = v24 + 1;
            v26 = v51;
            do
            {
              v27 = &v21[112 * v24];
              v28 = *(_OWORD *)(v27 + 40);
              v29 = *(_OWORD *)(v27 + 56);
              v30 = *(_OWORD *)(v27 + 88);
              v62 = *(_OWORD *)(v27 + 72);
              v63 = v30;
              v60 = v28;
              v61 = v29;
              if (getItnControlCategory(*v23) == 2)
              {
                if (v25 != 0x6DB6DB6DB6DB6DB7 * ((v65 - v64) >> 4))
                {
                  v31 = *v23;
                  *((_QWORD *)&v62 + getItnControlCategory(*v23)) = -1;
                  *((_QWORD *)&v60 + getItnControlCategory(v31)) = v31;
                }
              }
              else
              {
                v32 = *v23;
                *((_QWORD *)&v62 + getItnControlCategory(*v23)) = -1;
                ItnControlCategory = getItnControlCategory(v32);
                v34 = *(_QWORD *)(a9 + 16);
                *((_QWORD *)&v60 + ItnControlCategory) = v32;
                if (!(v24 | v34))
                {
                  v35 = *v23;
                  *((_QWORD *)&v62 + getItnControlCategory(*v23)) = v35;
                }
              }
              v21 = v64;
              v36 = &v64[112 * v24];
              *(_OWORD *)(v36 + 40) = v60;
              *(_OWORD *)(v36 + 56) = v61;
              *(_OWORD *)(v36 + 72) = v62;
              *(_OWORD *)(v36 + 88) = v63;
              v36[104] = 1;
              ++v23;
              --v26;
            }
            while (v26);
            v22 = v65;
            v14 = v52;
            v23 = a6;
          }
          v24 = v25;
        }
        while (v25 < 0x6DB6DB6DB6DB6DB7 * ((v22 - v21) >> 4));
      }
      v10 = a1;
      if (v56)
        v37 = &unk_209A76774;
      else
        v37 = &unk_209A7677C;
      TParamSetter::TParamSetter(&v60, *(_QWORD *)(a1 + 48) + 3792, (uint64_t)v37, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 136));
      v38 = v40 + v48;
      v9 = a2;
      if (v55 - 1 == v48)
        v38 = v41;
      v58 = -1;
      v59 = 0;
      TFormatter::formatInternal(a1, a2, a3 + 8 * v50, (uint64_t *)(v39 - v49), &a2[v38], &v64, a8, 0, &v58, &v59);
      v67 = v58;
      TBuffer<TPItnRuleHandle_fake **>::insert(a9, *(_QWORD *)(a9 + 16), &v67, 1uLL);
      TParamSetter::~TParamSetter((TParamSetter *)&v60);
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v11 = v14;
    }
    while (v14 < v55);
  }
}

void sub_2098EE880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(_QWORD *)(v33 - 112) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'TFormatter::reformatResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, uint64_t a9)
{
  TFormatter::reformatResults(a1 - 40, a2, a3, a4, a5, a6, a7, a8, a9);
}

char **TFormatter::splitResult(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  return TResultManager::split(*(char ***)(a1 + 128), a2, a3, a4);
}

char **`non-virtual thunk to'TFormatter::splitResult(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  return TResultManager::split(*(char ***)(a1 + 88), a2, a3, a4);
}

uint64_t TFormatter::mergeResults(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return TResultManager::merge(*(_QWORD **)(a1 + 128), a2, (a3 - (uint64_t)a2) >> 3);
}

uint64_t `non-virtual thunk to'TFormatter::mergeResults(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return TResultManager::merge(*(_QWORD **)(a1 + 88), a2, (a3 - (uint64_t)a2) >> 3);
}

TResult *TFormatter::deleteResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::destroy(*(TResult **)(a1 + 128), a2);
}

TResult *`non-virtual thunk to'TFormatter::deleteResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::destroy(*(TResult **)(a1 + 88), a2);
}

uint64_t TFormatter::copyResult(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 128);
  v4 = a2;
  return TResultManager::merge(v2, &v4, 1);
}

uint64_t `non-virtual thunk to'TFormatter::copyResult(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 88);
  v4 = a2;
  return TResultManager::merge(v2, &v4, 1);
}

uint64_t TFormatter::deserializeResult(TLexicon ***this, const char *a2, unint64_t a3)
{
  return TResultManager::deserialize(this[16], a2, a3);
}

uint64_t `non-virtual thunk to'TFormatter::deserializeResult(TLexicon ***this, const char *a2, unint64_t a3)
{
  return TResultManager::deserialize(this[11], a2, a3);
}

void TFormatter::alignResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TResultManager::align(*(uint64_t **)(a1 + 128), a2, (a3 - a2) >> 3, a4, (a5 - a4) >> 3, a6);
}

void `non-virtual thunk to'TFormatter::alignResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TResultManager::align(*(uint64_t **)(a1 + 88), a2, (a3 - a2) >> 3, a4, (a5 - a4) >> 3, a6);
}

uint64_t TFormatter::getResultText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  v4 = *(char **)(TResultManager::getResult(*(_QWORD *)(a1 + 128), a2) + 16);
  return TBuffer<char>::assign(a3, v4);
}

uint64_t `non-virtual thunk to'TFormatter::getResultText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  v4 = *(char **)(TResultManager::getResult(*(_QWORD *)(a1 + 88), a2) + 16);
  return TBuffer<char>::assign(a3, v4);
}

uint64_t TFormatter::serializeResultTokenSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  char v13;
  char v14;

  TBuffer<char>::resize(a3, 0);
  v6 = TResultManager::getResult(*(_QWORD *)(a1 + 128), a2);
  v7 = *(_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v6 + 40) != v7)
  {
    v8 = v6;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (unsigned int *)(v7 + v9);
      if (*(char *)(v7 + v9 + 23) < 0)
        v11 = *(unsigned int **)v11;
      TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 32) + 240, v11, a3);
      v14 = 0;
      TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v14, 1uLL);
      ++v10;
      v7 = *(_QWORD *)(v8 + 32);
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 40) - v7) >> 3));
  }
  v13 = 0;
  return TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v13, 1uLL);
}

uint64_t `non-virtual thunk to'TFormatter::serializeResultTokenSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TFormatter::serializeResultTokenSequence(a1 - 40, a2, a3);
}

unint64_t TFormatter::serializeResult(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)TResultManager::getResult(*(_QWORD *)(a1 + 128), a2);
  return TResult::serialize(v7, a3, a4, *(_QWORD *)(a1 + 32));
}

unint64_t `non-virtual thunk to'TFormatter::serializeResult(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)TResultManager::getResult(*(_QWORD *)(a1 + 88), a2);
  return TResult::serialize(v7, a3, a4, *(_QWORD *)(a1 - 8));
}

void TFormatter::getResultAlignment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Result = TResultManager::getResult(*(_QWORD *)(a1 + 128), a2);
  TBuffer<unsigned long>::resize((uint64_t)a3, (uint64_t)(*(_QWORD *)(Result + 112) - *(_QWORD *)(Result + 104)) >> 3);
  if (a3[2])
  {
    v5 = 0;
    v6 = *(_QWORD *)(Result + 104);
    v7 = *a3;
    do
    {
      *(_QWORD *)(v7 + 8 * v5) = *(_QWORD *)(v6 + 8 * v5);
      ++v5;
    }
    while (v5 < a3[2]);
  }
}

void TBuffer<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 2072) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, 8 * v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x20BD149A8](v6, 0x1000C4000313F17);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 2072)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + 8 * v8), 8 * (v9 - v8));
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

void `non-virtual thunk to'TFormatter::getResultAlignment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  TFormatter::getResultAlignment(a1 - 40, a2, a3);
}

BOOL TFormatter::isValidResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::getResult(*(_QWORD *)(a1 + 128), a2) != 0;
}

BOOL `non-virtual thunk to'TFormatter::isValidResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::getResult(*(_QWORD *)(a1 + 88), a2) != 0;
}

uint64_t TFormatter::isResultTokenized(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)TResultManager::getResult(*(_QWORD *)(a1 + 128), a2);
}

uint64_t `non-virtual thunk to'TFormatter::isResultTokenized(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)TResultManager::getResult(*(_QWORD *)(a1 + 88), a2);
}

uint64_t TFormatter::getParamManager(TFormatter *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t TFormatter::getTagManagerInterface(TFormatter *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t TFormatter::getRuleManagerInterface(TFormatter *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t TFormatter::getHintManagerInterface(TFormatter *this)
{
  return *((_QWORD *)this + 16);
}

TItnRuleManager *TFormatter::isCustomized(TFormatter *this)
{
  TItnRuleManager *result;

  result = (TItnRuleManager *)*((_QWORD *)this + 15);
  if (result)
    return (TItnRuleManager *)TItnRuleManager::isCustomized(result);
  return result;
}

BOOL TFormatter::isModified(TFormatter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  return v1 && *(_BYTE *)(v1 + 80) != 0;
}

uint64_t TFormatter::getAdaptationInterface(TFormatter *this)
{
  return 0;
}

uint64_t TFormatter::getResultManagerInterface(TFormatter *this)
{
  return (uint64_t)this + 40;
}

void TRegisterable<TIFormatter>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TIFormatter>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

_QWORD *TRegisterable<TIFormatter>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C214930;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TIFormatter>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

uint64_t TRegisterable<TIFormatter>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TIFormatter>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TIFormatter>::getRegistry(void)::s_registry;
}

void sub_2098EEE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<TItnControl>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControl const*>,std::__wrap_iter<TItnControl const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v37 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v9, v18);
    else
      v19 = 0;
    v28 = &v19[24 * v15];
    __p = v19;
    v34 = v28;
    v36 = &v19[24 * v18];
    v29 = &v28[24 * a5];
    v30 = 24 * a5;
    do
    {
      v31 = *(_OWORD *)v7;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    v35 = v29;
    v5 = (char *)std::vector<TItnControl>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[24 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[24 * a5];
    v25 = &v23[-24 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[24 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2098EF100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnControl>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *TParamSetter::TParamSetter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a1 + 4;
  *((_OWORD *)a1 + 1) = xmmword_209A57DD0;
  *((_BYTE *)a1 + 1056) = 1;
  a1[133] = a4;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(a2, a4, a1 + 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a4, a3);
  return a1;
}

void sub_2098EF2B0(_Unwind_Exception *a1)
{
  uint64_t **v1;

  TBuffer<wchar_t>::~TBuffer(v1);
  _Unwind_Resume(a1);
}

void TParamSetter::~TParamSetter(TParamSetter *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  TParamSetter *v7;
  int v8;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 133);
  v4 = (_QWORD *)((char *)this + 8);
  v6 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  if (v5 >= v6)
  {
    if (*((_BYTE *)this + 1056))
    {
      v8 = 0;
      TBuffer<wchar_t>::insert((uint64_t)v4, v5, &v8, 1uLL);
      --*((_QWORD *)this + 3);
    }
    else if (v6)
    {
      *(_DWORD *)(*v4 + 4 * v6 - 4) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*v4 + 4 * v5) = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3);
  if (*((_BYTE *)this + 1056))
  {
    v7 = (TParamSetter *)*((_QWORD *)this + 1);
    if (v7 != (TParamSetter *)((char *)this + 32))
    {
      if (v7)
        MEMORY[0x20BD149A8](v7, 0x1000C4052888210);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a2);
}

void std::vector<TItnWordData>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 4) >= a2)
  {
    if (a2)
    {
      v13 = (void *)(v7 + 112 * a2);
      v14 = 112 * a2;
      v15 = v7 + 105;
      *(_QWORD *)&v16 = -1;
      *((_QWORD *)&v16 + 1) = -1;
      do
      {
        *(_OWORD *)(v15 - 17) = v16;
        *(_OWORD *)(v15 - 33) = v16;
        *(_OWORD *)(v15 - 49) = v16;
        *(_OWORD *)(v15 - 65) = v16;
        *(_OWORD *)(v15 - 105) = 0uLL;
        *(_OWORD *)(v15 - 89) = 0uLL;
        *(_WORD *)(v15 - 73) = 256;
        *(_WORD *)(v15 - 1) = 256;
        v15 += 112;
        v14 -= 112;
      }
      while (v14);
    }
    else
    {
      v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x249249249249249)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v4, v11);
    else
      v12 = 0;
    v17 = &v12[112 * v8];
    v18 = 112 * a2;
    v19 = &v17[112 * a2];
    v20 = v17 + 105;
    *(_QWORD *)&v21 = -1;
    *((_QWORD *)&v21 + 1) = -1;
    do
    {
      *(_OWORD *)(v20 - 17) = v21;
      *(_OWORD *)(v20 - 33) = v21;
      *(_OWORD *)(v20 - 49) = v21;
      *(_OWORD *)(v20 - 65) = v21;
      *(_OWORD *)(v20 - 105) = 0uLL;
      *(_OWORD *)(v20 - 89) = 0uLL;
      *(_WORD *)(v20 - 73) = 256;
      *(_WORD *)(v20 - 1) = 256;
      v20 += 112;
      v18 -= 112;
    }
    while (v18);
    v22 = &v12[112 * v11];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_OWORD *)v23 - 7);
        v26 = *((_OWORD *)v23 - 5);
        *((_OWORD *)v17 - 6) = *((_OWORD *)v23 - 6);
        *((_OWORD *)v17 - 5) = v26;
        *((_OWORD *)v17 - 7) = v25;
        v27 = *((_OWORD *)v23 - 4);
        v28 = *((_OWORD *)v23 - 3);
        v29 = *((_OWORD *)v23 - 2);
        *(_OWORD *)(v17 - 22) = *(_OWORD *)(v23 - 22);
        *((_OWORD *)v17 - 3) = v28;
        *((_OWORD *)v17 - 2) = v29;
        *((_OWORD *)v17 - 4) = v27;
        v17 -= 112;
        v23 -= 112;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::vector<TItnStateData>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TEdgeStat>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 72 * a2;
    do
    {
      *(_QWORD *)v4 = 0x7FF0000000000000;
      *(_OWORD *)(v4 + 8) = xmmword_209A6C800;
      *(_OWORD *)(v4 + 40) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      v4 += 72;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2098EF650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<TItnStateData>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<TItnStateData>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::vector<std::vector<TItnGrammarStateData const*>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2098EF77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<TItnGrammarStateData const*>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<TItnGrammarStateData const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<TItnGrammarStateData const*>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<TItnGrammarStateData const*>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::wstring>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2098EF880(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::wstring>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<TItnWordData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData const*>,std::__wrap_iter<TItnWordData const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x249249249249249)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v15 = 0x6DB6DB6DB6DB6DB7 * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x124924924924924)
      v18 = 0x249249249249249;
    else
      v18 = v17;
    v45 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v9, v18);
    else
      v19 = 0;
    v32 = &v19[112 * v15];
    __p = v19;
    v42 = v32;
    v44 = &v19[112 * v18];
    v33 = 112 * a5;
    v34 = &v32[112 * a5];
    do
    {
      v35 = *(_OWORD *)v7;
      v36 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v32 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v32 + 2) = v36;
      *(_OWORD *)v32 = v35;
      v37 = *((_OWORD *)v7 + 3);
      v38 = *((_OWORD *)v7 + 4);
      v39 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v32 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v32 + 6) = v39;
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = v38;
      v32 += 112;
      v7 += 112;
      v33 -= 112;
    }
    while (v33);
    v43 = v34;
    v5 = (char *)std::vector<TItnWordData>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v43 != v42)
      v43 += -112
           - 112 * ((((unint64_t)(v43 - v42 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - __dst) >> 4) >= a5)
  {
    v21 = &__src[112 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[112 * a5];
    v25 = &v23[-112 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)v26 = v27;
        v29 = *((_OWORD *)v25 + 3);
        v30 = *((_OWORD *)v25 + 4);
        v31 = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v25 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        v25 += 112;
        v26 += 112;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(v24, v5, v23 - v24 - 6);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7 - 6);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 6);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2098EFC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnWordData>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  void *v19;
  void *v20;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 7);
      v11 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v11;
      *(_OWORD *)(v9 - 112) = v10;
      v12 = *((_OWORD *)v8 - 4);
      v13 = *((_OWORD *)v8 - 3);
      v14 = *((_OWORD *)v8 - 2);
      v7 = (void *)(v9 - 112);
      *(_OWORD *)(v9 - 22) = *(_OWORD *)(v8 - 22);
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 32) = v14;
      *(_OWORD *)(v9 - 64) = v12;
      v8 -= 112;
      v9 -= 112;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v15 = a1[1];
  v16 = *(_QWORD *)(a2 + 16);
  v17 = v15 - __src;
  if (v15 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v17 - 6);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v16 + v17;
  v18 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v18;
  v19 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v19;
  v20 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::vector<TItnWordData>::__init_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData*>,std::__wrap_iter<TItnWordData*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TItnWordData>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 6);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2098EFE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnWordData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v20;
          v21 = *((_DWORD *)v9 + 1);
          *((_DWORD *)v9 + 1) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9, v9 + 1, v9 + 2, (uint64_t)(a2 - 1), a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9, v9 + 1, v9 + 2, (uint64_t)(v9 + 3), (uint64_t)(a2 - 1), a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>((unint64_t)v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  _DWORD *v16;

  if ((uint64_t *)result != a2)
  {
    v4 = (_DWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = HIDWORD(*v8);
          v13 = v7;
          while (1)
          {
            v14 = (char *)v4 + v13;
            v15 = *(_DWORD *)((char *)v4 + v13 + 4);
            *((_DWORD *)v14 + 2) = *(_DWORD *)((char *)v4 + v13);
            *((_DWORD *)v14 + 3) = v15;
            if (!v13)
              break;
            result = (*a3)(v11, *((_QWORD *)v14 - 1));
            v13 -= 8;
            if ((result & 1) == 0)
            {
              v16 = (_DWORD *)((char *)v4 + v13 + 8);
              goto LABEL_10;
            }
          }
          v16 = v4;
LABEL_10:
          *v16 = v11;
          v16[1] = v12;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (uint64_t *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = result + 12;
      do
      {
        v9 = *v4;
        v8 = v4[1];
        v4 = v5;
        result = (*a3)(v8, v9);
        if ((_DWORD)result)
        {
          v10 = *v4;
          v11 = (_DWORD *)v7;
          do
          {
            v12 = v11;
            *(v11 - 1) = *(v11 - 3);
            v13 = *(v11 - 2);
            v11 -= 2;
            *v12 = v13;
            result = (*a3)(v10, *(_QWORD *)(v12 - 5));
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 - 1) = v10;
        }
        v5 = v4 + 1;
        v7 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD))
{
  char v8;
  uint64_t result;
  int v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v8 = (*a4)(*a2, *a1);
  result = (*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *(_DWORD *)a1;
    if ((_DWORD)result)
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v10;
      v11 = (int *)a3 + 1;
      result = 1;
      v12 = (int *)a1 + 1;
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v10;
    v17 = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = v17;
    if ((*a4)(*a3, *a2))
    {
      v18 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v18;
      v11 = (int *)a3 + 1;
      result = 2;
      v12 = (int *)a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v13;
    v15 = (int *)a2 + 1;
    v14 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = v14;
    if ((*a4)(*a2, *a1))
    {
      v16 = *(_DWORD *)a1;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v12 = (int *)a1 + 1;
      *(_DWORD *)a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>(unint64_t a1, _DWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _DWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)a1;
  if (((*a3)(*(_QWORD *)a1, *((_QWORD *)a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = *(_QWORD *)(v7 + 8);
      v7 += 8;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 8;
    do
    {
      v7 = v9;
      if (v9 >= (unint64_t)v4)
        break;
      v9 += 8;
    }
    while (!(*a3)(v6, *(_QWORD *)v7));
  }
  if (v7 < (unint64_t)v4)
  {
    do
    {
      v10 = *((_QWORD *)v4 - 1);
      v4 -= 2;
    }
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < (unint64_t)v4)
  {
    v11 = *(_DWORD *)v7;
    *(_DWORD *)v7 = *v4;
    *v4 = v11;
    v12 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v7 + 4) = v4[1];
    v4[1] = v12;
    do
    {
      v13 = *(_QWORD *)(v7 + 8);
      v7 += 8;
    }
    while (!(*a3)(v6, v13));
    do
    {
      v14 = *((_QWORD *)v4 - 1);
      v4 -= 2;
    }
    while (((*a3)(v6, v14) & 1) != 0);
  }
  if (v7 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v7 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v7 - 4);
  }
  *(_QWORD *)(v7 - 8) = v6;
  return v7;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>(uint64_t *a1, _DWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= (unint64_t)a2)
        break;
      v11 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v11, v7) & 1) == 0);
  }
  else
  {
    do
    {
      v10 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v10, v7));
  }
  v12 = (unint64_t)&a1[v6];
  if (v9 < (unint64_t)a2)
  {
    v13 = a2;
    do
    {
      v14 = *(_DWORD *)v12;
      *(_DWORD *)v12 = *v13;
      *v13 = v14;
      v15 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v13[1];
      v13[1] = v15;
      do
      {
        v16 = *(_QWORD *)(v12 + 8);
        v12 += 8;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
      {
        v17 = *((_QWORD *)v13 - 1);
        v13 -= 2;
      }
      while (!(*a3)(v17, v7));
    }
    while (v12 < (unint64_t)v13);
  }
  result = v12 - 8;
  if ((uint64_t *)(v12 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v12 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v12 - 4);
  }
  *(_QWORD *)(v12 - 8) = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_QWORD *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  _DWORD *v19;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(*(a2 - 1), *a1))
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
        v9 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, (uint64_t)(a2 - 1), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, (uint64_t)(a1 + 3), (uint64_t)(a2 - 1), a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*v11, *v10))
    {
      v14 = *v11;
      v15 = HIDWORD(*v11);
      v16 = v12;
      while (1)
      {
        v17 = (char *)a1 + v16;
        v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *((_DWORD *)v17 + 6) = *(_DWORD *)((char *)a1 + v16 + 16);
        *((_DWORD *)v17 + 7) = v18;
        if (v16 == -16)
          break;
        v16 -= 8;
        if (((*a3)(v14, *((_QWORD *)v17 + 1)) & 1) == 0)
        {
          v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v14;
      v19[1] = v15;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t (**a5)(_QWORD, _QWORD))
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a2, a3, a5);
  result = (*a5)(*(_QWORD *)a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v12;
    result = (*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      v14 = *((_DWORD *)a2 + 1);
      *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = v14;
      result = (*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        v16 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(_QWORD, _QWORD))
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a2, a3, a4, a6);
  result = (*a6)(*(_QWORD *)a5, *(_QWORD *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v14;
    result = (*a6)(*(_QWORD *)a4, *a3);
    if ((_DWORD)result)
    {
      v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      v16 = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v16;
      result = (*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        v18 = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
        *((_DWORD *)a3 + 1) = v18;
        result = (*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          v20 = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v20;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(char *a1, char *a2, char *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char *v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(*(_QWORD *)v14, *(_QWORD *)a1))
        {
          v15 = *(_DWORD *)v14;
          *(_DWORD *)v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 8;
      do
      {
        v20 = *(_DWORD *)a1;
        v19 = *((_DWORD *)a1 + 1);
        v21 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (uint64_t)(v21 + 8), a4, (v21 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        v18 = HIDWORD(*v5);
        do
        {
          v15 = v5;
          v5 = v12;
          *v15 = *(_DWORD *)v12;
          v15[1] = *((_DWORD *)v12 + 1);
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = v17;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v11 = v16;
        }
        while (!(_DWORD)result);
        *(_DWORD *)v5 = v14;
        *((_DWORD *)v5 + 1) = v18;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_DWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[2 * v6 + 2];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(*(_QWORD *)&a1[2 * v6 + 2], *(_QWORD *)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_QWORD *)(result + 8 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *(_QWORD *)v9;
      v11 = HIDWORD(*(_QWORD *)v9);
      do
      {
        v12 = v9;
        v9 = v8;
        *v12 = *(_DWORD *)v8;
        v12[1] = *((_DWORD *)v8 + 1);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
      }
      while ((result & 1) != 0);
      *v9 = v10;
      v9[1] = v11;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(a2 - 4);
        v23 = *(_DWORD *)v9;
        if (v22 < *(_DWORD *)v9)
        {
          v24 = *(_QWORD *)(v9 + 8);
          v25 = *((_QWORD *)a2 - 1);
LABEL_34:
          *(_DWORD *)v9 = v22;
          *(a2 - 4) = v23;
          *(_QWORD *)(v9 + 8) = v25;
          *((_QWORD *)a2 - 1) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *((_QWORD *)a2 - 1);
          v24 = *(_QWORD *)(v9 + 8);
          if (v25 < v24)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v9, (int *)(v9 + 16), a2 - 4);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v9, v9 + 16, v9 + 32, v9 + 48, a2 - 4);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v9 + 16 * (v13 >> 1)), (int *)v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v9, (int *)(v9 + 16 * (v13 >> 1)), a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v9 + 16), (int *)(v15 - 16), a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v9 + 32), (int *)(v9 + 16 + 16 * v14), a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v15 - 16), (int *)v15, (int *)(v9 + 16 + 16 * v14));
            v16 = *(_DWORD *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(_DWORD *)v15 = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(_DWORD *)(v9 - 16);
          if (v18 >= *(_DWORD *)v9 && (*(_DWORD *)v9 < v18 || *(_QWORD *)(v9 - 8) >= *(_QWORD *)(v9 + 8)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>((int *)v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>((int *)v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v9, v19);
          v9 = v19 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v19 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (int *)v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if ((int *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,std::pair<int,TWord const*> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *result, int *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 4;
  if (result + 4 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[4];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = *((_QWORD *)v5 + 3);
      v9 = *((_QWORD *)v5 + 1);
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = *((_QWORD *)v5 + 3);
      v9 = *((_QWORD *)v5 + 1);
    }
    v5[4] = v7;
    *((_QWORD *)v4 + 1) = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(int *)((char *)result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(_QWORD *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 4;
      v14 = (uint64_t)result + v11;
      *(_DWORD *)v14 = v12;
      *(_QWORD *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = (int *)((char *)result + v11);
      v13 = *(_QWORD *)((char *)result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *v10 = v6;
    *((_QWORD *)v10 + 1) = v8;
LABEL_19:
    v2 = v4 + 4;
    v3 += 16;
  }
  while (v4 + 4 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *result, int *a2)
{
  int *v2;
  int *i;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  int *j;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      for (i = result + 2; ; i += 4)
      {
        v4 = result;
        result = v2;
        v5 = v4[4];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = *((_QWORD *)v4 + 3);
          if (v7 < *((_QWORD *)v4 + 1))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 4;
        if (result + 4 == a2)
          return result;
      }
      v7 = *((_QWORD *)v4 + 3);
LABEL_6:
      for (j = i; ; j -= 4)
      {
        j[2] = v6;
        *((_QWORD *)j + 2) = *(_QWORD *)j;
        v6 = *(j - 6);
        if (v5 >= v6 && (v6 < v5 || v7 >= *((_QWORD *)j - 2)))
          break;
      }
      *(j - 2) = v5;
      *(_QWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || *((_QWORD *)a2 + 1) >= *((_QWORD *)a1 + 1)))
  {
    v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *((_QWORD *)a3 + 1);
      v10 = *((_QWORD *)a2 + 1);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a3 + 1);
    }
    *a2 = v9;
    *a3 = v3;
    *((_QWORD *)a2 + 1) = v11;
    *((_QWORD *)a3 + 1) = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *((_QWORD *)a2 + 1);
      v14 = *((_QWORD *)a1 + 1);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *((_QWORD *)a1 + 1);
      v15 = *((_QWORD *)a2 + 1);
    }
    *a1 = v12;
    *a2 = v13;
    *((_QWORD *)a1 + 1) = v15;
    result = 2;
    *((_QWORD *)a2 + 1) = v14;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = *((_QWORD *)a3 + 1);
LABEL_6:
      *a1 = v5;
      *a3 = v4;
      v7 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v6;
      *((_QWORD *)a3 + 1) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *((_QWORD *)a3 + 1);
      v16 = *((_QWORD *)a2 + 1);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *((_QWORD *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    v17 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v16;
    *((_QWORD *)a2 + 1) = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *((_QWORD *)a3 + 1);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *((_QWORD *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((_QWORD *)a2 + 1) = v19;
    result = 2;
    *((_QWORD *)a3 + 1) = v17;
  }
  return result;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *(a2 - 4);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_QWORD *)a2 - 1)))
  {
    for (i = a1 + 4; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((_QWORD *)i + 1)); i += 4)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[4];
      i += 4;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_QWORD *)i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v4 >= v2 && v3 < *((_QWORD *)a2 + 1); a2 -= 4)
    {
      v8 = *(a2 - 4);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[4];
      i += 4;
      v9 = v11;
      v12 = *((_QWORD *)i - 1);
      *((_QWORD *)i - 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_QWORD *)i + 1)))
      {
        v13 = i[4];
        i += 4;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 4);
          a2 -= 4;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_QWORD *)a2 + 1));
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)i - 1);
  }
  *(i - 4) = v2;
  *((_QWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = 0;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  while (1)
  {
    v5 = a1[v2 + 4];
    if (v5 >= v3 && (v3 < v5 || *(_QWORD *)&a1[v2 + 6] >= v4))
      break;
    v2 += 4;
  }
  v6 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = v6;
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v13 = v6;
    v14 = a2;
    do
    {
      *(_DWORD *)v13 = v12;
      *(_DWORD *)v14 = v5;
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(_DWORD *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_QWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(_DWORD *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_QWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 16);
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v13 - 8);
  }
  *(_DWORD *)(v13 - 16) = v3;
  *(_QWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
LABEL_30:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a2 - 8);
        v8 = *(_QWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_DWORD *)v11;
  v15 = *(_DWORD *)v10;
  if (*(_DWORD *)v11 >= *(_DWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
  }
  *(_DWORD *)v11 = v15;
  *(_QWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_DWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_QWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_DWORD *)v18 = v14;
        *(_QWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(_DWORD *)(v20 + 32) = v21;
    *(_QWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a4 + 8) = v11;
  v13 = *(_DWORD *)a3;
  v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_QWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v13;
  *(_DWORD *)a3 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(_DWORD *)a2;
  v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
LABEL_15:
    *(_DWORD *)a1 = v17;
    *(_DWORD *)a2 = v18;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *((_QWORD *)a5 + 1);
    v13 = *(_QWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *((_QWORD *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(_QWORD *)(a4 + 8) = v14;
  *((_QWORD *)a5 + 1) = v13;
  v15 = *(_DWORD *)a4;
  v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_QWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)a4 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a4 + 8) = v17;
  v19 = *(_DWORD *)a3;
  v20 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v19;
  *(_DWORD *)a3 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a3 + 8) = v21;
  v23 = *(_DWORD *)a2;
  v24 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
LABEL_9:
    *(_DWORD *)a1 = v23;
    *(_DWORD *)a2 = v24;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(_DWORD *)v14;
        v16 = *(_DWORD *)a1;
        if (*(_DWORD *)v14 >= *(_DWORD *)a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = *(_QWORD *)(v14 + 8);
          v18 = *(_QWORD *)(a1 + 8);
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = *(_QWORD *)(v14 + 8);
          v18 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)v14 = v16;
        *(_DWORD *)a1 = v15;
        *(_QWORD *)(v14 + 8) = v18;
        *(_QWORD *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v9, (int *)a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = a2 - 16;
      do
      {
        v21 = *(_DWORD *)a1;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(_DWORD *)v23 = v21;
          *(_QWORD *)(v23 + 8) = v22;
        }
        else
        {
          *(_DWORD *)v23 = *(_DWORD *)v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v20 + 8);
          *(_DWORD *)v20 = v21;
          *(_QWORD *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[4];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < *((_QWORD *)v8 + 3))
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = *((_QWORD *)v8 + 1);
          v13 = *((_QWORD *)a4 + 1);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *((_QWORD *)a4 + 1);
          v14 = *((_QWORD *)v8 + 1);
        }
        *a4 = v11;
        *((_QWORD *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (int *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[4];
              if (*v15 < v18 || v18 >= *v15 && *(_QWORD *)(result + 16 * v7 + 8) < *((_QWORD *)v15 + 3))
              {
                v15 += 4;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = *((_QWORD *)v15 + 1);
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            *((_QWORD *)v8 + 1) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        *((_QWORD *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_DWORD *)(result + 16);
      if (*(_DWORD *)result < v10
        || v10 >= *(_DWORD *)result && *(_QWORD *)(v6 + 16 * v7 + 8) < *(_QWORD *)(result + 24))
      {
        result += 16;
        v3 = v9;
      }
    }
    *(_DWORD *)v6 = *(_DWORD *)result;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(result + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_QWORD *)(result + 16 * v5 + 8);
      v9 = *(_QWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
      v10 = *((_QWORD *)v6 + 1);
    }
    *(_DWORD *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (int *)(result + 16 * v5);
        v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *((_QWORD *)v11 + 1);
        }
        *v6 = v13;
        *((_QWORD *)v6 + 1) = v14;
        v6 = (int *)(result + 16 * v5);
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *v11 = v8;
    *((_QWORD *)v11 + 1) = v9;
  }
  return result;
}

_QWORD *std::vector<wchar_t const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2098F2070(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<wchar_t const*>::__init_with_size[abi:ne180100]<wchar_t const**,wchar_t const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2098F20E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t StartupSearchParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;

  v126 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v126, (uint64_t)"SearchPelScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPelScoreScaleDoubleHistory);
  v125 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v125, (uint64_t)"SearchPelScoreUseBestCompScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPelScoreUseBestCompScoreBoolHistory);
  v117 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v117, (uint64_t)"SearchDecimationType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchDecimationTypeEnumHistory);
  v116 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v116, (uint64_t)"SearchEnableGenoneScoreCacheThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchEnableGenoneScoreCacheThreshDoubleHistory);
  v115 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v115, (uint64_t)"SearchFrameTransformerThreadingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchFrameTransformerThreadingTypeEnumHistory);
  v114 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v114, (uint64_t)"SearchThreadingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchThreadingTypeEnumHistory);
  v124 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v124, (uint64_t)"SearchTruncatePackedIntComponentScores", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchTruncatePackedIntComponentScoresBoolHistory);
  v113 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v113, (uint64_t)"SearchFmpeMinimumPosteriorProbability", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchFmpeMinimumPosteriorProbabilityDoubleHistory);
  v128 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v128, (uint64_t)"SearchFmpeWindowTruncateUnavailableFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchFmpeWindowTruncateUnavailableFramesBoolHistory);
  v123 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v123, (uint64_t)"SearchUseWordEndThreshWhenSeedingFinalSilence", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchUseWordEndThreshWhenSeedingFinalSilenceBoolHistory);
  v122 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v122, (uint64_t)"SearchTraceThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchTraceThreshScoreIncrementIntHistory);
  v104 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v104, (uint64_t)"SearchActiveWordSpreadSeedScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveWordSpreadSeedScoreIntHistory);
  v120 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v120, (uint64_t)"SearchPelBackoffThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPelBackoffThreshScoreDecrementIntHistory);
  v127 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v127, (uint64_t)"SearchAdjustThreshScoreType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchAdjustThreshScoreTypeEnumHistory);
  v108 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v108, (uint64_t)"SearchInterWordSilencePenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchInterWordSilencePenaltyIntHistory);
  v118 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v118, (uint64_t)"SearchNodeSkippingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchNodeSkippingTypeEnumHistory);
  v119 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v119, (uint64_t)"SearchRemoveInactiveWordsIntervalFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchRemoveInactiveWordsIntervalFramesIntHistory);
  v97 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v97, (uint64_t)"SearchAbortOnNumHistories", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchAbortOnNumHistoriesIntHistory);
  v96 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v96, (uint64_t)"SearchAbortOnAllocBytes", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchAbortOnAllocBytesIntHistory);
  v95 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v95, (uint64_t)"SearchAbortOnAverageWordsEndingPerFrame", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchAbortOnAverageWordsEndingPerFrameIntHistory);
  v94 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v94, (uint64_t)"SearchAbortOnNumRecognizedFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchAbortOnNumRecognizedFramesIntHistory);
  v90 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v90, (uint64_t)"SearchLatticeLMRescoringAbortOnTotalNewNodes", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeLMRescoringAbortOnTotalNewNodesIntHistory);
  v121 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v121, (uint64_t)"SearchLatticeSilentWordsUseCoarticulation", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeSilentWordsUseCoarticulationBoolHistory);
  v103 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v103, (uint64_t)"SearchLatticeAbortOnNumNodes", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeAbortOnNumNodesIntHistory);
  v101 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v101, (uint64_t)"SearchLatticeAbortOnNumLinks", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeAbortOnNumLinksIntHistory);
  v100 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v100, (uint64_t)"SearchLatticeAbortOnScaledAverageNodesPerFrame", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeAbortOnScaledAverageNodesPerFrameIntHistory);
  v99 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v99, (uint64_t)"SearchLatticeAbortOnScaledAverageLinksPerFrame", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeAbortOnScaledAverageLinksPerFrameIntHistory);
  v112 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v112, (uint64_t)"SearchTraceLatticeNormalizedThreshFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchTraceLatticeNormalizedThreshFactorDoubleHistory);
  v111 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v111, (uint64_t)"SearchTraceLatticeThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchTraceLatticeThreshScoreIncrementIntHistory);
  v98 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v98, (uint64_t)"SearchLatticeAllowZeroDurationFinalSilence", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeAllowZeroDurationFinalSilenceBoolHistory);
  v102 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v102, (uint64_t)"SearchPerWordPenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPerWordPenaltyIntHistory);
  v110 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v110, (uint64_t)"SearchWordSeedThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordSeedThreshScoreDecrementIntHistory);
  v109 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v109, (uint64_t)"SearchWordSeedFinalSilenceThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordSeedFinalSilenceThreshScoreDecrementIntHistory);
  v107 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v107, (uint64_t)"SearchWordSeedScoreIncludePrefiltererScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordSeedScoreIncludePrefiltererScoreBoolHistory);
  v106 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v106, (uint64_t)"SearchWordSeedUnprefilteredUseThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordSeedUnprefilteredUseThreshScoreDecrementBoolHistory);
  v105 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v105, (uint64_t)"SearchEstimateAndPreScoreActivePels", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchEstimateAndPreScoreActivePelsBoolHistory);
  v80 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v80, (uint64_t)"SearchActiveWordHasPredecessorPhonemeContext", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveWordHasPredecessorPhonemeContextBoolHistory);
  v77 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v77, (uint64_t)"SearchActiveWordHasPredecessorWordContext", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveWordHasPredecessorWordContextBoolHistory);
  v75 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v75, (uint64_t)"SearchActiveWordHasMergedGrammarState", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveWordHasMergedGrammarStateBoolHistory);
  v74 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v74, (uint64_t)"SearchActiveWordHasMergedLatticeLinkId", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveWordHasMergedLatticeLinkIdBoolHistory);
  v73 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v73, (uint64_t)"SearchLatticeTimeConstraintDistanceMaxFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeTimeConstraintDistanceMaxFramesIntHistory);
  v68 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v68, (uint64_t)"SearchLatticeTimeConstraintSeedThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeTimeConstraintSeedThreshScoreIntHistory);
  v85 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v85, (uint64_t)"SearchLMLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMLimitEnumHistory);
  v84 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v84, (uint64_t)"SearchLMRescoreWithCorrective", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMRescoreWithCorrectiveBoolHistory);
  v78 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v78, (uint64_t)"SearchLMDisallowedLMScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDisallowedLMScoreIntHistory);
  v79 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v79, (uint64_t)"SearchLMDynamicReadCacheBlocksPerChunk", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDynamicReadCacheBlocksPerChunkIntHistory);
  v76 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v76, (uint64_t)"SearchLMDynamicReadCacheMaxBlocks", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDynamicReadCacheMaxBlocksIntHistory);
  v69 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v69, (uint64_t)"SearchLMDynamicBigramReadCacheMaxChunksPerRead", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDynamicBigramReadCacheMaxChunksPerReadIntHistory);
  v71 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v71, (uint64_t)"SearchLMDynamicTrigramReadCacheMaxChunksPerRead", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDynamicTrigramReadCacheMaxChunksPerReadIntHistory);
  v66 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v66, (uint64_t)"SearchLMDynamicQuadgramReadCacheMaxChunksPerRead", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLMDynamicQuadgramReadCacheMaxChunksPerReadIntHistory);
  v63 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v63, (uint64_t)"SearchInitialSilenceToFinalSilenceLMScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchInitialSilenceToFinalSilenceLMScoreIntHistory);
  v59 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v59, (uint64_t)"SearchLatticePruneKeepUniquePathsMaxSize", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticePruneKeepUniquePathsMaxSizeIntHistory);
  v57 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v57, (uint64_t)"SearchLatticeNodeCreationUseRightWord", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeNodeCreationUseRightWordBoolHistory);
  v55 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v55, (uint64_t)"SearchLatticeUseCoarticulation", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeUseCoarticulationBoolHistory);
  v92 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v92, (uint64_t)"SearchLatticeUseThresholding", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeUseThresholdingBoolHistory);
  v89 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v89, (uint64_t)"SearchLatticePreserveAlternateProns", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticePreserveAlternatePronsBoolHistory);
  v83 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v83, (uint64_t)"SearchRecognitionContinuationInterval", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchRecognitionContinuationIntervalIntHistory);
  v82 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v82, (uint64_t)"SearchRecognitionBatchProcessing", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchRecognitionBatchProcessingBoolHistory);
  v70 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v70, (uint64_t)"SearchNonAcousticWordLMThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchNonAcousticWordLMThreshScoreIntHistory);
  v67 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v67, (uint64_t)"SearchNonAcousticWordEndThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchNonAcousticWordEndThreshScoreIncrementIntHistory);
  v64 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v64, (uint64_t)"SearchNonAcousticWordAndSuccessorLMThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchNonAcousticWordAndSuccessorLMThreshScoreIntHistory);
  v65 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v65, (uint64_t)"SearchNonAcousticWordSeedThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchNonAcousticWordSeedThreshScoreIncrementIntHistory);
  v93 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v93, (uint64_t)"SearchGenerateConstraintLattice", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchGenerateConstraintLatticeBoolHistory);
  v91 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v91, (uint64_t)"SearchConstraintLatticePreserveTimes", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConstraintLatticePreserveTimesBoolHistory);
  v88 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v88, (uint64_t)"SearchConstraintLatticeMaxSyntheticSilenceFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConstraintLatticeMaxSyntheticSilenceFramesIntHistory);
  v87 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v87, (uint64_t)"SearchConstraintLatticeMergeNodeMaxFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConstraintLatticeMergeNodeMaxFramesIntHistory);
  v60 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v60, (uint64_t)"SearchLatticeComputeOnlyBestPath", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeComputeOnlyBestPathBoolHistory);
  v62 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v62, (uint64_t)"SearchThreshScoreWhenSilenceBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchThreshScoreWhenSilenceBestIntHistory);
  v61 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v61, (uint64_t)"SearchThreshScoreIncrementWhenNonSilenceBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchThreshScoreIncrementWhenNonSilenceBestIntHistory);
  v53 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v53, (uint64_t)"SearchFinalSilenceThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchFinalSilenceThreshScoreIncrementIntHistory);
  v86 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v86, (uint64_t)"SearchActiveCountLimitScoreCompareWithBeam", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveCountLimitScoreCompareWithBeamBoolHistory);
  v51 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v51, (uint64_t)"SearchActiveNodeCountLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveNodeCountLimitIntHistory);
  v50 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v50, (uint64_t)"SearchActiveNodePreserveMultipleHistories", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveNodePreserveMultipleHistoriesBoolHistory);
  v49 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v49, (uint64_t)"SearchActiveSequenceCountLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchActiveSequenceCountLimitIntHistory);
  v54 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v54, (uint64_t)"SearchWordEndThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordEndThreshScoreDecrementIntHistory);
  v52 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v52, (uint64_t)"SearchWordEndAgainstBestWordEndThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordEndAgainstBestWordEndThreshScoreDecrementIntHistory);
  v81 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v81, (uint64_t)"SearchWordEndAgainstPrevBestNodeThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchWordEndAgainstPrevBestNodeThreshScoreIntHistory);
  v48 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v48, (uint64_t)"SearchLatticeNormalizedThreshFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeNormalizedThreshFactorDoubleHistory);
  v47 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v47, (uint64_t)"SearchLatticeThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeThreshScoreIntHistory);
  v72 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v72, (uint64_t)"SearchLatticeLinksPerSecondLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeLinksPerSecondLimitIntHistory);
  v44 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v44, (uint64_t)"SearchLatticePruneLinksPerSecondLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticePruneLinksPerSecondLimitIntHistory);
  v37 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v37, (uint64_t)"SearchLatticeBestCrumbDistanceMaxFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeBestCrumbDistanceMaxFramesIntHistory);
  v35 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v35, (uint64_t)"SearchLatticeBestCrumbThreshScoreIncrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeBestCrumbThreshScoreIncrementIntHistory);
  v0 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v0, (uint64_t)"SearchLatticeComputeOnlyBestTimes", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchLatticeComputeOnlyBestTimesBoolHistory);
  v39 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v39, (uint64_t)"SearchStateUsePrefiltererMinNumWords", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchStateUsePrefiltererMinNumWordsIntHistory);
  v20 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v20, (uint64_t)"SearchConTransAccStartFrame", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccStartFrameIntHistory);
  v17 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v17, (uint64_t)"SearchConTransAccRampFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccRampFramesIntHistory);
  v14 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v14, (uint64_t)"SearchConTransAccMaxSilenceFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccMaxSilenceFramesIntHistory);
  v10 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v10, (uint64_t)"SearchConTransAccFactorList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccFactorListStringHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"SearchConTransAccDecayFrequency", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccDecayFrequencyIntHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"SearchConTransAccDecayFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchConTransAccDecayFactorDoubleHistory);
  v34 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v34, (uint64_t)"SearchPrefilterResultUseCrumbBank", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPrefilterResultUseCrumbBankBoolHistory);
  v33 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v33, (uint64_t)"SearchPrefilterResultUseCrumbBankDistanceMaxFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPrefilterResultUseCrumbBankDistanceMaxFramesIntHistory);
  v32 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v32, (uint64_t)"SearchSegmentAllNets", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchSegmentAllNetsBoolHistory);
  v41 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v41, (uint64_t)"SearchHierScorerBeamList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchHierScorerBeamListStringHistory);
  v56 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v56, (uint64_t)"SearchHierScorerCutoffList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchHierScorerCutoffListStringHistory);
  v46 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v46, (uint64_t)"SearchHierScorerCutoffRatioList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchHierScorerCutoffRatioListStringHistory);
  v36 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v36, (uint64_t)"SearchHierInactiveComponentScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchHierInactiveComponentScoreIntHistory);
  v58 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v58, (uint64_t)"SearchUsesFst", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchUsesFstBoolHistory);
  v31 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v31, (uint64_t)"FstCoreBeam", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreBeamDoubleHistory);
  v30 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v30, (uint64_t)"FstCoreLatticeBeam", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreLatticeBeamDoubleHistory);
  v42 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v42, (uint64_t)"FstCoreLateLatticeArcFingerSuckPenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreLateLatticeArcFingerSuckPenaltyDoubleHistory);
  v28 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v28, (uint64_t)"FstCoreMaxActive", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreMaxActiveIntHistory);
  v26 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v26, (uint64_t)"FstCoreNBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreNBestIntHistory);
  v25 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v25, (uint64_t)"FstCoreHashPropagateBestTokensFirst", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreHashPropagateBestTokensFirstIntHistory);
  v24 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v24, (uint64_t)"FstCoreRepeatFrame", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreRepeatFrameBoolHistory);
  v45 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v45, (uint64_t)"FstCoreSearchType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreSearchTypeEnumHistory);
  v27 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v27, (uint64_t)"FstCoreLatticeGeneration", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreLatticeGenerationEnumHistory);
  v43 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v43, (uint64_t)"FstCorePelScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCorePelScoreScaleDoubleHistory);
  v22 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v22, (uint64_t)"FstCoreGenerateLeafLattice", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreGenerateLeafLatticeBoolHistory);
  v38 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v38, (uint64_t)"FstCoreAttilaLatticeOutputFileNamePrefix", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreAttilaLatticeOutputFileNamePrefixStringHistory);
  v40 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v40, (uint64_t)"FstCorePerWordPenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCorePerWordPenaltyIntHistory);
  v21 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v21, (uint64_t)"SearchDisableHierarchicalScorer", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchDisableHierarchicalScorerBoolHistory);
  v19 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v19, (uint64_t)"SearchDisableGPUScorer", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchDisableGPUScorerBoolHistory);
  v18 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v18, (uint64_t)"FstCoreUseDurationModel", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreUseDurationModelBoolHistory);
  v29 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v29, (uint64_t)"FstCoreGenerateLattice", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreGenerateLatticeBoolHistory);
  v16 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v16, (uint64_t)"FstCoreHashTokens", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreHashTokensBoolHistory);
  v15 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v15, (uint64_t)"FstCoreUseFwdBwdAlgorithm", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreUseFwdBwdAlgorithmBoolHistory);
  v13 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v13, (uint64_t)"FstCoreLockPelScoreCache", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreLockPelScoreCacheBoolHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v12, (uint64_t)"FstCoreCollectTracesPeriod", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreCollectTracesPeriodIntHistory);
  v11 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v11, (uint64_t)"FstCoreBackoffThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sFstCoreBackoffThreshScoreIntHistory);
  v23 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v23, (uint64_t)"SearchPartialExtendWithPrefilterer", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialExtendWithPrefiltererBoolHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v3, (uint64_t)"SearchPartialIncludePrefiltererResult", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialIncludePrefiltererResultEnumHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"SearchPartialIncompleteMaxWords", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialIncompleteMaxWordsIntHistory);
  v5 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v5, (uint64_t)"SearchPartialIncompleteMinListFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialIncompleteMinListFramesIntHistory);
  v6 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v6, (uint64_t)"SearchPartialIncompleteMinWordFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialIncompleteMinWordFramesIntHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"SearchPartialCompleteMinWordFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialCompleteMinWordFramesIntHistory);
  v8 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v8, (uint64_t)"SearchPartialRegularMinWordFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchPartialRegularMinWordFramesIntHistory);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v90);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v96);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v95);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v97);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v94);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v80);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v77);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v75);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v74);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v73);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v104);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v10);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v117);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v116);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v113);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v115);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v114);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v108);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v78);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v79);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v76);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v85);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v84);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v99);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v100);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v101);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v103);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v98);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v118);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v120);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v126);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v125);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v102);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v82);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v83);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v119);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v112);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v111);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v122);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v124);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v123);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v109);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v107);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v110);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v106);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v105);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v89);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v121);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v92);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v86);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v127);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v88);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v87);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v91);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v93);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v72);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v81);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v128);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_253DF2870, (ParamSpec *)v58);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2870);
}

_DWORD *SearchParamSet::SearchParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C214B20;
  DgnString::DgnString((DgnString *)(a1 + 26));
  DgnString::DgnString((DgnString *)(a1 + 98));
  DgnString::DgnString((DgnString *)(a1 + 114));
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_2098F3DF8(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  DgnString *v3;
  DgnString *v4;
  DgnString *v5;
  uint64_t v6;
  DgnString *v7;

  v7 = v5;
  DgnString::~DgnString(v7);
  DgnString::~DgnString(v4);
  DgnString::~DgnString(v3);
  *v2 = v6 + 16;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t SearchParamSet::SearchParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  uint64_t v11;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C214B20;
  DgnString::DgnString((DgnString *)(a1 + 104));
  DgnString::DgnString((DgnString *)(a1 + 392));
  DgnString::DgnString((DgnString *)(a1 + 456));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  DgnString::operator=((DgnString *)(a1 + 104), (DgnString *)(a2 + 104));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  v11 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v11;
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_DWORD *)(a1 + 380) = *(_DWORD *)(a2 + 380);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_BYTE *)(a1 + 385) = *(_BYTE *)(a2 + 385);
  DgnString::operator=((DgnString *)(a1 + 392), (DgnString *)(a2 + 392));
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 444);
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  *(_BYTE *)(a1 + 450) = *(_BYTE *)(a2 + 450);
  DgnString::operator=((DgnString *)(a1 + 456), (DgnString *)(a2 + 456));
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 476);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_WORD *)(a1 + 481) = *(_WORD *)(a2 + 481);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  return a1;
}

void sub_2098F4100(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DgnString *v2;
  DgnString *v3;
  DgnString *v4;
  uint64_t v5;

  DgnString::~DgnString(v4);
  DgnString::~DgnString(v3);
  *v1 = v5 + 16;
  DgnString::~DgnString(v2);
  _Unwind_Resume(a1);
}

uint64_t SearchParamSet::setDefaults(SearchParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *Default_string;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t result;

  *((_BYTE *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 3, 0, 0, v13, v14, v15, v16);
  *((_BYTE *)this + 52) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 4, 0, 0, v17, v18, v19, v20);
  *((_BYTE *)this + 53) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 14) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 6, 0, 0, v25, v26, v27, v28);
  *((_DWORD *)this + 15) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 17) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 9, 0, 0, v37, v38, v39, v40);
  *((_BYTE *)this + 72) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 10, 0, 0, v41, v42, v43, v44);
  *((_BYTE *)this + 73) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 11, 0, 0, v45, v46, v47, v48);
  *((_BYTE *)this + 74) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 12, 0, 0, v49, v50, v51, v52);
  *((_BYTE *)this + 75) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 13, 0, 0, v53, v54, v55, v56);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 14, 0, 0, v57, v58, v59, v60);
  *((_DWORD *)this + 20) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 15, 0, 0, v61, v62, v63, v64);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 16, 0, 0, v65, v66, v67, v68);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 17, 0, 0, v69, v70, v71, v72);
  *((_DWORD *)this + 24) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 18, 0, 0, v73, v74, v75, v76);
  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2870, 19, 0, 0, v77, v78, v79, v80);
  DgnString::operator=((SearchParamSet *)((char *)this + 104), Default_string);
  *((_DWORD *)this + 30) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 20, 0, 0, v82, v83, v84, v85);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 21, 0, 0, v86, v87, v88, v89);
  *((_DWORD *)this + 32) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 22, 0, 0, v90, v91, v92, v93);
  *((_DWORD *)this + 33) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 23, v94, v95, v96, v97, v98, v99);
  *((double *)this + 17) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 24, 0, 0, v100, v101, v102, v103);
  *((double *)this + 18) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 25, 0, 0, v104, v105, v106, v107);
  *((_DWORD *)this + 38) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 26, v108, v109, v110, v111, v112, v113);
  *((_DWORD *)this + 39) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 27, v114, v115, v116, v117, v118, v119);
  *((_DWORD *)this + 40) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 28, 0, 0, v120, v121, v122, v123);
  *((_DWORD *)this + 41) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 29, 0, 0, v124, v125, v126, v127);
  *((_DWORD *)this + 42) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 30, 0, 0, v128, v129, v130, v131);
  *((_DWORD *)this + 43) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 31, 0, 0, v132, v133, v134, v135);
  *((_DWORD *)this + 44) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 32, 0, 0, v136, v137, v138, v139);
  *((_DWORD *)this + 45) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 33, 0, 0, v140, v141, v142, v143);
  *((_DWORD *)this + 46) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 34, 0, 0, v144, v145, v146, v147);
  *((_DWORD *)this + 47) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 35, 0, 0, v148, v149, v150, v151);
  *((_DWORD *)this + 48) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 36, v152, v153, v154, v155, v156, v157);
  *((_BYTE *)this + 196) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 37, 0, 0, v158, v159, v160, v161);
  *((_DWORD *)this + 50) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 38, 0, 0, v162, v163, v164, v165);
  *((_BYTE *)this + 204) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 39, 0, 0, v166, v167, v168, v169);
  *((_DWORD *)this + 52) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 40, 0, 0, v170, v171, v172, v173);
  *((_DWORD *)this + 53) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 41, 0, 0, v174, v175, v176, v177);
  *((_DWORD *)this + 54) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 42, 0, 0, v178, v179, v180, v181);
  *((_DWORD *)this + 55) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 43, 0, 0, v182, v183, v184, v185);
  *((_BYTE *)this + 224) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 44, 0, 0, v186, v187, v188, v189);
  *((_DWORD *)this + 57) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 45, 0, 0, v190, v191, v192, v193);
  *((_DWORD *)this + 58) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 46, 0, 0, v194, v195, v196, v197);
  *((_DWORD *)this + 59) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 47, 0, 0, v198, v199, v200, v201);
  *((_DWORD *)this + 60) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 48, 0, 0, v202, v203, v204, v205);
  *((_DWORD *)this + 61) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 49, 0, 0, v206, v207, v208, v209);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 50, 0, 0, v210, v211, v212, v213);
  *((_DWORD *)this + 64) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 51, 0, 0, v214, v215, v216, v217);
  *((_BYTE *)this + 260) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 52, 0, 0, v218, v219, v220, v221);
  *((_DWORD *)this + 66) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 53, 0, 0, v222, v223, v224, v225);
  *((_DWORD *)this + 67) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 54, 0, 0, v226, v227, v228, v229);
  *((_DWORD *)this + 68) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 55, 0, 0, v230, v231, v232, v233);
  *((_DWORD *)this + 69) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 56, 0, 0, v234, v235, v236, v237);
  *((_DWORD *)this + 70) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 57, 0, 0, v238, v239, v240, v241);
  *((_DWORD *)this + 71) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 58, v242, v243, v244, v245, v246, v247);
  *((_DWORD *)this + 72) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 59, 0, 0, v248, v249, v250, v251);
  *((_DWORD *)this + 73) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 60, 0, 0, v252, v253, v254, v255);
  *((_DWORD *)this + 74) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 61, 0, 0, v256, v257, v258, v259);
  *((_DWORD *)this + 75) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 62, 0, 0, v260, v261, v262, v263);
  *((_DWORD *)this + 76) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 63, 0, 0, v264, v265, v266, v267);
  *((double *)this + 39) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 64, 0, 0, v268, v269, v270, v271);
  *((_BYTE *)this + 320) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 65, 0, 0, v272, v273, v274, v275);
  *((_DWORD *)this + 81) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 66, 0, 0, v276, v277, v278, v279);
  *((_BYTE *)this + 328) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 67, 0, 0, v280, v281, v282, v283);
  *((_DWORD *)this + 83) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 68, 0, 0, v284, v285, v286, v287);
  *((_BYTE *)this + 336) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 69, 0, 0, v288, v289, v290, v291);
  *((_BYTE *)this + 337) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 70, 0, 0, v292, v293, v294, v295);
  *((_DWORD *)this + 85) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 71, 0, 0, v296, v297, v298, v299);
  *((_DWORD *)this + 86) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 72, 0, 0, v300, v301, v302, v303);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 73, 0, 0, v304, v305, v306, v307);
  *((_DWORD *)this + 90) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 74, 0, 0, v308, v309, v310, v311);
  *((_DWORD *)this + 91) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 75, 0, 0, v312, v313, v314, v315);
  *((_BYTE *)this + 368) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 76, 0, 0, v316, v317, v318, v319);
  *((_BYTE *)this + 369) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 77, 0, 0, v320, v321, v322, v323);
  *((_DWORD *)this + 93) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 78, 0, 0, v324, v325, v326, v327);
  *((_BYTE *)this + 376) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 79, 0, 0, v328, v329, v330, v331);
  *((_DWORD *)this + 95) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 80, 0, 0, v332, v333, v334, v335);
  *((_BYTE *)this + 384) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 81, 0, 0, v336, v337, v338, v339);
  *((_BYTE *)this + 385) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 82, 0, 0, v340, v341, v342, v343);
  v348 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2870, 83, 0, 0, v344, v345, v346, v347);
  DgnString::operator=((SearchParamSet *)((char *)this + 392), v348);
  *((_DWORD *)this + 102) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 84, 0, 0, v349, v350, v351, v352);
  *((double *)this + 52) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 85, 0, 0, v353, v354, v355, v356);
  *((double *)this + 53) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 86, 0, 0, v357, v358, v359, v360);
  *((_DWORD *)this + 108) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 87, 0, 0, v361, v362, v363, v364);
  *((_DWORD *)this + 109) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 88, 0, 0, v365, v366, v367, v368);
  *((_DWORD *)this + 110) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 89, 0, 0, v369, v370, v371, v372);
  *((_BYTE *)this + 444) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 90, 0, 0, v373, v374, v375, v376);
  *((_BYTE *)this + 445) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 91, 0, 0, v377, v378, v379, v380);
  *((_BYTE *)this + 446) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 92, 0, 0, v381, v382, v383, v384);
  *((_BYTE *)this + 447) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 93, 0, 0, v385, v386, v387, v388);
  *((_BYTE *)this + 448) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 94, 0, 0, v389, v390, v391, v392);
  *((_BYTE *)this + 449) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 95, 0, 0, v393, v394, v395, v396);
  *((_BYTE *)this + 450) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 96, 0, 0, v397, v398, v399, v400);
  v405 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2870, 97, 0, 0, v401, v402, v403, v404);
  DgnString::operator=((SearchParamSet *)((char *)this + 456), v405);
  *((_BYTE *)this + 472) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 98, 0, 0, v406, v407, v408, v409);
  *((_DWORD *)this + 119) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 99, v410, v411, v412, v413, v414, v415);
  *((_BYTE *)this + 480) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 100, 0, 0, v416, v417, v418, v419);
  *((_BYTE *)this + 481) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 101, 0, 0, v420, v421, v422, v423);
  *((_BYTE *)this + 482) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2870, 102, 0, 0, v424, v425, v426, v427);
  *((double *)this + 61) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2870, 103, 0, 0, v428, v429, v430, v431);
  *((_DWORD *)this + 124) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 104, 0, 0, v432, v433, v434, v435);
  *((_DWORD *)this + 125) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 105, 0, 0, v436, v437, v438, v439);
  *((_DWORD *)this + 126) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2870, 106, v440, v441, v442, v443, v444, v445);
  *((_DWORD *)this + 127) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 107, 0, 0, v446, v447, v448, v449);
  *((_DWORD *)this + 128) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 108, 0, 0, v450, v451, v452, v453);
  *((_DWORD *)this + 129) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 109, 0, 0, v454, v455, v456, v457);
  *((_DWORD *)this + 130) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 110, 0, 0, v458, v459, v460, v461);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2870, 111, 0, 0, v462, v463, v464, v465);
  *((_DWORD *)this + 131) = result;
  return result;
}

uint64_t SearchParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v5 = sizeObject(a1 + 104);
    v6 = sizeObject(a1 + 392);
    v7 = sizeObject(a1 + 456);
    v8 = 11;
    if (a2 == 3)
      v8 = 0;
    v9 = 20;
    if (a2 == 3)
      v9 = 0;
    v4 += v9 + 40 * (a2 != 3) + v8 + 56 * (a2 != 3) + 248 * (a2 != 3) + v5 + v6 + v7;
  }
  return v4;
}

void SearchParamSet::setParamSetSearchConTransAccFactorList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchConTransAccFactorList", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((SearchParamSet *)((char *)this + 104), a2);
}

void SearchParamSet::setParamSetSearchHierScorerBeamList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchHierScorerBeamList", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((SearchParamSet *)((char *)this + 392), a2);
}

void SearchParamSet::setParamSetSearchHierScorerCutoffRatioList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchHierScorerCutoffRatioList", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((SearchParamSet *)((char *)this + 456), a2);
}

BOOL SearchParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  char v10;
  ParamSpecMgr *v12;
  int v13;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 1;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[40];
      return v8 != 0;
    case 2:
      v9 = "int";
      v10 = 2;
      goto LABEL_173;
    case 3:
      v9 = "int";
      v10 = 3;
      goto LABEL_173;
    case 4:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 4;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[52];
      return v8 != 0;
    case 5:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 5;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[53];
      return v8 != 0;
    case 6:
      v9 = "int";
      v10 = 6;
      goto LABEL_173;
    case 7:
      v9 = "int";
      v10 = 7;
      goto LABEL_173;
    case 8:
      v9 = "int";
      v10 = 8;
      goto LABEL_173;
    case 9:
      v9 = "int";
      v10 = 9;
      goto LABEL_173;
    case 10:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 10;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[72];
      return v8 != 0;
    case 11:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 11;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[73];
      return v8 != 0;
    case 12:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 12;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[74];
      return v8 != 0;
    case 13:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 13;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[75];
      return v8 != 0;
    case 14:
      v9 = "int";
      v10 = 14;
      goto LABEL_173;
    case 15:
      v9 = "int";
      v10 = 15;
      goto LABEL_173;
    case 16:
      v9 = "int";
      v10 = 16;
      goto LABEL_173;
    case 17:
      v9 = "double";
      v10 = 17;
      goto LABEL_173;
    case 18:
      v9 = "int";
      v10 = 18;
      goto LABEL_173;
    case 19:
      v9 = "string";
      v10 = 19;
      goto LABEL_173;
    case 20:
      v9 = "int";
      v10 = 20;
      goto LABEL_173;
    case 21:
      v9 = "int";
      v10 = 21;
      goto LABEL_173;
    case 22:
      v9 = "int";
      v10 = 22;
      goto LABEL_173;
    case 23:
      v9 = "enum";
      v10 = 23;
      goto LABEL_173;
    case 24:
      v9 = "double";
      v10 = 24;
      goto LABEL_173;
    case 25:
      v9 = "double";
      v10 = 25;
      goto LABEL_173;
    case 26:
      v9 = "enum";
      v10 = 26;
      goto LABEL_173;
    case 27:
      v9 = "enum";
      v10 = 27;
      goto LABEL_173;
    case 28:
      v9 = "int";
      v10 = 28;
      goto LABEL_173;
    case 29:
      v9 = "int";
      v10 = 29;
      goto LABEL_173;
    case 30:
      v9 = "int";
      v10 = 30;
      goto LABEL_173;
    case 31:
      v9 = "int";
      v10 = 31;
      goto LABEL_173;
    case 32:
      v9 = "int";
      v10 = 32;
      goto LABEL_173;
    case 33:
      v9 = "int";
      v10 = 33;
      goto LABEL_173;
    case 34:
      v9 = "int";
      v10 = 34;
      goto LABEL_173;
    case 35:
      v9 = "int";
      v10 = 35;
      goto LABEL_173;
    case 36:
      v9 = "enum";
      v10 = 36;
      goto LABEL_173;
    case 37:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 37;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[196];
      return v8 != 0;
    case 38:
      v9 = "int";
      v10 = 38;
      goto LABEL_173;
    case 39:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 39;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[204];
      return v8 != 0;
    case 40:
      v9 = "int";
      v10 = 40;
      goto LABEL_173;
    case 41:
      v9 = "int";
      v10 = 41;
      goto LABEL_173;
    case 42:
      v9 = "int";
      v10 = 42;
      goto LABEL_173;
    case 43:
      v9 = "int";
      v10 = 43;
      goto LABEL_173;
    case 44:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 44;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[224];
      return v8 != 0;
    case 45:
      v9 = "int";
      v10 = 45;
      goto LABEL_173;
    case 46:
      v9 = "int";
      v10 = 46;
      goto LABEL_173;
    case 47:
      v9 = "int";
      v10 = 47;
      goto LABEL_173;
    case 48:
      v9 = "int";
      v10 = 48;
      goto LABEL_173;
    case 49:
      v9 = "int";
      v10 = 49;
      goto LABEL_173;
    case 50:
      v9 = "double";
      v10 = 50;
      goto LABEL_173;
    case 51:
      v9 = "int";
      v10 = 51;
      goto LABEL_173;
    case 52:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 52;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[260];
      return v8 != 0;
    case 53:
      v9 = "int";
      v10 = 53;
      goto LABEL_173;
    case 54:
      v9 = "int";
      v10 = 54;
      goto LABEL_173;
    case 55:
      v9 = "int";
      v10 = 55;
      goto LABEL_173;
    case 56:
      v9 = "int";
      v10 = 56;
      goto LABEL_173;
    case 57:
      v9 = "int";
      v10 = 57;
      goto LABEL_173;
    case 58:
      v9 = "enum";
      v10 = 58;
      goto LABEL_173;
    case 59:
      v9 = "int";
      v10 = 59;
      goto LABEL_173;
    case 60:
      v9 = "int";
      v10 = 60;
      goto LABEL_173;
    case 61:
      v9 = "int";
      v10 = 61;
      goto LABEL_173;
    case 62:
      v9 = "int";
      v10 = 62;
      goto LABEL_173;
    case 63:
      v9 = "int";
      v10 = 63;
      goto LABEL_173;
    case 64:
      v9 = "double";
      v10 = 64;
      goto LABEL_173;
    case 65:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 65;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[320];
      return v8 != 0;
    case 66:
      v9 = "int";
      v10 = 66;
      goto LABEL_173;
    case 67:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 67;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[328];
      return v8 != 0;
    case 68:
      v9 = "int";
      v10 = 68;
      goto LABEL_173;
    case 69:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 69;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[336];
      return v8 != 0;
    case 70:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 70;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[337];
      return v8 != 0;
    case 71:
      v9 = "int";
      v10 = 71;
      goto LABEL_173;
    case 72:
      v9 = "int";
      v10 = 72;
      goto LABEL_173;
    case 73:
      v9 = "double";
      v10 = 73;
      goto LABEL_173;
    case 74:
      v9 = "int";
      v10 = 74;
      goto LABEL_173;
    case 75:
      v9 = "int";
      v10 = 75;
      goto LABEL_173;
    case 76:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 76;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[368];
      return v8 != 0;
    case 77:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 77;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[369];
      return v8 != 0;
    case 78:
      v9 = "int";
      v10 = 78;
      goto LABEL_173;
    case 79:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 79;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[376];
      return v8 != 0;
    case 80:
      v9 = "int";
      v10 = 80;
      goto LABEL_173;
    case 81:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 81;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[384];
      return v8 != 0;
    case 82:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 82;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[385];
      return v8 != 0;
    case 83:
      v9 = "string";
      v10 = 83;
      goto LABEL_173;
    case 84:
      v9 = "int";
      v10 = 84;
      goto LABEL_173;
    case 85:
      v9 = "double";
      v10 = 85;
      goto LABEL_173;
    case 86:
      v9 = "double";
      v10 = 86;
      goto LABEL_173;
    case 87:
      v9 = "int";
      v10 = 87;
      goto LABEL_173;
    case 88:
      v9 = "int";
      v10 = 88;
      goto LABEL_173;
    case 89:
      v9 = "int";
      v10 = 89;
      goto LABEL_173;
    case 90:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 90;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[444];
      return v8 != 0;
    case 91:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 91;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[445];
      return v8 != 0;
    case 92:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 92;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[446];
      return v8 != 0;
    case 93:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 93;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[447];
      return v8 != 0;
    case 94:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 94;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[448];
      return v8 != 0;
    case 95:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 95;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[449];
      return v8 != 0;
    case 96:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 96;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[450];
      return v8 != 0;
    case 97:
      v9 = "string";
      v10 = 97;
      goto LABEL_173;
    case 98:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 98;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[472];
      return v8 != 0;
    case 99:
      v9 = "enum";
      v10 = 99;
      goto LABEL_173;
    case 100:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 100;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[480];
      return v8 != 0;
    case 101:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 101;
        goto LABEL_211;
      }
      if ((_DWORD)a3)
        goto LABEL_179;
      v8 = a1[481];
      return v8 != 0;
    case 102:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2870;
        v13 = 102;
LABEL_211:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!(_DWORD)a3)
      {
        v8 = a1[482];
        return v8 != 0;
      }
LABEL_179:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 103:
      v9 = "double";
      v10 = 103;
      goto LABEL_173;
    case 104:
      v9 = "int";
      v10 = 104;
      goto LABEL_173;
    case 105:
      v9 = "int";
      v10 = 105;
      goto LABEL_173;
    case 106:
      v9 = "enum";
      v10 = 106;
      goto LABEL_173;
    case 107:
      v9 = "int";
      v10 = 107;
      goto LABEL_173;
    case 108:
      v9 = "int";
      v10 = 108;
      goto LABEL_173;
    case 109:
      v9 = "int";
      v10 = 109;
      goto LABEL_173;
    case 110:
      v9 = "int";
      v10 = 110;
      goto LABEL_173;
    case 111:
      v9 = "int";
      v10 = 111;
LABEL_173:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t SearchParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *v17;
  const void *v18;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_171;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 2;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 2;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 2;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = a1[12];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 3;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 3;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 3;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 4:
      v8 = "BOOL";
      v9 = 4;
      goto LABEL_171;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_171;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[14];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 6;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 6;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 6;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[15];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 7;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 7;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 7;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 8:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 8;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 8;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 8;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          result = a1[17];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 9;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 9;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 9;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_171;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_171;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_171;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_171;
    case 14:
      switch((int)a3)
      {
        case 0:
          result = a1[19];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 14;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 14;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 14;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[20];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 15;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 15;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 15;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          result = a1[21];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 16;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 16;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 16;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_171;
    case 18:
      switch((int)a3)
      {
        case 0:
          result = a1[24];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 18;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 18;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 18;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 19:
      v8 = "string";
      v9 = 19;
      goto LABEL_171;
    case 20:
      switch((int)a3)
      {
        case 0:
          result = a1[30];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 20;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 20;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 20;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 21:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 21;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 21;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 21;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          result = a1[32];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 22;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 22;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 22;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 23:
      v8 = "enum";
      v9 = 23;
      goto LABEL_171;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_171;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_171;
    case 26:
      v8 = "enum";
      v9 = 26;
      goto LABEL_171;
    case 27:
      v8 = "enum";
      v9 = 27;
      goto LABEL_171;
    case 28:
      switch((int)a3)
      {
        case 0:
          result = a1[40];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 28;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 28;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 28;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          result = a1[41];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 29;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 29;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 29;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          result = a1[42];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 30;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 30;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 30;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          result = a1[43];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 31;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 31;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 31;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          result = a1[44];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 32;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 32;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 32;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 33:
      switch((int)a3)
      {
        case 0:
          result = a1[45];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 33;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 33;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 33;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 34:
      switch((int)a3)
      {
        case 0:
          result = a1[46];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 34;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 34;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 34;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 35:
      switch((int)a3)
      {
        case 0:
          result = a1[47];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 35;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 35;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 35;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 36:
      v8 = "enum";
      v9 = 36;
      goto LABEL_171;
    case 37:
      v8 = "BOOL";
      v9 = 37;
      goto LABEL_171;
    case 38:
      switch((int)a3)
      {
        case 0:
          result = a1[50];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 38;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 38;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 38;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 39:
      v8 = "BOOL";
      v9 = 39;
      goto LABEL_171;
    case 40:
      switch((int)a3)
      {
        case 0:
          result = a1[52];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 40;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 40;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 40;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          result = a1[53];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 41;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 41;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 41;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 42:
      switch((int)a3)
      {
        case 0:
          result = a1[54];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 42;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 42;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 42;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          result = a1[55];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 43;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 43;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 43;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 44:
      v8 = "BOOL";
      v9 = 44;
      goto LABEL_171;
    case 45:
      switch((int)a3)
      {
        case 0:
          result = a1[57];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 45;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 45;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 45;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          result = a1[58];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 46;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 46;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 46;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          result = a1[59];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 47;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 47;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 47;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          result = a1[60];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 48;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 48;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 48;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 49:
      switch((int)a3)
      {
        case 0:
          result = a1[61];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 49;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 49;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 49;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_171;
    case 51:
      switch((int)a3)
      {
        case 0:
          result = a1[64];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 51;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 51;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 51;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_171;
    case 53:
      switch((int)a3)
      {
        case 0:
          result = a1[66];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 53;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 53;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 53;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          result = a1[67];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 54;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 54;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 54;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          result = a1[68];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 55;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 55;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 55;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          result = a1[69];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 56;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 56;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 56;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          result = a1[70];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 57;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 57;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 57;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 58:
      v8 = "enum";
      v9 = 58;
      goto LABEL_171;
    case 59:
      switch((int)a3)
      {
        case 0:
          result = a1[72];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 59;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 59;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 59;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 60:
      switch((int)a3)
      {
        case 0:
          result = a1[73];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 60;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 60;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 60;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          result = a1[74];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 61;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 61;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 61;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          result = a1[75];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 62;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 62;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 62;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 63:
      switch((int)a3)
      {
        case 0:
          result = a1[76];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 63;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 63;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 63;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_171;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_171;
    case 66:
      switch((int)a3)
      {
        case 0:
          result = a1[81];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 66;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 66;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 66;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 67:
      v8 = "BOOL";
      v9 = 67;
      goto LABEL_171;
    case 68:
      switch((int)a3)
      {
        case 0:
          result = a1[83];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 68;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 68;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 68;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 69:
      v8 = "BOOL";
      v9 = 69;
      goto LABEL_171;
    case 70:
      v8 = "BOOL";
      v9 = 70;
      goto LABEL_171;
    case 71:
      switch((int)a3)
      {
        case 0:
          result = a1[85];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 71;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 71;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 71;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 72:
      switch((int)a3)
      {
        case 0:
          result = a1[86];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 72;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 72;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 72;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 73:
      v8 = "double";
      v9 = 73;
      goto LABEL_171;
    case 74:
      switch((int)a3)
      {
        case 0:
          result = a1[90];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 74;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 74;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 74;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 75:
      switch((int)a3)
      {
        case 0:
          result = a1[91];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 75;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 75;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 75;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 76:
      v8 = "BOOL";
      v9 = 76;
      goto LABEL_171;
    case 77:
      v8 = "BOOL";
      v9 = 77;
      goto LABEL_171;
    case 78:
      switch((int)a3)
      {
        case 0:
          result = a1[93];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 78;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 78;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 78;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 79:
      v8 = "BOOL";
      v9 = 79;
      goto LABEL_171;
    case 80:
      switch((int)a3)
      {
        case 0:
          result = a1[95];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 80;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 80;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 80;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 81:
      v8 = "BOOL";
      v9 = 81;
      goto LABEL_171;
    case 82:
      v8 = "BOOL";
      v9 = 82;
      goto LABEL_171;
    case 83:
      v8 = "string";
      v9 = 83;
      goto LABEL_171;
    case 84:
      switch((int)a3)
      {
        case 0:
          result = a1[102];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 84;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 84;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 84;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 85:
      v8 = "double";
      v9 = 85;
      goto LABEL_171;
    case 86:
      v8 = "double";
      v9 = 86;
      goto LABEL_171;
    case 87:
      switch((int)a3)
      {
        case 0:
          result = a1[108];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 87;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 87;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 87;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 88:
      switch((int)a3)
      {
        case 0:
          result = a1[109];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 88;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 88;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 88;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 89:
      switch((int)a3)
      {
        case 0:
          result = a1[110];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 89;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 89;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 89;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 90:
      v8 = "BOOL";
      v9 = 90;
      goto LABEL_171;
    case 91:
      v8 = "BOOL";
      v9 = 91;
      goto LABEL_171;
    case 92:
      v8 = "BOOL";
      v9 = 92;
      goto LABEL_171;
    case 93:
      v8 = "BOOL";
      v9 = 93;
      goto LABEL_171;
    case 94:
      v8 = "BOOL";
      v9 = 94;
      goto LABEL_171;
    case 95:
      v8 = "BOOL";
      v9 = 95;
      goto LABEL_171;
    case 96:
      v8 = "BOOL";
      v9 = 96;
      goto LABEL_171;
    case 97:
      v8 = "string";
      v9 = 97;
      goto LABEL_171;
    case 98:
      v8 = "BOOL";
      v9 = 98;
      goto LABEL_171;
    case 99:
      v8 = "enum";
      v9 = 99;
      goto LABEL_171;
    case 100:
      v8 = "BOOL";
      v9 = 100;
      goto LABEL_171;
    case 101:
      v8 = "BOOL";
      v9 = 101;
      goto LABEL_171;
    case 102:
      v8 = "BOOL";
      v9 = 102;
      goto LABEL_171;
    case 103:
      v8 = "double";
      v9 = 103;
      goto LABEL_171;
    case 104:
      switch((int)a3)
      {
        case 0:
          result = a1[124];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 104;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 104;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 104;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 105:
      switch((int)a3)
      {
        case 0:
          result = a1[125];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 105;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 105;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 105;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 106:
      v8 = "enum";
      v9 = 106;
LABEL_171:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      return 0;
    case 107:
      switch((int)a3)
      {
        case 0:
          result = a1[127];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 107;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 107;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 107;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 108:
      switch((int)a3)
      {
        case 0:
          result = a1[128];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 108;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 108;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 108;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 109:
      switch((int)a3)
      {
        case 0:
          result = a1[129];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 109;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 109;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 109;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 110:
      switch((int)a3)
      {
        case 0:
          result = a1[130];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 110;
          goto LABEL_364;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 110;
          goto LABEL_360;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 110;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 111:
      switch((int)a3)
      {
        case 0:
          result = a1[131];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 111;
LABEL_364:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 111;
LABEL_360:
          v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 111;
LABEL_362:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_178:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double SearchParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_124;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_124;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_124;
    case 4:
      v8 = "BOOL";
      v9 = 4;
      goto LABEL_124;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_124;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_124;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_124;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_124;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_124;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_124;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_124;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_124;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_124;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_124;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_124;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_124;
    case 17:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 17;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 17;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 17;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 18:
      v8 = "int";
      v9 = 18;
      goto LABEL_124;
    case 19:
      v8 = "string";
      v9 = 19;
      goto LABEL_124;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_124;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_124;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_124;
    case 23:
      v8 = "enum";
      v9 = 23;
      goto LABEL_124;
    case 24:
      switch((int)a3)
      {
        case 0:
          result = a1[17];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 24;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 24;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 24;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 25:
      switch((int)a3)
      {
        case 0:
          result = a1[18];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 25;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 25;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 25;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 26:
      v8 = "enum";
      v9 = 26;
      goto LABEL_124;
    case 27:
      v8 = "enum";
      v9 = 27;
      goto LABEL_124;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_124;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_124;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_124;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_124;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_124;
    case 33:
      v8 = "int";
      v9 = 33;
      goto LABEL_124;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_124;
    case 35:
      v8 = "int";
      v9 = 35;
      goto LABEL_124;
    case 36:
      v8 = "enum";
      v9 = 36;
      goto LABEL_124;
    case 37:
      v8 = "BOOL";
      v9 = 37;
      goto LABEL_124;
    case 38:
      v8 = "int";
      v9 = 38;
      goto LABEL_124;
    case 39:
      v8 = "BOOL";
      v9 = 39;
      goto LABEL_124;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_124;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_124;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_124;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_124;
    case 44:
      v8 = "BOOL";
      v9 = 44;
      goto LABEL_124;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_124;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_124;
    case 47:
      v8 = "int";
      v9 = 47;
      goto LABEL_124;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_124;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_124;
    case 50:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 50;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 50;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 50;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_124;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_124;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_124;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_124;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_124;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_124;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_124;
    case 58:
      v8 = "enum";
      v9 = 58;
      goto LABEL_124;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_124;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_124;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_124;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_124;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_124;
    case 64:
      switch((int)a3)
      {
        case 0:
          result = a1[39];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 64;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 64;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 64;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_124;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_124;
    case 67:
      v8 = "BOOL";
      v9 = 67;
      goto LABEL_124;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_124;
    case 69:
      v8 = "BOOL";
      v9 = 69;
      goto LABEL_124;
    case 70:
      v8 = "BOOL";
      v9 = 70;
      goto LABEL_124;
    case 71:
      v8 = "int";
      v9 = 71;
      goto LABEL_124;
    case 72:
      v8 = "int";
      v9 = 72;
      goto LABEL_124;
    case 73:
      switch((int)a3)
      {
        case 0:
          result = a1[44];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 73;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 73;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 73;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 74:
      v8 = "int";
      v9 = 74;
      goto LABEL_124;
    case 75:
      v8 = "int";
      v9 = 75;
      goto LABEL_124;
    case 76:
      v8 = "BOOL";
      v9 = 76;
      goto LABEL_124;
    case 77:
      v8 = "BOOL";
      v9 = 77;
      goto LABEL_124;
    case 78:
      v8 = "int";
      v9 = 78;
      goto LABEL_124;
    case 79:
      v8 = "BOOL";
      v9 = 79;
      goto LABEL_124;
    case 80:
      v8 = "int";
      v9 = 80;
      goto LABEL_124;
    case 81:
      v8 = "BOOL";
      v9 = 81;
      goto LABEL_124;
    case 82:
      v8 = "BOOL";
      v9 = 82;
      goto LABEL_124;
    case 83:
      v8 = "string";
      v9 = 83;
      goto LABEL_124;
    case 84:
      v8 = "int";
      v9 = 84;
      goto LABEL_124;
    case 85:
      switch((int)a3)
      {
        case 0:
          result = a1[52];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 85;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 85;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 85;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 86:
      switch((int)a3)
      {
        case 0:
          result = a1[53];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 86;
          goto LABEL_152;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 86;
          goto LABEL_154;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 86;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 87:
      v8 = "int";
      v9 = 87;
      goto LABEL_124;
    case 88:
      v8 = "int";
      v9 = 88;
      goto LABEL_124;
    case 89:
      v8 = "int";
      v9 = 89;
      goto LABEL_124;
    case 90:
      v8 = "BOOL";
      v9 = 90;
      goto LABEL_124;
    case 91:
      v8 = "BOOL";
      v9 = 91;
      goto LABEL_124;
    case 92:
      v8 = "BOOL";
      v9 = 92;
      goto LABEL_124;
    case 93:
      v8 = "BOOL";
      v9 = 93;
      goto LABEL_124;
    case 94:
      v8 = "BOOL";
      v9 = 94;
      goto LABEL_124;
    case 95:
      v8 = "BOOL";
      v9 = 95;
      goto LABEL_124;
    case 96:
      v8 = "BOOL";
      v9 = 96;
      goto LABEL_124;
    case 97:
      v8 = "string";
      v9 = 97;
      goto LABEL_124;
    case 98:
      v8 = "BOOL";
      v9 = 98;
      goto LABEL_124;
    case 99:
      v8 = "enum";
      v9 = 99;
      goto LABEL_124;
    case 100:
      v8 = "BOOL";
      v9 = 100;
      goto LABEL_124;
    case 101:
      v8 = "BOOL";
      v9 = 101;
      goto LABEL_124;
    case 102:
      v8 = "BOOL";
      v9 = 102;
      goto LABEL_124;
    case 103:
      switch((int)a3)
      {
        case 0:
          result = a1[61];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 103;
LABEL_152:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 103;
LABEL_154:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 103;
LABEL_156:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_110:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 104:
      v8 = "int";
      v9 = 104;
      goto LABEL_124;
    case 105:
      v8 = "int";
      v9 = 105;
      goto LABEL_124;
    case 106:
      v8 = "enum";
      v9 = 106;
      goto LABEL_124;
    case 107:
      v8 = "int";
      v9 = 107;
      goto LABEL_124;
    case 108:
      v8 = "int";
      v9 = 108;
      goto LABEL_124;
    case 109:
      v8 = "int";
      v9 = 109;
      goto LABEL_124;
    case 110:
      v8 = "int";
      v9 = 110;
      goto LABEL_124;
    case 111:
      v8 = "int";
      v9 = 111;
LABEL_124:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

char *SearchParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  int v10;
  uint64_t v11;
  ParamSpecMgr *v13;
  int v14;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_124;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_124;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_124;
    case 4:
      v8 = "BOOL";
      v9 = 4;
      goto LABEL_124;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_124;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_124;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_124;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_124;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_124;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_124;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_124;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_124;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_124;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_124;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_124;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_124;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_124;
    case 18:
      v8 = "int";
      v9 = 18;
      goto LABEL_124;
    case 19:
      if ((_DWORD)a3 == 1)
      {
        v13 = (ParamSpecMgr *)qword_253DF2870;
        v14 = 19;
        goto LABEL_130;
      }
      if ((_DWORD)a3)
        goto LABEL_79;
      v10 = *(_DWORD *)(a1 + 112);
      v11 = *(_QWORD *)(a1 + 104);
      goto LABEL_76;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_124;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_124;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_124;
    case 23:
      v8 = "enum";
      v9 = 23;
      goto LABEL_124;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_124;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_124;
    case 26:
      v8 = "enum";
      v9 = 26;
      goto LABEL_124;
    case 27:
      v8 = "enum";
      v9 = 27;
      goto LABEL_124;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_124;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_124;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_124;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_124;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_124;
    case 33:
      v8 = "int";
      v9 = 33;
      goto LABEL_124;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_124;
    case 35:
      v8 = "int";
      v9 = 35;
      goto LABEL_124;
    case 36:
      v8 = "enum";
      v9 = 36;
      goto LABEL_124;
    case 37:
      v8 = "BOOL";
      v9 = 37;
      goto LABEL_124;
    case 38:
      v8 = "int";
      v9 = 38;
      goto LABEL_124;
    case 39:
      v8 = "BOOL";
      v9 = 39;
      goto LABEL_124;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_124;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_124;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_124;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_124;
    case 44:
      v8 = "BOOL";
      v9 = 44;
      goto LABEL_124;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_124;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_124;
    case 47:
      v8 = "int";
      v9 = 47;
      goto LABEL_124;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_124;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_124;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_124;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_124;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_124;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_124;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_124;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_124;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_124;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_124;
    case 58:
      v8 = "enum";
      v9 = 58;
      goto LABEL_124;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_124;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_124;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_124;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_124;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_124;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_124;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_124;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_124;
    case 67:
      v8 = "BOOL";
      v9 = 67;
      goto LABEL_124;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_124;
    case 69:
      v8 = "BOOL";
      v9 = 69;
      goto LABEL_124;
    case 70:
      v8 = "BOOL";
      v9 = 70;
      goto LABEL_124;
    case 71:
      v8 = "int";
      v9 = 71;
      goto LABEL_124;
    case 72:
      v8 = "int";
      v9 = 72;
      goto LABEL_124;
    case 73:
      v8 = "double";
      v9 = 73;
      goto LABEL_124;
    case 74:
      v8 = "int";
      v9 = 74;
      goto LABEL_124;
    case 75:
      v8 = "int";
      v9 = 75;
      goto LABEL_124;
    case 76:
      v8 = "BOOL";
      v9 = 76;
      goto LABEL_124;
    case 77:
      v8 = "BOOL";
      v9 = 77;
      goto LABEL_124;
    case 78:
      v8 = "int";
      v9 = 78;
      goto LABEL_124;
    case 79:
      v8 = "BOOL";
      v9 = 79;
      goto LABEL_124;
    case 80:
      v8 = "int";
      v9 = 80;
      goto LABEL_124;
    case 81:
      v8 = "BOOL";
      v9 = 81;
      goto LABEL_124;
    case 82:
      v8 = "BOOL";
      v9 = 82;
      goto LABEL_124;
    case 83:
      if ((_DWORD)a3 == 1)
      {
        v13 = (ParamSpecMgr *)qword_253DF2870;
        v14 = 83;
        goto LABEL_130;
      }
      if ((_DWORD)a3)
        goto LABEL_79;
      v10 = *(_DWORD *)(a1 + 400);
      v11 = *(_QWORD *)(a1 + 392);
      goto LABEL_76;
    case 84:
      v8 = "int";
      v9 = 84;
      goto LABEL_124;
    case 85:
      v8 = "double";
      v9 = 85;
      goto LABEL_124;
    case 86:
      v8 = "double";
      v9 = 86;
      goto LABEL_124;
    case 87:
      v8 = "int";
      v9 = 87;
      goto LABEL_124;
    case 88:
      v8 = "int";
      v9 = 88;
      goto LABEL_124;
    case 89:
      v8 = "int";
      v9 = 89;
      goto LABEL_124;
    case 90:
      v8 = "BOOL";
      v9 = 90;
      goto LABEL_124;
    case 91:
      v8 = "BOOL";
      v9 = 91;
      goto LABEL_124;
    case 92:
      v8 = "BOOL";
      v9 = 92;
      goto LABEL_124;
    case 93:
      v8 = "BOOL";
      v9 = 93;
      goto LABEL_124;
    case 94:
      v8 = "BOOL";
      v9 = 94;
      goto LABEL_124;
    case 95:
      v8 = "BOOL";
      v9 = 95;
      goto LABEL_124;
    case 96:
      v8 = "BOOL";
      v9 = 96;
      goto LABEL_124;
    case 97:
      if ((_DWORD)a3 == 1)
      {
        v13 = (ParamSpecMgr *)qword_253DF2870;
        v14 = 97;
LABEL_130:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
      }
      else if ((_DWORD)a3)
      {
LABEL_79:
        throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
        return 0;
      }
      else
      {
        v10 = *(_DWORD *)(a1 + 464);
        v11 = *(_QWORD *)(a1 + 456);
LABEL_76:
        if (v10)
          return (char *)v11;
        else
          return &byte_209A88803;
      }
    case 98:
      v8 = "BOOL";
      v9 = 98;
      goto LABEL_124;
    case 99:
      v8 = "enum";
      v9 = 99;
      goto LABEL_124;
    case 100:
      v8 = "BOOL";
      v9 = 100;
      goto LABEL_124;
    case 101:
      v8 = "BOOL";
      v9 = 101;
      goto LABEL_124;
    case 102:
      v8 = "BOOL";
      v9 = 102;
      goto LABEL_124;
    case 103:
      v8 = "double";
      v9 = 103;
      goto LABEL_124;
    case 104:
      v8 = "int";
      v9 = 104;
      goto LABEL_124;
    case 105:
      v8 = "int";
      v9 = 105;
      goto LABEL_124;
    case 106:
      v8 = "enum";
      v9 = 106;
      goto LABEL_124;
    case 107:
      v8 = "int";
      v9 = 107;
      goto LABEL_124;
    case 108:
      v8 = "int";
      v9 = 108;
      goto LABEL_124;
    case 109:
      v8 = "int";
      v9 = 109;
      goto LABEL_124;
    case 110:
      v8 = "int";
      v9 = 110;
      goto LABEL_124;
    case 111:
      v8 = "int";
      v9 = 111;
LABEL_124:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t SearchParamSet::getEnumParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  void *ParamByParamId;
  void *v18;
  void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_120;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_120;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_120;
    case 4:
      v8 = "BOOL";
      v9 = 4;
      goto LABEL_120;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_120;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_120;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_120;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_120;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_120;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_120;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_120;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_120;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_120;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_120;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_120;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_120;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_120;
    case 18:
      v8 = "int";
      v9 = 18;
      goto LABEL_120;
    case 19:
      v8 = "string";
      v9 = 19;
      goto LABEL_120;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_120;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_120;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_120;
    case 23:
      switch((int)a3)
      {
        case 0:
          result = a1[33];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 23;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 23;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 23;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_120;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_120;
    case 26:
      switch((int)a3)
      {
        case 0:
          result = a1[38];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 26;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 26;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 26;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 27:
      switch((int)a3)
      {
        case 0:
          result = a1[39];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 27;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 27;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 27;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_120;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_120;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_120;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_120;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_120;
    case 33:
      v8 = "int";
      v9 = 33;
      goto LABEL_120;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_120;
    case 35:
      v8 = "int";
      v9 = 35;
      goto LABEL_120;
    case 36:
      switch((int)a3)
      {
        case 0:
          result = a1[48];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 36;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 36;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 36;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 37:
      v8 = "BOOL";
      v9 = 37;
      goto LABEL_120;
    case 38:
      v8 = "int";
      v9 = 38;
      goto LABEL_120;
    case 39:
      v8 = "BOOL";
      v9 = 39;
      goto LABEL_120;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_120;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_120;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_120;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_120;
    case 44:
      v8 = "BOOL";
      v9 = 44;
      goto LABEL_120;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_120;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_120;
    case 47:
      v8 = "int";
      v9 = 47;
      goto LABEL_120;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_120;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_120;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_120;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_120;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_120;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_120;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_120;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_120;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_120;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_120;
    case 58:
      switch((int)a3)
      {
        case 0:
          result = a1[71];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 58;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 58;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 58;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_120;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_120;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_120;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_120;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_120;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_120;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_120;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_120;
    case 67:
      v8 = "BOOL";
      v9 = 67;
      goto LABEL_120;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_120;
    case 69:
      v8 = "BOOL";
      v9 = 69;
      goto LABEL_120;
    case 70:
      v8 = "BOOL";
      v9 = 70;
      goto LABEL_120;
    case 71:
      v8 = "int";
      v9 = 71;
      goto LABEL_120;
    case 72:
      v8 = "int";
      v9 = 72;
      goto LABEL_120;
    case 73:
      v8 = "double";
      v9 = 73;
      goto LABEL_120;
    case 74:
      v8 = "int";
      v9 = 74;
      goto LABEL_120;
    case 75:
      v8 = "int";
      v9 = 75;
      goto LABEL_120;
    case 76:
      v8 = "BOOL";
      v9 = 76;
      goto LABEL_120;
    case 77:
      v8 = "BOOL";
      v9 = 77;
      goto LABEL_120;
    case 78:
      v8 = "int";
      v9 = 78;
      goto LABEL_120;
    case 79:
      v8 = "BOOL";
      v9 = 79;
      goto LABEL_120;
    case 80:
      v8 = "int";
      v9 = 80;
      goto LABEL_120;
    case 81:
      v8 = "BOOL";
      v9 = 81;
      goto LABEL_120;
    case 82:
      v8 = "BOOL";
      v9 = 82;
      goto LABEL_120;
    case 83:
      v8 = "string";
      v9 = 83;
      goto LABEL_120;
    case 84:
      v8 = "int";
      v9 = 84;
      goto LABEL_120;
    case 85:
      v8 = "double";
      v9 = 85;
      goto LABEL_120;
    case 86:
      v8 = "double";
      v9 = 86;
      goto LABEL_120;
    case 87:
      v8 = "int";
      v9 = 87;
      goto LABEL_120;
    case 88:
      v8 = "int";
      v9 = 88;
      goto LABEL_120;
    case 89:
      v8 = "int";
      v9 = 89;
      goto LABEL_120;
    case 90:
      v8 = "BOOL";
      v9 = 90;
      goto LABEL_120;
    case 91:
      v8 = "BOOL";
      v9 = 91;
      goto LABEL_120;
    case 92:
      v8 = "BOOL";
      v9 = 92;
      goto LABEL_120;
    case 93:
      v8 = "BOOL";
      v9 = 93;
      goto LABEL_120;
    case 94:
      v8 = "BOOL";
      v9 = 94;
      goto LABEL_120;
    case 95:
      v8 = "BOOL";
      v9 = 95;
      goto LABEL_120;
    case 96:
      v8 = "BOOL";
      v9 = 96;
      goto LABEL_120;
    case 97:
      v8 = "string";
      v9 = 97;
      goto LABEL_120;
    case 98:
      v8 = "BOOL";
      v9 = 98;
      goto LABEL_120;
    case 99:
      switch((int)a3)
      {
        case 0:
          result = a1[119];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 99;
          goto LABEL_144;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 99;
          goto LABEL_148;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 99;
          goto LABEL_152;
        default:
          goto LABEL_100;
      }
      return result;
    case 100:
      v8 = "BOOL";
      v9 = 100;
      goto LABEL_120;
    case 101:
      v8 = "BOOL";
      v9 = 101;
      goto LABEL_120;
    case 102:
      v8 = "BOOL";
      v9 = 102;
      goto LABEL_120;
    case 103:
      v8 = "double";
      v9 = 103;
      goto LABEL_120;
    case 104:
      v8 = "int";
      v9 = 104;
      goto LABEL_120;
    case 105:
      v8 = "int";
      v9 = 105;
      goto LABEL_120;
    case 106:
      switch((int)a3)
      {
        case 0:
          result = a1[126];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2870;
          v12 = 106;
LABEL_144:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2870;
          v14 = 106;
LABEL_148:
          v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2870;
          v16 = 106;
LABEL_152:
          v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          break;
        default:
LABEL_100:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 107:
      v8 = "int";
      v9 = 107;
      goto LABEL_120;
    case 108:
      v8 = "int";
      v9 = 108;
      goto LABEL_120;
    case 109:
      v8 = "int";
      v9 = 109;
      goto LABEL_120;
    case 110:
      v8 = "int";
      v9 = 110;
      goto LABEL_120;
    case 111:
      v8 = "int";
      v9 = 111;
LABEL_120:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void SearchParamSet::setBoolParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  const char *v11;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeComputeOnlyBestTimes";
        goto LABEL_120;
      }
      *((_BYTE *)this + 40) = a3;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 4:
LABEL_6:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeNodeCreationUseRightWord";
        goto LABEL_120;
      }
      *((_BYTE *)this + 52) = v9;
      return;
    case 5:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeUseCoarticulation";
        goto LABEL_120;
      }
      *((_BYTE *)this + 53) = a3;
      return;
    case 6:
      throwWrongTypeForParamId(6, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 7:
LABEL_12:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 8:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 10:
LABEL_15:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchActiveWordHasPredecessorPhonemeContext";
        goto LABEL_120;
      }
      *((_BYTE *)this + 72) = v9;
      return;
    case 11:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchActiveWordHasPredecessorWordContext";
        goto LABEL_120;
      }
      *((_BYTE *)this + 73) = a3;
      return;
    case 12:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchActiveWordHasMergedGrammarState";
        goto LABEL_120;
      }
      *((_BYTE *)this + 74) = a3;
      return;
    case 13:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchActiveWordHasMergedLatticeLinkId";
        goto LABEL_120;
      }
      *((_BYTE *)this + 75) = a3;
      return;
    case 14:
      throwWrongTypeForParamId(14, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 15:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 16:
LABEL_26:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 17:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 18:
LABEL_28:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 19:
LABEL_29:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 20:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 21:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 22:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 23:
LABEL_33:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 24:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 25:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 26:
LABEL_36:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 27:
LABEL_37:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 28:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 29:
LABEL_39:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 30:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 31:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 32:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 33:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 34:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 35:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 36:
LABEL_46:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 37:
LABEL_47:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLMRescoreWithCorrective";
        goto LABEL_120;
      }
      *((_BYTE *)this + 196) = v9;
      return;
    case 38:
      throwWrongTypeForParamId(38, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 39:
LABEL_51:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchActiveNodePreserveMultipleHistories";
        goto LABEL_120;
      }
      *((_BYTE *)this + 204) = v9;
      return;
    case 40:
      throwWrongTypeForParamId(40, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 41:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 42:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 43:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 44:
LABEL_57:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeComputeOnlyBestPath";
        goto LABEL_120;
      }
      *((_BYTE *)this + 224) = v9;
      return;
    case 45:
      throwWrongTypeForParamId(45, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 46:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 47:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 48:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 49:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 50:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 51:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 52:
LABEL_67:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeAllowZeroDurationFinalSilence";
        goto LABEL_120;
      }
      *((_BYTE *)this + 260) = v9;
      return;
    case 53:
      throwWrongTypeForParamId(53, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 54:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 55:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 56:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 57:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 58:
LABEL_75:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 59:
LABEL_76:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 60:
LABEL_77:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 61:
LABEL_78:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 62:
LABEL_79:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 63:
LABEL_80:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 64:
LABEL_81:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 65:
LABEL_82:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchPelScoreUseBestCompScore";
        goto LABEL_120;
      }
      *((_BYTE *)this + 320) = v9;
      return;
    case 66:
      throwWrongTypeForParamId(66, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 67:
LABEL_86:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchPrefilterResultUseCrumbBank";
        goto LABEL_120;
      }
      *((_BYTE *)this + 328) = v9;
      return;
    case 68:
      throwWrongTypeForParamId(68, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 69:
LABEL_89:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchSegmentAllNets";
        goto LABEL_120;
      }
      *((_BYTE *)this + 336) = v9;
      return;
    case 70:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchRecognitionBatchProcessing";
        goto LABEL_120;
      }
      *((_BYTE *)this + 337) = a3;
      return;
    case 71:
      throwWrongTypeForParamId(71, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 72:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 73:
LABEL_95:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 74:
LABEL_96:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 75:
LABEL_97:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 76:
LABEL_98:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchTruncatePackedIntComponentScores";
        goto LABEL_120;
      }
      *((_BYTE *)this + 368) = v9;
      return;
    case 77:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchUseWordEndThreshWhenSeedingFinalSilence";
        goto LABEL_120;
      }
      *((_BYTE *)this + 369) = a3;
      return;
    case 78:
      throwWrongTypeForParamId(78, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 79:
LABEL_104:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchWordSeedScoreIncludePrefiltererScore";
        goto LABEL_120;
      }
      *((_BYTE *)this + 376) = v9;
      return;
    case 80:
      throwWrongTypeForParamId(80, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 81:
LABEL_107:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchWordSeedUnprefilteredUseThreshScoreDecrement";
        goto LABEL_120;
      }
      *((_BYTE *)this + 384) = v9;
      return;
    case 82:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchEstimateAndPreScoreActivePels";
        goto LABEL_120;
      }
      *((_BYTE *)this + 385) = a3;
      return;
    case 83:
      throwWrongTypeForParamId(83, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 84:
LABEL_112:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 85:
LABEL_113:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 86:
LABEL_114:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_115;
    case 87:
LABEL_115:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_116;
    case 88:
LABEL_116:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 89:
LABEL_117:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 90:
LABEL_118:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreRepeatFrame";
        goto LABEL_120;
      }
      *((_BYTE *)this + 444) = v9;
      return;
    case 91:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreGenerateLeafLattice";
        goto LABEL_120;
      }
      *((_BYTE *)this + 445) = a3;
      return;
    case 92:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticePreserveAlternateProns";
        goto LABEL_120;
      }
      *((_BYTE *)this + 446) = a3;
      return;
    case 93:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeSilentWordsUseCoarticulation";
        goto LABEL_120;
      }
      *((_BYTE *)this + 447) = a3;
      return;
    case 94:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchLatticeUseThresholding";
        goto LABEL_120;
      }
      *((_BYTE *)this + 448) = a3;
      return;
    case 95:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchDisableHierarchicalScorer";
        goto LABEL_120;
      }
      *((_BYTE *)this + 449) = a3;
      return;
    case 96:
      if (*((_DWORD *)this + 9))
      {
        v11 = "SearchDisableGPUScorer";
        goto LABEL_120;
      }
      *((_BYTE *)this + 450) = a3;
      return;
    case 97:
      throwWrongTypeForParamId(97, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_135;
    case 98:
LABEL_135:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreUseDurationModel";
        goto LABEL_120;
      }
      *((_BYTE *)this + 472) = v9;
      return;
    case 99:
      throwWrongTypeForParamId(99, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_138;
    case 100:
LABEL_138:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreHashTokens";
        goto LABEL_120;
      }
      *((_BYTE *)this + 480) = v9;
      return;
    case 101:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreUseFwdBwdAlgorithm";
        goto LABEL_120;
      }
      *((_BYTE *)this + 481) = a3;
      break;
    case 102:
      if (*((_DWORD *)this + 9))
      {
        v11 = "FstCoreLockPelScoreCache";
LABEL_120:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 482) = a3;
      }
      break;
    case 103:
      throwWrongTypeForParamId(103, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_145;
    case 104:
LABEL_145:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_146;
    case 105:
LABEL_146:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_147;
    case 106:
LABEL_147:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_148;
    case 107:
LABEL_148:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_149;
    case 108:
LABEL_149:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_150;
    case 109:
LABEL_150:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_151;
    case 110:
LABEL_151:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_152;
    case 111:
LABEL_152:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_153;
    default:
LABEL_153:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::setIntParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeLMRescoringAbortOnTotalNewNodes";
        goto LABEL_281;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 3, a3, a4, a5, a6, a7, a8);
      if (v23)
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticePruneKeepUniquePathsMaxSize";
        goto LABEL_281;
      }
      *((_DWORD *)this + 12) = v9;
      return;
    case 4:
      throwWrongTypeForParamId(4, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 5:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 6:
LABEL_14:
      v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 6, a3, a4, a5, a6, a7, a8);
      if (v28)
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchAbortOnAllocBytes";
        goto LABEL_281;
      }
      *((_DWORD *)this + 14) = v9;
      return;
    case 7:
      v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 7, a3, a4, a5, a6, a7, a8);
      if (v33)
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchAbortOnAverageWordsEndingPerFrame";
        goto LABEL_281;
      }
      *((_DWORD *)this + 15) = v9;
      return;
    case 8:
      v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 8, a3, a4, a5, a6, a7, a8);
      if (v38)
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchAbortOnNumHistories";
        goto LABEL_281;
      }
      *((_DWORD *)this + 16) = v9;
      return;
    case 9:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 9, a3, a4, a5, a6, a7, a8);
      if (v43)
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchAbortOnNumRecognizedFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 17) = v9;
      return;
    case 10:
      throwWrongTypeForParamId(10, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 11:
LABEL_32:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 12:
LABEL_33:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 13:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 14:
LABEL_35:
      v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 14, a3, a4, a5, a6, a7, a8);
      if (v48)
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeTimeConstraintSeedThreshScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 19) = v9;
      return;
    case 15:
      v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 15, a3, a4, a5, a6, a7, a8);
      if (v53)
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeTimeConstraintDistanceMaxFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 20) = v9;
      return;
    case 16:
      v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 16, a3, a4, a5, a6, a7, a8);
      if (v58)
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchActiveWordSpreadSeedScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 17:
      throwWrongTypeForParamId(17, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 18:
LABEL_49:
      v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 18, a3, a4, a5, a6, a7, a8);
      if (v63)
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchConTransAccDecayFrequency";
        goto LABEL_281;
      }
      *((_DWORD *)this + 24) = v9;
      return;
    case 19:
      throwWrongTypeForParamId(19, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 20:
LABEL_54:
      v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 20, a3, a4, a5, a6, a7, a8);
      if (v68)
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchConTransAccMaxSilenceFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 30) = v9;
      return;
    case 21:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 21, a3, a4, a5, a6, a7, a8);
      if (v73)
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchConTransAccRampFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 22:
      v78 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 22, a3, a4, a5, a6, a7, a8);
      if (v78)
      IntParamSpec::validateValue((IntParamSpec *)v78, v9, 0, 0, v79, v80, v81, v82);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchConTransAccStartFrame";
        goto LABEL_281;
      }
      *((_DWORD *)this + 32) = v9;
      return;
    case 23:
      throwWrongTypeForParamId(23, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 24:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 25:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 26:
LABEL_69:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 27:
LABEL_70:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 28:
LABEL_71:
      v83 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 28, a3, a4, a5, a6, a7, a8);
      if (v83)
      IntParamSpec::validateValue((IntParamSpec *)v83, v9, 0, 0, v84, v85, v86, v87);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchInitialSilenceToFinalSilenceLMScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 40) = v9;
      return;
    case 29:
      v88 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 29, a3, a4, a5, a6, a7, a8);
      if (v88)
      IntParamSpec::validateValue((IntParamSpec *)v88, v9, 0, 0, v89, v90, v91, v92);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchInterWordSilencePenalty";
        goto LABEL_281;
      }
      *((_DWORD *)this + 41) = v9;
      return;
    case 30:
      v93 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 30, a3, a4, a5, a6, a7, a8);
      if (v93)
      IntParamSpec::validateValue((IntParamSpec *)v93, v9, 0, 0, v94, v95, v96, v97);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDisallowedLMScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 42) = v9;
      return;
    case 31:
      v98 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 31, a3, a4, a5, a6, a7, a8);
      if (v98)
      IntParamSpec::validateValue((IntParamSpec *)v98, v9, 0, 0, v99, v100, v101, v102);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDynamicBigramReadCacheMaxChunksPerRead";
        goto LABEL_281;
      }
      *((_DWORD *)this + 43) = v9;
      return;
    case 32:
      v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 32, a3, a4, a5, a6, a7, a8);
      if (v103)
      IntParamSpec::validateValue((IntParamSpec *)v103, v9, 0, 0, v104, v105, v106, v107);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDynamicQuadgramReadCacheMaxChunksPerRead";
        goto LABEL_281;
      }
      *((_DWORD *)this + 44) = v9;
      return;
    case 33:
      v108 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 33, a3, a4, a5, a6, a7, a8);
      if (v108)
      IntParamSpec::validateValue((IntParamSpec *)v108, v9, 0, 0, v109, v110, v111, v112);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDynamicReadCacheBlocksPerChunk";
        goto LABEL_281;
      }
      *((_DWORD *)this + 45) = v9;
      return;
    case 34:
      v113 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 34, a3, a4, a5, a6, a7, a8);
      if (v113)
      IntParamSpec::validateValue((IntParamSpec *)v113, v9, 0, 0, v114, v115, v116, v117);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDynamicReadCacheMaxBlocks";
        goto LABEL_281;
      }
      *((_DWORD *)this + 46) = v9;
      return;
    case 35:
      v118 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 35, a3, a4, a5, a6, a7, a8);
      if (v118)
      IntParamSpec::validateValue((IntParamSpec *)v118, v9, 0, 0, v119, v120, v121, v122);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLMDynamicTrigramReadCacheMaxChunksPerRead";
        goto LABEL_281;
      }
      *((_DWORD *)this + 47) = v9;
      return;
    case 36:
      throwWrongTypeForParamId(36, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_105;
    case 37:
LABEL_105:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 38:
LABEL_106:
      v123 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 38, a3, a4, a5, a6, a7, a8);
      if (v123)
      IntParamSpec::validateValue((IntParamSpec *)v123, v9, 0, 0, v124, v125, v126, v127);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchActiveNodeCountLimit";
        goto LABEL_281;
      }
      *((_DWORD *)this + 50) = v9;
      return;
    case 39:
      throwWrongTypeForParamId(39, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 40:
LABEL_112:
      v128 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 40, a3, a4, a5, a6, a7, a8);
      if (v128)
      IntParamSpec::validateValue((IntParamSpec *)v128, v9, 0, 0, v129, v130, v131, v132);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchActiveSequenceCountLimit";
        goto LABEL_281;
      }
      *((_DWORD *)this + 52) = v9;
      return;
    case 41:
      v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 41, a3, a4, a5, a6, a7, a8);
      if (v133)
      IntParamSpec::validateValue((IntParamSpec *)v133, v9, 0, 0, v134, v135, v136, v137);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchFinalSilenceThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 53) = v9;
      return;
    case 42:
      v138 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 42, a3, a4, a5, a6, a7, a8);
      if (v138)
      IntParamSpec::validateValue((IntParamSpec *)v138, v9, 0, 0, v139, v140, v141, v142);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeBestCrumbDistanceMaxFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 54) = v9;
      return;
    case 43:
      v143 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 43, a3, a4, a5, a6, a7, a8);
      if (v143)
      IntParamSpec::validateValue((IntParamSpec *)v143, v9, 0, 0, v144, v145, v146, v147);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeBestCrumbThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 55) = v9;
      return;
    case 44:
      throwWrongTypeForParamId(44, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_129;
    case 45:
LABEL_129:
      v148 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 45, a3, a4, a5, a6, a7, a8);
      if (v148)
      IntParamSpec::validateValue((IntParamSpec *)v148, v9, 0, 0, v149, v150, v151, v152);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeAbortOnScaledAverageLinksPerFrame";
        goto LABEL_281;
      }
      *((_DWORD *)this + 57) = v9;
      return;
    case 46:
      v153 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 46, a3, a4, a5, a6, a7, a8);
      if (v153)
      IntParamSpec::validateValue((IntParamSpec *)v153, v9, 0, 0, v154, v155, v156, v157);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeAbortOnScaledAverageNodesPerFrame";
        goto LABEL_281;
      }
      *((_DWORD *)this + 58) = v9;
      return;
    case 47:
      v158 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 47, a3, a4, a5, a6, a7, a8);
      if (v158)
      IntParamSpec::validateValue((IntParamSpec *)v158, v9, 0, 0, v159, v160, v161, v162);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeAbortOnNumLinks";
        goto LABEL_281;
      }
      *((_DWORD *)this + 59) = v9;
      return;
    case 48:
      v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 48, a3, a4, a5, a6, a7, a8);
      if (v163)
      IntParamSpec::validateValue((IntParamSpec *)v163, v9, 0, 0, v164, v165, v166, v167);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeAbortOnNumNodes";
        goto LABEL_281;
      }
      *((_DWORD *)this + 60) = v9;
      return;
    case 49:
      v168 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 49, a3, a4, a5, a6, a7, a8);
      if (v168)
      IntParamSpec::validateValue((IntParamSpec *)v168, v9, 0, 0, v169, v170, v171, v172);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticePruneLinksPerSecondLimit";
        goto LABEL_281;
      }
      *((_DWORD *)this + 61) = v9;
      return;
    case 50:
      throwWrongTypeForParamId(50, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_150;
    case 51:
LABEL_150:
      v173 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 51, a3, a4, a5, a6, a7, a8);
      if (v173)
      IntParamSpec::validateValue((IntParamSpec *)v173, v9, 0, 0, v174, v175, v176, v177);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchLatticeThreshScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 64) = v9;
      return;
    case 52:
      throwWrongTypeForParamId(52, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_155;
    case 53:
LABEL_155:
      v178 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 53, a3, a4, a5, a6, a7, a8);
      if (v178)
      IntParamSpec::validateValue((IntParamSpec *)v178, v9, 0, 0, v179, v180, v181, v182);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchStateUsePrefiltererMinNumWords";
        goto LABEL_281;
      }
      *((_DWORD *)this + 66) = v9;
      return;
    case 54:
      v183 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 54, a3, a4, a5, a6, a7, a8);
      if (v183)
      IntParamSpec::validateValue((IntParamSpec *)v183, v9, 0, 0, v184, v185, v186, v187);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchThreshScoreIncrementWhenNonSilenceBest";
        goto LABEL_281;
      }
      *((_DWORD *)this + 67) = v9;
      return;
    case 55:
      v188 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 55, a3, a4, a5, a6, a7, a8);
      if (v188)
      IntParamSpec::validateValue((IntParamSpec *)v188, v9, 0, 0, v189, v190, v191, v192);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchThreshScoreWhenSilenceBest";
        goto LABEL_281;
      }
      *((_DWORD *)this + 68) = v9;
      return;
    case 56:
      v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 56, a3, a4, a5, a6, a7, a8);
      if (v193)
      IntParamSpec::validateValue((IntParamSpec *)v193, v9, 0, 0, v194, v195, v196, v197);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchWordEndAgainstBestWordEndThreshScoreDecrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 69) = v9;
      return;
    case 57:
      v198 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 57, a3, a4, a5, a6, a7, a8);
      if (v198)
      IntParamSpec::validateValue((IntParamSpec *)v198, v9, 0, 0, v199, v200, v201, v202);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchWordEndThreshScoreDecrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 70) = v9;
      return;
    case 58:
      throwWrongTypeForParamId(58, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_176;
    case 59:
LABEL_176:
      v203 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 59, a3, a4, a5, a6, a7, a8);
      if (v203)
      IntParamSpec::validateValue((IntParamSpec *)v203, v9, 0, 0, v204, v205, v206, v207);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchNonAcousticWordAndSuccessorLMThreshScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 72) = v9;
      return;
    case 60:
      v208 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 60, a3, a4, a5, a6, a7, a8);
      if (v208)
      IntParamSpec::validateValue((IntParamSpec *)v208, v9, 0, 0, v209, v210, v211, v212);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchNonAcousticWordEndThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 73) = v9;
      return;
    case 61:
      v213 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 61, a3, a4, a5, a6, a7, a8);
      if (v213)
      IntParamSpec::validateValue((IntParamSpec *)v213, v9, 0, 0, v214, v215, v216, v217);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchNonAcousticWordLMThreshScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 74) = v9;
      return;
    case 62:
      v218 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 62, a3, a4, a5, a6, a7, a8);
      if (v218)
      IntParamSpec::validateValue((IntParamSpec *)v218, v9, 0, 0, v219, v220, v221, v222);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchNonAcousticWordSeedThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 75) = v9;
      return;
    case 63:
      v223 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 63, a3, a4, a5, a6, a7, a8);
      if (v223)
      IntParamSpec::validateValue((IntParamSpec *)v223, v9, 0, 0, v224, v225, v226, v227);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPelBackoffThreshScoreDecrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 76) = v9;
      return;
    case 64:
      throwWrongTypeForParamId(64, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_197;
    case 65:
LABEL_197:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_198;
    case 66:
LABEL_198:
      v228 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 66, a3, a4, a5, a6, a7, a8);
      if (v228)
      IntParamSpec::validateValue((IntParamSpec *)v228, v9, 0, 0, v229, v230, v231, v232);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPerWordPenalty";
        goto LABEL_281;
      }
      *((_DWORD *)this + 81) = v9;
      return;
    case 67:
      throwWrongTypeForParamId(67, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_204;
    case 68:
LABEL_204:
      v233 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 68, a3, a4, a5, a6, a7, a8);
      if (v233)
      IntParamSpec::validateValue((IntParamSpec *)v233, v9, 0, 0, v234, v235, v236, v237);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPrefilterResultUseCrumbBankDistanceMaxFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 83) = v9;
      return;
    case 69:
      throwWrongTypeForParamId(69, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_209;
    case 70:
LABEL_209:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_210;
    case 71:
LABEL_210:
      v238 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 71, a3, a4, a5, a6, a7, a8);
      if (v238)
      IntParamSpec::validateValue((IntParamSpec *)v238, v9, 0, 0, v239, v240, v241, v242);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchRecognitionContinuationInterval";
        goto LABEL_281;
      }
      *((_DWORD *)this + 85) = v9;
      return;
    case 72:
      v243 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 72, a3, a4, a5, a6, a7, a8);
      if (v243)
      IntParamSpec::validateValue((IntParamSpec *)v243, v9, 0, 0, v244, v245, v246, v247);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchRemoveInactiveWordsIntervalFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 86) = v9;
      return;
    case 73:
      throwWrongTypeForParamId(73, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_220;
    case 74:
LABEL_220:
      v248 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 74, a3, a4, a5, a6, a7, a8);
      if (v248)
      IntParamSpec::validateValue((IntParamSpec *)v248, v9, 0, 0, v249, v250, v251, v252);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchTraceLatticeThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 90) = v9;
      return;
    case 75:
      v253 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 75, a3, a4, a5, a6, a7, a8);
      if (v253)
      IntParamSpec::validateValue((IntParamSpec *)v253, v9, 0, 0, v254, v255, v256, v257);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchTraceThreshScoreIncrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 91) = v9;
      return;
    case 76:
      throwWrongTypeForParamId(76, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_229;
    case 77:
LABEL_229:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_230;
    case 78:
LABEL_230:
      v258 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 78, a3, a4, a5, a6, a7, a8);
      if (v258)
      IntParamSpec::validateValue((IntParamSpec *)v258, v9, 0, 0, v259, v260, v261, v262);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchWordSeedFinalSilenceThreshScoreDecrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 93) = v9;
      return;
    case 79:
      throwWrongTypeForParamId(79, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_236;
    case 80:
LABEL_236:
      v263 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 80, a3, a4, a5, a6, a7, a8);
      if (v263)
      IntParamSpec::validateValue((IntParamSpec *)v263, v9, 0, 0, v264, v265, v266, v267);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchWordSeedThreshScoreDecrement";
        goto LABEL_281;
      }
      *((_DWORD *)this + 95) = v9;
      return;
    case 81:
      throwWrongTypeForParamId(81, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_241;
    case 82:
LABEL_241:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_242;
    case 83:
LABEL_242:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_243;
    case 84:
LABEL_243:
      v268 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 84, a3, a4, a5, a6, a7, a8);
      if (v268)
      IntParamSpec::validateValue((IntParamSpec *)v268, v9, 0, 0, v269, v270, v271, v272);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchHierInactiveComponentScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 102) = v9;
      return;
    case 85:
      throwWrongTypeForParamId(85, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_249;
    case 86:
LABEL_249:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_250;
    case 87:
LABEL_250:
      v273 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 87, a3, a4, a5, a6, a7, a8);
      if (v273)
      IntParamSpec::validateValue((IntParamSpec *)v273, v9, 0, 0, v274, v275, v276, v277);
      if (*((_DWORD *)this + 9))
      {
        v22 = "FstCoreMaxActive";
        goto LABEL_281;
      }
      *((_DWORD *)this + 108) = v9;
      return;
    case 88:
      v278 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 88, a3, a4, a5, a6, a7, a8);
      if (v278)
      IntParamSpec::validateValue((IntParamSpec *)v278, v9, 0, 0, v279, v280, v281, v282);
      if (*((_DWORD *)this + 9))
      {
        v22 = "FstCoreNBest";
        goto LABEL_281;
      }
      *((_DWORD *)this + 109) = v9;
      return;
    case 89:
      v283 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 89, a3, a4, a5, a6, a7, a8);
      if (v283)
      IntParamSpec::validateValue((IntParamSpec *)v283, v9, 0, 0, v284, v285, v286, v287);
      if (*((_DWORD *)this + 9))
      {
        v22 = "FstCoreHashPropagateBestTokensFirst";
        goto LABEL_281;
      }
      *((_DWORD *)this + 110) = v9;
      return;
    case 90:
      throwWrongTypeForParamId(90, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_264;
    case 91:
LABEL_264:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_265;
    case 92:
LABEL_265:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_266;
    case 93:
LABEL_266:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_267;
    case 94:
LABEL_267:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_268;
    case 95:
LABEL_268:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_269;
    case 96:
LABEL_269:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_270;
    case 97:
LABEL_270:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_271;
    case 98:
LABEL_271:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_272;
    case 99:
LABEL_272:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_273;
    case 100:
LABEL_273:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_274;
    case 101:
LABEL_274:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_275;
    case 102:
LABEL_275:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_276;
    case 103:
LABEL_276:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_277;
    case 104:
LABEL_277:
      v288 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 104, a3, a4, a5, a6, a7, a8);
      if (v288)
      IntParamSpec::validateValue((IntParamSpec *)v288, v9, 0, 0, v289, v290, v291, v292);
      if (*((_DWORD *)this + 9))
      {
        v22 = "FstCoreCollectTracesPeriod";
        goto LABEL_281;
      }
      *((_DWORD *)this + 124) = v9;
      return;
    case 105:
      v293 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 105, a3, a4, a5, a6, a7, a8);
      if (v293)
      IntParamSpec::validateValue((IntParamSpec *)v293, v9, 0, 0, v294, v295, v296, v297);
      if (*((_DWORD *)this + 9))
      {
        v22 = "FstCoreBackoffThreshScore";
        goto LABEL_281;
      }
      *((_DWORD *)this + 125) = v9;
      return;
    case 106:
      throwWrongTypeForParamId(106, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_288;
    case 107:
LABEL_288:
      v298 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 107, a3, a4, a5, a6, a7, a8);
      if (v298)
      IntParamSpec::validateValue((IntParamSpec *)v298, v9, 0, 0, v299, v300, v301, v302);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPartialIncompleteMaxWords";
        goto LABEL_281;
      }
      *((_DWORD *)this + 127) = v9;
      return;
    case 108:
      v303 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 108, a3, a4, a5, a6, a7, a8);
      if (v303)
      IntParamSpec::validateValue((IntParamSpec *)v303, v9, 0, 0, v304, v305, v306, v307);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPartialIncompleteMinListFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 128) = v9;
      return;
    case 109:
      v308 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 109, a3, a4, a5, a6, a7, a8);
      if (v308)
      IntParamSpec::validateValue((IntParamSpec *)v308, v9, 0, 0, v309, v310, v311, v312);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPartialIncompleteMinWordFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 129) = v9;
      return;
    case 110:
      v313 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 110, a3, a4, a5, a6, a7, a8);
      if (v313)
      IntParamSpec::validateValue((IntParamSpec *)v313, v9, 0, 0, v314, v315, v316, v317);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPartialCompleteMinWordFrames";
        goto LABEL_281;
      }
      *((_DWORD *)this + 130) = v9;
      break;
    case 111:
      v318 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 111, a3, a4, a5, a6, a7, a8);
      if (v318)
      IntParamSpec::validateValue((IntParamSpec *)v318, v9, 0, 0, v319, v320, v321, v322);
      if (*((_DWORD *)this + 9))
      {
        v22 = "SearchPartialRegularMinWordFrames";
LABEL_281:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 131) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::setDoubleParameter(SearchParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_18;
    case 17:
LABEL_18:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 17, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchConTransAccDecayFactor";
        goto LABEL_138;
      }
      *((double *)this + 11) = a3;
      return;
    case 18:
      throwWrongTypeForParamId(18, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 19:
LABEL_24:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 20:
LABEL_25:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 21:
LABEL_26:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 22:
LABEL_27:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 23:
LABEL_28:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 24:
LABEL_29:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 24, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchEnableGenoneScoreCacheThresh";
        goto LABEL_138;
      }
      *((double *)this + 17) = a3;
      return;
    case 25:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 25, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchFmpeMinimumPosteriorProbability";
        goto LABEL_138;
      }
      *((double *)this + 18) = a3;
      return;
    case 26:
      throwWrongTypeForParamId(26, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_39;
    case 27:
LABEL_39:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_40;
    case 28:
LABEL_40:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_41;
    case 29:
LABEL_41:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_42;
    case 30:
LABEL_42:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_43;
    case 31:
LABEL_43:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_44;
    case 32:
LABEL_44:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_45;
    case 33:
LABEL_45:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_46;
    case 34:
LABEL_46:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_47;
    case 35:
LABEL_47:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_48;
    case 36:
LABEL_48:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_49;
    case 37:
LABEL_49:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_50;
    case 38:
LABEL_50:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_51;
    case 39:
LABEL_51:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_52;
    case 40:
LABEL_52:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_53;
    case 41:
LABEL_53:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_54;
    case 42:
LABEL_54:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_55;
    case 43:
LABEL_55:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_56;
    case 44:
LABEL_56:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_57;
    case 45:
LABEL_57:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_58;
    case 46:
LABEL_58:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_59;
    case 47:
LABEL_59:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_60;
    case 48:
LABEL_60:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_61;
    case 49:
LABEL_61:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_62;
    case 50:
LABEL_62:
      v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 50, a4, a5, a6, a7, a8, a9);
      if (v37)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchLatticeNormalizedThreshFactor";
        goto LABEL_138;
      }
      *((double *)this + 31) = a3;
      return;
    case 51:
      throwWrongTypeForParamId(51, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_68;
    case 52:
LABEL_68:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_69;
    case 53:
LABEL_69:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_70;
    case 54:
LABEL_70:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_71;
    case 55:
LABEL_71:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_72;
    case 56:
LABEL_72:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_73;
    case 57:
LABEL_73:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_74;
    case 58:
LABEL_74:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_75;
    case 59:
LABEL_75:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_76;
    case 60:
LABEL_76:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_77;
    case 61:
LABEL_77:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_78;
    case 62:
LABEL_78:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_79;
    case 63:
LABEL_79:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_80;
    case 64:
LABEL_80:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 64, a4, a5, a6, a7, a8, a9);
      if (v43)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchPelScoreScale";
        goto LABEL_138;
      }
      *((double *)this + 39) = a3;
      return;
    case 65:
      throwWrongTypeForParamId(65, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_86;
    case 66:
LABEL_86:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_87;
    case 67:
LABEL_87:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_88;
    case 68:
LABEL_88:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_89;
    case 69:
LABEL_89:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_90;
    case 70:
LABEL_90:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_91;
    case 71:
LABEL_91:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_92;
    case 72:
LABEL_92:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_93;
    case 73:
LABEL_93:
      v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 73, a4, a5, a6, a7, a8, a9);
      if (v49)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchTraceLatticeNormalizedThreshFactor";
        goto LABEL_138;
      }
      *((double *)this + 44) = a3;
      return;
    case 74:
      throwWrongTypeForParamId(74, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_99;
    case 75:
LABEL_99:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_100;
    case 76:
LABEL_100:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_101;
    case 77:
LABEL_101:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_102;
    case 78:
LABEL_102:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_103;
    case 79:
LABEL_103:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_104;
    case 80:
LABEL_104:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_105;
    case 81:
LABEL_105:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_106;
    case 82:
LABEL_106:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_107;
    case 83:
LABEL_107:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_108;
    case 84:
LABEL_108:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_109;
    case 85:
LABEL_109:
      v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 85, a4, a5, a6, a7, a8, a9);
      if (v55)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      if (*((_DWORD *)this + 9))
      {
        v24 = "FstCoreBeam";
        goto LABEL_138;
      }
      *((double *)this + 52) = a3;
      return;
    case 86:
      v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 86, a4, a5, a6, a7, a8, a9);
      if (v61)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      if (*((_DWORD *)this + 9))
      {
        v24 = "FstCoreLatticeBeam";
        goto LABEL_138;
      }
      *((double *)this + 53) = a3;
      break;
    case 87:
      throwWrongTypeForParamId(87, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_119;
    case 88:
LABEL_119:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_120;
    case 89:
LABEL_120:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_121;
    case 90:
LABEL_121:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_122;
    case 91:
LABEL_122:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_123;
    case 92:
LABEL_123:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_124;
    case 93:
LABEL_124:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_125;
    case 94:
LABEL_125:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_126;
    case 95:
LABEL_126:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_127;
    case 96:
LABEL_127:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_128;
    case 97:
LABEL_128:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_129;
    case 98:
LABEL_129:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_130;
    case 99:
LABEL_130:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_131;
    case 100:
LABEL_131:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_132;
    case 101:
LABEL_132:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_133;
    case 102:
LABEL_133:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_134;
    case 103:
LABEL_134:
      v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 103, a4, a5, a6, a7, a8, a9);
      if (v67)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v24 = "FstCoreLateLatticeArcFingerSuckPenalty";
LABEL_138:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 61) = a3;
      }
      break;
    case 104:
      throwWrongTypeForParamId(104, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_141;
    case 105:
LABEL_141:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_142;
    case 106:
LABEL_142:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_143;
    case 107:
LABEL_143:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_144;
    case 108:
LABEL_144:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_145;
    case 109:
LABEL_145:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_146;
    case 110:
LABEL_146:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_147;
    case 111:
LABEL_147:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_148;
    default:
LABEL_148:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void SearchParamSet::setStringParameter(SearchParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      SearchParamSet::setParamSetSearchConTransAccFactorList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 20:
      throwWrongTypeForParamId(20, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 74:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 75:
LABEL_76:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 76:
LABEL_77:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 77:
LABEL_78:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 78:
LABEL_79:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 79:
LABEL_80:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 80:
LABEL_81:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 81:
LABEL_82:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 82:
LABEL_83:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 83:
LABEL_84:
      SearchParamSet::setParamSetSearchHierScorerBeamList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 84:
      throwWrongTypeForParamId(84, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 85:
LABEL_86:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 86:
LABEL_87:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 87:
LABEL_88:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 88:
LABEL_89:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 89:
LABEL_90:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 90:
LABEL_91:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 91:
LABEL_92:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_93;
    case 92:
LABEL_93:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 93:
LABEL_94:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 94:
LABEL_95:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 95:
LABEL_96:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 96:
LABEL_97:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 97:
LABEL_98:
      SearchParamSet::setParamSetSearchHierScorerCutoffRatioList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 98:
      throwWrongTypeForParamId(98, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_100;
    case 99:
LABEL_100:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_101;
    case 100:
LABEL_101:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 101:
LABEL_102:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_103;
    case 102:
LABEL_103:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 103:
LABEL_104:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_105;
    case 104:
LABEL_105:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 105:
LABEL_106:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 106:
LABEL_107:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_108;
    case 107:
LABEL_108:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_109;
    case 108:
LABEL_109:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_110;
    case 109:
LABEL_110:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_111;
    case 110:
LABEL_111:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 111:
LABEL_112:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void SearchParamSet::setEnumParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 23, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchDecimationType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 33) = v9;
      return;
    case 24:
      throwWrongTypeForParamId(24, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 25:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 26:
LABEL_31:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 26, a3, a4, a5, a6, a7, a8);
      if (v25)
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchFrameTransformerThreadingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 38) = v9;
      return;
    case 27:
      v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 27, a3, a4, a5, a6, a7, a8);
      if (v32)
      EnumParamSpec::validateValue((EnumParamSpec *)v32, v9, v33, v34, v35, v36, v37, v38);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchThreadingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 39) = v9;
      return;
    case 28:
      throwWrongTypeForParamId(28, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 29:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 30:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 31:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 32:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 33:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 34:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 35:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 36:
LABEL_48:
      v39 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 36, a3, a4, a5, a6, a7, a8);
      if (v39)
      EnumParamSpec::validateValue((EnumParamSpec *)v39, v9, v40, v41, v42, v43, v44, v45);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchLMLimit";
        goto LABEL_123;
      }
      *((_DWORD *)this + 48) = v9;
      return;
    case 37:
      throwWrongTypeForParamId(37, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 38:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 39:
LABEL_55:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 40:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 41:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 42:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 43:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 44:
LABEL_60:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 45:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 46:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 47:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 48:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 49:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 50:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 51:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 52:
LABEL_68:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 53:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 54:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 55:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 56:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 57:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 58:
LABEL_74:
      v46 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 58, a3, a4, a5, a6, a7, a8);
      if (v46)
      EnumParamSpec::validateValue((EnumParamSpec *)v46, v9, v47, v48, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchNodeSkippingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 71) = v9;
      return;
    case 59:
      throwWrongTypeForParamId(59, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 60:
LABEL_80:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 61:
LABEL_81:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 62:
LABEL_82:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 63:
LABEL_83:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 64:
LABEL_84:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_85;
    case 65:
LABEL_85:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 66:
LABEL_86:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 67:
LABEL_87:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 68:
LABEL_88:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 69:
LABEL_89:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 70:
LABEL_90:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 71:
LABEL_91:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 72:
LABEL_92:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_93;
    case 73:
LABEL_93:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 74:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 75:
LABEL_95:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 76:
LABEL_96:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 77:
LABEL_97:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 78:
LABEL_98:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_99;
    case 79:
LABEL_99:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_100;
    case 80:
LABEL_100:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_101;
    case 81:
LABEL_101:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 82:
LABEL_102:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_103;
    case 83:
LABEL_103:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 84:
LABEL_104:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_105;
    case 85:
LABEL_105:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 86:
LABEL_106:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 87:
LABEL_107:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_108;
    case 88:
LABEL_108:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_109;
    case 89:
LABEL_109:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_110;
    case 90:
LABEL_110:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_111;
    case 91:
LABEL_111:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 92:
LABEL_112:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 93:
LABEL_113:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 94:
LABEL_114:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_115;
    case 95:
LABEL_115:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_116;
    case 96:
LABEL_116:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 97:
LABEL_117:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 98:
LABEL_118:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_119;
    case 99:
LABEL_119:
      v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 99, a3, a4, a5, a6, a7, a8);
      if (v53)
      EnumParamSpec::validateValue((EnumParamSpec *)v53, v9, v54, v55, v56, v57, v58, v59);
      if (*((_DWORD *)this + 9))
      {
        v24 = "FstCoreLatticeGeneration";
        goto LABEL_123;
      }
      *((_DWORD *)this + 119) = v9;
      break;
    case 100:
      throwWrongTypeForParamId(100, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_126;
    case 101:
LABEL_126:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_127;
    case 102:
LABEL_127:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_128;
    case 103:
LABEL_128:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_129;
    case 104:
LABEL_129:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_130;
    case 105:
LABEL_130:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 106:
LABEL_131:
      v60 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2870, 106, a3, a4, a5, a6, a7, a8);
      if (v60)
      EnumParamSpec::validateValue((EnumParamSpec *)v60, v9, v61, v62, v63, v64, v65, v66);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SearchPartialIncludePrefiltererResult";
LABEL_123:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 126) = v9;
      }
      break;
    case 107:
      throwWrongTypeForParamId(107, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_137;
    case 108:
LABEL_137:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_138;
    case 109:
LABEL_138:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_139;
    case 110:
LABEL_139:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_140;
    case 111:
LABEL_140:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_141;
    default:
LABEL_141:
      throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::~SearchParamSet(SearchParamSet *this)
{
  SearchParamSet::~SearchParamSet(this);
  JUMPOUT(0x20BD149A8);
}

{
  DgnString *v2;

  *(_QWORD *)this = &off_24C214B20;
  v2 = (SearchParamSet *)((char *)this + 104);
  DgnString::~DgnString((SearchParamSet *)((char *)this + 456));
  DgnString::~DgnString((SearchParamSet *)((char *)this + 392));
  DgnString::~DgnString(v2);
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((SearchParamSet *)((char *)this + 8));
}

uint64_t SDWord_New(unint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ModelMgr *v12;
  uint64_t v13;
  _BYTE v15[152];

  v4 = SdapiInsurance::SdapiInsurance(v15, "SDWord_New", 1, 0, 393);
  if (v15[97])
  {
    if (!a2)
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    v15[151] = 0;
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s')\n", v5, v6, v7, v8, "SDWord_New", a1, a2);
    v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    v13 = (ModelMgr::createWord(v12, (unsigned __int16)a1, a2, 0xFFFFFFLL, "New", v9, v10, v11) & 0xFFFFFF)
        + 1;
  }
  else
  {
    v13 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v15);
  return v13;
}

void sub_2098FEA48()
{
  __cxa_end_catch();
  JUMPOUT(0x2098FEA54);
}

void SDWord_DeleteList(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t VocOrThrow;
  WordList *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _BYTE v38[144];
  void *v39;

  SdapiInsurance::SdapiInsurance(v38, "SDWord_DeleteList", 1, 0, 398);
  if (v38[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a2;
      else
        v13 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDWord_DeleteList", a1, v13, a3);
    }
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    v14 = ModelMgr::smpModelMgr;
    VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
    v22 = *(WordList **)(VocOrThrow + 48);
    if (!a2 && a3)
      throwBadLengthForNullPointer(a3, "DgnVerifyReadPtr", v15, v16, v17, v18, v19, v20);
    LOBYTE(v36) = 0;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(VocOrThrow + 72) + 192))(*(_QWORD *)(VocOrThrow + 72)))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 257, (uint64_t)"sdapi/sdword", 2, (uint64_t)"%u", v23, v24, a1);
    v35 = v14;
    v36 = 0;
    v37 = 0;
    if (a3)
    {
      v39 = 0;
      v25 = realloc_array(0, &v39, 4 * a3, 0, 0, 1);
      v32 = 0;
      v36 = v39;
      LODWORD(v37) = a3;
      HIDWORD(v37) = v25 >> 2;
      do
      {
        v33 = *(_QWORD *)(a2 + 8 * v32);
        v34 = v33 - 1;
        if ((v33 - 1) >> 32)
          throwBadSdapiArgument("SDhWord", *(_QWORD *)(a2 + 8 * v32), v26, v27, v28, v29, v30, v31);
        if (v34 >= 0xFFFFF4)
          throwBadSdapiArgument("SDhWord", v33, v26, v27, v28, v29, v30, v31);
        v36[v32] = v34;
        WordList::verifyVisible(v22, v33 - 1, v26, v27, v28, v29, v30, v31);
        if (((*(_DWORD *)(*((_QWORD *)v22 + 78) + 4 * (v34 >> 5)) >> v34) & 1) != 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 269, (uint64_t)"sdapi/sdword", 13, (uint64_t)"%u %u", v30, v31, v32);
        ++v32;
      }
      while (a3 != v32);
    }
    else
    {
      LODWORD(v37) = 0;
    }
    ModelMgr::deleteWordFamilyFromWordList(v35, (unsigned __int16)a1, (uint64_t)&v36);
    ModelMgr::rebuildAllStalePrefilterers(v35);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v38);
}

void sub_2098FECF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  ApiState *v18;
  DgnException *v19;
  void *v20;

  if (a2 == 2)
  {
    v18 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v18, v19);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a17);
      _Unwind_Resume(a1);
    }
    v20 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v20);
  }
  __cxa_end_catch();
  JUMPOUT(0x2098FECD0);
}

uint64_t SDWord_GetHandle(unint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ModelMgr *v12;
  uint64_t VocOrThrow;
  unsigned int v14;
  uint64_t v15;
  _BYTE v17[152];

  v4 = SdapiInsurance::SdapiInsurance(v17, "SDWord_GetHandle", 1, 1, 399);
  if (v17[97])
  {
    if (!a2)
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    v17[151] = 0;
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s')\n", v5, v6, v7, v8, "SDWord_GetHandle", a1, a2);
    v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    VocOrThrow = ModelMgr::getVocOrThrow(v12, (unsigned __int16)a1, v6, v7, v8, v9, v10, v11);
    if (a2 && *a2 && (v14 = WordList::lookupWord(*(WordList **)(VocOrThrow + 48), a2), v14 != 0xFFFFFF))
      v15 = v14 + 1;
    else
      v15 = -1;
  }
  else
  {
    v15 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v15;
}

void sub_2098FEEE4()
{
  __cxa_end_catch();
  JUMPOUT(0x2098FEEF0);
}

uint64_t SDWord_GetName(unint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WordList *v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE v27[144];

  SdapiInsurance::SdapiInsurance(v27, "SDWord_GetName", 1, 1, 400);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v15 = a3;
      else
        v15 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetName", a1, a2, v15, a4);
    }
    if (!a3 && a4)
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    v24 = a2 - 1;
    if ((a2 - 1) >> 32)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    if (v24 >= 0xFFFFF4)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    v25 = sdUtilStrMove(a3, a4, (const char *)(*((_QWORD *)v23 + 28) + *(unsigned int *)(*((_QWORD *)v23 + 25) + 4 * v24)));
  }
  else
  {
    v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
  return v25;
}

void sub_2098FF0D8()
{
  __cxa_end_catch();
  JUMPOUT(0x2098FF0E4);
}

void SDWord_GetInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ModelMgr *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26[2];
  _BYTE v27[144];

  SdapiInsurance::SdapiInsurance(v27, "SDWord_GetInfo", 1, 1, 402);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a3;
      else
        v13 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx)\n", v6, v7, v8, v9, "SDWord_GetInfo", a1, a2, v13);
    }
    if (!a3)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
    v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    v21 = *(_QWORD *)(ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12) + 48);
    v22 = a2 - 1;
    if ((a2 - 1) >> 32)
      throwBadSdapiArgument("SDhWord", a2, v15, v16, v17, v18, v19, v20);
    if (v22 >= 0xFFFFF4)
      throwBadSdapiArgument("SDhWord", a2, v15, v16, v17, v18, v19, v20);
    WordList::verifyVisible((WordList *)v21, a2 - 1, v15, v16, v17, v18, v19, v20);
    *(_QWORD *)v26 = 0;
    WordList::getNumProns((uint64_t *)v21, a2 - 1, &v26[1], v26);
    v23 = v26[0];
    *(_DWORD *)a3 = v26[1];
    *(_DWORD *)(a3 + 4) = v23;
    v24 = 1;
    if (((*(_DWORD *)(*(_QWORD *)(v21 + 624) + 4 * (v22 >> 5)) >> v22) & 1) == 0)
      v24 = 2;
    *(_QWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 16) = WordList::getIncludingStateRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 20) = WordList::getIncludingRuleRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 24) = WordList::getIncludingLatticeRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 28) = 0;
    *(_DWORD *)(a3 + 32) = WordList::getIncludingPrefilterResultRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 36) = WordList::getIncludingSausageRefCount((WordList *)v21, (int)a2 - 1);
    v25 = *(_DWORD *)(v21 + 516);
    if (v25)
      v25 = *(_DWORD *)(v21 + 528) > v22 && *(_DWORD *)(*(_QWORD *)(v21 + 520) + 4 * v22) != -1;
    *(_DWORD *)(a3 + 40) = v25;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
}

void sub_2098FF308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  ApiState *v16;
  DgnException *v17;
  void *v18;

  if (a2 == 2)
  {
    v16 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v16, v17);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a15);
      _Unwind_Resume(a1);
    }
    v18 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v18);
  }
  __cxa_end_catch();
  JUMPOUT(0x2098FF2ECLL);
}

void SDWord_GetTagBits(unint64_t a1, unint64_t a2, unint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE v33[144];

  SdapiInsurance::SdapiInsurance(v33, "SDWord_GetTagBits", 1, 1, 403);
  if (!v33[97])
    goto LABEL_37;
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v17 = a4;
    else
      v17 = 0;
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v10, v11, v12, v13, "SDWord_GetTagBits", a1, a2, a3, v17, a5);
  }
  if (!a4 && a5)
    throwBadLengthForNullPointer(a5, "DgnVerifyWritePtr", v11, v12, v13, v14, v15, v16);
  if (a3 - 1 >= 2)
    throwBadSdapiArgument("SDVocTagSetType", a3, v11, v12, v13, v14, v15, v16);
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", a1, v11, v12, v13, v14, v15, v16);
  if ((unsigned __int16)a1 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", a1, v11, v12, v13, v14, v15, v16);
  v24 = *(_QWORD *)(ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v11, v12, v13, v14, v15, v16)+ 48);
  v25 = a2 - 1;
  if ((a2 - 1) >> 32)
    throwBadSdapiArgument("SDhWord", a2, v18, v19, v20, v21, v22, v23);
  if (v25 >= 0xFFFFF4)
    throwBadSdapiArgument("SDhWord", a2, v18, v19, v20, v21, v22, v23);
  WordList::verifyVisible((WordList *)v24, a2 - 1, v18, v19, v20, v21, v22, v23);
  if (a3 == 1)
  {
    if (!*(_DWORD *)(v24 + 552))
    {
      v28 = &errStr_sdapi_sdword_E_REQUIREDTAGS;
      v29 = 12;
      v30 = 399;
      goto LABEL_26;
    }
  }
  else if (!*(_DWORD *)(v24 + 516))
  {
    v28 = &errStr_sdapi_sdword_E_OPTIONALTAGS;
    v29 = 3;
    v30 = 401;
LABEL_26:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", v30, (uint64_t)"sdapi/sdword", v29, (uint64_t)"%s", v26, v27, (char)v28);
  }
  v31 = 516;
  if (a3 == 1)
    v31 = 552;
  v32 = (*(_DWORD *)(v24 + v31) + 7) >> 3;
  if (v32 != a5)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 403, (uint64_t)"sdapi/sdword", 4, (uint64_t)"%u %u", v26, v27, v32);
  if (a3 != 1 && (*(_DWORD *)(v24 + 528) <= v25 || *(_DWORD *)(*(_QWORD *)(v24 + 520) + 4 * v25) == -1))
  {
    if (a5)
      bzero(a4, a5);
  }
  else
  {
    WordList::getTagBitsAsBytes((_QWORD *)v24, a2 - 1, a3 == 1, (unsigned __int8 *)a4, a5);
  }
LABEL_37:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v33);
}

void sub_2098FF5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  ApiState *v16;
  DgnException *v17;
  void *v18;

  if (a2 == 2)
  {
    v16 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v16, v17);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a15);
      _Unwind_Resume(a1);
    }
    v18 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v18);
  }
  __cxa_end_catch();
  JUMPOUT(0x2098FF5D8);
}

_QWORD *WordList::getTagBitsAsBytes(_QWORD *this, unsigned int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;

  if (a3)
    return BitArray::getBitsFromRangeAsBytes(this + 72, a4, a5, *((_DWORD *)this + 138) * a2, *((_DWORD *)this + 138) * a2 + *((_DWORD *)this + 138));
  if (a5)
  {
    v5 = *(_DWORD *)(this[65] + 4 * a2);
    v6 = a5;
    do
    {
      *a4++ = *(_BYTE *)(this[67] + v5++);
      --v6;
    }
    while (v6);
  }
  return this;
}

uint64_t SDWord_WordsHaveCommonPron(unint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ModelMgr *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Voc *VocOrThrow;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const Voc *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  WordList *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const Voc *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  WordList *v72;
  uint64_t *v73;
  uint64_t hasCommonProns;
  unsigned int v76;
  void *v78;
  uint64_t v79;
  unsigned int v80[2];
  void *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  _BYTE v85[152];

  SdapiInsurance::SdapiInsurance(v85, "SDWord_WordsHaveCommonPron", 1, 1, 408);
  if (!v85[97])
  {
    hasCommonProns = 0;
    goto LABEL_82;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v14 = a1;
    else
      v14 = 0;
    v15 = a3;
    if (!gbShowCallPointerArguments)
      v15 = 0;
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, %llu, Masked:0x%016llx, %llu)\n", v7, v8, v9, v10, "SDWord_WordsHaveCommonPron", v14, a2, v15, a4);
  }
  if (!a1 && a2)
    throwBadLengthForNullPointer(a2, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  LOBYTE(v83) = 0;
  if (!a3 && a4)
    throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  LOBYTE(v83) = 0;
  if (a2 && a4)
  {
    v83 = 0;
    v84 = 0;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 533, (uint64_t)"sdapi/sdword", 8, (uint64_t)"%s", v12, v13, (char)&errStr_sdapi_sdword_E_ZERO_WORDS);
    v83 = 0;
    v84 = 0;
    if (!a2)
      goto LABEL_20;
  }
  v81 = 0;
  HIDWORD(v84) = realloc_array(0, &v81, 4 * a2, 0, 0, 1) >> 2;
  v83 = v81;
LABEL_20:
  LODWORD(v84) = a2;
  v81 = 0;
  v82 = 0;
  if (a4)
  {
    v78 = 0;
    HIDWORD(v82) = realloc_array(0, &v78, 4 * a4, 0, 0, 1) >> 2;
    v81 = v78;
  }
  LODWORD(v82) = a4;
  v80[1] = 0;
  v80[0] = 0;
  v22 = (ModelMgr *)ModelMgr::smpModelMgr;
  v78 = 0;
  v79 = 0;
  v23 = *a1;
  if (HIDWORD(*a1) || (v23 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", *a1, v16, v17, v18, v19, v20, v21);
  if ((unsigned __int16)v23 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", v23, v16, v17, v18, v19, v20, v21);
  v24 = v79;
  if ((_DWORD)v79 == HIDWORD(v79))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
    v24 = v79;
  }
  v76 = a4;
  v25 = (unsigned __int16 *)v78;
  *((_WORD *)v78 + v24) = v23;
  LODWORD(v79) = v24 + 1;
  VocOrThrow = (Voc *)ModelMgr::getVocOrThrow(v22, *v25, v16, v17, v18, v19, v20, v21);
  if (a2)
  {
    v33 = 0;
    while (1)
    {
      v34 = &a1[2 * v33];
      v35 = *v34;
      v36 = v34[1];
      v37 = *v34 & 0xFFFF0000;
      if (HIDWORD(v35))
        v38 = 0;
      else
        v38 = v37 == 0;
      if (!v38)
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      if ((unsigned __int16)v35 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      v45 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v35, v26, v27, v28, v29, v30, v31);
      v46 = v79;
      if (!(_DWORD)v79)
        goto LABEL_44;
      v47 = (unsigned __int16 *)v78;
      v48 = 0xFFFFFFFFLL;
      while (1)
      {
        v49 = *v47++;
        if (v49 == (unsigned __int16)v35)
          break;
        --v48;
        if (!--v46)
          goto LABEL_44;
      }
      if (!v48)
      {
LABEL_44:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v45, 1);
        v50 = v79;
        if ((_DWORD)v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          v50 = v79;
        }
        *((_WORD *)v78 + v50) = v35;
        LODWORD(v79) = v50 + 1;
      }
      v51 = v36 - 1;
      if ((v36 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      if (v51 >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      v52 = (WordList *)*((_QWORD *)v45 + 6);
      WordList::verifyVisible(v52, v51, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)v80 = 0;
      WordList::getNumProns((uint64_t *)v52, v51, &v80[1], v80);
      if (!(v80[1] + v80[0]))
        break;
      v83[v33++] = v51 & 0xFFFFFF | ((_DWORD)v35 << 25);
      if (v33 == a2)
        goto LABEL_53;
    }
  }
  else
  {
LABEL_53:
    if (!v76)
    {
LABEL_77:
      v73 = MemChunkAlloc(0xC0uLL, 0);
      PhonemeLattice::PhonemeLattice(v73, &v83);
      hasCommonProns = PhonemeLattice::hasCommonProns((unint64_t)v73, (uint64_t *)&v81, 0);
      if (v73)
      {
        (*(void (**)(uint64_t *))(*v73 + 48))(v73);
        MemChunkFree(v73, 0);
      }
      goto LABEL_80;
    }
    v53 = 0;
    while (1)
    {
      v54 = (unint64_t *)(a3 + 16 * v53);
      v55 = *v54;
      v56 = v54[1];
      v57 = *v54 & 0xFFFF0000;
      if (HIDWORD(v55))
        v58 = 0;
      else
        v58 = v57 == 0;
      if (!v58)
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      if ((unsigned __int16)v55 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      v65 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v55, v26, v27, v28, v29, v30, v31);
      v66 = v79;
      if (!(_DWORD)v79)
        goto LABEL_68;
      v67 = (unsigned __int16 *)v78;
      v68 = 0xFFFFFFFFLL;
      while (1)
      {
        v69 = *v67++;
        if (v69 == (unsigned __int16)v55)
          break;
        --v68;
        if (!--v66)
          goto LABEL_68;
      }
      if (!v68)
      {
LABEL_68:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v65, 1);
        v70 = v79;
        if ((_DWORD)v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          v70 = v79;
        }
        *((_WORD *)v78 + v70) = v55;
        LODWORD(v79) = v70 + 1;
      }
      v71 = v56 - 1;
      if ((v56 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      if (v71 >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      v72 = (WordList *)*((_QWORD *)v65 + 6);
      WordList::verifyVisible(v72, v71, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)v80 = 0;
      WordList::getNumProns((uint64_t *)v72, v71, &v80[1], v80);
      if (!(v80[1] + v80[0]))
        break;
      *((_DWORD *)v81 + v53++) = v71 & 0xFFFFFF | ((_DWORD)v55 << 25);
      if (v53 == v76)
        goto LABEL_77;
    }
  }
  hasCommonProns = 0;
LABEL_80:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
LABEL_82:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v85);
  return hasCommonProns;
}

void sub_2098FFD0C()
{
  __cxa_end_catch();
  JUMPOUT(0x2098FFD18);
}

uint64_t SDWord_WordsHavePrefixPron(unint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ModelMgr *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Voc *VocOrThrow;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const Voc *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  WordList *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const Voc *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  WordList *v72;
  uint64_t *v73;
  uint64_t hasCommonProns;
  unsigned int v76;
  void *v78;
  uint64_t v79;
  unsigned int v80[2];
  void *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  _BYTE v85[152];

  SdapiInsurance::SdapiInsurance(v85, "SDWord_WordsHavePrefixPron", 1, 1, 409);
  if (!v85[97])
  {
    hasCommonProns = 0;
    goto LABEL_82;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v14 = a1;
    else
      v14 = 0;
    v15 = a3;
    if (!gbShowCallPointerArguments)
      v15 = 0;
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, %llu, Masked:0x%016llx, %llu)\n", v7, v8, v9, v10, "SDWord_WordsHavePrefixPron", v14, a2, v15, a4);
  }
  if (!a1 && a2)
    throwBadLengthForNullPointer(a2, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  LOBYTE(v83) = 0;
  if (!a3 && a4)
    throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  LOBYTE(v83) = 0;
  if (a2 && a4)
  {
    v83 = 0;
    v84 = 0;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 619, (uint64_t)"sdapi/sdword", 8, (uint64_t)"%s", v12, v13, (char)&errStr_sdapi_sdword_E_ZERO_WORDS);
    v83 = 0;
    v84 = 0;
    if (!a2)
      goto LABEL_20;
  }
  v81 = 0;
  HIDWORD(v84) = realloc_array(0, &v81, 4 * a2, 0, 0, 1) >> 2;
  v83 = v81;
LABEL_20:
  LODWORD(v84) = a2;
  v81 = 0;
  v82 = 0;
  if (a4)
  {
    v78 = 0;
    HIDWORD(v82) = realloc_array(0, &v78, 4 * a4, 0, 0, 1) >> 2;
    v81 = v78;
  }
  LODWORD(v82) = a4;
  v80[1] = 0;
  v80[0] = 0;
  v22 = (ModelMgr *)ModelMgr::smpModelMgr;
  v78 = 0;
  v79 = 0;
  v23 = *a1;
  if (HIDWORD(*a1) || (v23 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", *a1, v16, v17, v18, v19, v20, v21);
  if ((unsigned __int16)v23 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", v23, v16, v17, v18, v19, v20, v21);
  v24 = v79;
  if ((_DWORD)v79 == HIDWORD(v79))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
    v24 = v79;
  }
  v76 = a4;
  v25 = (unsigned __int16 *)v78;
  *((_WORD *)v78 + v24) = v23;
  LODWORD(v79) = v24 + 1;
  VocOrThrow = (Voc *)ModelMgr::getVocOrThrow(v22, *v25, v16, v17, v18, v19, v20, v21);
  if (a2)
  {
    v33 = 0;
    while (1)
    {
      v34 = &a1[2 * v33];
      v35 = *v34;
      v36 = v34[1];
      v37 = *v34 & 0xFFFF0000;
      if (HIDWORD(v35))
        v38 = 0;
      else
        v38 = v37 == 0;
      if (!v38)
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      if ((unsigned __int16)v35 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      v45 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v35, v26, v27, v28, v29, v30, v31);
      v46 = v79;
      if (!(_DWORD)v79)
        goto LABEL_44;
      v47 = (unsigned __int16 *)v78;
      v48 = 0xFFFFFFFFLL;
      while (1)
      {
        v49 = *v47++;
        if (v49 == (unsigned __int16)v35)
          break;
        --v48;
        if (!--v46)
          goto LABEL_44;
      }
      if (!v48)
      {
LABEL_44:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v45, 1);
        v50 = v79;
        if ((_DWORD)v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          v50 = v79;
        }
        *((_WORD *)v78 + v50) = v35;
        LODWORD(v79) = v50 + 1;
      }
      v51 = v36 - 1;
      if ((v36 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      if (v51 >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      v52 = (WordList *)*((_QWORD *)v45 + 6);
      WordList::verifyVisible(v52, v51, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)v80 = 0;
      WordList::getNumProns((uint64_t *)v52, v51, &v80[1], v80);
      if (!(v80[1] + v80[0]))
        break;
      v83[v33++] = v51 & 0xFFFFFF | ((_DWORD)v35 << 25);
      if (v33 == a2)
        goto LABEL_53;
    }
  }
  else
  {
LABEL_53:
    if (!v76)
    {
LABEL_77:
      v73 = MemChunkAlloc(0xC0uLL, 0);
      PhonemeLattice::PhonemeLattice(v73, &v83);
      hasCommonProns = PhonemeLattice::hasCommonProns((unint64_t)v73, (uint64_t *)&v81, 1);
      if (v73)
      {
        (*(void (**)(uint64_t *))(*v73 + 48))(v73);
        MemChunkFree(v73, 0);
      }
      goto LABEL_80;
    }
    v53 = 0;
    while (1)
    {
      v54 = (unint64_t *)(a3 + 16 * v53);
      v55 = *v54;
      v56 = v54[1];
      v57 = *v54 & 0xFFFF0000;
      if (HIDWORD(v55))
        v58 = 0;
      else
        v58 = v57 == 0;
      if (!v58)
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      if ((unsigned __int16)v55 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      v65 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v55, v26, v27, v28, v29, v30, v31);
      v66 = v79;
      if (!(_DWORD)v79)
        goto LABEL_68;
      v67 = (unsigned __int16 *)v78;
      v68 = 0xFFFFFFFFLL;
      while (1)
      {
        v69 = *v67++;
        if (v69 == (unsigned __int16)v55)
          break;
        --v68;
        if (!--v66)
          goto LABEL_68;
      }
      if (!v68)
      {
LABEL_68:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v65, 1);
        v70 = v79;
        if ((_DWORD)v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          v70 = v79;
        }
        *((_WORD *)v78 + v70) = v55;
        LODWORD(v79) = v70 + 1;
      }
      v71 = v56 - 1;
      if ((v56 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      if (v71 >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      v72 = (WordList *)*((_QWORD *)v65 + 6);
      WordList::verifyVisible(v72, v71, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)v80 = 0;
      WordList::getNumProns((uint64_t *)v72, v71, &v80[1], v80);
      if (!(v80[1] + v80[0]))
        break;
      *((_DWORD *)v81 + v53++) = v71 & 0xFFFFFF | ((_DWORD)v55 << 25);
      if (v53 == v76)
        goto LABEL_77;
    }
  }
  hasCommonProns = 0;
LABEL_80:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
LABEL_82:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v85);
  return hasCommonProns;
}

void sub_20990037C()
{
  __cxa_end_catch();
  JUMPOUT(0x209900388);
}

uint64_t SDWord_GetWordsWithCommonPron(unint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WordList *v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  unsigned int v32[2];
  uint64_t v33;
  uint64_t v34;
  unsigned int v35[2];
  _BYTE v36[144];
  void *v37;

  SdapiInsurance::SdapiInsurance(v36, "SDWord_GetWordsWithCommonPron", 1, 1, 410);
  if (v36[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v15 = a3;
      else
        v15 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetWordsWithCommonPron", a1, a2, v15, a4);
    }
    if (!a3 && a4)
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    if ((a2 - 1) >> 32)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    if ((a2 - 1) >= 0xFFFFF4)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    *(_QWORD *)v35 = 0;
    WordList::getNumProns((uint64_t *)v23, a2 - 1, &v35[1], v35);
    if (v35[1] + v35[0])
    {
      v33 = 0;
      v34 = 0;
      WordList::getWordsWithCommonPron((uint64_t)v23, a2 - 1, (uint64_t)&v33);
      v31 = 0;
      *(_QWORD *)v32 = 0;
      if ((_DWORD)v34)
      {
        v37 = 0;
        v32[1] = realloc_array(0, &v37, 8 * v34, 0, 0, 1) >> 3;
        v25 = v37;
        v31 = v37;
        v26 = v34;
        if ((_DWORD)v34)
        {
          v27 = 0;
          LODWORD(v28) = v32[0];
          do
          {
            v29 = *(unsigned int *)(v33 + 4 * v27);
            if ((_DWORD)v28 == v32[1])
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v31, 1, 1);
              LODWORD(v28) = v32[0];
              v26 = v34;
            }
            v31[v28] = v29 + 1;
            v28 = (v28 + 1);
            v32[0] = v28;
            ++v27;
          }
          while (v27 < v26);
          v25 = v31;
          goto LABEL_30;
        }
      }
      else
      {
        v25 = 0;
      }
      v28 = v32[0];
LABEL_30:
      v24 = sdUtilItemMove(8, v25, v28, a3, a4);
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v31);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
      goto LABEL_31;
    }
  }
  v24 = 0;
LABEL_31:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v36);
  return v24;
}

void sub_209900614(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  ApiState *v12;
  DgnException *v13;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  if (a2 == 2)
  {
    v12 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v12, v13);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)va1);
      _Unwind_Resume(a1);
    }
    v14 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v14);
  }
  __cxa_end_catch();
  JUMPOUT(0x209900508);
}

uint64_t SDWord_GetHumanReadableProns(unint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WordList *v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];
  const void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[144];

  SdapiInsurance::SdapiInsurance(v34, "SDWord_GetHumanReadableProns", 1, 1, 416);
  if (v34[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v15 = a3;
      else
        v15 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetHumanReadableProns", a1, a2, v15, a4);
    }
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    if ((a2 - 1) >> 32)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    if ((a2 - 1) >= 0xFFFFF4)
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    v32 = 0;
    v33 = 0;
    WordList::lookupAll((uint64_t *)v23, a2 - 1, (uint64_t)&v32);
    DgnString::DgnString((DgnString *)&v30);
    if ((_DWORD)v33)
    {
      v24 = 0;
      do
      {
        DgnString::DgnString((DgnString *)v29);
        WordList::getHumanReadablePron(v23, *(_DWORD *)(v32 + 4 * v24), (DgnString *)v29);
        DgnString::operator+=(&v30, (uint64_t)v29);
        DgnString::operator+=(&v30, 0);
        DgnString::~DgnString((DgnString *)v29);
        ++v24;
      }
      while (v24 < v33);
    }
    DgnString::operator+=(&v30, 0);
    if (v31)
      v25 = v30;
    else
      v25 = &unk_209A7875B;
    if (v31)
      v26 = (v31 - 1);
    else
      v26 = 0;
    v27 = sdUtilItemMove(1, v25, v26, a3, a4);
    DgnString::~DgnString((DgnString *)&v30);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  else
  {
    v27 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v34);
  return v27;
}

void sub_209900954()
{
  __cxa_end_catch();
  JUMPOUT(0x209900960);
}

uint64_t loggableFileObject(uint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  void **v8;
  size_t v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v2 = *a1;
  if (*a1)
  {
    v3 = (const char *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0)
      v3 = *(const char **)v3;
  }
  else
  {
    v3 = "[dynamic object]";
  }
  v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") : ", 4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" attribute '", 12);
  v7 = (unsigned int *)a1[1];
  v8 = __p;
  loggableUnicode(v7, __p);
  if (v13 < 0)
    v8 = (void **)__p[0];
  v9 = strlen((const char *)v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"' : ", 4);
  if (v13 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD1496C](&v16);
}

void sub_209900AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t TFileObject::verify(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  char v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t *v44;
  int v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *__p[2];
  char v59;

  if (*(_DWORD *)(a1 + 40))
  {
    loggableFileObject((uint64_t *)a1);
    if (v59 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    tknPrintf("Error: %sBad attribute declaration, expected an object\n", v5, v6, v7, v8, v9);
    if (v59 < 0)
      operator delete(__p[0]);
    v10 = 1;
    return v10 & 1;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
    a4 = 1;
  if ((a4 & 1) == 0)
  {
    loggableFileObject((uint64_t *)a1);
    v19 = v59 >= 0 ? __p : (void **)__p[0];
    tknPrintf("Error: %sObject has no attributes\n", v15, v16, v17, v18, v19);
    if (v59 < 0)
      operator delete(__p[0]);
  }
  v10 = a4 ^ 1;
  LOBYTE(v56[0]) = 0;
  std::vector<BOOL>::vector(__p, a3, (unsigned __int8 *)v56);
  if (*(_QWORD *)a1)
    v20 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  else
    v20 = 0;
  if (v13)
  {
    while (1)
    {
      v21 = 0;
      if (a3)
        break;
LABEL_44:
      if (v21 == a3)
      {
LABEL_45:
        loggableFileObject((uint64_t *)v13);
        v42 = v56;
        if (v57 < 0)
          v42 = (void **)v56[0];
        tknPrintf("Error: %sInvalid attribute\n", v38, v39, v40, v41, v42);
        if (v57 < 0)
          operator delete(v56[0]);
        v10 = 1;
      }
      v13 = *(_QWORD *)(v13 + 16);
      if (!v13)
        goto LABEL_51;
    }
    v22 = (unint64_t *)(a2 + 24);
    while (wcscmp(*(const __int32 **)(v13 + 8), (const __int32 *)*(v22 - 3)))
    {
      ++v21;
      v22 += 4;
      if (a3 == v21)
        goto LABEL_45;
    }
    if ((*((_QWORD *)__p[0] + (v21 >> 6)) & (1 << v21)) != 0 && (*(_BYTE *)(v22 - 2) & 1) == 0)
    {
      loggableFileObject((uint64_t *)v13);
      v27 = v56;
      if (v57 < 0)
        v27 = (void **)v56[0];
      tknPrintf("Error: %sRedefinition\n", v23, v24, v25, v26, v27);
LABEL_40:
      if (v57 < 0)
        operator delete(v56[0]);
      v10 = 1;
      goto LABEL_43;
    }
    if (v20)
    {
      if (v20 < *(v22 - 1))
      {
        loggableFileObject((uint64_t *)v13);
        v32 = v56;
        if (v57 < 0)
          v32 = (void **)v56[0];
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version must be at least %lld\n",
          v28,
          v29,
          v30,
          v31,
          v32,
          v20,
          *(v22 - 1));
        goto LABEL_40;
      }
      if (v20 > *v22)
      {
        loggableFileObject((uint64_t *)v13);
        v37 = v56;
        if (v57 < 0)
          v37 = (void **)v56[0];
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version may not be greater than %lld\n",
          v33,
          v34,
          v35,
          v36,
          v37,
          v20,
          *v22);
        goto LABEL_40;
      }
    }
LABEL_43:
    *((_QWORD *)__p[0] + (v21 >> 6)) |= 1 << v21;
    goto LABEL_44;
  }
LABEL_51:
  if (a3)
  {
    v43 = 0;
    v44 = (unint64_t *)(a2 + 16);
    do
    {
      if (((*(_QWORD *)((char *)__p[0] + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) == 0
        && (*(_BYTE *)(v44 - 1) & 2) == 0
        && (!v20 || v20 >= *v44 && v20 <= v44[1]))
      {
        loggableFileObject((uint64_t *)a1);
        v45 = v57;
        v46 = (void **)v56[0];
        loggableUnicode((unsigned int *)*(v44 - 2), v54);
        if (v45 >= 0)
          v51 = v56;
        else
          v51 = v46;
        if (v55 >= 0)
          v52 = v54;
        else
          v52 = (void **)v54[0];
        tknPrintf("Error: %sMissing declaration of '%s'\n", v47, v48, v49, v50, v51, v52);
        if (v55 < 0)
          operator delete(v54[0]);
        if (v57 < 0)
          operator delete(v56[0]);
        v10 = 1;
      }
      ++v43;
      v44 += 4;
    }
    while (a3 != v43);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v10 & 1;
}

void sub_209900EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::verify(TFileObject *this, char a2, char a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *__p[2];
  char v22;

  v3 = *((_DWORD *)this + 10);
  if (v3)
  {
    if (v3 != 2 || (a2 & 1) != 0)
    {
      v14 = 0;
      if (**((_DWORD **)this + 3) || (a3 & 1) != 0)
        return v14;
      loggableFileObject((uint64_t *)this);
      if (v22 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      tknPrintf("Error: %sEmpty string not allowed here\n", v15, v16, v17, v18, v19);
    }
    else
    {
      loggableFileObject((uint64_t *)this);
      if (v22 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      tknPrintf("Error: %sRegExp not supported here\n", v4, v5, v6, v7, v8);
    }
  }
  else
  {
    loggableFileObject((uint64_t *)this);
    if (v22 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    tknPrintf("Error: %sBad attribute declaration, expected a string\n", v9, v10, v11, v12, v13);
  }
  if (v22 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_20990102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::getAttribute(uint64_t a1, __int32 *a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), a2))
      break;
  }
  return i;
}

void TFileObject::collectAttributes(uint64_t a1, __int32 *a2, void **a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v6 = (uint64_t)(a3 + 2);
    do
    {
      if (!wcscmp(*(const __int32 **)(v3 + 8), a2))
      {
        v8 = a3[1];
        v7 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v7)
        {
          v10 = ((char *)v8 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v11 = v7 - (_QWORD)*a3;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v6, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v3;
          v9 = v15 + 8;
          v17 = (char *)*a3;
          v16 = (char *)a3[1];
          if (v16 != *a3)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)*a3;
          }
          *a3 = v15;
          a3[1] = v9;
          a3[2] = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v8 = v3;
          v9 = v8 + 1;
        }
        a3[1] = v9;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
  }
}

void TFileObjectParser::TFileObjectParser(TFileObjectParser *this, const TLocaleInfo **a2)
{
  TAllocator *v4;
  const TLocaleInfo *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const TFileObject *Objects;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD *exception;
  std::string *v15;
  __int128 v16;
  _BYTE __p[24];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;

  v4 = (TFileObjectParser *)((char *)this + 8);
  TAllocator::TAllocator((TFileObjectParser *)((char *)this + 8), 2048);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = 0;
  if (TInputStream::verifyVersion((TInputStream *)a2, "ObjectFormatVersion", 1uLL, 1uLL, 1uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v20) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v19[0], (std::string::size_type)v19[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v19;
      v18 = v20;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v18 >= 0)
      v13 = &__p[8];
    else
      v13 = *(const char **)&__p[8];
    conditionalAssert(v13, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 247, v11, v12);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v18) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v15 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    *exception = &unk_24C214BA0;
  }
  TLexerLexicon::TLexerLexicon((TLexerLexicon *)v19, a2[22]);
  initLexicon((TRegExp **)v19);
  TLexer::TLexer((TLexer *)__p, (TInputStream *)a2, 1uLL, (const TLexerLexicon *)v19, 0);
  if (*((char *)a2 + 39) >= 0)
    v5 = (const TLocaleInfo *)(a2 + 2);
  else
    v5 = a2[2];
  MEMORY[0x20BD14750]((char *)this + 48, v5);
  *((_QWORD *)this + 9) = a2[12];
  Objects = TFileObjectParser::loadObjects(this, (TLexer *)__p, v6, v7, v8);
  v10 = TAllocator::allocate(v4, 48);
  *((_DWORD *)v10 + 10) = 0;
  v10[3] = Objects;
  v10[4] = 0;
  *v10 = this;
  v10[1] = &unk_209A7876C;
  v10[2] = 0;
  *(_QWORD *)this = v10;
  TLexer::~TLexer((TLexer *)__p);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)v19);
}

void sub_2099013D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  TAllocator *v36;
  void **v37;
  void *v38;
  int v39;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v35 + 71) < 0)
        operator delete(*v37);
      TAllocator::clear(v36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

TRegExpCompiler *initLexicon(TRegExp **a1)
{
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)&unk_209A787AC, 5);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)&unk_209A787B4, 6);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)&unk_209A787BC, 7);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)&unk_209A787C4, 8);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)&unk_209A787CC, 9);
  TLexerLexicon::addString(a1, 39, 3, 2);
  TLexerLexicon::addString(a1, 96, 4, 0);
  TLexerLexicon::addString(a1, 34, 2, 1);
  TLexerLexicon::addRegExp((uint64_t)a1, dword_209A787D4, 1);
  return TLexerLexicon::doneAdding(a1);
}

const TFileObject *TFileObjectParser::loadObjects(TFileObjectParser *this, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const TFileObject *v7;
  const TFileObject *i;
  const TFileObject *Object;
  const TFileObject *v10;

  if (*((_QWORD *)a2 + 3) < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
  {
    v7 = 0;
    i = 0;
    while (1)
    {
      Object = TFileObjectParser::makeObject((uint64_t)this, a2, (uint64_t)&unk_209A7876C, a4, a5);
      if (i)
      {
        *((_QWORD *)v7 + 2) = Object;
        v10 = Object;
        Object = v7;
        if (v10)
          goto LABEL_5;
      }
      else
      {
        v10 = (const TFileObject *)*((_QWORD *)Object + 2);
        for (i = Object; v10; v10 = (const TFileObject *)*((_QWORD *)v10 + 2))
LABEL_5:
          Object = v10;
      }
      v7 = Object;
      if (*((_QWORD *)a2 + 3) >= (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
        return i;
    }
  }
  return 0;
}

_QWORD *TFileObjectParser::TFileObjectParser(_QWORD *a1, uint64_t a2, uint64_t a3, const TLocaleInfo *a4)
{
  TAllocator *v7;
  TRegExp **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const TFileObject *Objects;
  _QWORD *v13;
  _BYTE v15[112];
  _BYTE v16[56];

  v7 = (TAllocator *)(a1 + 1);
  TAllocator::TAllocator((TAllocator *)(a1 + 1), 2048);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *a1 = 0;
  v8 = (TRegExp **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)v16, a4);
  initLexicon(v8);
  TLexer::TLexer(v15, a2, 1, v16, 0);
  MEMORY[0x20BD14750](a1 + 6, "[dynamic text object]");
  a1[9] = 1;
  Objects = TFileObjectParser::loadObjects((TFileObjectParser *)a1, (TLexer *)v15, v9, v10, v11);
  v13 = TAllocator::allocate(v7, 48);
  *((_DWORD *)v13 + 10) = 0;
  v13[3] = Objects;
  v13[4] = 0;
  *v13 = a1;
  v13[1] = &unk_209A7876C;
  v13[2] = 0;
  *a1 = v13;
  TLexer::~TLexer((TLexer *)v15);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)v16);
  return a1;
}

void sub_209901710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  TAllocator *v3;
  void **v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  TLexer::~TLexer((TLexer *)va);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)(v5 - 104));
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  TAllocator::clear(v3);
  _Unwind_Resume(a1);
}

void TFileObjectParser::~TFileObjectParser(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  TAllocator::clear((TAllocator *)(this + 1));
}

__n128 TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2, const TFileObject *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  __int32 *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  __n128 result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  _QWORD *exception;
  std::string *v49;
  __int128 v50;
  _BYTE v51[24];
  uint64_t v52;
  void *__p[2];
  uint64_t v54;
  __int32 *v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int32 __s2[256];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)a2 + 10);
  if (!v6)
  {
    v23 = *((_QWORD *)a2 + 3);
    if (!v23)
    {
      v7 = 0;
LABEL_58:
      v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      v36 = *((_QWORD *)a2 + 4);
      *((_DWORD *)v34 + 10) = 0;
      v34[4] = v36;
      goto LABEL_59;
    }
    i = 0;
    v7 = 0;
    v25 = 0;
    while (!wcscmp(*(const __int32 **)(v23 + 8), dword_209A7877C))
    {
LABEL_49:
      v23 = *(_QWORD *)(v23 + 16);
      if (!v23)
        goto LABEL_58;
    }
    v26 = TFileObjectParser::instantiateObject(this, (const TFileObject *)v23, a3);
    if (v7)
    {
      *(_QWORD *)(i + 16) = v26;
      v28 = v26;
      if (v26)
        goto LABEL_47;
    }
    else
    {
      v28 = *(_QWORD *)(v26 + 16);
      v7 = (_QWORD *)v26;
      for (i = v26; v28; v28 = *(_QWORD *)(v28 + 16))
LABEL_47:
        i = v28;
    }
    v25 |= v27 & 1;
    goto LABEL_49;
  }
  if (v6 != 3)
  {
    v29 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
    *((_DWORD *)v29 + 10) = *((_DWORD *)a2 + 10);
    result = *(__n128 *)a2;
    *(_OWORD *)v29 = *(_OWORD *)a2;
    v29[4] = *((_QWORD *)a2 + 4);
    v29[2] = *((_QWORD *)a2 + 2);
    v31 = *((_QWORD *)a2 + 3);
    v29[2] = 0;
    v29[3] = v31;
    return result;
  }
  v7 = (_QWORD *)*((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a3 + 3);
  if (v8)
  {
    v9 = 0;
    do
    {
      v55 = __s2;
      v56 = xmmword_209A57DD0;
      v58 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&v55, dword_209A78770);
      v10 = 0;
      v11 = *(int **)(v8 + 8);
      while (v11[v10++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), v11, v10 - 1);
      *(_DWORD *)v51 = 41;
      TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), (int *)v51, 1uLL);
      if (*((_QWORD *)&v56 + 1) >= (unint64_t)v56)
      {
        if (v58)
        {
          *(_DWORD *)v51 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), (int *)v51, 1uLL);
          --*((_QWORD *)&v56 + 1);
        }
        else if ((_QWORD)v56)
        {
          v55[(_QWORD)v56 - 1] = 0;
        }
      }
      else
      {
        v55[*((_QWORD *)&v56 + 1)] = 0;
      }
      if (!*(_DWORD *)(v8 + 40) && !wcscmp(__s2, (const __int32 *)v7))
      {
        v7 = *(_QWORD **)(v8 + 24);
        if (v7)
        {
          v19 = 0;
          v9 = 0;
          do
          {
            v20 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
            *((_DWORD *)v20 + 10) = *((_DWORD *)v7 + 10);
            *(_OWORD *)v20 = *(_OWORD *)v7;
            v20[4] = v7[4];
            v20[2] = v7[2];
            v21 = v7[3];
            v20[2] = 0;
            v20[3] = v21;
            if (v9)
            {
              v19[2] = v20;
              do
              {
                v22 = v20;
                v20 = (_QWORD *)v20[2];
              }
              while (v20);
              v20 = v22;
            }
            else
            {
              v9 = v20;
            }
            v7 = (_QWORD *)v7[2];
            v19 = v20;
          }
          while (v7);
        }
        else
        {
          v9 = 0;
        }
        v17 = 0;
      }
      else
      {
        v13 = wcsstr((__int32 *)v7, __s2);
        if (v13)
        {
          if (!*(_DWORD *)(v8 + 40))
          {
            loggableFileObject((uint64_t *)a2);
            v37 = v51[23];
            v38 = *(_BYTE **)v51;
            loggableFileObject((uint64_t *)v8);
            v43 = v51;
            if (v37 < 0)
              v43 = v38;
            if (v54 >= 0)
              v44 = __p;
            else
              v44 = (void **)__p[0];
            tknPrintf("Error: %s%sCannot instantiate\n", v39, v40, v41, v42, v43, v44);
            if (SHIBYTE(v54) < 0)
              operator delete(__p[0]);
            if ((v51[23] & 0x80000000) != 0)
              operator delete(*(void **)v51);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v51 = aPpx;
            if (SHIBYTE(v54) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v51[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v51[8] = *(_OWORD *)__p;
              v52 = v54;
            }
            *(_QWORD *)v51 = &unk_24C216908;
            if (v52 >= 0)
              v47 = &v51[8];
            else
              v47 = *(const char **)&v51[8];
            conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 366, v45, v46);
            *(_QWORD *)v51 = aPpx;
            if (SHIBYTE(v52) < 0)
              operator delete(*(void **)&v51[8]);
            if (SHIBYTE(v54) < 0)
              operator delete(__p[0]);
            exception = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v51, &byte_209A88803);
            *exception = aPpx;
            v49 = (std::string *)(exception + 1);
            if ((v51[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v51, *(std::string::size_type *)&v51[8]);
            }
            else
            {
              v50 = *(_OWORD *)v51;
              exception[3] = *(_QWORD *)&v51[16];
              *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
            }
            *exception = &unk_24C216908;
          }
          v14 = wcslen(__s2);
          wcscpy(__s2, (const __int32 *)v7);
          wcscpy((__int32 *)((char *)__s2 + (char *)v13 - (char *)v7), *(const __int32 **)(v8 + 24));
          wcscat(__s2, &v13[v14]);
          v15 = wcslen(__s2);
          if ((v15 + 1) >> 62)
            v16 = -1;
          else
            v16 = 4 * (v15 + 1);
          v7 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), v16);
          wcscpy((__int32 *)v7, __s2);
        }
        v17 = 1;
      }
      if (v58)
      {
        if (v55 != (__int32 *)&v57 && v55 != 0)
          MEMORY[0x20BD149A8]();
      }
      if (!v17)
        break;
      v8 = *(_QWORD *)(v8 + 16);
    }
    while (v8);
    if (v9)
    {
      v32 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      v33 = *((_QWORD *)a2 + 4);
      *((_DWORD *)v32 + 10) = 0;
      v32[4] = v33;
      result = *(__n128 *)a2;
      *(_OWORD *)v32 = *(_OWORD *)a2;
      v32[2] = 0;
      v32[3] = v9;
      return result;
    }
  }
  v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
  v35 = *((_QWORD *)a2 + 4);
  *((_DWORD *)v34 + 10) = *((_DWORD *)a2 + 10);
  v34[4] = v35;
LABEL_59:
  result = *(__n128 *)a2;
  *(_OWORD *)v34 = *(_OWORD *)a2;
  v34[2] = 0;
  v34[3] = v7;
  return result;
}

void sub_209901D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x488]))
      {
        if (a26 != a12 && a26 != 0)
          MEMORY[0x20BD149A8]();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2)
{
  const TFileObject **v4;
  unint64_t v5;
  const TFileObject *i;
  const TFileObject *v7;
  const TFileObject *v8;
  char v9;
  const TFileObject *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _QWORD *exception;
  std::string *v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  _BYTE __p[24];
  uint64_t v26;
  const TFileObject **v27;
  const TFileObject **v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  TFileObject::collectAttributes((uint64_t)a2, dword_209A7877C, (void **)&v27);
  v4 = v27;
  if (v27 != v28)
  {
    v5 = 0;
    i = 0;
    v7 = 0;
    while (1)
    {
      TFileObjectParser::instantiateObject(this, a2, v4[v5]);
      if ((v9 & 1) == 0)
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0)
          v16 = __p;
        else
          v16 = *(_BYTE **)__p;
        tknPrintf("Error: %sNothing to instantiate\n", v12, v13, v14, v15, v16);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v23, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v24) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v23[0], (std::string::size_type)v23[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v23;
          v26 = v24;
        }
        *(_QWORD *)__p = &unk_24C216908;
        if (v26 >= 0)
          v19 = &__p[8];
        else
          v19 = *(const char **)&__p[8];
        conditionalAssert(v19, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 441, v17, v18);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v26) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v24) < 0)
          operator delete(v23[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v21 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v22 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        }
        *exception = &unk_24C216908;
      }
      if (v7)
      {
        *((_QWORD *)i + 2) = v8;
        v10 = v8;
        if (v8)
          goto LABEL_6;
      }
      else
      {
        v10 = (const TFileObject *)*((_QWORD *)v8 + 2);
        v7 = v8;
        for (i = v8; v10; v10 = (const TFileObject *)*((_QWORD *)v10 + 2))
LABEL_6:
          i = v10;
      }
      ++v5;
      v4 = v27;
      if (v5 >= v28 - v27)
        goto LABEL_12;
    }
  }
  v7 = a2;
LABEL_12:
  if (v4)
  {
    v28 = v4;
    operator delete(v4);
  }
  return v7;
}

void sub_209902078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a27)
        operator delete(a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::makeObject(uint64_t a1, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int32 *v5;
  uint64_t Token;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  __int32 *v27;
  _QWORD *v28;
  _QWORD *j;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t i;
  size_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t Object;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  _QWORD *v72;
  std::string *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  const char *v96;
  _QWORD *exception;
  std::string *v98;
  const char *v99;
  _QWORD *v100;
  std::string *v101;
  const char *v102;
  _QWORD *v103;
  std::string *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  void *__p[2];
  uint64_t v109;
  _BYTE v110[24];
  uint64_t v111;

  v5 = (__int32 *)a3;
  Token = nextToken(a2, (uint64_t)a2, a3, a4, a5);
  v13 = Token;
  v14 = *(_QWORD *)Token;
  if (*(_QWORD *)Token == 1)
  {
    v15 = wcslen(*(const __int32 **)(Token + 8));
    if ((v15 + 1) >> 62)
      v16 = -1;
    else
      v16 = 4 * (v15 + 1);
    v5 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v16);
    wcscpy(v5, *(const __int32 **)(v13 + 8));
    if (*(_QWORD *)nextToken(a2, v17, v18, v19, v20) != 5)
    {
      loggableToken((uint64_t)a2);
      if (v110[23] >= 0)
        v78 = v110;
      else
        v78 = *(_BYTE **)v110;
      tknPrintf("Error: %sSyntax error, missing '='\n", v74, v75, v76, v77, v78);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v110 = aPpx;
      if (SHIBYTE(v109) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v110[8] = *(_OWORD *)__p;
        v111 = v109;
      }
      *(_QWORD *)v110 = &unk_24C215870;
      if (v111 >= 0)
        v96 = &v110[8];
      else
        v96 = *(const char **)&v110[8];
      conditionalAssert(v96, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 488, v79, v80);
      *(_QWORD *)v110 = aPpx;
      if (SHIBYTE(v111) < 0)
        operator delete(*(void **)&v110[8]);
      if (SHIBYTE(v109) < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v110, &byte_209A88803);
      *exception = aPpx;
      v98 = (std::string *)(exception + 1);
      if ((v110[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
      }
      else
      {
        v105 = *(_OWORD *)v110;
        exception[3] = *(_QWORD *)&v110[16];
        *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v105;
      }
      *exception = &unk_24C215870;
    }
    v13 = nextToken(a2, v21, v22, v23, v24);
    v14 = *(_QWORD *)v13;
  }
  switch(v14)
  {
    case 2:
      v25 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v25 + 1) >> 62)
        v26 = -1;
      else
        v26 = 4 * (v25 + 1);
      v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v26);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v28;
      v30 = *(_QWORD *)(v13 + 16);
      v31 = 3;
      goto LABEL_33;
    case 3:
      v47 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v47 + 1) >> 62)
        v48 = -1;
      else
        v48 = 4 * (v47 + 1);
      v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v48);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v28;
      v30 = *(_QWORD *)(v13 + 16);
      v31 = 1;
      goto LABEL_33;
    case 4:
      v42 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v42 + 1) >> 62)
        v43 = -1;
      else
        v43 = 4 * (v42 + 1);
      v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v43);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v28;
      v30 = *(_QWORD *)(v13 + 16);
      v31 = 2;
LABEL_33:
      *((_DWORD *)v28 + 10) = v31;
      v28[3] = v27;
      v28[4] = v30;
      *v28 = a1;
      v28[1] = v5;
      v28[2] = 0;
      return (const TFileObject *)j;
    case 6:
      v44 = (_QWORD *)nextToken(a2, v9, v10, v11, v12);
      if (*v44 == 7)
      {
        v45 = v44;
        i = 0;
        goto LABEL_48;
      }
      v50 = 0;
      i = 0;
      while (1)
      {
        v51 = *((_QWORD *)a2 + 3);
        if (v51)
          *((_QWORD *)a2 + 3) = v51 - 1;
        Object = TFileObjectParser::makeObject(a1, a2, &unk_209A7876C);
        v57 = Object;
        if (i)
        {
          *(_QWORD *)(v50 + 16) = Object;
          v58 = Object;
          v57 = v50;
          if (Object)
            goto LABEL_43;
        }
        else
        {
          v58 = *(_QWORD *)(Object + 16);
          for (i = Object; v58; v58 = *(_QWORD *)(v58 + 16))
LABEL_43:
            v57 = v58;
        }
        v59 = (_QWORD *)nextToken(a2, v53, v54, v55, v56);
        v50 = v57;
        if (*v59 == 7)
        {
          v45 = v59;
LABEL_48:
          j = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
          v60 = v45[2];
          *((_DWORD *)j + 10) = 0;
          j[3] = i;
          j[4] = v60;
          *j = a1;
          j[1] = v5;
          j[2] = 0;
          return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
        }
      }
    case 8:
      v32 = nextToken(a2, v9, v10, v11, v12);
      j = 0;
      v33 = 0;
      while (2)
      {
        if (*(_QWORD *)v32 != 9)
        {
          if (*(_QWORD *)v32 == 1)
          {
            loggableToken((uint64_t)a2);
            v61 = v110[23];
            v62 = *(_BYTE **)v110;
            loggableUnicode(*(unsigned int **)(v32 + 8), __p);
            if (v61 >= 0)
              v67 = v110;
            else
              v67 = v62;
            if (v109 >= 0)
              v68 = __p;
            else
              v68 = (void **)__p[0];
            tknPrintf("Error: %sUnexpected attribute name '%s' in assignment list\n", v63, v64, v65, v66, v67, v68);
            if (SHIBYTE(v109) < 0)
              operator delete(__p[0]);
            if ((v110[23] & 0x80000000) != 0)
              operator delete(*(void **)v110);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v110 = aPpx;
            if (SHIBYTE(v109) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v110[8] = *(_OWORD *)__p;
              v111 = v109;
            }
            *(_QWORD *)v110 = &unk_24C215870;
            if (v111 >= 0)
              v71 = &v110[8];
            else
              v71 = *(const char **)&v110[8];
            conditionalAssert(v71, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 524, v69, v70);
            *(_QWORD *)v110 = aPpx;
            if (SHIBYTE(v111) < 0)
              operator delete(*(void **)&v110[8]);
            if (SHIBYTE(v109) < 0)
              operator delete(__p[0]);
            v72 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v110, &byte_209A88803);
            *v72 = aPpx;
            v73 = (std::string *)(v72 + 1);
            if ((v110[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
            }
            else
            {
              v95 = *(_OWORD *)v110;
              v72[3] = *(_QWORD *)&v110[16];
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v95;
            }
            *v72 = &unk_24C215870;
          }
          v34 = *((_QWORD *)a2 + 3);
          if (v34)
            *((_QWORD *)a2 + 3) = v34 - 1;
          v35 = TFileObjectParser::makeObject(a1, a2, v5);
          v40 = v35;
          if (j)
          {
            *(_QWORD *)(v33 + 16) = v35;
            v41 = v35;
            v40 = v33;
            if (v35)
              goto LABEL_19;
          }
          else
          {
            v41 = *(_QWORD *)(v35 + 16);
            for (j = (_QWORD *)v35; v41; v41 = *(_QWORD *)(v41 + 16))
LABEL_19:
              v40 = v41;
          }
          v32 = nextToken(a2, v36, v37, v38, v39);
          v33 = v40;
          continue;
        }
        break;
      }
      if (!j)
      {
        loggableToken((uint64_t)a2);
        if (v110[23] >= 0)
          v85 = v110;
        else
          v85 = *(_BYTE **)v110;
        tknPrintf("Error: %sAssignment list is empty\n", v81, v82, v83, v84, v85);
        if ((v110[23] & 0x80000000) != 0)
          operator delete(*(void **)v110);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v110 = aPpx;
        if (SHIBYTE(v109) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v110[8] = *(_OWORD *)__p;
          v111 = v109;
        }
        *(_QWORD *)v110 = &unk_24C215870;
        if (v111 >= 0)
          v99 = &v110[8];
        else
          v99 = *(const char **)&v110[8];
        conditionalAssert(v99, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 536, v86, v87);
        *(_QWORD *)v110 = aPpx;
        if (SHIBYTE(v111) < 0)
          operator delete(*(void **)&v110[8]);
        if (SHIBYTE(v109) < 0)
          operator delete(__p[0]);
        v100 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v110, &byte_209A88803);
        *v100 = aPpx;
        v101 = (std::string *)(v100 + 1);
        if ((v110[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
        }
        else
        {
          v106 = *(_OWORD *)v110;
          v100[3] = *(_QWORD *)&v110[16];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v106;
        }
        *v100 = &unk_24C215870;
      }
      if (!*((_DWORD *)j + 10))
        return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
      return (const TFileObject *)j;
    default:
      loggableToken((uint64_t)a2);
      if (v110[23] >= 0)
        v92 = v110;
      else
        v92 = *(_BYTE **)v110;
      tknPrintf("Error: %sSyntax error\n", v88, v89, v90, v91, v92);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v110 = aPpx;
      if (SHIBYTE(v109) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v110[8] = *(_OWORD *)__p;
        v111 = v109;
      }
      *(_QWORD *)v110 = &unk_24C215870;
      if (v111 >= 0)
        v102 = &v110[8];
      else
        v102 = *(const char **)&v110[8];
      conditionalAssert(v102, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 571, v93, v94);
      *(_QWORD *)v110 = aPpx;
      if (SHIBYTE(v111) < 0)
        operator delete(*(void **)&v110[8]);
      if (SHIBYTE(v109) < 0)
        operator delete(__p[0]);
      v103 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v110, &byte_209A88803);
      *v103 = aPpx;
      v104 = (std::string *)(v103 + 1);
      if ((v110[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
      }
      else
      {
        v107 = *(_OWORD *)v110;
        v103[3] = *(_QWORD *)&v110[16];
        *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v107;
      }
      *v103 = &unk_24C215870;
  }
}

void sub_209902A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_209902E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void TProp<BOOL>::~TProp()
{
  JUMPOUT(0x20BD149A8);
}

void MrecInitModule_gpuscsm_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;

  if (!gParDiagnosticGPUMaxFramesInBatch)
  {
    v0 = MemChunkAlloc(0x38uLL, 0);
    v2 = 0x8000000001;
    v1 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v0, (uint64_t)"DiagnosticGPUMaxFramesInBatch", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, 32, &v2, 0);
    *v1 = &unk_24C214A58;
    gParDiagnosticGPUMaxFramesInBatch = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticGPUMaxFramesInBatch);
  }
}

void ChannelStats::~ChannelStats(ChannelStats *this)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
}

void ChannelStats::printSize(ChannelStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 162, (DgnString *)&v169);
  if ((_DWORD)v170)
    v16 = v169;
  else
    v16 = &unk_209A78810;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A78810, a3, &unk_209A78810, v16);
  DgnString::~DgnString((DgnString *)&v169);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A78810);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 163, (DgnString *)&v169);
  if ((_DWORD)v170)
    v28 = v169;
  else
    v28 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v33 = v169;
  else
    v33 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v38 = v169;
  else
    v38 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v38, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v43 = v169;
  else
    v43 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v43, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v48 = v169;
  else
    v48 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v48, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v53 = v169;
  else
    v53 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v53, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v58 = v169;
  else
    v58 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v58, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v63 = v169;
  else
    v63 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_209A78810, (34 - a3), (34 - a3), v63, 4, 4, 0);
  v168 = a3;
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 12;
  else
    v64 = 16;
  v65 = *((_DWORD *)this + 10);
  v66 = *((_DWORD *)this + 11);
  v67 = v66 >= v65;
  v68 = v66 - v65;
  if (v67)
  {
    v70 = v65 & ~(v65 >> 31);
    v65 = 0;
    v69 = v64 + v70;
    v64 += v70 + v68;
  }
  else
  {
    v69 = v64;
  }
  v71 = v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v76 = v169;
  else
    v76 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v22, &unk_209A78810, v23, v23, v76, v64, v69, v71);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v64;
  *a5 += v69;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v77 = 12;
  else
    v77 = 16;
  v78 = *((_DWORD *)this + 14);
  v79 = *((_DWORD *)this + 15);
  v67 = v79 >= v78;
  v80 = v79 - v78;
  if (v67)
  {
    v82 = v78 & ~(v78 >> 31);
    v78 = 0;
    v81 = v77 + v82;
    v77 += v82 + v80;
  }
  else
  {
    v81 = v77;
  }
  v83 = v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v88 = v169;
  else
    v88 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v22, &unk_209A78810, v23, v23, v88, v77, v81, v83);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v77;
  *a5 += v81;
  *a6 += v83;
  v89 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 64, 0);
  v90 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 64, 1);
  v169 = 0;
  v170 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v169);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v95 = v169;
  else
    v95 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v22, &unk_209A78810, v23, v23, v95, v89, v90, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v89;
  *a5 += v90;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v100 = v169;
  else
    v100 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v22, &unk_209A78810, v23, v23, v100, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v105 = v169;
  else
    v105 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v22, &unk_209A78810, v23, v23, v105, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v110 = v169;
  else
    v110 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v22, &unk_209A78810, v23, v23, v110, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v111 = 12;
  else
    v111 = 16;
  v112 = *((_DWORD *)this + 24);
  v113 = *((_DWORD *)this + 25);
  v67 = v113 >= v112;
  v114 = v113 - v112;
  if (v67)
  {
    v116 = v112 & ~(v112 >> 31);
    v112 = 0;
    v115 = v111 + v116;
    v111 += v116 + v114;
  }
  else
  {
    v115 = v111;
  }
  v117 = v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v122 = v169;
  else
    v122 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v22, &unk_209A78810, v23, v23, v122, v111, v115, v117);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v111;
  *a5 += v115;
  *a6 += v117;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v123 = 12;
  else
    v123 = 16;
  v124 = *((_DWORD *)this + 28);
  v125 = *((_DWORD *)this + 29);
  v67 = v125 >= v124;
  v126 = v125 - v124;
  if (v67)
  {
    v128 = v124 & ~(v124 >> 31);
    v124 = 0;
    v127 = v123 + v128;
    v123 += v128 + v126;
  }
  else
  {
    v127 = v123;
  }
  v129 = v124;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v134 = v169;
  else
    v134 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_209A78810, v23, v23, v134, v123, v127, v129);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v123;
  *a5 += v127;
  *a6 += v129;
  v135 = (char *)this + 120;
  v136 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 120, 0);
  v137 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)v135, 1);
  v169 = 0;
  v170 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v169);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v142 = v169;
  else
    v142 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v22, &unk_209A78810, v23, v23, v142, v136, v137, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v136;
  *a5 += v137;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v147 = v169;
  else
    v147 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v22, &unk_209A78810, v23, v23, v147, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v152 = v169;
  else
    v152 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v22, &unk_209A78810, v23, v23, v152, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v157 = v169;
  else
    v157 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v22, &unk_209A78810, v23, v23, v157, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if ((_DWORD)v170)
    v162 = v169;
  else
    v162 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v22, &unk_209A78810, v23, v23, v162, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 166, (DgnString *)&v169);
  if ((_DWORD)v170)
    v167 = v169;
  else
    v167 = &unk_209A78810;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v168, &unk_209A78810, (35 - v168), (35 - v168), v167, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v169);
}

void sub_209903B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ChannelStats::saveChannelStats(ChannelStats *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    ChannelStats::saveCST(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x10u, a5, "MRCST!?", 19, 4);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this + 2, &v10);
    writeObject((uint64_t)v8, (int *)this + 3, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 8, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 9, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 10, &v10);
    writeObject((uint64_t)v8, (int *)this + 6, &v10);
    writeObject((uint64_t)v8, (int *)this + 7, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 48, &v10);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 64, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 40, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 41, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 42, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 88, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 104, &v10);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 120, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 68, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 69, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 70, &v10);
    writeObject((uint64_t)v8, (int *)this + 36, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x10u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void ChannelStats::saveCST(ChannelStats *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  const char *v16;
  char *v17;
  const char *v18;
  int v19;
  const char *v20;
  char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t i;
  int v30;
  const char *v31;
  int v32;
  void *v33[2];
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v38);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v38, (uint64_t)a2, 0x11u, a3);
  v36 = 0;
  v37 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v38, sCST_Versions, (uint64_t)&v36, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v38, "ChannelStatisticsText", (_QWORD *)(v36 + 8 * (v37 - 1)));
  v11 = *((_DWORD *)this + 7);
  if (*((_DWORD *)this + 24) != v11
    && *((_DWORD *)this + 28) != v11
    && *((__int16 *)this + 68) == -1
    && *((_DWORD *)this + 32) != v11
    && *((__int16 *)this + 69) == -1
    && *((__int16 *)this + 70) == -1
    && *((_DWORD *)this + 36) == -1)
  {
    v13 = 0;
    v12 = 4;
  }
  else
  {
    v12 = 5;
    v13 = 1;
  }
  v34 = 0;
  v35 = 0;
  v33[0] = 0;
  v14 = realloc_array(0, v33, (4 * v12), 0, 0, 1);
  v34 = v33[0];
  LODWORD(v35) = v12;
  HIDWORD(v35) = v14 >> 2;
  DgnArray<DgnString>::DgnArray(v33, v12);
  *v34 = 0;
  DgnString::operator=((DgnString *)v33[0], "TableName");
  v34[1] = 3;
  DgnString::operator=((DgnString *)((char *)v33[0] + 16), "RowIndex");
  v34[2] = 3;
  DgnString::operator=((DgnString *)((char *)v33[0] + 32), "ColumnIndex");
  v34[3] = 1;
  DgnString::operator=((DgnString *)((char *)v33[0] + 48), "TableEntry");
  if (v13)
  {
    v34[4] = 1;
    DgnString::operator=((DgnString *)((char *)v33[0] + 64), "BackupTableEntry");
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v38, (uint64_t)&v34, (uint64_t)v33);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "NumberOfSpectralWarpChoices", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "ChannelNormalizationFeatureDim", *((unsigned int *)this + 7));
  DgnString::DgnString((DgnString *)&v31);
  if (*((_WORD *)this + 8) == 1)
    v15 = "NoMeansNorm";
  else
    v15 = "ChannelMeansSubtraction";
  DgnString::operator=((DgnString *)&v31, v15);
  if (v32)
    v16 = v31;
  else
    v16 = (const char *)&unk_209A78810;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "ChannelMeansNormalizationType", v16);
  if (*((_WORD *)this + 9) == 1)
    v17 = "NoVarianceNorm";
  else
    v17 = "ChannelVarianceNorm";
  DgnString::operator=((DgnString *)&v31, v17);
  if (v32)
    v18 = v31;
  else
    v18 = (const char *)&unk_209A78810;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "ChannelVarianceNormalizationType", v18);
  v19 = *((unsigned __int16 *)this + 10);
  v20 = "InterpolatedCDFNorm";
  if (v19 == 2)
    v20 = "SmoothedCDFNorm";
  if (v19 == 1)
    v21 = "NoCDFNorm";
  else
    v21 = (char *)v20;
  DgnString::operator=((DgnString *)&v31, v21);
  if (v32)
    v22 = v31;
  else
    v22 = (const char *)&unk_209A78810;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "CDFNormalizationType", v22);
  if (*((_WORD *)this + 10) != 1)
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "CDFNormalizationSum", *((unsigned int *)this + 6));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v38, "HasBackupChannelStatistics", v13);
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "UttDetBackgroundLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 41));
  if (v13)
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((__int16 *)this + 69));
  DgnTextFileWriter::writeNextLine(v38);
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "UttDetSpeechLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 42));
  if (v13)
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((__int16 *)this + 70));
  DgnTextFileWriter::writeNextLine(v38);
  if (*((_DWORD *)this + 2))
  {
    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChosenSpectralWarpIndex");
    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((_DWORD *)this + 3));
    if (v13)
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((_DWORD *)this + 36));
    DgnTextFileWriter::writeNextLine(v38);
  }
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelSilenceLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 40));
  if (v13)
  {
    if (*((__int16 *)this + 69) == -1)
      v23 = -1;
    else
      v23 = *((__int16 *)this + 68);
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v23);
  }
  DgnTextFileWriter::writeNextLine(v38);
  if (*((_WORD *)this + 8) == 2 && *((_DWORD *)this + 7))
  {
    v24 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelMeans");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, v24);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *(unsigned __int8 *)(*((_QWORD *)this + 4) + v24));
      if (v13)
      {
        if (*((_DWORD *)this + 24) == *((_DWORD *)this + 7))
          v25 = *(unsigned __int8 *)(*((_QWORD *)this + 11) + v24);
        else
          v25 = -1;
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v25);
      }
      DgnTextFileWriter::writeNextLine(v38);
      ++v24;
    }
    while (v24 < *((unsigned int *)this + 7));
  }
  if (*((_WORD *)this + 9) == 2 && *((_DWORD *)this + 7))
  {
    v26 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelVariance");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, v26);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *(unsigned __int8 *)(*((_QWORD *)this + 6) + v26));
      if (v13)
      {
        if (*((_DWORD *)this + 28) == *((_DWORD *)this + 7))
          v27 = *(unsigned __int8 *)(*((_QWORD *)this + 13) + v26);
        else
          v27 = -1;
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v27);
      }
      DgnTextFileWriter::writeNextLine(v38);
      ++v26;
    }
    while (v26 < *((unsigned int *)this + 7));
  }
  if (*((_WORD *)this + 10) != 1 && *((_DWORD *)this + 7))
  {
    v28 = 0;
    do
    {
      for (i = 0; i != 256; ++i)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "CDFNormalizationHistogram");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, v28);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, i);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 3u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 16 * v28) + 4 * i));
        if (v13)
        {
          if (*((_DWORD *)this + 32) == *((_DWORD *)this + 7))
            v30 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 16 * v28) + 4 * i);
          else
            v30 = -1;
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v30);
        }
        DgnTextFileWriter::writeNextLine(v38);
      }
      ++v28;
    }
    while (v28 < *((unsigned int *)this + 7));
  }
  DgnString::~DgnString((DgnString *)&v31);
  DgnArray<DgnString>::releaseAll((uint64_t)v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v36);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v38);
}

void sub_2099044B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

uint64_t FstHmmNet::attachInPort(uint64_t this, unsigned int a2, Node *a3)
{
  *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2) = this + 144;
  return this;
}

uint64_t FstHmmNet::getExitContext(FstHmmNet *this)
{
  return (uint64_t)this + 120;
}

uint64_t FstHmmNet::getExitContextPtr(FstHmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::scoreNetInternal(FstCore **this, int a2, int a3, uint64_t a4)
{
  __int16 BestExitScore;
  uint64_t v6;
  uint64_t result;
  FstCore *v8;

  FstCore::doFrameEmbedded(this[17], a4, 0);
  *((_DWORD *)this + 26) = FstCore::getNActiveStates(this[17]);
  BestExitScore = FstCore::getBestExitScore(this[17]);
  *((_WORD *)this + 54) = BestExitScore;
  if (BestExitScore != 20000)
  {
    v6 = *(_QWORD *)this[9];
    *(_WORD *)(v6 + 8) = BestExitScore;
    *(_QWORD *)v6 = **(unsigned int **)this[7];
  }
  result = FstCore::getBestScoreMaybeUpdateFstNode((uint64_t)this[17]);
  if ((_DWORD)result != 20000)
  {
    v8 = this[1];
    if (*((_DWORD *)v8 + 56) >= (int)result)
      return BestData::newOrTiedBestNode((uint64_t)v8 + 192, result, (const Node *)((char *)this + 156), 0);
  }
  return result;
}

uint64_t FstHmmNet::getBestScore()
{
  return 0;
}

uint64_t FstHmmNet::calcNumActiveNodes(FstHmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::FstHmmNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t *a8, unsigned int a9, __int16 a10, PelScorer *a11, unsigned int a12, __int128 *a13, uint64_t a14, unsigned __int16 a15)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const ArcGraph *ArcGraphOrThrow;
  FstCore *Recognizer;
  unsigned int RequiredVirtMapSize;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  HmmNet::HmmNet(a1, a2, a3, a4, a5, a6);
  *v18 = &off_24C219998;
  DgnString::DgnString((DgnString *)(v18 + 15));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0x100000001;
  *(_DWORD *)(a1 + 152) = 1310740000;
  *(_QWORD *)(a1 + 156) = 0x100000001;
  *(_DWORD *)(a1 + 164) = 1310740000;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = -65536;
  *(_BYTE *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_BYTE *)(a1 + 188) = 0;
  ArcGraphOrThrow = (const ArcGraph *)ArcGraphMgr::getArcGraphOrThrow((ArcGraphMgr *)ArcGraphMgr::smpArcGraphMgr, a15, v19, v20, v21, v22, v23, v24);
  Recognizer = (FstCore *)FstCore::makeRecognizer(a13, a10, a14, a7, ArcGraphOrThrow);
  *(_QWORD *)(a1 + 136) = Recognizer;
  if (!a8)
  {
    RequiredVirtMapSize = FstCore::getRequiredVirtMapSize(Recognizer);
    if (RequiredVirtMapSize)
    {
      a8 = MemChunkAlloc(0x40uLL, 0);
      VirtMap::VirtMap((VirtMap *)a8);
      v28 = RequiredVirtMapSize >> 6;
      v29 = *((_DWORD *)a8 + 14);
      if (RequiredVirtMapSize >> 6 >= v29)
      {
        v30 = v28 + 1;
        *((_DWORD *)a8 + 14) = v30;
        v31 = *((_DWORD *)a8 + 3);
        if (v31 <= v28)
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a8, v30 - v31, 0);
        v32 = *((unsigned int *)a8 + 2);
        if (v32 <= v30)
        {
          if (v32 <= v28)
          {
            v35 = ((unint64_t)RequiredVirtMapSize >> 6) - v32 + 1;
            v36 = (_DWORD *)(*a8 + 16 * v32 + 8);
            do
            {
              *((_QWORD *)v36 - 1) = 0;
              *v36 = 0;
              v36 += 4;
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v32 > (int)v30)
        {
          v33 = (int)v32;
          v34 = 16 * (int)v32 - 16;
          do
          {
            --v33;
            DgnPrimFixArray<double>::~DgnPrimFixArray(*a8 + v34);
            v34 -= 16;
          }
          while (v33 > v30);
        }
        *((_DWORD *)a8 + 2) = v30;
        v37 = *((_DWORD *)a8 + 14);
        v38 = *((_DWORD *)a8 + 7);
        v29 = v37;
        if (v37 > v38)
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(a8 + 2), v37 - v38, 0);
          v29 = *((_DWORD *)a8 + 14);
        }
        *((_DWORD *)a8 + 6) = v37;
        *((_DWORD *)a8 + 13) = 0;
      }
      bzero((void *)a8[2], 8 * v29);
      *((_BYTE *)a8 + 60) = 1;
      *(_BYTE *)(a1 + 188) = 1;
    }
    else
    {
      a8 = 0;
    }
  }
  FstCore::beginTopRecSyncRecog(*(_QWORD *)(a1 + 136), a7, (uint64_t)a8);
  FstCore::beginTopRecPassSyncRecogEmbedded(*(FstCore **)(a1 + 136), a9, 4294967280, a11, a12, v39, v40, v41);
  return a1;
}

{
  return FstHmmNet::FstHmmNet(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_209904830(_Unwind_Exception *a1)
{
  HmmNet *v1;
  BitArray *v2;

  BitArray::~BitArray(v2);
  HmmNet::~HmmNet(v1);
  _Unwind_Resume(a1);
}

void FstHmmNet::~FstHmmNet(FstCore **this)
{
  VirtMap *v2;

  *this = (FstCore *)&off_24C219998;
  FstCore::endTopRecPassSyncRecogEmbedded(this[17]);
  FstCore::endTopRecSyncRecog(this[17]);
  if (*((_BYTE *)this + 188))
    DgnDelete<VirtMap>(v2);
  DgnDelete<FstCore>(this[17]);
  this[17] = 0;
  BitArray::~BitArray((BitArray *)(this + 15));
  HmmNet::~HmmNet((HmmNet *)this);
}

{
  FstHmmNet::~FstHmmNet(this);
  JUMPOUT(0x20BD149A8);
}

FstCore *DgnDelete<FstCore>(FstCore *result)
{
  _QWORD *v1;

  if (result)
  {
    FstCore::~FstCore(result);
    return (FstCore *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t FstHmmNet::unpackFstSequence(uint64_t this, Node **a2, Node **a3)
{
  *(_DWORD *)(this + 164) = 1310740000;
  *(_QWORD *)(this + 168) = 0;
  *(_DWORD *)(this + 176) = -65536;
  *(_BYTE *)(this + 180) = 1;
  *a3 = (Node *)(this + 156);
  *a2 = (Node *)(this + 156);
  return this;
}

uint64_t FstHmmNet::seedInPortFst(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2);
  if (*(__int16 *)(v4 + 8) > (int)a3)
  {
    v5 = this;
    v6 = *(unsigned __int8 *)(this + 114);
    *(_WORD *)(v4 + 8) = a3;
    *(_DWORD *)v4 = a4;
    if (!v6)
      *(_DWORD *)(v4 + 4) = 0;
    *(_DWORD *)(this + 156) = a4;
    *(_DWORD *)(this + 160) = *(_DWORD *)(v4 + 4);
    this = FstCore::seedTheory(*(FstCore **)(this + 136), a3, *(unsigned int *)(this + 184), a4);
    *(_BYTE *)(v5 + 112) = 1;
  }
  return this;
}

uint64_t FstHmmNet::setEmbeddedFstSeedingTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 184) = a2;
  return this;
}

uint64_t FstHmmNet::expandEmbFstHistory(uint64_t a1)
{
  return FstCore::expandEmbFstHistory(*(_QWORD *)(a1 + 136));
}

uint64_t HmmNet::nActiveSilNodes(HmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::isAcoustic(FstHmmNet *this)
{
  return 1;
}

uint64_t HmmNet::canCallBack(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::getRemainder(HmmNet *this)
{
  return 0;
}

uint64_t mrecHeapValid(void)
{
  return 1;
}

void MrecInitModule_wavepac_sigproc(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugWavePacketLossDetection)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWavePacketLossDetection", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugWavePacketLossDetection = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWavePacketLossDetection);
  }
}

void MulTable::~MulTable(MulTable *this)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 40);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24);
}

uint64_t MulTable::permute(MulTable *this, unsigned int a2)
{
  return (unsigned __int16)(a2 + 24 * (a2 >> 9));
}

uint64_t MulTable::unpermute(MulTable *this, unsigned __int16 a2)
{
  return (unsigned __int16)(a2 - 24 * (a2 / 0x218u));
}

void MulTable::printSize(MulTable *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  int v92;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 135, (DgnString *)&v91);
  if (v92)
    v16 = v91;
  else
    v16 = &unk_209A78838;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A78838, a3, &unk_209A78838, v16);
  DgnString::~DgnString((DgnString *)&v91);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A78838);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v25 = v91;
  else
    v25 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v30 = v91;
  else
    v30 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v30, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v35 = v91;
  else
    v35 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v35, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  v36 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 12;
  v37 = *((unsigned int *)this + 8);
  if ((int)v37 <= 0)
    v38 = 0;
  else
    v38 = 2 * v37;
  v39 = v38 + v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v44 = v91;
  else
    v44 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v39;
  *a5 += v39;
  v45 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 12;
  v46 = v45 + (*((_DWORD *)this + 20) & ~(*((int *)this + 20) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v51 = v91;
  else
    v51 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v51, v46, v46, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v46;
  *a5 += v46;
  v52 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 12;
  v53 = *((unsigned int *)this + 24);
  if ((int)v53 <= 0)
    v54 = 0;
  else
    v54 = 2 * v53;
  v55 = v54 + v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92)
    v60 = v91;
  else
    v60 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v60, v55, v55, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v55;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v61 = 4;
  else
    v61 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 138, (DgnString *)&v91);
  if (v92)
    v66 = v91;
  else
    v66 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v66, v61, v61, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v61;
  *a5 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 140, (DgnString *)&v91);
  if (v92)
    v71 = v91;
  else
    v71 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  v72 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 12;
  v73 = *((unsigned int *)this + 12);
  if ((int)v73 <= 0)
    v74 = 0;
  else
    v74 = 2 * v73;
  v75 = v74 + v72;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 142, (DgnString *)&v91);
  if (v92)
    v80 = v91;
  else
    v80 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v80, v75, v75, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v75;
  *a5 += v75;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 144, (DgnString *)&v91);
  if (v92)
    v85 = v91;
  else
    v85 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_209A78838, (34 - a3), (34 - a3), v85, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v91);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 145, (DgnString *)&v91);
  if (v92)
    v90 = v91;
  else
    v90 = &unk_209A78838;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, a3, &unk_209A78838, (35 - a3), (35 - a3), v90, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v91);
}

void sub_2099050C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MulTable::saveMulTable(MulTable *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t CurrentSubDirComponents;
  unsigned int v15;

  if (a4)
  {
    MulTable::saveMulTableText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Du, a5, "MRMULT!?", 14, 1);
    v15 = 0;
    writeObject((uint64_t)v8, (int *)this, &v15);
    writeObject(v8, (const double *)this + 13, &v15, v9, v10, v11, v12, v13);
    writeObject((uint64_t)v8, (int *)this + 1, &v15);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 24, &v15);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 72, &v15);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 88, &v15);
    writeObjectChecksum((uint64_t)v8, (int *)&v15);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Du, v15);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void MulTable::saveMulTableText(MulTable *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int i;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[35];
  void *v25;

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v24);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v24, (uint64_t)a2, 0x2Eu, a3);
  v22 = 0;
  v23 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v24, sMTT_Versions, (uint64_t)&v22, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v24, "MulTableText", (_QWORD *)(v22 + 8 * (v23 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "NumberOfMulTables", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v24, "MulScale", *((double *)this + 13));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "MaxScaledDev", *((unsigned int *)this + 1));
  DgnArray<DgnString>::DgnArray(v21, 4);
  v25 = 0;
  v11 = realloc_array(0, &v25, 0x10uLL, 0, 0, 1);
  v18 = v25;
  v19 = 4;
  v20 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v21, "Type");
  *v18 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v21 + 16), "UnsVal1");
  v18[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v21 + 32), "IntVal1");
  v18[2] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v21 + 48), "IntVal2");
  v18[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v24, (uint64_t)&v18, (uint64_t)v21);
  if (*(_DWORD *)this)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = 2 * v13 + 2;
      v13 += 512;
      for (i = 255; i != -256; --i)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "MulTable");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, v12);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 2u, i);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(__int16 *)(*((_QWORD *)this + 3) + v14));
        DgnTextFileWriter::writeNextLine(v24);
        v14 += 2;
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)this);
  }
  if (*((_DWORD *)this + 1))
  {
    v16 = 1;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "ScaledDevToMulTableMap");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, v16);
      v17 = *(unsigned __int8 *)(*((_QWORD *)this + 9) + v16 - 1) - 1;
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 2u, v17);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(unsigned __int16 *)(*((_QWORD *)this + 11) + 2 * v17));
      DgnTextFileWriter::writeNextLine(v24);
      ++v16;
    }
    while (v16 <= *((_DWORD *)this + 1));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  DgnArray<DgnString>::releaseAll((uint64_t)v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v22);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v24);
}

void sub_209905580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t *DgnPrimFixArray<unsigned char>::copyArraySlice(uint64_t *result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4)
      return result;
  }
  else
  {
    result = MemChunkAlloc(a4, 0);
    *v7 = (uint64_t)result;
    *((_DWORD *)v7 + 2) = a4;
  }
  v8 = 0;
  do
  {
    *(_BYTE *)(*v7 + v8) = *(_BYTE *)(*a2 + (a3 + v8));
    ++v8;
  }
  while (a4 != v8);
  return result;
}

uint64_t tknLogString(uint64_t result)
{
  if (s_logCallBack)
    return s_logCallBack(result);
  return result;
}

TEnvManager *makeDataManager(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TEnvManager *v7;
  char *v8;

  if (!a1)
    return 0;
  verifyStringArgument(*(_BYTE **)(a1 + 8), 0, 0, "Bad data spec file-or-dir pointer", a5);
  if (*(_QWORD *)a1 == 3)
  {
    v7 = (TEnvManager *)operator new();
    v8 = *(char **)(a1 + 8);
    *(_QWORD *)v7 = off_24C2140A8;
    *((_QWORD *)v7 + 1) = a2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v7 + 2, v8);
  }
  else
  {
    v7 = (TEnvManager *)operator new();
    TEnvManager::TEnvManager(v7, *(const char **)(a1 + 8), a2);
  }
  return v7;
}

void sub_20990572C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t handleException(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*a1)
    tknPrintf("Error: %s\n", a2, a3, a4, a5, a1);
  tknPrintf("Error: Caught exception in %s, TPError = %llu\n", a2, a3, a4, a5, a2, a3);
  return a3;
}

uint64_t partial apply()
{
  uint64_t v0;
  uint64_t v1;
  TGlobalParamManager *v2;
  unsigned __int8 v3;
  _QWORD *exception;
  std::string *v6;
  TLocaleInfo *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  locale_t v11[2];
  char v12;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v12, "TPApi_Initialize");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v11);
  MrecInitModule_sdpres_sdapi();
  if (g_bInitialized)
  {
    conditionalAssert("Already initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpmisc.cpp", 130, v0, v1);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Already initialized");
    *exception = aPpx;
    v6 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 5;
  }
  SDApi_CheckVersion(0x18u, 0x197u, (uint64_t)&sSDInitCheckSizesInternal);
  v2 = (TGlobalParamManager *)operator new();
  {
    v7 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v7);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v7;
  }
  TGlobalParamManager::TGlobalParamManager(v2, (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo);
  g_pParamManager = (uint64_t)v2;
  g_bInitialized = 1;
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v11);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_209905978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  MEMORY[0x20BD149A8](v21, 0x1070C40ADD13FEBLL);
  MEMORY[0x20BD149A8](v20, 0x10F3C403D9D550DLL);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(&a20);
  TReentrancyHandler::ms_bIn = 0;
  switch(a2)
  {
    case 7:
      v26 = (char *)__cxa_begin_catch(a1);
      v27 = v26 + 8;
      if (v26[31] < 0)
        v27 = *(_BYTE **)v27;
      handleException(v27, (uint64_t)"TPApi_Initialize", *((_QWORD *)v26 + 4), v24, v25);
      __cxa_end_catch();
      goto LABEL_27;
    case 6:
      v30 = (char *)__cxa_begin_catch(a1);
      v31 = v30 + 8;
      if (v30[31] < 0)
        v31 = *(_BYTE **)v31;
      handleException(v31, (uint64_t)"TPApi_Initialize", 6, v28, v29);
      __cxa_end_catch();
      goto LABEL_27;
    case 5:
      v34 = (char *)__cxa_begin_catch(a1);
      v35 = v34 + 8;
      if (v34[31] < 0)
        v35 = *(_BYTE **)v35;
      break;
    case 4:
      v38 = (char *)__cxa_begin_catch(a1);
      v39 = v38 + 8;
      if (v38[31] < 0)
        v39 = *(_BYTE **)v39;
      handleException(v39, (uint64_t)"TPApi_Initialize", 11, v36, v37);
      __cxa_end_catch();
LABEL_27:
      JUMPOUT(0x209905874);
    case 3:
      v40 = (char *)__cxa_begin_catch(a1);
      v35 = v40 + 8;
      if (v40[31] < 0)
        v35 = *(_BYTE **)v35;
      break;
    case 2:
      v41 = __cxa_begin_catch(a1);
      v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
      handleException(v42, (uint64_t)"TPApi_Initialize", 1, v43, v44);
      __cxa_end_catch();
      goto LABEL_27;
    default:
      if (a2 != 1)
        _Unwind_Resume(a1);
      v45 = __cxa_begin_catch(a1);
      v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
      handleException(v46, (uint64_t)"TPApi_Initialize", 2, v47, v48);
LABEL_13:
      __cxa_end_catch();
      goto LABEL_27;
  }
  handleException(v35, (uint64_t)"TPApi_Initialize", 2, v32, v33);
  goto LABEL_13;
}

void MrecInitModule_ngram2fsm_lm(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugWordLMToTransducerGrammar)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWordLMToTransducerGrammar", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugWordLMToTransducerGrammar = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMToTransducerGrammar);
  }
  if (!gParDebugWordLMToTransducerGrammarDetails)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordLMToTransducerGrammarDetails", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugWordLMToTransducerGrammarDetails = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMToTransducerGrammarDetails);
  }
}

void WordLanguageModel::getWordIdToTrGrmLmIdArray(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t *v47;
  int *v48;
  int LmId;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int MaybeContextLmId;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _QWORD *v89;
  uint64_t *v90;
  int v91;
  _DWORD v92[2];

  v10 = *(unsigned int *)(a1 + 104);
  v11 = *(_DWORD *)(a3 + 12);
  if (v10 > v11)
    DgnArray<DgnPrimArray<double>>::reallocElts(a3, v10 - v11, 0);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 <= v10)
  {
    if (v12 < v10)
    {
      v15 = v10 - v12;
      v16 = 16 * v12;
      do
      {
        v17 = (_QWORD *)(*(_QWORD *)a3 + v16);
        *v17 = 0;
        v17[1] = 0;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  else if ((int)v12 > (int)v10)
  {
    v13 = (int)v12;
    v14 = 16 * (int)v12 - 16;
    do
    {
      --v13;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a3 + v14);
      v14 -= 16;
    }
    while (v13 > (int)v10);
  }
  *(_DWORD *)(a3 + 8) = v10;
  v18 = *(_DWORD *)(a4 + 12);
  if (v10 > v18)
    DgnArray<DgnPrimArray<double>>::reallocElts(a4, v10 - v18, 0);
  v19 = *(unsigned int *)(a4 + 8);
  if (v19 <= v10)
  {
    if (v19 < v10)
    {
      v22 = v10 - v19;
      v23 = 16 * v19;
      do
      {
        v24 = (_QWORD *)(*(_QWORD *)a4 + v23);
        *v24 = 0;
        v24[1] = 0;
        v23 += 16;
        --v22;
      }
      while (v22);
    }
  }
  else if ((int)v19 > (int)v10)
  {
    v20 = (int)v19;
    v21 = 16 * (int)v19 - 16;
    do
    {
      --v20;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a4 + v21);
      v21 -= 16;
    }
    while (v20 > (int)v10);
  }
  *(_DWORD *)(a4 + 8) = v10;
  *a5 = 0;
  v25 = a2[3];
  if (v25 <= 4)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 5 - v25, 0);
  v26 = a2[2];
  if (v26 <= 5)
  {
    if ((_DWORD)v26 != 5)
    {
      v28 = 16 * v26;
      do
      {
        v29 = (_QWORD *)(*(_QWORD *)a2 + v28);
        *v29 = 0;
        v29[1] = 0;
        v28 += 16;
      }
      while (v28 != 80);
    }
  }
  else if ((int)v26 >= 6)
  {
    v27 = 16 * v26 - 16;
    do
    {
      --v26;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v27);
      v27 -= 16;
    }
    while (v26 > 5);
  }
  a2[2] = 5;
  v30 = *(_QWORD *)a2;
  v31 = *(_DWORD *)(*(_QWORD *)a2 + 24);
  v32 = *(_QWORD *)a2;
  if (v31 == *(_DWORD *)(*(_QWORD *)a2 + 28))
  {
    DgnPrimArray<unsigned int>::reallocElts(v30 + 16, 1, 1);
    v31 = *(_DWORD *)(v30 + 24);
    v32 = *(_QWORD *)a2;
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 16) + 4 * v31) = 16777214;
  ++*(_DWORD *)(v30 + 24);
  v33 = *(_DWORD *)(v32 + 40);
  v34 = v32;
  if (v33 == *(_DWORD *)(v32 + 44))
  {
    DgnPrimArray<unsigned int>::reallocElts(v32 + 32, 1, 1);
    v33 = *(_DWORD *)(v32 + 40);
    v34 = *(_QWORD *)a2;
  }
  *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4 * v33) = 16777213;
  ++*(_DWORD *)(v32 + 40);
  v35 = *(_DWORD *)(v34 + 56);
  v36 = v34;
  if (v35 == *(_DWORD *)(v34 + 60))
  {
    DgnPrimArray<unsigned int>::reallocElts(v34 + 48, 1, 1);
    v35 = *(_DWORD *)(v34 + 56);
    v36 = *(_QWORD *)a2;
  }
  v89 = (_QWORD *)a4;
  *(_DWORD *)(*(_QWORD *)(v34 + 48) + 4 * v35) = 16777210;
  ++*(_DWORD *)(v34 + 56);
  v37 = *(_DWORD *)(v36 + 72);
  if (v37 == *(_DWORD *)(v36 + 76))
  {
    DgnPrimArray<unsigned int>::reallocElts(v36 + 64, 1, 1);
    v37 = *(_DWORD *)(v36 + 72);
  }
  *(_DWORD *)(*(_QWORD *)(v36 + 64) + 4 * v37) = 16777212;
  ++*(_DWORD *)(v36 + 72);
  *a5 = 5;
  v90 = MemChunkAlloc(0x70uLL, 0);
  Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash((uint64_t)v90, 0, 16);
  v38 = *(_DWORD *)(a1 + 128);
  if (v38 || (v38 = *(_DWORD *)(a1 + 144)) != 0 || (v38 = *(_DWORD *)(a1 + 160)) != 0)
  {
    v39 = 0;
    v40 = v38;
    while (1)
    {
      v41 = *(_QWORD *)(a1 + 16);
      v42 = *(unsigned int *)(*(_QWORD *)(v41 + 256) + 4 * v39);
      if (v39 == v42)
        break;
      if (v39 < *(unsigned int *)(v41 + 388))
      {
        if (*(_BYTE *)(*(_QWORD *)(v41 + 104) + v39))
        {
          LmId = WordLanguageModel::getLmId((WordLanguageModel *)a1, v42);
          v50 = WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
          v41 = *(_QWORD *)(a1 + 16);
          if (LmId != v50)
          {
            WordLanguageModel::getLmId((WordLanguageModel *)a1, *(_DWORD *)(*(_QWORD *)(v41 + 256) + 4 * v39));
            WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 403, (uint64_t)"lm/ngram2fsm", 2, (uint64_t)"%u %u %u %u", v51, v52, v39);
            v41 = *(_QWORD *)(a1 + 16);
          }
        }
      }
      if (v39 < *(unsigned int *)(v41 + 388))
      {
        if (*(_BYTE *)(*(_QWORD *)(v41 + 104) + v39))
        {
          MaybeContextLmId = WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, *(_DWORD *)(*(_QWORD *)(v41 + 256) + 4 * v39));
          if (MaybeContextLmId != WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39))
          {
            WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 256) + 4 * v39));
            WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 411, (uint64_t)"lm/ngram2fsm", 2, (uint64_t)"%u %u %u %u", v54, v55, v39);
          }
        }
      }
LABEL_105:
      if (++v39 == v40)
        goto LABEL_106;
    }
    if (!*(_WORD *)(*(_QWORD *)(v41 + 32) + 2 * v39))
    {
      v56 = *(unsigned int *)(a6 + 8);
      if (!(_DWORD)v56)
        goto LABEL_105;
      v57 = *(int **)a6;
      v58 = 0xFFFFFFFFLL;
      while (1)
      {
        v59 = *v57++;
        if (v39 == v59)
          break;
        --v58;
        if (!--v56)
          goto LABEL_105;
      }
      if (!v58)
        goto LABEL_105;
    }
    v43 = WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
    v44 = WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39);
    v46 = *(_DWORD *)(a1 + 112);
    v45 = *(_DWORD *)(a1 + 116);
    v92[0] = v43;
    v92[1] = v44;
    v47 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v90, v92);
    if (v47)
    {
      v48 = (int *)v47 + 5;
      goto LABEL_69;
    }
    if (v46 == v43)
    {
      if (WordLanguageModel::getWordId((WordLanguageModel *)a1, v43, 0) == 16777214)
      {
        v60 = 1;
LABEL_66:
        v91 = v60;
LABEL_68:
        v48 = &v91;
        Hash<Int32Pair,Int32Pair,Int32PairScope,int>::add((uint64_t)v90, v92, &v91);
LABEL_69:
        v61 = *v48;
        v62 = *(_QWORD *)a3 + 16 * v43;
        v64 = (_DWORD *)(v62 + 8);
        v63 = *(unsigned int *)(v62 + 8);
        if (!*(_DWORD *)(v62 + 8))
          goto LABEL_75;
        v65 = *(int **)v62;
        v66 = *(unsigned int *)(v62 + 8);
        v67 = 0xFFFFFFFFLL;
        while (1)
        {
          v68 = *v65++;
          if (v68 == (_DWORD)v61)
            break;
          --v67;
          if (!--v66)
            goto LABEL_75;
        }
        if (!v67)
        {
LABEL_75:
          if (v63 == *(_DWORD *)(*(_QWORD *)a3 + 16 * v43 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)a3 + 16 * v43, 1, 1);
            v63 = *v64;
          }
          *(_DWORD *)(*(_QWORD *)v62 + 4 * v63) = v61;
          ++*v64;
        }
        v69 = *v89 + 16 * v44;
        v71 = (_DWORD *)(v69 + 8);
        v70 = *(unsigned int *)(v69 + 8);
        if (!*(_DWORD *)(v69 + 8))
          goto LABEL_84;
        v72 = *(int **)v69;
        v73 = *(unsigned int *)(v69 + 8);
        v74 = 0xFFFFFFFFLL;
        while (1)
        {
          v75 = *v72++;
          if (v75 == (_DWORD)v61)
            break;
          --v74;
          if (!--v73)
            goto LABEL_84;
        }
        if (!v74)
        {
LABEL_84:
          if (v70 == *(_DWORD *)(*v89 + 16 * v44 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*v89 + 16 * v44, 1, 1);
            v70 = *v71;
          }
          *(_DWORD *)(*(_QWORD *)v69 + 4 * v70) = v61;
          ++*v71;
        }
        if ((v61 - 3) <= 0xFFFFFFFD)
        {
          v76 = a2[2];
          if (v76 <= v61)
          {
            v77 = (v61 + 1);
            v78 = a2[3];
            if (v77 > v78)
            {
              DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, v77 - v78, 0);
              v76 = a2[2];
            }
            if (v76 <= v77)
            {
              if (v76 < v77)
              {
                v81 = 16 * v76;
                v82 = v77 - v76;
                do
                {
                  v83 = (_QWORD *)(*(_QWORD *)a2 + v81);
                  *v83 = 0;
                  v83[1] = 0;
                  v81 += 16;
                  --v82;
                }
                while (v82);
              }
            }
            else if ((int)v76 > (int)v77)
            {
              v79 = (int)v76;
              v80 = 16 * (int)v76 - 16;
              do
              {
                --v79;
                DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v80);
                v80 -= 16;
              }
              while (v79 > (int)v77);
            }
            a2[2] = v77;
          }
          v84 = *(_QWORD *)a2 + 16 * v61;
          v86 = (_DWORD *)(v84 + 8);
          v85 = *(unsigned int *)(v84 + 8);
          if (v85 == *(_DWORD *)(v84 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)a2 + 16 * v61, 1, 1);
            v85 = *v86;
          }
          *(_DWORD *)(*(_QWORD *)v84 + 4 * v85) = v39;
          ++*v86;
        }
        goto LABEL_105;
      }
    }
    else if (v45 == v43 && WordLanguageModel::getWordId((WordLanguageModel *)a1, v43, 0) == 16777213)
    {
      v60 = 2;
      goto LABEL_66;
    }
    v91 = *a5;
    *a5 = v91 + 1;
    goto LABEL_68;
  }
LABEL_106:
  if (v90)
  {
    (*(void (**)(uint64_t *))*v90)(v90);
    MemChunkFree(v90, 0);
  }
}

uint64_t WordLanguageModel::getLmId(WordLanguageModel *this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  if (a2 == 16777214)
    return *((unsigned int *)this + 28);
  if (a2 == 16777213)
    return *((unsigned int *)this + 29);
  v3 = *((_DWORD *)this + 32);
  if (v3)
  {
    if (v3 > a2)
      return *(unsigned int *)(*((_QWORD *)this + 15) + 4 * a2);
    return 0xFFFFFFFFLL;
  }
  v4 = *((_DWORD *)this + 36);
  if (v4)
  {
    if (v4 > a2)
    {
      v5 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * a2);
      v6 = v5 == 0xFFFF;
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  if (*((_DWORD *)this + 40) <= a2)
    return 0xFFFFFFFFLL;
  v5 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + a2);
  v6 = v5 == 255;
LABEL_13:
  if (v6)
    return 0xFFFFFFFFLL;
  else
    return v5;
}

uint64_t WordLanguageModel::getMaybeContextLmId(WordLanguageModel *this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;

  if (a2 == 16777212)
    return 4294967294;
  if (a2 == 16777214)
    return *((unsigned int *)this + 28);
  v3 = *((_DWORD *)this + 32);
  v4 = v3;
  if (!v3)
  {
    v4 = *((_DWORD *)this + 36);
    if (!v4)
      v4 = *((_DWORD *)this + 40);
  }
  if (v4 <= a2)
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 276))
  {
    if (*((_DWORD *)this + 72))
    {
      v5 = *((_QWORD *)this + 35);
      return *(unsigned int *)(v5 + 4 * a2);
    }
    v6 = a2;
    if (*((_DWORD *)this + 76))
    {
      v7 = *((_QWORD *)this + 37);
LABEL_20:
      v8 = *(unsigned __int16 *)(v7 + 2 * v6);
      v9 = v8 == 0xFFFF;
      goto LABEL_24;
    }
    v10 = *((_QWORD *)this + 39);
  }
  else
  {
    if (v3)
    {
      v5 = *((_QWORD *)this + 15);
      return *(unsigned int *)(v5 + 4 * a2);
    }
    v6 = a2;
    if (*((_DWORD *)this + 36))
    {
      v7 = *((_QWORD *)this + 17);
      goto LABEL_20;
    }
    v10 = *((_QWORD *)this + 19);
  }
  v8 = *(unsigned __int8 *)(v10 + v6);
  v9 = v8 == 255;
LABEL_24:
  if (v9)
    return 0xFFFFFFFFLL;
  else
    return v8;
}

_QWORD *WordLanguageModel::getWordTransducer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5, __int16 a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  _WORD *v85;
  uint64_t v86;
  unsigned int v87;
  __int16 v88;
  uint64_t i;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t *v98;
  WordLanguageModel *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned int *v112;
  uint64_t v113;
  unint64_t v115;
  unint64_t j;
  uint64_t v117;
  int v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  unsigned int *v135;
  uint64_t v136;
  unint64_t v138;
  unint64_t k;
  uint64_t v140;
  uint64_t **Bucket;
  int *v143;
  int v144;
  int v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v168;
  unint64_t m;
  uint64_t v170;
  unint64_t v172;
  unint64_t n;
  uint64_t v174;
  int v176;
  uint64_t **v177;
  int *v178;
  int v179;
  __int16 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v207;
  int *v208;
  uint64_t v209;
  int *v210;
  uint64_t **v211;
  int v212;
  int v213;
  __int16 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  unsigned int *v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v246;
  uint64_t *v247;
  int *v248;
  uint64_t v249;
  int *v250;
  uint64_t **v251;
  int v252;
  int v253;
  __int16 v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  int *v260;
  int v261;
  unint64_t v262;
  int v263;
  unint64_t v264;
  int v265;
  unint64_t v266;
  _DWORD *v267;
  int v268;
  _DWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unsigned int *v273;
  _DWORD *v274;
  uint64_t v275;
  _DWORD *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char v281;
  unsigned int *v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  char v286;
  _DWORD *v287;
  _DWORD *v288;
  int v289;
  uint64_t v290;
  int v291;
  unint64_t v292;
  _DWORD *v293;
  int v294;
  uint64_t v295;
  int v296;
  _DWORD *v297;
  _DWORD *v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned int v302;
  uint64_t v303;
  unsigned int *v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v309;
  unsigned int *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int *v316;
  unsigned int *v317;
  uint64_t v318;
  uint64_t v319;
  WordLanguageModel *v320;
  WordLanguageModel *v321;
  unint64_t v322;
  _QWORD *v323;
  unsigned int *v324;
  _QWORD *v325;
  unsigned int *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int *v331;
  unsigned int *v332;
  int v333[2];
  unsigned int *v334;
  unsigned int *v335;
  _QWORD *v336;
  _QWORD *v337;
  uint64_t v338;
  void *v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  void *__b;
  uint64_t v347;
  _QWORD v348[2];
  __int16 v349;
  __int16 v350;
  _DWORD *v351;
  uint64_t v352;
  int v353;
  _QWORD v354[2];
  _QWORD v355[2];
  uint64_t v356;
  void *v357;

  if (*(_DWORD *)(a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 459, (uint64_t)"lm/ngram2fsm", 1, (uint64_t)"%u", a7, a8, **(_WORD **)a2);
  v356 = 2;
  v355[0] = 0;
  v355[1] = 0;
  v354[0] = 0;
  v354[1] = 0;
  WordLanguageModel::getWordIdToTrGrmLmIdArray(a1, a4, (uint64_t)v355, (uint64_t)v354, (int *)&v356 + 1, a7);
  v13 = v356;
  LODWORD(v356) = v356 + 1;
  v353 = v13;
  v320 = (WordLanguageModel *)a1;
  v14 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v14 != -1)
  {
    v15 = v355[0] + 16 * v14;
    v17 = (unsigned int *)(v15 + 8);
    v16 = *(_DWORD *)(v15 + 8);
    if (!v16)
      goto LABEL_10;
    v18 = *(int **)v15;
    v19 = 0xFFFFFFFFLL;
    v20 = *(unsigned int *)(v15 + 8);
    while (1)
    {
      v21 = *v18++;
      if (v21 == 1)
        break;
      --v19;
      if (!--v20)
        goto LABEL_10;
    }
    if (!v19)
    {
LABEL_10:
      if (v16 == *(_DWORD *)(v15 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v15, 1, 1);
        v16 = *v17;
      }
      *(_DWORD *)(*(_QWORD *)v15 + 4 * v16) = 1;
      ++*v17;
      v14 = *(unsigned int *)(a1 + 112);
    }
    v22 = v354[0] + 16 * v14;
    v24 = (unsigned int *)(v22 + 8);
    v23 = *(_DWORD *)(v22 + 8);
    if (!v23)
      goto LABEL_19;
    v25 = *(int **)v22;
    v26 = 0xFFFFFFFFLL;
    v27 = *(unsigned int *)(v22 + 8);
    while (1)
    {
      v28 = *v25++;
      if (v28 == 1)
        break;
      --v26;
      if (!--v27)
        goto LABEL_19;
    }
    if (!v26)
    {
LABEL_19:
      if (v23 == *(_DWORD *)(v22 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v22, 1, 1);
        v23 = *v24;
      }
      *(_DWORD *)(*(_QWORD *)v22 + 4 * v23) = 1;
      ++*v24;
    }
  }
  v29 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v29 != -1)
  {
    v30 = v355[0] + 16 * v29;
    v32 = (unsigned int *)(v30 + 8);
    v31 = *(_DWORD *)(v30 + 8);
    if (!v31)
      goto LABEL_29;
    v33 = *(int **)v30;
    v34 = 0xFFFFFFFFLL;
    v35 = *(unsigned int *)(v30 + 8);
    while (1)
    {
      v36 = *v33++;
      if (v36 == 2)
        break;
      --v34;
      if (!--v35)
        goto LABEL_29;
    }
    if (!v34)
    {
LABEL_29:
      if (v31 == *(_DWORD *)(v30 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v30, 1, 1);
        v31 = *v32;
      }
      *(_DWORD *)(*(_QWORD *)v30 + 4 * v31) = 2;
      ++*v32;
      v29 = *(unsigned int *)(a1 + 116);
    }
    v37 = v354[0] + 16 * v29;
    v39 = (_DWORD *)(v37 + 8);
    v38 = *(unsigned int *)(v37 + 8);
    if (*(_DWORD *)(v37 + 8))
    {
      v40 = 0;
      v41 = *(_QWORD *)v37;
      while (*(_DWORD *)(v41 + v40) != 2)
      {
        v40 += 4;
        if (4 * v38 == v40)
          goto LABEL_41;
      }
      if (v40 != 0x3FFFFFFFCLL)
      {
        if ((_DWORD)v38 == *(_DWORD *)(v354[0] + 16 * v29 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(v37, 1, 1);
          v38 = *v39;
          v41 = *(_QWORD *)v37;
        }
        *(_DWORD *)(v41 + 4 * v38) = 2;
        ++*v39;
      }
    }
  }
LABEL_41:
  v42 = HIDWORD(v356);
  v351 = 0;
  v352 = 0;
  if (HIDWORD(v356))
  {
    __b = 0;
    v43 = 4 * HIDWORD(v356);
    v44 = realloc_array(0, &__b, v43, 0, 0, 1);
    v45 = 0;
    v46 = __b;
    v351 = __b;
    LODWORD(v352) = v42;
    HIDWORD(v352) = v44 >> 2;
    do
    {
      v46[v45 / 4] = v13;
      v45 += 4;
    }
    while (v43 != v45);
  }
  else
  {
    v46 = 0;
    LODWORD(v352) = 0;
  }
  v47 = v13;
  if (*(_DWORD *)(a1 + 112) != -1)
  {
    v47 = v13;
    if (*(_DWORD *)(a1 + 64) != 1)
    {
      v47 = v356;
      LODWORD(v356) = v356 + 1;
    }
  }
  v46[1] = v47;
  v48 = *(_DWORD *)(a3 + 8);
  if (v48 == *(_DWORD *)(a3 + 12))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
    v48 = *(_DWORD *)(a3 + 8);
  }
  v49 = *(_QWORD *)a3 + 16 * v48;
  *(_DWORD *)v49 = 0;
  *(_DWORD *)(v49 + 4) = v47;
  *(_QWORD *)(v49 + 8) = 1;
  v50 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v50;
  if (*(_DWORD *)(a1 + 116) == -1)
  {
    if (v50 == *(_DWORD *)(a3 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
      v50 = *(_DWORD *)(a3 + 8);
    }
    v51 = *(_QWORD *)a3 + 16 * v50;
    *(_DWORD *)v51 = v13;
    *(_QWORD *)(v51 + 4) = 0x200000001;
    *(_DWORD *)(v51 + 12) = 0;
    ++*(_DWORD *)(a3 + 8);
  }
  v351[2] = 1;
  if (a5 == 0xFFFFFF)
  {
    v52 = -1;
    v53 = a1;
  }
  else
  {
    v53 = a1;
    if (*(_DWORD *)(a1 + 128))
    {
      v52 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * a5);
    }
    else
    {
      if (*(_DWORD *)(a1 + 144))
      {
        v54 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 2 * a5);
        v55 = v54 == 0xFFFF;
      }
      else
      {
        v54 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + a5);
        v55 = v54 == 255;
      }
      if (v55)
        v52 = -1;
      else
        v52 = v54;
    }
  }
  v56 = *(_DWORD *)(v53 + 64);
  v338 = a3;
  if (v56 >= 2)
  {
    *(_QWORD *)v333 = v42;
    NGramIterator::NGramIterator((NGramIterator *)&__b, (const WordLanguageModel *)a1, 2, 1);
    while (NGramIterator::next((NGramIterator *)&__b, v57, v58, v59, v60, v61, v62, v63))
    {
      v64 = v354[0] + 16 * *(unsigned int *)v348[0];
      v65 = *(unsigned int *)(v64 + 8);
      if (*(_DWORD *)(v64 + 8))
      {
        v66 = 0;
        do
        {
          v67 = *(unsigned int *)(*(_QWORD *)v64 + 4 * v66);
          if ((_DWORD)v67 != 2)
          {
            v68 = v351[v67];
            if (v68 == v13)
            {
              v68 = v356;
              LODWORD(v356) = v356 + 1;
              v351[v67] = v68;
            }
            v69 = v350;
            v70 = *(unsigned int *)(v338 + 8);
            if (v70 == *(_DWORD *)(v338 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
              v70 = *(unsigned int *)(v338 + 8);
            }
            v71 = *(_QWORD *)v338 + 16 * v70;
            *(_DWORD *)v71 = v68;
            *(_DWORD *)(v71 + 4) = v13;
            *(_DWORD *)(v71 + 8) = 3;
            *(_WORD *)(v71 + 12) = v69;
            *(_WORD *)(v71 + 14) = 0;
            ++*(_DWORD *)(v338 + 8);
            v65 = *(unsigned int *)(v64 + 8);
            a3 = v338;
          }
          ++v66;
        }
        while (v66 < v65);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    v56 = *(_DWORD *)(a1 + 64);
    v42 = *(_QWORD *)v333;
  }
  if (v56)
  {
    v344 = 0;
    v345 = 0;
    if ((_DWORD)v42)
    {
      __b = 0;
      v72 = realloc_array(0, &__b, 2 * v42, 0, 0, 1);
      v344 = __b;
      LODWORD(v345) = v42;
      HIDWORD(v345) = v72 >> 1;
      memset_pattern16(__b, &unk_209A75B40, 2 * v42);
    }
    else
    {
      LODWORD(v345) = 0;
    }
    NGramIterator::NGramIterator((NGramIterator *)&__b, (const WordLanguageModel *)a1, 1, 0);
    v80 = 0;
    while (NGramIterator::next((NGramIterator *)&__b, v73, v74, v75, v76, v77, v78, v79))
    {
      v81 = *(unsigned int *)v348[0];
      v82 = *(unsigned int *)(v355[0] + 16 * v81 + 8);
      if ((_DWORD)v82)
      {
        v83 = *(unsigned int **)(v355[0] + 16 * v81);
        v84 = *(_QWORD *)a4;
        v85 = v344;
        do
        {
          v87 = *v83++;
          v86 = v87;
          if (*(_DWORD *)(v84 + 16 * v87 + 8))
          {
            if ((_DWORD)v81 == v52)
            {
              v85[v86] = a6;
              v80 = 1;
            }
            else
            {
              if (*(_DWORD *)(a1 + 64) == 1)
                v88 = v349;
              else
                v88 = v350;
              v85[v86] = v88;
            }
          }
          --v82;
        }
        while (v82);
      }
    }
    if ((_DWORD)v42)
    {
      for (i = 0; i != v42; ++i)
      {
        if (i != 1)
        {
          v90 = *((unsigned __int16 *)v344 + i);
          if (v90 != 20000)
          {
            v91 = a3;
            v92 = v351[i];
            v93 = *(unsigned int *)(v91 + 8);
            if (v93 == *(_DWORD *)(v91 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(v91, 1, 1);
              v93 = *(unsigned int *)(v91 + 8);
            }
            v94 = *(_QWORD *)v91 + 16 * v93;
            *(_DWORD *)v94 = v13;
            *(_DWORD *)(v94 + 4) = v92;
            *(_DWORD *)(v94 + 8) = i;
            *(_WORD *)(v94 + 12) = v90;
            *(_WORD *)(v94 + 14) = 0;
            ++*(_DWORD *)(v91 + 8);
            a3 = v91;
          }
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
    LOBYTE(v56) = v80 & 1;
  }
  if (v52 != -1 && (v56 & 1) == 0)
  {
    v95 = **(_DWORD **)(v355[0] + 16 * v52);
    v96 = *(_DWORD *)(a3 + 8);
    if (v96 == *(_DWORD *)(a3 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
      v96 = *(_DWORD *)(a3 + 8);
    }
    v97 = *(_QWORD *)a3 + 16 * v96;
    *(_DWORD *)v97 = v13;
    *(_DWORD *)(v97 + 4) = v13;
    *(_DWORD *)(v97 + 8) = v95;
    *(_WORD *)(v97 + 12) = a6;
    *(_WORD *)(v97 + 14) = 0;
    ++*(_DWORD *)(a3 + 8);
  }
  v98 = MemChunkAlloc(0x70uLL, 0);
  v337 = (_QWORD *)Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash((uint64_t)v98, 0, 16);
  v99 = v320;
  v100 = *((_DWORD *)v320 + 16);
  if (v100 >= 3)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v320, 3, 1);
    while (NGramIterator::next((NGramIterator *)&__b, v101, v102, v103, v104, v105, v106, v107))
    {
      v108 = v354[0] + 16 * *(unsigned int *)v348[0];
      v109 = *(unsigned int *)(v108 + 8);
      v334 = (unsigned int *)(v108 + 8);
      if (*(_DWORD *)(v108 + 8))
      {
        v110 = 0;
        v111 = (_QWORD *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        v112 = (unsigned int *)(v111 + 1);
        v328 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          v113 = *(unsigned int *)(*(_QWORD *)v108 + 4 * v110);
          if ((_DWORD)v113 != 2 && *(_DWORD *)(*(_QWORD *)a4 + 16 * v113 + 8) != 0)
          {
            v115 = *v112;
            if ((_DWORD)v115)
            {
              for (j = 0; j < v115; ++j)
              {
                v117 = *(unsigned int *)(*v111 + 4 * j);
                if ((v117 - 1) >= 2 && *(_DWORD *)(*(_QWORD *)a4 + 16 * v117 + 8) != 0)
                {
                  v340 = (void *)__PAIR64__(v117, v113);
                  v344 = 0;
                  v342 = &v356;
                  if (Hash<Int32Pair,Int32Pair,Int32PairScope,int>::insert((uint64_t)v337, &v340, &v344, (_DWORD **)&v342))LODWORD(v356) = v356 + 1;
                  v119 = *(_DWORD *)v342;
                  v120 = v351[v117];
                  v121 = v350;
                  v122 = *(unsigned int *)(v338 + 8);
                  if (v122 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    v122 = *(unsigned int *)(v338 + 8);
                  }
                  v123 = *(_QWORD *)v338 + 16 * v122;
                  *(_DWORD *)v123 = v119;
                  *(_DWORD *)(v123 + 4) = v120;
                  *(_DWORD *)(v123 + 8) = 3;
                  *(_WORD *)(v123 + 12) = v121;
                  *(_WORD *)(v123 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  v115 = *v112;
                }
              }
              v108 = v328;
              v109 = *v334;
              v99 = v320;
            }
          }
          ++v110;
        }
        while (v110 < v109);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    v100 = *((_DWORD *)v99 + 16);
    a3 = v338;
  }
  if (v100 >= 2)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 2, 0);
    while (NGramIterator::next((NGramIterator *)&__b, v124, v125, v126, v127, v128, v129, v130))
    {
      v131 = v354[0] + 16 * *(unsigned int *)v348[0];
      v132 = *(unsigned int *)(v131 + 8);
      v335 = (unsigned int *)(v131 + 8);
      if (*(_DWORD *)(v131 + 8))
      {
        v133 = 0;
        v134 = (_QWORD *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 4));
        v135 = (unsigned int *)(v134 + 1);
        v329 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          v136 = *(unsigned int *)(*(_QWORD *)v131 + 4 * v133);
          if ((_DWORD)v136 != 2 && *(_DWORD *)(*(_QWORD *)a4 + 16 * v136 + 8) != 0)
          {
            v138 = *v135;
            if ((_DWORD)v138)
            {
              for (k = 0; k < v138; ++k)
              {
                v140 = *(unsigned int *)(*v134 + 4 * k);
                if ((_DWORD)v140 != 1 && *(_DWORD *)(*(_QWORD *)a4 + 16 * v140 + 8) != 0)
                {
                  v344 = (void *)__PAIR64__(v140, v136);
                  Bucket = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v337, &v344);
                  if (*Bucket)
                    v143 = (int *)*Bucket + 5;
                  else
                    v143 = &v351[v140];
                  v144 = *v143;
                  v145 = v351[v136];
                  v146 = v349;
                  v147 = *(unsigned int *)(v338 + 8);
                  if (v147 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    v147 = *(unsigned int *)(v338 + 8);
                  }
                  v148 = *(_QWORD *)v338 + 16 * v147;
                  *(_DWORD *)v148 = v145;
                  *(_DWORD *)(v148 + 4) = v144;
                  *(_DWORD *)(v148 + 8) = v140;
                  *(_WORD *)(v148 + 12) = v146;
                  *(_WORD *)(v148 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  v138 = *v135;
                }
              }
              v131 = v329;
              v132 = *v335;
            }
          }
          ++v133;
        }
        while (v133 < v132);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    a3 = v338;
    v99 = v320;
  }
  v149 = MemChunkAlloc(0x70uLL, 0);
  v336 = (_QWORD *)Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::Hash((uint64_t)v149, 0, 16);
  v150 = *((_DWORD *)v99 + 16);
  if (v150 >= 4)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 4, 1);
    v158 = a4;
    v159 = (uint64_t)v337;
    while (NGramIterator::next((NGramIterator *)&__b, v151, v152, v153, v154, v155, v156, v157))
    {
      v160 = v354[0] + 16 * *(unsigned int *)v348[0];
      v161 = *(unsigned int *)(v160 + 8);
      v317 = (unsigned int *)(v160 + 8);
      if (*(_DWORD *)(v160 + 8))
      {
        v162 = 0;
        v163 = (_QWORD *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        v164 = (_QWORD *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 8));
        v325 = v163;
        v330 = (unsigned int *)(v163 + 1);
        v165 = (unsigned int *)(v164 + 1);
        v314 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          v166 = *(unsigned int *)(*(_QWORD *)v160 + 4 * v162);
          if ((_DWORD)v166 != 2 && *(_DWORD *)(*(_QWORD *)v158 + 16 * v166 + 8) != 0)
          {
            v168 = *v330;
            if ((_DWORD)v168)
            {
              v322 = v162;
              for (m = 0; m < v168; ++m)
              {
                v170 = *(unsigned int *)(*v163 + 4 * m);
                if ((v170 - 1) >= 2 && *(_DWORD *)(*(_QWORD *)v158 + 16 * v170 + 8) != 0)
                {
                  v172 = *v165;
                  if ((_DWORD)v172)
                  {
                    for (n = 0; n < v172; ++n)
                    {
                      v174 = *(unsigned int *)(*v164 + 4 * n);
                      if ((_DWORD)v174 != 1 && *(_DWORD *)(*(_QWORD *)v158 + 16 * v174 + 8) != 0)
                      {
                        v344 = (void *)__PAIR64__(v170, v166);
                        LODWORD(v345) = v174;
                        v342 = 0;
                        v340 = &v356;
                        if (Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::insert((uint64_t)v336, &v344, &v342, (_DWORD **)&v340))LODWORD(v356) = v356 + 1;
                        v176 = *(_DWORD *)v340;
                        v342 = (void *)__PAIR64__(v174, v170);
                        v177 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v159, &v342);
                        if (*v177)
                          v178 = (int *)*v177 + 5;
                        else
                          v178 = &v351[v174];
                        v179 = *v178;
                        v180 = v350;
                        v181 = *(unsigned int *)(v338 + 8);
                        if (v181 == *(_DWORD *)(v338 + 12))
                        {
                          DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                          v181 = *(unsigned int *)(v338 + 8);
                        }
                        v182 = *(_QWORD *)v338 + 16 * v181;
                        *(_DWORD *)v182 = v176;
                        *(_DWORD *)(v182 + 4) = v179;
                        *(_DWORD *)(v182 + 8) = 3;
                        *(_WORD *)(v182 + 12) = v180;
                        *(_WORD *)(v182 + 14) = 0;
                        ++*(_DWORD *)(v338 + 8);
                        v172 = *v165;
                        v158 = a4;
                        v159 = (uint64_t)v337;
                      }
                    }
                    v163 = v325;
                    v168 = *v330;
                  }
                }
              }
              v160 = v314;
              v161 = *v317;
              v162 = v322;
            }
          }
          ++v162;
        }
        while (v162 < v161);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    v99 = v320;
    v150 = *((_DWORD *)v320 + 16);
    a3 = v338;
  }
  if (v150 >= 3)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 3, 0);
    v190 = a4;
    v191 = (uint64_t)v337;
LABEL_199:
    while (NGramIterator::next((NGramIterator *)&__b, v183, v184, v185, v186, v187, v188, v189))
    {
      v192 = v354[0] + 16 * *(unsigned int *)v348[0];
      v193 = *(unsigned int *)(v192 + 8);
      v315 = (unsigned int *)(v192 + 8);
      if (*(_DWORD *)(v192 + 8))
      {
        v194 = 0;
        v195 = (_QWORD *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        v196 = (_QWORD *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 8));
        v326 = (unsigned int *)(v195 + 1);
        v331 = (unsigned int *)(v196 + 1);
        v312 = v354[0] + 16 * *(unsigned int *)v348[0];
        v323 = v195;
        while (1)
        {
          v197 = *(unsigned int *)(*(_QWORD *)v192 + 4 * v194);
          if ((_DWORD)v197 != 2 && *(_DWORD *)(*(_QWORD *)v190 + 16 * v197 + 8) != 0)
          {
            v199 = *v326;
            if ((_DWORD)v199)
              break;
          }
LABEL_235:
          if (++v194 >= v193)
            goto LABEL_199;
        }
        v318 = v194;
        v200 = 0;
        while (1)
        {
          v201 = *(unsigned int *)(*v195 + 4 * v200);
          if ((v201 - 1) >= 2 && *(_DWORD *)(*(_QWORD *)v190 + 16 * v201 + 8) != 0)
          {
            v203 = *v331;
            if ((_DWORD)v203)
              break;
          }
LABEL_233:
          if (++v200 >= v199)
          {
            v192 = v312;
            v193 = *v315;
            v194 = v318;
            goto LABEL_235;
          }
        }
        v204 = 0;
        while (2)
        {
          v205 = *(unsigned int *)(*v196 + 4 * v204);
          if ((_DWORD)v205 != 1 && *(_DWORD *)(*(_QWORD *)v190 + 16 * v205 + 8) != 0)
          {
            v342 = (void *)__PAIR64__(v201, v197);
            v207 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v191, &v342);
            if (v207)
            {
              v208 = (int *)v207 + 5;
              goto LABEL_222;
            }
            if ((_DWORD)v197 == 1)
            {
              v208 = &v351[v201];
LABEL_222:
              v344 = (void *)__PAIR64__(v201, v197);
              LODWORD(v345) = v205;
              v209 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket((uint64_t)v336, &v344);
              if (v209)
              {
                v210 = (int *)(v209 + 24);
              }
              else
              {
                v340 = (void *)__PAIR64__(v205, v201);
                v211 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v191, &v340);
                if (*v211)
                  v210 = (int *)*v211 + 5;
                else
                  v210 = &v351[v205];
              }
              v212 = *v208;
              v213 = *v210;
              v214 = v349;
              v215 = *(unsigned int *)(v338 + 8);
              if (v215 == *(_DWORD *)(v338 + 12))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                v215 = *(unsigned int *)(v338 + 8);
              }
              v216 = *(_QWORD *)v338 + 16 * v215;
              *(_DWORD *)v216 = v212;
              *(_DWORD *)(v216 + 4) = v213;
              *(_DWORD *)(v216 + 8) = v205;
              *(_WORD *)(v216 + 12) = v214;
              *(_WORD *)(v216 + 14) = 0;
              ++*(_DWORD *)(v338 + 8);
              v190 = a4;
              v191 = (uint64_t)v337;
            }
            v203 = *v331;
          }
          if (++v204 >= v203)
          {
            v195 = v323;
            v199 = *v326;
            goto LABEL_233;
          }
          continue;
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    a3 = v338;
    if (*((_DWORD *)v320 + 16) >= 4u)
    {
      NGramIterator::NGramIterator((NGramIterator *)&__b, v320, 4, 0);
      v224 = a4;
      v226 = (uint64_t)v336;
      v225 = (uint64_t)v337;
LABEL_239:
      while (NGramIterator::next((NGramIterator *)&__b, v217, v218, v219, v220, v221, v222, v223))
      {
        v227 = v354[0] + 16 * *(unsigned int *)v348[0];
        v228 = *(unsigned int *)(v227 + 8);
        v310 = (unsigned int *)(v227 + 8);
        if (*(_DWORD *)(v227 + 8))
        {
          v229 = 0;
          v230 = (_QWORD *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
          v231 = (unsigned int *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 8));
          v232 = (_QWORD *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 12));
          v313 = v230;
          v316 = (unsigned int *)(v230 + 1);
          v324 = v231 + 2;
          v327 = v232;
          v332 = (unsigned int *)(v232 + 1);
          v309 = v354[0] + 16 * *(unsigned int *)v348[0];
          v321 = (WordLanguageModel *)v231;
          while (1)
          {
            v233 = *(unsigned int *)(*(_QWORD *)v227 + 4 * v229);
            if (*(_DWORD *)(*(_QWORD *)v224 + 16 * v233 + 8))
            {
              v234 = *v316;
              if ((_DWORD)v234)
                break;
            }
LABEL_283:
            if (++v229 >= v228)
              goto LABEL_239;
          }
          v311 = v229;
          v235 = 0;
          while (1)
          {
            v236 = *(unsigned int *)(*v230 + 4 * v235);
            if ((v236 - 1) >= 2 && *(_DWORD *)(*(_QWORD *)v224 + 16 * v236 + 8) != 0)
            {
              v238 = *v324;
              if ((_DWORD)v238)
                break;
            }
LABEL_281:
            if (++v235 >= v234)
            {
              v227 = v309;
              v228 = *v310;
              v229 = v311;
              goto LABEL_283;
            }
          }
          v319 = v235;
          v239 = 0;
          while (1)
          {
            v240 = *(unsigned int *)(*(_QWORD *)v231 + 4 * v239);
            if ((v240 - 1) >= 2 && *(_DWORD *)(*(_QWORD *)v224 + 16 * v240 + 8) != 0)
            {
              v242 = *v332;
              if ((_DWORD)v242)
                break;
            }
LABEL_279:
            if (++v239 >= v238)
            {
              v230 = v313;
              v234 = *v316;
              v235 = v319;
              goto LABEL_281;
            }
          }
          v243 = 0;
          while (2)
          {
            v244 = *(unsigned int *)(*v232 + 4 * v243);
            if ((_DWORD)v244 != 1 && *(_DWORD *)(*(_QWORD *)v224 + 16 * v244 + 8) != 0)
            {
              v344 = (void *)__PAIR64__(v236, v233);
              LODWORD(v345) = v240;
              v246 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(v226, &v344);
              if ((_DWORD)v233 != 1 || v246)
              {
                if (v246)
                {
                  v248 = (int *)(v246 + 24);
LABEL_267:
                  v342 = (void *)__PAIR64__(v240, v236);
                  LODWORD(v343) = v244;
                  v249 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(v226, &v342);
                  if (v249)
                  {
                    v250 = (int *)(v249 + 24);
                  }
                  else
                  {
                    v340 = (void *)__PAIR64__(v244, v240);
                    v251 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v225, &v340);
                    if (*v251)
                    {
                      v250 = (int *)*v251 + 5;
                    }
                    else
                    {
                      v250 = &v351[v244];
                      if (*v250 == -1)
                        v250 = &v353;
                    }
                  }
                  v252 = *v248;
                  v253 = *v250;
                  v254 = v349;
                  v255 = *(unsigned int *)(v338 + 8);
                  if (v255 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    v255 = *(unsigned int *)(v338 + 8);
                  }
                  v256 = *(_QWORD *)v338 + 16 * v255;
                  *(_DWORD *)v256 = v252;
                  *(_DWORD *)(v256 + 4) = v253;
                  *(_DWORD *)(v256 + 8) = v244;
                  *(_WORD *)(v256 + 12) = v254;
                  *(_WORD *)(v256 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  v224 = a4;
                  v226 = (uint64_t)v336;
                  v225 = (uint64_t)v337;
                  v232 = v327;
                }
              }
              else
              {
                v342 = (void *)__PAIR64__(v240, v236);
                v247 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v225, &v342);
                if (v247)
                {
                  v248 = (int *)v247 + 5;
                  goto LABEL_267;
                }
              }
              v242 = *v332;
            }
            if (++v243 >= v242)
            {
              v231 = (unsigned int *)v321;
              v238 = *v324;
              goto LABEL_279;
            }
            continue;
          }
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
      a3 = v338;
    }
  }
  if (v336)
  {
    (*(void (**)(_QWORD *))*v336)(v336);
    MemChunkFree(v336, 0);
  }
  if (v337)
  {
    (*(void (**)(_QWORD *))*v337)(v337);
    MemChunkFree(v337, 0);
  }
  v257 = v356;
  v258 = v356 - 1;
  v259 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v259)
  {
    v260 = (int *)(*(_QWORD *)a3 + 4);
    while (1)
    {
      v261 = v257 - 1;
      if (*v260 == 1)
        goto LABEL_295;
      if (*v260 == v258)
        break;
LABEL_296:
      if (*(v260 - 1) == v258)
        *(v260 - 1) = 1;
      v260 += 4;
      if (!--v259)
      {
        v257 = v356;
        goto LABEL_300;
      }
    }
    v261 = 1;
LABEL_295:
    *v260 = v261;
    goto LABEL_296;
  }
LABEL_300:
  __b = 0;
  v347 = 0;
  if (!v257)
  {
    v344 = 0;
    v345 = 0;
    goto LABEL_308;
  }
  v344 = 0;
  v262 = realloc_array(0, &v344, 4 * v257, 0, 0, 1);
  v345 = 0;
  __b = v344;
  v263 = v356;
  LODWORD(v347) = v257;
  HIDWORD(v347) = v262 >> 2;
  v344 = 0;
  if (!(_DWORD)v356)
  {
LABEL_308:
    LODWORD(v345) = 0;
    v342 = 0;
    v343 = 0;
    goto LABEL_309;
  }
  v342 = 0;
  v264 = realloc_array(0, &v342, 4 * v356, 0, 0, 1);
  v343 = 0;
  v344 = v342;
  v265 = v356;
  LODWORD(v345) = v263;
  HIDWORD(v345) = v264 >> 2;
  v342 = 0;
  if (!(_DWORD)v356)
  {
LABEL_309:
    v268 = 0;
    LODWORD(v343) = 0;
    goto LABEL_310;
  }
  v340 = 0;
  v266 = realloc_array(0, &v340, 4 * v356, 0, 0, 1);
  v267 = v340;
  v342 = v340;
  v268 = v356;
  LODWORD(v343) = v265;
  HIDWORD(v343) = v266 >> 2;
  v269 = __b;
  if ((int)v356 < 1)
    goto LABEL_311;
  v270 = 0;
  do
  {
    v269[v270] = 0;
    v267[v270++] = 0;
    v268 = v356;
  }
  while (v270 < (int)v356);
LABEL_310:
  v269 = __b;
LABEL_311:
  v271 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v271)
  {
    v272 = 0;
    v273 = *(unsigned int **)a3;
    v274 = v342;
    do
    {
      if (v273[2] == 3)
      {
        v275 = *v273;
        if (!v274[v275])
        {
          v274[v275] = v272;
          v269[*v273] = 1;
          v271 = *(unsigned int *)(a3 + 8);
        }
      }
      ++v272;
      v273 += 4;
    }
    while (v272 < v271);
    v268 = v356;
  }
  v276 = v344;
  if (v268 >= 1)
  {
    v277 = 0;
    do
    {
      v269[v277] = 0;
      v276[v277++] = 0;
    }
    while (v277 < (int)v356);
  }
  *v269 = 1;
  v276[v258] = 1;
  v278 = *(unsigned int *)(a3 + 8);
  v279 = *(_QWORD *)a3 + 4;
  do
  {
    if (!v278)
      break;
    v280 = 0;
    v281 = 0;
    v282 = (unsigned int *)v279;
    do
    {
      if (v269[*(v282 - 1)] == 1)
      {
        v283 = *v282;
        if (!v269[v283])
        {
          v281 = 1;
          v269[v283] = 1;
          v278 = *(unsigned int *)(a3 + 8);
        }
      }
      v282 += 4;
      ++v280;
    }
    while (v280 < v278);
  }
  while ((v281 & 1) != 0);
  v284 = *(_QWORD *)a3 + 4;
  do
  {
    v285 = *(_DWORD *)(a3 + 8);
    if (v285 - 1 < 0)
      break;
    v286 = 0;
    v287 = (_DWORD *)(v284 + 16 * (v285 - 1));
    v288 = v287;
    do
    {
      v289 = *v288;
      v288 -= 4;
      if (v276[v289] == 1)
      {
        v290 = *(v287 - 1);
        if (!v276[v290])
        {
          v286 = 1;
          v276[v290] = 1;
        }
      }
      --v285;
      v287 = v288;
    }
    while (v285 > 0);
  }
  while ((v286 & 1) != 0);
  v291 = v356;
  v340 = 0;
  v341 = 0;
  if ((_DWORD)v356)
  {
    v357 = 0;
    v292 = realloc_array(0, &v357, 4 * v356, 0, 0, 1);
    v293 = v357;
    v340 = v357;
    v294 = v356;
    LODWORD(v341) = v291;
    HIDWORD(v341) = v292 >> 2;
    if ((int)v356 >= 1)
    {
      v295 = 0;
      v296 = 0;
      v297 = __b;
      v298 = v344;
      do
      {
        if (v297[v295] == 1 && v298[v295] == 1)
        {
          v293[v295] = v296++;
          v294 = v356;
        }
        ++v295;
      }
      while (v295 < v294);
    }
  }
  else
  {
    v293 = 0;
    LODWORD(v341) = 0;
  }
  v299 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v299)
  {
    v300 = 0;
    v301 = 0;
    v302 = 0;
    do
    {
      v303 = *(_QWORD *)a3;
      v304 = (unsigned int *)(*(_QWORD *)a3 + v300);
      v305 = *v304;
      if (*((_DWORD *)__b + v305))
      {
        v306 = v304[1];
        if (*((_DWORD *)v344 + v306))
        {
          *v304 = v293[v305];
          v304[1] = v293[v306];
          if (v301 != v302)
          {
            *(_OWORD *)(v303 + 16 * v302) = *(_OWORD *)v304;
            v299 = *(unsigned int *)(a3 + 8);
          }
          ++v302;
        }
      }
      ++v301;
      v300 += 16;
    }
    while (v301 < v299);
    v307 = *(_DWORD *)(a3 + 12);
    if (v302 > v307)
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, v302 - v307, 0);
  }
  else
  {
    v302 = 0;
  }
  *(_DWORD *)(a3 + 8) = v302;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v340);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v342);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v351);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v354);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v355);
}

void sub_209907C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 160);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v31 - 136);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v31 - 120);
  _Unwind_Resume(a1);
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::add(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  HIDWORD(v7) = *a2;
  LODWORD(v7) = *a2;
  v8 = (v7 >> 19) + a2[1];
  v9 = *(_DWORD *)(v5 + 16);
  if (v9)
    v10 = (-1640531527 * v8) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v12 = *(_QWORD *)(v5 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v12;
  *(_DWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 12) = *(_QWORD *)a2;
  *(_DWORD *)(v12 + 20) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  *v13 = v12;
  return result;
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218B80;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 20;
  else
    v7 = 24;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209907F70(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(uint64_t a1)
{
  Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218B80;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::insert(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD **a4)
{
  unsigned int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;

  v8 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v8 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v8);
  v9 = a2[1];
  HIDWORD(v10) = *a2;
  LODWORD(v10) = *a2;
  v11 = (v10 >> 19) + v9;
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
    v13 = (-1640531527 * v11) >> -(char)v12;
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(uint64_t **)(v14 + 8 * v13);
  if (!v15)
  {
LABEL_13:
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      v17 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v17;
    v18 = *a4;
    *(_DWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 12) = *(_QWORD *)a2;
    *(_DWORD *)(v17 + 20) = *v18;
    *a4 = (_DWORD *)(v17 + 20);
    *a3 = v17 + 12;
    *(_DWORD *)(v17 + 8) = v11;
    ++*(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 20))
    {
      *(_QWORD *)v17 = *(_QWORD *)(v14 + 8 * v13);
    }
    else
    {
      *(_QWORD *)v17 = 0;
      v19 = *(_QWORD **)(v14 + 8 * v13);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
        *v20 = v17;
        return 1;
      }
    }
    *(_QWORD *)(v14 + 8 * v13) = v17;
    return 1;
  }
  while (*((_DWORD *)v15 + 2) != v11 || *((_DWORD *)v15 + 3) != *a2 || *((_DWORD *)v15 + 4) != v9)
  {
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_13;
  }
  result = 0;
  *a3 = (char *)v15 + 12;
  *a4 = (_DWORD *)v15 + 5;
  return result;
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2189C8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 24;
  else
    v7 = 28;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209908214(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(uint64_t a1)
{
  Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2189C8;
  if (*(_DWORD *)(a1 + 8))
    Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(_QWORD *))(v1 + 104);
          if (v8)
            result = v8((_QWORD *)v5 + 3);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::insert(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD **a4)
{
  unsigned int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;

  v8 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v8 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v8);
  v9 = a2[1];
  HIDWORD(v10) = *a2;
  LODWORD(v10) = *a2;
  HIDWORD(v10) = (v10 >> 19) + v9;
  LODWORD(v10) = HIDWORD(v10);
  v11 = a2[2];
  v12 = (v10 >> 19) + v11;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
    v14 = (-1640531527 * v12) >> -(char)v13;
  else
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(uint64_t **)(v15 + 8 * v14);
  if (!v16)
  {
LABEL_12:
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      v17 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v17;
    v18 = *a4;
    *(_DWORD *)(v17 + 8) = 0;
    v19 = a2[2];
    *(_QWORD *)(v17 + 12) = *(_QWORD *)a2;
    *(_DWORD *)(v17 + 20) = v19;
    *(_DWORD *)(v17 + 24) = *v18;
    *a4 = (_DWORD *)(v17 + 24);
    *a3 = v17 + 12;
    *(_DWORD *)(v17 + 8) = v12;
    ++*(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 20))
    {
      *(_QWORD *)v17 = *(_QWORD *)(v15 + 8 * v14);
    }
    else
    {
      *(_QWORD *)v17 = 0;
      v20 = *(_QWORD **)(v15 + 8 * v14);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
        *v21 = v17;
        return 1;
      }
    }
    *(_QWORD *)(v15 + 8 * v14) = v17;
    return 1;
  }
  while (*((_DWORD *)v16 + 2) != v12
       || *((_DWORD *)v16 + 3) != *a2
       || *((_DWORD *)v16 + 4) != v9
       || *((_DWORD *)v16 + 5) != v11)
  {
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_12;
  }
  result = 0;
  *a3 = (char *)v16 + 12;
  *a4 = v16 + 3;
  return result;
}

_QWORD *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *result;

  v2 = a2[1];
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  HIDWORD(v3) = (v3 >> 19) + v2;
  LODWORD(v3) = HIDWORD(v3);
  v4 = a2[2];
  v5 = (v3 >> 19) + v4;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
    v7 = (-1640531527 * v5) >> -(char)v6;
  else
    v7 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
  v9 = (uint64_t *)*v8;
  if (!*v8)
    return v8;
  do
  {
    result = v8;
    v8 = v9;
    if (*((_DWORD *)v9 + 2) == v5
      && *((_DWORD *)v9 + 3) == *a2
      && *((_DWORD *)v9 + 4) == v2
      && *((_DWORD *)v9 + 5) == v4)
    {
      break;
    }
    v9 = (uint64_t *)*v9;
    result = v8;
  }
  while (*v8);
  return result;
}

void MrecInitModule_dcuda_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugCUDAHelpers1)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugCUDAHelpers1", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugCUDAHelpers1 = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugCUDAHelpers1);
  }
}

void EnvHolder::EnvHolder(EnvHolder *this, int a2)
{
  uint64_t *v4;

  FileHistory::FileHistory((EnvHolder *)((char *)this + 16), 0x64u, 0x64u);
  *((_DWORD *)this + 2) = a2;
  v4 = MemChunkAlloc(0x110uLL, 0);
  *(_QWORD *)this = EnvMgr::EnvMgr((EnvMgr *)v4, 6u);
  *((_QWORD *)this + 1) = 0xFFFFFFFFLL;
}

void sub_20990863C(_Unwind_Exception *a1)
{
  FileHistory *v1;

  FileHistory::~FileHistory(v1);
  _Unwind_Resume(a1);
}

void EnvHolder::~EnvHolder(EnvMgr **this)
{
  DgnDelete<EnvMgr>(*this);
  FileHistory::~FileHistory((FileHistory *)(this + 2));
}

void verifySubFileExistsAtMostOneOfDouble(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  v8 = DFile::subFileExists(a1, a2);
  if (DFile::subFileExists(a1, a3))
  {
    if (v8)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 94, (uint64_t)"fileutil/envhold", 6, (uint64_t)"%.500s %.500s %.500s %.500s", v9, v10, a4);
    }
  }
}

uint64_t EnvHolder::errorIfFileObviouslyIsNotOfTypeUser(EnvHolder *this, DFile *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"User");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x3Eu, 0x3Du, (char)"User");
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
  v3 = v15;
  v5 = v16;
  v4 = HIDWORD(v16);
  *(_DWORD *)(v15 + 4 * v16) = 38;
  v6 = v5 + 1;
  LODWORD(v16) = v6;
  if (v6 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
    v3 = v15;
    v6 = v16;
    v4 = HIDWORD(v16);
  }
  *(_DWORD *)(v3 + 4 * v6) = 39;
  v7 = v6 + 1;
  LODWORD(v16) = v7;
  if (v7 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
    v7 = v16;
    v3 = v15;
  }
  *(_DWORD *)(v3 + 4 * v7) = 43;
  v8 = v7 + 1;
  LODWORD(v16) = v7 + 1;
  v9 = v14;
  if ((_DWORD)v14 == HIDWORD(v14))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v13, 1, 1);
    v9 = v14;
    v8 = v16;
  }
  *(_DWORD *)(v13 + 4 * v9) = 42;
  LODWORD(v14) = v9 + 1;
  v12[0] = 0;
  v12[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v12, &v15, 0, v8);
  v11[0] = 0;
  v11[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v11, &v13, 0, v14);
  verifySubFileSetExistsOneOfDouble((uint64_t)this, (uint64_t)v12, (uint64_t)v11, (char)"User");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x47u, 0x46u, (char)"User");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x57u, 0x56u, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x20u, 0x1Fu, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x53u, 0x50u, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x55u, 0x50u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x53u, 0x55u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x55u, 0x53u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Du, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Au, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x3Du, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x1Fu, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x50u, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x17u, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x3Fu, 0x63u, (char)"User");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_209908A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13 - 32);
  _Unwind_Resume(a1);
}

void verifySubFileExistsOneOfDouble(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = DFile::subFileExists(a1, a2);
  v9 = DFile::subFileExists(a1, a3);
  if (v8)
    v10 = 2;
  else
    v10 = 1;
  if (!v9)
    v10 = v8;
  if (v10 != 1)
  {
    if (v10)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 121, (uint64_t)"fileutil/envhold", 6, (uint64_t)"%.500s %.500s %.500s %.500s", v13, v14, a4);
    }
    else
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 116, (uint64_t)"fileutil/envhold", 5, (uint64_t)"%.500s %.500s %.500s %.500s", v11, v12, a4);
    }
  }
}

void verifySubFileSetExistsOneOfDouble(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a2 + 8))
  {
    v8 = 0;
    while (!DFile::subFileExists(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v8)))
    {
      if (++v8 >= (unint64_t)*(unsigned int *)(a2 + 8))
        goto LABEL_5;
    }
    v9 = a3;
    a3 = a2;
  }
  else
  {
LABEL_5:
    v9 = a2;
  }
  if (*(_DWORD *)(a3 + 8))
  {
    v10 = 0;
    do
      verifySubFileExists(a1, *(_DWORD *)(*(_QWORD *)a3 + 4 * v10++), a4);
    while (v10 < *(unsigned int *)(a3 + 8));
  }
  if (*(_DWORD *)(v9 + 8))
  {
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(*(_QWORD *)v9 + 4 * v11);
      if (DFile::subFileExists(a1, v12))
      {
        GetSubFileExtensionString(v12);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 62, (uint64_t)"fileutil/envhold", 4, (uint64_t)"%.500s %.500s %.500s", v13, v14, a4);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(v9 + 8));
  }
}

void verifySubFile1ImpliesSubFile2(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  uint64_t v8;
  uint64_t v9;

  if (DFile::subFileExists(a1, a2))
  {
    if ((DFile::subFileExists(a1, a3) & 1) == 0)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 163, (uint64_t)"fileutil/envhold", 2, (uint64_t)"%.500s %.500s %.500s %.500s", v8, v9, a4);
    }
  }
}

void EnvHolder::errorIfFileObviouslyIsNotOfTypeSigProc(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"SigProc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x57u, 0x56u, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x6Eu, 0x6Cu, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x11u, 0x10u, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x24u, 0x23u, (char)"SigProc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x56u, 0x52u, (char)"SigProc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x10u, 0x52u, (char)"SigProc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x23u, 0x52u, (char)"SigProc");
}

void EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"Voc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x3Eu, 0x3Du, (char)"Voc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x62u, 0x2Fu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x61u, 0x59u, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x61u, 0x4Eu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x5Bu, 0xEu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x5Au, 0xAu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x3Au, 0x38u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Fu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x4Eu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x59u, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x16u, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0xAu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0xEu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x38u, 0x69u, (char)"Voc");
}

void verifySubFileExists(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((DFile::subFileExists(a1, a2) & 1) == 0)
  {
    GetSubFileExtensionString(a2);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 73, (uint64_t)"fileutil/envhold", 3, (uint64_t)"%.500s %.500s %.500s", v5, v6, a3);
  }
}

uint64_t EnvHolder::errorIfFileObviouslyIsNotOfTypeParamSetHolder(EnvHolder *this, DFile *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"ParamSetHolder");
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
  v3 = v23;
  v5 = v24;
  v4 = HIDWORD(v24);
  *(_DWORD *)(v23 + 4 * v24) = 0;
  v6 = v5 + 1;
  LODWORD(v24) = v6;
  if (v6 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v6 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v6) = 11;
  v7 = v6 + 1;
  LODWORD(v24) = v7;
  if (v7 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v7 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v7) = 15;
  v8 = v7 + 1;
  LODWORD(v24) = v8;
  if (v8 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v8 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v8) = 33;
  v9 = v8 + 1;
  LODWORD(v24) = v9;
  if (v9 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v9 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v9) = 34;
  v10 = v9 + 1;
  LODWORD(v24) = v10;
  if (v10 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v10 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v10) = 55;
  v11 = v10 + 1;
  LODWORD(v24) = v11;
  if (v11 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v11 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v11) = 69;
  v12 = v11 + 1;
  LODWORD(v24) = v12;
  if (v12 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v12 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v12) = 60;
  v13 = v12 + 1;
  LODWORD(v24) = v13;
  if (v13 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v13 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v13) = 79;
  v14 = v13 + 1;
  LODWORD(v24) = v14;
  if (v14 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v3 = v23;
    v14 = v24;
    v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v14) = 88;
  v15 = v14 + 1;
  LODWORD(v24) = v15;
  if (v15 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    v15 = v24;
    v3 = v23;
  }
  *(_DWORD *)(v3 + 4 * v15) = 84;
  v16 = v15 + 1;
  LODWORD(v24) = v15 + 1;
  v17 = v22;
  if ((_DWORD)v22 == HIDWORD(v22))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
    v17 = v22;
    v16 = v24;
  }
  *(_DWORD *)(v21 + 4 * v17) = 68;
  LODWORD(v22) = v17 + 1;
  v20[0] = 0;
  v20[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v20, &v23, 0, v16);
  v19[0] = 0;
  v19[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v19, &v21, 0, v22);
  verifySubFileSetExistsOneOfDouble((uint64_t)this, (uint64_t)v20, (uint64_t)v19, (char)"ParamSetHolder");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x44u, 0x39u, (char)"ParamSetHolder");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_2099092F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13 - 32);
  _Unwind_Resume(a1);
}

void EnvHolder::loadEnvHolder(uint64_t a1, EnvHolder *a2, int a3)
{
  DFile *v6;
  unsigned int v7;
  uint64_t *v8;
  EnvMgr *v9;
  FileHistory *v10;
  EnvMgr *v11;
  int64x2_t v12;
  int64x2_t v13;
  _BYTE v14[24];
  int64x2_t v15;
  int64x2_t v16;

  v15 = 0u;
  v16 = 0u;
  SnapTime::recordTime((SnapTime *)&v15, 1, 1, 1, 1);
  *(_DWORD *)(a1 + 12) = a3;
  switch(a3)
  {
    case 0:
      verifySubFileExistsAtMostOneOfDouble((uint64_t)a2, 0x15u, 0x16u, (char)"EnvHolder");
      v7 = 6;
      break;
    case 1:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeUser(a2, v6);
      v7 = 3;
      break;
    case 2:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeSigProc(a2, v6);
      v7 = 4;
      break;
    case 3:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(a2, v6);
      v7 = 2;
      break;
    case 4:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeParamSetHolder(a2, v6);
      v7 = 13;
      break;
    default:
      v7 = 0;
      break;
  }
  DFileChecksums::DFileChecksums((DFileChecksums *)v14);
  DgnDelete<EnvMgr>(*(EnvMgr **)a1);
  v8 = MemChunkAlloc(0x110uLL, 0);
  v9 = EnvMgr::EnvMgr((EnvMgr *)v8, v7);
  *(_QWORD *)a1 = v9;
  EnvMgr::loadEnvMgr(v9, a2, (DFileChecksums *)v14);
  EnvMgr::setSemanticType(*(_QWORD *)a1, 6);
  v11 = *(EnvMgr **)a1;
  v10 = (FileHistory *)(a1 + 16);
  FileHistory::loadFileHistory(v10, a2, *((unsigned __int8 *)v11 + 264));
  v12 = 0u;
  v13 = 0u;
  SnapTime::recordTime((SnapTime *)&v12, 1, 1, 1, 1);
  v12 = vsubq_s64(v12, v15);
  v13 = vsubq_s64(v13, v16);
  FileHistory::addEntryWithElapsedTime(v10, " loadEnvHolder time: ", (const SnapTime *)&v12);
  if (!a3)
    (*(void (**)(EnvHolder *, const char *))(*(_QWORD *)a2 + 80))(a2, "EnvHolder");
  DFileChecksums::~DFileChecksums((DFileChecksums *)v14);
}

void sub_2099094D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va);
  _Unwind_Resume(a1);
}

void EnvHolder::saveEnvHolder(EnvMgr **a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  _BOOL4 v10;
  uint64_t *v11;
  FileHistory *v12;
  int64x2_t v13;
  int64x2_t v14;
  _BYTE v15[24];
  _BYTE v16[16];
  int64x2_t v17;
  int64x2_t v18;

  v17 = 0u;
  v18 = 0u;
  SnapTime::recordTime((SnapTime *)&v17, 1, 1, 1, 1);
  if (a4)
    v10 = a4 != 2;
  else
    v10 = *((_BYTE *)*a1 + 264) != 0;
  DFileOwner::DFileOwner((DFileOwner *)v16);
  *a3 = 1;
  v11 = DFile::openDFile(a2, (const FileSpec *)1, 6, (uint64_t)v16);
  *a3 = 2;
  DFileChecksums::DFileChecksums((DFileChecksums *)v15);
  EnvMgr::saveEnvMgr(*a1, (DFile *)v11, (DFileChecksums *)v15, v10, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 1, 1, 1);
  v13 = vsubq_s64(v13, v17);
  v14 = vsubq_s64(v14, v18);
  v12 = (FileHistory *)(a1 + 2);
  FileHistory::addEntryWithElapsedTime(v12, " saveEnvHolder time: ", (const SnapTime *)&v13);
  FileHistory::saveFileHistory(v12, (DFile *)v11, v10);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v16, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v15);
  DFileOwner::~DFileOwner((DFileOwner *)v16);
}

void sub_209909640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va);
  DFileOwner::~DFileOwner((DFileOwner *)va1);
  _Unwind_Resume(a1);
}

void EnvHolder::printSize(EnvHolder *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  EnvMgr *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 451, (DgnString *)&v45);
  if (v46)
    v16 = (char *)v45;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v45);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = *(EnvMgr **)this;
  if (*(_QWORD *)this)
  {
    v44 = 0;
    v45 = 0;
    v22 = (a3 + 1);
    v43 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v45, &v44, &v43);
    *a4 += v45;
    *a5 += v44;
    *a6 += v43;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 452, (DgnString *)&v45);
  if (v46)
    v28 = (char *)v45;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_209A88803, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v45);
  *a4 += v23;
  *a5 += v23;
  v29 = (char *)this + 16;
  v30 = sizeObject((uint64_t)this + 16, 0);
  v31 = sizeObject((uint64_t)v29, 1);
  v32 = sizeObject((uint64_t)v29, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 453, (DgnString *)&v45);
  if (v46)
    v37 = (char *)v45;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v22, &byte_209A88803, (34 - a3), (34 - a3), v37, v30, v31, v32);
  DgnString::~DgnString((DgnString *)&v45);
  *a4 += v30;
  *a5 += v31;
  *a6 += v32;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 454, (DgnString *)&v45);
  if (v46)
    v42 = (char *)v45;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, a3, &byte_209A88803, (35 - a3), (35 - a3), v42, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v45);
}

void sub_20990992C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double EnvHolderMgr::startupEnvHolderMgr(EnvHolderMgr *this)
{
  uint64_t *v1;
  double result;

  v1 = MemChunkAlloc(0x40uLL, 0);
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&result = 0x10000001DLL;
  v1[2] = 0x10000001DLL;
  *((_DWORD *)v1 + 6) = 1;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  *((_DWORD *)v1 + 14) = 0;
  EnvHolderMgr::smpEnvHolderMgr = (uint64_t)v1;
  return result;
}

uint64_t EnvHolderMgr::getEnvHolder(EnvHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 2) <= a2 || (result = *(_QWORD *)(*(_QWORD *)this + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 500, (uint64_t)"fileutil/envhold", 1, (uint64_t)&errStr_fileutil_envhold_E_INVALID_ENVHOLDERID, a7, a8, a2);
    return *(_QWORD *)(*(_QWORD *)this + 8 * v10);
  }
  return result;
}

uint64_t EnvHolderMgr::newEnvHolder(EnvHolderMgr *this)
{
  uint64_t NextId;
  unsigned int i;
  uint64_t *v4;
  uint64_t v5;

  NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 4);
  for (i = *((_DWORD *)this + 2); i <= NextId; *((_DWORD *)this + 2) = i)
  {
    if (i == *((_DWORD *)this + 3))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 1, 1);
      i = *((_DWORD *)this + 2);
    }
    *(_QWORD *)(*(_QWORD *)this + 8 * i++) = 0;
  }
  v4 = MemChunkAlloc(0x28uLL, 0);
  EnvHolder::EnvHolder((EnvHolder *)v4, NextId);
  *(_QWORD *)(*(_QWORD *)this + 8 * NextId) = v5;
  return NextId;
}

void EnvHolderMgr::deleteEnvHolder(EnvHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr **EnvHolder;

  EnvHolder = (EnvMgr **)EnvHolderMgr::getEnvHolder(this, a2, a3, a4, a5, a6, a7, a8);
  DgnDelete<EnvHolder>(EnvHolder);
  *(_QWORD *)(*(_QWORD *)this + 8 * a2) = 0;
  IdMgr<unsigned int>::recycleId((unsigned int *)this + 4, a2);
}

EnvMgr **DgnDelete<EnvHolder>(EnvMgr **result)
{
  _QWORD *v1;

  if (result)
  {
    EnvHolder::~EnvHolder(result);
    return (EnvMgr **)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t EnvHolderMgr::loadEnvHolder(uint64_t a1, EnvHolder *a2, int a3)
{
  uint64_t NextId;
  unsigned int i;
  uint64_t *v8;
  uint64_t v9;

  NextId = IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 16));
  for (i = *(_DWORD *)(a1 + 8); i <= NextId; *(_DWORD *)(a1 + 8) = i)
  {
    if (i == *(_DWORD *)(a1 + 12))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
      i = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * i++) = 0;
  }
  v8 = MemChunkAlloc(0x28uLL, 0);
  EnvHolder::EnvHolder((EnvHolder *)v8, NextId);
  EnvHolder::loadEnvHolder(v9, a2, a3);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * NextId) = v8;
  return NextId;
}

void EnvHolderMgr::saveEnvHolder(EnvHolderMgr *a1, unsigned int a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  EnvMgr **EnvHolder;

  v8 = a6;
  v9 = a5;
  EnvHolder = (EnvMgr **)EnvHolderMgr::getEnvHolder(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  EnvHolder::saveEnvHolder(EnvHolder, a3, a4, v9, v8);
}

void EnvHolderMgr::printSize(EnvHolderMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  EnvHolder *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 557, (DgnString *)&v71);
  if (v72)
    v16 = (char *)v71;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v71);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 558, (DgnString *)&v71);
  if (v72)
    v25 = (char *)v71;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (a3 + 1), &byte_209A88803, v25);
  v67 = a5;
  v68 = a6;
  DgnString::~DgnString((DgnString *)&v71);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), &byte_209A88803);
  v30 = *((unsigned int *)this + 2);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *(EnvHolder **)(*(_QWORD *)this + 8 * v31);
      if (v35)
      {
        v70 = 0;
        v71 = 0;
        v69 = 0;
        EnvHolder::printSize(v35, v31, (a3 + 2), &v71, &v70, &v69);
        v34 += v71;
        v33 += v70;
        v32 += v69;
        v30 = *((unsigned int *)this + 2);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v30 = 0;
  }
  v36 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 16;
  v37 = v36 + v34;
  v38 = v36 + v33;
  v39 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 3;
  v40 = v37 + ((unint64_t)*((unsigned int *)this + 3) << v39);
  v41 = v38 + (v30 << v39);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 558, (DgnString *)&v71);
  if (v72)
    v46 = (char *)v71;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v46, v40, v41, v32);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v40;
  *v67 += v41;
  *v68 += v32;
  v47 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 16;
  v48 = *((_DWORD *)this + 10);
  v49 = *((_DWORD *)this + 11);
  v50 = v47 + 4 * (v48 - 1) + 4;
  if (v48 <= 0)
    v50 = v47;
  v51 = v49 >= v48;
  v52 = v50 + 4 * (v49 - v48);
  if (v51)
    v47 = v52;
  v53 = v47 + 24;
  v54 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 8, 1u) + 12;
  v55 = *((unsigned int *)this + 10);
  if (v55 <= *((_DWORD *)this + 11))
    v56 = 0;
  else
    v56 = 4 * v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 560, (DgnString *)&v71);
  if (v72)
    v61 = (char *)v71;
  else
    v61 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v61, v53, v54, v56);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v53;
  *v67 += v54;
  *v68 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 561, (DgnString *)&v71);
  if (v72)
    v66 = (char *)v71;
  else
    v66 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, a3, &byte_209A88803, (35 - a3), (35 - a3), v66, *a4, *v67, *v68);
  DgnString::~DgnString((DgnString *)&v71);
}

void sub_209909F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void TGrammarManager2::TGrammarManager2(TGrammarManager2 *this, TInputStream *a2, const TTagManager *a3, TLexicon *a4, TItnParamManager *a5)
{
  char *v10;
  TGrammarCompiler *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Tag;
  int *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  const __int32 *v42;
  uint64_t v43;
  int v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  _QWORD *exception;
  std::string *v57;
  __int128 v58;
  TInputStream *v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  _BYTE __p[24];
  _QWORD v64[225];
  char v65;
  _BYTE __s[24];
  _BYTE v67[1024];
  char v68;

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = &unk_24C218D48;
  *((_QWORD *)this + 2) = &unk_24C218D48;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 8) = -1;
  v10 = (char *)this + 64;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 4) = a4;
  v11 = (TGrammarCompiler *)operator new();
  TGrammarCompiler::TGrammarCompiler(v11, (const TLocaleInfo *)(*((_QWORD *)this + 4) + 240));
  *((_QWORD *)this + 5) = v11;
  v12 = operator new();
  TParser::TParser(v12, *(_QWORD *)(*((_QWORD *)this + 5) + 56));
  *((_QWORD *)this + 9) = 1;
  *((_QWORD *)this + 6) = v12;
  if (!*((_BYTE *)a2 + 8))
  {
    TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 5));
    return;
  }
  if (TInputStream::verifyHeader((uint64_t)a2, "ItnGrammar2", (uint64_t)&pItnGrammar2Version, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)__s;
      v64[0] = *(_QWORD *)&__s[16];
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v64[0] >= 0)
      v55 = &__p[8];
    else
      v55 = *(const char **)&__p[8];
    conditionalAssert(v55, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/grammarmgr2.cpp", 443, v53, v54);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v64[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if ((__s[23] & 0x80000000) != 0)
      operator delete(*(void **)__s);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v57 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v58 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
    }
    *exception = &unk_24C214BA0;
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 12);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78940, (uint64_t)callBackGetLength, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78968, (uint64_t)callBackFind, 2, 2, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7897C, (uint64_t)callBackCopy, 2, 3, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78990, (uint64_t)callBackFormat, 1, -1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A789AC, (uint64_t)callBackThousandSeparator, 3, 4, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78A00, (uint64_t)callBackDigitToRoman, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78A34, (uint64_t)callBackRomanToDigit, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78A68, (uint64_t)callBackToken, 1, 1, (uint64_t)a4, (uint64_t)this + 72);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78A80, (uint64_t)callBackAlt, 1, 100, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78A90, (uint64_t)callBackGetCategoryTag, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78AAC, (uint64_t)callBackGetWrittenForm, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78ADC, (uint64_t)callBackAllCaps, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78AFC, (uint64_t)callBackNoCaps, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78B18, (uint64_t)callBackCapitalize, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A78B28, (uint64_t)callBackRemoveDiacritics, 1, 1, (uint64_t)a4, 0);
  v59 = a2;
  *(_QWORD *)__s = v67;
  *(_OWORD *)&__s[8] = xmmword_209A57DD0;
  v68 = 1;
  *(_QWORD *)__p = v64;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v65 = 1;
  (*(void (**)(const TTagManager *, _BYTE *))(*(_QWORD *)a3 + 24))(a3, __p);
  if (*(_QWORD *)&__p[16])
  {
    v13 = 0;
    do
    {
      Tag = TTagManager::getTag((uint64_t)a3, *(_QWORD *)(*(_QWORD *)__p + 8 * v13));
      TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A78B6C);
      v15 = (int *)Tag;
      if (*(char *)(Tag + 23) < 0)
        v15 = *(int **)Tag;
      v16 = 0;
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v15, v16 - 1);
      v18 = (_QWORD *)*((_QWORD *)this + 5);
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v68)
        {
          LODWORD(v60[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v60, 1uLL);
          v19 = *(_QWORD *)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v19 = *(_QWORD *)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v19 = *(_QWORD *)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      TGrammarCompiler::registerFunction(v18, v19, (uint64_t)callBackTag, 1, 1, Tag, 0);
      ++v13;
    }
    while (v13 < *(_QWORD *)&__p[16]);
  }
  TParamManager::begin((uint64_t)a5, v60);
  while (1)
  {
    TParamManager::end((uint64_t)a5, &v62);
    v20 = (_QWORD *)v60[0];
    if (v60[0] == v62)
      break;
    v21 = *(_QWORD *)(v60[0] + 40);
    if (v21 && (v22 = v21 - 1, v23 = *((_QWORD *)a5 + 3), v22 < (*((_QWORD *)a5 + 4) - v23) >> 3))
      v24 = *(_QWORD *)(v23 + 8 * v22);
    else
      v24 = 0;
    if (*(char *)(v24 + 111) < 0)
    {
      if (*(_QWORD *)(v24 + 96))
        goto LABEL_42;
    }
    else if (*(_BYTE *)(v24 + 111))
    {
      goto LABEL_42;
    }
    TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A78B7C);
    v25 = (int *)(v24 + 16);
    if (*(char *)(v24 + 39) < 0)
      v25 = *(int **)v25;
    v26 = 0;
    while (v25[v26++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v25, v26 - 1);
    v28 = *(_DWORD *)(v24 + 8);
    if (v28)
    {
      if (v28 == 4)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[164] - v29[163]) >> 3);
      }
      else
      {
        v30 = 0;
      }
    }
    else
    {
      v30 = 2;
    }
    v31 = (_QWORD *)*((_QWORD *)this + 5);
    if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
    {
      if (v68)
      {
        LODWORD(v62) = 0;
        TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)&v62, 1uLL);
        v32 = *(_QWORD *)__s;
        --*(_QWORD *)&__s[16];
      }
      else
      {
        v32 = *(_QWORD *)__s;
        if (*(_QWORD *)&__s[8])
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
      }
    }
    else
    {
      v32 = *(_QWORD *)__s;
      *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
    }
    TGrammarCompiler::registerFunction(v31, v32, (uint64_t)callBackParam2, 0, 2 * v30, v24, (uint64_t)v10);
    v20 = (_QWORD *)v60[0];
LABEL_42:
    v33 = (_QWORD *)v20[1];
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = (_QWORD *)v20[2];
        v35 = *v34 == (_QWORD)v20;
        v20 = v34;
      }
      while (!v35);
    }
    v60[0] = v34;
  }
  v36 = *((_QWORD *)a4 + 42);
  TParamManager::begin(v36, v60);
  while (1)
  {
    TParamManager::end(v36, &v62);
    if (v60[0] == v62)
      break;
    v37 = *(_QWORD *)(v60[0] + 40);
    if (v37 && (v38 = v37 - 1, v39 = *(_QWORD *)(v36 + 24), v38 < (*(_QWORD *)(v36 + 32) - v39) >> 3))
      v40 = *(_QWORD *)(v39 + 8 * v38);
    else
      v40 = 0;
    v41 = (int *)(v40 + 16);
    v42 = (const __int32 *)(v40 + 16);
    if (*(char *)(v40 + 39) < 0)
      v42 = *(const __int32 **)v41;
    TParamManager::find((uint64_t)a5, v42, &v62);
    TParamManager::end((uint64_t)a5, &v61);
    if (v62 == v61)
    {
      TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A78B7C);
      if (*(char *)(v40 + 39) < 0)
        v41 = *(int **)v41;
      v43 = 0;
      while (v41[v43++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v41, v43 - 1);
      v45 = *(_DWORD *)(v40 + 8);
      if (v45)
      {
        if (v45 == 4)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46[164] - v46[163]) >> 3);
        }
        else
        {
          v47 = 0;
        }
      }
      else
      {
        v47 = 2;
      }
      v48 = (_QWORD *)*((_QWORD *)this + 5);
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v68)
        {
          LODWORD(v62) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)&v62, 1uLL);
          v49 = *(_QWORD *)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v49 = *(_QWORD *)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v49 = *(_QWORD *)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      TGrammarCompiler::registerFunction(v48, v49, (uint64_t)callBackParam2, 0, 2 * v47, v40, 0);
    }
    v50 = (_QWORD *)v60[0];
    v51 = *(_QWORD **)(v60[0] + 8);
    if (v51)
    {
      do
      {
        v52 = v51;
        v51 = (_QWORD *)*v51;
      }
      while (v51);
    }
    else
    {
      do
      {
        v52 = (_QWORD *)v50[2];
        v35 = *v52 == (_QWORD)v50;
        v50 = v52;
      }
      while (!v35);
    }
    v60[0] = v52;
  }
  v60[0] = &unk_24C2149D0;
  v60[1] = a4;
  TGrammarCompiler::registerRules(*((_QWORD *)this + 5), v59, (uint64_t)v60);
  TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 5));
  if (v65 && *(_QWORD **)__p != v64 && *(_QWORD *)__p)
    MEMORY[0x20BD149A8]();
  if (v68 && *(_BYTE **)__s != v67 && *(_QWORD *)__s)
    MEMORY[0x20BD149A8]();
}

void sub_20990A9E0()
{
  __break(1u);
}

void sub_20990AB64()
{
  __cxa_end_catch();
  JUMPOUT(0x20990AB6CLL);
}

uint64_t callBackThousandSeparator(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  const __int32 *v9;
  const __int32 *v10;
  unsigned int *v11;
  size_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  TLocaleInfo *GrammarValue;
  unsigned int v19;
  TLocaleInfo *GlobalLocaleInfo;
  unsigned int v21;
  uint64_t v22;
  unsigned int DigitExtended;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int *v36;
  size_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  uint64_t v42;
  TLocaleInfo *v44;
  void *__p[2];
  char v46;
  _BYTE *v47;
  __int128 v48;
  _BYTE v49[1024];
  char v50;
  BOOL v51;

  if (a2 - 5 < 0xFFFFFFFFFFFFFFFELL
    || *(_QWORD *)a1 > 1uLL
    || *(_QWORD *)(a1 + 16) > 1uLL
    || *(_QWORD *)(a1 + 32) > 1uLL
    || a2 == 4 && *(_QWORD *)(a1 + 48) > 1uLL)
  {
    return 0;
  }
  v9 = *(const __int32 **)(a1 + 8);
  v10 = *(const __int32 **)(a1 + 24);
  v11 = *(unsigned int **)(a1 + 40);
  v12 = wcslen(v9);
  v51 = 0;
  {
    v44 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v44);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
  }
  v14 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v51);
  if (v51)
    return 0;
  v17 = v14;
  v47 = v49;
  v48 = xmmword_209A57DD0;
  v50 = 1;
  if (a2 < 4)
    GrammarValue = (TLocaleInfo *)TStringParam::getGrammarValue((TParam *)(*(_QWORD *)(a3 + 336) + 15664), 1, (uint64_t)&v47);
  else
    GrammarValue = (TLocaleInfo *)TBuffer<wchar_t>::assign((uint64_t)&v47, *(int **)(a1 + 56));
  if (*((_QWORD *)&v48 + 1) != 1)
  {
    v30 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
    loggableUnicode(v30, __p);
    if (v46 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    goto LABEL_42;
  }
  v19 = *(_DWORD *)v47;
  GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(GrammarValue);
  if ((int)v19 >= 48)
  {
    if (v19 < 0x3A
      || v19 >= 0x660
      && (GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v19),
          (_DWORD)GlobalLocaleInfo != -1))
    {
      v21 = *(_DWORD *)v47;
      v22 = TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
      DigitExtended = v21 - 48;
      if ((int)v21 >= 48)
      {
        if (v21 <= 0x39)
        {
LABEL_23:
          if (DigitExtended <= 1)
          {
            v24 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
            loggableUnicode(v24, __p);
            if (v46 >= 0)
              v29 = __p;
            else
              v29 = (void **)__p[0];
LABEL_42:
            tknPrintf("Error: <%s> : The digitGrouping argument passed to $AddThousandSeparator() must be a single digit greater than 1 or the letter 'I'.\n", v25, v26, v27, v28, v29);
            if (v46 < 0)
              operator delete(__p[0]);
            v15 = 0;
            goto LABEL_45;
          }
          v32 = (int)DigitExtended;
LABEL_53:
          v15 = 1;
          if (*v10 && v12 > v17)
          {
            v33 = v12 / v32;
            if (v12 % v32)
              v31 = v12 % v32;
            else
              v31 = v32;
            v35 = 1;
LABEL_61:
            v38 = v12 + wcslen(v10) * v33 + 1;
            if (v38 >> 62)
              v39 = -1;
            else
              v39 = 4 * v38;
            v40 = (__int32 *)TAllocator::allocate(a5, v39);
            v41 = v40;
            if (*v9)
            {
              v42 = 0;
              v41 = v40;
              do
              {
                if (v31 == (v42 * 4) >> 2)
                {
                  wcscpy(v41, v10);
                  v41 += wcslen(v41);
                  if ((v35 & 1) != 0)
                  {
                    v31 += v32;
                  }
                  else if ((v12 - v31) % v32 == 3)
                  {
                    v31 += 3;
                  }
                  else
                  {
                    v31 += 2;
                  }
                }
                *v41++ = v9[v42];
              }
              while (v9[++v42]);
            }
            *v41 = 0;
            v15 = 1;
            goto LABEL_45;
          }
          goto LABEL_45;
        }
        if (v21 >= 0x660)
        {
          DigitExtended = TLocaleInfo::getDigitExtended(v22, v21);
          goto LABEL_23;
        }
      }
      v32 = -1;
      goto LABEL_53;
    }
  }
  if (*(_DWORD *)v47 != 73)
  {
    v36 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
    loggableUnicode(v36, __p);
    if (v46 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    goto LABEL_42;
  }
  v15 = 1;
  if (*v10 && v12 > v17)
  {
    v31 = 2;
    v32 = 7;
    v33 = 3 * (v12 / 7) + v12 % 7 / 3;
    if (v12 % 7)
    {
      if (((v12 % 7) & 5) == 4)
        v34 = 1;
      else
        v34 = v12 % 7;
      v35 = 0;
      if (v12 % 7 != 5)
      {
        v32 = 7;
        v31 = v34;
      }
    }
    else
    {
      v35 = 0;
    }
    goto LABEL_61;
  }
LABEL_45:
  if (v50)
  {
    if (v47 != v49 && v47 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v15;
}

{
  const __int32 *v9;
  const __int32 *v10;
  unsigned int *v11;
  size_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  TLocaleInfo *GrammarValue;
  unsigned int v19;
  TLocaleInfo *GlobalLocaleInfo;
  unsigned int v21;
  uint64_t v22;
  unsigned int DigitExtended;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int *v36;
  size_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  uint64_t v42;
  TLocaleInfo *v44;
  void *__p[2];
  char v46;
  _BYTE *v47;
  __int128 v48;
  _BYTE v49[1024];
  char v50;
  BOOL v51;

  if (a2 - 5 < 0xFFFFFFFFFFFFFFFELL
    || *(_QWORD *)a1 > 1uLL
    || *(_QWORD *)(a1 + 16) > 1uLL
    || *(_QWORD *)(a1 + 32) > 1uLL
    || a2 == 4 && *(_QWORD *)(a1 + 48) > 1uLL)
  {
    return 0;
  }
  v9 = *(const __int32 **)(a1 + 8);
  v10 = *(const __int32 **)(a1 + 24);
  v11 = *(unsigned int **)(a1 + 40);
  v12 = wcslen(v9);
  v51 = 0;
  {
    v44 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v44);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
  }
  v14 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v51);
  if (v51)
    return 0;
  v17 = v14;
  v47 = v49;
  v48 = xmmword_209A57DD0;
  v50 = 1;
  if (a2 < 4)
    GrammarValue = (TLocaleInfo *)TStringParam::getGrammarValue((TParam *)(*(_QWORD *)(a3 + 336) + 15664), 1, (uint64_t)&v47);
  else
    GrammarValue = (TLocaleInfo *)TBuffer<wchar_t>::assign((uint64_t)&v47, *(int **)(a1 + 56));
  if (*((_QWORD *)&v48 + 1) != 1)
  {
    v30 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
    loggableUnicode(v30, __p);
    if (v46 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    goto LABEL_42;
  }
  v19 = *(_DWORD *)v47;
  GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(GrammarValue);
  if ((int)v19 >= 48)
  {
    if (v19 < 0x3A
      || v19 >= 0x660
      && (GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v19),
          (_DWORD)GlobalLocaleInfo != -1))
    {
      v21 = *(_DWORD *)v47;
      v22 = TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
      DigitExtended = v21 - 48;
      if ((int)v21 >= 48)
      {
        if (v21 <= 0x39)
        {
LABEL_23:
          if (DigitExtended <= 1)
          {
            v24 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
            loggableUnicode(v24, __p);
            if (v46 >= 0)
              v29 = __p;
            else
              v29 = (void **)__p[0];
LABEL_42:
            tknPrintf("Error: <%s> : The digitGrouping argument passed to $AddThousandSeparator() must be a single digit greater than 1 or the letter 'I'.\n", v25, v26, v27, v28, v29);
            if (v46 < 0)
              operator delete(__p[0]);
            v15 = 0;
            goto LABEL_45;
          }
          v32 = (int)DigitExtended;
LABEL_53:
          v15 = 1;
          if (*v10 && v12 > v17)
          {
            v33 = v12 / v32;
            if (v12 % v32)
              v31 = v12 % v32;
            else
              v31 = v32;
            v35 = 1;
LABEL_61:
            v38 = v12 + wcslen(v10) * v33 + 1;
            if (v38 >> 62)
              v39 = -1;
            else
              v39 = 4 * v38;
            v40 = (__int32 *)TAllocator::allocate(a5, v39);
            v41 = v40;
            if (*v9)
            {
              v42 = 0;
              v41 = v40;
              do
              {
                if (v31 == (v42 * 4) >> 2)
                {
                  wcscpy(v41, v10);
                  v41 += wcslen(v41);
                  if ((v35 & 1) != 0)
                  {
                    v31 += v32;
                  }
                  else if ((v12 - v31) % v32 == 3)
                  {
                    v31 += 3;
                  }
                  else
                  {
                    v31 += 2;
                  }
                }
                *v41++ = v9[v42];
              }
              while (v9[++v42]);
            }
            *v41 = 0;
            v15 = 1;
            goto LABEL_45;
          }
          goto LABEL_45;
        }
        if (v21 >= 0x660)
        {
          DigitExtended = TLocaleInfo::getDigitExtended(v22, v21);
          goto LABEL_23;
        }
      }
      v32 = -1;
      goto LABEL_53;
    }
  }
  if (*(_DWORD *)v47 != 73)
  {
    v36 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v47);
    loggableUnicode(v36, __p);
    if (v46 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    goto LABEL_42;
  }
  v15 = 1;
  if (*v10 && v12 > v17)
  {
    v31 = 2;
    v32 = 7;
    v33 = 3 * (v12 / 7) + v12 % 7 / 3;
    if (v12 % 7)
    {
      if (((v12 % 7) & 5) == 4)
        v34 = 1;
      else
        v34 = v12 % 7;
      v35 = 0;
      if (v12 % 7 != 5)
      {
        v32 = 7;
        v31 = v34;
      }
    }
    else
    {
      v35 = 0;
    }
    goto LABEL_61;
  }
LABEL_45:
  if (v50)
  {
    if (v47 != v49 && v47 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v15;
}

void sub_20990AFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  __int32 *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *p_p;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  void *__p;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  int v26;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v9 = *(__int32 **)(a1 + 8);
  v10 = wcslen(v9);
  if (v10)
  {
    v11 = v10;
    if (TLexicon::checkName(a3, v9, 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
      if (v23 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      tknPrintf("Warning: $Token('%s') : The formatter adaptation grammar constructed an invalid token.\n", v12, v13, v14, v15, p_p);
      if (SHIBYTE(v23) < 0)
        operator delete(__p);
      return 0;
    }
    if ((v11 + 9) >> 62)
      v17 = -1;
    else
      v17 = 4 * (v11 + 9);
    __p = TAllocator::allocate(a5, v17);
    v22 = v11 + 9;
    v23 = 0;
    v25 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&__p, dword_209A78BE4);
    v18 = 0;
    v19 = *(int **)(a1 + 8);
    while (v19[v18++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, v23, v19, v18 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, v23, (int *)&unk_209A78C04, 1uLL);
    if (v23 < v22)
    {
      *((_DWORD *)__p + v23) = 0;
LABEL_23:
      if (v25 && __p != &v24 && __p)
        MEMORY[0x20BD149A8]();
      return 1;
    }
    if (v25)
    {
      v26 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v23--, &v26, 1uLL);
      goto LABEL_23;
    }
    if (v22)
    {
      *((_DWORD *)__p + v22 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_20990B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t callBackAlt(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int128 v20;
  _BYTE v21[1024];
  char v22;
  int v23;

  if (!a2 || *a1 > 1uLL)
    return 0;
  if (a2 != 1)
  {
    v19 = (__int32 *)v21;
    v20 = xmmword_209A57DD0;
    v22 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v19, dword_209A78CBC);
    v9 = 0;
    v10 = (int *)a1[1];
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), v10, v9 - 1);
    if (a2 >= 2)
    {
      v12 = 1;
      do
      {
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), dword_209A78CD4, 5uLL);
        v13 = 0;
        v14 = (int *)a1[2 * v12 + 1];
        while (v14[v13++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), v14, v13 - 1);
        ++v12;
      }
      while (v12 != a2);
    }
    TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), dword_209A78CEC, 6uLL);
    if ((unint64_t)(*((_QWORD *)&v20 + 1) + 1) >> 62)
      v16 = -1;
    else
      v16 = 4 * (*((_QWORD *)&v20 + 1) + 1);
    v17 = (__int32 *)TAllocator::allocate(a5, v16);
    if (*((_QWORD *)&v20 + 1) >= (unint64_t)v20)
    {
      if (v22)
      {
        v23 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), &v23, 1uLL);
        v18 = v19;
        --*((_QWORD *)&v20 + 1);
      }
      else
      {
        v18 = v19;
        if ((_QWORD)v20)
          v19[(_QWORD)v20 - 1] = 0;
      }
    }
    else
    {
      v18 = v19;
      v19[*((_QWORD *)&v20 + 1)] = 0;
    }
    wcscpy(v17, v18);
    if (v22 && v19 != (__int32 *)v21)
    {
      if (v19)
        MEMORY[0x20BD149A8]();
    }
  }
  return 1;
}

void sub_20990B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackTag(uint64_t a1, uint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  size_t v9;
  size_t v10;
  const __int32 *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  int v24;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v9 = wcslen(*(const __int32 **)(a1 + 8));
  if (v9)
  {
    v10 = v9;
    v11 = a3;
    if (*((char *)a3 + 23) < 0)
      v11 = *(const __int32 **)a3;
    v12 = v10 + wcslen(v11) + 4;
    if (v12 >> 62)
      v13 = -1;
    else
      v13 = 4 * v12;
    v19 = TAllocator::allocate(a5, v13);
    v20 = v12;
    v21 = 0;
    v23 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v19, (int *)&unk_209A78D08);
    if (*((char *)a3 + 23) < 0)
      a3 = *(__int32 **)a3;
    v14 = 0;
    while (a3[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, a3, v14 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_209A78D10, 1uLL);
    v16 = 0;
    v17 = *(int **)(a1 + 8);
    while (v17[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, v17, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_209A78C04, 1uLL);
    if (v21 < v20)
    {
      *((_DWORD *)v19 + v21) = 0;
LABEL_23:
      if (v23 && v19 != &v22)
      {
        if (v19)
          MEMORY[0x20BD149A8]();
      }
      return 1;
    }
    if (v23)
    {
      v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v19, v21--, &v24, 1uLL);
      goto LABEL_23;
    }
    if (v20)
    {
      *((_DWORD *)v19 + v20 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

{
  size_t v9;
  size_t v10;
  const __int32 *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  int v24;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v9 = wcslen(*(const __int32 **)(a1 + 8));
  if (v9)
  {
    v10 = v9;
    v11 = a3;
    if (*((char *)a3 + 23) < 0)
      v11 = *(const __int32 **)a3;
    v12 = v10 + wcslen(v11) + 4;
    if (v12 >> 62)
      v13 = -1;
    else
      v13 = 4 * v12;
    v19 = TAllocator::allocate(a5, v13);
    v20 = v12;
    v21 = 0;
    v23 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v19, (int *)&unk_209A7EB6C);
    if (*((char *)a3 + 23) < 0)
      a3 = *(__int32 **)a3;
    v14 = 0;
    while (a3[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, a3, v14 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, dword_209A7EB74, 1uLL);
    v16 = 0;
    v17 = *(int **)(a1 + 8);
    while (v17[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, v17, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_209A7EAB4, 1uLL);
    if (v21 < v20)
    {
      *((_DWORD *)v19 + v21) = 0;
LABEL_23:
      if (v23 && v19 != &v22)
      {
        if (v19)
          MEMORY[0x20BD149A8]();
      }
      return 1;
    }
    if (v23)
    {
      v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v19, v21--, &v24, 1uLL);
      goto LABEL_23;
    }
    if (v20)
    {
      *((_DWORD *)v19 + v20 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_20990B6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    callBackSync(va);
  _Unwind_Resume(a1);
}

uint64_t callBackParam2(uint64_t a1, unint64_t a2, unsigned int *lpsrc, uint64_t *a4, TAllocator *a5)
{
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int **v14;
  int *v15;
  uint64_t v16;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const __int32 *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int *v31;
  TLocaleInfo *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *p_p;
  unsigned int *v41;
  int v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  void **v49;
  uint64_t v50;
  __int32 *v51;
  const __int32 *v52;
  unsigned int *v53;
  unsigned int *v54;
  int v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  void **v62;
  int v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void **v70;
  TAllocator *v73;
  unsigned int **v74;
  int v75;
  BOOL v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *__p;
  __int128 v82;
  _BYTE v83[1024];
  char v84;
  _QWORD *v85;

  if (!a2)
    return callBackParam(a1, 0, lpsrc, a4, a5);
  v9 = lpsrc[2];
  if (v9)
  {
    if (v9 == 4)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[164] - v10[163]) >> 3);
      if ((a2 & 1) == 0)
        goto LABEL_5;
LABEL_43:
      v35 = lpsrc + 4;
      if (*((char *)lpsrc + 39) < 0)
        v35 = *(unsigned int **)v35;
      loggableUnicode(v35, &__p);
      if (v82 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      tknPrintf("Error: $Param%s() must have an even number of arguments.\n", v36, v37, v38, v39, p_p);
      if (SHIBYTE(v82) < 0)
        operator delete(__p);
      return 0;
    }
    v10 = 0;
    v11 = 0;
    if ((a2 & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    v10 = 0;
    v11 = 2;
    if ((a2 & 1) != 0)
      goto LABEL_43;
  }
LABEL_5:
  v73 = a5;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v85, v11, (unsigned __int8 *)&__p);
  __p = v83;
  v82 = xmmword_209A57DD0;
  v84 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_209A78CBC);
  v12 = 0;
  if (v10)
    v13 = 83;
  else
    v13 = 66;
  v75 = v13;
  v14 = (int **)(lpsrc + 4);
  v74 = (unsigned int **)(lpsrc + 4);
  do
  {
    if (*(_QWORD *)(a1 + 16 * v12) > 1uLL || *(_QWORD *)(a1 + 16 * (v12 | 1)) > 1uLL)
      goto LABEL_93;
    if (v12)
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), dword_209A78CD4, 5uLL);
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), dword_209A78D18, 7uLL);
    LODWORD(v79[0]) = v75;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), (int *)v79, 1uLL);
    v15 = (int *)v14;
    if (*((char *)lpsrc + 39) < 0)
      v15 = *v14;
    v16 = 0;
    while (v15[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), v15, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), (int *)&unk_209A78D10, 1uLL);
    v18 = *(__int32 **)(a1 + 16 * v12 + 8);
    if (v10)
    {
      v19 = v10[164];
      if (v19 == v10[163])
      {
        v21 = 0;
        v24 = v10[164];
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v19 = v10[163];
        do
        {
          v22 = (const __int32 *)(v19 + v20);
          if (*(char *)(v19 + v20 + 23) < 0)
            v22 = *(const __int32 **)v22;
          v23 = wcscmp(v18, v22);
          v24 = v10[164];
          v19 = v10[163];
          if (!v23)
            break;
          ++v21;
          v20 += 24;
        }
        while (v21 < 0xAAAAAAAAAAAAAAABLL * ((v24 - v19) >> 3));
      }
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v19) >> 3))
      {
        if (*((char *)lpsrc + 39) < 0)
          v53 = *v74;
        else
          v53 = lpsrc + 4;
        loggableUnicode(v53, v79);
        v55 = v80;
        v56 = (void **)v79[0];
        loggableUnicode((unsigned int *)v18, v77);
        v61 = v79;
        if (v55 < 0)
          v61 = v56;
        if (v78 >= 0)
          v62 = v77;
        else
          v62 = (void **)v77[0];
        tknPrintf("Error: $Param%s(): Value is invalid, was '%s', expected an allowable string.\n", v57, v58, v59, v60, v61, v62, v73);
        goto LABEL_89;
      }
    }
    else
    {
      v76 = 0;
      if ((v25 & 1) == 0
      {
        v33 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v33);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
      }
      v26 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)v18, &v76);
      if (v76)
      {
        if (*((char *)lpsrc + 39) < 0)
          v54 = *v74;
        else
          v54 = lpsrc + 4;
        loggableUnicode(v54, v79);
        v63 = v80;
        v64 = (void **)v79[0];
        loggableUnicode((unsigned int *)v18, v77);
        v69 = v79;
        if (v63 < 0)
          v69 = v64;
        if (v78 >= 0)
          v70 = v77;
        else
          v70 = (void **)v77[0];
        tknPrintf("Error: $Param%s(): Value is invalid, was '%s', expected a BOOLean.\n", v65, v66, v67, v68, v69, v70, v73);
        goto LABEL_89;
      }
      v21 = v26;
      if (v26)
        v18 = (__int32 *)&unk_209A78D38;
      else
        v18 = (__int32 *)&unk_209A78D40;
    }
    v27 = v85[v21 >> 6];
    if ((v27 & (1 << v21)) != 0)
    {
      v41 = lpsrc + 4;
      if (*((char *)lpsrc + 39) < 0)
        v41 = *v74;
      loggableUnicode(v41, v79);
      v42 = v80;
      v43 = (void **)v79[0];
      loggableUnicode((unsigned int *)v18, v77);
      v48 = v79;
      if (v42 < 0)
        v48 = v43;
      if (v78 >= 0)
        v49 = v77;
      else
        v49 = (void **)v77[0];
      tknPrintf("Error: $Param%s(): Value '%s' has already been specified.\n", v44, v45, v46, v47, v48, v49, v73);
LABEL_89:
      if (v78 < 0)
        operator delete(v77[0]);
      if (v80 < 0)
        operator delete(v79[0]);
LABEL_93:
      v34 = 0;
      goto LABEL_94;
    }
    v28 = 0;
    v85[v21 >> 6] = v27 | (1 << v21);
    v14 = (int **)(lpsrc + 4);
    while (v18[v28++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), v18, v28 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), (int *)&unk_209A78C04, 1uLL);
    v30 = 0;
    v31 = *(int **)(a1 + 16 * (v12 | 1) + 8);
    while (v31[v30++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), v31, v30 - 1);
    v12 += 2;
  }
  while (v12 < a2);
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), dword_209A78CEC, 6uLL);
  if ((unint64_t)(*((_QWORD *)&v82 + 1) + 1) >> 62)
    v50 = -1;
  else
    v50 = 4 * (*((_QWORD *)&v82 + 1) + 1);
  v51 = (__int32 *)TAllocator::allocate(v73, v50);
  if (*((_QWORD *)&v82 + 1) >= (unint64_t)v82)
  {
    if (v84)
    {
      LODWORD(v79[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v82 + 1), (int *)v79, 1uLL);
      v52 = (const __int32 *)__p;
      --*((_QWORD *)&v82 + 1);
    }
    else
    {
      v52 = (const __int32 *)__p;
      if ((_QWORD)v82)
        *((_DWORD *)__p + v82 - 1) = 0;
    }
  }
  else
  {
    v52 = (const __int32 *)__p;
    *((_DWORD *)__p + *((_QWORD *)&v82 + 1)) = 0;
  }
  wcscpy(v51, v52);
  v34 = 1;
LABEL_94:
  if (v84)
  {
    if (__p != v83 && __p != 0)
      MEMORY[0x20BD149A8]();
  }
  if (v85)
    operator delete(v85);
  return v34;
}

void sub_20990BD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  MEMORY[0x20BD149A8](v21, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x478]) && a21 != a12 && a21)
    MEMORY[0x20BD149A8]();
  v24 = *(void **)(v22 - 112);
  if (v24)
    operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager2::freeMemory(TGrammarManager2 *this)
{
  TParser *v2;
  uint64_t result;

  v2 = (TParser *)*((_QWORD *)this + 6);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x20BD149A8]();
  }
  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void TGrammarManager2::~TGrammarManager2(TGrammarManager2 *this)
{
  TGrammarManager2::freeMemory(this);
}

TAllocator *TGrammarManager2::clearResult(TGrammarManager2 *this)
{
  uint64_t v1;
  TAllocator *result;
  unint64_t v3;

  v1 = *((_QWORD *)this + 6);
  v3 = *(_QWORD *)(v1 + 48);
  result = (TAllocator *)(v1 + 48);
  if (v3 >= 0x801)
    return (TAllocator *)TAllocator::clear(result);
  return result;
}

void TWideChartSeeder2::makeTerminals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, TAllocator *a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int32 *v17;
  unint64_t v18;
  uint64_t v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t v22;
  __int32 *v23;
  __int32 *v24;
  _QWORD *ClientData;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int32 *v50;
  __int128 v51;
  _BYTE v52[785];
  char v53;
  __int32 *v54;
  __int128 v55;
  _BYTE v56[1024];
  char v57;
  __int128 i;
  __int128 v59;
  uint64_t v60;
  __int32 *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16) + a2;
  if (v6 < *(_QWORD *)(a1 + 24))
  {
    v8 = **(_QWORD **)(a1 + 8);
    if (v6 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v8) >> 4)
      && (!a2 || !*(_BYTE *)(v8 + 112 * v6 + 32)))
    {
      v54 = (__int32 *)v56;
      v55 = xmmword_209A57DD0;
      v57 = 1;
      TWord::getTokenName(*(__int32 ***)(v8 + 112 * v6 + 16), (uint64_t)&v54);
      v15 = *(char **)a3;
      v14 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a1 + 32);
      if (*((_QWORD *)&v55 + 1) >= (unint64_t)v55)
      {
        if (v57)
        {
          LODWORD(v50) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
          v17 = v54;
          --*((_QWORD *)&v55 + 1);
        }
        else
        {
          v17 = v54;
          if ((_QWORD)v55)
            v54[(_QWORD)v55 - 1] = 0;
        }
      }
      else
      {
        v17 = v54;
        v54[*((_QWORD *)&v55 + 1)] = 0;
      }
      TGrammar::getTerminals(v16, (unsigned int *)v17, (char **)a3);
      v18 = (v14 - (uint64_t)v15) >> 3;
      if (v18 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
      {
        if ((unint64_t)(*((_QWORD *)&v55 + 1) + 1) >> 62)
          v19 = -1;
        else
          v19 = 4 * (*((_QWORD *)&v55 + 1) + 1);
        v20 = (__int32 *)TAllocator::allocate(a6, v19);
        if (*((_QWORD *)&v55 + 1) >= (unint64_t)v55)
        {
          if (v57)
          {
            LODWORD(v50) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
            v21 = v54;
            --*((_QWORD *)&v55 + 1);
          }
          else
          {
            v21 = v54;
            if ((_QWORD)v55)
              v54[(_QWORD)v55 - 1] = 0;
          }
        }
        else
        {
          v21 = v54;
          v54[*((_QWORD *)&v55 + 1)] = 0;
        }
        wcscpy(v20, v21);
        v50 = (__int32 *)v52;
        v51 = xmmword_209A57DD0;
        v53 = 1;
        TWord::getOptionalTagBits(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 112 * (*(_QWORD *)(a1 + 16) + a2) + 16), (uint64_t)&v50);
        if ((unint64_t)(*((_QWORD *)&v51 + 1) + 1) >> 62)
          v22 = -1;
        else
          v22 = 4 * (*((_QWORD *)&v51 + 1) + 1);
        v23 = (__int32 *)TAllocator::allocate(a6, v22);
        if (*((_QWORD *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v53)
          {
            LODWORD(v59) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), (int *)&v59, 1uLL);
            v24 = v50;
            --*((_QWORD *)&v51 + 1);
          }
          else
          {
            v24 = v50;
            if ((_QWORD)v51)
              v50[(_QWORD)v51 - 1] = 0;
          }
        }
        else
        {
          v24 = v50;
          v50[*((_QWORD *)&v51 + 1)] = 0;
        }
        wcscpy(v23, v24);
        *(_QWORD *)&v59 = 1;
        *((_QWORD *)&v59 + 1) = v20;
        v60 = 1;
        v61 = v23;
        for (i = xmmword_24C21E3A8; v18 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3; ++v18)
        {
          ClientData = TGrammarCompiler::makeClientData((uint64_t *)&i, &v59, 2, a6);
          v26 = ClientData;
          v28 = a5[1];
          v27 = (unint64_t)a5[2];
          if ((unint64_t)v28 >= v27)
          {
            v30 = ((char *)v28 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v31 = v27 - (_QWORD)*a5;
            v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1))
              v32 = v30 + 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v33);
            else
              v34 = 0;
            v35 = &v34[8 * v30];
            *(_QWORD *)v35 = v26;
            v29 = v35 + 8;
            v37 = (char *)*a5;
            v36 = (char *)a5[1];
            if (v36 != *a5)
            {
              do
              {
                v38 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v35 - 1) = v38;
                v35 -= 8;
              }
              while (v36 != v37);
              v36 = (char *)*a5;
            }
            *a5 = v35;
            a5[1] = v29;
            a5[2] = &v34[8 * v33];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v28 = ClientData;
            v29 = v28 + 1;
          }
          a5[1] = v29;
          v40 = *(_QWORD **)(a4 + 8);
          v39 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v40 >= v39)
          {
            v42 = *(_QWORD **)a4;
            v43 = ((uint64_t)v40 - *(_QWORD *)a4) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a4 + 16, v46);
              v42 = *(_QWORD **)a4;
              v40 = *(_QWORD **)(a4 + 8);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(_QWORD *)v48 = 1;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              v49 = *--v40;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(_QWORD *)a4 = v48;
            *(_QWORD *)(a4 + 8) = v41;
            *(_QWORD *)(a4 + 16) = &v47[8 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v40 = 1;
            v41 = v40 + 1;
          }
          *(_QWORD *)(a4 + 8) = v41;
        }
        if (v53 && v50 != (__int32 *)v52 && v50)
          MEMORY[0x20BD149A8]();
      }
      if (v57 && v54 != (__int32 *)v56)
      {
        if (v54)
          MEMORY[0x20BD149A8]();
      }
    }
  }
}

void sub_20990C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v17;

  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a10 && a15 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x868]))
  {
    v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17)
        MEMORY[0x20BD149A8](v17, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager2::getLMScore(uint64_t a1, __int32 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  TWord *HeadClone;
  uint64_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int *v31;
  int v32;
  __int32 *v36;
  __int128 v37;
  _BYTE v38[1024];
  char v39;
  int v40[50];
  uint64_t WordSpec;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  if (a4)
  {
    v10 = a4 - 1;
    if (a4 == 1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16)) == -1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
    {
      if (TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
      {
        v9 = 0;
      }
      else
      {
        WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
        v42 = v13;
        v9 = 1;
      }
    }
    else
    {
      WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16));
      v42 = v11;
      v43 = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
      v44 = v12;
      v9 = 2;
    }
  }
  v36 = (__int32 *)v38;
  v37 = xmmword_209A57DD0;
  v39 = 1;
  if (*a2)
  {
    v14 = &WordSpec + 2 * v9 + 1;
    while (!wcsncmp(a2, dword_209A78BE4, 7uLL))
    {
      v15 = a2 + 7;
      v16 = wcsstr(a2 + 7, (const __int32 *)&unk_209A78C04);
      TBuffer<wchar_t>::resize((uint64_t)&v36, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v36, 0, v15, v16 - v15);
      v17 = *(_QWORD *)(a1 + 32);
      if (*((_QWORD *)&v37 + 1) >= (unint64_t)v37)
      {
        if (v39)
        {
          v40[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v40, 1uLL);
          v18 = v36;
          --*((_QWORD *)&v37 + 1);
        }
        else
        {
          v18 = v36;
          if ((_QWORD)v37)
            v36[(_QWORD)v37 - 1] = 0;
        }
      }
      else
      {
        v18 = v36;
        v36[*((_QWORD *)&v37 + 1)] = 0;
      }
      HeadClone = (TWord *)TLexicon::findHeadClone(v17, v18);
      if (!HeadClone)
        break;
      ++v9;
      *(v14 - 1) = TWord::getWordSpec(HeadClone);
      *v14 = v20;
      v21 = v16[1];
      a2 = v16 + 1;
      v14 += 2;
      if (!v21)
        goto LABEL_20;
    }
    v30 = 0;
  }
  else
  {
LABEL_20:
    v22 = a5 + a4;
    v23 = *a3;
    if (a5 + a4 < (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)))
    {
      v24 = 112 * v22 + 16;
      v25 = &WordSpec + 2 * v9 + 1;
      v26 = v22 + 1;
      v27 = 1;
      do
      {
        if (TWord::getWordSpec(*(TWord **)(v23 + v24)) == -1)
          break;
        *(v25 - 1) = TWord::getWordSpec(*(TWord **)(*a3 + v24));
        *v25 = v28;
        v23 = *a3;
        v29 = (v26 < 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)) & v27;
        ++v9;
        v24 += 112;
        v25 += 2;
        ++v26;
        v27 = 0;
      }
      while ((v29 & 1) != 0);
    }
    SDLm_LmScore(0, 0, 0, 0, 0, &WordSpec, v9, (uint64_t)v40, v9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    v30 = 0;
    if (v9)
    {
      v31 = v40;
      do
      {
        v32 = *v31++;
        v30 = (v32 + v30);
        --v9;
      }
      while (v9);
    }
  }
  if (v39)
  {
    if (v36 != (__int32 *)v38 && v36 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v30;
}

void sub_20990C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (LOBYTE(STACK[0x470]))
  {
    if (a20 != v20 && a20 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TGrammarManager2::search(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  TParam *v10;
  uint64_t ActiveConfigHandle;
  char v12;
  _BYTE *v13;
  TParam *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *AllProductions;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  unint64_t v26;
  __int32 *v27;
  unsigned __int8 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *p_p;
  double v35;
  __int32 *v36;
  unint64_t v37;
  unint64_t AttributeValue;
  unsigned int *v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned __int8 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned __int8 v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int LMScore;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  TLocaleInfo *v86;
  TLocaleInfo *v87;
  TLocaleInfo *v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  __int128 *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v107;
  int v109;
  void *v110[2];
  char v111;
  void *__p;
  uint64_t v113;
  char v114;
  void *v115;
  char v116;
  _BYTE v117[159];
  BOOL v118;
  _BYTE v119[40];
  _QWORD v120[6];

  v8 = (uint64_t)a1;
  a1[8] = a5;
  v9 = *(_QWORD *)(a1[5] + 56);
  v120[0] = &off_24C215DD8;
  v120[1] = a2;
  v120[2] = a3;
  v120[3] = a4;
  v120[4] = v9;
  v10 = (TParam *)(a1[7] + 18256);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  v12 = *((_BYTE *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 152);
  v13 = *(_BYTE **)(v8 + 48);
  v13[8] = v12;
  (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 16))(v13);
  v14 = (TParam *)(*(_QWORD *)(v8 + 56) + 4040);
  v15 = TParam::getActiveConfigHandle(v14);
  v16 = *((int *)v14 + TParam::getValidConfig(v14, v15) + 40);
  v17 = *(_QWORD *)(v8 + 48);
  v18 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 24) = v16;
  (*(void (**)(void))(v18 + 16))();
  AllProductions = (_QWORD *)TParser::getAllProductions(*(_QWORD **)(v8 + 48), (uint64_t)v120);
  TAllocator::TAllocator((TAllocator *)v119, 2048);
  if (AllProductions)
  {
    v109 = 0;
    v107 = v8;
    v26 = 0x253DF2000uLL;
    while (1)
    {
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A78C0C, (TAllocator *)v119, 0) > 1)goto LABEL_60;
      v27 = (__int32 *)v20;
      if (*(_DWORD *)v20)
      {
        LOBYTE(v110[0]) = 0;
        if ((v28 & 1) == 0
        {
          v86 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v86);
          v26 = 0x253DF2000uLL;
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v86;
        }
        v29 = TLocaleInfo::stringToFloat(*(_QWORD *)(v26 + 1744), v27, (BOOL *)v110);
        if (LOBYTE(v110[0]))
        {
          loggableUnicode((unsigned int *)v27, &__p);
          p_p = &__p;
          if (v114 < 0)
            p_p = __p;
          tknPrintf("Error: 'priority' was '%s'. Expected a double-precision value.\n", v30, v31, v32, v33, p_p);
          goto LABEL_10;
        }
        v35 = v29;
      }
      else
      {
        v35 = 0.0;
      }
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A78C30, (TAllocator *)v119, 0) > 1)goto LABEL_60;
      v36 = (__int32 *)v20;
      if (!*(_DWORD *)v20)
      {
        tknPrintString("Error: 'result' was ''. Ignored production.\n");
        goto LABEL_60;
      }
      v37 = AllProductions[2];
      LOBYTE(v110[0]) = 0;
      AttributeValue = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A78C4C, (TAllocator *)v119, v110);
      v40 = 0;
      if (!LOBYTE(v110[0]) || AttributeValue > 1)
        goto LABEL_25;
      v41 = v39;
      v118 = 0;
      if ((v42 & 1) == 0
      {
        v87 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v87);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v87;
      }
      v43 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v41, &v118);
      if (!v118)
      {
        v40 = v43;
        if (v37 <= v43)
        {
          loggableUnicode(v41, &__p);
          v74 = &__p;
          if (v114 < 0)
            v74 = __p;
          tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value in the range [0,%lld).\n", v70, v71, v72, v73, v74, v37);
          v75 = v114;
          goto LABEL_59;
        }
LABEL_25:
        LOBYTE(v110[0]) = 0;
        v49 = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A78C7C, (TAllocator *)v119, v110);
        v51 = 0;
        if (!LOBYTE(v110[0]) || v49 > 1)
        {
LABEL_34:
          LMScore = TGrammarManager2::getLMScore(v8, v36, a2, v40 + a3, v37 - (v40 + v51));
          v61 = LMScore;
          v62 = v109;
          if (v109 <= LMScore)
            v62 = LMScore;
          v109 = v62;
          v63 = a6[1];
          v64 = a6[2];
          if (v63 >= v64)
          {
            v66 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v63 - *a6) >> 3);
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) > 0x492492492492492)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v68 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v64 - *a6) >> 3);
            if (2 * v68 > v67)
              v67 = 2 * v68;
            if (v68 >= 0x249249249249249)
              v20 = 0x492492492492492;
            else
              v20 = v67;
            if (v20)
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>((uint64_t)(a6 + 2), v20);
            else
              v69 = 0;
            v76 = &v69[56 * v66];
            *(_QWORD *)v76 = AllProductions;
            *((_QWORD *)v76 + 1) = v36;
            *((_QWORD *)v76 + 2) = v37;
            *((_QWORD *)v76 + 3) = v40;
            *((_QWORD *)v76 + 4) = v51;
            *((double *)v76 + 5) = v35;
            *((_DWORD *)v76 + 12) = v61;
            v78 = (char *)*a6;
            v77 = (char *)a6[1];
            v79 = v76;
            v26 = 0x253DF2000;
            if (v77 != (char *)*a6)
            {
              do
              {
                v24 = *(__n128 *)(v77 - 56);
                v25 = *(_OWORD *)(v77 - 40);
                v80 = *(_OWORD *)(v77 - 24);
                *((_DWORD *)v79 - 2) = *((_DWORD *)v77 - 2);
                *(_OWORD *)(v79 - 24) = v80;
                *(_OWORD *)(v79 - 40) = v25;
                *(__n128 *)(v79 - 56) = v24;
                v79 -= 56;
                v77 -= 56;
              }
              while (v77 != v78);
              v77 = (char *)*a6;
            }
            v65 = v76 + 56;
            *a6 = (uint64_t)v79;
            a6[1] = (uint64_t)(v76 + 56);
            a6[2] = (uint64_t)&v69[56 * v20];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_QWORD *)v63 = AllProductions;
            *(_QWORD *)(v63 + 8) = v36;
            *(_QWORD *)(v63 + 16) = v37;
            *(_QWORD *)(v63 + 24) = v40;
            *(_QWORD *)(v63 + 32) = v51;
            *(double *)(v63 + 40) = v35;
            v65 = (char *)(v63 + 56);
            *(_DWORD *)(v63 + 48) = LMScore;
            v26 = 0x253DF2000;
          }
          a6[1] = (uint64_t)v65;
          v8 = v107;
          goto LABEL_60;
        }
        v52 = v50;
        v118 = 0;
        if ((v53 & 1) == 0
        {
          v88 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v88);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v88;
        }
        v54 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v52, &v118);
        if (!v118)
        {
          if (v40 < v54)
          {
            v51 = v37 - v54;
            if (v37 >= v54)
              goto LABEL_34;
          }
          loggableUnicode(v52, &__p);
          v85 = &__p;
          if (v114 < 0)
            v85 = __p;
          tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value in the range (%lld,%lld).\n", v81, v82, v83, v84, v85, v40, v37);
          v75 = v114;
LABEL_59:
          v26 = 0x253DF2000;
          if ((v75 & 0x80000000) == 0)
            goto LABEL_60;
LABEL_11:
          operator delete(__p);
          goto LABEL_60;
        }
        loggableUnicode(v52, &__p);
        v59 = &__p;
        if (v114 < 0)
          v59 = __p;
        tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value.\n", v55, v56, v57, v58, v59);
        v26 = 0x253DF2000;
        goto LABEL_10;
      }
      loggableUnicode(v41, &__p);
      v48 = &__p;
      if (v114 < 0)
        v48 = __p;
      tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value.\n", v44, v45, v46, v47, v48);
      v26 = 0x253DF2000;
LABEL_10:
      if (v114 < 0)
        goto LABEL_11;
LABEL_60:
      AllProductions = (_QWORD *)*AllProductions;
      if (!AllProductions)
        goto LABEL_69;
    }
  }
  v109 = 0;
LABEL_69:
  v89 = MEMORY[0x24BEDB800];
  v90 = MEMORY[0x24BEDB848];
  if (*(_BYTE *)(v8 + 24))
  {
    tknPrintf("Parse chart at index %llu:\n", v20, v21, v22, v23, a3);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    TParser::logChart(*(uint64_t **)(v8 + 48), &__p);
    std::stringbuf::str();
    if (v111 >= 0)
      v91 = v110;
    else
      v91 = (void **)v110[0];
    tknPrintString((const char *)v91);
    if (v111 < 0)
      operator delete(v110[0]);
    __p = *(void **)v89;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v89 + 24);
    v113 = v90 + 16;
    if (v116 < 0)
      operator delete(v115);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v117);
  }
  v92 = *a6;
  v93 = (__int128 *)a6[1];
  if ((__int128 *)*a6 != v93)
  {
    v94 = ((uint64_t)v93 - v92) / 56;
    v24.n128_f64[0] = (double)(v109 + 1);
    v95 = v94 <= 1 ? 1 : ((uint64_t)v93 - v92) / 56;
    v96 = v92 + 40;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v96 + 8);
      *(double *)&v25 = *(double *)v96 + (double)(unint64_t)v25 / v24.n128_f64[0];
      *(_QWORD *)v96 = v25;
      v96 += 56;
      --v95;
    }
    while (v95);
    __p = sortResult;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,false>(v92, v93, (uint64_t (**)(__int128 *, __int128 *))&__p, 126 - 2 * __clz(v94), 1, v24);
    if (*(_BYTE *)(v8 + 8))
    {
      tknPrintString("Parse tree for word sequence:");
      if (*(_QWORD *)(*a6 + 16))
      {
        v97 = 0;
        v98 = 112 * a3 + 16;
        do
        {
          tknPrintString(" ");
          loggableUnicode(**(unsigned int ***)(*a2 + v98), &__p);
          if (v114 >= 0)
            v99 = (const char *)&__p;
          else
            v99 = (const char *)__p;
          tknPrintString(v99);
          if (v114 < 0)
            operator delete(__p);
          ++v97;
          v98 += 112;
        }
        while (v97 < *(_QWORD *)(*a6 + 16));
      }
      tknPrintString("\n");
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v101 = *a6;
      v100 = a6[1];
      if (v100 != *a6)
      {
        v102 = 0;
        v103 = 0;
        do
        {
          v104 = v101 + v102;
          if (*(_QWORD *)(v101 + 16) != *(_QWORD *)(v101 + v102 + 16)
            || *(double *)(v101 + 40) != *(double *)(v104 + 40))
          {
            break;
          }
          if (*(_QWORD *)(v101 + 24) == *(_QWORD *)(v101 + v102 + 24)
            && *(_QWORD *)(v101 + 32) == *(_QWORD *)(v101 + v102 + 32))
          {
            TParser::logTree(*(_QWORD *)(v8 + 48), *(_QWORD **)v104, &__p);
            std::stringbuf::str();
            if (v111 >= 0)
              v105 = v110;
            else
              v105 = (void **)v110[0];
            tknPrintString((const char *)v105);
            if (v111 < 0)
              operator delete(v110[0]);
            v101 = *a6;
            v100 = a6[1];
          }
          ++v103;
          v102 += 56;
        }
        while (v103 < 0x6DB6DB6DB6DB6DB7 * ((v100 - v101) >> 3));
      }
      __p = *(void **)v89;
      *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v89 + 24);
      v113 = v90 + 16;
      if (v116 < 0)
        operator delete(v115);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v117);
    }
  }
  return TAllocator::clear((TAllocator *)v119);
}

void sub_20990D224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  MEMORY[0x20BD149A8](v28, 0x1070C40ADD13FEBLL);
  TAllocator::clear((TAllocator *)(v29 - 184));
  _Unwind_Resume(a1);
}

BOOL sortResult(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = v2 == v3;
  v5 = v2 > v3;
  if (v4)
    return *(double *)(a1 + 40) < *(double *)(a2 + 40);
  else
    return v5;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = v2 == v3;
  v5 = v2 > v3;
  if (v4)
    return *(double *)(a1 + 40) < *(double *)(a2 + 40);
  else
    return v5;
}

void TWideChartSeeder2::~TWideChartSeeder2(TWideChartSeeder2 *this)
{
  JUMPOUT(0x20BD149A8);
}

void TWordVerifier::~TWordVerifier(TWordVerifier *this)
{
  JUMPOUT(0x20BD149A8);
}

BOOL TWordVerifier::verifyTerminal(uint64_t a1, int *a2, char a3, std::string *a4)
{
  _BOOL8 v8;
  int v9;
  void **v10;
  const std::string::value_type *v11;
  void **v13;
  void *__p[2];
  char v15;

  MEMORY[0x20BD14750](a4, &byte_209A88803);
  if ((a3 & 1) != 0)
    return 0;
  v9 = TLexicon::checkName(*(_QWORD *)(a1 + 8), a2, 1, 0xFFFFFFFFFFFFFFFFLL);
  v8 = v9 != 0;
  if (v9)
  {
    loggableUnicode((unsigned int *)a2, __p);
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    MEMORY[0x20BD14750](a4, v10);
    if (v15 < 0)
      operator delete(__p[0]);
    v11 = " is an invalid token name.";
LABEL_10:
    std::string::append(a4, v11);
    return v8;
  }
  if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(*(_QWORD *)(a1 + 8), a2))
  {
    loggableUnicode((unsigned int *)a2, __p);
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    MEMORY[0x20BD14750](a4, v13);
    if (v15 < 0)
      operator delete(__p[0]);
    v11 = " isn't lexicalized.";
    goto LABEL_10;
  }
  return 0;
}

void sub_20990D4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (result != a2)
  {
    v22 = v3;
    v23 = v4;
    v6 = result;
    v7 = result + 56;
    if (result + 56 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)(v10 + 16);
          v18 = *(_OWORD *)v10;
          v19 = v12;
          v20 = *(_OWORD *)(v10 + 32);
          v21 = *(_QWORD *)(v10 + 48);
          v13 = v9;
          while (1)
          {
            v14 = v6 + v13;
            v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 56) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + 72) = v15;
            *(_OWORD *)(v14 + 88) = *(_OWORD *)(v6 + v13 + 32);
            *(_DWORD *)(v14 + 104) = *(_DWORD *)(v6 + v13 + 48);
            if (!v13)
              break;
            v13 -= 56;
            result = (*a3)((uint64_t)&v18, v13 + v6);
            if ((result & 1) == 0)
            {
              v16 = v6 + v13 + 56;
              goto LABEL_10;
            }
          }
          v16 = v6;
LABEL_10:
          v17 = v19;
          *(_OWORD *)v16 = v18;
          *(_OWORD *)(v16 + 16) = v17;
          *(_OWORD *)(v16 + 32) = v20;
          *(_DWORD *)(v16 + 48) = v21;
        }
        v7 = v10 + 56;
        v9 += 56;
      }
      while (v10 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result != a2)
  {
    v19 = v3;
    v20 = v4;
    v6 = result;
    v7 = result + 56;
    if (result + 56 != a2)
    {
      v9 = result - 56;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = *(_OWORD *)(v6 + 16);
          v15 = *(_OWORD *)v6;
          v16 = v11;
          v17 = *(_OWORD *)(v6 + 32);
          v18 = *(_QWORD *)(v6 + 48);
          v12 = v9;
          do
          {
            v13 = *(_OWORD *)(v12 + 72);
            *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 128) = v13;
            *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 88);
            *(_DWORD *)(v12 + 160) = *(_DWORD *)(v12 + 104);
            result = (*a3)((uint64_t)&v15, v12);
            v12 -= 56;
          }
          while ((result & 1) != 0);
          v14 = v16;
          *(_OWORD *)(v12 + 112) = v15;
          *(_OWORD *)(v12 + 128) = v14;
          *(_OWORD *)(v12 + 144) = v17;
          *(_DWORD *)(v12 + 160) = v18;
        }
        v7 = v6 + 56;
        v9 += 56;
      }
      while (v6 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v11 = a1[1];
      v10 = a1[2];
      v12 = *a1;
      v13 = *((_QWORD *)a1 + 6);
      v15 = a3[1];
      v14 = a3[2];
      v16 = *a3;
      *((_DWORD *)a1 + 12) = *((_DWORD *)a3 + 12);
      a1[1] = v15;
      a1[2] = v14;
      *a1 = v16;
      *((_DWORD *)a3 + 12) = v13;
      *a3 = v12;
      a3[1] = v11;
      result = 1;
LABEL_9:
      a3[2] = v10;
      return result;
    }
    v32 = a1[1];
    v31 = a1[2];
    v33 = *a1;
    v34 = *((_QWORD *)a1 + 6);
    v36 = a2[1];
    v35 = a2[2];
    v37 = *a2;
    *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
    a1[1] = v36;
    a1[2] = v35;
    *a1 = v37;
    *((_DWORD *)a2 + 12) = v34;
    *a2 = v33;
    a2[1] = v32;
    a2[2] = v31;
    if ((*a4)(a3, a2))
    {
      v38 = a2[1];
      v10 = a2[2];
      v39 = *a2;
      v40 = *((_QWORD *)a2 + 6);
      v42 = a3[1];
      v41 = a3[2];
      v43 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v42;
      a2[2] = v41;
      *a2 = v43;
      *((_DWORD *)a3 + 12) = v40;
      *a3 = v39;
      a3[1] = v38;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v18 = a2[1];
    v17 = a2[2];
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 6);
    v22 = a3[1];
    v21 = a3[2];
    v23 = *a3;
    *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    *((_DWORD *)a3 + 12) = v20;
    *a3 = v19;
    a3[1] = v18;
    a3[2] = v17;
    if ((*a4)(a2, a1))
    {
      v25 = a1[1];
      v24 = a1[2];
      v26 = *a1;
      v27 = *((_QWORD *)a1 + 6);
      v29 = a2[1];
      v28 = a2[2];
      v30 = *a2;
      *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
      a1[1] = v29;
      a1[2] = v28;
      *a1 = v30;
      *((_DWORD *)a2 + 12) = v27;
      *a2 = v26;
      a2[1] = v25;
      result = 2;
      a2[2] = v24;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = a2;
  v6 = a1[1];
  v27 = *a1;
  v28 = v6;
  v29 = a1[2];
  v30 = *((_QWORD *)a1 + 6);
  if (((*a3)(&v27, (__int128 *)((char *)a2 - 56)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 = (__int128 *)((char *)v7 + 56);
    while (((*a3)(&v27, v7) & 1) == 0);
  }
  else
  {
    v8 = (__int128 *)((char *)a1 + 56);
    do
    {
      v7 = v8;
      if (v8 >= v4)
        break;
      v9 = (*a3)(&v27, v8);
      v8 = (__int128 *)((char *)v7 + 56);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 56);
    while (((*a3)(&v27, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = *v7;
    v11 = v7[1];
    v12 = v7[2];
    v34 = *((_QWORD *)v7 + 6);
    v32 = v11;
    v33 = v12;
    v31 = v10;
    v13 = *v4;
    v14 = v4[1];
    v15 = v4[2];
    *((_DWORD *)v7 + 12) = *((_DWORD *)v4 + 12);
    v7[1] = v14;
    v7[2] = v15;
    *v7 = v13;
    v16 = v31;
    v17 = v32;
    v18 = v33;
    *((_DWORD *)v4 + 12) = v34;
    v4[1] = v17;
    v4[2] = v18;
    *v4 = v16;
    do
      v7 = (__int128 *)((char *)v7 + 56);
    while (!(*a3)(&v27, v7));
    do
      v4 = (__int128 *)((char *)v4 - 56);
    while (((*a3)(&v27, v4) & 1) != 0);
  }
  v19 = (__int128 *)((char *)v7 - 56);
  if ((__int128 *)((char *)v7 - 56) != a1)
  {
    v20 = *v19;
    v21 = *(__int128 *)((char *)v7 - 40);
    v22 = *(__int128 *)((char *)v7 - 24);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v7 - 2);
    a1[1] = v21;
    a1[2] = v22;
    *a1 = v20;
  }
  v23 = v27;
  v24 = v28;
  v25 = v29;
  *((_DWORD *)v7 - 2) = v30;
  *(__int128 *)((char *)v7 - 40) = v24;
  *(__int128 *)((char *)v7 - 24) = v25;
  *v19 = v23;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v6 = 0;
  v7 = a1[1];
  v26 = *a1;
  v27 = v7;
  v28 = a1[2];
  v29 = *((_QWORD *)a1 + 6);
  do
    v6 += 56;
  while (((*a3)((char *)a1 + v6, &v26) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 56;
  if (v6 == 56)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 -= 56;
    }
    while (((*a3)((char *)a2, &v26) & 1) == 0);
  }
  else
  {
    do
      a2 -= 56;
    while (!(*a3)((char *)a2, &v26));
  }
  if (v8 < a2)
  {
    v10 = (__int128 *)((char *)a1 + v6);
    v11 = a2;
    do
    {
      v13 = v10[1];
      v30 = *v10;
      v12 = v30;
      v31 = v13;
      v32 = v10[2];
      v14 = v32;
      v33 = *((_QWORD *)v10 + 6);
      v15 = v33;
      v16 = *(_DWORD *)(v11 + 48);
      v18 = *(_OWORD *)(v11 + 16);
      v17 = *(_OWORD *)(v11 + 32);
      *v10 = *(_OWORD *)v11;
      v10[1] = v18;
      v10[2] = v17;
      *((_DWORD *)v10 + 12) = v16;
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(_DWORD *)(v11 + 48) = v15;
      *(_OWORD *)v11 = v12;
      do
        v10 = (__int128 *)((char *)v10 + 56);
      while (((*a3)((char *)v10, &v26) & 1) != 0);
      do
        v11 -= 56;
      while (!(*a3)((char *)v11, &v26));
    }
    while ((unint64_t)v10 < v11);
    v9 = (uint64_t)v10 - 56;
  }
  if ((__int128 *)v9 != a1)
  {
    v19 = *(_OWORD *)v9;
    v20 = *(_OWORD *)(v9 + 16);
    v21 = *(_OWORD *)(v9 + 32);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(v9 + 48);
    a1[1] = v20;
    a1[2] = v21;
    *a1 = v19;
  }
  v22 = v26;
  v23 = v27;
  v24 = v28;
  *(_DWORD *)(v9 + 48) = v29;
  *(_OWORD *)(v9 + 16) = v23;
  *(_OWORD *)(v9 + 32) = v24;
  *(_OWORD *)v9 = v22;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (__int128 *)(a2 - 56);
      if (!(*a3)((__int128 *)(a2 - 56), (__int128 *)a1))
        return 1;
      v10 = *(_OWORD *)(a1 + 16);
      v9 = *(_OWORD *)(a1 + 32);
      v11 = *(_OWORD *)a1;
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_OWORD *)(a2 - 40);
      v13 = *(_OWORD *)(a2 - 24);
      v15 = *v8;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      *(_DWORD *)(a2 - 8) = v12;
      *v8 = v11;
      *(_OWORD *)(a2 - 40) = v10;
      result = 1;
      *(_OWORD *)(a2 - 24) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a1 + 168, (__int128 *)(a2 - 56), a3);
      return 1;
    default:
      v16 = (__int128 *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), a3);
      v17 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v17, v16))
    {
      v20 = *(_OWORD *)(v17 + 16);
      v26 = *(_OWORD *)v17;
      v27 = v20;
      v28 = *(_OWORD *)(v17 + 32);
      v29 = *(_QWORD *)(v17 + 48);
      v21 = v18;
      while (1)
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)(a1 + v21 + 144);
        *(_DWORD *)(v22 + 216) = *(_DWORD *)(a1 + v21 + 160);
        if (v21 == -112)
          break;
        v21 -= 56;
        if (((*a3)(&v26, (__int128 *)(v22 + 56)) & 1) == 0)
        {
          v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      v25 = v27;
      *(_OWORD *)v24 = v26;
      *(_OWORD *)(v24 + 16) = v25;
      *(_OWORD *)(v24 + 32) = v28;
      *(_DWORD *)(v24 + 48) = v29;
      if (++v19 == 8)
        return v17 + 56 == a2;
    }
    v16 = (__int128 *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v12 = *(_OWORD *)(a3 + 16);
    v11 = *(_OWORD *)(a3 + 32);
    v13 = *(_OWORD *)a3;
    v14 = *(_QWORD *)(a3 + 48);
    v16 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v17;
    *(_DWORD *)(a4 + 48) = v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)(a4 + 32) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v19 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)(a2 + 32);
      v20 = *(_OWORD *)a2;
      v21 = *(_QWORD *)(a2 + 48);
      v23 = *(_OWORD *)(a3 + 16);
      v22 = *(_OWORD *)(a3 + 32);
      v24 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v22;
      *(_OWORD *)a2 = v24;
      *(_DWORD *)(a3 + 48) = v21;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 32) = v18;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v25 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v26 = *(_OWORD *)a1;
        v27 = *(_QWORD *)(a1 + 48);
        v29 = *(_OWORD *)(a2 + 16);
        v28 = *(_OWORD *)(a2 + 32);
        v30 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v29;
        *(_OWORD *)(a1 + 32) = v28;
        *(_OWORD *)a1 = v30;
        *(_DWORD *)(a2 + 48) = v27;
        *(_OWORD *)a2 = v26;
        *(_OWORD *)(a2 + 16) = v25;
        *(__n128 *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v15 = *(_OWORD *)(a4 + 16);
    v14 = *(_OWORD *)(a4 + 32);
    v16 = *(_OWORD *)a4;
    v17 = *(_QWORD *)(a4 + 48);
    v19 = a5[1];
    v18 = a5[2];
    v20 = *a5;
    *(_DWORD *)(a4 + 48) = *((_DWORD *)a5 + 12);
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)a4 = v20;
    *((_DWORD *)a5 + 12) = v17;
    *a5 = v16;
    a5[1] = v15;
    a5[2] = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v22 = *(_OWORD *)(a3 + 16);
      v21 = *(_OWORD *)(a3 + 32);
      v23 = *(_OWORD *)a3;
      v24 = *(_QWORD *)(a3 + 48);
      v26 = *(_OWORD *)(a4 + 16);
      v25 = *(_OWORD *)(a4 + 32);
      v27 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v26;
      *(_OWORD *)(a3 + 32) = v25;
      *(_OWORD *)a3 = v27;
      *(_DWORD *)(a4 + 48) = v24;
      *(_OWORD *)a4 = v23;
      *(_OWORD *)(a4 + 16) = v22;
      *(_OWORD *)(a4 + 32) = v21;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v29 = *(_OWORD *)(a2 + 16);
        v28 = *(_OWORD *)(a2 + 32);
        v30 = *(_OWORD *)a2;
        v31 = *(_QWORD *)(a2 + 48);
        v33 = *(_OWORD *)(a3 + 16);
        v32 = *(_OWORD *)(a3 + 32);
        v34 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v33;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)a2 = v34;
        *(_DWORD *)(a3 + 48) = v31;
        *(_OWORD *)a3 = v30;
        *(_OWORD *)(a3 + 16) = v29;
        *(_OWORD *)(a3 + 32) = v28;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v35 = *(_OWORD *)(a1 + 16);
          result = *(__n128 *)(a1 + 32);
          v36 = *(_OWORD *)a1;
          v37 = *(_QWORD *)(a1 + 48);
          v39 = *(_OWORD *)(a2 + 16);
          v38 = *(_OWORD *)(a2 + 32);
          v40 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v39;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)a1 = v40;
          *(_DWORD *)(a2 + 48) = v37;
          *(_OWORD *)a2 = v36;
          *(_OWORD *)(a2 + 16) = v35;
          *(__n128 *)(a2 + 32) = result;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,TGrammarManager2Result*>(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  unint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __n128 *v37;
  __n128 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 56;
    if ((uint64_t)a2 - a1 >= 57)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)(a1 + 56 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 56);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v17 = v15[1];
          v16 = v15[2];
          v18 = *v15;
          v19 = v15[3].n128_u64[0];
          v21 = *(__n128 *)(a1 + 16);
          v20 = *(__n128 *)(a1 + 32);
          v22 = *(__n128 *)a1;
          v15[3].n128_u32[0] = *(_DWORD *)(a1 + 48);
          v15[1] = v21;
          v15[2] = v20;
          *v15 = v22;
          *(_DWORD *)(a1 + 48) = v19;
          *(__n128 *)a1 = v18;
          *(__n128 *)(a1 + 16) = v17;
          *(__n128 *)(a1 + 32) = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a4, v10, (__n128 *)a1);
        }
        v15 = (__n128 *)((char *)v15 + 56);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 57)
    {
      return v14;
    }
    else
    {
      v37 = v14;
      v23 = v9 / 0x38uLL;
      do
      {
        v38 = v7;
        v24 = 0;
        v39 = *(__n128 *)a1;
        v40 = *(__n128 *)(a1 + 16);
        v41 = *(__n128 *)(a1 + 32);
        v42 = *(_QWORD *)(a1 + 48);
        v25 = a1;
        do
        {
          v26 = v25 + 56 * v24 + 56;
          v27 = (2 * v24) | 1;
          v28 = 2 * v24 + 2;
          if (v28 < v23 && (*a4)(v25 + 56 * v24 + 56, v25 + 56 * v24 + 112))
          {
            v26 += 56;
            v27 = v28;
          }
          v29 = *(_OWORD *)v26;
          v30 = *(_OWORD *)(v26 + 16);
          v31 = *(_OWORD *)(v26 + 32);
          *(_DWORD *)(v25 + 48) = *(_DWORD *)(v26 + 48);
          *(_OWORD *)(v25 + 16) = v30;
          *(_OWORD *)(v25 + 32) = v31;
          *(_OWORD *)v25 = v29;
          v25 = v26;
          v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        v7 = (__n128 *)((char *)v38 - 56);
        if ((__int8 *)v26 == &v38[-4].n128_i8[8])
        {
          *(_DWORD *)(v26 + 48) = v42;
          *(__n128 *)(v26 + 16) = v40;
          *(__n128 *)(v26 + 32) = v41;
          *(__n128 *)v26 = v39;
        }
        else
        {
          v32 = *v7;
          v33 = *(__int128 *)((char *)&v38[-3] + 8);
          v34 = *(__int128 *)((char *)&v38[-2] + 8);
          *(_DWORD *)(v26 + 48) = v38[-1].n128_u32[2];
          *(_OWORD *)(v26 + 16) = v33;
          *(_OWORD *)(v26 + 32) = v34;
          *(__n128 *)v26 = v32;
          *v7 = v39;
          *(__n128 *)((char *)v38 - 40) = v40;
          *(__n128 *)((char *)v38 - 24) = v41;
          v38[-1].n128_u32[2] = v42;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, v26 + 56, (uint64_t (**)(__int128 *, __int128 *))a4, 0x6DB6DB6DB6DB6DB7 * ((v26 + 56 - a1) >> 3));
        }
      }
      while (v23-- > 2);
      return v37;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v29 = v4;
    v30 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 56 * v12);
      v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 56 * v12, (uint64_t)v13 + 56))
      {
        v13 = (__int128 *)((char *)v13 + 56);
        v12 = v14;
      }
      if ((((uint64_t (*)(__int128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v25 = *v7;
        v26 = v16;
        v27 = v7[2];
        v28 = v7[3].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v20 = v13[2];
          v7[3].n128_u32[0] = *((_DWORD *)v13 + 12);
          v7[1] = (__n128)v19;
          v7[2] = (__n128)v20;
          *v7 = v18;
          if (v9 < v12)
            break;
          v21 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 56 * v21);
          v22 = 2 * v12 + 2;
          if (v22 < a3)
          {
            if ((*a2)(a1 + 56 * v21, (uint64_t)v13 + 56))
            {
              v13 = (__int128 *)((char *)v13 + 56);
              v21 = v22;
            }
          }
          v7 = v17;
          v12 = v21;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v25));
        result = v25;
        v23 = v26;
        v24 = v27;
        v17[3].n128_u32[0] = v28;
        v17[1] = v23;
        v17[2] = v24;
        *v17 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v23 = v4;
    v24 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 56 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 56);
    if ((*a3)(v10, (__int128 *)(a2 - 56)))
    {
      v13 = v11[1];
      v19 = *v11;
      v20 = v13;
      v21 = v11[2];
      v22 = *((_QWORD *)v11 + 6);
      do
      {
        v14 = v10;
        v15 = *v10;
        v16 = v10[1];
        v17 = v10[2];
        *((_DWORD *)v11 + 12) = *((_DWORD *)v10 + 12);
        v11[1] = v16;
        v11[2] = v17;
        *v11 = v15;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 56 * v9);
        v11 = v14;
      }
      while (((*a3)(v10, &v19) & 1) != 0);
      v18 = v20;
      *v14 = v19;
      v14[1] = v18;
      result = *(double *)&v21;
      v14[2] = v21;
      *((_DWORD *)v14 + 12) = v22;
    }
  }
  return result;
}

uint64_t StartupLatticePostProbParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"LatticePostProbDenominator", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbDenominatorIntHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"LatticePostProbAcousticScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbAcousticScoreScaleIntHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"LatticePostProbWordDurationScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbWordDurationScoreScaleIntHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v3, (uint64_t)"LatticePostProbLMScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbLMScoreScaleIntHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"LatticePostProbStateWordPenaltyScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbStateWordPenaltyScaleIntHistory);
  v5 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v5, (uint64_t)"LatticePostProbPerWordPenaltyScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbPerWordPenaltyScaleIntHistory);
  v6 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v6, (uint64_t)"LatticePostProbInterWordSilencePenaltyScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticePostProbInterWordSilencePenaltyScaleIntHistory);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2848, (ParamSpec *)v2);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2848);
}

_DWORD *LatticePostProbParamSet::LatticePostProbParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C2178C0;
  LatticePostProbParamSet::setDefaults((LatticePostProbParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_20990EB84(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t LatticePostProbParamSet::LatticePostProbParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C2178C0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t LatticePostProbParamSet::setDefaults(LatticePostProbParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;

  *((_DWORD *)this + 10) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 3, 0, 0, v13, v14, v15, v16);
  *((_DWORD *)this + 13) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 4, 0, 0, v17, v18, v19, v20);
  *((_DWORD *)this + 14) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 15) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 6, 0, 0, v25, v26, v27, v28);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2848, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t LatticePostProbParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  v4 = 28;
  if (a2 == 3)
    v4 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 0;
  else
    v5 = v4;
  return v3 + v5;
}

uint64_t LatticePostProbParamSet::getBoolParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  switch(a2)
  {
    case 1:
      v8 = 1;
      goto LABEL_10;
    case 2:
      v8 = 2;
      goto LABEL_10;
    case 3:
      v8 = 3;
      goto LABEL_10;
    case 4:
      v8 = 4;
      goto LABEL_10;
    case 5:
      v8 = 5;
      goto LABEL_10;
    case 6:
      v8 = 6;
      goto LABEL_10;
    case 7:
      v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t LatticePostProbParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  ParamSpecMgr *v9;
  int v10;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  const void *ParamByParamId;
  const void *v16;
  const void *v17;

  switch(a2)
  {
    case 1:
      switch((int)a3)
      {
        case 0:
          result = a1[10];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 1;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 1;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 1;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 2;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 2;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 2;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = a1[12];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 3;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 3;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 3;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 4;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 4;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 4;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 5:
      switch((int)a3)
      {
        case 0:
          result = a1[14];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 5;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 5;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 5;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[15];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 6;
          goto LABEL_38;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 6;
          goto LABEL_40;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 6;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2848;
          v10 = 7;
LABEL_38:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v9, v10, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2848;
          v12 = 7;
LABEL_40:
          v16 = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2848;
          v14 = 7;
LABEL_42:
          v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_17:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          goto LABEL_18;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
LABEL_18:
      result = 0;
      break;
  }
  return result;
}

double LatticePostProbParamSet::getDoubleParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  switch(a2)
  {
    case 1:
      v8 = 1;
      goto LABEL_10;
    case 2:
      v8 = 2;
      goto LABEL_10;
    case 3:
      v8 = 3;
      goto LABEL_10;
    case 4:
      v8 = 4;
      goto LABEL_10;
    case 5:
      v8 = 5;
      goto LABEL_10;
    case 6:
      v8 = 6;
      goto LABEL_10;
    case 7:
      v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t LatticePostProbParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  switch(a2)
  {
    case 1:
      v8 = 1;
      goto LABEL_10;
    case 2:
      v8 = 2;
      goto LABEL_10;
    case 3:
      v8 = 3;
      goto LABEL_10;
    case 4:
      v8 = 4;
      goto LABEL_10;
    case 5:
      v8 = 5;
      goto LABEL_10;
    case 6:
      v8 = 6;
      goto LABEL_10;
    case 7:
      v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t LatticePostProbParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  switch(a2)
  {
    case 1:
      v8 = 1;
      goto LABEL_10;
    case 2:
      v8 = 2;
      goto LABEL_10;
    case 3:
      v8 = 3;
      goto LABEL_10;
    case 4:
      v8 = 4;
      goto LABEL_10;
    case 5:
      v8 = 5;
      goto LABEL_10;
    case 6:
      v8 = 6;
      goto LABEL_10;
    case 7:
      v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void LatticePostProbParamSet::setBoolParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::setIntParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  void *ParamByParamId;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = a3;
  switch(a2)
  {
    case 1:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 1, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v11, v12, v13, v14);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbAcousticScoreScale";
        goto LABEL_31;
      }
      *((_DWORD *)this + 10) = v8;
      break;
    case 2:
      v22 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 2, a3, a4, a5, a6, a7, a8);
      if (v22)
      IntParamSpec::validateValue((IntParamSpec *)v22, v8, 0, 0, v23, v24, v25, v26);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbDenominator";
        goto LABEL_31;
      }
      *((_DWORD *)this + 11) = v8;
      break;
    case 3:
      v27 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 3, a3, a4, a5, a6, a7, a8);
      if (v27)
      IntParamSpec::validateValue((IntParamSpec *)v27, v8, 0, 0, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbInterWordSilencePenaltyScale";
        goto LABEL_31;
      }
      *((_DWORD *)this + 12) = v8;
      break;
    case 4:
      v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 4, a3, a4, a5, a6, a7, a8);
      if (v32)
      IntParamSpec::validateValue((IntParamSpec *)v32, v8, 0, 0, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbLMScoreScale";
        goto LABEL_31;
      }
      *((_DWORD *)this + 13) = v8;
      break;
    case 5:
      v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 5, a3, a4, a5, a6, a7, a8);
      if (v37)
      IntParamSpec::validateValue((IntParamSpec *)v37, v8, 0, 0, v38, v39, v40, v41);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbPerWordPenaltyScale";
        goto LABEL_31;
      }
      *((_DWORD *)this + 14) = v8;
      break;
    case 6:
      v42 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 6, a3, a4, a5, a6, a7, a8);
      if (v42)
      IntParamSpec::validateValue((IntParamSpec *)v42, v8, 0, 0, v43, v44, v45, v46);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbStateWordPenaltyScale";
        goto LABEL_31;
      }
      *((_DWORD *)this + 15) = v8;
      break;
    case 7:
      v47 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2848, 7, a3, a4, a5, a6, a7, a8);
      if (v47)
      IntParamSpec::validateValue((IntParamSpec *)v47, v8, 0, 0, v48, v49, v50, v51);
      if (*((_DWORD *)this + 9))
      {
        v21 = "LatticePostProbWordDurationScoreScale";
LABEL_31:
        throwParamSetSetFailed(v21, "int", v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *((_DWORD *)this + 16) = v8;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
}

void LatticePostProbParamSet::setDoubleParameter(LatticePostProbParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void LatticePostProbParamSet::setStringParameter(LatticePostProbParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::setEnumParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::~LatticePostProbParamSet(LatticePostProbParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((LatticePostProbParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((LatticePostProbParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

uint64_t getPropCheckTokenExistence(void)
{
  unsigned __int8 v0;
  uint64_t v2;

  {
    v2 = operator new();
    *(_QWORD *)v2 = &unk_24C218D48;
    *(_BYTE *)(v2 + 8) = 0;
    getPropCheckTokenExistence(void)::p = v2;
  }
  return getPropCheckTokenExistence(void)::p;
}

void sub_20990FC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TGlobalParamManager::TGlobalParamManager(TGlobalParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  TParam *v4;
  uint64_t v5;
  const __int32 *v6;
  uint64_t v7;
  const __int32 *v8;
  uint64_t ActiveConfigHandle;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  std::vector<std::wstring> v15;
  std::vector<std::wstring> v16;
  std::vector<std::wstring> *v17;

  TParamManager::TParamManager(this, 0, a2);
  *v3 = &off_24C216B60;
  v4 = (TParam *)(v3 + 18);
  TBoolParam::TBoolParam((uint64_t)(v3 + 18), (uint64_t)"C", (uint64_t)"A", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 392, (uint64_t)"C", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 640, (uint64_t)"C", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 888, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 1136, (uint64_t)"C", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 1384, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TBoolParam::TBoolParam((uint64_t)this + 1632, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TStringParam::TStringParam((char *)this + 1880, "D", "D", 32, &dword_209A79044, "1", &dword_209A79044);
  TStringParam::TStringParam((char *)this + 3256, "D", "D", 288, &dword_209A79044, "1", &dword_209A79044);
  TIntParam::TIntParam((TGlobalParamManager *)((char *)this + 4632), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TIntParam::TIntParam((TGlobalParamManager *)((char *)this + 4984), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_209A79044);
  TStringParam::TStringParam((char *)this + 5336, "D");
  TStringParam::TStringParam((char *)this + 6712, "D");
  TFloatParam::TFloatParam((uint64_t)this + 8088, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"1", (uint64_t)&dword_209A79044, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 8624, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_209A79044, 0.0);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 392));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 640));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 888));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1136));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1384));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1632));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1880));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 3256));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 4632));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 4984));
  MEMORY[0x20BD147A4]((char *)this + 5376, "D");
  MEMORY[0x20BD147A4]((char *)this + 5400, "1");
  MEMORY[0x20BD147A4]((char *)this + 5424, &dword_209A79044);
  *((_QWORD *)this + 681) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v16, 4uLL);
  std::vector<std::wstring>::vector(&v15, 4uLL);
  v5 = 0;
  v6 = (const __int32 *)"a";
  do
  {
    MEMORY[0x20BD147A4](&v16.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 5336, (uint64_t)&v16, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 667, 0, &dword_209A79044);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 5336));
  v17 = &v15;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  v15.__begin_ = (std::vector<std::wstring>::pointer)&v16;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  MEMORY[0x20BD147A4]((char *)this + 6752, "D");
  MEMORY[0x20BD147A4]((char *)this + 6776, "1");
  MEMORY[0x20BD147A4]((char *)this + 6800, &dword_209A79044);
  *((_QWORD *)this + 853) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v16, 4uLL);
  std::vector<std::wstring>::vector(&v15, 4uLL);
  v7 = 0;
  v8 = (const __int32 *)"a";
  do
  {
    MEMORY[0x20BD147A4](&v16.__begin_[v7], v8);
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 4);
  TStringParam::setAllowables((uint64_t)this + 6712, (uint64_t)&v16, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 839, 0, &dword_209A79044);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 6712));
  v17 = &v15;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  v15.__begin_ = (std::vector<std::wstring>::pointer)&v16;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 8088));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 8624));
  *((_QWORD *)this + 17) = 1;
  ActiveConfigHandle = TParam::getActiveConfigHandle(v4);
  g_bCrashOnError = *((_BYTE *)this + TParam::getValidConfig(v4, ActiveConfigHandle) + 296);
  v10 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 392));
  g_bCheckVocCompatibility = *((_BYTE *)this
                             + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 392), v10)
                             + 544);
  v11 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 888));
  g_bLogMemoryLeaks = *((_BYTE *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 888), v11) + 1040);
  v12 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 1136));
  g_bCheckLexicon = *((_BYTE *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 1136), v12) + 1288);
  v13 = (_BYTE *)getPropCheckTokenExistence();
  v14 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 640));
  v13[8] = *((_BYTE *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 640), v14) + 792);
  (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 16))(v13);
}

void sub_209910340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, char *a18, uint64_t a19, uint64_t a20,char a21)
{
  TParamManager *v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;

  a18 = &a21;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  TParam::~TParam(a10);
  TParam::~TParam(a11);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(v27);
  TParam::~TParam(a12);
  TParam::~TParam(a13);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TBoolParam::~TBoolParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(v26);
  TBoolParam::~TBoolParam(v25);
  TBoolParam::~TBoolParam(v24);
  TBoolParam::~TBoolParam(v23);
  TBoolParam::~TBoolParam(v22);
  TParamManager::~TParamManager(v21);
  _Unwind_Resume(a1);
}

uint64_t TGlobalParamManager::notifyChange(uint64_t this, const TParam *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t ActiveConfigHandle;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  if ((const TParam *)(this + 144) == a2)
  {
    ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, ActiveConfigHandle);
    v7 = *(_BYTE *)(v3 + this + 296);
    v8 = &g_bCrashOnError;
LABEL_11:
    *v8 = v7;
    return this;
  }
  if ((const TParam *)(this + 392) == a2)
  {
    v9 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v9);
    v7 = *(_BYTE *)(v3 + this + 544);
    v8 = &g_bCheckVocCompatibility;
    goto LABEL_11;
  }
  if ((const TParam *)(this + 888) == a2)
  {
    v10 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v10);
    v7 = *(_BYTE *)(v3 + this + 1040);
    v8 = &g_bLogMemoryLeaks;
    goto LABEL_11;
  }
  if ((const TParam *)(this + 1136) == a2)
  {
    v11 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v11);
    v7 = *(_BYTE *)(v3 + this + 1288);
    v8 = &g_bCheckLexicon;
    goto LABEL_11;
  }
  if ((const TParam *)(this + 640) == a2)
  {
    v4 = (_BYTE *)getPropCheckTokenExistence();
    v5 = TParam::getActiveConfigHandle(a2);
    v4[8] = *(_BYTE *)(v3 + TParam::getValidConfig(a2, v5) + 792);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4);
  }
  return this;
}

void TGlobalParamManager::~TGlobalParamManager(void **this)
{
  TGlobalParamManager::~TGlobalParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  *this = &off_24C216B60;
  TParam::~TParam(this + 1078);
  TParam::~TParam(this + 1011);
  this[839] = &unk_24C214170;
  v13 = this + 1008;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 1005;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 1002;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 1001]) < 0)
      operator delete(this[i + 999]);
  }
  TParam::~TParam(this + 839);
  this[667] = &unk_24C214170;
  v13 = this + 836;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 833;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 830;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 829]) < 0)
      operator delete(this[j + 827]);
  }
  TParam::~TParam(this + 667);
  TParam::~TParam(this + 623);
  TParam::~TParam(this + 579);
  this[407] = &unk_24C214170;
  v13 = this + 576;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 573;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 570;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 569]) < 0)
      operator delete(this[k + 567]);
  }
  TParam::~TParam(this + 407);
  this[235] = &unk_24C214170;
  v13 = this + 404;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 401;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = this + 398;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 397]) < 0)
      operator delete(this[m + 395]);
  }
  TParam::~TParam(this + 235);
  v6 = 0;
  this[204] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v6 + 234]) < 0)
      operator delete(this[v6 + 232]);
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 204);
  v7 = 0;
  this[173] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v7 + 203]) < 0)
      operator delete(this[v7 + 201]);
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 173);
  v8 = 0;
  this[142] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v8 + 172]) < 0)
      operator delete(this[v8 + 170]);
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 142);
  v9 = 0;
  this[111] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v9 + 141]) < 0)
      operator delete(this[v9 + 139]);
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 111);
  v10 = 0;
  this[80] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v10 + 110]) < 0)
      operator delete(this[v10 + 108]);
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 80);
  v11 = 0;
  this[49] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v11 + 79]) < 0)
      operator delete(this[v11 + 77]);
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 49);
  v12 = 0;
  this[18] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v12 + 48]) < 0)
      operator delete(this[v12 + 46]);
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TChartInfo::TChartInfo(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 424) = 0;
  v3 = a2[3];
  *(_QWORD *)(result + 408) = v3;
  *(_QWORD *)(result + 416) = a3;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 != 1)
  {
    v5 = result - 8;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 408) + 24) + v4 - 2))
      {
        *(_QWORD *)(v5 + 8 * v4) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 8 * v4) = a2[7];
        a2 = (_QWORD *)a2[6];
      }
      --v4;
    }
    while (v4 != 1);
  }
  return result;
}

uint64_t TParser::TParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  TAllocator *v7;

  *(_QWORD *)a1 = &unk_24C218D48;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_24C218D70;
  v6 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (TAllocator *)(a1 + 48);
  TAllocator::TAllocator((TAllocator *)(a1 + 48), 2048);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 24) = 10;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(v6);
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  if (*(_QWORD *)(a1 + 48) >= 0x801uLL)
    TAllocator::clear(v7);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_209910B30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  TAllocator *v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)v1[20];
  if (v5)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[17];
  if (v6)
  {
    v1[18] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[12] = v8;
    operator delete(v8);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TParser::~TParser(TParser *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TParser *)((char *)this + 48));
}

_QWORD *TParser::getCell(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = a1 + 88;
  if (a3 >= (*(_QWORD *)(a1 + 96) - v6) >> 3)
  {
    std::vector<TPItnTagHandle_fake **>::reserve((void **)(a1 + 88), 2 * (a3 + 1));
    v10 = 0;
    std::vector<TSegment const*>::resize(v7, a3 + 1, &v10);
    goto LABEL_7;
  }
  result = *(_QWORD **)(v6 + 8 * a3);
  if (!result)
  {
LABEL_7:
    result = TAllocator::allocate((TAllocator *)(a1 + 48), 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a3);
    *result = a2;
    result[1] = 0;
    result[2] = 0;
    result[3] = v9;
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a3) = result;
    return result;
  }
  while (*result != a2)
  {
    result = (_QWORD *)result[3];
    if (!result)
      goto LABEL_7;
  }
  return result;
}

_QWORD *TParser::addOpenProduction(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *result;

  v3 = a2[3];
  if (v3)
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 16) + 8 * a2[4]);
  else
    v4 = a2 + 6;
  result = TParser::getCell(a1, *v4, a2[2] + a2[1]);
  *a2 = result[1];
  result[1] = a2;
  return result;
}

void TParser::addClosedProduction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Cell;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *__p[2];
  char v35;
  char v36;

  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a2 + 24))
  {
    TChartInfo::TChartInfo((uint64_t)__p, (_QWORD *)a2, a1 + 48);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), __p);
    if (v36)
      return;
    *(void **)(a2 + 40) = __p[0];
  }
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 16) + 8 * *(_QWORD *)(a2 + 32));
  else
    v5 = (uint64_t *)(a2 + 48);
  Cell = TParser::getCell(a1, *v5, *(_QWORD *)(a2 + 8));
  v7 = (uint64_t *)Cell[2];
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7[2];
      v11 = *(_QWORD *)(a2 + 16);
      if (v10 < v11)
        break;
      if (v10 <= v11)
      {
        if (v7[5] == *(_QWORD *)(a2 + 40)
          || (v12 = *(_QWORD *)(a1 + 40)) != 0
          && ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7, a2) & 1) != 0)
        {
          if (!*(_BYTE *)(a1 + 8))
            return;
          v20 = *(_QWORD *)(a2 + 8);
          v21 = *(_QWORD *)(a2 + 16);
          v22 = *(_QWORD *)(a2 + 24);
          if (v22)
            v23 = *(_QWORD *)(v22 + 16) + 8 * *(_QWORD *)(a2 + 32);
          else
            v23 = a2 + 48;
          loggableUnicode(*(unsigned int **)(*(_QWORD *)v23 + 16), __p);
          if (v35 >= 0)
            v33 = __p;
          else
            v33 = (void **)__p[0];
          tknPrintf("Warning: ignoring duplicate parse for token range [%llu,%llu] with symbol %s (rules %llu and %llu)\n", v29, v30, v31, v32, v20, v21, v33, **(_QWORD **)(a2 + 24), *(_QWORD *)v7[3]);
          goto LABEL_46;
        }
        ++v9;
      }
      else
      {
        v8 = v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v9 > *(_QWORD *)(a1 + 24))
    {
      if (!*(_BYTE *)(a1 + 8))
        return;
      v13 = *(_QWORD *)(a2 + 24);
      if (v13)
        v14 = *(_QWORD *)(v13 + 16) + 8 * *(_QWORD *)(a2 + 32);
      else
        v14 = a2 + 48;
      loggableUnicode(*(unsigned int **)(*(_QWORD *)v14 + 16), __p);
      if (v35 >= 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      tknPrintf("Warning: grammar over-generating symbol %s for token range [%llu,%llu]. Ignoring parse. (rule %llu)\n", v24, v25, v26, v27, v28, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), **(_QWORD **)(a2 + 24));
LABEL_46:
      if (v35 < 0)
        operator delete(__p[0]);
      return;
    }
    if (v8)
      goto LABEL_24;
  }
  v8 = Cell + 2;
LABEL_24:
  *(_QWORD *)a2 = *v8;
  *v8 = a2;
  for (i = (_QWORD *)Cell[1]; i; i = (_QWORD *)*i)
  {
    v16 = TAllocator::allocate((TAllocator *)(a1 + 48), 64);
    v17 = i[3];
    v16[3] = v17;
    v18 = i[4] + 1;
    while (*(unsigned __int8 *)(*(_QWORD *)(v17 + 24) + v18++))
      ;
    v16[4] = v18 - 1;
    *v16 = 0;
    v16[1] = i[1];
    v16[2] = *(_QWORD *)(a2 + 16) + i[2];
    v16[6] = i;
    v16[7] = a2;
    v16[5] = 0;
    ++*(_QWORD *)(a1 + 184);
    if (v17 && *(_QWORD *)(v17 + 8) != v18)
      TParser::addOpenProduction(a1, v16);
    else
      TParser::addClosedProduction(a1, v16);
  }
  TParser::startNewProductions((_QWORD *)a1, (_QWORD *)a2);
}

void sub_209910FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TParser::startNewProductions(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = result;
  v4 = a2[3];
  if (v4)
    v5 = (_QWORD **)(*(_QWORD *)(v4 + 16) + 8 * a2[4]);
  else
    v5 = (_QWORD **)(a2 + 6);
  v6 = (_QWORD *)**v5;
  if (!v6)
    return result;
  do
  {
    v7 = *(uint64_t **)(v3[11] + 8 * a2[1]);
    if (!v7)
      goto LABEL_20;
    while (1)
    {
      v8 = *v7;
      if (v7[1])
      {
        v9 = (_QWORD *)v3[4];
        if ((*(_BYTE *)(v8 + 8) & 4) == 0)
          break;
      }
      else
      {
        v9 = (_QWORD *)v3[4];
      }
      if (v8 == v9[1])
        break;
LABEL_12:
      v7 = (uint64_t *)v7[3];
      if (!v7)
        goto LABEL_20;
    }
    v10 = *(_QWORD *)(v8 + 24) + v9[8] * *(_QWORD *)(*(_QWORD *)(v6[2] + 8 * v6[1] - 8) + 24);
    if (((*(_QWORD *)(v9[15] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_12;
    v11 = TAllocator::allocate((TAllocator *)(v3 + 6), 64);
    v12 = 0;
    v11[3] = v6;
    v13 = v6[3];
    v14 = 1;
    do
    {
      v15 = v14;
      v16 = *(unsigned __int8 *)(v13 + v12++);
      ++v14;
    }
    while (v16);
    while (*(unsigned __int8 *)(v13 + v15++))
      ;
    v11[4] = v15 - 1;
    *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 1);
    *v11 = 0;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = a2;
    ++v3[23];
    if (v6[1] == v15)
      result = (_QWORD *)TParser::addClosedProduction(v3, v11);
    else
      result = TParser::addOpenProduction((uint64_t)v3, v11);
LABEL_20:
    v6 = (_QWORD *)v6[4];
  }
  while (v6);
  return result;
}

uint64_t TParser::getAllProductions(_QWORD *a1, uint64_t a2)
{
  _QWORD *Cell;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  ++a1[25];
  std::vector<TItnRule *>::resize((uint64_t)(a1 + 11), 0);
  Cell = TParser::getCell((uint64_t)a1, *(_QWORD *)(a1[4] + 8), 0);
  v5 = a1[11];
  if (a1[12] != v5)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v5 + 8 * v6))
      {
        std::vector<TItnRule *>::resize((uint64_t)(a1 + 14), 0);
        std::vector<unsigned long>::resize((uint64_t)(a1 + 17), 0);
        std::vector<TItnRule *>::resize((uint64_t)(a1 + 20), 0);
        (*(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v6, a1 + 14, a1 + 17, a1 + 20, a1 + 6);
        if (a1[14] != a1[15])
        {
          v7 = 0;
          do
          {
            v8 = TAllocator::allocate((TAllocator *)(a1 + 6), 64);
            v9 = *(_QWORD *)(a1[14] + 8 * v7);
            v8[2] = *(_QWORD *)(a1[17] + 8 * v7);
            v8[3] = 0;
            v8[4] = 0;
            v8[5] = 0;
            *v8 = 0;
            v8[1] = v6;
            v8[6] = v9;
            v8[7] = 0;
            v8[5] = *(_QWORD *)(a1[20] + 8 * v7);
            ++a1[23];
            TParser::addClosedProduction((uint64_t)a1, (uint64_t)v8);
            ++v7;
            v10 = a1[15] - a1[14];
          }
          while (v7 < v10 >> 3);
          a1[24] += v10 >> 3;
        }
      }
      ++v6;
      v5 = a1[11];
    }
    while (v6 < (a1[12] - v5) >> 3);
  }
  return Cell[2];
}

uint64_t *TParser::logChart(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  _QWORD *j;
  _QWORD *v8;
  _QWORD *k;
  _QWORD *m;
  _QWORD *v11;
  uint64_t n;
  _QWORD *ii;

  if (result[12] != result[11])
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": terminals\n", 12);
      for (i = *(_QWORD **)(v3[11] + 8 * v4); i; i = (_QWORD *)i[3])
      {
        if ((*(_BYTE *)(*i + 8) & 4) != 0)
        {
          for (j = (_QWORD *)i[2]; j; j = (_QWORD *)*j)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)j, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": closed productions\n", 21);
      for (k = *(_QWORD **)(v3[11] + 8 * v4); k; k = (_QWORD *)k[3])
      {
        if ((*(_BYTE *)(*k + 8) & 4) == 0)
        {
          for (m = (_QWORD *)k[2]; m; m = (_QWORD *)*m)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)m, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": open productions\n", 19);
      for (n = *(_QWORD *)(v3[11] + 8 * v4); n; n = *(_QWORD *)(n + 24))
      {
        for (ii = *(_QWORD **)(n + 8); ii; ii = (_QWORD *)*ii)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
          TProduction::log((uint64_t)ii, v3[5], a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        }
      }
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----\n", 5);
      ++v4;
    }
    while (v4 < (v3[12] - v3[11]) >> 3);
  }
  return result;
}

_QWORD *TProduction::log(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  char v23;
  char v24;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"span ", 5);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    v7 = operator<<(a3, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16)+ 8 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)- 8)+ 16));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" =", 2);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) != 1)
    {
      v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
        if (v8 == *(_QWORD *)(a1 + 32))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)". ", 2);
        v9 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(*(_QWORD *)(v9 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"[", 1);
          v9 = *(_QWORD *)(a1 + 24);
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v8);
        if ((*(_BYTE *)(v10 + 8) & 4) != 0)
        {
          v23 = 34;
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v23, 1);
          v12 = operator<<(v11, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * v8) + 16));
          v24 = 34;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
        }
        else
        {
          operator<<(a3, *(unsigned int **)(v10 + 16));
        }
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(*(_QWORD *)(v13 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"]", 1);
          v13 = *(_QWORD *)(a1 + 24);
        }
        ++v8;
      }
      while (v8 < *(_QWORD *)(v13 + 8) - 1);
    }
    v14 = 1;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
    v15 = *(_QWORD *)(a1 + 24);
    if (v15)
      v14 = *(_QWORD *)(a1 + 32) + 1 == *(_QWORD *)(v15 + 8);
    if (a2)
    {
      if (v14)
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, a1, a3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" // line ", 9);
    return (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v21 = 96;
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v21, 1);
    v18 = *(_QWORD *)(a1 + 24);
    if (v18)
      v19 = *(_QWORD *)(v18 + 16) + 8 * *(_QWORD *)(a1 + 32);
    else
      v19 = a1 + 48;
    v20 = operator<<(v17, *(unsigned int **)(*(_QWORD *)v19 + 16));
    v22 = 96;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v22, 1);
  }
}

void TParser::logTree(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::string::value_type *v30;
  std::string __p;
  _OWORD v32[25];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_9;
    v12 = *(const char **)a4;
  }
  else
  {
    v12 = (const char *)a4;
    if (!*(_BYTE *)(a4 + 23))
      goto LABEL_9;
  }
  v13 = strlen(v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"|\n", 2);
  v15 = (const char *)a4;
  if (*(char *)(a4 + 23) < 0)
    v15 = *(const char **)a4;
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"|", 1);
LABEL_9:
  if ((*(_BYTE *)(a3 + 8) & 4) != 0)
  {
    v29 = operator<<(v28, *(unsigned int **)(a3 + 16));
    if (a2)
      goto LABEL_11;
LABEL_33:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"? // skipped", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
    return;
  }
  operator<<(a6, *(unsigned int **)(a3 + 16));
  if (!a2)
    goto LABEL_33;
LABEL_11:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" ", 1);
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
    (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v18 + 24))(v18, a2, a6);
  if (a2[3])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" // line ", 9);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
  v19 = (_QWORD *)a2[3];
  if (v19)
  {
    memset(v32, 0, sizeof(v32));
    v20 = v19[1];
    v21 = v20 - 1;
    if (v20 == 1)
    {
      if (a5)
        v30 = "|  ";
      else
        v30 = "   ";
      std::string::append((std::string *)a4, v30);
    }
    else
    {
      v22 = v19[3];
      v23 = v20 - 2;
      do
      {
        *((_QWORD *)v32 + v23) = 0;
        if (!*(_BYTE *)(v22 + v23))
        {
          *((_QWORD *)v32 + v23) = a2[7];
          a2 = (_QWORD *)a2[6];
        }
        --v23;
      }
      while (v23 != -1);
      if (a5)
        v24 = "|  ";
      else
        v24 = "   ";
      std::string::append((std::string *)a4, v24);
      v25 = 0;
      do
      {
        v26 = *((_QWORD *)v32 + v25);
        v27 = *(_QWORD *)(v19[2] + 8 * v25);
        if (*(char *)(a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        else
          __p = *(std::string *)a4;
        TParser::logTree(a1, v26, v27, &__p, ++v25 < v21, a6);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      while (v21 != v25);
    }
  }
}

void sub_209911ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void TParser::logTree(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  if (a2)
  {
    v6 = a2[3];
    if (v6)
      v7 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8 * a2[4]);
    else
      v7 = a2 + 6;
    v8 = *v7;
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    TParser::logTree(a1, a2, v8, (uint64_t)__p, 0, a3);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_209911B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MrecInitModule_netmgr_net(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugBest)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugBest", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugBest = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugBest);
  }
  if (!gParDebugTrueBestPelThreshScore)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugTrueBestPelThreshScore", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugTrueBestPelThreshScore = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugTrueBestPelThreshScore);
  }
}

uint64_t BestData::newOrTiedBestNode(uint64_t this, int a2, const Node *a3, HmmNet *a4)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(this + 32) != a2 || *((unsigned __int16 *)a3 + 11) < *(unsigned __int16 *)(this + 22))
  {
    *(_DWORD *)(this + 32) = a2;
    v4 = *(_QWORD *)a3;
    *(_DWORD *)(this + 8) = *((_DWORD *)a3 + 2);
    *(_QWORD *)this = v4;
    v5 = *(_QWORD *)((char *)a3 + 12);
    *(_DWORD *)(this + 20) = *((_DWORD *)a3 + 5);
    *(_QWORD *)(this + 12) = v5;
    *(_QWORD *)(this + 24) = a4;
  }
  return this;
}

uint64_t NetStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3)
    return 0;
  else
    return 100;
}

double NetStats::resetStats(NetStats *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  return result;
}

double NetStats::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return result;
}

int32x2_t NetStats::operator-=(uint64_t a1, uint64_t a2)
{
  int32x2_t result;

  *(int32x2_t *)a1 = vsub_s32(*(int32x2_t *)a1, *(int32x2_t *)a2);
  *(_DWORD *)(a1 + 8) -= *(_DWORD *)(a2 + 8);
  *(int64x2_t *)(a1 + 16) = vsubq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16));
  *(_QWORD *)(a1 + 32) -= *(_QWORD *)(a2 + 32);
  *(int32x4_t *)(a1 + 40) = vsubq_s32(*(int32x4_t *)(a1 + 40), *(int32x4_t *)(a2 + 40));
  *(int32x4_t *)(a1 + 56) = vsubq_s32(*(int32x4_t *)(a1 + 56), *(int32x4_t *)(a2 + 56));
  *(int32x4_t *)(a1 + 72) = vsubq_s32(*(int32x4_t *)(a1 + 72), *(int32x4_t *)(a2 + 72));
  result = vsub_s32(*(int32x2_t *)(a1 + 88), *(int32x2_t *)(a2 + 88));
  *(int32x2_t *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 96) -= *(_QWORD *)(a2 + 96);
  return result;
}

uint64_t NetMgr::NetMgr(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  int v7;

  *(_DWORD *)(a1 + 4) = *a4;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(a1 + 40), 0);
  v7 = *a4;
  HistoryMgr::HistoryMgr(a1 + 56, &v7);
  *(_QWORD *)(a1 + 192) = 0x100000001;
  *(_DWORD *)(a1 + 200) = 1310740000;
  *(_QWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 212) = -65536;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 248) = 20000;
  *(_OWORD *)(a1 + 224) = xmmword_209A7A270;
  *(_QWORD *)(a1 + 240) = 5629499534213140000;
  *(_QWORD *)(a1 + 256) = 0x100000001;
  *(_DWORD *)(a1 + 264) = 1310740000;
  *(_DWORD *)(a1 + 276) = -65536;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 312) = 20000;
  *(_OWORD *)(a1 + 288) = xmmword_209A7A270;
  *(_QWORD *)(a1 + 304) = 5629499534213140000;
  *(_OWORD *)(a1 + 302572) = 0u;
  *(_OWORD *)(a1 + 302544) = 0u;
  *(_OWORD *)(a1 + 302560) = 0u;
  *(_OWORD *)(a1 + 302512) = 0u;
  *(_OWORD *)(a1 + 302528) = 0u;
  *(_OWORD *)(a1 + 302480) = 0u;
  *(_OWORD *)(a1 + 302496) = 0u;
  *(_DWORD *)(a1 + 302688) = 0;
  *(_OWORD *)(a1 + 302656) = 0u;
  *(_OWORD *)(a1 + 302672) = 0u;
  *(_OWORD *)(a1 + 302624) = 0u;
  *(_OWORD *)(a1 + 302640) = 0u;
  *(_OWORD *)(a1 + 302592) = 0u;
  *(_OWORD *)(a1 + 302608) = 0u;
  *(_OWORD *)(a1 + 302696) = 0u;
  *(_OWORD *)(a1 + 302712) = 0u;
  *(_OWORD *)(a1 + 302728) = 0u;
  *(_OWORD *)(a1 + 302744) = 0u;
  *(_OWORD *)(a1 + 302760) = 0u;
  *(_OWORD *)(a1 + 302776) = 0u;
  *(_WORD *)(a1 + 302792) = 0;
  *(_WORD *)(a1 + 302794) = 257;
  *(_QWORD *)(a1 + 302796) = 0x100000001;
  *(_DWORD *)(a1 + 302804) = 1310740000;
  *(_WORD *)(a1 + 302818) = -1;
  *(_WORD *)(a1 + 302816) = 0;
  *(_QWORD *)(a1 + 302808) = 0;
  *(_OWORD *)(a1 + 302904) = 0u;
  *(_OWORD *)(a1 + 302920) = 0u;
  *(_OWORD *)(a1 + 302872) = 0u;
  *(_OWORD *)(a1 + 302888) = 0u;
  *(_OWORD *)(a1 + 302840) = 0u;
  *(_OWORD *)(a1 + 302856) = 0u;
  *(_OWORD *)(a1 + 302824) = 0u;
  DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::DgnIdFactory(a1 + 302936);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_209911F5C(_Unwind_Exception *a1)
{
  BitArray *v1;
  HistoryMgr *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302920);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302904);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302888);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302872);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302856);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302840);
  DgnIArray<Utterance *>::~DgnIArray(v7);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302560);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302544);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302528);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302512);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302496);
  DgnIArray<Utterance *>::~DgnIArray(v4);
  HistoryMgr::~HistoryMgr(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void NetMgr::~NetMgr(NetMgr *this)
{
  DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::~DgnIdFactory((uint64_t)this + 302936);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302920);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302904);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302888);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302872);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302856);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302840);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302824);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302560);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302544);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302528);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302512);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 302496);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302480);
  HistoryMgr::~HistoryMgr((NetMgr *)((char *)this + 56));
  BitArray::~BitArray((NetMgr *)((char *)this + 40));
}

void NetMgr::printSize(NetMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned int *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int v283;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 534, (DgnString *)&v282);
  if (v283)
    v16 = (char *)v282;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v282);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 535, (DgnString *)&v282);
  if (v283)
    v26 = (char *)v282;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 536, (DgnString *)&v282);
  if (v283)
    v31 = (char *)v282;
  else
    v31 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v32 = 4;
  else
    v32 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 537, (DgnString *)&v282);
  if (v283)
    v37 = (char *)v282;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 4;
  else
    v38 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 538, (DgnString *)&v282);
  if (v283)
    v43 = (char *)v282;
  else
    v43 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v43, v38, v38, 0);
  v278 = a3;
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v38;
  *a5 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v44 = 4;
  else
    v44 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 539, (DgnString *)&v282);
  if (v283)
    v49 = (char *)v282;
  else
    v49 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v49, v44, v44, 0);
  v279 = (a3 + 1);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v44;
  *a5 += v44;
  v50 = (unsigned int *)this;
  v51 = (char *)this + 40;
  v52 = PhnIndexSet::sizeObject(v51, 0);
  v53 = PhnIndexSet::sizeObject(v51, 1);
  v54 = PhnIndexSet::sizeObject(v51, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 541, (DgnString *)&v282);
  if (v283)
    v59 = (char *)v282;
  else
    v59 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v279, &byte_209A88803, v21, v21, v59, v52, v53, v54);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v52;
  *a5 += v53;
  *a6 += v54;
  v282 = 0;
  v280 = 0;
  v281 = 0;
  HistoryMgr::printSize((HistoryMgr *)(v50 + 14), 0xFFFFFFFFLL, v279, &v282, &v281, &v280);
  *a4 += v282;
  *a5 += v281;
  *a6 += v280;
  v60 = sizeObject((uint64_t)(v50 + 48), 0);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v61 = 4;
  else
    v61 = 8;
  v62 = v60 + v61 + 26;
  v63 = sizeObject((uint64_t)(v50 + 48), 1);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 4;
  else
    v64 = 8;
  v65 = v63 + v64 + 26;
  v66 = sizeObject((uint64_t)(v50 + 48), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 543, (DgnString *)&v282);
  if (v283)
    v71 = (char *)v282;
  else
    v71 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v279, &byte_209A88803, v21, v21, v71, v62, v65, v66);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v62;
  *a5 += v65;
  *a6 += v66;
  v72 = sizeObject((uint64_t)(v50 + 64), 0);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 4;
  else
    v73 = 8;
  v74 = v72 + v73 + 26;
  v75 = sizeObject((uint64_t)(v50 + 64), 1);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v76 = 4;
  else
    v76 = 8;
  v77 = v75 + v76 + 26;
  v78 = sizeObject((uint64_t)(v50 + 64), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 545, (DgnString *)&v282);
  if (v283)
    v83 = (char *)v282;
  else
    v83 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v279, &byte_209A88803, v21, v21, v83, v74, v77, v78);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v74;
  *a5 += v77;
  *a6 += v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 547, (DgnString *)&v282);
  if (v283)
    v88 = (char *)v282;
  else
    v88 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v279, &byte_209A88803, v21, v21, v88, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 549, (DgnString *)&v282);
  if (v283)
    v93 = (char *)v282;
  else
    v93 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v279, &byte_209A88803, v21, v21, v93, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 551, (DgnString *)&v282);
  if (v283)
    v98 = (char *)v282;
  else
    v98 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v279, &byte_209A88803, v21, v21, v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 553, (DgnString *)&v282);
  if (v283)
    v103 = (char *)v282;
  else
    v103 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v279, &byte_209A88803, v21, v21, v103, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 555, (DgnString *)&v282);
  if (v283)
    v108 = (char *)v282;
  else
    v108 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v279, &byte_209A88803, v21, v21, v108, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 557, (DgnString *)&v282);
  if (v283)
    v113 = (char *)v282;
  else
    v113 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v279, &byte_209A88803, v21, v21, v113, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  v114 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v114 = 16;
  v115 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v115 = 3;
  v116 = v50[75622];
  v117 = ((v50[75623] - v116 + v116) << v115) + v114;
  v118 = (v116 << v115) + v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 559, (DgnString *)&v282);
  if (v283)
    v123 = (char *)v282;
  else
    v123 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v279, &byte_209A88803, v21, v21, v123, v117, v118, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v117;
  *a5 += v118;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v124 = 12;
  else
    v124 = 16;
  v125 = v50[75626];
  v126 = v50[75627];
  if (v126 >= v125)
  {
    v127 = 0;
    if ((int)v125 > 0)
      v124 += 4 * (v125 - 1) + 4;
    v128 = v124 + 4 * (v126 - v125);
  }
  else
  {
    v127 = 4 * v125;
    v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 561, (DgnString *)&v282);
  if (v283)
    v133 = (char *)v282;
  else
    v133 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v279, &byte_209A88803, v21, v21, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v134 = 12;
  else
    v134 = 16;
  v135 = v50[75630];
  v136 = v50[75631];
  if (v136 >= v135)
  {
    v137 = 0;
    if ((int)v135 > 0)
      v134 += 4 * (v135 - 1) + 4;
    v138 = v134 + 4 * (v136 - v135);
  }
  else
  {
    v137 = 4 * v135;
    v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 563, (DgnString *)&v282);
  if (v283)
    v143 = (char *)v282;
  else
    v143 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v279, &byte_209A88803, v21, v21, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v144 = 12;
  else
    v144 = 16;
  v145 = v50[75634];
  v146 = v50[75635];
  v147 = v146 >= v145;
  v148 = v146 - v145;
  if (v147)
  {
    v150 = v145 & ~(v145 >> 31);
    v145 = 0;
    v149 = v144 + v150;
    v144 += v150 + v148;
  }
  else
  {
    v149 = v144;
  }
  v151 = v145;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 565, (DgnString *)&v282);
  if (v283)
    v156 = (char *)v282;
  else
    v156 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v279, &byte_209A88803, v21, v21, v156, v144, v149, v151);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v144;
  *a5 += v149;
  *a6 += v151;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v157 = 12;
  else
    v157 = 16;
  v158 = v50[75638];
  v159 = v50[75639];
  if (v159 >= v158)
  {
    v160 = 0;
    if ((int)v158 > 0)
      v157 = (v157 | 2) + 2 * (v158 - 1);
    v161 = v157 + 2 * (v159 - v158);
  }
  else
  {
    v160 = 2 * v158;
    v161 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 567, (DgnString *)&v282);
  if (v283)
    v166 = (char *)v282;
  else
    v166 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v279, &byte_209A88803, v21, v21, v166, v161, v157, v160);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v161;
  *a5 += v157;
  *a6 += v160;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v167 = 12;
  else
    v167 = 16;
  v168 = v50[75642];
  v169 = v50[75643];
  if (v169 >= v168)
  {
    v170 = 0;
    if ((int)v168 > 0)
      v167 += 4 * (v168 - 1) + 4;
    v171 = v167 + 4 * (v169 - v168);
  }
  else
  {
    v170 = 4 * v168;
    v171 = v167;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 568, (DgnString *)&v282);
  if (v283)
    v176 = (char *)v282;
  else
    v176 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v279, &byte_209A88803, v21, v21, v176, v171, v167, v170);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v171;
  *a5 += v167;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 587, (DgnString *)&v282);
  if (v283)
    v181 = (char *)v282;
  else
    v181 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v279, &byte_209A88803, v21, v21, v181, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 589, (DgnString *)&v282);
  if (v283)
    v186 = (char *)v282;
  else
    v186 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v279, &byte_209A88803, v21, v21, v186, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 590, (DgnString *)&v282);
  if (v283)
    v191 = (char *)v282;
  else
    v191 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v279, &byte_209A88803, v21, v21, v191, 12, 12, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 12;
  *a5 += 12;
  v192 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v192 = 16;
  v193 = v50[75708];
  v194 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v194 = 3;
  v195 = ((v50[75709] - v193 + v193) << v194) + v192;
  v196 = (v193 << v194) + v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 592, (DgnString *)&v282);
  if (v283)
    v201 = (char *)v282;
  else
    v201 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v279, &byte_209A88803, v21, v21, v201, v195, v196, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v195;
  *a5 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v202 = 12;
  else
    v202 = 16;
  v203 = v50[75712];
  v204 = v50[75713];
  if (v204 >= v203)
  {
    v205 = 0;
    if ((int)v203 > 0)
      v202 += 4 * (v203 - 1) + 4;
    v206 = v202 + 4 * (v204 - v203);
  }
  else
  {
    v205 = 4 * v203;
    v206 = v202;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 594, (DgnString *)&v282);
  if (v283)
    v211 = (char *)v282;
  else
    v211 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v207, v208, v209, v210, v279, &byte_209A88803, v21, v21, v211, v206, v202, v205);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v206;
  *a5 += v202;
  *a6 += v205;
  v212 = sizeObject<FrameTypeInfo>((uint64_t)(v50 + 75714), 0);
  v213 = sizeObject<FrameTypeInfo>((uint64_t)(v50 + 75714), 1);
  sizeObject((uint64_t)&v282, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 595, (DgnString *)&v282);
  if (v283)
    v218 = (char *)v282;
  else
    v218 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v214, v215, v216, v217, v279, &byte_209A88803, v21, v21, v218, v212, v213, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v212;
  *a5 += v213;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v219 = 12;
  else
    v219 = 16;
  v220 = v50[75720];
  v221 = v50[75721];
  if (v221 >= v220)
  {
    v222 = 0;
    if ((int)v220 > 0)
      v219 += 4 * (v220 - 1) + 4;
    v223 = v219 + 4 * (v221 - v220);
  }
  else
  {
    v222 = 4 * v220;
    v223 = v219;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 596, (DgnString *)&v282);
  if (v283)
    v228 = (char *)v282;
  else
    v228 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v224, v225, v226, v227, v279, &byte_209A88803, v21, v21, v228, v223, v219, v222);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v223;
  *a5 += v219;
  *a6 += v222;
  v229 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v229 = 16;
  v230 = v50[75724];
  v231 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v231 = 3;
  v232 = ((v50[75725] - v230 + v230) << v231) + v229;
  v233 = (v230 << v231) + v229;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 597, (DgnString *)&v282);
  if (v283)
    v238 = (char *)v282;
  else
    v238 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v234, v235, v236, v237, v279, &byte_209A88803, v21, v21, v238, v232, v233, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v232;
  *a5 += v233;
  v239 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v239 = 16;
  v240 = v50[75728];
  v241 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v241 = 3;
  v242 = ((v50[75729] - v240 + v240) << v241) + v239;
  v243 = (v240 << v241) + v239;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 598, (DgnString *)&v282);
  if (v283)
    v248 = (char *)v282;
  else
    v248 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v244, v245, v246, v247, v279, &byte_209A88803, v21, v21, v248, v242, v243, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v242;
  *a5 += v243;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v249 = 12;
  else
    v249 = 16;
  v250 = v50[75732];
  v251 = v50[75733];
  if (v251 >= v250)
  {
    v252 = 0;
    if ((int)v250 > 0)
      v249 += 4 * (v250 - 1) + 4;
    v253 = v249 + 4 * (v251 - v250);
  }
  else
  {
    v252 = 4 * v250;
    v253 = v249;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 599, (DgnString *)&v282);
  if (v283)
    v258 = (char *)v282;
  else
    v258 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v254, v255, v256, v257, v279, &byte_209A88803, v21, v21, v258, v253, v249, v252);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v253;
  *a5 += v249;
  *a6 += v252;
  v259 = v50[75736];
  v260 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v260 = 3;
  v261 = v259 << v260;
  v262 = (v50[75737] - v259 + v259) << v260;
  v263 = v50[75740] * v259;
  v264 = 28;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v264 = 36;
  v265 = v264 + v263;
  v266 = v265 + v262;
  v267 = v265 + v261;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 601, (DgnString *)&v282);
  if (v283)
    v272 = (char *)v282;
  else
    v272 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v279, &byte_209A88803, v21, v21, v272, v266, v267, v263);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v266;
  *a5 += v267;
  *a6 += v263;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 602, (DgnString *)&v282);
  if (v283)
    v277 = (char *)v282;
  else
    v277 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v273, v274, v275, v276, v278, &byte_209A88803, (35 - v278), (35 - v278), v277, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v282);
}

void sub_2099134C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

double NetMgr::addEmptyNet(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = MemChunkAlloc(0xA0uLL, 0);
  return EmptyNet::EmptyNet((uint64_t)v4, a1, a2);
}

uint64_t NetMgr::addSilNet(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
      v4 = MemChunkAlloc(0xC0uLL, 0);
      result = AcousticNet::AcousticNet((uint64_t)v4, a1, a2, 1, 0, 0, 0, 0);
      *(_QWORD *)result = &off_24C219238;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      return result;
    case 1:
      v6 = MemChunkAlloc(0xC0uLL, 0);
      result = AcousticNet::AcousticNet((uint64_t)v6, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      goto LABEL_7;
    case 2:
      v8 = MemChunkAlloc(0xC0uLL, 0);
      result = AcousticNet::AcousticNet((uint64_t)v8, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      goto LABEL_7;
    case 3:
      v9 = MemChunkAlloc(0xC0uLL, 0);
      result = AcousticNet::AcousticNet((uint64_t)v9, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
LABEL_7:
      *(_QWORD *)result = v7 + 16;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

int32x2_t NetMgr::addNonSilNet(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  int32x2_t result;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;

  v9 = a7;
  if (a5 == 1)
    v13 = 4;
  else
    v13 = 3;
  if (a3)
    v14 = v13;
  else
    v14 = 2;
  if (a6)
  {
    v15 = a7 / a6;
    v9 = a7 % a6;
  }
  else
  {
    v15 = 0;
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
      v16 = *(_DWORD *)(a1 + 12);
      if (v16)
      {
        if (v16 == 1)
        {
          if (v14 == 4)
          {
            v26 = MemChunkAlloc(0x120uLL, 0);
            v20 = BaseSyncNet::BaseSyncNet((uint64_t)v26, a1, a2, 4, 1, v15, v9, a4, a8);
            goto LABEL_20;
          }
          if (v14 == 3)
          {
            v27 = MemChunkAlloc(0x170uLL, 0);
            return SyncNet::SyncNet((uint64_t)v27, a1, a2, 3, v15, v9, a4, a8);
          }
          else
          {
            v17 = MemChunkAlloc(0x130uLL, 0);
            NonCoartSyncNet::NonCoartSyncNet((uint64_t)v17, a1, a2, 2, v15, v9, a4, a8);
          }
        }
      }
      else
      {
        v24 = MemChunkAlloc(0xC0uLL, 0);
        v25 = AcousticNet::AcousticNet((uint64_t)v24, a1, a2, v14, 0, v15, v9, a8);
        *(_QWORD *)v25 = &off_24C219238;
        result = 0;
        *(_OWORD *)(v25 + 160) = 0u;
        *(_OWORD *)(v25 + 176) = 0u;
      }
      return result;
    case 1:
      v22 = MemChunkAlloc(0xC0uLL, 0);
      v20 = AcousticNet::AcousticNet((uint64_t)v22, a1, a2, v14, 0, v15, v9, a8);
      result = 0;
      *(_OWORD *)(v20 + 160) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
      goto LABEL_20;
    case 2:
      v19 = MemChunkAlloc(0xC0uLL, 0);
      v20 = AcousticNet::AcousticNet((uint64_t)v19, a1, a2, v14, 0, 0, 0, a8);
      result = 0;
      *(_OWORD *)(v20 + 160) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
      goto LABEL_20;
    case 3:
      v23 = MemChunkAlloc(0xC0uLL, 0);
      v20 = AcousticNet::AcousticNet((uint64_t)v23, a1, a2, v14, 0, 0, 0, a8);
      result = 0;
      *(_OWORD *)(v20 + 160) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
LABEL_20:
      *(_QWORD *)v20 = v21 + 16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NetMgr::removeNet(NetMgr *this, HmmNet *a2)
{
  uint64_t result;

  if (a2)
  {
    (**(void (***)(HmmNet *))a2)(a2);
    return MemChunkFree(a2, 0);
  }
  return result;
}

void NetMgr::beginNetMgrSyncRecog(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v12 = a1 + 302472;
  HistoryMgr::beginHistoryMgrSyncRecog((HistoryMgr *)(a1 + 56));
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(v12 + 104) = 0;
  *(_DWORD *)(v12 + 112) = 0;
  *(_OWORD *)(a1 + 302696) = 0u;
  *(_OWORD *)(a1 + 302712) = 0u;
  *(_OWORD *)(a1 + 302728) = 0u;
  *(_OWORD *)(a1 + 302744) = 0u;
  *(_OWORD *)(a1 + 302760) = 0u;
  *(_QWORD *)(a1 + 302776) = 0;
  *(_OWORD *)(a1 + 302592) = 0u;
  *(_OWORD *)(a1 + 302608) = 0u;
  *(_OWORD *)(a1 + 302624) = 0u;
  *(_OWORD *)(a1 + 302640) = 0u;
  *(_OWORD *)(a1 + 302656) = 0u;
  *(_OWORD *)(a1 + 302672) = 0u;
  *(_DWORD *)(a1 + 302688) = 0;
  if (a2)
    v13 = **a2;
  else
    v13 = 1;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v16, v13);
  v14 = v16[0];
  *(_DWORD *)v16[0] |= 1u;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
    *(_DWORD *)(v14 + (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)v15 + 56) >> 3) & 0x1FFC)) |= 1 << *(_WORD *)(*(_QWORD *)v15 + 56);
  BitArray::operator=((int **)(a1 + 40), (uint64_t)v16);
  *(_WORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_209A7A270;
  *(_DWORD *)(a1 + 240) = 20000;
  *(_QWORD *)(a1 + 256) = 0x100000001;
  *(_DWORD *)(a1 + 264) = 1310740000;
  *(_DWORD *)(a1 + 276) = -65536;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 312) = 20000;
  *(_OWORD *)(a1 + 288) = xmmword_209A7A270;
  *(_QWORD *)(a1 + 304) = 5629499534213140000;
  bzero((void *)(a1 + 320), 0x49C48uLL);
  *(_DWORD *)v12 = a6;
  *(_DWORD *)(v12 + 4) = a5;
  *(_QWORD *)(a1 + 192) = 0x100000001;
  *(_DWORD *)(a1 + 200) = 1310740000;
  *(_QWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 212) = -65536;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 246) = 1310740000;
  BitArray::~BitArray((BitArray *)v16);
}

void sub_209913B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *NetMgr::endNetMgrSyncRecog(NetMgr *this)
{
  *((_QWORD *)this + 37822) = 0;
  *((_DWORD *)this + 75646) = 0;
  *(_OWORD *)((char *)this + 302696) = 0u;
  *(_OWORD *)((char *)this + 302712) = 0u;
  *(_OWORD *)((char *)this + 302728) = 0u;
  *(_OWORD *)((char *)this + 302744) = 0u;
  *(_OWORD *)((char *)this + 302760) = 0u;
  *((_QWORD *)this + 37847) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 18912) = 0u;
  *((_OWORD *)this + 18913) = 0u;
  *((_OWORD *)this + 18914) = 0u;
  *((_OWORD *)this + 18915) = 0u;
  *((_OWORD *)this + 18916) = 0u;
  *((_OWORD *)this + 18917) = 0u;
  *((_DWORD *)this + 75672) = 0;
  return HistoryMgr::beginHistoryMgrSyncRecog((NetMgr *)((char *)this + 56));
}

int32x2_t NetMgr::beginNetMgrFrame(NetMgr *this, int a2)
{
  int v2;
  int32x2_t result;

  v2 = *((_DWORD *)this + 58);
  if (v2 != a2)
  {
    *((_QWORD *)this + 32) = *((_QWORD *)this + 24);
    *((_DWORD *)this + 66) = *((_DWORD *)this + 50);
    *(_QWORD *)((char *)this + 268) = *(_QWORD *)((char *)this + 204);
    *((_DWORD *)this + 69) = *((_DWORD *)this + 53);
    *((_QWORD *)this + 35) = *((_QWORD *)this + 27);
    *((_DWORD *)this + 77) = *((_DWORD *)this + 61);
    *((_WORD *)this + 156) = *((_WORD *)this + 124);
    *((_DWORD *)this + 74) = v2;
    *((_QWORD *)this + 36) = *((_QWORD *)this + 28);
    *(_QWORD *)((char *)this + 300) = *(_QWORD *)((char *)this + 236);
    *((_QWORD *)this + 24) = 0x100000001;
    *((_DWORD *)this + 50) = 1310740000;
    *((_DWORD *)this + 53) = -65536;
    *(_QWORD *)((char *)this + 204) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 61) = 1310720000;
    *((_WORD *)this + 124) = 20000;
    *((_QWORD *)this + 28) = 20000;
    result = vdup_n_s32(0x4E20u);
    *(int32x2_t *)((char *)this + 236) = result;
    *((_DWORD *)this + 58) = a2;
  }
  return result;
}

uint64_t NetMgr::normalizeBestAndComputeEstimatedThresh(NetMgr *this, int a2, int a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t BestDataMaybeShadow;
  int v15;
  uint64_t v16;
  BOOL v18;
  int v19;
  int v20;

  *((_QWORD *)this + 24) = 0x100000001;
  *((_DWORD *)this + 50) = 1310740000;
  *(_QWORD *)((char *)this + 204) = 0;
  *((_DWORD *)this + 53) = -65536;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 20000;
  *(int32x2_t *)((char *)this + 236) = vdup_n_s32(0x4E20u);
  *((_DWORD *)this + 61) = 1310720000;
  if (a2 == -16)
  {
    LOWORD(v8) = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    *((_DWORD *)this + 57) = 0;
    v12 = 0xFFFFLL;
    v13 = 20000;
  }
  else
  {
    v13 = *((_DWORD *)this + 72);
    if (v13 == 20000)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0xFFFFLL;
    }
    else
    {
      v12 = *((unsigned __int16 *)this + 139);
      v10 = *((int *)this + 67) >> 8;
      v11 = *((unsigned __int8 *)this + 276);
    }
    v20 = 0;
    BestDataMaybeShadow = NetMgr::getBestDataMaybeShadow(this, 0, &v20, &v19, &v18);
    v9 = *((_DWORD *)this + 73);
    *((_DWORD *)this + 57) = v9;
    v15 = *(_DWORD *)(BestDataMaybeShadow + 32);
    if (v15 == 20000)
    {
      LOWORD(v8) = 0;
    }
    else
    {
      v8 = v15 - v9 + v20 + *(_DWORD *)(BestDataMaybeShadow + 36);
      *((_WORD *)this + 122) = v8;
      v9 += (__int16)v8;
      *((_DWORD *)this + 57) = v9;
    }
  }
  *a4 = v9;
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    *(_DWORD *)(v16 + 256) = (__int16)v8;
    a3 = NetMgr::computeEstimatedThreshThisFrame(this, a2, v12, v10, v11, v13, a3);
  }
  if (a3 >= 5000)
    return 5000;
  else
    return a3;
}

uint64_t NetMgr::getBestDataMaybeShadow(NetMgr *this, int a2, int *a3, int *a4, BOOL *a5)
{
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v5 = (char *)this + 302480;
  v6 = 256;
  if (a2)
    v6 = 192;
  result = (uint64_t)this + v6;
  v8 = *((unsigned int *)v5 + 2);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *((_QWORD *)v5 + 2);
    do
    {
      v14 = *(_DWORD *)(v13 + 4 * v9);
      if (v14 != 20000)
      {
        if (a2)
          v15 = 192;
        else
          v15 = 256;
        v16 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) + v15;
        v17 = *(_DWORD *)(v16 + 32);
        if (v17 != 20000)
        {
          v18 = *(_DWORD *)(result + 32);
          if (v18 == 20000 || v17 + v14 + *(_DWORD *)(v16 + 36) < v18 + v12 + *(_DWORD *)(result + 36))
          {
            v11 = *(_DWORD *)(*((_QWORD *)v5 + 4) + 4 * v9);
            v10 = *(_BYTE *)(*((_QWORD *)v5 + 6) + v9) != 0;
            v12 = *(_DWORD *)(v13 + 4 * v9);
            result = v16;
          }
        }
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
  }
  *a3 = v12;
  *a4 = v11;
  *a5 = v10;
  return result;
}

uint64_t NetMgr::computeEstimatedThreshThisFrame(NetMgr *this, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  PelScoreCache *v8;
  int ScoreNoBackoff;
  int v12;
  int v13;
  int v14;

  if (a2 == -16)
  {
    v8 = (PelScoreCache *)*((_QWORD *)this + 3);
LABEL_4:
    ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(v8, 0);
    return (ScoreNoBackoff + a7);
  }
  v8 = (PelScoreCache *)*((_QWORD *)this + 3);
  if (a6 == 20000)
    goto LABEL_4;
  v12 = PelScoreCache::getScoreNoBackoff(v8, a3) + a6;
  if (-a5 > a4)
    v13 = -a5;
  else
    v13 = a4;
  v14 = v12 - v13;
  if (a4 < 0)
    ScoreNoBackoff = v14;
  else
    ScoreNoBackoff = v12;
  return (ScoreNoBackoff + a7);
}

uint64_t NetMgr::computeThreshScore(NetMgr *this, int a2, int a3, __int16 a4, int a5, unsigned int *a6, unint64_t *a7)
{
  char *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t BestDataMaybeShadow;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v38;
  int v39;
  int v40;
  BOOL v42;
  int v43[2];

  v12 = (char *)this + 302464;
  if (*((_DWORD *)this + 75618))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (2)
    {
      v17 = 37768 - v13;
      v18 = v13 - 5000;
      v19 = (_DWORD *)((char *)this + 4 * v13++ + 320);
      while (*v19)
      {
        v14 += *v19;
        *v19 = 0;
        if (!v15)
        {
          v15 = v14 >= *((_DWORD *)v12 + 2);
          if (v14 >= *((_DWORD *)v12 + 2))
            v16 = v18;
          break;
        }
        ++v13;
        ++v18;
        ++v19;
        v15 = 1;
        if (!--v17)
          goto LABEL_12;
      }
      if (v17 != 1)
        continue;
      break;
    }
    if (v15)
LABEL_12:
      *((_DWORD *)this + 59) = v16;
  }
  if (*((_DWORD *)v12 + 3))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (2)
    {
      v24 = 37768 - v20;
      v25 = v20 - 5000;
      v26 = (_DWORD *)((char *)this + 4 * v20++ + 151392);
      while (*v26)
      {
        v23 += *v26;
        *v26 = 0;
        if (!v21)
        {
          v21 = v23 >= *((_DWORD *)v12 + 3);
          if (v23 >= *((_DWORD *)v12 + 3))
            v22 = v25;
          break;
        }
        ++v20;
        ++v25;
        ++v26;
        v21 = 1;
        if (!--v24)
          goto LABEL_24;
      }
      if (v24 != 1)
        continue;
      break;
    }
    if (v21)
LABEL_24:
      *((_DWORD *)this + 60) = v22;
  }
  if (a6)
  {
    v27 = *a6;
    if (*a6 <= *((_DWORD *)v12 + 1))
      v27 = *((_DWORD *)v12 + 1);
    *a6 = v27;
  }
  if (a7)
    *a7 += *((unsigned int *)v12 + 1);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)v43 = 0;
  v42 = 0;
  BestDataMaybeShadow = NetMgr::getBestDataMaybeShadow(this, 1, &v43[1], v43, &v42);
  v29 = *(_DWORD *)(BestDataMaybeShadow + 32);
  if (v29 == 20000)
  {
    v43[0] = 0;
    v30 = a3 + a2;
    v31 = a3 + a2;
LABEL_37:
    v33 = v30 - a3;
    goto LABEL_38;
  }
  v31 = a3 + a2;
  v30 = v29 + a3 + a2 + v43[1];
  if (v42)
    v32 = *(unsigned __int16 *)(BestDataMaybeShadow + 22);
  else
    v32 = *((unsigned __int16 *)this + 107);
  v33 = v29 + v31 + v43[1];
  if (!v32)
    goto LABEL_37;
LABEL_38:
  v34 = *((_DWORD *)this + 59);
  v35 = *((_DWORD *)this + 60);
  if (v34 < v33 && v34 != 20000)
    v33 = *((_DWORD *)this + 59);
  if (v35 < v33 && v35 != 20000)
    v33 = *((_DWORD *)this + 60);
  if (v43[0] == 20000)
    v38 = 5000;
  else
    v38 = (__int16)(v30 - a4 + LOWORD(v43[0]));
  if (v33 < v38)
    LOWORD(v38) = v33;
  *((_WORD *)this + 124) = v38;
  if (v29 != 20000)
  {
    v39 = *((__int16 *)this + 123);
    if (v39 != 20000)
    {
      v40 = v31 - a5 + v39;
      if ((__int16)v38 < v40)
        LOWORD(v40) = v38;
      *((_WORD *)this + 124) = v40;
    }
  }
  if (v33 >= 5000)
    return 5000;
  else
    return v33;
}

int32x2_t NetMgr::adjustBestForBWBack(NetMgr *this, int a2, int a3, int *a4)
{
  _QWORD *v4;
  int32x2_t result;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  *((_QWORD *)this + 24) = 0x100000001;
  *((_DWORD *)this + 50) = 1310740000;
  *(_QWORD *)((char *)this + 204) = 0;
  v4 = (_QWORD *)((char *)this + 204);
  *((_DWORD *)this + 53) = -65536;
  *((_QWORD *)this + 27) = 0;
  result = vdup_n_s32(0x4E20u);
  *(int32x2_t *)((char *)this + 236) = result;
  *((_DWORD *)this + 61) = 1310720000;
  if (a3 == -16)
  {
    v6 = 0;
    v7 = 0;
    *((_DWORD *)this + 57) = 0;
  }
  else
  {
    v7 = *((_DWORD *)this + 73);
    *((_DWORD *)this + 57) = v7;
    v8 = *((_DWORD *)this + 72);
    if (v8 == 20000)
    {
      v6 = 0;
    }
    else
    {
      *((_WORD *)this + 122) = v8;
      *((_DWORD *)this + 50) = *((_DWORD *)this + 66);
      v6 = (__int16)v8;
      v7 += (__int16)v8;
      *((_QWORD *)this + 24) = *((_QWORD *)this + 32);
      *((_DWORD *)this + 53) = *((_DWORD *)this + 69);
      *v4 = *(_QWORD *)((char *)this + 268);
      *((_QWORD *)this + 27) = *((_QWORD *)this + 35);
      *((_WORD *)this + 101) = 20000;
      *((_DWORD *)this + 56) = 20000;
      *((_DWORD *)this + 57) = v7;
    }
  }
  *a4 = v7;
  v9 = *((_QWORD *)this + 3);
  if (v9)
    *(_DWORD *)(v9 + 256) = v6;
  if (a2)
  {
    result = (int32x2_t)0x100000001;
    *((_QWORD *)this + 24) = 0x100000001;
    *((_DWORD *)this + 50) = 1310740000;
    *((_WORD *)this + 107) = -1;
    *v4 = 0;
    *((_WORD *)this + 106) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_WORD *)this + 123) = 20000;
  }
  return result;
}

unint64_t NetMgr::shadowBest(unint64_t this, NetMgr *a2, int a3, int a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v9 = this + 302480;
  v10 = *(unsigned int *)(this + 302488);
  if (!(_DWORD)v10)
    goto LABEL_7;
  v11 = 0;
  while (*(NetMgr **)(*(_QWORD *)v9 + 8 * v11) != a2)
  {
    if (v10 == ++v11)
      goto LABEL_7;
  }
  *(_DWORD *)(*(_QWORD *)(this + 302496) + 4 * v11) = a3;
  *(_DWORD *)(*(_QWORD *)(this + 302512) + 4 * v11) = a4;
  *(_BYTE *)(*(_QWORD *)(this + 302528) + v11) = a5;
  LODWORD(v10) = *(_DWORD *)(this + 302488);
  if ((_DWORD)v10 == (_DWORD)v11)
  {
LABEL_7:
    if ((_DWORD)v10 == *(_DWORD *)(this + 302492))
    {
      this = DgnPrimArray<unsigned long long>::reallocElts(this + 302480, 1, 1);
      LODWORD(v10) = *(_DWORD *)(v9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = a2;
    *(_DWORD *)(v9 + 8) = v10 + 1;
    v12 = *(_DWORD *)(v9 + 24);
    if (v12 == *(_DWORD *)(v9 + 28))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v9 + 16, 1, 1);
      v12 = *(_DWORD *)(v9 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * v12) = a3;
    ++*(_DWORD *)(v9 + 24);
    v13 = *(_DWORD *)(v9 + 40);
    if (v13 == *(_DWORD *)(v9 + 44))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v9 + 32, 1, 1);
      v13 = *(_DWORD *)(v9 + 40);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * v13) = a4;
    ++*(_DWORD *)(v9 + 40);
    v14 = *(_DWORD *)(v9 + 56);
    if (v14 == *(_DWORD *)(v9 + 60))
    {
      this = DgnPrimArray<char>::reallocElts(v9 + 48, 1, 1);
      v14 = *(_DWORD *)(v9 + 56);
    }
    *(_BYTE *)(*(_QWORD *)(v9 + 48) + v14) = a5;
    *(_DWORD *)(v9 + 56) = v14 + 1;
  }
  return this;
}

uint64_t NetMgr::estimateActivePelsPrevFrame(uint64_t this, BitArray *a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_DWORD **)a2;
  **(_DWORD **)a2 |= 1u;
  v3 = *(unsigned __int16 *)(this + 278);
  if ((_DWORD)v3 != 0xFFFF)
    *(_DWORD *)((char *)v2 + ((v3 >> 3) & 0x1FFC)) |= 1 << v3;
  v4 = *(unsigned __int16 *)(this + 214);
  if ((_DWORD)v4 != 0xFFFF)
    *(_DWORD *)((char *)v2 + ((v4 >> 3) & 0x1FFC)) |= 1 << v4;
  return this;
}

double EmptyNet::EmptyNet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  uint64_t v4;

  HmmNet::HmmNet(a1, a2, a3, 0, 1, 0);
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v4 + 116) = 0x100000001;
  *(_DWORD *)(v4 + 124) = 1310740000;
  *(_QWORD *)v4 = &unk_24C219518;
  *(_QWORD *)(v4 + 128) = 0x100000001;
  *(_DWORD *)(v4 + 136) = 1310740000;
  *(_QWORD *)(v4 + 140) = 0;
  *(_DWORD *)(v4 + 148) = -65536;
  *(_BYTE *)(v4 + 152) = 0;
  return result;
}

uint64_t NonCoartSyncNet::NonCoartSyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9;

  v9 = BaseSyncNet::BaseSyncNet(a1, a2, a3, a4, 1, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 288) = 0x100000001;
  *(_DWORD *)(v9 + 296) = 1310740000;
  *(_QWORD *)v9 = &unk_24C215040;
  if (!*(_DWORD *)(v9 + 228))
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 0);
  return a1;
}

void sub_209914540(_Unwind_Exception *a1, Sequence *a2)
{
  BaseSyncNet *v2;

  BaseSyncNet::~BaseSyncNet(v2, a2);
  _Unwind_Resume(a1);
}

int32x2_t SyncNet::SyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int32x2_t result;

  v8 = BaseSyncNet::BaseSyncNet(a1, a2, a3, a4, 0, a5, a6, a7, a8);
  *(_QWORD *)v8 = &off_24C2193B0;
  *(_QWORD *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 328) = 0x100000001;
  *(_DWORD *)(v8 + 336) = 1310740000;
  *(_QWORD *)(v8 + 340) = 0;
  result = vdup_n_s32(0x4E20u);
  *(_DWORD *)(v8 + 348) = -65536;
  *(int32x2_t *)(v8 + 352) = result;
  *(_DWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 288) = 0;
  return result;
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::DgnIdFactory(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = MemChunkSuggestAllocExtraItems(0xFFC00uLL, 0x10uLL, 0);
  *(_DWORD *)(a1 + 24) = 16 * (v2 + 65472);
  *(_QWORD *)(a1 + 28) = (v2 + 65472);
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_209914624(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::~DgnIdFactory(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
    {
      v4 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v3 - 2));
      if (v4)
        MemChunkFree(v4, 0);
      --v3;
    }
    while (v3 > 1);
  }
  return DgnIArray<Utterance *>::~DgnIArray(a1);
}

void MrecInitModule_nbchoice_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowConfidence)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowConfidence", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowConfidence = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowConfidence);
  }
}

uint64_t NBestChoice::NBestChoice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 36) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  DgnArray<WordLatticeLC>::copyArraySlice(a1, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  return a1;
}

void sub_209914770(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnArray<WordLatticeLC>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void NBestChoice::~NBestChoice(NBestChoice *this)
{
  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 2));
  DgnDelete<DgnArray<Germ>>(*((_QWORD *)this + 3));
  DgnArray<WordLatticeLC>::releaseAll((uint64_t)this);
}

void NBestChoiceList::printSize(NBestChoiceList *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1085, (DgnString *)&v51);
  if (v52)
    v16 = v51;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v51);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = sizeObject<NBestChoice *>((uint64_t)this, 0);
  v22 = sizeObject<NBestChoice *>((uint64_t)this, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1086, (DgnString *)&v51);
  if (v52)
    v27 = v51;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1088, (DgnString *)&v51);
  if (v52)
    v32 = v51;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1090, (DgnString *)&v51);
  if (v52)
    v37 = v51;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += 4;
  *a5 += 4;
  v38 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 8;
  v39 = 248;
  if (!*((_QWORD *)this + 3))
    v39 = 0;
  v40 = v39 + v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1092, (DgnString *)&v51);
  if (v52)
    v45 = v51;
  else
    v45 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v45, v40, v40, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v40;
  *a5 += v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1093, (DgnString *)&v51);
  if (v52)
    v50 = v51;
  else
    v50 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, a3, &byte_209A88803, (35 - a3), (35 - a3), v50, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_209914AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<NBestChoice *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<WordLatticeLC>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  int v11;
  __int128 v12;
  _BYTE v13[28];
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;

  v11 = -16;
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 1879048192;
  v15 = 0;
  v16 = -1;
  v10[0] = &off_24C2149F8;
  v10[1] = 0xBFF0000000000000;
  v17 = 0x3FFF;
  v18 = xmmword_209A593D0;
  v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 112 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v10);
  return v5;
}

void sub_209914E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a9);
  _Unwind_Resume(a1);
}

unint64_t DgnArray<WordConfidenceInfo>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 696 * v6, 696 * v5, 696 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x2B8;
  *(_QWORD *)a1 = v8;
  return result;
}

_QWORD *DgnArray<WordLatticeLC>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 112 * v2 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a1 + v3))(*(_QWORD *)a1 + v3);
      v3 -= 112;
    }
    while (v3 != -112);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void DgnArray<WordLatticeLC>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a1 + v9))(*(_QWORD *)a1 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<WordLatticeLC>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a1 + 112 * v12), (const WordLatticeLC *)(*a2 + 112 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 112 * (int)v12 - 112;
      do
      {
        --v14;
        (**(void (***)(uint64_t))(*(_QWORD *)a1 + v15))(*(_QWORD *)a1 + v15);
        v15 -= 112;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v16 = a4 - (unint64_t)v12;
    v17 = 112 * v12 + 96;
    do
    {
      v18 = (_OWORD *)(*(_QWORD *)a1 + v17);
      *((_DWORD *)v18 - 20) = -16;
      *(_OWORD *)((char *)v18 - 76) = 0uLL;
      *(_OWORD *)((char *)v18 - 60) = 0uLL;
      *(v18 - 3) = 0uLL;
      *((_QWORD *)v18 - 4) = 1879048192;
      *((_DWORD *)v18 - 6) = 0;
      *((_QWORD *)v18 - 2) = -1;
      *((_QWORD *)v18 - 12) = &off_24C2149F8;
      *((_QWORD *)v18 - 11) = 0xBFF0000000000000;
      *((_DWORD *)v18 - 1) = 0x3FFF;
      *v18 = xmmword_209A593D0;
      v17 += 112;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void DgnArray<WordConfidenceInfo>::copyArraySlice(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    DgnArray<WordConfidenceInfo>::reallocElts(a1, a4 - v8, 0);
    v9 = *(_DWORD *)(a1 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    memcpy((void *)(*(_QWORD *)a1 + 696 * v10), (const void *)(*a2 + 696 * a3), 0x2B8uLL);
    v10 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v12 = a4 - (unint64_t)v10;
    v13 = 696 * v10;
    do
    {
      bzero((void *)(*(_QWORD *)a1 + v13), 0x2B8uLL);
      v13 += 696;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 8) = a4;
}

uint64_t sizeObject<WordConfidenceInfo>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = 680 * v3;
    if (v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 680 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

void MrecInitModule_multilm_lm(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugLMInterpolationWeights)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLMInterpolationWeights", (const char *)&unk_209A7A2E0, (const char *)&unk_209A7A2E0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugLMInterpolationWeights = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLMInterpolationWeights);
  }
}

void MultiLanguageModel::MultiLanguageModel(MultiLanguageModel *this, int a2, const WordList *a3)
{
  uint64_t v4;

  LanguageModel::LanguageModel(this, a2, a3);
  *(_QWORD *)v4 = &off_24C216630;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_DWORD *)(v4 + 116) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 99) = 0u;
  DgnString::DgnString((DgnString *)(v4 + 120));
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0x10000001DLL;
  *((_DWORD *)this + 60) = 1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 35) = -1;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 140) = -1;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 79) = 0xFFFFFFFFFFFFLL;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *(_OWORD *)((char *)this + 700) = 0u;
}

void sub_209915394(_Unwind_Exception *a1)
{
  RecentBuffer **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DgnArray<DgnString>::releaseAll((uint64_t)(v1 + 12));
  DgnArray<DgnString>::releaseAll(v4);
  DgnIArray<Utterance *>::~DgnIArray(v3);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v2);
  LanguageModel::~LanguageModel(v1);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::~MultiLanguageModel(RecentBuffer **this)
{
  *this = (RecentBuffer *)&off_24C216630;
  DgnDelete<RecentBuffer>(this[1]);
  this[1] = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 86));
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)(this + 84));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 80));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 75));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 73));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 71));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 68));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 66));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 56));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 54));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 52));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 50));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 48));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 46));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 44));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 42));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 40));
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)(this + 38));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 36));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 31));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 27));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 25));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 23));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnString::~DgnString((DgnString *)(this + 15));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 12));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 10));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 8));
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)(this + 5));
  LanguageModel::~LanguageModel(this);
}

{
  MultiLanguageModel::~MultiLanguageModel(this);
  JUMPOUT(0x20BD149A8);
}

RecentBuffer *DgnDelete<RecentBuffer>(RecentBuffer *result)
{
  _QWORD *v1;

  if (result)
  {
    RecentBuffer::~RecentBuffer(result);
    return (RecentBuffer *)MemChunkFree(v1, 0);
  }
  return result;
}

void MultiLanguageModel::printSize(MultiLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  int v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 542, (DgnString *)&v410);
  if ((_DWORD)v411)
    v16 = (void *)v410;
  else
    v16 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7A2E0, a3, &unk_209A7A2E0, v16);
  DgnString::~DgnString((DgnString *)&v410);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7A2E0);
  v410 = 0;
  v408 = 0;
  v409 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v410, &v409, &v408);
  *a4 += v410;
  *a5 += v409;
  *a6 += v408;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 546, (DgnString *)&v410);
  if ((_DWORD)v411)
    v25 = (void *)v410;
  else
    v25 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_209A7A2E0, (a3 + 1), &unk_209A7A2E0, v25);
  v26 = a3;
  DgnString::~DgnString((DgnString *)&v410);
  v407 = (a3 + 1);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v27, v28, v29, v30, v407, &unk_209A7A2E0);
  v31 = *((unsigned int *)this + 12);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v36 + 8 * v32))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v36 + 8 * v32) + 16))(*(_QWORD *)(v36 + 8 * v32), v32, (v26 + 2), &v410, &v409, &v408);
        v35 += v410;
        v34 += v409;
        v33 += v408;
        v31 = *((unsigned int *)this + 12);
      }
      ++v32;
    }
    while (v32 < v31);
  }
  else
  {
    v35 = 0;
    v34 = 0;
    v33 = 0;
    v31 = 0;
  }
  v37 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 16;
  v38 = v37 + v35;
  v39 = v37 + v34;
  v40 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v40 = 3;
  v41 = v38 + ((unint64_t)*((unsigned int *)this + 13) << v40);
  v42 = v39 + (v31 << v40);
  v43 = (34 - v26);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 546, (DgnString *)&v410);
  if ((_DWORD)v411)
    v48 = (void *)v410;
  else
    v48 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v407, &unk_209A7A2E0, v43, v43, v48, v41, v42, v33);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v41;
  *a5 += v42;
  *a6 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v49 = 4;
  else
    v49 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 548, (DgnString *)&v410);
  if ((_DWORD)v411)
    v54 = (void *)v410;
  else
    v54 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v407, &unk_209A7A2E0, v43, v43, v54, v49, v49, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v49;
  *a5 += v49;
  v55 = sizeObject<DgnString>((uint64_t)this + 80, 0);
  v56 = sizeObject<DgnString>((uint64_t)this + 80, 1);
  v57 = sizeObject<DgnString>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 550, (DgnString *)&v410);
  if ((_DWORD)v411)
    v62 = (void *)v410;
  else
    v62 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v407, &unk_209A7A2E0, v43, v43, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  v63 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  v64 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  v65 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 552, (DgnString *)&v410);
  if ((_DWORD)v411)
    v70 = (void *)v410;
  else
    v70 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v407, &unk_209A7A2E0, v43, v43, v70, v63, v64, v65);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v63;
  *a5 += v64;
  *a6 += v65;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v71 = 12;
  else
    v71 = 16;
  v72 = *((unsigned int *)this + 36);
  v73 = *((_DWORD *)this + 37);
  if (v73 >= v72)
  {
    v74 = 0;
    if ((int)v72 > 0)
      v71 += 4 * (v72 - 1) + 4;
    v75 = v71 + 4 * (v73 - v72);
  }
  else
  {
    v74 = 4 * v72;
    v75 = v71;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 554, (DgnString *)&v410);
  if ((_DWORD)v411)
    v80 = (void *)v410;
  else
    v80 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v407, &unk_209A7A2E0, v43, v43, v80, v75, v71, v74);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v75;
  *a5 += v71;
  *a6 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v85 = (void *)v410;
  else
    v85 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v407, &unk_209A7A2E0, v43, v43, v85, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v90 = (void *)v410;
  else
    v90 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v407, &unk_209A7A2E0, v43, v43, v90, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v95 = (void *)v410;
  else
    v95 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v407, &unk_209A7A2E0, v43, v43, v95, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v100 = (void *)v410;
  else
    v100 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v407, &unk_209A7A2E0, v43, v43, v100, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  v101 = sizeObject((char *)this + 120);
  v102 = sizeObject((char *)this + 120);
  v103 = sizeObject((char *)this + 120);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v108 = (void *)v410;
  else
    v108 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v407, &unk_209A7A2E0, v43, v43, v108, v101, v102, v103);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v101;
  *a5 += v102;
  *a6 += v103;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v113 = (void *)v410;
  else
    v113 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v407, &unk_209A7A2E0, v43, v43, v113, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v118 = (void *)v410;
  else
    v118 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v407, &unk_209A7A2E0, v43, v43, v118, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v123 = (void *)v410;
  else
    v123 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v407, &unk_209A7A2E0, v43, v43, v123, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  v124 = sizeObject<DgnString>((uint64_t)this + 168, 0);
  v125 = sizeObject<DgnString>((uint64_t)this + 168, 1);
  v126 = sizeObject<DgnString>((uint64_t)this + 168, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v131 = (void *)v410;
  else
    v131 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v407, &unk_209A7A2E0, v43, v43, v131, v124, v125, v126);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v124;
  *a5 += v125;
  *a6 += v126;
  v132 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 184, 0);
  v133 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 184, 1);
  v410 = 0;
  v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v138 = (void *)v410;
  else
    v138 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v407, &unk_209A7A2E0, v43, v43, v138, v132, v133, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v132;
  *a5 += v133;
  v139 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 200, 0);
  v140 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 200, 1);
  v410 = 0;
  v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v145 = (void *)v410;
  else
    v145 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v407, &unk_209A7A2E0, v43, v43, v145, v139, v140, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v139;
  *a5 += v140;
  v146 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 216, 0);
  v147 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 216, 1);
  v410 = 0;
  v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v152 = (void *)v410;
  else
    v152 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v407, &unk_209A7A2E0, v43, v43, v152, v146, v147, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v146;
  *a5 += v147;
  v153 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v153 = 16;
  v154 = *((_DWORD *)this + 64);
  v155 = *((_DWORD *)this + 65);
  v156 = v155 >= v154;
  v157 = v155 - v154;
  if (v156)
  {
    if (v154 > 0)
      v153 += 4 * (v154 - 1) + 4;
    v153 += 4 * v157;
  }
  v158 = v153 + 24;
  v159 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 62, 1u) + 12;
  v160 = *((unsigned int *)this + 64);
  if (v160 <= *((_DWORD *)this + 65))
    v161 = 0;
  else
    v161 = 4 * v160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v166 = (void *)v410;
  else
    v166 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v407, &unk_209A7A2E0, v43, v43, v166, v158, v159, v161);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v158;
  *a5 += v159;
  *a6 += v161;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v171 = (void *)v410;
  else
    v171 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v167, v168, v169, v170, v407, &unk_209A7A2E0, v43, v43, v171, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v176 = (void *)v410;
  else
    v176 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v407, &unk_209A7A2E0, v43, v43, v176, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  v177 = sizeObject<DgnString>((uint64_t)this + 352, 0);
  v178 = sizeObject<DgnString>((uint64_t)this + 352, 1);
  v179 = sizeObject<DgnString>((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v184 = (void *)v410;
  else
    v184 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v407, &unk_209A7A2E0, v43, v43, v184, v177, v178, v179);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v177;
  *a5 += v178;
  *a6 += v179;
  v185 = sizeObject<DgnString>((uint64_t)this + 320, 0);
  v186 = sizeObject<DgnString>((uint64_t)this + 320, 1);
  v187 = sizeObject<DgnString>((uint64_t)this + 320, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v192 = (void *)v410;
  else
    v192 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v407, &unk_209A7A2E0, v43, v43, v192, v185, v186, v187);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v185;
  *a5 += v186;
  *a6 += v187;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v193 = 12;
  else
    v193 = 16;
  v194 = *((unsigned int *)this + 98);
  v195 = *((_DWORD *)this + 99);
  if (v195 >= v194)
  {
    v196 = 0;
    if ((int)v194 > 0)
      v193 += 8 * (v194 - 1) + 8;
    v197 = v193 + 8 * (v195 - v194);
  }
  else
  {
    v196 = 8 * v194;
    v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v202 = (void *)v410;
  else
    v202 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v407, &unk_209A7A2E0, v43, v43, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v203 = 12;
  else
    v203 = 16;
  v204 = *((unsigned int *)this + 102);
  v205 = *((_DWORD *)this + 103);
  if (v205 >= v204)
  {
    v206 = 0;
    if ((int)v204 > 0)
      v203 += 8 * (v204 - 1) + 8;
    v207 = v203 + 8 * (v205 - v204);
  }
  else
  {
    v206 = 8 * v204;
    v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v212 = (void *)v410;
  else
    v212 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v407, &unk_209A7A2E0, v43, v43, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v213 = 12;
  else
    v213 = 16;
  v214 = *((unsigned int *)this + 106);
  v215 = *((_DWORD *)this + 107);
  if (v215 >= v214)
  {
    v216 = 0;
    if ((int)v214 > 0)
      v213 += 8 * (v214 - 1) + 8;
    v217 = v213 + 8 * (v215 - v214);
  }
  else
  {
    v216 = 8 * v214;
    v217 = v213;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v222 = (void *)v410;
  else
    v222 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v407, &unk_209A7A2E0, v43, v43, v222, v217, v213, v216);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v217;
  *a5 += v213;
  *a6 += v216;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v223 = 12;
  else
    v223 = 16;
  v224 = *((unsigned int *)this + 110);
  v225 = *((_DWORD *)this + 111);
  if (v225 >= v224)
  {
    v226 = 0;
    if ((int)v224 > 0)
      v223 += 8 * (v224 - 1) + 8;
    v227 = v223 + 8 * (v225 - v224);
  }
  else
  {
    v226 = 8 * v224;
    v227 = v223;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v232 = (void *)v410;
  else
    v232 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v228, v229, v230, v231, v407, &unk_209A7A2E0, v43, v43, v232, v227, v223, v226);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v227;
  *a5 += v223;
  *a6 += v226;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v233 = 12;
  else
    v233 = 16;
  v234 = *((unsigned int *)this + 114);
  v235 = *((_DWORD *)this + 115);
  if (v235 >= v234)
  {
    v236 = 0;
    if ((int)v234 > 0)
      v233 += 8 * (v234 - 1) + 8;
    v237 = v233 + 8 * (v235 - v234);
  }
  else
  {
    v236 = 8 * v234;
    v237 = v233;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v242 = (void *)v410;
  else
    v242 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v238, v239, v240, v241, v407, &unk_209A7A2E0, v43, v43, v242, v237, v233, v236);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v237;
  *a5 += v233;
  *a6 += v236;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v243 = 12;
  else
    v243 = 16;
  v244 = *((unsigned int *)this + 118);
  v245 = *((_DWORD *)this + 119);
  if (v245 >= v244)
  {
    v246 = 0;
    if ((int)v244 > 0)
      v243 = (v243 | 2) + 2 * (v244 - 1);
    v247 = v243 + 2 * (v245 - v244);
  }
  else
  {
    v246 = 2 * v244;
    v247 = v243;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v252 = (void *)v410;
  else
    v252 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v407, &unk_209A7A2E0, v43, v43, v252, v247, v243, v246);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v247;
  *a5 += v243;
  *a6 += v246;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v253 = 12;
  else
    v253 = 16;
  v254 = *((unsigned int *)this + 122);
  v255 = *((_DWORD *)this + 123);
  if (v255 >= v254)
  {
    v256 = 0;
    if ((int)v254 > 0)
      v253 = (v253 | 2) + 2 * (v254 - 1);
    v257 = v253 + 2 * (v255 - v254);
  }
  else
  {
    v256 = 2 * v254;
    v257 = v253;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v262 = (void *)v410;
  else
    v262 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v258, v259, v260, v261, v407, &unk_209A7A2E0, v43, v43, v262, v257, v253, v256);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v257;
  *a5 += v253;
  *a6 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v263 = 12;
  else
    v263 = 16;
  v264 = *((unsigned int *)this + 126);
  v265 = *((_DWORD *)this + 127);
  if (v265 >= v264)
  {
    v266 = 0;
    if ((int)v264 > 0)
      v263 += 8 * (v264 - 1) + 8;
    v267 = v263 + 8 * (v265 - v264);
  }
  else
  {
    v266 = 8 * v264;
    v267 = v263;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v272 = (void *)v410;
  else
    v272 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v407, &unk_209A7A2E0, v43, v43, v272, v267, v263, v266);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v267;
  *a5 += v263;
  *a6 += v266;
  v273 = sizeObject<DgnString>((uint64_t)this + 512, 0);
  v274 = sizeObject<DgnString>((uint64_t)this + 512, 1);
  v275 = sizeObject<DgnString>((uint64_t)this + 512, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v280 = (void *)v410;
  else
    v280 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v276, v277, v278, v279, v407, &unk_209A7A2E0, v43, v43, v280, v273, v274, v275);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v273;
  *a5 += v274;
  *a6 += v275;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v281 = 12;
  else
    v281 = 16;
  v282 = *((unsigned int *)this + 134);
  v283 = *((_DWORD *)this + 135);
  if (v283 >= v282)
  {
    v284 = 0;
    if ((int)v282 > 0)
      v281 += 4 * (v282 - 1) + 4;
    v285 = v281 + 4 * (v283 - v282);
  }
  else
  {
    v284 = 4 * v282;
    v285 = v281;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v290 = (void *)v410;
  else
    v290 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v286, v287, v288, v289, v407, &unk_209A7A2E0, v43, v43, v290, v285, v281, v284);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v285;
  *a5 += v281;
  *a6 += v284;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v291 = 12;
  else
    v291 = 16;
  v292 = *((_DWORD *)this + 138);
  v293 = *((_DWORD *)this + 139);
  v156 = v293 >= v292;
  v294 = v293 - v292;
  if (v156)
  {
    v296 = v292 & ~(v292 >> 31);
    v292 = 0;
    v295 = v291 + v296;
    v291 += v296 + v294;
  }
  else
  {
    v295 = v291;
  }
  v297 = v292;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v302 = (void *)v410;
  else
    v302 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v407, &unk_209A7A2E0, v43, v43, v302, v291, v295, v297);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v291;
  *a5 += v295;
  *a6 += v297;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v307 = (void *)v410;
  else
    v307 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v407, &unk_209A7A2E0, v43, v43, v307, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v308 = 12;
  else
    v308 = 16;
  v309 = *((unsigned int *)this + 144);
  v310 = *((_DWORD *)this + 145);
  if (v310 >= v309)
  {
    v311 = 0;
    if ((int)v309 > 0)
      v308 += 4 * (v309 - 1) + 4;
    v312 = v308 + 4 * (v310 - v309);
  }
  else
  {
    v311 = 4 * v309;
    v312 = v308;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v317 = (void *)v410;
  else
    v317 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v407, &unk_209A7A2E0, v43, v43, v317, v312, v308, v311);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v312;
  *a5 += v308;
  *a6 += v311;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v318 = 12;
  else
    v318 = 16;
  v319 = *((unsigned int *)this + 148);
  v320 = *((_DWORD *)this + 149);
  if (v320 >= v319)
  {
    v321 = 0;
    if ((int)v319 > 0)
      v318 += 4 * (v319 - 1) + 4;
    v322 = v318 + 4 * (v320 - v319);
  }
  else
  {
    v321 = 4 * v319;
    v322 = v318;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v327 = (void *)v410;
  else
    v327 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v323, v324, v325, v326, v407, &unk_209A7A2E0, v43, v43, v327, v322, v318, v321);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v322;
  *a5 += v318;
  *a6 += v321;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v328 = 12;
  else
    v328 = 16;
  v329 = *((unsigned int *)this + 152);
  v330 = *((_DWORD *)this + 153);
  if (v330 >= v329)
  {
    v331 = 0;
    if ((int)v329 > 0)
      v328 += 4 * (v329 - 1) + 4;
    v332 = v328 + 4 * (v330 - v329);
  }
  else
  {
    v331 = 4 * v329;
    v332 = v328;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if ((_DWORD)v411)
    v337 = (void *)v410;
  else
    v337 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v333, v334, v335, v336, v407, &unk_209A7A2E0, v43, v43, v337, v332, v328, v331);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v332;
  *a5 += v328;
  *a6 += v331;
  v338 = *((_QWORD *)this + 77);
  if (v338)
  {
    v410 = 0;
    v408 = 0;
    v409 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v338 + 16))(v338, 0xFFFFFFFFLL, v407, &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *a6 += v408;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v339 = 4;
  else
    v339 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 560, (DgnString *)&v410);
  if ((_DWORD)v411)
    v344 = (void *)v410;
  else
    v344 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v340, v341, v342, v343, v407, &unk_209A7A2E0, v43, v43, v344, v339, v339, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v339;
  *a5 += v339;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v345 = 4;
  else
    v345 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 562, (DgnString *)&v410);
  if ((_DWORD)v411)
    v350 = (void *)v410;
  else
    v350 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v346, v347, v348, v349, v407, &unk_209A7A2E0, v43, v43, v350, v345, v345, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v345;
  *a5 += v345;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 564, (DgnString *)&v410);
  if ((_DWORD)v411)
    v355 = (void *)v410;
  else
    v355 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v351, v352, v353, v354, v407, &unk_209A7A2E0, v43, v43, v355, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 566, (DgnString *)&v410);
  if ((_DWORD)v411)
    v360 = (void *)v410;
  else
    v360 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v356, v357, v358, v359, v407, &unk_209A7A2E0, v43, v43, v360, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v361 = 12;
  else
    v361 = 16;
  v362 = *((unsigned int *)this + 162);
  v363 = *((_DWORD *)this + 163);
  if (v363 >= v362)
  {
    v364 = 0;
    if ((int)v362 > 0)
      v361 += 8 * (v362 - 1) + 8;
    v365 = v361 + 8 * (v363 - v362);
  }
  else
  {
    v364 = 8 * v362;
    v365 = v361;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 568, (DgnString *)&v410);
  if ((_DWORD)v411)
    v370 = (void *)v410;
  else
    v370 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v366, v367, v368, v369, v407, &unk_209A7A2E0, v43, v43, v370, v365, v361, v364);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v365;
  *a5 += v361;
  *a6 += v364;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 570, (DgnString *)&v410);
  if ((_DWORD)v411)
    v375 = (void *)v410;
  else
    v375 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v407, &unk_209A7A2E0, v43, v43, v375, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 8;
  *a5 += 8;
  v376 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 672, 0);
  v377 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 672, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 571, (DgnString *)&v410);
  if ((_DWORD)v411)
    v382 = (void *)v410;
  else
    v382 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v407, &unk_209A7A2E0, v43, v43, v382, v376, v377, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v376;
  *a5 += v377;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v383 = 12;
  else
    v383 = 16;
  v384 = *((unsigned int *)this + 174);
  v385 = *((_DWORD *)this + 175);
  if (v385 >= v384)
  {
    v386 = 0;
    if ((int)v384 > 0)
      v383 = (v383 | 2) + 2 * (v384 - 1);
    v387 = v383 + 2 * (v385 - v384);
  }
  else
  {
    v386 = 2 * v384;
    v387 = v383;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 574, (DgnString *)&v410);
  if ((_DWORD)v411)
    v392 = (void *)v410;
  else
    v392 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v388, v389, v390, v391, v407, &unk_209A7A2E0, v43, v43, v392, v387, v383, v386);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v387;
  *a5 += v383;
  *a6 += v386;
  v393 = (char *)this + 704;
  v394 = CombineTable::sizeObject((uint64_t)this + 704, 0);
  v395 = CombineTable::sizeObject((uint64_t)v393, 1);
  v396 = CombineTable::sizeObject((uint64_t)v393, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 576, (DgnString *)&v410);
  if ((_DWORD)v411)
    v401 = (void *)v410;
  else
    v401 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v397, v398, v399, v400, v407, &unk_209A7A2E0, v43, v43, v401, v394, v395, v396);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v394;
  *a5 += v395;
  *a6 += v396;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 578, (DgnString *)&v410);
  if ((_DWORD)v411)
    v406 = (void *)v410;
  else
    v406 = &unk_209A7A2E0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v26, &unk_209A7A2E0, (35 - v26), (35 - v26), v406, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v410);
}

void sub_20991740C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

unsigned int *MultiLanguageModel::checkWordIdLmIdValidityAgreement(unsigned int *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v6;
  unint64_t i;

  v3 = this[29];
  if ((_DWORD)v3)
  {
    v6 = this;
    for (i = 0; i < v3; ++i)
    {
      this = *(unsigned int **)(*((_QWORD *)v6 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)this + 208))(this, a2, a3);
        v3 = v6[29];
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::dumpWordLM(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[2];

  if (!*((_DWORD *)a2 + 2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 654, (uint64_t)"lm/multilm", 121, (uint64_t)"%s", a7, a8, (char)&unk_209A7A2E0);
  v13 = **a2;
  if (*(_DWORD *)(a1 + 116) <= v13)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 657, (uint64_t)"lm/multilm", 122, (uint64_t)"%u %u", a7, a8, **a2);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 658, (uint64_t)"lm/multilm", 123, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_MULTI_LM_DUMP_NULL);
  v14 = *((_DWORD *)a2 + 2);
  v15 = v14 - 1;
  if (v14 != 1)
    memmove(*a2, *a2 + 1, 2 * (v14 - 1));
  *((_DWORD *)a2 + 2) = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13);
  v18[0] = 0;
  v18[1] = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v18, (uint64_t *)a2, 0, v15);
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 224))(v16, v18, a3, a4, a5);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_2099177B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getWordTransducer(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v20[2];

  if (!*((_DWORD *)a2 + 2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 672, (uint64_t)"lm/multilm", 121, (uint64_t)"%s", a7, a8, (char)&unk_209A7A2E0);
  v15 = **a2;
  if (*(_DWORD *)(a1 + 116) <= v15)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 675, (uint64_t)"lm/multilm", 122, (uint64_t)"%u %u", a7, a8, **a2);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 676, (uint64_t)"lm/multilm", 123, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_MULTI_LM_DUMP_NULL);
  v16 = *((_DWORD *)a2 + 2);
  v17 = v16 - 1;
  if (v16 != 1)
    memmove(*a2, *a2 + 1, 2 * (v16 - 1));
  *((_DWORD *)a2 + 2) = v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15);
  v20[0] = 0;
  v20[1] = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v20, (uint64_t *)a2, 0, v17);
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 232))(v18, v20, a3, a4, a5, a6, a7);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_20991794C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::verifyLM(MultiLanguageModel *this, int a2, const char *a3)
{
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t j;
  uint64_t v17;
  uint64_t result;

  if (a2)
  {
    v5 = *(unsigned int *)(*((_QWORD *)this + 2) + 388);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *((_QWORD *)this + 2);
        v8 = i < *(unsigned int *)(v7 + 388) && *(unsigned __int8 *)(*(_QWORD *)(v7 + 104) + i) != 0;
        if (*((_BYTE *)this + 112))
        {
          v9 = *((unsigned int *)this + 29);
          if ((_DWORD)v9)
          {
            v10 = 0;
            while (i < *(unsigned int *)(*((_QWORD *)this + 71) + 4 * v10)
                 || i > *(unsigned int *)(*((_QWORD *)this + 73) + 4 * v10))
            {
              if (v9 == ++v10)
                goto LABEL_13;
            }
            v11 = v10;
            if (!*((_DWORD *)this + 29))
              continue;
LABEL_17:
            v12 = 0;
            do
            {
              v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12);
              if (v13)
              {
                v14 = v11 == v12 && v8;
                (*(void (**)(uint64_t, unint64_t, _BOOL8))(*(_QWORD *)v13 + 208))(v13, i, v14);
                v9 = *((unsigned int *)this + 29);
              }
              ++v12;
            }
            while (v12 < v9);
            continue;
          }
LABEL_13:
          v11 = *((unsigned int *)this + 140);
          if (*((_DWORD *)this + 29))
            goto LABEL_17;
        }
        else
        {
          (*(void (**)(MultiLanguageModel *, unint64_t, _BOOL8))(*(_QWORD *)this + 208))(this, i, v8);
        }
      }
    }
  }
  v15 = *((unsigned int *)this + 29);
  if ((_DWORD)v15)
  {
    for (j = 0; j < v15; ++j)
    {
      v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * j);
      if (v17)
      {
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v17 + 216))(v17, 0, a3);
        v15 = *((unsigned int *)this + 29);
      }
    }
  }
  result = *((_QWORD *)this + 1);
  if (result)
    return MrecInitModule_sdpres_sdapi();
  return result;
}

unsigned int *MultiLanguageModel::beginLMSyncRecog(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v6;
  unint64_t i;

  v3 = result[29];
  if ((_DWORD)v3)
  {
    v6 = result;
    for (i = 0; i < v3; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v6 + 5) + 8 * i);
      if (result
        && (*((_BYTE *)v6 + 112)
         || *((_BYTE *)v6 + 113)
         && *(_BYTE *)(*((_QWORD *)v6 + 68) + i)
         && *(double *)(*((_QWORD *)v6 + 62) + 8 * i) != 0.0
         || *((_BYTE *)v6 + 114)))
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)result + 408))(result, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i));
        v3 = v6[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::beginRescoringInLMSyncRecog(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unint64_t i;

  v2 = result[29];
  if ((_DWORD)v2)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v4 + 5) + 8 * i);
      if (result
        && (*((_BYTE *)v4 + 112)
         || *((_BYTE *)v4 + 113)
         && *(_BYTE *)(*((_QWORD *)v4 + 68) + i)
         && *(double *)(*((_QWORD *)v4 + 62) + 8 * i) != 0.0
         || *((_BYTE *)v4 + 114)))
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)result + 416))(result, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i));
        v2 = v4[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::endLMSyncRecog(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v6;
  unint64_t i;

  v3 = result[29];
  if ((_DWORD)v3)
  {
    v6 = result;
    for (i = 0; i < v3; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v6 + 5) + 8 * i);
      if (result
        && (*((_BYTE *)v6 + 112)
         || *((_BYTE *)v6 + 113)
         && *(_BYTE *)(*((_QWORD *)v6 + 68) + i)
         && *(double *)(*((_QWORD *)v6 + 62) + 8 * i) != 0.0
         || *((_BYTE *)v6 + 114)))
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)result + 424))(result, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i));
        v3 = v6[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::clearLoadedData(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unint64_t i;

  v2 = result[29];
  if ((_DWORD)v2)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v4 + 5) + 8 * i);
      if (result)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 432))(result, a2);
        v2 = v4[29];
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::isFinalSilenceScoredVerify(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int isFinalSilenceScoredVerify;
  int v16;
  uint64_t v17;
  BOOL v18;

  if (*((_DWORD *)this + 29))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
      if (*((_BYTE *)this + 112))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 696))(v12);
        isFinalSilenceScoredVerify = v13;
        if (v9 != *((_DWORD *)this + 140) && v13 != 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 856, (uint64_t)"lm/multilm", 32, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NON_DEFAULT_DISPATCH_SCORING_FINAL_SILENCE);
          isFinalSilenceScoredVerify = 1;
        }
      }
      else
      {
        if (v12)
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 696))(v12);
        else
          v16 = 1;
        v17 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v9);
        if (v17)
          isFinalSilenceScoredVerify = 0;
        else
          isFinalSilenceScoredVerify = v16;
        if (v17)
          v18 = v16 == 0;
        else
          v18 = 1;
        if (!v18)
          isFinalSilenceScoredVerify = WordNgramTemplate::isFinalSilenceScoredVerify(*(WordNgramTemplate **)(*((_QWORD *)this + 42) + 8 * v9));
      }
      if ((v11 & 1) != 0)
      {
        if (*((_BYTE *)this + 114) && ((v10 ^ isFinalSilenceScoredVerify) & 1) != 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 868, (uint64_t)"lm/multilm", 1, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_ENDLMID_DISAGREEMENT);
        isFinalSilenceScoredVerify |= v10;
      }
      ++v9;
      v11 = 1;
      v10 = isFinalSilenceScoredVerify;
    }
    while (v9 < *((unsigned int *)this + 29));
  }
  else
  {
    LOBYTE(isFinalSilenceScoredVerify) = 0;
  }
  return isFinalSilenceScoredVerify & 1;
}

uint64_t MultiLanguageModel::hasAnyQuadgrams(MultiLanguageModel *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (!v4
      || !*((_BYTE *)this + 112)
      && (!*((_BYTE *)this + 113)
       || !*(_BYTE *)(*((_QWORD *)this + 68) + v3)
       || *(double *)(*((_QWORD *)this + 62) + 8 * v3) == 0.0)
      && !*((_BYTE *)this + 114))
    {
      goto LABEL_11;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 448))(v4) & 1) != 0)
      return 1;
    v1 = *((unsigned int *)this + 29);
LABEL_11:
    if (++v3 >= v1)
      return 0;
  }
}

uint64_t MultiLanguageModel::tri1HasTrigrams(MultiLanguageModel *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_BYTE *)this + 112))
  {
    v4 = *((unsigned int *)this + 29);
    if (a2 < 0xFFFFF4)
    {
      if (*((_DWORD *)this + 29))
      {
        v10 = 0;
        while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v10) > a2
             || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v10) < a2)
        {
          if (v4 == ++v10)
            goto LABEL_26;
        }
      }
      else
      {
LABEL_26:
        LODWORD(v10) = *((_DWORD *)this + 140);
      }
      v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v10);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 440))(v11, a2) & 1) != 0)
        return 1;
    }
    else if (*((_DWORD *)this + 29))
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5);
        if (v6)
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 440))(v6, a2) & 1) != 0)
            return 1;
          v4 = *((unsigned int *)this + 29);
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  else
  {
    v7 = *((unsigned int *)this + 29);
    if ((_DWORD)v7)
    {
      for (i = 0; i < v7; ++i)
      {
        v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
        if (v9
          && (*((_BYTE *)this + 113)
           && *(_BYTE *)(*((_QWORD *)this + 68) + i)
           && *(double *)(*((_QWORD *)this + 62) + 8 * i) != 0.0
           || *((_BYTE *)this + 114)))
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 440))(v9, a2) & 1) != 0)
            return 1;
          v7 = *((unsigned int *)this + 29);
        }
      }
    }
  }
  return 0;
}

BOOL MultiLanguageModel::quad1quad2HasQuadgrams(MultiLanguageModel *this, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*((_BYTE *)this + 112))
  {
    v9 = *((unsigned int *)this + 29);
    if ((_DWORD)v9)
    {
      for (i = 0; i < v9; ++i)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
        if (v11
          && (*((_BYTE *)this + 113)
           && *(_BYTE *)(*((_QWORD *)this + 68) + i)
           && *(double *)(*((_QWORD *)this + 62) + 8 * i) != 0.0
           || *((_BYTE *)this + 114)))
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 456))(v11, a2, a3) & 1) != 0)
            return 1;
          v9 = *((unsigned int *)this + 29);
        }
      }
    }
    return 0;
  }
  v6 = *((unsigned int *)this + 29);
  if (a2 > 0xFFFFF3)
  {
    if (a3 > 0xFFFFF3)
    {
      if (*((_DWORD *)this + 29))
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v7);
          if (v8)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 456))(v8, a2, a3) & 1) != 0)
              return 1;
            v6 = *((unsigned int *)this + 29);
          }
          ++v7;
        }
        while (v7 < v6);
      }
      return 0;
    }
    if (*((_DWORD *)this + 29))
    {
      v12 = 0;
      while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v12) > a3
           || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v12) < a3)
      {
        if (v6 == ++v12)
          goto LABEL_34;
      }
      goto LABEL_48;
    }
LABEL_34:
    LODWORD(v12) = *((_DWORD *)this + 140);
    goto LABEL_48;
  }
  if (a3 <= 0xFFFFF3)
  {
    if (*((_DWORD *)this + 29))
    {
      v12 = 0;
      while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v12) > a2
           || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v12) < a2)
      {
        if (v6 == ++v12)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_40:
      LODWORD(v12) = *((_DWORD *)this + 140);
    }
    if (*((_DWORD *)this + 29))
    {
      v13 = 0;
      while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v13) > a3
           || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v13) < a3)
      {
        if (v6 == ++v13)
          goto LABEL_46;
      }
    }
    else
    {
LABEL_46:
      LODWORD(v13) = *((_DWORD *)this + 140);
    }
    if ((_DWORD)v12 != (_DWORD)v13)
      return 0;
    goto LABEL_48;
  }
  if (!*((_DWORD *)this + 29))
    goto LABEL_34;
  v12 = 0;
  while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v12) > a2
       || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v12) < a2)
  {
    if (v6 == ++v12)
      goto LABEL_34;
  }
LABEL_48:
  v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 456))(v14, a2, a3) & 1) != 0;
}

uint64_t *MultiLanguageModel::createContextData(MultiLanguageModel *this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = MemChunkAlloc(0x20uLL, 0);
  MultiLMContextData::MultiLMContextData((MultiLMContextData *)v2, *((unsigned int *)this + 29));
  v3 = *((unsigned int *)this + 29);
  if ((int)v3 >= 1)
  {
    v4 = v3 + 1;
    do
    {
      v5 = (v4 - 2);
      v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5);
      if (v6)
        *(_QWORD *)(v2[2] + 8 * v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 464))(v6);
      --v4;
    }
    while (v4 > 1);
  }
  return v2;
}

uint64_t MultiLanguageModel::setContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  void *v34;

  if (*(_DWORD *)(a1 + 116))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 116); ++i)
    {
      if (*(_BYTE *)(a1 + 112))
      {
        v13 = *(unsigned int *)(a2 + 8);
        v32 = 0;
        v33 = 0;
        if ((_DWORD)v13)
        {
          v34 = 0;
          v14 = realloc_array(0, &v34, 4 * v13, 0, 0, 1);
          v15 = v34;
          v32 = v34;
          v16 = *(_DWORD *)(a2 + 8);
          LODWORD(v33) = v13;
          HIDWORD(v33) = v14 >> 2;
          if (v16)
          {
            v17 = 0;
            v18 = *(_QWORD *)a2;
            do
            {
              v19 = *(_DWORD *)(v18 + 4 * v17);
              if (v19 <= 0xFFFFF3)
              {
                v20 = *(unsigned int *)(a1 + 116);
                if ((_DWORD)v20)
                {
                  v21 = 0;
                  while (*(_DWORD *)(*(_QWORD *)(a1 + 568) + 4 * v21) > v19
                       || *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * v21) < v19)
                  {
                    if (v20 == ++v21)
                      goto LABEL_13;
                  }
                  v22 = v21;
                }
                else
                {
LABEL_13:
                  v22 = *(unsigned int *)(a1 + 560);
                }
                if (i != v22)
                  v19 = 0xFFFFFF;
              }
              v15[v17++] = v19;
            }
            while (v17 < *(unsigned int *)(a2 + 8));
          }
        }
        else
        {
          LODWORD(v33) = 0;
        }
        if (i == *(_DWORD *)(a1 + 560))
          v30 = a3;
        else
          v30 = 0;
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
        (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 472))(v29, &v32, v30, a4, a5, *(_QWORD *)(*(_QWORD *)(a6 + 16) + 8 * i));
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
        continue;
      }
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v23)
      {
        if (*(_BYTE *)(a1 + 113)
          && *(_BYTE *)(*(_QWORD *)(a1 + 544) + i)
          && *(double *)(*(_QWORD *)(a1 + 496) + 8 * i) != 0.0)
        {
          goto LABEL_42;
        }
        if (*(_BYTE *)(a1 + 114))
        {
          if (a3)
          {
            v24 = *(unsigned int *)(a3 + 8);
            if ((_DWORD)v24)
            {
              v25 = 0;
              v26 = 1;
              do
              {
                v27 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v25);
                if (v27 == 0xFFFF)
                  v28 = *(_QWORD *)(a1 + 384);
                else
                  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 16 * (v27 - 1));
                if (*(double *)(v28 + 8 * i) != 0.0)
                  break;
                v26 = ++v25 < v24;
              }
              while (v24 != v25);
              if (!v26)
                continue;
LABEL_42:
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 472))(v23, a2, a3, a4, a5, *(_QWORD *)(*(_QWORD *)(a6 + 16) + 8 * i));
              continue;
            }
          }
          if (*(double *)(*(_QWORD *)(a1 + 384) + 8 * i) != 0.0)
            goto LABEL_42;
        }
      }
    }
  }
  return LanguageModel::setContext(a1, a2, a3, a4, a5, a6);
}

void sub_209918588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::unsetContext(MultiLanguageModel *this, LMContextData *a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;

  v4 = *((unsigned int *)this + 29);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v6
        && (*((_BYTE *)this + 112)
         || *((_BYTE *)this + 113)
         && *(_BYTE *)(*((_QWORD *)this + 68) + i)
         && *(double *)(*((_QWORD *)this + 62) + 8 * i) != 0.0
         || *((_BYTE *)this + 114)))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 480))(v6, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * i));
        v4 = *((unsigned int *)this + 29);
      }
    }
  }
  LanguageModel::unsetContext(this, a2);
}

uint64_t MultiLanguageModel::mayWordBeIgnoredInContext(MultiLanguageModel *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned int *)this + 29);
  if (!*((_BYTE *)this + 112))
  {
    if (!*((_DWORD *)this + 29))
      return 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v8);
      if (v9
        && (*((_BYTE *)this + 113)
         && *(_BYTE *)(*((_QWORD *)this + 68) + v8)
         && *(double *)(*((_QWORD *)this + 62) + 8 * v8) != 0.0
         || *((_BYTE *)this + 114)))
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 488))(v9, a2) & 1) != 0)
          return 1;
        v4 = *((unsigned int *)this + 29);
      }
      if (++v8 >= v4)
        return 0;
    }
  }
  if (*((_DWORD *)this + 29))
  {
    v5 = 0;
    while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v5) > a2
         || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v5) < a2)
    {
      if (v4 == ++v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = *((_DWORD *)this + 140);
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 488))(v6, a2);
}

uint64_t MultiLanguageModel::getNumLoadedBigramBytes(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 240))(v5);
      v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getNumLoadedTrigramBytes(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5);
      v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getNumLoadedQuadgramBytes(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v5);
      v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getDefaultRestrictRange(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;

  if (*(_BYTE *)(this + 112) && *(_DWORD *)(this + 576) >= 2u)
  {
    *a2 = *(_DWORD *)(*(_QWORD *)(this + 568) + 4);
    v3 = *(_DWORD *)(*(_QWORD *)(this + 584) + 4 * (*(_DWORD *)(this + 592) - 1));
  }
  else
  {
    v3 = 0xFFFFFF;
    *a2 = 0xFFFFFF;
  }
  *a3 = v3;
  return this;
}

uint64_t MultiLanguageModel::getValidTopicLmSlots(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 104);
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 12);
    if (v2 <= v4)
    {
      *(_DWORD *)(a2 + 8) = v2;
      if (!(_DWORD)v2)
        return v2;
    }
    else
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, v2 - v4, 0);
      *(_DWORD *)(a2 + 8) = v2;
    }
    v5 = 0;
    v6 = *(_QWORD *)a2;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5 + 1;
      ++v5;
    }
    while (v2 != v5);
  }
  return v2;
}

DgnString *MultiLanguageModel::getTopicLmSlotNames(DgnString *result, unsigned int *a2)
{
  DgnString *v3;
  uint64_t v4;
  unint64_t i;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_DWORD *)result + 29))
  {
    v3 = result;
    v4 = 0;
    for (i = 0; i < *((unsigned int *)v3 + 29); ++i)
    {
      v6 = *(_DWORD *)(*((_QWORD *)v3 + 17) + 4 * i);
      if (v6 == 1)
      {
        v7 = DgnArray<DgnString>::find(a2, *((_QWORD *)v3 + 44) + v4);
        if (v7 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1319, (uint64_t)"lm/multilm", 93, (uint64_t)"%u %u %.500s", v8, v9, v7);
        v12 = *((_QWORD *)v3 + 44);
        v13 = a2[2];
        if (v13 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          v13 = a2[2];
        }
        result = DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + 16 * v13), (const DgnString *)(v12 + v4));
        ++a2[2];
      }
      else if (*((_BYTE *)v3 + 112))
      {
        if (v6 == 3 && i == *((_DWORD *)v3 + 140))
        {
LABEL_13:
          v11 = *(void **)(*((_QWORD *)v3 + 5) + 8 * i);
          if (v11)
          result = (DgnString *)MultiLanguageModel::getTopicLmSlotNames(v11, a2);
        }
      }
      else if (v6 == 3)
      {
        goto LABEL_13;
      }
      v4 += 16;
    }
  }
  return result;
}

uint64_t MultiLanguageModel::getTopicLmSlotId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2;

  v2 = DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a2);
  if (v2 == -1)
    return 0xFFFFLL;
  else
    return (v2 + 1);
}

DgnString *MultiLanguageModel::setTopicLmSlotName(MultiLanguageModel *this, int a2, const char **a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  MultiLanguageModel *v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int v24;
  MultiLanguageModel *v25;

  if (*((_DWORD *)a3 + 2))
    v6 = *a3;
  else
    v6 = (const char *)&unk_209A7A2E0;
  if ((isValidName(v6) & 1) == 0)
  {
    if (*((_DWORD *)a3 + 2))
      v9 = *a3;
    else
      v9 = (const char *)&unk_209A7A2E0;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1357, (uint64_t)"lm/multilm", 92, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  v10 = (a2 - 1);
  if (v10 >= *((_DWORD *)this + 26))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1365, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v7, v8, a2);
  v11 = *((_QWORD *)this + 12) + 16 * v10;
  if (*(_QWORD *)v11)
  {
    MemChunkFree(*(_QWORD **)v11, 0);
    *(_QWORD *)v11 = 0;
  }
  *(_QWORD *)(v11 + 8) = 0;
  v12 = DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a3);
  if (v12 != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1370, (uint64_t)"lm/multilm", 93, (uint64_t)"%u %u %.500s", v13, v14, v12);
  v15 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a3);
  if (v15 != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1374, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v16, v17, v15);
  DgnString::operator=((DgnString *)(*((_QWORD *)this + 12) + 16 * v10), (DgnString *)a3);
  v23 = 0;
  v24 = a2 - 1;
  v25 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v24, &v25, &v23);
  v20 = v25;
  v21 = v23;
  if (v23 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1384, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v18, v19, a2);
  return DgnString::operator=((DgnString *)(*((_QWORD *)v20 + 44) + 16 * v21), (DgnString *)a3);
}

uint64_t MultiLanguageModel::getTopicLmSlotName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 26))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1400, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", a7, a8, a2);
  return *((_QWORD *)this + 12) + 16 * v9;
}

BOOL MultiLanguageModel::hasTopicLM(MultiLanguageModel *this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  MultiLanguageModel *v8;
  unsigned int v9;

  v2 = a2;
  v9 = a2 - 1;
  v8 = 0;
  v7 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v9, &v8, &v7);
  v5 = v7;
  if (v7 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1414, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v3, v4, v2);
  return *(_QWORD *)(*((_QWORD *)v8 + 5) + 8 * v5) != 0;
}

uint64_t MultiLanguageModel::getInternalTopicLmSlot(uint64_t this, unsigned int *a2, const MultiLanguageModel **a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t i;
  int v9;
  void *v11;

  *a3 = 0;
  *a4 = -1;
  if (*(_DWORD *)(this + 116))
  {
    v7 = this;
    for (i = 0; i < *(unsigned int *)(v7 + 116); ++i)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v7 + 136) + 4 * i);
      if (v9 == 1)
      {
        if (!*a2)
        {
          *a3 = (const MultiLanguageModel *)v7;
          *a4 = i;
          return this;
        }
        --*a2;
      }
      else
      {
        if (*(_BYTE *)(v7 + 112))
        {
          if (v9 != 3 || i != *(_DWORD *)(v7 + 560))
            continue;
        }
        else if (v9 != 3)
        {
          continue;
        }
        v11 = *(void **)(*(_QWORD *)(v7 + 40) + 8 * i);
        if (v11)
        this = MultiLanguageModel::getInternalTopicLmSlot((MultiLanguageModel *)v11, a2, a3, a4);
        if (*a4 != -1)
          return this;
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::deleteTopicLMs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v20;
  void *v21[2];

  if (*(_QWORD *)(a1 + 616))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1424, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"deleteTopicLMs");
  v10 = *(unsigned int *)(a1 + 104);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v21, *(_DWORD *)(a1 + 104));
  if ((_DWORD)v10)
    bzero(v21[0], v10);
  if (*(_DWORD *)(a2 + 8))
  {
    v16 = 0;
    do
    {
      v17 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v16) - 1);
      if (v17 >= v10)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1439, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v14, v15, *(_DWORD *)(*(_QWORD *)a2 + 4 * v16));
      v18 = v21[0];
      if (*((_BYTE *)v21[0] + v17))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1442, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", v14, v15, *(_DWORD *)(*(_QWORD *)a2 + 4 * v16));
        v18 = v21[0];
      }
      v18[v17] = 1;
      ++v16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  v20 = 0;
  MultiLanguageModel::deleteTopicLMsInternal(a1, (uint64_t)v21, &v20, v11, v12, v13, v14, v15);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
}

void sub_20991906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::deleteTopicLMsInternal(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v27[0] = 0;
  v27[1] = 0;
  if (*(_BYTE *)(a1 + 114))
    DgnPrimArray<double>::copyArraySlice((uint64_t)v27, (uint64_t *)(a1 + 384), 0, *(_DWORD *)(a1 + 392));
  if (*(_DWORD *)(a1 + 116))
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *a3;
      if (v13 >= *(_DWORD *)(a2 + 8))
      {
LABEL_26:
        if (*(_BYTE *)(a1 + 114) && (v12 & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 496))(a1, v27);
          MultiLanguageModel::adjustNamedWeightsSets(a1, v19, v20, v21, v22, v23, v24, v25);
        }
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v27);
      }
      v14 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v11);
      if (v14 == 1)
      {
        if (*(_BYTE *)(*(_QWORD *)a2 + v13))
        {
          v15 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v11);
          if (v15
            || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1474, (uint64_t)"lm/multilm", 22, (uint64_t)"%u", a7, a8, *a3), v16 = *(_QWORD *)(a1 + 40), (v15 = *(_QWORD **)(v16 + 8 * v11)) != 0))
          {
            (*(void (**)(_QWORD *))*v15)(v15);
            MemChunkFree(v15, 0);
            v16 = *(_QWORD *)(a1 + 40);
          }
          *(_QWORD *)(v16 + 8 * v11) = 0;
          if (*(_BYTE *)(a1 + 114))
            *(_QWORD *)(v27[0] + 8 * v11) = 0;
          v12 = 1;
        }
        ++*a3;
      }
      else if (*(_BYTE *)(a1 + 112))
      {
        if (v14 == 3 && v11 == *(_DWORD *)(a1 + 560))
        {
LABEL_22:
          v18 = *(void **)(*(_QWORD *)(a1 + 40) + 8 * v11);
          if (v18)
          MultiLanguageModel::deleteTopicLMsInternal(v18, a2, a3);
        }
      }
      else if (v14 == 3)
      {
        goto LABEL_22;
      }
      if (++v11 >= (unint64_t)*(unsigned int *)(a1 + 116))
        goto LABEL_26;
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v27);
}

void sub_209919260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::adjustNamedWeightsSets(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v8 = *(unsigned int *)(this + 176);
  if ((_DWORD)v8)
  {
    v9 = this;
    v10 = 0;
    v11 = 8;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v9 + 168) + v11) >= 2u)
      {
        this = MultiLanguageModel::adjustNamedWeightsSet((MultiLanguageModel *)v9, v10, a3, a4, a5, a6, a7, a8);
        v8 = *(unsigned int *)(v9 + 176);
      }
      ++v10;
      v11 += 16;
    }
    while (v10 < v8);
  }
  return this;
}

uint64_t MultiLanguageModel::getValidFactoryCorrectiveLms(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 88);
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 12);
    if (v2 <= v4)
    {
      *(_DWORD *)(a2 + 8) = v2;
      if (!(_DWORD)v2)
        return v2;
    }
    else
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, v2 - v4, 0);
      *(_DWORD *)(a2 + 8) = v2;
    }
    v5 = 0;
    v6 = *(_QWORD *)a2;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5 + 1;
      ++v5;
    }
    while (v2 != v5);
  }
  return v2;
}

DgnString *MultiLanguageModel::getFactoryCorrectiveLmNames(DgnString *result, unsigned int *a2)
{
  DgnString *v3;
  uint64_t v4;
  unint64_t i;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_DWORD *)result + 29))
  {
    v3 = result;
    v4 = 0;
    for (i = 0; i < *((unsigned int *)v3 + 29); ++i)
    {
      v6 = *(_DWORD *)(*((_QWORD *)v3 + 17) + 4 * i);
      if (v6 == 2)
      {
        v7 = DgnArray<DgnString>::find(a2, *((_QWORD *)v3 + 64) + v4);
        if (v7 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1539, (uint64_t)"lm/multilm", 88, (uint64_t)"%u %u %.500s", v8, v9, v7);
        v12 = *((_QWORD *)v3 + 64);
        v13 = a2[2];
        if (v13 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          v13 = a2[2];
        }
        result = DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + 16 * v13), (const DgnString *)(v12 + v4));
        ++a2[2];
      }
      else if (*((_BYTE *)v3 + 112))
      {
        if (v6 == 3 && i == *((_DWORD *)v3 + 140))
        {
LABEL_13:
          v11 = *(void **)(*((_QWORD *)v3 + 5) + 8 * i);
          if (v11)
          result = (DgnString *)MultiLanguageModel::getFactoryCorrectiveLmNames(v11, a2);
        }
      }
      else if (v6 == 3)
      {
        goto LABEL_13;
      }
      v4 += 16;
    }
  }
  return result;
}

uint64_t MultiLanguageModel::getFactoryCorrectiveLmId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2;

  v2 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a2);
  if (v2 == -1)
    return 0xFFFFLL;
  else
    return (v2 + 1);
}

DgnString *MultiLanguageModel::setFactoryCorrectiveLmName(MultiLanguageModel *this, int a2, const char **a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  MultiLanguageModel *v22;
  unsigned int v23;

  if (*((_DWORD *)a3 + 2))
    v6 = *a3;
  else
    v6 = (const char *)&unk_209A7A2E0;
  if ((isValidName(v6) & 1) == 0)
  {
    if (*((_DWORD *)a3 + 2))
      v9 = *a3;
    else
      v9 = (const char *)&unk_209A7A2E0;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1579, (uint64_t)"lm/multilm", 99, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  v10 = (a2 - 1);
  if (v10 >= *((_DWORD *)this + 22))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1587, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v7, v8, a2);
  v11 = *((_QWORD *)this + 10) + 16 * v10;
  if (*(_QWORD *)v11)
  {
    MemChunkFree(*(_QWORD **)v11, 0);
    *(_QWORD *)v11 = 0;
  }
  *(_QWORD *)(v11 + 8) = 0;
  v12 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a3);
  if (v12 != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1592, (uint64_t)"lm/multilm", 88, (uint64_t)"%u %u %.500s", v13, v14, v12);
  if (DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a3) != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1596, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v15, v16, a2 - 1);
  DgnString::operator=((DgnString *)(*((_QWORD *)this + 10) + 16 * v10), (DgnString *)a3);
  v23 = a2 - 1;
  v22 = 0;
  v21 = 0;
  MultiLanguageModel::getInternalFactoryCorrectiveLm((uint64_t)this, &v23, &v22, &v21);
  v19 = v21;
  if (v21 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1607, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v17, v18, a2);
  return DgnString::operator=((DgnString *)(*((_QWORD *)v22 + 64) + 16 * v19), (DgnString *)a3);
}

uint64_t MultiLanguageModel::getInternalFactoryCorrectiveLm(uint64_t this, unsigned int *a2, MultiLanguageModel **a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t i;
  int v9;

  *a3 = 0;
  *a4 = -1;
  if (*(_DWORD *)(this + 116))
  {
    v7 = this;
    for (i = 0; i < *(unsigned int *)(v7 + 116); ++i)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v7 + 136) + 4 * i);
      if (v9 == 2)
      {
        if (!*a2)
        {
          *a3 = (MultiLanguageModel *)v7;
          *a4 = i;
          return this;
        }
        --*a2;
      }
      else if (*(_BYTE *)(v7 + 112))
      {
        if (v9 == 3 && i == *(_DWORD *)(v7 + 560))
        {
LABEL_13:
          this = MultiLanguageModel::getInternalFactoryCorrectiveLm(*(MultiLanguageModel **)(*(_QWORD *)(v7 + 40) + 8 * i), a2, a3, a4);
          if (*a4 != -1)
            return this;
        }
      }
      else if (v9 == 3)
      {
        goto LABEL_13;
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::getFactoryCorrectiveLmName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 22))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1660, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", a7, a8, a2);
  return *((_QWORD *)this + 10) + 16 * v9;
}

uint64_t MultiLanguageModel::getActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v18[2];
  int v19;
  _QWORD v20[2];

  if (*(_QWORD *)(a1 + 616))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1671, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"getActiveFactoryCorrectiveLms");
  v11 = *(unsigned int *)(a1 + 88);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v20, *(_DWORD *)(a1 + 88));
  v19 = 0;
  (*(void (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)a1 + 704))(a1, v20, &v19);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v18, v11);
  if ((_DWORD)v11)
    bzero(v18[0], v11);
  if (*(_DWORD *)(a2 + 8))
  {
    v14 = 0;
    do
    {
      v15 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1693, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
      v16 = v18[0];
      if (*((_BYTE *)v18[0] + v15))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1696, (uint64_t)"lm/multilm", 90, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v16 = v18[0];
      }
      v16[v15] = 1;
      *(_BYTE *)(*a3 + v14++) = *(_BYTE *)(v20[0] + v15);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_209919A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getActiveFactoryCorrectiveLmsInternal(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  void *v10;

  if (*(_DWORD *)(result + 116))
  {
    v5 = result;
    for (i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      v7 = *a3;
      if (v7 >= *(_DWORD *)(a2 + 8))
        return result;
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 136) + 4 * i);
      if (v8 == 2)
      {
        *(_BYTE *)(*(_QWORD *)a2 + v7) = *(_BYTE *)(*(_QWORD *)(v5 + 544) + i);
        *a3 = v7 + 1;
      }
      else
      {
        if (*(_BYTE *)(v5 + 112))
        {
          if (v8 != 3 || i != *(_DWORD *)(v5 + 560))
            continue;
        }
        else if (v8 != 3)
        {
          continue;
        }
        result = (*(uint64_t (**)(void *, uint64_t, _DWORD *))(*(_QWORD *)v10 + 704))(v10, a2, a3);
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::setActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  void *__b;

  if (*(_QWORD *)(a1 + 616))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1736, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"setActiveFactoryCorrectiveLms");
  v11 = *(unsigned int *)(a1 + 88);
  v18 = 0;
  v19 = 0;
  v17 = a1;
  if ((_DWORD)v11)
  {
    __b = 0;
    v12 = realloc_array(0, &__b, 4 * v11, 0, 0, 1);
    v13 = __b;
    v18 = __b;
    LODWORD(v19) = v11;
    HIDWORD(v19) = v12 >> 2;
    memset(__b, 255, 4 * v11);
  }
  else
  {
    v13 = 0;
    LODWORD(v19) = 0;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    v14 = 0;
    do
    {
      v15 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1752, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v13 = v18;
      }
      if (v13[v15] != -1)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1755, (uint64_t)"lm/multilm", 90, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v13 = v18;
      }
      v13[v15] = *(unsigned __int8 *)(*a3 + v14++);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  LODWORD(__b) = 0;
  MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(v17, &v18, &__b);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_209919CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t i;
  int v7;
  uint64_t v8;
  int v9;
  void *v11;

  if (*(_DWORD *)(result + 116))
  {
    v5 = result;
    for (i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v5 + 136) + 4 * i);
      if (v7 == 2)
      {
        v8 = *a3;
        v9 = *(_DWORD *)(*a2 + 4 * v8);
        if (v9 != -1)
          *(_BYTE *)(*(_QWORD *)(v5 + 544) + i) = v9 != 0;
        *a3 = v8 + 1;
      }
      else if (*(_BYTE *)(v5 + 112))
      {
        if (v7 == 3 && i == *(_DWORD *)(v5 + 560))
        {
LABEL_14:
          v11 = *(void **)(*(_QWORD *)(v5 + 40) + 8 * i);
          if (v11)
          result = MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(v11, a2, a3);
        }
      }
      else if (v7 == 3)
      {
        goto LABEL_14;
      }
    }
  }
  return result;
}

WordNgramTemplate **MultiLanguageModel::addWord(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WordNgramTemplate **result;

  if (*((_BYTE *)this + 112))
  {
    v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * a2);
    if (v11 != (_DWORD)a2)
    {
      v12 = *((unsigned int *)this + 29);
      if ((_DWORD)v12)
      {
        v13 = 0;
        while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v13) > v11
             || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v13) < v11)
        {
          if (v12 == ++v13)
            goto LABEL_11;
        }
        if (*((_DWORD *)this + 140) != (_DWORD)v13)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1803, (uint64_t)"lm/multilm", 116, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * a2));
      }
    }
LABEL_11:
    if ((_DWORD)a3 != 0xFFFFFF)
    {
      v14 = *((unsigned int *)this + 29);
      if ((_DWORD)v14)
      {
        v15 = 0;
        while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v15) > a3
             || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v15) < a3)
        {
          if (v14 == ++v15)
            goto LABEL_20;
        }
        if (*((_DWORD *)this + 140) != (_DWORD)v15)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1808, (uint64_t)"lm/multilm", 38, (uint64_t)"%u", a7, a8, a3);
      }
    }
  }
LABEL_20:
  if (*((_DWORD *)this + 29))
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v16);
      if (v17)
      {
        if (*((_BYTE *)this + 112) && v16 != *((_DWORD *)this + 140))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 368))(v17, a2);
        else
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 360))(v17, a2, a3);
      }
      ++v16;
    }
    while (v16 < *((unsigned int *)this + 29));
  }
  result = (WordNgramTemplate **)*((_QWORD *)this + 77);
  if (result)
    return (WordNgramTemplate **)WordLanguageModel::addWordDuringBuild(result, a2);
  return result;
}

unsigned int *MultiLanguageModel::addUnmappedWord(unsigned int *this, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unint64_t i;

  v2 = this[29];
  if ((_DWORD)v2)
  {
    v4 = this;
    for (i = 0; i < v2; ++i)
    {
      this = *(unsigned int **)(*((_QWORD *)v4 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)this + 368))(this, a2);
        v2 = v4[29];
      }
    }
  }
  return this;
}

void MultiLanguageModel::deleteWord(MultiLanguageModel *this, uint64_t a2, BOOL *a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;

  if (*((_BYTE *)this + 112))
  {
    v12 = *((unsigned int *)this + 29);
    if ((_DWORD)v12)
    {
      v13 = 0;
      while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v13) > a2
           || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v13) < a2)
      {
        if (v12 == ++v13)
          goto LABEL_10;
      }
      if (*((_DWORD *)this + 140) != (_DWORD)v13)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1856, (uint64_t)"lm/multilm", 39, (uint64_t)"%u", a7, a8, a2);
    }
LABEL_10:
    v14 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * a2);
    if (v14 != (_DWORD)a2)
    {
      v15 = *((unsigned int *)this + 29);
      if ((_DWORD)v15)
      {
        v16 = 0;
        while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v16) > v14
             || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v16) < v14)
        {
          if (v15 == ++v16)
            goto LABEL_19;
        }
        if (*((_DWORD *)this + 140) != (_DWORD)v16)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1861, (uint64_t)"lm/multilm", 40, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * a2));
      }
    }
  }
LABEL_19:
  v17 = *((unsigned int *)this + 29);
  if ((_DWORD)v17)
  {
    for (i = 0; i < v17; ++i)
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v19 && (!*((_BYTE *)this + 112) || i == *((_DWORD *)this + 140)))
      {
        (*(void (**)(uint64_t, uint64_t, BOOL *, BOOL *))(*(_QWORD *)v19 + 376))(v19, a2, a3, a4);
        v17 = *((unsigned int *)this + 29);
      }
    }
  }
}

unsigned int *MultiLanguageModel::recomputeRecentBufferHeadClonesAndCommonWords(unsigned int *this)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t i;

  v1 = this[29];
  if ((_DWORD)v1)
  {
    v2 = this;
    for (i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((_QWORD *)v2 + 5) + 8 * i);
      if (this && (!*((_BYTE *)v2 + 112) || i == v2[140]))
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 384))(this);
        v1 = v2[29];
      }
    }
  }
  return this;
}

unsigned int *MultiLanguageModel::recomputeRecentBufferRemainders(unsigned int *this)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t i;

  v1 = this[29];
  if ((_DWORD)v1)
  {
    v2 = this;
    for (i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((_QWORD *)v2 + 5) + 8 * i);
      if (this && (!*((_BYTE *)v2 + 112) || i == v2[140]))
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 392))(this);
        v1 = v2[29];
      }
    }
  }
  return this;
}

unsigned int *MultiLanguageModel::notifyEmptiedWordList(unsigned int *this)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t i;

  v1 = this[29];
  if ((_DWORD)v1)
  {
    v2 = this;
    for (i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((_QWORD *)v2 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 400))(this);
        v1 = v2[29];
      }
    }
  }
  return this;
}

void MultiLanguageModel::loadUnsTable(uint64_t a1, uint64_t a2, const char *a3, int a4, unsigned int a5, unsigned int a6, DgnTextFileParser *this, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13)
{
  void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *LineFieldString;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int LineFieldInteger;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD v50[2];
  const char *v51;
  int v52;

  if (*((_DWORD *)this + 10))
    v16 = (void *)*((_QWORD *)this + 4);
  else
    v16 = &unk_209A7A2E0;
  v17 = *(_DWORD *)(a1 + 116);
  v18 = *(_DWORD *)(a2 + 12);
  v19 = v17;
  if (v17 > v18)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v17 - v18, 0);
    v19 = *(_DWORD *)(a1 + 116);
  }
  *(_DWORD *)(a2 + 8) = v17;
  if (v19)
  {
    v20 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1953, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v21, v22, (char)v16);
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a8);
      if (strcmp(LineFieldString, a3))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1959, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v24, v25, (char)v16);
      if (*DgnTextFileParser::getLineFieldString(this, a9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1965, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v26, v27, (char)v16);
      v28 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::DgnString((DgnString *)&v51);
      v50[0] = 1;
      v50[1] = v20;
      SubDirExtension::appendToString((DgnString *)v50, (DgnString *)&v51);
      if (v52)
        v29 = v51;
      else
        v29 = (const char *)&unk_209A7A2E0;
      if (strcmp(v29, v28))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1973, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v34, v35, (char)v16);
      LineFieldInteger = DgnTextFileParser::getLineFieldInteger(this, a11, v30, v31, v32, v33, v34, v35);
      if ((LineFieldInteger & 0x80000000) != 0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1979, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v39, v40, (char)v16);
      }
      if (LineFieldInteger != a4 && (LineFieldInteger < a5 || LineFieldInteger > a6))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1984, (uint64_t)"lm/multilm", 71, (uint64_t)"%.500s %.500s %u %u", v36, v37, (char)v16);
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = LineFieldInteger;
      if (DgnTextFileParser::getLineFieldReal(this, a12) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1991, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v41, v42, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a13))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1996, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v43, v44, (char)v16);
      }
      DgnString::~DgnString((DgnString *)&v51);
      ++v20;
    }
    while (v20 < *(unsigned int *)(a1 + 116));
  }
}

void sub_20991A624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

DgnString *SubDirExtension::appendToString(DgnString *this, DgnString *a2)
{
  unsigned int v2;
  DgnString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)this - 1;
  if (v2 <= 3)
  {
    v4 = this;
    this = DgnString::operator+=(a2, off_24C21E3C8[v2]);
    if (*((_DWORD *)v4 + 1) != -1)
      return (DgnString *)DgnString::printfAppend(a2, "%d", v5, v6, v7, *((unsigned int *)v4 + 1));
  }
  return this;
}

void MultiLanguageModel::loadIntTable(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, int a6, DgnTextFileParser *this, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13)
{
  _QWORD *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *LineFieldString;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int LineFieldInteger;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD v50[2];
  const char *v51;
  int v52;

  v15 = (_QWORD *)a2;
  if (*((_DWORD *)this + 10))
    v16 = (void *)*((_QWORD *)this + 4);
  else
    v16 = &unk_209A7A2E0;
  v17 = *(_DWORD *)(a1 + 116);
  v18 = *(_DWORD *)(a2 + 12);
  v19 = v17;
  if (v17 > v18)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v17 - v18, 0);
    v19 = *(_DWORD *)(a1 + 116);
  }
  *((_DWORD *)v15 + 2) = v17;
  if (v19)
  {
    v20 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2023, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v21, v22, (char)v16);
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a8);
      if (strcmp(LineFieldString, a3))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2029, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v24, v25, (char)v16);
      if (*DgnTextFileParser::getLineFieldString(this, a9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2035, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v26, v27, (char)v16);
      v28 = v15;
      v29 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::DgnString((DgnString *)&v51);
      v50[0] = 1;
      v50[1] = v20;
      SubDirExtension::appendToString((DgnString *)v50, (DgnString *)&v51);
      if (v52)
        v30 = v51;
      else
        v30 = (const char *)&unk_209A7A2E0;
      if (strcmp(v30, v29))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2043, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v35, v36, (char)v16);
      LineFieldInteger = DgnTextFileParser::getLineFieldInteger(this, a11, v31, v32, v33, v34, v35, v36);
      v40 = LineFieldInteger;
      if (LineFieldInteger != a4 && (LineFieldInteger < a5 || LineFieldInteger > a6))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2050, (uint64_t)"lm/multilm", 72, (uint64_t)"%.500s %.500s %u %d", v38, v39, (char)v16);
      v15 = v28;
      *(_DWORD *)(*v28 + 4 * v20) = v40;
      if (DgnTextFileParser::getLineFieldReal(this, a12) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2057, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v41, v42, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a13))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2062, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v43, v44, (char)v16);
      }
      DgnString::~DgnString((DgnString *)&v51);
      ++v20;
    }
    while (v20 < *(unsigned int *)(a1 + 116));
  }
}

void sub_20991A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadRealTable(uint64_t a1, uint64_t a2, DgnString *a3, const char *a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, unsigned int a12, unsigned int a13, unsigned int a14)
{
  void *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *LineFieldString;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double LineFieldReal;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD v58[2];
  const char *v59;
  int v60;
  const char *v61;
  int v62;

  if (*(_DWORD *)(a5 + 40))
    v20 = *(void **)(a5 + 32);
  else
    v20 = &unk_209A7A2E0;
  DgnString::DgnString((DgnString *)&v61);
  v21 = *(_DWORD *)(a1 + 116);
  v22 = *(_DWORD *)(a2 + 12);
  v23 = v21;
  if (v21 > v22)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a2, v21 - v22, 0);
    v23 = *(_DWORD *)(a1 + 116);
  }
  *(_DWORD *)(a2 + 8) = v21;
  if (v23)
  {
    v24 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine((DgnTextFileParser *)a5) & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2091, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v25, v26, (char)v20);
      LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a6);
      if (strcmp(LineFieldString, a4))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2097, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v28, v29, (char)v20);
      v30 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a7);
      v31 = v30;
      if (!a3 || v24)
      {
        if (v62)
          v34 = v61;
        else
          v34 = (const char *)&unk_209A7A2E0;
        if (strcmp(v34, v31))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2121, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v35, v36, (char)v20);
      }
      else
      {
        if ((isValidName(v30) & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2106, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v32, v33, (char)v20);
        DgnString::operator=(a3, v31);
        DgnString::operator=((DgnString *)&v61, v31);
      }
      v37 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a8);
      DgnString::DgnString((DgnString *)&v59);
      v58[0] = 1;
      v58[1] = v24;
      SubDirExtension::appendToString((DgnString *)v58, (DgnString *)&v59);
      if (v60)
        v38 = v59;
      else
        v38 = (const char *)&unk_209A7A2E0;
      if (strcmp(v38, v37))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2130, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v43, v44, (char)v20);
      if (DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)a5, a12, v39, v40, v41, v42, v43, v44))
      {
        DgnTextFile::getCurrentLine((DgnTextFile *)a5);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2135, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v45, v46, (char)v20);
      }
      LineFieldReal = DgnTextFileParser::getLineFieldReal((DgnTextFileParser *)a5, a13);
      v50 = LineFieldReal;
      if (LineFieldReal != a9 && (LineFieldReal < a10 || LineFieldReal > a11))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2143, (uint64_t)"lm/multilm", 73, (uint64_t)"%.500s %.500s %.500s %u %f", v47, v48, (char)v20);
      *(double *)(*(_QWORD *)a2 + 8 * v24) = v50;
      if (*DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a14))
      {
        DgnTextFile::getCurrentLine((DgnTextFile *)a5);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2150, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v51, v52, (char)v20);
      }
      DgnString::~DgnString((DgnString *)&v59);
      ++v24;
    }
    while (v24 < *(unsigned int *)(a1 + 116));
  }
  DgnString::~DgnString((DgnString *)&v61);
}

void sub_20991ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadStringTable(uint64_t a1, uint64_t a2, const char *a3, DgnTextFileParser *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *LineFieldString;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _DWORD v48[2];
  const char *v49;
  int v50;

  v13 = &unk_209A7A2E0;
  if (*((_DWORD *)this + 10))
    v13 = (void *)*((_QWORD *)this + 4);
  v14 = *(_DWORD *)(a1 + 116);
  v15 = *(_DWORD *)(a2 + 12);
  if (v14 > v15)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v14 - v15, 0);
  v16 = *(unsigned int *)(a2 + 8);
  v17 = (int)v16;
  if (v14 >= v16)
  {
    if (v14 > v16)
    {
      v19 = v14 - v16;
      v20 = 16 * v16;
      do
      {
        DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + v20));
        v20 += 16;
        --v19;
      }
      while (v19);
    }
  }
  else if ((int)v16 > (int)v14)
  {
    v18 = 16 * (int)v16 - 16;
    do
    {
      --v17;
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a2 + v18));
      v18 -= 16;
    }
    while (v17 > (int)v14);
  }
  *(_DWORD *)(a2 + 8) = v14;
  v21 = (const char *)&unk_209A7A2E0;
  if (*(_DWORD *)(a1 + 116))
  {
    v22 = 0;
    v23 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2174, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v24, v25, (char)v13);
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a5);
      if (strcmp(LineFieldString, a3))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2180, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v27, v28, (char)v13);
      if (*DgnTextFileParser::getLineFieldString(this, a6))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2186, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v29, v30, (char)v13);
      v31 = DgnTextFileParser::getLineFieldString(this, a7);
      DgnString::DgnString((DgnString *)&v49);
      v48[0] = 1;
      v48[1] = v23;
      SubDirExtension::appendToString((DgnString *)v48, (DgnString *)&v49);
      if (v50)
        v21 = v49;
      if (strcmp(v21, v31))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2194, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v36, v37, (char)v13);
      v21 = (const char *)&unk_209A7A2E0;
      if (DgnTextFileParser::getLineFieldInteger(this, a8, v32, v33, v34, v35, v36, v37))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2199, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v38, v39, (char)v13);
      }
      if (DgnTextFileParser::getLineFieldReal(this, a9) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2204, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v40, v41, (char)v13);
      }
      v42 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::operator=((DgnString *)(*(_QWORD *)a2 + v22), v42);
      DgnString::~DgnString((DgnString *)&v49);
      ++v23;
      v22 += 16;
    }
    while (v23 < *(unsigned int *)(a1 + 116));
  }
}

void sub_20991B15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadLM(MultiLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, uint64_t a6, uint64_t a7, BOOL a8, unsigned int a9, unsigned int a10, __int16 a11, BOOL *a12, BOOL *a13, double *a14)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v53[2];
  BOOL v54;

  if ((_DWORD)a7
    && ((DFile::subFileExists((uint64_t)a2, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x49u)))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2236, (uint64_t)"lm/multilm", 118, (uint64_t)"%s", v19, v20, (char)&errStr_lm_multilm_E_RECENT_BUFFER_WITH_FIXED_SCORING);
  }
  v54 = 0;
  if (DFile::subFileExists((uint64_t)a2, 0x28u))
  {
    if ((_DWORD)a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2242, (uint64_t)"lm/multilm", 98, (uint64_t)"%s", v21, v22, (char)&errStr_lm_multilm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    MultiLanguageModel::loadMultiBinary(this, a2, a4, &v54);
    MultiLanguageModel::loadComponentLMSubFiles(this, 1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v54);
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x29u))
  {
    if (*((_BYTE *)this + 24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2262, (uint64_t)"lm/multilm", 119, (uint64_t)"%.500s", v23, v24, (char)"found mls text file");
    v53[0] = 0;
    v53[1] = 0;
    MultiLanguageModel::loadMultiText((uint64_t)this, (uint64_t)a2, a7, (uint64_t)v53, &v54);
    MultiLanguageModel::loadComponentLMSubFiles(this, 0, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v54);
    if (*(_WORD *)((char *)this + 113))
    {
      (*(void (**)(MultiLanguageModel *, _QWORD *))(*(_QWORD *)this + 496))(this, v53);
      if (*((_BYTE *)this + 114))
      {
        if ((a7 & 1) == 0)
        {
          v31 = (_QWORD *)((char *)this + 200);
          v32 = *((unsigned int *)this + 44);
          v33 = *((_DWORD *)this + 53);
          if (v32 > v33)
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 200, v32 - v33, 0);
          v34 = *((unsigned int *)this + 52);
          if (v34 <= v32)
          {
            if (v34 < v32)
            {
              v37 = v32 - v34;
              v38 = 16 * v34;
              do
              {
                v39 = (_QWORD *)(*v31 + v38);
                *v39 = 0;
                v39[1] = 0;
                v38 += 16;
                --v37;
              }
              while (v37);
            }
          }
          else if ((int)v34 > (int)v32)
          {
            v35 = (int)v34;
            v36 = 16 * (int)v34 - 16;
            do
            {
              --v35;
              DgnPrimArray<unsigned int>::~DgnPrimArray(*v31 + v36);
              v36 -= 16;
            }
            while (v35 > (int)v32);
          }
          *((_DWORD *)this + 52) = v32;
          v40 = (_QWORD *)((char *)this + 216);
          v41 = *((unsigned int *)this + 44);
          v42 = *((_DWORD *)this + 57);
          v43 = v41 - v42;
          if (v41 > v42)
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 216, v43, 0);
          v44 = *((unsigned int *)this + 56);
          if (v44 <= v41)
          {
            if (v44 < v41)
            {
              v47 = v41 - v44;
              v48 = 16 * v44;
              do
              {
                v49 = (_QWORD *)(*v40 + v48);
                *v49 = 0;
                v49[1] = 0;
                v48 += 16;
                --v47;
              }
              while (v47);
            }
          }
          else if ((int)v44 > (int)v41)
          {
            v45 = (int)v44;
            v46 = 16 * (int)v44 - 16;
            do
            {
              --v45;
              DgnPrimArray<unsigned int>::~DgnPrimArray(*v40 + v46);
              v46 -= 16;
            }
            while (v45 > (int)v41);
          }
          *((_DWORD *)this + 56) = v41;
          MultiLanguageModel::adjustNamedWeightsSets((uint64_t)this, v43, v25, v26, v27, v28, v29, v30);
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v53);
  }
}

void sub_20991B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadMultiBinary(MultiLanguageModel *this, DFile *a2, DFileChecksums *a3, BOOL *a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  uint64_t CurrentSubDirComponents;
  int v22;
  unsigned int v23[2];
  _BYTE v24[16];
  uint64_t v25;

  v25 = 0;
  v8 = OpenAndReadMrecHeader((uint64_t)a2, 0x28u, 1, "LMMULBIN", (_DWORD *)&v25 + 1, &v25);
  DgnString::DgnString((DgnString *)v24);
  if (*(_DWORD *)(v8 + 24))
    v9 = *(char **)(v8 + 16);
  else
    v9 = (char *)&unk_209A7A2E0;
  DgnString::operator=((DgnString *)v24, v9);
  DgnString::operator+=((DgnString *)v24, " subfile of ");
  if (*((_DWORD *)a2 + 6))
    v10 = (char *)*((_QWORD *)a2 + 2);
  else
    v10 = (char *)&unk_209A7A2E0;
  DgnString::operator+=((DgnString *)v24, v10);
  *a4 = 0;
  v13 = v25;
  if (v25 == 0x1300000005)
  {
    *a4 = 1;
    v14 = 19;
  }
  else
  {
    if (*((_DWORD *)a2 + 6))
      v15 = (char *)*((_QWORD *)a2 + 2);
    else
      v15 = (char *)&unk_209A7A2E0;
    MrecHeaderCheckVersions(v15, "LMMULBIN", HIDWORD(v25), v25, 0x18u, 6u);
    v13 = v25;
    v14 = HIDWORD(v25);
  }
  MrecHeaderCheckLatestVersionIfShared(a2, "LMMULBIN", v14, v13, 24, 6, v11, v12);
  *(_QWORD *)v23 = 0;
  readObject(v8, v23, &v23[1]);
  v16 = v23[0];
  v17 = *((_DWORD *)this + 37);
  v18 = v23[0];
  if (v23[0] > v17)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 136, v23[0] - v17, 0);
    v18 = v23[0];
  }
  *((_DWORD *)this + 36) = v16;
  if (v18)
  {
    v19 = 0;
    do
    {
      v22 = 0;
      readObject(v8, &v22, &v23[1]);
      v20 = v22 - 1;
      if ((v22 - 2) >= 4)
        v20 = 0;
      *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v19++) = v20;
    }
    while (v19 < v23[0]);
  }
  readObject(v8, (_DWORD *)this + 29, &v23[1]);
  readObject(v8, (BOOL *)this + 112, &v23[1]);
  readObject(v8, (BOOL *)this + 113, &v23[1]);
  readObject(v8, (BOOL *)this + 114, &v23[1]);
  readObject((DgnStream *)v8, (MultiLanguageModel *)((char *)this + 120), &v23[1]);
  readObject(v8, (BOOL *)this + 152, &v23[1]);
  readObject(v8, (_DWORD *)this + 39, &v23[1]);
  readObject(v8, (_DWORD *)this + 40, &v23[1]);
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 168, &v23[1]);
  readObject<DgnPrimArray<double>>((DgnStream *)v8, (uint64_t)this + 184, &v23[1]);
  readObject<DgnPrimArray<double>>((DgnStream *)v8, (uint64_t)this + 200, &v23[1]);
  readObject<DgnPrimArray<short>>((DgnStream *)v8, (uint64_t)this + 216, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 232, &v23[1]);
  readObject(v8, (_DWORD *)this + 70, &v23[1]);
  readObject(v8, (_DWORD *)this + 71, &v23[1]);
  if (*a4)
    readObject<WordDummySpec>((DgnStream *)v8, (uint64_t)this + 288, &v23[1]);
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 352, &v23[1]);
  if (!*a4 || (readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 368, &v23[1]), !*a4))
    readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 320, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 384, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 400, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 416, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 432, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 448, &v23[1]);
  readObject<short>((DgnStream *)v8, (uint64_t)this + 464, &v23[1]);
  readObject<short>((DgnStream *)v8, (uint64_t)this + 480, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 496, &v23[1]);
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 512, &v23[1]);
  readObject<int>((DgnStream *)v8, (uint64_t)this + 528, &v23[1]);
  readObject<BOOL>((DgnStream *)v8, (uint64_t)this + 544, &v23[1]);
  readObject(v8, (_DWORD *)this + 140, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 568, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 584, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 600, &v23[1]);
  readObjectChecksumAndVerify((DgnStream *)v8, v23[1]);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x28u, v23[1]);
  if (v8)
  {
    (**(void (***)(uint64_t))v8)(v8);
    MemChunkFree((_QWORD *)v8, 0);
  }
  DgnString::~DgnString((DgnString *)v24);
}

void sub_20991B974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadComponentLMSubFiles(MultiLanguageModel *this, uint64_t a2, DFile *a3, DFile *a4, DFileChecksums *a5, DgnSharedMemStream *a6, uint64_t a7, uint64_t a8, BOOL a9, unsigned int a10, unsigned int a11, __int16 a12, BOOL *a13, BOOL *a14, BOOL a15)
{
  uint64_t v15;
  unsigned int v17;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  WordNgramBuildSpec *v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL8 v40;
  DFileChecksums *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  WordLanguageModel *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WordLanguageModel *v58;
  unsigned int v59;
  double *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD *v69;
  unint64_t v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  long double v75;
  int v76;
  long double v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _DWORD *v85;
  char *v86;
  char *v87;
  int v88;
  CombineTable *v89;
  unsigned int v90;
  char *v91;
  int v93;
  unsigned int v94;
  __n128 v96[2];
  uint64_t v97;
  double v98;
  _DWORD v99[4];

  v94 = a7;
  v15 = a2;
  if (*((_DWORD *)this + 29))
  {
    v17 = a8;
    v20 = 0;
    v21 = 0;
    v88 = a2 ^ 1;
    v89 = (MultiLanguageModel *)((char *)this + 704);
    v87 = (char *)this + 168;
    v85 = (_DWORD *)((char *)this + 232);
    v93 = a2 & a15;
    v91 = (char *)this + 40;
    v86 = (char *)this + 304;
    v90 = a8;
    while (1)
    {
      v99[0] = 1;
      v99[1] = v20;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v99, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
      if (a4)
        DFile::pushCurrentSubDirComponent(a4, (const SubDirExtension *)v99, v22, v23, v24, v25, v26, v27);
      MultiLanguageModel::verifySubdirContents(this, a3, v20, v15, a15);
      if ((DFile::subFileExists((uint64_t)a3, 0x6Du) & 1) == 0
        && (DFile::subFileExists((uint64_t)a3, 0x6Bu) & 1) == 0
        && !DFile::subFileExists((uint64_t)a3, 0x6Au))
      {
        goto LABEL_16;
      }
      if ((v21 & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3081, (uint64_t)"lm/multilm", 34, (uint64_t)"%s", v28, v29, (char)&errStr_lm_multilm_E_FIRST_LM_WORDNGRAMBUILDSPEC);
      if (!a15)
        break;
      v30 = MemChunkAlloc(0x20uLL, 0);
      WordDummySpec::WordDummySpec((WordDummySpec *)v30);
      if (DFile::subFileExists((uint64_t)a3, 0x6Du))
        WordNgramBuildSpec::loadWordDummySpecText((WordNgramBuildSpec *)v30, a3);
LABEL_17:
      if (*((_BYTE *)this + 112))
      {
        v32 = 1;
        goto LABEL_25;
      }
      if ((DFile::subFileExists((uint64_t)a3, 0x73u) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x6Fu) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x70u) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x29u) & 1) != 0
        || DFile::subFileExists((uint64_t)a3, 0x28u))
      {
        v32 = *((unsigned __int8 *)this + 112);
        if (*((_BYTE *)this + 112))
        {
LABEL_25:
          if (*((_DWORD *)this + 144) >= 2u)
          {
            v33 = *((_QWORD *)this + 71);
            if (v20)
            {
              v34 = (unsigned int *)(v33 + 4 * v20);
              v35 = (unsigned int *)(*((_QWORD *)this + 73) + 4 * v20);
              v36 = 1;
            }
            else
            {
              v36 = 0;
              v34 = (unsigned int *)(v33 + 4);
              v35 = (unsigned int *)(*((_QWORD *)this + 73) + 4 * (*((_DWORD *)this + 148) - 1));
            }
            v37 = *v34;
            v38 = *v35;
            goto LABEL_31;
          }
        }
        v36 = a9;
        v37 = a10;
        v38 = a11;
LABEL_31:
        v39 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20);
        if (v39 > 3 || v39 == 1)
        {
          v41 = 0;
          v40 = 0;
          v98 = -1.0;
        }
        else
        {
          v98 = -1.0;
          v40 = *((_BYTE *)this + 24) != 0;
          v41 = a6;
        }
        v42 = v17;
        if (v32)
        {
          v42 = v17;
          if ((v17 & 1) == 0)
            v42 = v20 != *((_DWORD *)this + 140);
        }
        v43 = LanguageModel::CreateAndLoadLanguageModel(a3, a4, a5, v41, (DgnSharedMemStream *)v40, v94, v32 != 0, v42, *((_DWORD *)this + 8), v84, *((const WordList **)this + 2), v36, v37, v38, a12, a13, a14, &v98);
        v44 = v43;
        if (v20)
        {
          if ((v15 & 1) != 0)
            goto LABEL_40;
LABEL_44:
          if ((*(unsigned int (**)(uint64_t *))(*v44 + 608))(v44))
          {
            v96[0].n128_u64[0] = 0;
            v97 = 0;
            (*(void (**)(uint64_t *, __n128 *, char *, uint64_t *))(*v44 + 616))(v44, v96, (char *)&v97 + 4, &v97);
            if (*((_BYTE *)this + 152))
            {
              if (!DgnArray<DgnString>::operator==((uint64_t)v87, (uint64_t *)v96[0].n128_u64[0])
                || __PAIR64__(*((_DWORD *)this + 39), *((_DWORD *)this + 40)) != v97)
              {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3188, (uint64_t)"lm/multilm", 51, (uint64_t)"%s", v46, v47, (char)&errStr_lm_multilm_E_NAMED_WEIGHTS_MISMATCH);
              }
            }
            else
            {
              *((_BYTE *)this + 152) = 1;
              DgnArray<DgnString>::copyArraySlice((uint64_t)v87, v96[0].n128_u64[0], 0, *(_DWORD *)(v96[0].n128_u64[0] + 8));
              v48 = v97;
              *((_DWORD *)this + 39) = HIDWORD(v97);
              *((_DWORD *)this + 40) = v48;
              if (*((_DWORD *)this + 44))
              {
                v49 = 0;
                do
                {
                  IdMgr<unsigned int>::getNextId(v85);
                  ++v49;
                }
                while (v49 < *((_DWORD *)this + 44));
              }
            }
          }
          v50 = v15;
          if (v51)
          {
            v58 = v51;
            v59 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20);
            if (v59 >= 3)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3204, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v56, v57, v20);
              v59 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20);
            }
            if (v59 == 1)
            {
              if (a15)
              {
                (*(void (**)(WordLanguageModel *))(*(_QWORD *)v58 + 704))(v58);
                WordDummySpec::WordDummySpec((WordDummySpec *)v96);
                WordLanguageModel::fillInWordDummySpec(v58, v96);
                v30 = MemChunkAlloc(0x20uLL, 0);
                WordNgramBuildSpec::WordNgramBuildSpec((WordNgramBuildSpec *)v30, (const WordDummySpec *)v96);
                *v60 = v98;
              }
              else
              {
                WordLanguageModel::verifyConsistentWithWordNgramBuildSpec(v58, (const WordNgramBuildSpec *)v30, v52, v53, v54, v55, v56, v57);
              }
            }
            goto LABEL_69;
          }
          if (v61)
          {
            v64 = v61;
            if (*(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20) != 3)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3232, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v62, v63, v20);
            if (*((_BYTE *)this + 112) && v20 != *((_DWORD *)this + 140) && v64[114])
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3242, (uint64_t)"lm/multilm", 97, (uint64_t)"%s", v62, v63, (char)&errStr_lm_multilm_E_NO_INTERPOLATED_IN_NON_DEFAULT_DISPATCH);
LABEL_69:
            v15 = v50;
          }
          else
          {
            if (*(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20) != 4)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3248, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v65, v66, v20);
          }
          v17 = v90;
        }
        else
        {
          v45 = *((_DWORD *)v43 + 8);
          *((_DWORD *)this + 8) = v45;
          CombineTable::initCombineTable((uint64_t)v89, (double)v45);
          if ((v15 & 1) == 0)
            goto LABEL_44;
LABEL_40:
          if (v30 && a15)
            *v30 = *(_QWORD *)&v98;
        }
        v21 = 1;
        goto LABEL_72;
      }
      v44 = 0;
LABEL_72:
      if (v93 && *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v20) == 1)
      {
        v30 = MemChunkAlloc(0x20uLL, 0);
        WordNgramBuildSpec::WordNgramBuildSpec((WordNgramBuildSpec *)v30, (const WordDummySpec *)(*((_QWORD *)this + 36) + 32 * v20));
      }
      v67 = *((_DWORD *)this + 12);
      if (v67 == *((_DWORD *)this + 13))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v91, 1, 1);
        v67 = *((_DWORD *)this + 12);
      }
      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v67) = v44;
      *((_DWORD *)this + 12) = v67 + 1;
      if (!*((_BYTE *)this + 112))
      {
        v68 = *((_DWORD *)this + 78);
        if (v68 == *((_DWORD *)this + 79))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v86, 1, 1);
          v68 = *((_DWORD *)this + 78);
        }
        *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v68) = v30;
        *((_DWORD *)this + 78) = v68 + 1;
      }
      DFile::popCurrentSubDirComponent((uint64_t)a3);
      if (a4)
        DFile::popCurrentSubDirComponent((uint64_t)a4);
      if (++v20 >= (unint64_t)*((unsigned int *)this + 29))
        goto LABEL_87;
    }
    if ((DFile::subFileExists((uint64_t)a3, 0x6Bu) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x6Au))
    {
      v30 = MemChunkAlloc(0x20uLL, 0);
      WordDummySpec::WordDummySpec((WordDummySpec *)v30);
      WordNgramBuildSpec::loadWordNgramBuildSpec(v31, a3, a5, v88);
      goto LABEL_17;
    }
LABEL_16:
    v30 = 0;
    goto LABEL_17;
  }
  v21 = 0;
LABEL_87:
  v69 = (_QWORD *)*((_QWORD *)this + 36);
  if (v69)
  {
    MemChunkFree(v69, 0);
    *((_QWORD *)this + 36) = 0;
  }
  *((_QWORD *)this + 37) = 0;
  if ((v21 & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3286, (uint64_t)"lm/multilm", 31, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_SUB_LANGUAGE_MODELS);
  if (!*((_BYTE *)this + 112) && *((_DWORD *)this + 29))
  {
    v70 = 0;
    do
    {
      if ((v15 & 1) == 0)
      {
        if (*((_BYTE *)this + 113))
        {
          v71 = *((_DWORD *)this + 126);
          if (v71 == *((_DWORD *)this + 127))
          {
            DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 496, 1, 1);
            v71 = *((_DWORD *)this + 126);
          }
          *(_QWORD *)(*((_QWORD *)this + 62) + 8 * v71) = 0;
          v72 = (char *)this + 504;
        }
        else
        {
          v73 = *((_DWORD *)this + 98);
          if (v73 == *((_DWORD *)this + 99))
          {
            DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 384, 1, 1);
            v73 = *((_DWORD *)this + 98);
          }
          *(_QWORD *)(*((_QWORD *)this + 48) + 8 * v73) = 0;
          *((_DWORD *)this + 98) = v73 + 1;
          v74 = *((_DWORD *)this + 118);
          if (v74 == *((_DWORD *)this + 119))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)this + 464, 1, 1);
            v74 = *((_DWORD *)this + 118);
          }
          *(_WORD *)(*((_QWORD *)this + 58) + 2 * v74) = 2000;
          *((_DWORD *)this + 118) = v74 + 1;
          v75 = *(double *)(*((_QWORD *)this + 54) + 8 * v70);
          if (v75 == -1.0)
          {
            LOWORD(v76) = 20000;
          }
          else if (v75 == 0.0)
          {
            LOWORD(v76) = 2000;
          }
          else
          {
            v77 = DgnLog(v75);
            LODWORD(v78) = *((_DWORD *)this + 8);
            v76 = (int)(0.5 - v77 * (double)v78);
          }
          v71 = *((_DWORD *)this + 122);
          if (v71 == *((_DWORD *)this + 123))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)this + 480, 1, 1);
            v71 = *((_DWORD *)this + 122);
          }
          *(_WORD *)(*((_QWORD *)this + 60) + 2 * v71) = v76;
          v72 = (char *)this + 488;
        }
        *(_DWORD *)v72 = v71 + 1;
      }
      ++v70;
    }
    while (v70 < *((unsigned int *)this + 29));
  }
  if (!*((_DWORD *)this + 7))
  {
    if (*((_BYTE *)this + 152))
      (*(void (**)(MultiLanguageModel *))(*(_QWORD *)this + 624))(this);
    MultiLanguageModel::getFactoryCorrectiveLmNames(this, (unsigned int *)this + 20);
    MultiLanguageModel::getTopicLmSlotNames(this, (unsigned int *)this + 24);
    if (*((_DWORD *)this + 26))
    {
      v79 = 0;
      v80 = 0;
      do
      {
        v81 = DgnArray<DgnString>::find((unsigned int *)this + 20, *((_QWORD *)this + 12) + v79);
        if (v81 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3337, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v82, v83, v81);
        ++v80;
        v79 += 16;
      }
      while (v80 < *((unsigned int *)this + 26));
    }
  }
}

void MultiLanguageModel::loadMultiText(uint64_t a1, uint64_t a2, int a3, uint64_t a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t FileVersion;
  void *v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int HeaderField;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t i;
  const char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  unint64_t j;
  const char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  BOOL *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t *v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int k;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unint64_t v145;
  double v146;
  double v147;
  double v148;
  char v149;
  uint64_t v150;
  int v151;
  const char *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  int v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  double v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  double v178;
  char v179;
  char v180;
  double v181;
  double v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  double v188;
  _BOOL4 v191;
  double v192;
  DFile *v193;
  unsigned int *v194;
  _QWORD *v195;
  char v196;
  void *v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[2];
  _QWORD v204[2];
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE v208[40];
  int v209;
  void *v210[2];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v208);
  v193 = (DFile *)a2;
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v208, a2, 0x29u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v208, "MultiLanguageModelSpec");
  v206 = 0;
  v207 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v208, sMLS_Versions, (uint64_t)&v206, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v208, (unsigned int *)&v206, v13, v14, v15, v16, v17, v18);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v206);
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v208);
  v185 = a4;
  if (v209)
    LOBYTE(v20) = v208[32];
  else
    v20 = &unk_209A7A2E0;
  v196 = (char)v20;
  DgnString::DgnString((DgnString *)&v206);
  DgnTextFile::getHeaderField((DgnTextFile *)v208, "MultiLMType", (DgnString *)&v206, 1);
  if ((_DWORD)v207)
    v21 = (const char *)v206;
  else
    v21 = (const char *)&unk_209A7A2E0;
  v22 = strcmp(v21, "Dispatch");
  *(_BYTE *)(a1 + 112) = v22 == 0;
  v23 = strcmp(v21, "LogLinear");
  *(_BYTE *)(a1 + 113) = v23 == 0;
  v24 = strcmp(v21, "InterpolatedLinear");
  *(_BYTE *)(a1 + 114) = v24 == 0;
  if (v22 && v23 && v24)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2416, (uint64_t)"lm/multilm", 66, (uint64_t)"%.500s %.500s", v25, v26, v196);
  DgnString::~DgnString((DgnString *)&v206);
  if (*(_BYTE *)(a1 + 112) && *(_DWORD *)(a1 + 28))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2420, (uint64_t)"lm/multilm", 67, (uint64_t)"%.500s", v27, v28, v196);
  v29 = a3 ^ 1;
  if (!*(_BYTE *)(a1 + 114))
    v29 = 0;
  *(_BYTE *)(a1 + 152) = v29;
  if ((_DWORD)FileVersion == 19)
  {
    v30 = HIDWORD(FileVersion) == 5;
    v31 = HIDWORD(FileVersion) == 5;
  }
  else
  {
    v30 = 0;
    v31 = (_DWORD)FileVersion == 22 && HIDWORD(FileVersion) == 6;
  }
  *a5 = v31;
  v194 = (unsigned int *)(a1 + 116);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfSubDirectories", (unsigned int *)(a1 + 116), 1, 1u, 0x3E8u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfFactoryWeightsNames", (unsigned int *)(a1 + 156), 1, 0, 0x3E8u);
  v205 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfClientWeightsNames", &v205, 1, 0, 0x3E8u);
  v34 = v205 + *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a1 + 160) = v34;
  if (a3 && v34)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2441, (uint64_t)"lm/multilm", 76, (uint64_t)"%.500s", v32, v33, v196);
  HeaderField = DgnTextFile::getHeaderField((DgnTextFile *)v208, "RecentBufferLMPath", (DgnString *)(a1 + 120), 0);
  if (!DFile::subFileExists((uint64_t)v193, 0x4Au))
  {
    if (HeaderField == DFile::subFileExists((uint64_t)v193, 0x49u))
      goto LABEL_29;
    goto LABEL_28;
  }
  if ((HeaderField & 1) == 0)
LABEL_28:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2451, (uint64_t)"lm/multilm", 54, (uint64_t)"%s", v41, v42, (char)&errStr_lm_multilm_E_RECENT_BUFFER_MISMATCH);
LABEL_29:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v208, v36, v37, v38, v39, v40, v41, v42);
  v206 = 0;
  v207 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v208, (uint64_t)&v206);
  v191 = v30;
  v204[0] = 0;
  v204[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v208, (unint64_t)v204);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v208, 6, v43, v44, v45, v46, v47, v48);
  v49 = v206;
  if (*(_DWORD *)(v206 + 8))
    v50 = *(const char **)v206;
  else
    v50 = (const char *)&unk_209A7A2E0;
  if (strcmp(v50, "TableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2481, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v51, v52, v196);
    v49 = v206;
  }
  if (*(_DWORD *)v204[0])
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2484, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v51, v52, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v49 + 24))
    v53 = *(const char **)(v49 + 16);
  else
    v53 = (const char *)&unk_209A7A2E0;
  if (strcmp(v53, "WeightsName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2489, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v54, v55, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 4))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2492, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v54, v55, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v49 + 40))
    v56 = *(const char **)(v49 + 32);
  else
    v56 = (const char *)&unk_209A7A2E0;
  if (strcmp(v56, "SubDirectory"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2497, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v57, v58, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2500, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v57, v58, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v49 + 56))
    v59 = *(const char **)(v49 + 48);
  else
    v59 = (const char *)&unk_209A7A2E0;
  if (strcmp(v59, "IntValue"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2505, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v60, v61, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 12) != 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2508, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v60, v61, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v49 + 72))
    v62 = *(const char **)(v49 + 64);
  else
    v62 = (const char *)&unk_209A7A2E0;
  if (strcmp(v62, "RealValue"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2513, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v63, v64, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 16) != 2)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2516, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v63, v64, v196);
    v49 = v206;
  }
  if (*(_DWORD *)(v49 + 88))
    v65 = *(const char **)(v49 + 80);
  else
    v65 = (const char *)&unk_209A7A2E0;
  if (strcmp(v65, "StrValue"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2521, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v66, v67, v196);
  if (*(_DWORD *)(v204[0] + 20))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2524, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v66, v67, v196);
  v203[0] = 0;
  v203[1] = 0;
  MultiLanguageModel::loadStringTable(a1, (uint64_t)v203, "SlotType", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
  if (*(_BYTE *)(a1 + 113))
  {
    MultiLanguageModel::loadStringTable(a1, a1 + 512, "CorrectiveName", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    if (*v194)
    {
      v70 = 0;
      for (i = 0; i < *v194; ++i)
      {
        if (*(_DWORD *)(v203[0] + v70 + 8))
          v72 = *(const char **)(v203[0] + v70);
        else
          v72 = (const char *)&unk_209A7A2E0;
        v73 = strcmp(v72, "FactoryCorrectiveWord");
        v74 = *(_QWORD *)(a1 + 512);
        if (v73)
        {
          if (*(_DWORD *)(v74 + v70 + 8) < 2u)
            goto LABEL_85;
        }
        else
        {
          v75 = v74 + v70;
          if (*(_DWORD *)(v75 + 8))
            v76 = *(const char **)v75;
          else
            v76 = (const char *)&unk_209A7A2E0;
          if ((isValidName(v76) & 1) != 0)
            goto LABEL_85;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2558, (uint64_t)"lm/multilm", 87, (uint64_t)"%.500s %u %.500s", v68, v69, v196);
LABEL_85:
        v70 += 16;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 112))
  {
    MultiLanguageModel::loadStringTable(a1, a1 + 352, "TopicName", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    if (*v194)
    {
      v77 = 0;
      for (j = 0; j < *v194; ++j)
      {
        if (*(_DWORD *)(v203[0] + v77 + 8))
          v79 = *(const char **)(v203[0] + v77);
        else
          v79 = (const char *)&unk_209A7A2E0;
        v80 = strcmp(v79, "TopicWord");
        v81 = *(_QWORD *)(a1 + 352);
        if (v80)
        {
          if (*(_DWORD *)(v81 + v77 + 8) < 2u)
            goto LABEL_100;
        }
        else
        {
          v82 = v81 + v77;
          if (*(_DWORD *)(v82 + 8))
            v83 = *(const char **)v82;
          else
            v83 = (const char *)&unk_209A7A2E0;
          if ((isValidName(v83) & 1) != 0)
            goto LABEL_100;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2580, (uint64_t)"lm/multilm", 91, (uint64_t)"%.500s %u %.500s", v68, v69, v196);
LABEL_100:
        v77 += 16;
      }
    }
    if (!*(_BYTE *)(a1 + 112))
    {
      if (*a5)
        v84 = a1 + 368;
      else
        v84 = a1 + 320;
      if (*a5)
        v85 = "TemplateLMPath";
      else
        v85 = "TemplatePath";
      MultiLanguageModel::loadStringTable(a1, v84, v85, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    }
  }
  v201 = 0;
  v202 = 0;
  if (*(_BYTE *)(a1 + 114))
  {
    MultiLanguageModel::loadRealTable(a1, a1 + 400, 0, "WeightFloor", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, a1 + 416, 0, "WeightCeiling", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, a1 + 432, 0, "PrefiltererFixedWeight", (uint64_t)v208, 0, 1u, 2u, -1.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, (uint64_t)&v201, 0, "CurrentWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    if (*(_BYTE *)(a1 + 114))
      MultiLanguageModel::loadRealTable(a1, a1 + 448, 0, "DefaultTopicWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
  }
  v195 = (_QWORD *)(a1 + 168);
  v86 = *(_DWORD *)(a1 + 160);
  v87 = *(_DWORD *)(a1 + 180);
  if (v86 > v87)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v195, v86 - v87, 0);
  v88 = *(unsigned int *)(a1 + 176);
  v89 = (int)v88;
  if (v86 >= v88)
  {
    v91 = (_QWORD *)(a1 + 168);
    if (v86 > v88)
    {
      v92 = v86 - v88;
      v93 = 16 * v88;
      do
      {
        DgnString::DgnString((DgnString *)(*v91 + v93));
        v93 += 16;
        --v92;
        v91 = (_QWORD *)(a1 + 168);
      }
      while (v92);
    }
  }
  else if ((int)v88 > (int)v86)
  {
    v90 = 16 * (int)v88 - 16;
    do
    {
      --v89;
      DgnString::~DgnString((DgnString *)(*v195 + v90));
      v90 -= 16;
    }
    while (v89 > (int)v86);
  }
  *(_DWORD *)(a1 + 176) = v86;
  v94 = (_QWORD *)(a1 + 184);
  v95 = *(unsigned int *)(a1 + 160);
  v96 = *(_DWORD *)(a1 + 196);
  if (v95 > v96)
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 184, v95 - v96, 0);
  v97 = *(unsigned int *)(a1 + 192);
  if (v97 <= v95)
  {
    if (v97 < v95)
    {
      v100 = v95 - v97;
      v101 = 16 * v97;
      do
      {
        v102 = (_QWORD *)(*v94 + v101);
        *v102 = 0;
        v102[1] = 0;
        v101 += 16;
        --v100;
      }
      while (v100);
    }
  }
  else if ((int)v97 > (int)v95)
  {
    v98 = (int)v97;
    v99 = 16 * (int)v97 - 16;
    do
    {
      --v98;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v94 + v99);
      v99 -= 16;
    }
    while (v98 > (int)v95);
  }
  *(_DWORD *)(a1 + 192) = v95;
  if (*(_DWORD *)(a1 + 176))
  {
    v103 = 0;
    v104 = 0;
    do
    {
      IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 232));
      if (v104 >= *(unsigned int *)(a1 + 156))
        v105 = "ClientWeight";
      else
        v105 = "FactoryWeight";
      MultiLanguageModel::loadRealTable(a1, *(_QWORD *)(a1 + 184) + v103, (DgnString *)(*(_QWORD *)(a1 + 168) + v103), v105, (uint64_t)v208, 0, 1u, 2u, -1.0, 0.0, 1.0, 3u, 4u, 5u);
      if (DgnArray<DgnString>::findBelow(v195, *v195 + v103, v104) != -1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2663, (uint64_t)"lm/multilm", 75, (uint64_t)"%.500s %u %u %.500s", v68, v69, v196);
      ++v104;
      v103 += 16;
    }
    while (v104 < *(unsigned int *)(a1 + 176));
  }
  if (*(_BYTE *)(a1 + 113))
  {
    MultiLanguageModel::loadRealTable(a1, (uint64_t)&v201, 0, "LogLinearWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, -100.0, 100.0, 3u, 4u, 5u);
    MultiLanguageModel::loadIntTable(a1, a1 + 528, "LogLinearOffset", 0, -20 * *(_DWORD *)(a1 + 32), 20 * *(_DWORD *)(a1 + 32), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    v199 = 0;
    v200 = 0;
    MultiLanguageModel::loadUnsTable(a1, (uint64_t)&v199, "IsActive", 0, 0, 1u, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    v106 = *(unsigned int *)(a1 + 116);
    LODWORD(v107) = v106;
    if (*(_DWORD *)(a1 + 556) < v106)
    {
      v197 = 0;
      *(_DWORD *)(a1 + 556) = realloc_array(*(_QWORD **)(a1 + 544), &v197, v106, *(unsigned int *)(a1 + 552), *(unsigned int *)(a1 + 552), 1);
      *(_QWORD *)(a1 + 544) = v197;
      LODWORD(v107) = *(_DWORD *)(a1 + 116);
    }
    *(_DWORD *)(a1 + 552) = v106;
    if ((_DWORD)v107)
    {
      v108 = v199;
      v109 = *(BOOL **)(a1 + 544);
      v107 = v107;
      do
      {
        v110 = *v108++;
        *v109++ = v110 != 0;
        --v107;
      }
      while (v107);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v199 = 0;
    v200 = 0;
    v197 = 0;
    v198 = 0;
    MultiLanguageModel::loadIntTable(a1, (uint64_t)&v199, "MinWordId", -1, 0, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 388), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::loadIntTable(a1, (uint64_t)&v197, "MaxWordId", -1, 0, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 388), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    v113 = (uint64_t *)(a1 + 568);
    v114 = *(_DWORD *)(a1 + 116);
    v115 = *(_DWORD *)(a1 + 580);
    v116 = v114;
    if (v114 > v115)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 568, v114 - v115, 0);
      v116 = *v194;
    }
    *(_DWORD *)(a1 + 576) = v114;
    v117 = (uint64_t *)(a1 + 584);
    v118 = *(_DWORD *)(a1 + 596);
    v119 = v116;
    if (v116 > v118)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 584, v116 - v118, 0);
      v119 = *v194;
    }
    *(_DWORD *)(a1 + 592) = v116;
    if (v119)
    {
      v120 = 0;
      do
      {
        if (v120)
        {
          v121 = v199[v120];
          if (v121 == -1 || (v122 = v197, v123 = *((_DWORD *)v197 + v120), v123 == -1))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2738, (uint64_t)"lm/multilm", 100, (uint64_t)"%.500s %u %.500s", v111, v112, v196);
            v121 = v199[v120];
            v122 = v197;
            v123 = *((_DWORD *)v197 + v120);
          }
          if (v121 > v123)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2741, (uint64_t)"lm/multilm", 101, (uint64_t)"%.500s %u", v111, v112, v196);
            v121 = v199[v120];
            v122 = v197;
          }
          v124 = *v113;
          *(_DWORD *)(*v113 + 4 * v120) = v121;
          v125 = v122[v120];
          v126 = *v117;
          *(_DWORD *)(*v117 + 4 * v120) = v125;
          if (v120 >= 2 && *(_DWORD *)(v124 + 4 * v120) != *(_DWORD *)(v126 + 4 * v120 - 4) + 1)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2752, (uint64_t)"lm/multilm", 102, (uint64_t)"%.500s %u", v111, v112, v196);
            v124 = *v113;
            v125 = *(_DWORD *)(*v117 + 4 * v120);
          }
          for (k = *(_DWORD *)(v124 + 4 * v120); k <= v125; ++k)
          {
            v128 = *(_QWORD *)(a1 + 16);
            if (*(_DWORD *)(v128 + 388) <= k
              || !*(_BYTE *)(*(_QWORD *)(v128 + 104) + k)
              || ((*(_DWORD *)(*(_QWORD *)(v128 + 640) + 4 * (k >> 5)) >> k) & 1) == 0)
            {
              DgnTextFile::getCurrentLine((DgnTextFile *)v208);
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2763, (uint64_t)"lm/multilm", 63, (uint64_t)"%u %.500s %.500s", v129, v130, k);
              v128 = *(_QWORD *)(a1 + 16);
            }
            v131 = *(_DWORD *)(*(_QWORD *)(v128 + 256) + 4 * k);
            if (v131 >= *(_DWORD *)(*v113 + 4 * v120))
            {
              v125 = *(_DWORD *)(*v117 + 4 * v120);
              if (v131 <= v125)
                continue;
            }
            DgnTextFile::getCurrentLine((DgnTextFile *)v208);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2770, (uint64_t)"lm/multilm", 64, (uint64_t)"%u %u %.500s %.500s", v132, v133, k);
            v125 = *(_DWORD *)(*v117 + 4 * v120);
          }
        }
        else
        {
          if (*v199 != -1 || *(_DWORD *)v197 != -1)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2722, (uint64_t)"lm/multilm", 100, (uint64_t)"%.500s %u %.500s", v111, v112, v196);
          **(_DWORD **)(a1 + 568) = 0xFFFFFF;
          **(_DWORD **)(a1 + 584) = 0xFFFFFF;
          *(_DWORD *)(a1 + 560) = 0;
        }
        ++v120;
      }
      while (v120 < *v194);
    }
    if (v191)
      v134 = "TreeLMPerWordPenalty";
    else
      v134 = "PrefiltererPerWordPenalty";
    MultiLanguageModel::loadUnsTable(a1, a1 + 600, v134, 0, 0, 0x3E8u, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v197);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  }
  v135 = *(unsigned int *)(a1 + 176);
  v199 = 0;
  v200 = 0;
  if ((_DWORD)v135)
  {
    v197 = 0;
    v136 = realloc_array(0, &v197, 8 * v135, 0, 0, 1);
    v198 = 0;
    v199 = (int *)v197;
    v137 = *(unsigned int *)(a1 + 176);
    LODWORD(v200) = v135;
    HIDWORD(v200) = v136 >> 3;
    v197 = 0;
    if ((_DWORD)v137)
    {
      v210[0] = 0;
      v138 = realloc_array(0, v210, 8 * v137, 0, 0, 1);
      v139 = v210[0];
      v197 = v210[0];
      v140 = *(unsigned int *)(a1 + 176);
      LODWORD(v198) = v137;
      HIDWORD(v198) = v138 >> 3;
      if ((_DWORD)v140)
      {
        v141 = v199;
        do
        {
          *(_QWORD *)v141 = 0;
          v141 += 2;
          *v139++ = 0;
          --v140;
        }
        while (v140);
      }
      goto LABEL_190;
    }
  }
  else
  {
    v197 = 0;
    v198 = 0;
  }
  LODWORD(v198) = 0;
LABEL_190:
  v142 = *(_DWORD *)(a1 + 116);
  v143 = *(_DWORD *)(a1 + 148);
  v144 = v142;
  if (v142 > v143)
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 136, v142 - v143, 0);
    v144 = *v194;
  }
  *(_DWORD *)(a1 + 144) = v142;
  if (!v144)
  {
    v147 = 0.0;
    v182 = 0.0;
    v146 = 0.0;
    v181 = 0.0;
    if (!*(_BYTE *)(a1 + 114))
      goto LABEL_308;
    goto LABEL_292;
  }
  v145 = 0;
  v192 = 0.0;
  v146 = 0.0;
  v187 = 0.0;
  v188 = 0.0;
  v147 = 0.0;
  v186 = 0.0;
  v148 = 0.0;
  do
  {
    v149 = 1;
    LODWORD(v210[0]) = 1;
    HIDWORD(v210[0]) = v145;
    v150 = v203[0] + 16 * v145;
    v151 = *(_DWORD *)(v150 + 8);
    v152 = *(const char **)v150;
    if (v151)
      v153 = v152;
    else
      v153 = (const char *)&unk_209A7A2E0;
    if (!strcmp(v153, "FactoryWord"))
      goto LABEL_207;
    if ((a3 & 1) != 0)
      goto LABEL_203;
    if (*(_BYTE *)(a1 + 112) || strcmp(v153, "TopicWord"))
    {
      if (*(_BYTE *)(a1 + 113) && !strcmp(v153, "FactoryCorrectiveWord"))
      {
        v158 = 0;
        v149 = 0;
        v159 = 2;
      }
      else
      {
LABEL_203:
        if (!strcmp(v153, "Multi"))
        {
          v158 = 0;
          v159 = 3;
        }
        else if (*(_BYTE *)(a1 + 112) && !strcmp(v153, "Dummy"))
        {
          v158 = 0;
          v159 = 4;
        }
        else
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2857, (uint64_t)"lm/multilm", 103, (uint64_t)"%.500s %u", v68, v69, v196);
LABEL_207:
          v158 = 0;
          v159 = 0;
        }
      }
      v160 = 1;
      goto LABEL_212;
    }
    v160 = 0;
    v158 = 1;
    v159 = 1;
LABEL_212:
    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v145) = v159;
    if (*(_BYTE *)(a1 + 112))
      goto LABEL_222;
    if (*a5)
    {
      v161 = *(_DWORD *)(*(_QWORD *)(a1 + 368) + 16 * v145 + 8);
      if (!v158)
      {
        if (v161 > 1)
          goto LABEL_221;
        goto LABEL_222;
      }
    }
    else
    {
      v161 = *(_DWORD *)(*(_QWORD *)(a1 + 320) + 16 * v145 + 8);
      if (!v158)
      {
        if (v161 < 2)
          goto LABEL_222;
LABEL_221:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2883, (uint64_t)"lm/multilm", 104, (uint64_t)"%.500s %u", v68, v69, v196);
        goto LABEL_222;
      }
    }
    if (v161 < 2)
      goto LABEL_221;
LABEL_222:
    if (!*(_BYTE *)(a1 + 114))
      goto LABEL_276;
    v162 = *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145);
    if (v158)
    {
      v186 = v186 + v162;
      v163 = *(double *)(v201 + 8 * v145);
      v164 = *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145);
    }
    else
    {
      v164 = *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145);
      v163 = *(double *)(v201 + 8 * v145);
      v187 = v187 + v164;
      v188 = v188 + v163;
    }
    v165 = *(double *)(*(_QWORD *)(a1 + 432) + 8 * v145);
    if (v165 == -1.0)
      v166 = -0.0;
    else
      v166 = *(double *)(*(_QWORD *)(a1 + 432) + 8 * v145);
    v167 = *(double *)(*(_QWORD *)(a1 + 448) + 8 * v145);
    if (v162 > v164)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2907, (uint64_t)"lm/multilm", 105, (uint64_t)"%.500s %u", v68, v69, v196);
      v165 = *(double *)(*(_QWORD *)(a1 + 432) + 8 * v145);
    }
    if (v165 != -1.0
      && v165 != 0.0
      && (v165 < *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145) || v165 > *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145)))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2913, (uint64_t)"lm/multilm", 106, (uint64_t)"%.500s %u", v68, v69, v196);
    }
    v168 = *(double *)(v201 + 8 * v145);
    if (v168 != 0.0
      || v168 < *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145)
      || v168 > *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145))
    {
      DFile::pushCurrentSubDirComponent(v193, (const SubDirExtension *)v210, v154, v155, v156, v157, v68, v69);
      if (*a5)
      {
        v169 = DFile::subFileExists((uint64_t)v193, 0x6Du);
      }
      else if (DFile::subFileExists((uint64_t)v193, 0x6Bu))
      {
        v169 = DFile::subFileExists((uint64_t)v193, 0x73u) ^ 1;
      }
      else
      {
        v169 = 0;
      }
      DFile::popCurrentSubDirComponent((uint64_t)v193);
      v170 = *(double *)(v201 + 8 * v145);
      if (v169)
      {
        if (v170 == 0.0)
          goto LABEL_252;
        v171 = 107;
        v172 = 2939;
        v173 = "%.500s %u";
        goto LABEL_251;
      }
      if (v170 != 0.0
        && (v170 < *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145) || v170 > *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145)))
      {
        v171 = 108;
        v172 = 2945;
        v173 = "%.500s %u";
LABEL_251:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", v172, (uint64_t)"lm/multilm", v171, (uint64_t)v173, v68, v69, v196);
      }
    }
LABEL_252:
    v174 = *(double *)(*(_QWORD *)(a1 + 448) + 8 * v145);
    if (v158)
    {
      v175 = v149;
      if (v174 == 0.0
        || v174 >= *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145)
        && v174 <= *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145))
      {
        goto LABEL_259;
      }
LABEL_258:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2960, (uint64_t)"lm/multilm", 109, (uint64_t)"%.500s %u", v68, v69, v196);
      goto LABEL_259;
    }
    v175 = v149;
    if (v174 != 0.0)
      goto LABEL_258;
LABEL_259:
    v148 = v148 + v162;
    v147 = v147 + v166;
    v146 = v146 + v163;
    v192 = v192 + v167;
    if (*(_DWORD *)(a1 + 176))
    {
      v176 = 0;
      v177 = 0;
      do
      {
        v178 = *(double *)(*(_QWORD *)(*v94 + v176) + 8 * v145);
        v179 = v160 ^ 1;
        if (v178 != -1.0)
          v179 = 1;
        if ((v179 & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2969, (uint64_t)"lm/multilm", 110, (uint64_t)"%.500s %.500s %u", v68, v69, v196);
        if (v178 != -1.0
          && v178 != 0.0
          && (v178 < *(double *)(*(_QWORD *)(a1 + 400) + 8 * v145)
           || v178 > *(double *)(*(_QWORD *)(a1 + 416) + 8 * v145)))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2975, (uint64_t)"lm/multilm", 111, (uint64_t)"%.500s %.500s %u", v68, v69, v196);
        }
        if (v178 != -1.0)
          *(double *)&v199[2 * v177] = v178 + *(double *)&v199[2 * v177];
        if (v160)
          *((double *)v197 + v177) = v178 + *((double *)v197 + v177);
        ++v177;
        v176 += 16;
      }
      while (v177 < *(unsigned int *)(a1 + 176));
    }
    v149 = v175;
LABEL_276:
    v180 = v149 ^ 1;
    if (!*(_BYTE *)(a1 + 113))
      v180 = 1;
    if ((v180 & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(a1 + 544) + v145))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2993, (uint64_t)"lm/multilm", 112, (uint64_t)"%.500s %u", v68, v69, v196);
    ++v145;
  }
  while (v145 < *v194);
  v181 = v192;
  v182 = v188;
  if (!*(_BYTE *)(a1 + 114))
    goto LABEL_308;
  if (v148 > 1.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3001, (uint64_t)"lm/multilm", 13, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v186 >= 1.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3004, (uint64_t)"lm/multilm", 117, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v187 < 1.0)
LABEL_292:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3007, (uint64_t)"lm/multilm", 14, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v147 >= 1.0001)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3011, (uint64_t)"lm/multilm", 29, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v182 == 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3014, (uint64_t)"lm/multilm", 78, (uint64_t)"%.500s", v68, v69, v196);
  if (fabs(v146 + -1.0) >= 0.0001)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3017, (uint64_t)"lm/multilm", 49, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v181 >= 1.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3020, (uint64_t)"lm/multilm", 77, (uint64_t)"%.500s %f", v68, v69, v196);
  if (*(_DWORD *)(a1 + 176))
  {
    v183 = 0;
    v184 = 0;
    do
    {
      if (fabs(*(double *)&v199[2 * v184] + -1.0) >= 0.0001)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3027, (uint64_t)"lm/multilm", 50, (uint64_t)"%.500s %.500s %f", v68, v69, v196);
      if (*((double *)v197 + v184) == 0.0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3030, (uint64_t)"lm/multilm", 79, (uint64_t)"%.500s %.500s", v68, v69, v196);
      ++v184;
      v183 += 16;
    }
    while (v184 < *(unsigned int *)(a1 + 176));
  }
LABEL_308:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v197);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  DgnPrimArray<double>::copyArraySlice(v185, &v201, 0, v202);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v201);
  DgnArray<DgnString>::releaseAll((uint64_t)v203);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v204);
  DgnArray<DgnString>::releaseAll((uint64_t)&v206);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v208);
}

void sub_20991E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnArray<DgnString>::releaseAll((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a33);
  DgnArray<DgnString>::releaseAll((uint64_t)&a36);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&a38);
  _Unwind_Resume(a1);
}

void readObject<DgnPrimArray<double>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      readObject<double>(a1, *(_QWORD *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t readObject<unsigned int>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v15 = 0;
  v13 = 0;
  v14 = 0;
  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  readObject((uint64_t)a1, &v15, a3);
  readObject((uint64_t)a1, &v14, a3);
  readObject((uint64_t)a1, &v13, a3);
  readObject<unsigned int,DgnPrimArray<unsigned int>>(a1, (uint64_t)&v9, a3);
  v7 = v13;
  v6 = v14;
  *(_DWORD *)a2 = v15;
  *(_DWORD *)(a2 + 4) = v6;
  *(_DWORD *)(a2 + 8) = v7;
  DgnPrimArray<int>::copyArraySlice(a2 + 16, &v9, 0, v10);
  *(_DWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 32) = v11;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v9);
}

void sub_20991E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void readObject<WordDummySpec>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v13 = 0;
  readObject((uint64_t)a1, &v13, a3);
  v6 = v13;
  v7 = *(_DWORD *)(a2 + 12);
  if (v13 > v7)
    DgnArray<PrefilterResultFrame>::reallocElts(a2, v13 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v6 > v8)
  {
    v9 = v6 - v8;
    v10 = 32 * v8;
    do
    {
      WordDummySpec::WordDummySpec((WordDummySpec *)(*(_QWORD *)a2 + v10));
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      WordDummySpec::readObject((WordDummySpec *)(*(_QWORD *)a2 + v11), a1, a3);
      ++v12;
      v11 += 32;
    }
    while (v12 < *(unsigned int *)(a2 + 8));
  }
}

void MultiLanguageModel::saveMultiBinary(MultiLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  unint64_t i;
  int v9;
  int v10;
  uint64_t CurrentSubDirComponents;
  int v12;
  unsigned int v13;
  int v14;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x28u, a4, "LMMULBIN", 24, 6);
  v13 = *((_DWORD *)this + 36);
  v14 = 0;
  writeObject((uint64_t)v7, (int *)&v13, &v14);
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v12 = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * i);
      if ((v9 - 1) < 4)
        v10 = v9 + 1;
      else
        v10 = 1;
      v12 = v10;
      writeObject((uint64_t)v7, &v12, &v14);
    }
  }
  writeObject((uint64_t)v7, (int *)this + 29, &v14);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 112, &v14);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 113, &v14);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 114, &v14);
  writeObject((uint64_t)v7, (uint64_t)this + 120, &v14);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 152, &v14);
  writeObject((uint64_t)v7, (int *)this + 39, &v14);
  writeObject((uint64_t)v7, (int *)this + 40, &v14);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 168, &v14);
  writeObject<DgnPrimArray<double>>(v7, (uint64_t)this + 184, (unsigned int *)&v14);
  writeObject<DgnPrimArray<double>>(v7, (uint64_t)this + 200, (unsigned int *)&v14);
  writeObject<DgnPrimArray<short>>((uint64_t)v7, (uint64_t)this + 216, &v14);
  writeObject<unsigned int>((uint64_t)v7, (int *)this + 58, &v14);
  writeObject((uint64_t)v7, (int *)this + 70, &v14);
  writeObject((uint64_t)v7, (int *)this + 71, &v14);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 352, &v14);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 320, &v14);
  writeObject<double>(v7, (uint64_t)this + 384, (unsigned int *)&v14);
  writeObject<double>(v7, (uint64_t)this + 400, (unsigned int *)&v14);
  writeObject<double>(v7, (uint64_t)this + 416, (unsigned int *)&v14);
  writeObject<double>(v7, (uint64_t)this + 432, (unsigned int *)&v14);
  writeObject<double>(v7, (uint64_t)this + 448, (unsigned int *)&v14);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 464, &v14);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 480, &v14);
  writeObject<double>(v7, (uint64_t)this + 496, (unsigned int *)&v14);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 512, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 528, &v14);
  writeObject<BOOL>(v7, (uint64_t)this + 544, (unsigned int *)&v14);
  writeObject((uint64_t)v7, (int *)this + 140, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 568, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 584, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 600, &v14);
  writeObjectChecksum((uint64_t)v7, &v14);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x28u, v14);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t writeObject<DgnPrimArray<double>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<double>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<short>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<unsigned int>(uint64_t a1, int *a2, _DWORD *a3)
{
  int v7;
  int v8;
  int v9;

  v9 = *a2;
  writeObject(a1, &v9, a3);
  v8 = a2[1];
  writeObject(a1, &v8, a3);
  v7 = a2[2];
  writeObject(a1, &v7, a3);
  return writeObject<unsigned int,DgnPrimArray<unsigned int>>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t DgnArray<DgnString>::findBelow(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _DWORD *i;
  const char *v7;

  if (!a3)
    return 0xFFFFFFFFLL;
  v3 = 0;
  if (*(_DWORD *)(a2 + 8))
    v4 = *(const char **)a2;
  else
    v4 = (const char *)&unk_209A7A2E0;
  v5 = a3;
  for (i = (_DWORD *)(*a1 + 8); ; i += 4)
  {
    v7 = *i ? (const char *)*((_QWORD *)i - 1) : (const char *)&unk_209A7A2E0;
    if (!strcmp(v7, v4))
      break;
    if (v5 == ++v3)
      return 0xFFFFFFFFLL;
  }
  return v3;
}

void MultiLanguageModel::verifySubdirContents(MultiLanguageModel *this, const DFile *a2, unsigned int a3, int a4, int a5)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;

  if (!a5)
  {
    if (a4)
    {
      if (DFile::subFileExists((uint64_t)a2, 0x73u))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3478, (uint64_t)"lm/multilm", 128, (uint64_t)"%.500s %u", v10, v11, (char)".wns");
      if (DFile::subFileExists((uint64_t)a2, 0x29u))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3482, (uint64_t)"lm/multilm", 128, (uint64_t)"%.500s %u", v12, v13, (char)".mls");
      v14 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * a3);
      if (v14 == 4)
        return;
      if (v14 == 1)
      {
        if ((DFile::subFileExists((uint64_t)a2, 0x6Au) & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3488, (uint64_t)"lm/multilm", 126, (uint64_t)"%u", v15, v16, a3);
        v17 = DFile::subFileExists((uint64_t)a2, 0x6Fu);
        if (DFile::subFileExists((uint64_t)a2, 0x70u) + v17 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3497, (uint64_t)"lm/multilm", 130, (uint64_t)"%u", v18, v19, a3);
        if (!DFile::subFileExists((uint64_t)a2, 0x28u))
          return;
        v44 = a3;
        v22 = "%u";
        v23 = 3502;
LABEL_30:
        v33 = 131;
LABEL_49:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", v23, (uint64_t)"lm/multilm", v33, (uint64_t)v22, v20, v21, v44);
        return;
      }
      v39 = DFile::subFileExists((uint64_t)a2, 0x28u);
      v40 = DFile::subFileExists((uint64_t)a2, 0x6Fu) + v39;
      v41 = v40 + DFile::subFileExists((uint64_t)a2, 0x70u);
      if (DFile::subFileExists((uint64_t)a2, 0x6Au))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3514, (uint64_t)"lm/multilm", 15, (uint64_t)"%u", v20, v21, a3);
      if (v41 == 1)
        return;
      v44 = a3;
      v22 = "%u";
      v23 = 3516;
    }
    else
    {
      if (DFile::subFileExists((uint64_t)a2, 0x6Fu))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3525, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v24, v25, (char)".wnb");
      if (DFile::subFileExists((uint64_t)a2, 0x70u))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3529, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v26, v27, (char)".wnd");
      if (DFile::subFileExists((uint64_t)a2, 0x28u))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3533, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v28, v29, (char)".mlb");
      v30 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * a3);
      if (v30 == 4)
        return;
      if (v30 == 1)
      {
        if ((DFile::subFileExists((uint64_t)a2, 0x6Bu) & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3538, (uint64_t)"lm/multilm", 126, (uint64_t)"%u", v31, v32, a3);
        if (!DFile::subFileExists((uint64_t)a2, 0x29u))
          return;
        v44 = a3;
        v22 = "%u";
        v23 = 3543;
        goto LABEL_30;
      }
      v42 = DFile::subFileExists((uint64_t)a2, 0x29u);
      v43 = DFile::subFileExists((uint64_t)a2, 0x73u) + v42;
      if (DFile::subFileExists((uint64_t)a2, 0x6Bu))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3554, (uint64_t)"lm/multilm", 15, (uint64_t)"%u", v20, v21, a3);
      if (v43 == 1)
        return;
      v44 = a3;
      v22 = "%u";
      v23 = 3556;
    }
    v33 = 129;
    goto LABEL_49;
  }
  if ((DFile::subFileExists((uint64_t)a2, 0x73u) & 1) != 0 || (DFile::subFileExists((uint64_t)a2, 0x6Fu) & 1) != 0)
    v8 = 1;
  else
    v8 = DFile::subFileExists((uint64_t)a2, 0x70u);
  v34 = v8 + DFile::subFileExists((uint64_t)a2, 0x29u);
  v35 = DFile::subFileExists((uint64_t)a2, 0x28u);
  v38 = v34 + v35 + DFile::subFileExists((uint64_t)a2, 0x6Du);
  if (!*((_BYTE *)this + 112))
  {
    if (a4)
    {
      if (v38 <= 1)
        return;
    }
    else if (v38 == 1)
    {
      return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3466, (uint64_t)"lm/multilm", 9, (uint64_t)"%s", v36, v37, (char)&errStr_lm_multilm_E_BAD_NUM_SPEC_SUBFILES);
    if (!*((_BYTE *)this + 112))
      return;
  }
  if (v38 >= 2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3468, (uint64_t)"lm/multilm", 42, (uint64_t)"%s", v36, v37, (char)&errStr_lm_multilm_E_MULTIPLE_SPEC_SUBFILES);
}

uint64_t MultiLanguageModel::getTotalPreloadableBytes(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::computeTotalPreloadableBytes(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

void MultiLanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  _BOOL4 v28;
  MultiLanguageModel *LMForDirPathVerify;
  uint64_t v30;
  int v31;
  unsigned int v34;
  _DWORD v36[2];

  v34 = a6;
  v18 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v18)
  {
    v19 = 0;
    for (i = 0; i < v18; ++i)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i))
      {
        v21 = a7;
        v22 = a8;
        v23 = a9;
        if (*(_BYTE *)(a1 + 112))
        {
          v21 = a7;
          v22 = a8;
          v23 = a9;
          if (*(_DWORD *)(a1 + 576) >= 2u)
          {
            v24 = *(_QWORD *)(a1 + 568);
            if (i)
            {
              v25 = (unsigned int *)(v24 + v19);
              v26 = (unsigned int *)(*(_QWORD *)(a1 + 584) + v19);
              v21 = 1;
            }
            else
            {
              v21 = 0;
              v25 = (unsigned int *)(v24 + 4);
              v26 = (unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * (*(_DWORD *)(a1 + 592) - 1));
            }
            v22 = *v25;
            v23 = *v26;
          }
        }
        v36[0] = 1;
        v36[1] = i;
        DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v36, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
        LOBYTE(v31) = a12;
        BYTE4(v30) = a10;
        LODWORD(v30) = v23;
        (*(void (**)(uint64_t, LanguageModel *, DFile *, DFileChecksums *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, a2, a3, a4, a5, v34, v21, v22, v30, a11, v31, a13, a14);
        DFile::popCurrentSubDirComponent((uint64_t)a3);
        v18 = *(unsigned int *)(a1 + 116);
      }
      v19 += 4;
    }
  }
  if (!*(_BYTE *)(a1 + 112))
  {
    v28 = MultiLanguageModel::maybeUpgradeToWordNgramTemplates(a1, a2, a3, a8, a9, a10, a11, a8);
    MultiLanguageModel::setWordNgramTemplates(a1, a11, v28);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1);
  if ((DFile::subFileExists((uint64_t)a3, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x49u))
  {
    if (*(_DWORD *)(a1 + 128) > 1u)
      LMForDirPathVerify = MultiLanguageModel::getLMForDirPathVerify((MultiLanguageModel *)a1, "RecentBufferLMPath", (unsigned __int8 **)(a1 + 120), 0, a3, 0);
    else
      LMForDirPathVerify = (MultiLanguageModel *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a1 + 120);
    *(_QWORD *)(a1 + 56) = LMForDirPathVerify;
  }
  BYTE4(v30) = a10;
  LODWORD(v30) = a9;
  LanguageModel::finalizeLM(a1, a2, a3, a4, a5, v34, a7, a8, v30, a11, a12);
}

BOOL MultiLanguageModel::maybeUpgradeToWordNgramTemplates(uint64_t a1, LanguageModel *a2, DFile *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  MultiLanguageModel *LMForDirPathVerify;
  const WordLanguageModel *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  MultiLanguageModel *v21;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  int v27;
  _DWORD v30[2];
  _BYTE v31[16];

  v8 = *(_DWORD *)(a1 + 376);
  if (v8)
  {
    v27 = *(_DWORD *)(a1 + 376);
    if (a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3891, (uint64_t)"lm/multilm", 132, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_TOPICLMPATHS_WITH_WORDNGRAMTEMPLATES);
    v13 = (uint64_t *)(a1 + 368);
    if (*(_DWORD *)(a1 + 116))
    {
      v14 = 0;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v14) == 1)
        {
          v15 = *v13;
          if (*(_DWORD *)(*v13 + 16 * v14 + 8) <= 1u)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3901, (uint64_t)"lm/multilm", 120, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_LEGACY_PATH);
            v15 = *v13;
          }
          LMForDirPathVerify = MultiLanguageModel::getLMForDirPathVerify((MultiLanguageModel *)a1, "TemplateLMPath", (unsigned __int8 **)(v15 + 16 * v14), a2, a3, 1);
          v17 = LMForDirPathVerify;
          v18 = 0;
          v19 = -1;
          while (*(_DWORD *)(a7 + 8) != v18)
          {
            v20 = *(_QWORD *)(*(_QWORD *)a7 + 8 * v18);
            v21 = *(MultiLanguageModel **)(v20 + 168);
            if (v21 == LMForDirPathVerify)
              v19 = v18;
            ++v18;
            if (v21 == LMForDirPathVerify && v20 != 0)
            {
              DgnString::DgnString((DgnString *)v31);
LABEL_22:
              v30[0] = 4;
              v30[1] = v19;
              SubDirExtension::appendToString((DgnString *)v30, (DgnString *)v31);
              goto LABEL_23;
            }
          }
          v23 = MemChunkAlloc(0xB0uLL, 0);
          WordNgramTemplate::WordNgramTemplate((WordNgramTemplate *)v23, *(const WordList **)(a1 + 16), a4, a5, v17);
          v19 = *(_DWORD *)(a7 + 8);
          v24 = v19;
          if (v19 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a7, 1, 1);
            v24 = *(_DWORD *)(a7 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a7 + 8 * v24) = v23;
          *(_DWORD *)(a7 + 8) = v24 + 1;
          DgnString::DgnString((DgnString *)v31);
          if (v23)
            goto LABEL_22;
        }
        else
        {
          DgnString::DgnString((DgnString *)v31);
        }
LABEL_23:
        v25 = *(unsigned int *)(a1 + 328);
        if (v25 == *(_DWORD *)(a1 + 332))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 320, 1, 1);
          v25 = *(unsigned int *)(a1 + 328);
        }
        DgnString::DgnString((DgnString *)(*(_QWORD *)(a1 + 320) + 16 * v25), (const DgnString *)v31);
        ++*(_DWORD *)(a1 + 328);
        DgnString::~DgnString((DgnString *)v31);
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
    DgnArray<DgnString>::releaseAll(a1 + 368);
    v8 = v27;
  }
  return v8 != 0;
}

void sub_20991F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::setWordNgramTemplates(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unint64_t v27;
  const char *v28;
  int v29;
  unsigned int v30;

  if (*(_DWORD *)(a1 + 116))
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 336;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 320) + v6 + 8) < 2u)
    {
      v9 = *(_DWORD *)(a1 + 344);
      if (v9 == *(_DWORD *)(a1 + 348))
      {
        DgnPrimArray<unsigned long long>::reallocElts(v8, 1, 1);
        v9 = *(_DWORD *)(a1 + 344);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v9) = 0;
      *(_DWORD *)(a1 + 344) = v9 + 1;
LABEL_36:
      ++v7;
      v6 += 16;
      if (v7 >= *(unsigned int *)(a1 + 116))
        return;
    }
    v30 = 0;
    DgnString::DgnString((DgnString *)&v28);
    v27 = 0xFFFFFFFF00000004;
    SubDirExtension::appendToString((DgnString *)&v27, (DgnString *)&v28);
    DgnString::operator+=((DgnString *)&v28, "%u");
    if (v29)
      v10 = v28;
    else
      v10 = (const char *)&unk_209A7A2E0;
    v11 = fmtcheck(v10, "%u");
    v12 = *(_QWORD *)(a1 + 320) + v6;
    if (*(_DWORD *)(v12 + 8))
      v13 = *(const char **)v12;
    else
      v13 = (const char *)&unk_209A7A2E0;
    if (sscanf(v13, v11, &v30, v26) != 1)
    {
      v16 = *(_QWORD *)(a1 + 320) + v6;
      if (*(_DWORD *)(v16 + 8))
        v17 = *(void **)v16;
      else
        v17 = &unk_209A7A2E0;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3977, (uint64_t)"lm/multilm", 124, (uint64_t)"%.500s", v14, v15, (char)v17);
    }
    v18 = v30;
    if (*(unsigned int *)(a2 + 8) <= (unint64_t)v30)
    {
      v19 = *(_QWORD *)(a1 + 320) + v6;
      if (*(_DWORD *)(v19 + 8))
        v20 = *(void **)v19;
      else
        v20 = &unk_209A7A2E0;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3980, (uint64_t)"lm/multilm", 125, (uint64_t)"%.500s", v14, v15, (char)v20);
      v18 = v30;
    }
    v21 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v18);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v7);
    if (a3)
    {
      if (!*(_BYTE *)(v22 + 13))
      {
LABEL_33:
        v25 = *(_DWORD *)(a1 + 344);
        if (v25 == *(_DWORD *)(a1 + 348))
        {
          DgnPrimArray<unsigned long long>::reallocElts(v8, 1, 1);
          v25 = *(_DWORD *)(a1 + 344);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v25) = v21;
        *(_DWORD *)(a1 + 344) = v25 + 1;
        DgnString::~DgnString((DgnString *)&v28);
        goto LABEL_36;
      }
      if (*(_DWORD *)(v21 + 12) == 16777212)
      {
        *(_BYTE *)(v22 + 13) = 0;
        goto LABEL_33;
      }
    }
    else if (!*(_BYTE *)(v22 + 13))
    {
      goto LABEL_33;
    }
    if (*(_DWORD *)(v21 + 12) == 16777212)
    {
      v23 = *(_QWORD *)(a1 + 320) + v6;
      if (*(_DWORD *)(v23 + 8))
        v24 = *(void **)v23;
      else
        v24 = &unk_209A7A2E0;
      v26 = v24;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3999, (uint64_t)"lm/multilm", 44, (uint64_t)"%u %.500s", v14, v15, v7);
    }
    goto LABEL_33;
  }
}

void sub_20991F988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

MultiLanguageModel *MultiLanguageModel::getLMForDirPathVerify(MultiLanguageModel *this, const char *a2, unsigned __int8 **a3, LanguageModel *a4, DFile *a5, int a6)
{
  char v9;
  unsigned __int8 *v11;
  uint64_t CurrentSubDirComponents;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  const char *v23;
  int IndexForLMSubDirExtensionString;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  BOOL v33;
  MultiLanguageModel **v34;
  LanguageModel *lpsrc;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v9 = (char)a2;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  if (*((_DWORD *)a3 + 2))
    v11 = *a3;
  else
    v11 = (unsigned __int8 *)&unk_209A7A2E0;
  DgnSplitStringIntoTokens(v11, "/", (uint64_t)&v40, 0);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a5);
  DgnString::DgnString((DgnString *)&v37);
  DFile::makeSubFileName(CurrentSubDirComponents, (char *)&unk_209A7A2E0, (DgnString *)&v37);
  if (*(_DWORD *)(v40 + 8))
    v13 = *(const char **)v40;
  else
    v13 = (const char *)&unk_209A7A2E0;
  if (!strcmp(v13, ".."))
  {
    this = a4;
    if (*(_DWORD *)(CurrentSubDirComponents + 8))
    {
      v16 = 0;
      v17 = v39;
      v18 = 4;
      do
      {
        v19 = *(_DWORD *)(*(_QWORD *)CurrentSubDirComponents + v18);
        if (v17 == HIDWORD(v39))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v38, 1, 1);
          v17 = v39;
        }
        *(_DWORD *)(v38 + 4 * v17) = v19;
        v17 = v39 + 1;
        LODWORD(v39) = v39 + 1;
        ++v16;
        v18 += 8;
      }
      while (v16 < *(unsigned int *)(CurrentSubDirComponents + 8));
      this = a4;
    }
  }
  lpsrc = a4;
  if ((_DWORD)v41)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      if (*(_DWORD *)(v40 + v20 + 8))
        v23 = *(const char **)(v40 + v20);
      else
        v23 = (const char *)&unk_209A7A2E0;
      if (!strcmp(v23, ".."))
      {
        if (((a6 ^ 1 | v22) & 1) != 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3805, (uint64_t)"lm/multilm", 55, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        v26 = v39;
        if (!(_DWORD)v39)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3809, (uint64_t)"lm/multilm", 56, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
          v26 = v39;
        }
        LODWORD(v39) = v26 - 1;
        if (v26 == 1)
        {
          if (lpsrc)
          {
            if (v27)
            {
              if (v27[112])
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3816, (uint64_t)"lm/multilm", 57, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
            }
          }
        }
      }
      else
      {
        IndexForLMSubDirExtensionString = GetIndexForLMSubDirExtensionString(v23);
        v25 = v39;
        if (v39 == (unint64_t)HIDWORD(v39))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v38, 1, 1);
          v25 = v39;
        }
        *(_DWORD *)(v38 + 4 * v25) = IndexForLMSubDirExtensionString;
        LODWORD(v39) = v39 + 1;
        v22 = 1;
      }
      ++v21;
      v20 += 16;
    }
    while (v21 < v41);
  }
  if ((_DWORD)v39)
  {
    v28 = 0;
    do
    {
      v29 = *(unsigned int *)(v38 + 4 * v28);
      if (this
      {
        v31 = v30;
        if (v30[112] && (_DWORD)v29 != *((_DWORD *)v30 + 140))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3841, (uint64_t)"lm/multilm", 58, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        if (v29 > *((_DWORD *)v31 + 29) - 1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3845, (uint64_t)"lm/multilm", 59, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        v32 = *(_DWORD *)(*((_QWORD *)v31 + 17) + 4 * v29);
        if (v32)
          v33 = v32 == 3;
        else
          v33 = 1;
        if (!v33)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3851, (uint64_t)"lm/multilm", 60, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        v34 = (MultiLanguageModel **)(*((_QWORD *)v31 + 5) + 8 * v29);
      }
      else
      {
        if ((_DWORD)v29 || !*((_QWORD *)this + 29))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3862, (uint64_t)"lm/multilm", 61, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        v34 = (MultiLanguageModel **)((char *)this + 232);
      }
      this = *v34;
      ++v28;
    }
    while (v28 < v39);
  }
  if (!this
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3869, (uint64_t)"lm/multilm", 62, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
  }
  DgnString::~DgnString((DgnString *)&v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
  DgnArray<DgnString>::releaseAll((uint64_t)&v40);
  return this;
}

void sub_20991FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getLMWithLegacyPath(MultiLanguageModel *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[2];
  _BYTE v15[16];

  if (!*((_BYTE *)this + 112))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3746, (uint64_t)"lm/multilm", 120, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_LEGACY_PATH);
  v10 = *((unsigned int *)this + 140);
  if (*((_DWORD *)a2 + 2) >= 2u)
    DgnString::operator+=(a2, "/");
  DgnString::DgnString((DgnString *)v15);
  v14[0] = 1;
  v14[1] = v10;
  SubDirExtension::appendToString((DgnString *)v14, a2);
  v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v10);
  v12 = (*(uint64_t (**)(uint64_t, DgnString *))(*(_QWORD *)v11 + 56))(v11, a2);
  DgnString::~DgnString((DgnString *)v15);
  return v12;
}

void sub_20992006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::canSaveAsText(MultiLanguageModel *this)
{
  unint64_t v1;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v1 = *((unsigned int *)this + 29);
  if ((_DWORD)v1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
        if (!(_DWORD)result)
          return result;
        v1 = *((unsigned int *)this + 29);
      }
    }
  }
  return 1;
}

void MultiLanguageModel::saveUnsTable(uint64_t a1, _QWORD *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  unint64_t v16;
  char *v17;
  _DWORD v20[2];
  char *v21;
  int v22;

  if (*(_DWORD *)(a1 + 116))
  {
    v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_209A7A2E0);
      DgnString::DgnString((DgnString *)&v21);
      v20[0] = 1;
      v20[1] = v16;
      SubDirExtension::appendToString((DgnString *)v20, (DgnString *)&v21);
      if (v22)
        v17 = v21;
      else
        v17 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, *(_DWORD *)(*a2 + 4 * v16));
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      DgnTextFileWriter::setLineFieldValue(this, a10, (char *)&unk_209A7A2E0);
      DgnTextFileWriter::writeNextLine((void **)this);
      DgnString::~DgnString((DgnString *)&v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_2099201FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveIntTable(uint64_t a1, _QWORD *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  unint64_t v16;
  char *v17;
  _DWORD v20[2];
  char *v21;
  int v22;

  if (*(_DWORD *)(a1 + 116))
  {
    v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_209A7A2E0);
      DgnString::DgnString((DgnString *)&v21);
      v20[0] = 1;
      v20[1] = v16;
      SubDirExtension::appendToString((DgnString *)v20, (DgnString *)&v21);
      if (v22)
        v17 = v21;
      else
        v17 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, *(_DWORD *)(*a2 + 4 * v16));
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      DgnTextFileWriter::setLineFieldValue(this, a10, (char *)&unk_209A7A2E0);
      DgnTextFileWriter::writeNextLine((void **)this);
      DgnString::~DgnString((DgnString *)&v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_209920338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveRealTable(uint64_t a1, _QWORD *a2, uint64_t a3, char *a4, DgnTextFileWriter *this, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  unint64_t v16;
  char *v17;
  char *v18;
  _DWORD v22[2];
  char *v23;
  int v24;

  if (*(_DWORD *)(a1 + 116))
  {
    v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a6, a4);
      if (*(_DWORD *)(a3 + 8))
        v17 = *(char **)a3;
      else
        v17 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnString::DgnString((DgnString *)&v23);
      v22[0] = 1;
      v22[1] = v16;
      SubDirExtension::appendToString((DgnString *)v22, (DgnString *)&v23);
      if (v24)
        v18 = v23;
      else
        v18 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a8, v18);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a9, 0);
      DgnTextFileWriter::setLineFieldRealValue(this, a10, *(double *)(*a2 + 8 * v16));
      DgnTextFileWriter::setLineFieldValue(this, a11, (char *)&unk_209A7A2E0);
      DgnTextFileWriter::writeNextLine((void **)this);
      DgnString::~DgnString((DgnString *)&v23);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_209920480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveStringTable(uint64_t a1, _QWORD *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _DWORD v23[2];
  char *v24;
  int v25;

  if (*(_DWORD *)(a1 + 116))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_209A7A2E0);
      DgnString::DgnString((DgnString *)&v24);
      v23[0] = 1;
      v23[1] = v16;
      SubDirExtension::appendToString((DgnString *)v23, (DgnString *)&v24);
      if (v25)
        v17 = v24;
      else
        v17 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, 0);
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      v18 = *a2 + v15;
      if (*(_DWORD *)(v18 + 8))
        v19 = *(char **)v18;
      else
        v19 = (char *)&unk_209A7A2E0;
      DgnTextFileWriter::setLineFieldValue(this, a10, v19);
      DgnTextFileWriter::writeNextLine((void **)this);
      DgnString::~DgnString((DgnString *)&v24);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_2099205D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveMultiText(MultiLanguageModel *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[280];
  void *v65;

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v64);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v64, (uint64_t)a2, 0x29u, a3);
  v62 = 0;
  v63 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v64, sMLS_Versions, (uint64_t)&v62, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v64, "MultiLanguageModelSpec", (_QWORD *)(v62 + 8 * (v63 - 1)));
  if (*((_BYTE *)this + 112))
  {
    v11 = "Dispatch";
  }
  else if (*((_BYTE *)this + 113))
  {
    v11 = "LogLinear";
  }
  else
  {
    v11 = "InterpolatedLinear";
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v64, "MultiLMType", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfSubDirectories", *((unsigned int *)this + 29));
  v12 = *((unsigned __int8 *)this + 114);
  if (*((_BYTE *)this + 114))
  {
    v12 = *((_DWORD *)this + 39);
    v13 = *((_DWORD *)this + 40) - v12;
  }
  else
  {
    v13 = 0;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfFactoryWeightsNames", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfClientWeightsNames", v13);
  if (*((_DWORD *)this + 32) >= 2u)
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v64, "RecentBufferLMPath", *((const char **)this + 15));
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  DgnString::DgnString((DgnString *)v57, "TableName");
  v14 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v14 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v14), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v15 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v15 = v61;
  }
  *(_DWORD *)(v60 + 4 * v15) = 0;
  LODWORD(v61) = v15 + 1;
  DgnString::DgnString((DgnString *)v57, "WeightsName");
  v16 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v16 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v16), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v17 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v17 = v61;
  }
  *(_DWORD *)(v60 + 4 * v17) = 0;
  LODWORD(v61) = v17 + 1;
  DgnString::DgnString((DgnString *)v57, "SubDirectory");
  v18 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v18 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v18), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v19 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v19 = v61;
  }
  *(_DWORD *)(v60 + 4 * v19) = 0;
  LODWORD(v61) = v19 + 1;
  DgnString::DgnString((DgnString *)v57, "IntValue");
  v20 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v20 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v20), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v21 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v21 = v61;
  }
  *(_DWORD *)(v60 + 4 * v21) = 1;
  LODWORD(v61) = v21 + 1;
  DgnString::DgnString((DgnString *)v57, "RealValue");
  v22 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v22 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v22), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v23 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v23 = v61;
  }
  *(_DWORD *)(v60 + 4 * v23) = 2;
  LODWORD(v61) = v23 + 1;
  DgnString::DgnString((DgnString *)v57, "StrValue");
  v24 = v59;
  if ((_DWORD)v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    v24 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v24), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  v25 = v61;
  if ((_DWORD)v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    v25 = v61;
  }
  *(_DWORD *)(v60 + 4 * v25) = 0;
  LODWORD(v61) = v25 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v64, (uint64_t)&v60, (uint64_t)&v58);
  DgnArray<DgnString>::DgnArray(v57, *((unsigned int *)this + 29));
  if (*((_DWORD *)this + 29))
  {
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = *(int *)(*((_QWORD *)this + 17) + 4 * v27);
      if (v28 >= 5)
        v29 = 0;
      else
        v29 = off_24C21E3E8[v28];
      DgnString::operator=((DgnString *)(v57[0] + v26), v29);
      ++v27;
      v26 += 16;
    }
    while (v27 < *((unsigned int *)this + 29));
  }
  MultiLanguageModel::saveStringTable((uint64_t)this, v57, "SlotType", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  if (*((_BYTE *)this + 113))
    MultiLanguageModel::saveStringTable((uint64_t)this, (_QWORD *)this + 64, "CorrectiveName", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  if (!*((_BYTE *)this + 112))
  {
    MultiLanguageModel::saveStringTable((uint64_t)this, (_QWORD *)this + 44, "TopicName", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveStringTable((uint64_t)this, (_QWORD *)this + 40, "TemplatePath", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  }
  if (*((_BYTE *)this + 114))
  {
    DgnString::DgnString((DgnString *)&v55);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 50, (uint64_t)&v55, "WeightFloor", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 52, (uint64_t)&v55, "WeightCeiling", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 54, (uint64_t)&v55, "PrefiltererFixedWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 48, (uint64_t)&v55, "CurrentWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 56, (uint64_t)&v55, "DefaultTopicWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnString::~DgnString((DgnString *)&v55);
    if (*((_BYTE *)this + 114))
    {
      v30 = *((unsigned int *)this + 44);
      if ((_DWORD)v30)
      {
        v31 = 0;
        for (i = 0; i < v30; ++i)
        {
          v33 = *((_QWORD *)this + 21) + v31;
          if (*(_DWORD *)(v33 + 8) >= 2u)
          {
            if (i >= *((unsigned int *)this + 39))
              v34 = "ClientWeight";
            else
              v34 = "FactoryWeight";
            MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)(*((_QWORD *)this + 23) + v31), v33, v34, (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
            v30 = *((unsigned int *)this + 44);
          }
          v31 += 16;
        }
      }
    }
  }
  if (*((_BYTE *)this + 113))
  {
    DgnString::DgnString((DgnString *)&v55);
    MultiLanguageModel::saveRealTable((uint64_t)this, (_QWORD *)this + 62, (uint64_t)&v55, "LogLinearWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveIntTable((uint64_t)this, (_QWORD *)this + 66, "LogLinearOffset", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    v35 = *((unsigned int *)this + 29);
    v53 = 0;
    v54 = 0;
    if ((_DWORD)v35)
    {
      v65 = 0;
      v36 = realloc_array(0, &v65, 4 * v35, 0, 0, 1);
      v37 = v65;
      v53 = v65;
      v38 = *((_DWORD *)this + 29);
      LODWORD(v54) = v35;
      HIDWORD(v54) = v36 >> 2;
      if (v38)
      {
        v39 = 0;
        v40 = *((_QWORD *)this + 68);
        do
        {
          v37[v39] = *(unsigned __int8 *)(v40 + v39);
          ++v39;
        }
        while (v39 < *((unsigned int *)this + 29));
      }
    }
    else
    {
      LODWORD(v54) = 0;
    }
    MultiLanguageModel::saveUnsTable((uint64_t)this, &v53, "IsActive", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
    DgnString::~DgnString((DgnString *)&v55);
  }
  if (*((_BYTE *)this + 112))
  {
    v41 = *((unsigned int *)this + 29);
    v55 = 0;
    v56 = 0;
    if ((_DWORD)v41)
    {
      v53 = 0;
      v42 = realloc_array(0, &v53, 4 * v41, 0, 0, 1);
      v54 = 0;
      v55 = v53;
      v43 = *((unsigned int *)this + 29);
      LODWORD(v56) = v41;
      HIDWORD(v56) = v42 >> 2;
      v53 = 0;
      if ((_DWORD)v43)
      {
        v65 = 0;
        v44 = realloc_array(0, &v65, 4 * v43, 0, 0, 1);
        v45 = v65;
        v53 = v65;
        v46 = *((_DWORD *)this + 29);
        LODWORD(v54) = v43;
        HIDWORD(v54) = v44 >> 2;
        if (v46)
        {
          v47 = 0;
          v48 = *((_QWORD *)this + 71);
          v49 = v55;
          v50 = *((_QWORD *)this + 73);
          do
          {
            v51 = *(_DWORD *)(v48 + 4 * v47);
            if (v51 == 0xFFFFFF)
              v51 = -1;
            v49[v47] = v51;
            v52 = *(_DWORD *)(v50 + 4 * v47);
            if (v52 == 0xFFFFFF)
              v52 = -1;
            v45[v47++] = v52;
          }
          while (v47 < *((unsigned int *)this + 29));
        }
        goto LABEL_76;
      }
    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    LODWORD(v54) = 0;
LABEL_76:
    MultiLanguageModel::saveIntTable((uint64_t)this, &v55, "MinWordId", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveIntTable((uint64_t)this, &v53, "MaxWordId", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveUnsTable((uint64_t)this, (_QWORD *)this + 75, "PrefiltererPerWordPenalty", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v57);
  DgnArray<DgnString>::releaseAll((uint64_t)&v58);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v60);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v62);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v64);
}

void sub_20992102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;
  uint64_t v17;
  uint64_t v18;
  va_list va4;
  uint64_t v20;
  va_list va5;

  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v15 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v18 = va_arg(va5, _QWORD);
  v20 = va_arg(va5, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveLM(RecentBuffer **this, DFile *a2, DFileChecksums *a3, uint64_t a4, DFileChecksums *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WordNgramBuildSpec *v18;
  RecentBuffer *v19;
  _DWORD v20[2];

  if ((_DWORD)a4)
    MultiLanguageModel::saveMultiText((MultiLanguageModel *)this, a2, (int)a5);
  else
    MultiLanguageModel::saveMultiBinary((MultiLanguageModel *)this, a2, a3, (int)a5);
  if (*((_DWORD *)this + 29))
  {
    v16 = 0;
    do
    {
      v20[0] = 1;
      v20[1] = v16;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)v20, v10, v11, v12, v13, v14, v15);
      v17 = *((_QWORD *)this[5] + v16);
      if (v17)
        (*(void (**)(uint64_t, DFile *, DFileChecksums *, uint64_t, DFileChecksums *))(*(_QWORD *)v17 + 72))(v17, a2, a3, a4, a5);
      if (!*((_BYTE *)this + 112))
      {
        v18 = (WordNgramBuildSpec *)*((_QWORD *)this[38] + v16);
        if (v18)
          WordNgramBuildSpec::saveWordNgramBuildSpec(v18, a2, a3, a4, a5);
      }
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      ++v16;
    }
    while (v16 < *((unsigned int *)this + 29));
  }
  v19 = this[1];
  if (v19)
    RecentBuffer::saveRecentBuffer(v19, a2, a3, a4, a5);
}

unsigned int *MultiLanguageModel::saveLMShared(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v6;
  unint64_t i;
  unsigned int v8;

  v3 = result[29];
  if ((_DWORD)v3)
  {
    v6 = result;
    for (i = 0; i < v3; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v6 + 5) + 8 * i);
      if (result)
      {
        v8 = *(_DWORD *)(*((_QWORD *)v6 + 17) + 4 * i);
        if (v8 <= 3 && v8 != 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a2, a3);
          v3 = v6[29];
        }
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::reloadLMShared(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v6;
  unint64_t i;
  unsigned int v8;

  v3 = result[29];
  if ((_DWORD)v3)
  {
    v6 = result;
    for (i = 0; i < v3; ++i)
    {
      result = *(unsigned int **)(*((_QWORD *)v6 + 5) + 8 * i);
      if (result)
      {
        v8 = *(_DWORD *)(*((_QWORD *)v6 + 17) + 4 * i);
        if (v8 <= 3 && v8 != 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, a2, a3);
          v3 = v6[29];
        }
      }
    }
  }
  return result;
}

void MultiLanguageModel::saveVocAndSvc(uint64_t a1, DFile *a2, DFile *a3, DFileChecksums *a4, int a5, DFileChecksums *a6, int a7, int a8, int a9, int a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WordNgramBuildSpec *v30;
  RecentBuffer *v31;
  int v32;
  int v33;

  MultiLanguageModel::saveMultiBinary((MultiLanguageModel *)a1, a2, a4, (int)a6);
  if (*(_DWORD *)(a1 + 116))
  {
    v21 = 0;
    do
    {
      v32 = 1;
      v33 = v21;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v32, v15, v16, v17, v18, v19, v20);
      v32 = 1;
      v33 = v21;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v32, v22, v23, v24, v25, v26, v27);
      v28 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 8 * v21);
      if (v28)
      {
        v29 = *v28;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v21) == 1)
          (*(void (**)(void))(v29 + 72))();
        else
          (*(void (**)(uint64_t *))(v29 + 96))(v28);
      }
      if (!*(_BYTE *)(a1 + 112))
      {
        v30 = *(WordNgramBuildSpec **)(*(_QWORD *)(a1 + 304) + 8 * v21);
        if (v30)
          WordNgramBuildSpec::saveWordNgramBuildSpec(v30, a2, a4, 0, a6);
      }
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      DFile::popCurrentSubDirComponent((uint64_t)a3);
      ++v21;
    }
    while (v21 < *(unsigned int *)(a1 + 116));
  }
  v31 = *(RecentBuffer **)(a1 + 8);
  if (v31)
    RecentBuffer::saveRecentBuffer(v31, a2, a4, 0, a6);
}

uint64_t MultiLanguageModel::setLMScale(MultiLanguageModel *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;

  v4 = *((unsigned int *)this + 29);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
        v4 = *((unsigned int *)this + 29);
      }
    }
  }
  *((_DWORD *)this + 8) = a2;
  return CombineTable::initCombineTable((uint64_t)this + 704, (double)a2);
}

BOOL MultiLanguageModel::recentBufferUsesWord(MultiLanguageModel *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 > 0xFFFFF3 || *((_BYTE *)this + 112) == 0)
    return 1;
  v4 = *((unsigned int *)this + 29);
  if ((_DWORD)v4)
  {
    v5 = 0;
    while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v5) > a2 || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v5) < a2)
    {
      if (v4 == ++v5)
        goto LABEL_12;
    }
    v6 = *((_DWORD *)this + 140);
  }
  else
  {
LABEL_12:
    v6 = *((_DWORD *)this + 140);
    LODWORD(v5) = v6;
  }
  return (_DWORD)v5 == v6;
}

BOOL MultiLanguageModel::hasRecentBuffer(MultiLanguageModel *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 29);
  if (!(_DWORD)v2)
    return LanguageModel::hasRecentBuffer(this);
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
    if (v4)
      break;
LABEL_6:
    if (++v3 >= v2)
      return LanguageModel::hasRecentBuffer(this);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4) & 1) == 0)
  {
    v2 = *((unsigned int *)this + 29);
    goto LABEL_6;
  }
  return 1;
}

uint64_t MultiLanguageModel::getRecentBufferLength(MultiLanguageModel *this)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;

  v2 = *((unsigned int *)this + 29);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
      if (v5)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5);
        if (v4 <= v6)
          v4 = v6;
        v2 = *((unsigned int *)this + 29);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  else
  {
    v4 = 0;
  }
  LODWORD(result) = LanguageModel::getRecentBufferLength(this);
  if (v4 <= result)
    return result;
  else
    return v4;
}

WordLanguageModel ***MultiLanguageModel::addToRecent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;

  v6 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v8 + 136))(v8, a2, a3);
        v6 = *(unsigned int *)(a1 + 116);
      }
    }
  }
  return LanguageModel::addToRecent((WordLanguageModel ***)a1, a2, a3);
}

void MultiLanguageModel::clearRecent(MultiLanguageModel *this)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;

  v2 = *((unsigned int *)this + 29);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4);
        v2 = *((unsigned int *)this + 29);
      }
    }
  }
  LanguageModel::clearRecent(this);
}

uint64_t MultiLanguageModel::setWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t i;
  long double v27;
  int v28;
  long double v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 != *(_DWORD *)(a1 + 116))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4634, (uint64_t)"lm/multilm", 3, (uint64_t)"%d %d", a7, a8, *(_DWORD *)(a2 + 8));
    v10 = *(_DWORD *)(a2 + 8);
  }
  v34[0] = 0;
  v34[1] = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)v34, (uint64_t *)a2, 0, v10);
  v13 = *(unsigned int *)(a1 + 116);
  if (!(_DWORD)v13)
    goto LABEL_10;
  v14 = 0;
  v15 = *(unsigned __int8 *)(a1 + 114);
  v16 = v34[0];
  v17 = 8 * v13;
  v18 = 1;
  do
  {
    if (v15 && !*(_QWORD *)(*(_QWORD *)(a1 + 40) + v14))
      *(_QWORD *)(v16 + v14) = 0;
    v18 &= *(double *)(v16 + v14) == 0.0;
    v14 += 8;
  }
  while (v17 != v14);
  if ((v18 & 1) != 0)
LABEL_10:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4650, (uint64_t)"lm/multilm", 45, (uint64_t)"%s", v11, v12, (char)&errStr_lm_multilm_E_ALL_WEIGHTS_ZERO);
  if (*(_BYTE *)(a1 + 113))
  {
    v19 = *(_DWORD *)(a1 + 116);
    v20 = *(_DWORD *)(a1 + 508);
    LODWORD(v21) = v19;
    if (v19 > v20)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 496, v19 - v20, 0);
      LODWORD(v21) = *(_DWORD *)(a1 + 116);
    }
    *(_DWORD *)(a1 + 504) = v19;
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)v34[0];
      v23 = *(_QWORD **)(a1 + 496);
      v21 = v21;
      do
      {
        v24 = *v22++;
        *v23++ = v24;
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v32 = 0;
    v33 = 0;
    MultiLanguageModel::fitWeightsToFloorAndCeiling(a1, (uint64_t)v34, (uint64_t)&v32);
    if ((_DWORD)v33)
      DgnPrimArray<double>::copyArraySlice(a1 + 384, &v32, 0, v33);
    else
      MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling(a1, v34, a1 + 384);
    v25 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v25)
    {
      for (i = 0; i < v25; ++i)
      {
        v27 = *(double *)(*(_QWORD *)(a1 + 384) + 8 * i);
        if (v27 == 0.0)
        {
          LOWORD(v28) = 2000;
        }
        else
        {
          v29 = DgnLog(v27);
          LODWORD(v30) = *(_DWORD *)(a1 + 32);
          v28 = (int)(0.5 - v29 * (double)v30);
          v25 = *(unsigned int *)(a1 + 116);
        }
        *(_WORD *)(*(_QWORD *)(a1 + 464) + 2 * i) = v28;
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
}

void sub_20992192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::fitWeightsToFloorAndCeiling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double *v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  uint64_t v54;
  double v55;
  double *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  _QWORD v63[2];
  void *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;

  v68 = 0;
  v69 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v68, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  v5 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v5)
  {
    v6 = 0.0;
    v7 = v68;
    v8 = *(unsigned int *)(a1 + 116);
    do
    {
      v9 = *v7++;
      v6 = v6 + v9;
      --v8;
    }
    while (v8);
    v10 = v68;
    v11 = *(unsigned int *)(a1 + 116);
    v12 = 1.0 / v6;
    do
    {
      *v10 = v12 * *v10;
      ++v10;
      --v11;
    }
    while (v11);
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v13 = realloc_array(0, &v64, 4 * v5, 0, 0, 1);
    v14 = v64;
    v66 = v64;
    v15 = *(_DWORD *)(a1 + 116);
    LODWORD(v67) = v5;
    HIDWORD(v67) = v13 >> 2;
    if (v15)
    {
      v16 = 0;
      do
        v14[v16++] = 0;
      while (v16 < *(unsigned int *)(a1 + 116));
    }
  }
  else
  {
    v66 = 0;
    v67 = 0;
  }
  v64 = 0;
  v65 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v64, (uint64_t *)&v68, 0, v69);
  v17 = 0;
  v63[0] = 0;
  v63[1] = 0;
  v18 = 1;
  v19 = 0xFFFFFFFFLL;
  v20 = 1.0;
  do
  {
    v21 = v17;
    DgnPrimArray<double>::copyArraySlice((uint64_t)v63, (uint64_t *)&v64, 0, v65);
    v22 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v22)
    {
      v26 = v20;
      goto LABEL_49;
    }
    v23 = 0;
    v24 = 0.0;
    v25 = 1.79769313e308;
    v26 = v20;
    v27 = 0.0;
    v28 = 0.0;
    v29 = v19;
    do
    {
      v30 = v68[v23];
      if (v30 == 0.0)
        goto LABEL_15;
      v32 = *(double *)(*(_QWORD *)(a1 + 400) + 8 * v23);
      if (v20 * v30 >= v32 || v19 == v23)
      {
        v32 = *(double *)(*(_QWORD *)(a1 + 416) + 8 * v23);
        if (v20 * v30 <= v32 || v19 == v23)
        {
          v27 = v27 + v30;
LABEL_15:
          v31 = v25;
          goto LABEL_16;
        }
        v24 = v24 + v32;
        if (v30 <= 0.0)
          goto LABEL_15;
        v31 = -(v32 - v20 * v30);
        if (v31 >= v25)
          goto LABEL_15;
        if (v32 <= 0.0 || (v66[v23] & 0x10) != 0)
          goto LABEL_15;
        v18 = 0;
        v29 = v23;
      }
      else
      {
        v28 = v28 + v32;
        if (v30 <= 0.0)
          goto LABEL_15;
        v31 = v32 + -v20 * v30;
        if (v31 >= v25 || (v66[v23] & 1) != 0)
          goto LABEL_15;
        v29 = v23;
        v18 = 1;
      }
      v26 = v32 / v30;
LABEL_16:
      ++v23;
      v25 = v31;
    }
    while (v22 != v23);
    if (v27 > 0.0 && v28 + v24 <= 1.0)
    {
      v26 = (1.0 - v28 - v24) / v27;
      v19 = 0xFFFFFFFFLL;
      goto LABEL_54;
    }
    v19 = v29;
LABEL_49:
    if (v20 == v26)
    {
LABEL_80:
      *(_DWORD *)(a3 + 8) = 0;
      goto LABEL_93;
    }
    if ((v18 & 1) != 0)
      v37 = 1;
    else
      v37 = 16;
    v66[v19] |= v37;
LABEL_54:
    v38 = fabs((v26 - v20) / v20);
    v39 = 1.79769313e308;
    if (v26 == 0.0)
      v39 = 0.0;
    if (v20 == 0.0)
      v38 = v39;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = 0;
      v42 = (uint64_t)v68;
      v43 = v64;
      v44 = v63[0];
      do
      {
        v45 = *(double *)(v42 + v41 * 8);
        if (v45 == 0.0)
        {
          v43[v41] = 0;
        }
        else
        {
          if (v19 == v41)
          {
            if ((v18 & 1) != 0)
              v46 = *(_QWORD *)(a1 + 400);
            else
              v46 = *(_QWORD *)(a1 + 416);
            v43[v19] = *(_QWORD *)(v46 + 8 * v19);
          }
          else
          {
            v47 = *(double *)(*(_QWORD *)(a1 + 400) + v41 * 8);
            v48 = *(double *)(*(_QWORD *)(a1 + 416) + v41 * 8);
            v49 = v26 * v45;
            if (v48 <= v49)
            {
              if (v47 <= v48)
                v47 = *(double *)(*(_QWORD *)(a1 + 416) + v41 * 8);
            }
            else if (v47 <= v49)
            {
              v47 = v49;
            }
            *(double *)&v43[v41] = v47;
          }
          v50 = *(double *)(v44 + v41 * 8);
          if (v50 > 0.0)
          {
            v51 = fabs((*(double *)&v43[v41] - v50) / v50);
            if (v38 <= v51)
              v38 = v51;
          }
        }
        ++v41;
      }
      while (v40 != v41);
    }
    if (v38 <= 0.0001)
      break;
    v17 = v21 + 1;
    v20 = v26;
  }
  while (v21 < 0x3E8);
  if (v21 > 0x3E7)
    goto LABEL_80;
  if ((_DWORD)v40)
  {
    v52 = 0.0;
    v53 = (double *)v64;
    v54 = v40;
    do
    {
      v55 = *v53++;
      v52 = v52 + v55;
      --v54;
    }
    while (v54);
    v56 = (double *)v64;
    v57 = v40;
    v58 = 1.0 / v52;
    do
    {
      *v56 = v58 * *v56;
      ++v56;
      --v57;
    }
    while (v57);
    v59 = 0;
    v60 = 8 * v40;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + v59))
      {
        v61 = *(double *)((char *)v64 + v59);
        if (v61 != 0.0
          && (v61 + 0.0001 < *(double *)(*(_QWORD *)(a1 + 400) + v59)
           || v61 + -0.0001 > *(double *)(*(_QWORD *)(a1 + 416) + v59)))
        {
          goto LABEL_80;
        }
      }
      v59 += 8;
    }
    while (v60 != v59);
  }
  DgnPrimArray<double>::copyArraySlice(a3, (uint64_t *)&v64, 0, v65);
LABEL_93:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v66);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v68);
}

void sub_209921DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t i;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v22;
  uint64_t v23;
  void *v24;

  v4 = *(unsigned int *)(a1 + 116);
  v22 = 0;
  v23 = 0;
  if ((_DWORD)v4)
  {
    v24 = 0;
    v7 = realloc_array(0, &v24, 8 * v4, 0, 0, 1);
    v8 = (char *)v24;
    v22 = v24;
    v9 = *(unsigned int *)(a1 + 116);
    LODWORD(v23) = v4;
    HIDWORD(v23) = v7 >> 3;
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *a2;
      v12 = 8 * v9;
      v13 = 0.0;
      do
      {
        v14 = *(double *)(v11 + v10);
        if (v14 == 0.0)
        {
          *(_QWORD *)&v8[v10] = 0;
        }
        else
        {
          v15 = *(double *)(*(_QWORD *)(a1 + 400) + v10);
          if (v14 >= v15 && (v15 = *(double *)(*(_QWORD *)(a1 + 416) + v10), v14 <= v15))
          {
            *(double *)&v8[v10] = v14;
            v15 = v14;
          }
          else
          {
            *(double *)&v8[v10] = v15;
          }
          v13 = v13 + v15;
        }
        v10 += 8;
      }
      while (v12 != v10);
      for (i = 0; v12 != i; i += 8)
      {
        v17 = *(double *)&v8[i];
        if (v17 != 0.0)
        {
          if (v13 <= 1.0)
          {
            v18 = *(double *)(*(_QWORD *)(a1 + 416) + i) - v17;
            if (v18 <= 0.0)
              continue;
            v19 = 1.0 - v13;
            if (1.0 - v13 <= v18)
              v18 = 1.0 - v13;
            v20 = v17 + v18;
          }
          else
          {
            v18 = v17 - *(double *)(*(_QWORD *)(a1 + 400) + i);
            if (v18 <= 0.0)
              continue;
            v19 = v13 + -1.0;
            if (v13 + -1.0 <= v18)
              v18 = v13 + -1.0;
            v20 = v17 - v18;
          }
          *(double *)&v8[i] = v20;
          if (v20 == 0.0)
          {
            *(_QWORD *)&v8[i] = 0x3EE4F8B588E368F1;
            v18 = v18 + -0.00001;
          }
          if (v18 == v19)
            break;
          if (v13 > 1.0)
            v18 = -v18;
          v13 = v13 + v18;
        }
      }
    }
  }
  else
  {
    LODWORD(v23) = 0;
  }
  DgnPrimArray<double>::copyArraySlice(a3, (uint64_t *)&v22, 0, v4);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_209921FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getNumDispatchComponents(MultiLanguageModel *this)
{
  if (*((_BYTE *)this + 112))
    return *((unsigned int *)this + 29);
  else
    return 0;
}

void MultiLanguageModel::setDispatchPrefiltererPerWordPenalty(MultiLanguageModel *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(MultiLanguageModel *))(*(_QWORD *)this + 544))(this) <= a2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4720, (uint64_t)"lm/multilm", 133, (uint64_t)"%u %u", v6, v7, a2);
  if (a3 >= 0x3E9)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4722, (uint64_t)"lm/multilm", 134, (uint64_t)"%u", v6, v7, a3);
  *(_DWORD *)(*((_QWORD *)this + 75) + 4 * a2) = a3;
}

uint64_t MultiLanguageModel::getDispatchPrefiltererPerWordPenalty(MultiLanguageModel *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((*(unsigned int (**)(MultiLanguageModel *))(*(_QWORD *)this + 544))(this) <= a2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4734, (uint64_t)"lm/multilm", 133, (uint64_t)"%u %u", v4, v5, a2);
  return *(unsigned int *)(*((_QWORD *)this + 75) + 4 * a2);
}

uint64_t MultiLanguageModel::getNumInterpolatedLms(MultiLanguageModel *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v5;

  v1 = *((unsigned __int8 *)this + 114);
  v2 = *((unsigned int *)this + 29);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v5)
      {
        v1 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 568))(v5) + v1;
        v2 = *((unsigned int *)this + 29);
      }
    }
  }
  return v1;
}

uint64_t MultiLanguageModel::setInterpolatedLmWeights(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 114))
  {
    if (!*a3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 496))(a1, a2);
      return 1;
    }
    --*a3;
  }
  v6 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v8)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v8 + 576))(v8, a2, a3) & 1) != 0)
          return 1;
        v6 = *(unsigned int *)(a1 + 116);
      }
    }
  }
  return 0;
}

uint64_t MultiLanguageModel::getInterpolatedLmWeights(MultiLanguageModel *this, unsigned int *a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t result;

  if (*((_BYTE *)this + 114))
  {
    if (!*a2)
      return (uint64_t)this + 384;
    --*a2;
  }
  v4 = *((unsigned int *)this + 29);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v6)
      {
        result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v6 + 584))(v6, a2);
        if (result)
          return result;
        v4 = *((unsigned int *)this + 29);
      }
    }
  }
  return 0;
}

uint64_t MultiLanguageModel::getActiveTopicLmSlots(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v18[2];
  int v19;
  _QWORD v20[2];

  if (*(_QWORD *)(a1 + 616))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4833, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"getActiveTopicLmSlots");
  v11 = *(unsigned int *)(a1 + 104);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v20, *(_DWORD *)(a1 + 104));
  v19 = 0;
  MultiLanguageModel::getActiveTopicLmSlotsInternal(a1, (uint64_t)v20, &v19);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v18, v11);
  if ((_DWORD)v11)
    bzero(v18[0], v11);
  if (*(_DWORD *)(a2 + 8))
  {
    v14 = 0;
    do
    {
      v15 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4854, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
      v16 = v18[0];
      if (*((_BYTE *)v18[0] + v15))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4857, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v16 = v18[0];
      }
      v16[v15] = 1;
      *(_BYTE *)(*a3 + v14++) = *(_BYTE *)(v20[0] + v15);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_209922458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getActiveTopicLmSlotsInternal(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v11;

  if (*(_DWORD *)(result + 116))
  {
    v5 = result;
    for (i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      v7 = *a3;
      if (v7 >= *(_DWORD *)(a2 + 8))
        return result;
      v8 = *(_DWORD *)(*(_QWORD *)(v5 + 136) + 4 * i);
      if (v8 == 1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * i);
        if (v9)
        {
          if (*(_BYTE *)(v5 + 113))
            v9 = 496;
          else
            v9 = 384;
          LOBYTE(v9) = *(double *)(*(_QWORD *)(v5 + v9) + 8 * i) != 0.0;
        }
        *(_BYTE *)(*(_QWORD *)a2 + v7) = v9;
        *a3 = v7 + 1;
      }
      else if (*(_BYTE *)(v5 + 112))
      {
        if (v8 == 3 && i == *(_DWORD *)(v5 + 560))
        {
LABEL_18:
          v11 = *(void **)(*(_QWORD *)(v5 + 40) + 8 * i);
          if (v11)
          result = MultiLanguageModel::getActiveTopicLmSlotsInternal(v11, a2, a3);
        }
      }
      else if (v8 == 3)
      {
        goto LABEL_18;
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::setTopicLmSlotWeights(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  void *__b;

  if (*(_QWORD *)(a1 + 616))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4903, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"setTopicLmSlotWeights");
  v11 = *(unsigned int *)(a1 + 104);
  v18 = 0;
  v19 = 0;
  v17 = a1;
  if ((_DWORD)v11)
  {
    __b = 0;
    v12 = realloc_array(0, &__b, 8 * v11, 0, 0, 1);
    v13 = (double *)__b;
    v18 = (double *)__b;
    LODWORD(v19) = v11;
    HIDWORD(v19) = v12 >> 3;
    memset_pattern16(__b, &unk_209A7A2D0, 8 * v11);
  }
  else
  {
    v13 = 0;
    LODWORD(v19) = 0;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    v14 = 0;
    do
    {
      v15 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4919, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v13 = v18;
      }
      if (v13[v15] != -2.0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4922, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14));
        v13 = v18;
      }
      v13[v15] = *(double *)(*a3 + 8 * v14++);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  LODWORD(__b) = 0;
  MultiLanguageModel::setTopicLmSlotWeightsInternal(v17, (uint64_t)&v18, (unsigned int *)&__b);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_209922760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setTopicLmSlotWeightsInternal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  double v11;
  int v12;
  double v13;
  double v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned __int8 *v24;
  double *v25;
  double v27;
  void *v29[2];
  _QWORD v30[2];

  v30[0] = 0;
  v30[1] = 0;
  if (*(_BYTE *)(a1 + 114))
    DgnPrimArray<double>::copyArraySlice((uint64_t)v30, (uint64_t *)(a1 + 384), 0, *(_DWORD *)(a1 + 392));
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v29, *(_DWORD *)(a1 + 116));
  v6 = *(_DWORD *)(a1 + 116);
  if (!v6)
  {
    if (!*(_BYTE *)(a1 + 114))
      goto LABEL_53;
    goto LABEL_52;
  }
  bzero(v29[0], *(unsigned int *)(a1 + 116));
  v9 = *a3;
  if (*a3 < *(_DWORD *)(a2 + 8))
  {
    v10 = 0;
    v11 = 0.0;
    while (1)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v10);
      if (v12 == 1)
      {
        if (*(_BYTE *)(a1 + 114))
        {
          v13 = *(double *)(*(_QWORD *)a2 + 8 * v9);
          if (v13 != -2.0)
          {
            if (v13 == -1.0)
              v13 = *(double *)(*(_QWORD *)(a1 + 448) + 8 * v10);
            if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v10))
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4970, (uint64_t)"lm/multilm", 80, (uint64_t)"%u", v7, v8, v9);
            if (v13 == 0.0 || (v14 = *(double *)(*(_QWORD *)(a1 + 400) + 8 * v10), v13 >= v14))
            {
              v14 = v13;
              if (v13 > *(double *)(*(_QWORD *)(a1 + 416) + 8 * v10))
                v14 = *(double *)(*(_QWORD *)(a1 + 416) + 8 * v10);
            }
            v11 = v11 + v14;
            *(double *)(v30[0] + 8 * v10) = v14;
            *((_BYTE *)v29[0] + v10) = 1;
            v9 = *a3;
          }
        }
        *a3 = v9 + 1;
      }
      else if (*(_BYTE *)(a1 + 112))
      {
        if (v12 == 3 && v10 == *(_DWORD *)(a1 + 560))
        {
LABEL_26:
          v16 = *(void **)(*(_QWORD *)(a1 + 40) + 8 * v10);
          if (v16)
          MultiLanguageModel::setTopicLmSlotWeightsInternal(v16, a2, a3);
        }
      }
      else if (v12 == 3)
      {
        goto LABEL_26;
      }
      ++v10;
      v17 = *(unsigned int *)(a1 + 116);
      if (v10 < v17)
      {
        v9 = *a3;
        if (*a3 < *(_DWORD *)(a2 + 8))
          continue;
      }
      goto LABEL_35;
    }
  }
  v11 = 0.0;
  LODWORD(v17) = v6;
LABEL_35:
  if (*(_BYTE *)(a1 + 114))
  {
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = v17;
      v20 = 0.0;
      do
      {
        if (!*((_BYTE *)v29[0] + v18))
          v20 = v20 + *(double *)(*(_QWORD *)(a1 + 384) + 8 * v18);
        ++v18;
      }
      while (v17 != v18);
      v21 = 0.9999 / v11;
      v22 = 1.0;
      if (v11 <= 0.9999)
        v21 = 1.0;
      if (v20 != 0.0)
      {
        v23 = 1.0 - v11;
        if (v11 > 0.9999)
          v23 = 0.0001;
        v22 = v23 / v20;
      }
      v24 = (unsigned __int8 *)v29[0];
      v25 = (double *)v30[0];
      do
      {
        if (*v24++)
          v27 = v21;
        else
          v27 = v22;
        *v25 = *v25 * v27;
        ++v25;
        --v19;
      }
      while (v19);
    }
LABEL_52:
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 496))(a1, v30);
  }
LABEL_53:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v29);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v30);
}

void sub_209922A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::hasWeights(MultiLanguageModel *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t MultiLanguageModel::getWeightsData(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = result + 168;
  *a3 = *(_DWORD *)(result + 156);
  *a4 = *(_DWORD *)(result + 160);
  return result;
}

uint64_t MultiLanguageModel::cleanupWeightsData(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;

  if (*(_BYTE *)(this + 152))
  {
    v1 = this;
    if (!*(_BYTE *)(this + 114) && *(_DWORD *)(this + 28))
    {
      DgnArray<DgnString>::releaseAll(this + 168);
      *(_DWORD *)(v1 + 156) = 0;
      *(_DWORD *)(v1 + 160) = 0;
      *(_DWORD *)(v1 + 240) = *(_DWORD *)(v1 + 236);
      this = *(_QWORD *)(v1 + 248);
      if (this)
      {
        this = MemChunkFree((_QWORD *)this, 0);
        *(_QWORD *)(v1 + 248) = 0;
      }
      *(_QWORD *)(v1 + 256) = 0;
      *(_QWORD *)(v1 + 264) = 0;
      *(_DWORD *)(v1 + 272) = 0;
    }
    v2 = *(unsigned int *)(v1 + 116);
    if ((_DWORD)v2)
    {
      for (i = 0; i < v2; ++i)
      {
        if ((!*(_BYTE *)(v1 + 112) || i == *(_DWORD *)(v1 + 560)) && *(_DWORD *)(*(_QWORD *)(v1 + 136) + 4 * i) == 3)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * i);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 624))(v4);
          v2 = *(unsigned int *)(v1 + 116);
        }
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::makeNewWeights(MultiLanguageModel *this, const char **a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t NextId;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  if (*((_BYTE *)this + 114) || !*((_DWORD *)this + 7))
  {
    if (*((_DWORD *)a2 + 2))
      v4 = *a2;
    else
      v4 = (const char *)&unk_209A7A2E0;
    if ((isValidName(v4) & 1) == 0)
    {
      if (*((_DWORD *)a2 + 2))
        v7 = *a2;
      else
        v7 = (const char *)&unk_209A7A2E0;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5137, (uint64_t)"lm/multilm", 81, (uint64_t)"%.500s", v5, v6, (char)v7);
    }
    NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 58);
    if (NextId >= 0xFFFF)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5141, (uint64_t)"lm/multilm", 83, (uint64_t)"%s", v8, v9, (char)&errStr_lm_multilm_E_TOO_MANY_WEIGHTSIDS);
    v11 = *((_DWORD *)this + 40);
    if (v11 - *((_DWORD *)this + 39) == 1000)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5146, (uint64_t)"lm/multilm", 84, (uint64_t)"%u", v8, v9, 232);
      v11 = *((_DWORD *)this + 40);
    }
    *((_DWORD *)this + 40) = v11 + 1;
    v12 = (_QWORD *)((char *)this + 168);
    if (DgnArray<DgnString>::find((unsigned int *)this + 42, (uint64_t)a2) != -1)
    {
      if (*((_DWORD *)a2 + 2))
        v15 = *a2;
      else
        v15 = (const char *)&unk_209A7A2E0;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5153, (uint64_t)"lm/multilm", 82, (uint64_t)"%.500s %u", v13, v14, (char)v15);
    }
    v16 = (NextId - 1);
    v17 = *((_DWORD *)this + 44);
    if (NextId > v17)
    {
      v18 = *((_DWORD *)this + 45);
      if (NextId > v18)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 168, NextId - v18, 0);
        v17 = *((_DWORD *)this + 44);
      }
      v19 = NextId - v17;
      if (NextId >= v17)
      {
        if (NextId > v17)
        {
          v22 = 16 * v17;
          do
          {
            DgnString::DgnString((DgnString *)(*v12 + v22));
            v22 += 16;
            --v19;
          }
          while (v19);
        }
      }
      else if ((int)NextId < (int)v17)
      {
        v20 = (int)v17;
        v21 = 16 * (int)v17 - 16;
        do
        {
          --v20;
          DgnString::~DgnString((DgnString *)(*v12 + v21));
          v21 -= 16;
        }
        while (v20 > (int)NextId);
      }
      *((_DWORD *)this + 44) = NextId;
    }
    DgnString::operator=((DgnString *)(*((_QWORD *)this + 21) + 16 * v16), (DgnString *)a2);
    if (*((_BYTE *)this + 114))
    {
      v29 = *((_DWORD *)this + 48);
      if (NextId > v29)
      {
        v30 = (_QWORD *)((char *)this + 184);
        v31 = *((_DWORD *)this + 49);
        if (NextId > v31)
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 184, NextId - v31, 0);
          v29 = *((_DWORD *)this + 48);
        }
        if (v29 <= NextId)
        {
          if (v29 < NextId)
          {
            v34 = NextId - (unint64_t)v29;
            v35 = 16 * v29;
            do
            {
              v36 = (_QWORD *)(*v30 + v35);
              *v36 = 0;
              v36[1] = 0;
              v35 += 16;
              --v34;
            }
            while (v34);
          }
        }
        else if ((int)v29 > (int)NextId)
        {
          v32 = (int)v29;
          v33 = 16 * (int)v29 - 16;
          do
          {
            --v32;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v30 + v33);
            v33 -= 16;
          }
          while (v32 > (int)NextId);
        }
        *((_DWORD *)this + 48) = NextId;
        v37 = (_QWORD *)((char *)this + 200);
        v38 = *((_DWORD *)this + 53);
        if (NextId > v38)
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 200, NextId - v38, 0);
        v39 = *((unsigned int *)this + 52);
        if (v39 <= NextId)
        {
          if (v39 < NextId)
          {
            v42 = NextId - v39;
            v43 = 16 * v39;
            do
            {
              v44 = (_QWORD *)(*v37 + v43);
              *v44 = 0;
              v44[1] = 0;
              v43 += 16;
              --v42;
            }
            while (v42);
          }
        }
        else if ((int)v39 > (int)NextId)
        {
          v40 = (int)v39;
          v41 = 16 * (int)v39 - 16;
          do
          {
            --v40;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v37 + v41);
            v41 -= 16;
          }
          while (v40 > (int)NextId);
        }
        *((_DWORD *)this + 52) = NextId;
        v45 = (_QWORD *)((char *)this + 216);
        v46 = *((_DWORD *)this + 57);
        if (NextId > v46)
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 216, NextId - v46, 0);
        v47 = *((unsigned int *)this + 56);
        if (v47 <= NextId)
        {
          if (v47 < NextId)
          {
            v50 = NextId - v47;
            v51 = 16 * v47;
            do
            {
              v52 = (_QWORD *)(*v45 + v51);
              *v52 = 0;
              v52[1] = 0;
              v51 += 16;
              --v50;
            }
            while (v50);
          }
        }
        else if ((int)v47 > (int)NextId)
        {
          v48 = (int)v47;
          v49 = 16 * (int)v47 - 16;
          do
          {
            --v48;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v45 + v49);
            v49 -= 16;
          }
          while (v48 > (int)NextId);
        }
        *((_DWORD *)this + 56) = NextId;
      }
      v53 = *((_DWORD *)this + 29);
      v54 = *((_QWORD *)this + 23) + 16 * v16;
      v55 = *(_DWORD *)(v54 + 12);
      v56 = v53;
      if (v53 > v55)
      {
        DgnPrimArray<unsigned long long>::reallocElts(*((_QWORD *)this + 23) + 16 * v16, v53 - v55, 0);
        v56 = *((_DWORD *)this + 29);
      }
      *(_DWORD *)(v54 + 8) = v53;
      if (v56)
      {
        v57 = 0;
        v58 = *((_QWORD *)this + 5);
        v59 = *(_QWORD *)(*((_QWORD *)this + 23) + 16 * v16);
        v60 = 8 * v56;
        do
        {
          if (*(_QWORD *)(v58 + v57))
            v61 = *(double *)(*((_QWORD *)this + 48) + v57);
          else
            v61 = -1.0;
          *(double *)(v59 + v57) = v61;
          v57 += 8;
        }
        while (v60 != v57);
      }
      MultiLanguageModel::adjustNamedWeightsSet(this, NextId - 1, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    NextId = 0xFFFFLL;
  }
  if (*((_DWORD *)this + 29))
  {
    v62 = 0;
    do
    {
      if ((!*((_BYTE *)this + 112) || v62 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v62) == 3)
      {
        v63 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v62);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 608))(v63))
        {
          v64 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v62);
          v65 = (*(uint64_t (**)(uint64_t, const char **))(*(_QWORD *)v64 + 632))(v64, a2);
          if ((_DWORD)NextId == 0xFFFF)
            NextId = v65;
          else
            NextId = NextId;
        }
      }
      ++v62;
    }
    while (v62 < *((unsigned int *)this + 29));
  }
  return NextId;
}

uint64_t MultiLanguageModel::adjustNamedWeightsSet(MultiLanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  long double v32;
  int v33;
  long double v34;
  unint64_t v35;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v10 = *((unsigned int *)this + 29);
  v39 = 0;
  v40 = 0;
  if (!(_DWORD)v10)
  {
    LODWORD(v40) = 0;
    goto LABEL_22;
  }
  v37 = 0;
  v11 = realloc_array(0, &v37, 8 * v10, 0, 0, 1);
  v12 = (double *)v37;
  v39 = v37;
  v13 = *((unsigned int *)this + 29);
  LODWORD(v40) = v10;
  HIDWORD(v40) = v11 >> 3;
  if (!(_DWORD)v13)
  {
LABEL_22:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5489, (uint64_t)"lm/multilm", 45, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_ALL_WEIGHTS_ZERO);
    goto LABEL_23;
  }
  v14 = 0;
  v15 = *((_QWORD *)this + 5);
  v16 = 8 * v13;
  v17 = 0.0;
  v18 = 0.0;
  do
  {
    if (*(_QWORD *)(v15 + v14))
    {
      v19 = *(double *)(*(_QWORD *)(*((_QWORD *)this + 23) + 16 * a2) + v14);
      if (v19 == -1.0)
      {
        v20 = *((_QWORD *)this + 56);
        v12[v14 / 8] = *(double *)(v20 + v14);
        v17 = v17 + *(double *)(v20 + v14);
      }
      else
      {
        v12[v14 / 8] = v19;
        v18 = v18 + v19;
      }
    }
    else
    {
      v12[v14 / 8] = 0.0;
    }
    v14 += 8;
  }
  while (v16 != v14);
  if (v18 != 0.0 && v17 != 0.0)
  {
    v21 = 0;
    v22 = *((_QWORD *)this + 5);
    v23 = (1.0 - v17) / v18;
    do
    {
      if (*(_QWORD *)(v22 + v21) && *(double *)(*(_QWORD *)(*((_QWORD *)this + 23) + 16 * a2) + v21) != -1.0)
        v12[v21 / 8] = v23 * v12[v21 / 8];
      v21 += 8;
    }
    while (v16 != v21);
  }
  while (*v12 == 0.0)
  {
    ++v12;
    if (!--v13)
      goto LABEL_22;
  }
LABEL_23:
  v37 = 0;
  v38 = 0;
  MultiLanguageModel::fitWeightsToFloorAndCeiling((uint64_t)this, (uint64_t)&v39, (uint64_t)&v37);
  v24 = *((_QWORD *)this + 25);
  if ((_DWORD)v38)
    DgnPrimArray<double>::copyArraySlice(v24 + 16 * a2, (uint64_t *)&v37, 0, v38);
  else
    MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling((uint64_t)this, (uint64_t *)&v39, v24 + 16 * a2);
  v25 = a2;
  v26 = *((_DWORD *)this + 29);
  v27 = *((_QWORD *)this + 27) + 16 * a2;
  v28 = *(_DWORD *)(v27 + 12);
  v29 = v26;
  if (v26 > v28)
  {
    DgnPrimArray<short>::reallocElts(v27, v26 - v28, 0);
    v29 = *((_DWORD *)this + 29);
  }
  *(_DWORD *)(v27 + 8) = v26;
  if (v29)
  {
    v30 = 0;
    v31 = 16 * v25;
    do
    {
      v32 = *(double *)(*(_QWORD *)(*((_QWORD *)this + 25) + v31) + 8 * v30);
      if (v32 == 0.0)
      {
        LOWORD(v33) = 2000;
      }
      else
      {
        v34 = DgnLog(v32);
        LODWORD(v35) = *((_DWORD *)this + 8);
        v33 = (int)(0.5 - v34 * (double)v35);
        v29 = *((_DWORD *)this + 29);
      }
      *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + v31) + 2 * v30++) = v33;
    }
    while (v30 < v29);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_2099232F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::deleteWeights(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*((_BYTE *)this + 114) || !*((_DWORD *)this + 7))
  {
    v10 = (a2 - 1);
    if (v10 >= *((_DWORD *)this + 44)
      || *(_DWORD *)(*((_QWORD *)this + 21) + 16 * v10 + 8) <= 1u)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5250, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
    }
    if (v10 < *((_DWORD *)this + 39))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5252, (uint64_t)"lm/multilm", 86, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_CANT_DELETE_FACTORY_WEIGHTS);
    v11 = *((_QWORD *)this + 21) + 16 * v10;
    if (*(_QWORD *)v11)
    {
      MemChunkFree(*(_QWORD **)v11, 0);
      *(_QWORD *)v11 = 0;
    }
    *(_QWORD *)(v11 + 8) = 0;
    --*((_DWORD *)this + 40);
    IdMgr<unsigned int>::recycleId((unsigned int *)this + 58, a2);
    if (*((_BYTE *)this + 114))
    {
      v12 = *((_QWORD *)this + 23) + 16 * v10;
      if (*(_QWORD *)v12)
      {
        MemChunkFree(*(_QWORD **)v12, 0);
        *(_QWORD *)v12 = 0;
      }
      *(_QWORD *)(v12 + 8) = 0;
      v13 = *((_QWORD *)this + 25) + 16 * v10;
      if (*(_QWORD *)v13)
      {
        MemChunkFree(*(_QWORD **)v13, 0);
        *(_QWORD *)v13 = 0;
      }
      *(_QWORD *)(v13 + 8) = 0;
      v14 = *((_QWORD *)this + 27) + 16 * v10;
      if (*(_QWORD *)v14)
      {
        MemChunkFree(*(_QWORD **)v14, 0);
        *(_QWORD *)v14 = 0;
      }
      *(_QWORD *)(v14 + 8) = 0;
    }
  }
  if (*((_DWORD *)this + 29))
  {
    v15 = 0;
    do
    {
      if ((!*((_BYTE *)this + 112) || v15 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v15) == 3)
      {
        v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 608))(v16))
        {
          v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 640))(v17, a2);
        }
      }
      ++v15;
    }
    while (v15 < *((unsigned int *)this + 29));
  }
}

void MultiLanguageModel::applyWeights(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *((unsigned __int8 *)this + 114);
  if (*((_BYTE *)this + 114) || !*((_DWORD *)this + 7))
  {
    v11 = a2 - 1;
    if ((a2 - 1) >= *((_DWORD *)this + 44) || *(_DWORD *)(*((_QWORD *)this + 21) + 16 * v11 + 8) <= 1u)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5294, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
      v10 = *((unsigned __int8 *)this + 114);
    }
    if (v10)
    {
      v12 = *((_QWORD *)this + 25) + 16 * v11;
      DgnPrimArray<double>::copyArraySlice((uint64_t)this + 384, (uint64_t *)v12, 0, *(_DWORD *)(v12 + 8));
      v13 = *((_QWORD *)this + 27) + 16 * v11;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 464, (uint64_t *)v13, 0, *(_DWORD *)(v13 + 8));
    }
  }
  if (*((_DWORD *)this + 29))
  {
    v14 = 0;
    do
    {
      if ((!*((_BYTE *)this + 112) || v14 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v14) == 3)
      {
        v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v14);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 608))(v15))
        {
          v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v14);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 648))(v16, a2);
        }
      }
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 29));
  }
}

uint64_t MultiLanguageModel::getValidWeightsIds(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    v4 = *(_DWORD *)(a1 + 160);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 > v5)
      DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
    v6 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 168) + v8) >= 2u)
        {
          v9 = *(unsigned int *)(a2 + 8);
          if (v9 == *(_DWORD *)(a2 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
            v9 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v7 + 1;
          ++*(_DWORD *)(a2 + 8);
          v6 = *(unsigned int *)(a1 + 176);
        }
        ++v7;
        v8 += 16;
      }
      while (v7 < v6);
    }
  }
  return *(unsigned int *)(a1 + 160);
}

uint64_t MultiLanguageModel::getWeightsId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2;

  v2 = DgnArray<DgnString>::find((unsigned int *)this + 42, (uint64_t)a2);
  if (v2 == -1)
    return 0xFFFFLL;
  else
    return (v2 + 1);
}

uint64_t MultiLanguageModel::getWeightsName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (a2 - 1);
  if (v9 >= *((_DWORD *)this + 44)
    || (v10 = *((_QWORD *)this + 21), *(_DWORD *)(v10 + 16 * v9 + 8) <= 1u))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5388, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
    v10 = *((_QWORD *)this + 21);
  }
  return v10 + 16 * v9;
}

BOOL MultiLanguageModel::isFactoryWeights(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 44) || *(_DWORD *)(*((_QWORD *)this + 21) + 16 * v9 + 8) <= 1u)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5404, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
  return v9 < *((_DWORD *)this + 39);
}

void MultiLanguageModel::checkWeightsId(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 - 1) >= *((_DWORD *)this + 44)
    || *(_DWORD *)(*((_QWORD *)this + 21) + 16 * (a2 - 1) + 8) <= 1u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5420, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
  }
}

uint64_t MultiLanguageModel::languageScore(MultiLanguageModel *this, uint64_t a2, uint64_t a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, LMContextData *a7, uint64_t a8, BOOL *a9)
{
  LMContextData *v10;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  LMContextData *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  _QWORD *v45;
  int v46;
  LMContextData *v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  char v53;

  v10 = a7;
  ++*((_DWORD *)a4 + 1);
  v52 = a3;
  if ((_DWORD)a7 && a6 && *((_QWORD *)this + 1))
  {
    v16 = *((_DWORD *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 6, 1);
LABEL_6:
    v17 = *((unsigned int *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 5, 0);
    v18 = 0;
    a3 = v52;
    goto LABEL_8;
  }
  v16 = 0;
  if (a6)
    goto LABEL_6;
  v17 = 0;
  v18 = 1;
LABEL_8:
  v50 = v18;
  v51 = v16;
  v48 = v17;
  if (!*((_BYTE *)this + 112))
  {
    if (*((_BYTE *)this + 113))
    {
      v22 = v10;
      v10 = a5;
      *a9 = 0;
      v23 = *((unsigned int *)this + 29);
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0.0;
        do
        {
          v27 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v24);
          if (v27 && *(_BYTE *)(*((_QWORD *)this + 68) + v24))
          {
            v28 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v24) == 2 && (_DWORD)a8 == 0;
            if (!v28 && *(double *)(*((_QWORD *)this + 62) + 8 * v24) != 0.0)
            {
              v53 = 0;
              v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, _QWORD, LMScoreDetails *, LMContextData *, uint64_t, char *))(*(_QWORD *)v27 + 504))(v27, a2, a3, a4, *(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * v24), a6, v22, a8, &v53);
              if (v53)
              {
                v26 = v26
                    + (double)v29 * *(double *)(*((_QWORD *)this + 62) + 8 * v24)
                    + (double)*(int *)(*((_QWORD *)this + 66) + 4 * v24);
                *a9 = 1;
              }
              ++v25;
              v23 = *((unsigned int *)this + 29);
              a3 = v52;
            }
          }
          ++v24;
        }
        while (v24 < v23);
      }
      else
      {
        v25 = 0;
        v26 = 0.0;
      }
      v33 = (double)(40 * *((_DWORD *)this + 8));
      if (v26 <= v33)
        v33 = v26;
      if (v33 >= 0.0)
        v34 = v33 + 0.5;
      else
        v34 = 0.5;
      v32 = (int)v34;
      a5 = v10;
      LODWORD(v10) = (_DWORD)v22;
      goto LABEL_62;
    }
    v47 = a5;
    v46 = (int)v10;
    if ((_DWORD)a3 == 0xFFFF)
    {
      v49 = (_QWORD *)((char *)this + 384);
      v30 = (char *)this + 464;
    }
    else
    {
      v49 = (_QWORD *)(*((_QWORD *)this + 25) + 16 * (a3 - 1));
      v30 = (char *)(*((_QWORD *)this + 27) + 16 * (a3 - 1));
    }
    v45 = v30;
    *a9 = 0;
    v35 = *((unsigned int *)this + 29);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 0;
      LOWORD(v32) = 0;
      v25 = 0;
      v38 = 1;
      do
      {
        v39 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v36);
        if (v39 && *(double *)(*v49 + 8 * v36) != 0.0)
        {
          v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 504))(v39, a2);
          LOWORD(v41) = *(_WORD *)(*v45 + 2 * v36) + v40;
          if ((v37 & 1) != 0)
          {
            v41 = (__int16)v41;
            v42 = (__int16)v41 - (__int16)v32;
            if (v42 < 0)
            {
              v43 = (__int16)v32 - (__int16)v41;
            }
            else
            {
              v41 = (__int16)v32;
              v43 = v42;
            }
            if (v43 < *((_DWORD *)this + 178))
              v41 -= *(_DWORD *)(*((_QWORD *)this + 88) + 4 * v43);
            v41 &= ~(v41 >> 31);
          }
          ++v25;
          v38 &= v40 == 0;
          v35 = *((unsigned int *)this + 29);
          v37 = 1;
          LOWORD(v32) = v41;
        }
        ++v36;
      }
      while (v36 < v35);
      a5 = v47;
      LODWORD(v10) = v46;
      if ((v38 & 1) == 0)
        goto LABEL_62;
    }
    else
    {
      v25 = 0;
    }
    LOWORD(v32) = 0;
    goto LABEL_62;
  }
  v19 = *((unsigned int *)this + 29);
  if ((_DWORD)v19)
  {
    v20 = 0;
    while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v20) > a2
         || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v20) < a2)
    {
      if (v19 == ++v20)
        goto LABEL_14;
    }
    v21 = *((_DWORD *)this + 140);
  }
  else
  {
LABEL_14:
    v21 = *((_DWORD *)this + 140);
    LODWORD(v20) = v21;
  }
  if ((_DWORD)v20 == v21)
    a3 = a3;
  else
    a3 = 0xFFFFLL;
  v31 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v20);
  LOWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, _QWORD, LMScoreDetails *, LMContextData *, uint64_t, BOOL *))(*(_QWORD *)v31 + 504))(v31, a2, a3, a4, *(_QWORD *)(*((_QWORD *)a5 + 2) + 8 * v20), a6, v10, a8, a9);
  v25 = 0;
LABEL_62:
  if ((v50 & 1) == 0)
  {
    *(_WORD *)(*(_QWORD *)a6 + 2 * v48) = v32;
    *(_DWORD *)(*((_QWORD *)a6 + 4) + 4 * v48) = v25;
  }
  return LanguageModel::languageScoreFinish(this, a2, (__int16)v32, a6, (int)v10, v51, a5);
}

unint64_t LMScoreDetails::addDetails(unint64_t result, __int16 a2, int a3, int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v7 = result;
  v8 = *(_DWORD *)(result + 8);
  if (v8 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<short>::reallocElts(result, 1, 1);
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_WORD *)(*(_QWORD *)v7 + 2 * v8) = a2;
  *(_DWORD *)(v7 + 8) = v8 + 1;
  v9 = *(_DWORD *)(v7 + 24);
  if (v9 == *(_DWORD *)(v7 + 28))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v7 + 16, 1, 1);
    v9 = *(_DWORD *)(v7 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(v7 + 16) + 4 * v9) = a3;
  *(_DWORD *)(v7 + 24) = v9 + 1;
  v10 = *(_DWORD *)(v7 + 40);
  if (v10 == *(_DWORD *)(v7 + 44))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v7 + 32, 1, 1);
    v10 = *(_DWORD *)(v7 + 40);
  }
  *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4 * v10) = a4;
  ++*(_DWORD *)(v7 + 40);
  return result;
}

uint64_t MultiLanguageModel::languageScoreForSearch(MultiLanguageModel *this, uint64_t a2, uint64_t a3, LMStats *a4, LMContextData *a5, uint64_t a6, BOOL *a7)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v41;
  _QWORD *v42;
  char v43;
  char v44;

  v11 = a3;
  ++*((_DWORD *)a4 + 1);
  if (*((_BYTE *)this + 112))
  {
    v14 = *((unsigned int *)this + 29);
    if ((_DWORD)v14)
    {
      v15 = 0;
      while (*(_DWORD *)(*((_QWORD *)this + 71) + 4 * v15) > a2
           || *(_DWORD *)(*((_QWORD *)this + 73) + 4 * v15) < a2)
      {
        if (v14 == ++v15)
          goto LABEL_7;
      }
      v16 = *((_DWORD *)this + 140);
    }
    else
    {
LABEL_7:
      v16 = *((_DWORD *)this + 140);
      LODWORD(v15) = v16;
    }
    v25 = *(_QWORD *)(*((_QWORD *)a5 + 2) + 8 * v15);
    if ((_DWORD)v15 == v16)
      a3 = a3;
    else
      a3 = 0xFFFFLL;
    v26 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15);
    LOWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, uint64_t, uint64_t, BOOL *))(*(_QWORD *)v26 + 512))(v26, a2, a3, a4, v25, a6, a7);
  }
  else if (*((_BYTE *)this + 113))
  {
    *a7 = 0;
    v17 = *((unsigned int *)this + 29);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = 0.0;
      do
      {
        v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v18);
        if (v20 && *(_BYTE *)(*((_QWORD *)this + 68) + v18))
        {
          v21 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v18) == 2 && (_DWORD)a6 == 0;
          if (!v21 && *(double *)(*((_QWORD *)this + 62) + 8 * v18) != 0.0)
          {
            v44 = 0;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, _QWORD, uint64_t, char *))(*(_QWORD *)v20 + 512))(v20, a2, v11, a4, *(_QWORD *)(*((_QWORD *)a5 + 2) + 8 * v18), a6, &v44);
            if (v44)
            {
              v19 = v19
                  + (double)v22 * *(double *)(*((_QWORD *)this + 62) + 8 * v18)
                  + (double)*(int *)(*((_QWORD *)this + 66) + 4 * v18);
              *a7 = 1;
            }
            v17 = *((unsigned int *)this + 29);
          }
        }
        ++v18;
      }
      while (v18 < v17);
    }
    else
    {
      v19 = 0.0;
    }
    v28 = (double)(40 * *((_DWORD *)this + 8));
    if (v19 <= v28)
      v28 = v19;
    if (v28 >= 0.0)
      v29 = v28 + 0.5;
    else
      v29 = 0.5;
    v27 = (int)v29;
  }
  else
  {
    if ((_DWORD)a3 == 0xFFFF)
    {
      v23 = (_QWORD *)((char *)this + 384);
      v24 = (char *)this + 464;
    }
    else
    {
      v23 = (_QWORD *)(*((_QWORD *)this + 25) + 16 * (a3 - 1));
      v24 = (char *)(*((_QWORD *)this + 27) + 16 * (a3 - 1));
    }
    v42 = v24;
    *a7 = 0;
    v30 = *((unsigned int *)this + 29);
    if (!(_DWORD)v30)
      goto LABEL_54;
    v41 = a3;
    v31 = 0;
    v32 = 0;
    LOWORD(v27) = 0;
    v33 = 1;
    do
    {
      v34 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v31);
      if (v34 && *(double *)(*v23 + 8 * v31) != 0.0)
      {
        v43 = 0;
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, LMStats *, _QWORD, uint64_t, char *))(*(_QWORD *)v34 + 512))(v34, a2, v41, a4, *(_QWORD *)(*((_QWORD *)a5 + 2) + 8 * v31), a6, &v43);
        if (v43)
          *a7 = 1;
        LOWORD(v36) = *(_WORD *)(*v42 + 2 * v31) + v35;
        if ((v32 & 1) != 0)
        {
          v36 = (__int16)v36;
          v37 = (__int16)v36 - (__int16)v27;
          if (v37 < 0)
          {
            v38 = (__int16)v27 - (__int16)v36;
          }
          else
          {
            v36 = (__int16)v27;
            v38 = v37;
          }
          if (v38 < *((_DWORD *)this + 178))
            v36 -= *(_DWORD *)(*((_QWORD *)this + 88) + 4 * v38);
          v36 &= ~(v36 >> 31);
        }
        v33 &= v35 == 0;
        v30 = *((unsigned int *)this + 29);
        v32 = 1;
        LOWORD(v27) = v36;
      }
      ++v31;
    }
    while (v31 < v30);
    if ((v33 & 1) != 0)
LABEL_54:
      LOWORD(v27) = 0;
  }
  return LanguageModel::languageScoreFinishForSearch((RecentBuffer **)this, a2, (__int16)v27, a5);
}

uint64_t MultiLanguageModel::languageScoreForPrefilterer(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  __int16 *v28;
  __int16 *v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  char v44;
  char v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  _WORD *v51;
  char v52;
  uint64_t v53;
  __int16 *v54;
  __int16 *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  __int16 v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  __int16 *v65;
  __int16 *v66;
  __int16 v67;
  int v68;
  __int16 *v69;
  uint64_t v70;
  __int16 *v71;
  __int16 v72;
  double v73;
  double v74;
  double v75;
  int v76;
  unint64_t v77;
  unint64_t i;
  uint64_t v79;
  uint64_t v80;
  __int16 *v81;
  uint64_t v82;
  double *v83;
  double v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  double *v88;
  __int16 *v89;
  double v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  long double v95;
  unint64_t v96;
  __int16 *v97;
  __int16 *v98;
  uint64_t v99;
  unsigned int v100;
  __int16 v101;
  int v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  long double v107;
  unint64_t v108;
  __int16 *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  _WORD *v113;
  __int16 *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *__b;
  unint64_t v119;

  v6 = 40 * *(_DWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 112))
  {
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a3 + 12);
    if (v7 > v8)
    {
      DgnPrimArray<short>::reallocElts(a3, v7 - v8, 0);
      v7 = *(_DWORD *)(a2 + 8);
    }
    __b = 0;
    v119 = 0;
    if (v7)
    {
      LODWORD(v9) = 0;
      do
      {
        v10 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v9);
        v11 = *(unsigned int *)(a1 + 116);
        if ((_DWORD)v11)
        {
          v12 = 0;
          while (*(_DWORD *)(*(_QWORD *)(a1 + 568) + 4 * v12) > v10
               || *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * v12) < v10)
          {
            if (v11 == ++v12)
              goto LABEL_11;
          }
          v13 = v12;
        }
        else
        {
LABEL_11:
          v13 = *(unsigned int *)(a1 + 560);
        }
        v14 = v119;
        if (v119 == (unint64_t)HIDWORD(v119))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&__b, 1, 1);
          v14 = v119;
        }
        v15 = __b;
        *((_DWORD *)__b + v14) = v10;
        v16 = v119 + 1;
        LODWORD(v119) = v119 + 1;
        v9 = (v9 + 1);
        if (v9 < *(_DWORD *)(a2 + 8))
        {
          do
          {
            v17 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v9);
            v18 = *(unsigned int *)(a1 + 116);
            if ((_DWORD)v18)
            {
              v19 = 0;
              while (*(_DWORD *)(*(_QWORD *)(a1 + 568) + 4 * v19) > v17
                   || *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * v19) < v17)
              {
                if (v18 == ++v19)
                  goto LABEL_21;
              }
              v20 = v19;
            }
            else
            {
LABEL_21:
              v20 = *(unsigned int *)(a1 + 560);
            }
            if (v20 != v13)
              break;
            if (v16 == HIDWORD(v119))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&__b, 1, 1);
              v16 = v119;
              v15 = __b;
            }
            v15[v16] = v17;
            v16 = v119 + 1;
            LODWORD(v119) = v119 + 1;
            ++v9;
          }
          while (v9 < *(unsigned int *)(a2 + 8));
        }
        v116 = 0;
        v117 = 0;
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13);
        (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v21 + 520))(v21, &__b, &v116);
        v22 = v117;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 600) + 4 * v13))
        {
          if ((_DWORD)v117)
          {
            v23 = 0;
            v24 = *(_DWORD *)(a3 + 8);
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(a1 + 600) + 4 * v13) + *((__int16 *)v116 + v23) >= v6)
                v25 = v6;
              else
                v25 = *(_WORD *)(*(_QWORD *)(a1 + 600) + 4 * v13) + *((_WORD *)v116 + v23);
              if (v24 == *(_DWORD *)(a3 + 12))
              {
                DgnPrimArray<short>::reallocElts(a3, 1, 1);
                v24 = *(_DWORD *)(a3 + 8);
                v22 = v117;
              }
              *(_WORD *)(*(_QWORD *)a3 + 2 * v24++) = v25;
              *(_DWORD *)(a3 + 8) = v24;
              ++v23;
            }
            while (v23 < v22);
          }
        }
        else
        {
          v26 = *(_DWORD *)(a3 + 8);
          v27 = *(_DWORD *)(a3 + 12);
          if (v26 + (int)v117 > v27)
          {
            DgnPrimArray<short>::reallocElts(a3, v26 + (_DWORD)v117 - v27, 1);
            v22 = v117;
            v26 = *(_DWORD *)(a3 + 8);
          }
          if (v22)
          {
            v28 = (__int16 *)v116;
            v29 = *(__int16 **)a3;
            v30 = v22;
            v31 = v26;
            do
            {
              v32 = *v28++;
              v29[v31++] = v32;
              --v30;
            }
            while (v30);
          }
          *(_DWORD *)(a3 + 8) = v22 + v26;
        }
        LODWORD(v119) = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v116);
      }
      while (v9 < *(_DWORD *)(a2 + 8));
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  }
  if (*(_BYTE *)(a1 + 113))
  {
    v34 = *(unsigned int *)(a2 + 8);
    __b = 0;
    v119 = 0;
    if ((_DWORD)v34)
    {
      v116 = 0;
      v35 = realloc_array(0, &v116, 8 * v34, 0, 0, 1) >> 3;
      __b = v116;
      v36 = *(unsigned int *)(a2 + 8);
      v119 = __PAIR64__(v35, v34);
      if ((_DWORD)v36)
        bzero(v116, 8 * v36);
    }
    else
    {
      LODWORD(v36) = 0;
      LODWORD(v119) = 0;
    }
    v77 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v77)
    {
      for (i = 0; i < v77; ++i)
      {
        v79 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(v79 + 8 * i)
          && *(_BYTE *)(*(_QWORD *)(a1 + 544) + i)
          && *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * i) != 2
          && *(double *)(*(_QWORD *)(a1 + 496) + 8 * i) != 0.0)
        {
          v116 = 0;
          v117 = 0;
          (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(v79 + 8 * i) + 520))(*(_QWORD *)(v79 + 8 * i), a2, &v116);
          v80 = *(unsigned int *)(a2 + 8);
          if ((_DWORD)v80)
          {
            v81 = (__int16 *)v116;
            v82 = *(_QWORD *)(a1 + 496);
            v83 = (double *)__b;
            v84 = (double)*(int *)(*(_QWORD *)(a1 + 528) + 4 * i);
            do
            {
              v85 = *v81++;
              *v83 = *v83 + (double)v85 * *(double *)(v82 + 8 * i) + v84;
              ++v83;
              --v80;
            }
            while (v80);
          }
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v116);
          v77 = *(unsigned int *)(a1 + 116);
        }
      }
      LODWORD(v36) = *(_DWORD *)(a2 + 8);
    }
    v86 = *(_DWORD *)(a3 + 12);
    LODWORD(v87) = v36;
    if (v36 > v86)
    {
      DgnPrimArray<short>::reallocElts(a3, v36 - v86, 0);
      LODWORD(v87) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a3 + 8) = v36;
    if ((_DWORD)v87)
    {
      v88 = (double *)__b;
      v87 = v87;
      v89 = *(__int16 **)a3;
      do
      {
        v90 = *v88;
        LOWORD(v91) = v6;
        if (*v88 <= (double)v6)
        {
          if (v90 >= 0.0)
            v91 = (int)(v90 + 0.5);
          else
            LOWORD(v91) = 0;
        }
        *v89++ = v91;
        ++v88;
        --v87;
      }
      while (v87);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  }
  v37 = *(_DWORD *)(a2 + 8);
  v38 = *(_DWORD *)(a3 + 12);
  v39 = v37;
  v40 = v37 >= v38;
  v41 = v37 - v38;
  if ((_DWORD)v41 != 0 && v40)
  {
    DgnPrimArray<short>::reallocElts(a3, v41, 0);
    v39 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + 8) = v37;
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&__b, v39);
  v116 = 0;
  v117 = 0;
  v42 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v42)
    memset(__b, 1, v42);
  if (!*(_DWORD *)(a1 + 116))
    goto LABEL_123;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0.0;
  do
  {
    v47 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v47 + 8 * v43))
    {
      v48 = *(double *)(*(_QWORD *)(a1 + 432) + 8 * v43);
      if (v48 == -1.0)
      {
        v114 = 0;
        v115 = 0;
        (*(void (**)(_QWORD, uint64_t, __int16 **))(**(_QWORD **)(v47 + 8 * v43) + 520))(*(_QWORD *)(v47 + 8 * v43), a2, &v114);
        v64 = v115;
        if ((v44 & 1) != 0)
        {
          if ((_DWORD)v115)
          {
            v65 = (__int16 *)v116;
            v66 = v114;
            do
            {
              v68 = *v66++;
              v67 = v68;
              if (*v65 < v68)
                v67 = *v65;
              *v65++ = v67;
              --v64;
            }
            while (v64);
          }
        }
        else
        {
          DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v116, (uint64_t *)&v114, 0, v115);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v114);
        v44 = 1;
      }
      else if (v48 != 0.0)
      {
        v114 = 0;
        v115 = 0;
        (*(void (**)(_QWORD, uint64_t, __int16 **))(**(_QWORD **)(v47 + 8 * v43) + 520))(*(_QWORD *)(v47 + 8 * v43), a2, &v114);
        v49 = v119;
        if ((_DWORD)v119)
        {
          v50 = (char *)__b;
          v51 = v114;
          do
          {
            v52 = *v50;
            if (*v50)
              v52 = *v51 == 0;
            *v50++ = v52;
            ++v51;
            --v49;
          }
          while (v49);
        }
        v53 = v115;
        if ((v45 & 1) != 0)
        {
          if ((_DWORD)v115)
          {
            v54 = *(__int16 **)a3;
            v55 = v114;
            v56 = *(_QWORD *)(a1 + 480);
            v57 = *(_DWORD *)(a1 + 712);
            do
            {
              v58 = *v54;
              v59 = *v55++;
              v60 = (__int16)(*(_WORD *)(v56 + 2 * v43) + v59);
              v62 = v60 - v58;
              v61 = v60 - v58 < 0;
              if (v60 < v58)
                v58 = v60;
              if (v61)
                v63 = -v62;
              else
                v63 = v62;
              if (v63 < v57)
                v58 -= *(_DWORD *)(*(_QWORD *)(a1 + 704) + 4 * v63);
              *v54++ = v58 & ~(unsigned __int16)(v58 >> 31);
              --v53;
            }
            while (v53);
          }
        }
        else if ((_DWORD)v115)
        {
          v69 = v114;
          v70 = *(_QWORD *)(a1 + 480);
          v71 = *(__int16 **)a3;
          do
          {
            v72 = *v69++;
            *v71++ = *(_WORD *)(v70 + 2 * v43) + v72;
            --v53;
          }
          while (v53);
        }
        v46 = v46 + v48;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v114);
        v45 = 1;
      }
    }
    ++v43;
  }
  while (v43 < *(unsigned int *)(a1 + 116));
  if ((v45 & 1) == 0)
  {
    if ((v44 & 1) != 0)
    {
      DgnPrimArray<unsigned short>::copyArraySlice(a3, (uint64_t *)&v116, 0, v117);
      goto LABEL_151;
    }
LABEL_123:
    v92 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v92)
      bzero(*(void **)a3, 2 * v92);
    goto LABEL_151;
  }
  if (v46 <= 1.0)
    v73 = v46;
  else
    v73 = 1.0;
  v74 = fabs(v73 + -1.0);
  if (v74 < 0.0001)
  {
    v93 = *(_DWORD *)(a3 + 8);
    goto LABEL_144;
  }
  if ((v44 & 1) == 0)
  {
    if (v73 == 0.0)
    {
      LOWORD(v94) = 2000;
    }
    else
    {
      v107 = DgnLog(v73);
      LODWORD(v108) = *(_DWORD *)(a1 + 32);
      v94 = (int)(0.5 - v107 * (double)v108);
    }
    v93 = *(_DWORD *)(a3 + 8);
    if (!v93)
      goto LABEL_151;
    v109 = *(__int16 **)a3;
    v110 = *(unsigned int *)(a3 + 8);
    do
    {
      *v109++ -= v94;
      --v110;
    }
    while (v110);
LABEL_144:
    if (v93)
    {
      v111 = 0;
      v112 = __b;
      v113 = v116;
      do
      {
        if (v112[v111] && (((v74 >= 0.0001) & v44) == 0 || !v113[v111]))
          *(_WORD *)(*(_QWORD *)a3 + 2 * v111) = 0;
        ++v111;
      }
      while (v93 != v111);
    }
    goto LABEL_151;
  }
  v75 = 1.0 - v73;
  if (v75 == 0.0)
  {
    LOWORD(v76) = 2000;
  }
  else
  {
    v95 = DgnLog(v75);
    LODWORD(v96) = *(_DWORD *)(a1 + 32);
    v76 = (int)(0.5 - v95 * (double)v96);
  }
  v93 = *(_DWORD *)(a3 + 8);
  if (v93)
  {
    v97 = (__int16 *)v116;
    v98 = *(__int16 **)a3;
    v99 = *(unsigned int *)(a3 + 8);
    v100 = *(_DWORD *)(a1 + 712);
    do
    {
      v101 = *v97++;
      v102 = *v98;
      v103 = (__int16)(v101 + v76);
      v105 = v103 - v102;
      v104 = v103 - v102 < 0;
      if (v103 >= v102)
        v103 = *v98;
      if (v104)
        v106 = -v105;
      else
        v106 = v105;
      if (v106 < v100)
        v103 -= *(_DWORD *)(*(_QWORD *)(a1 + 704) + 4 * v106);
      *v98++ = v103 & ~(unsigned __int16)(v103 >> 31);
      --v99;
    }
    while (v99);
    goto LABEL_144;
  }
LABEL_151:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v116);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
}

void sub_2099248B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *MultiLanguageModel::adaptLMFromTranscripts(_QWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t i;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  double v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  double v96;
  int v97;
  long double v98;
  long double v99;
  unsigned int v100;
  double *v101;
  double v102;
  unint64_t v103;
  double *v104;
  double v105;
  double v106;
  unint64_t v107;
  double v108;
  BOOL v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t *v118;
  _QWORD *v120;
  unsigned int v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  char v132;
  _QWORD v133[7];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _QWORD v140[4];

  if (!*((_BYTE *)result + 152))
    return result;
  v7 = a5;
  v10 = (uint64_t)result;
  v116 = a5;
  if (*((_DWORD *)result + 29))
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(v10 + 112))
      {
        if (v11 == *(_DWORD *)(v10 + 560) && *(_DWORD *)(*(_QWORD *)(v10 + 136) + 4 * v11) == 3)
        {
          DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v133, *((unsigned int *)a2 + 2));
          DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v130, *((unsigned int *)a3 + 2));
          if (*((_DWORD *)a2 + 2))
          {
            v12 = 0;
            do
            {
              v13 = *a2;
              v14 = *(_DWORD *)(*a2 + 16 * v12 + 8);
              v15 = v133[0] + 16 * v12;
              v16 = *(_DWORD *)(v15 + 12);
              if (v14 > v16)
              {
                DgnPrimArray<unsigned int>::reallocElts(v133[0] + 16 * v12, v14 - v16, 0);
                v13 = *a2;
              }
              *(_DWORD *)(v15 + 8) = v14;
              v17 = v13 + 16 * v12;
              v19 = *(_DWORD *)(v17 + 8);
              v18 = (unsigned int *)(v17 + 8);
              if (v19)
              {
                v20 = 0;
                v21 = *(_QWORD *)(v13 + 16 * v12);
                v22 = *(_QWORD *)(v133[0] + 16 * v12);
                do
                {
                  v23 = *(_DWORD *)(v21 + 4 * v20);
                  if (v23 <= 0xFFFFF3)
                  {
                    v24 = *(unsigned int *)(v10 + 116);
                    if ((_DWORD)v24)
                    {
                      v25 = 0;
                      while (*(_DWORD *)(*(_QWORD *)(v10 + 568) + 4 * v25) > v23
                           || *(_DWORD *)(*(_QWORD *)(v10 + 584) + 4 * v25) < v23)
                      {
                        if (v24 == ++v25)
                          goto LABEL_19;
                      }
                      v26 = v25;
                    }
                    else
                    {
LABEL_19:
                      v26 = *(unsigned int *)(v10 + 560);
                    }
                    if (v11 != v26)
                      v23 = 0xFFFFFF;
                  }
                  *(_DWORD *)(v22 + 4 * v20++) = v23;
                }
                while (v20 < *v18);
              }
              v27 = *a3;
              v28 = *(_DWORD *)(*a3 + 16 * v12 + 8);
              v29 = v130 + 16 * v12;
              v30 = *(_DWORD *)(v29 + 12);
              if (v28 > v30)
              {
                DgnPrimArray<unsigned int>::reallocElts(v130 + 16 * v12, v28 - v30, 0);
                v27 = *a3;
              }
              *(_DWORD *)(v29 + 8) = v28;
              v31 = v27 + 16 * v12;
              v33 = *(_DWORD *)(v31 + 8);
              v32 = (unsigned int *)(v31 + 8);
              if (v33)
              {
                v34 = 0;
                v35 = *(_QWORD *)(v27 + 16 * v12);
                v36 = *(_QWORD *)(v130 + 16 * v12);
                do
                {
                  v37 = *(_DWORD *)(v35 + 4 * v34);
                  if (v37 <= 0xFFFFF3)
                  {
                    v38 = *(unsigned int *)(v10 + 116);
                    if ((_DWORD)v38)
                    {
                      v39 = 0;
                      while (*(_DWORD *)(*(_QWORD *)(v10 + 568) + 4 * v39) > v37
                           || *(_DWORD *)(*(_QWORD *)(v10 + 584) + 4 * v39) < v37)
                      {
                        if (v38 == ++v39)
                          goto LABEL_34;
                      }
                      v40 = v39;
                    }
                    else
                    {
LABEL_34:
                      v40 = *(unsigned int *)(v10 + 560);
                    }
                    if (v11 != v40)
                      v37 = 0xFFFFFF;
                  }
                  *(_DWORD *)(v36 + 4 * v34++) = v37;
                }
                while (v34 < *v32);
              }
              ++v12;
            }
            while (v12 < *((unsigned int *)a2 + 2));
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v11);
          v7 = v116;
          (*(void (**)(uint64_t, _QWORD *, __int128 *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v41 + 536))(v41, v133, &v130, a4, v116, a6);
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v130);
          result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v133);
        }
      }
      else if (*(_DWORD *)(*(_QWORD *)(v10 + 136) + 4 * v11) == 3)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v11);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v42 + 536))(v42, a2, a3, a4, v7, a6);
      }
      ++v11;
      v43 = *(unsigned int *)(v10 + 116);
    }
    while (v11 < v43);
  }
  else
  {
    v43 = 0;
  }
  if (!*(_BYTE *)(v10 + 114))
    return result;
  DgnArray<DgnArray<ScoreArray>>::DgnArray(v140, v43);
  v139 = 0u;
  v138 = 0u;
  v137 = 0u;
  v136 = 0u;
  v135 = 0u;
  v134 = 0u;
  LMStats::resetStats((LMStats *)v133);
  v130 = xmmword_209A76430;
  v131 = 1;
  v132 = 1;
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 464))(v10);
  v45 = (_QWORD *)v44;
  v128 = 0;
  v129 = 0;
  if (!*(_DWORD *)(v10 + 116))
  {
    v82 = 0;
    if (v44)
      goto LABEL_97;
    goto LABEL_98;
  }
  v120 = (_QWORD *)v44;
  v46 = 0;
  v118 = a3;
  do
  {
    v47 = v140[0] + 16 * v46;
    v48 = *((unsigned int *)a2 + 2);
    v49 = *(_DWORD *)(v47 + 12);
    if (v48 > v49)
      DgnArray<DgnPrimArray<double>>::reallocElts(v140[0] + 16 * v46, v48 - v49, 0);
    v50 = *(unsigned int *)(v47 + 8);
    if (v50 <= v48)
    {
      if (v50 < v48)
      {
        v53 = v48 - v50;
        v54 = 16 * v50;
        do
        {
          v55 = (_QWORD *)(*(_QWORD *)v47 + v54);
          *v55 = 0;
          v55[1] = 0;
          v54 += 16;
          --v53;
        }
        while (v53);
      }
    }
    else if ((int)v50 > (int)v48)
    {
      v51 = (int)v50;
      v52 = 16 * (int)v50 - 16;
      do
      {
        --v51;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v47 + v52);
        v52 -= 16;
      }
      while (v51 > (int)v48);
    }
    *(_DWORD *)(v47 + 8) = v48;
    if (*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v46))
    {
      if (*(double *)(*(_QWORD *)(v10 + 384) + 8 * v46) != 0.0 && *((_DWORD *)a2 + 2) != 0)
      {
        for (i = 0; i < *((unsigned int *)a2 + 2); ++i)
        {
          v58 = *(_DWORD *)(*a3 + 16 * i + 8);
          if (v58 >= 3)
            v59 = 3;
          else
            v59 = v58;
          if (HIDWORD(v129) >= v59)
          {
            LODWORD(v129) = v59;
            if (!(_DWORD)v59)
              goto LABEL_73;
          }
          else
          {
            v126 = 0;
            v60 = realloc_array(v128, &v126, (4 * v59), 4 * v129, 4 * v129, 1);
            v128 = v126;
            LODWORD(v129) = v59;
            HIDWORD(v129) = v60 >> 2;
          }
          v61 = (_QWORD *)(*a3 + 16 * i);
          v64 = *v61;
          v62 = v61 + 1;
          v63 = v64;
          v65 = v128;
          v66 = -1;
          do
          {
            *v65++ = *(_DWORD *)(v63 + 4 * (v66 + *v62));
            --v66;
            --v59;
          }
          while (v59);
LABEL_73:
          v67 = *(unsigned int *)(*a2 + 16 * i + 8);
          v68 = *(_QWORD *)(v140[0] + 16 * v46) + 16 * i;
          v69 = *(_DWORD *)(v68 + 12);
          if (v67 > v69)
          {
            DgnPrimArray<short>::reallocElts(*(_QWORD *)(v140[0] + 16 * v46) + 16 * i, v67 - v69, 0);
            *(_DWORD *)(v68 + 8) = v67;
LABEL_76:
            v70 = 0;
            while (2)
            {
              v71 = *(unsigned int *)(*(_QWORD *)(*a2 + 16 * i) + 4 * v70);
              if ((_DWORD)v71 == 0xFFFFFF)
              {
                *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v140[0] + 16 * v46) + 16 * i) + 2 * v70) = 0;
                goto LABEL_83;
              }
              v72 = *(_QWORD *)(v120[2] + 8 * v46);
              v73 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v46);
              (*(void (**)(uint64_t, void **, _QWORD, _QWORD *, __int128 *, uint64_t))(*(_QWORD *)v73 + 472))(v73, &v128, 0, v133, &v130, v72);
              LOBYTE(v126) = 0;
              v74 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v46);
              v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)v74 + 504))(v74, v71, 0xFFFFLL, v133, v72, 0, 0, 0, &v126);
              *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v140[0] + 16 * v46) + 16 * i) + 2 * v70) = v75;
              v76 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v46);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 480))(v76, v72);
              if ((_DWORD)v71 == 16777213)
              {
                v77 = v128;
                if (!HIDWORD(v129))
                {
                  v126 = 0;
                  HIDWORD(v129) = realloc_array(v128, &v126, 4uLL, 4 * v129, 4 * v129, 1) >> 2;
                  v77 = v126;
                  v128 = v126;
                }
                LODWORD(v129) = 1;
                *v77 = 16777214;
              }
              else
              {
LABEL_83:
                v78 = v129;
                if (v129 <= 2)
                {
                  if ((_DWORD)v129 == HIDWORD(v129))
                  {
                    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
                    v78 = v129;
                  }
                  LODWORD(v129) = ++v78;
                }
                v79 = v128;
                v80 = (v78 - 1);
                if (v78 != 1)
                {
                  v81 = v78 - 2;
                  do
                    v79[v80--] = v79[v81--];
                  while ((_DWORD)v80);
                }
                *v79 = v71;
              }
              if (++v70 == v67)
                goto LABEL_92;
              continue;
            }
          }
          *(_DWORD *)(v68 + 8) = v67;
          if ((_DWORD)v67)
            goto LABEL_76;
LABEL_92:
          a3 = v118;
        }
      }
    }
    ++v46;
  }
  while (v46 < *(unsigned int *)(v10 + 116));
  v82 = *(_DWORD *)(v10 + 116);
  v45 = v120;
  if (!v120)
    goto LABEL_98;
LABEL_97:
  (*(void (**)(_QWORD *))*v45)(v45);
  MemChunkFree(v45, 0);
  v82 = *(_DWORD *)(v10 + 116);
LABEL_98:
  LODWORD(v6) = *(_DWORD *)(v10 + 32);
  v126 = 0;
  v127 = 0;
  if (v82)
  {
    v124 = 0;
    v83 = realloc_array(0, &v124, 8 * v82, 0, 0, 1);
    v125 = 0;
    v126 = v124;
    v84 = *(unsigned int *)(v10 + 116);
    LODWORD(v127) = v82;
    HIDWORD(v127) = v83 >> 3;
    v124 = 0;
    if ((_DWORD)v84)
    {
      v122 = 0;
      HIDWORD(v125) = realloc_array(0, &v122, 8 * v84, 0, 0, 1) >> 3;
      v124 = v122;
    }
  }
  else
  {
    LODWORD(v84) = 0;
    LODWORD(v127) = 0;
    v124 = 0;
    v125 = 0;
  }
  LODWORD(v125) = v84;
  v85 = (_QWORD *)(v10 + 384);
  v122 = 0;
  v123 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v122, (uint64_t *)(v10 + 384), 0, *(_DWORD *)(v10 + 392));
  v121 = 0;
  v86 = (double)v6;
  while (2)
  {
    v87 = *(unsigned int *)(v10 + 116);
    if ((_DWORD)v87)
      bzero(v126, 8 * v87);
    v88 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v88)
      break;
    v89 = 0;
    v90 = 0;
    v91 = *a2;
    v92 = v87;
    while (2)
    {
      if (!*(_DWORD *)(v91 + 16 * v89 + 8))
        goto LABEL_126;
      v93 = 0;
      while (2)
      {
        if (v92)
        {
          v94 = 0;
          v95 = 0;
          v96 = 0.0;
          do
          {
            if (!*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v95) || *((double *)v122 + v95) == 0.0)
            {
              *((_QWORD *)v124 + v95) = 0;
            }
            else
            {
              v97 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v140[0] + v94) + 16 * v89) + 2 * v93);
              if (v86 * 50.0 + -1.0 < (double)v97)
                v97 = (int)(v86 * 50.0) - 1;
              v98 = DgnExp((double)-v97 / v86);
              v99 = v98 * *((double *)v122 + v95);
              *((long double *)v124 + v95) = v99;
              v96 = v96 + v99;
              v87 = *(unsigned int *)(v10 + 116);
            }
            ++v95;
            v94 += 16;
          }
          while (v95 < v87);
          if (v96 == 0.0)
          {
LABEL_122:
            v92 = v87;
          }
          else
          {
            v100 = *(_DWORD *)(*a4 + 4 * v89);
            v90 += v100;
            if (v87)
            {
              v101 = (double *)v124;
              v102 = (double)v100;
              v103 = v87;
              v104 = (double *)v126;
              do
              {
                v105 = *v101++;
                *v104 = *v104 + v105 / v96 * v102;
                ++v104;
                --v103;
              }
              while (v103);
              goto LABEL_122;
            }
            v92 = 0;
          }
        }
        ++v93;
        v91 = *a2;
        if (v93 < *(unsigned int *)(*a2 + 16 * v89 + 8))
          continue;
        break;
      }
      v88 = *((unsigned int *)a2 + 2);
LABEL_126:
      if (++v89 < v88)
        continue;
      break;
    }
    if (v90)
    {
      v106 = (double)v90;
      if (v87)
      {
        v107 = 0;
        v108 = 1.0 / v106;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v107) && *(double *)(*v85 + 8 * v107) != 0.0)
          {
            v109 = fround(v108 * *((double *)v126 + v107), 15) <= 1.0e-17;
            v110 = 1.0e-17;
            if (!v109)
              v110 = fround(v108 * *((double *)v126 + v107), 15);
            *((double *)v126 + v107) = v110;
            v87 = *(unsigned int *)(v10 + 116);
          }
          ++v107;
        }
        while (v107 < v87);
      }
      MultiLanguageModel::fitWeightsToFloorAndCeiling(v10, (uint64_t)&v126, (uint64_t)&v122);
      if ((_DWORD)v123)
      {
        if (a6)
        {
          v109 = v121++ > 0x12;
          if (!v109)
            continue;
        }
        v111 = *(unsigned int *)(v10 + 116);
        if ((_DWORD)v111)
        {
          v112 = 0;
          v113 = *(_QWORD *)(v10 + 40);
          v114 = (char *)v122;
          v115 = 8 * v111;
          do
          {
            if (*(_QWORD *)(v113 + v112))
              *(double *)&v114[v112] = (*(double *)&v114[v112] * v106 + (double)(int)v116 * *(double *)(*v85 + v112))
                                     / (double)(v90 + v116);
            else
              *(_QWORD *)&v114[v112] = 0;
            v112 += 8;
          }
          while (v115 != v112);
        }
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 496))(v10, &v122);
      }
    }
    break;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v122);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v124);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v126);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v128);
  return DgnArray<DgnArray<ScoreArray>>::releaseAll((uint64_t)v140);
}

void sub_2099253A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnArray<DgnArray<ScoreArray>>::releaseAll(v7 - 160);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setWeightsForNewTopicLM(MultiLanguageModel *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v3 = *((unsigned int *)this + 29);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    v6 = 0.0;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)this + 5) + v4))
        v6 = v6 + *(double *)(*((_QWORD *)this + 48) + v4);
      v4 += 8;
    }
    while (v5 != v4);
  }
  else
  {
    v6 = 0.0;
  }
  v7 = a2;
  v8 = *(double *)(*((_QWORD *)this + 56) + 8 * a2);
  v22[0] = 0;
  v22[1] = 0;
  v9.n128_f64[0] = DgnPrimArray<double>::copyArraySlice((uint64_t)v22, (uint64_t *)this + 48, 0, *((_DWORD *)this + 98));
  v10 = *((unsigned int *)this + 29);
  v11 = v22[0];
  if ((_DWORD)v10)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 5);
    v13 = (double *)v22[0];
    v9.n128_f64[0] = (1.0 - v8) / v6;
    do
    {
      if (*v12)
        *v13 = v9.n128_f64[0] * *v13;
      ++v12;
      ++v13;
      --v10;
    }
    while (v10);
  }
  *(double *)(v11 + 8 * v7) = v8;
  (*(void (**)(MultiLanguageModel *, _QWORD *, __n128))(*(_QWORD *)this + 496))(this, v22, v9);
  MultiLanguageModel::adjustNamedWeightsSets((uint64_t)this, v14, v15, v16, v17, v18, v19, v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
}

void sub_209925558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::startBuildingTopicLM(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  MultiLanguageModel *v12;
  uint64_t v13;
  const WordNgramBuildSpec *v14;
  const WordNgramTemplate *v15;
  uint64_t *v16;
  WordLanguageModel *v17;
  double v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  MultiLanguageModel *v22;

  if (*((_QWORD *)this + 77))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6904, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"startBuildingTopicLM");
  v20 = 0;
  v21 = a2 - 1;
  v22 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v21, &v22, &v20);
  v12 = v22;
  v13 = v20;
  if (v20 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6914, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v10, v11, a2);
  if (*(_QWORD *)(*((_QWORD *)v12 + 5) + 8 * v13))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6918, (uint64_t)"lm/multilm", 12, (uint64_t)"%s", v10, v11, (char)&errStr_lm_multilm_E_BAD_INPLACE_BUILD);
  v14 = *(const WordNgramBuildSpec **)(*((_QWORD *)v12 + 38) + 8 * v13);
  v15 = *(const WordNgramTemplate **)(*((_QWORD *)v12 + 42) + 8 * v13);
  *((_QWORD *)this + 78) = v12;
  *((_DWORD *)this + 158) = v13;
  *((_DWORD *)this + 159) = a2;
  v16 = MemChunkAlloc(0x728uLL, 0);
  v17 = WordLanguageModel::WordLanguageModel((WordLanguageModel *)v16, *((_DWORD *)this + 8), *((const WordList **)this + 2));
  *((_QWORD *)this + 77) = v17;
  WordLanguageModel::initForBuild(v17, v14, v15, v18, v19);
  WordLanguageModel::startBuildingNgramLM(*((_QWORD *)this + 77), (uint64_t)this + 640, (_QWORD *)this + 82, (_QWORD *)this + 83, (uint64_t)this + 672);
}

uint64_t MultiLanguageModel::addBuildTopicLM(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  v12 = *(_QWORD *)(a1 + 616);
  if (!v12)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6944, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM);
    v12 = *(_QWORD *)(a1 + 616);
  }
  return WordLanguageModel::addBuildNgramLM(v12, a2, a3, a4);
}

_QWORD *MultiLanguageModel::endBuildingTopicLM(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordLanguageModel *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  MultiLanguageModel *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const WordNgramTemplate *v22;
  const WordNgramBuildSpec *v23;
  uint64_t *v24;
  WordLanguageModel *v25;
  double v26;
  double v27;
  _QWORD *v28;

  v13 = *(WordLanguageModel **)(a1 + 616);
  if (!v13)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6959, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM);
    v13 = *(WordLanguageModel **)(a1 + 616);
  }
  v14 = WordLanguageModel::endBuildingNgramLM(v13);
  v15 = *(_QWORD **)(a1 + 616);
  if (!v14)
  {
    if (v15)
    {
      (*(void (**)(_QWORD))*v15)(*(_QWORD *)(a1 + 616));
      MemChunkFree(v15, 0);
    }
    goto LABEL_12;
  }
  v16 = *(unsigned int *)(a1 + 632);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 40) + 8 * v16) = v15;
  *(_QWORD *)(a1 + 616) = 0;
  v17 = *(MultiLanguageModel **)(a1 + 624);
  if (*((_BYTE *)v17 + 114))
    MultiLanguageModel::setWeightsForNewTopicLM(v17, v16);
  if (*(_DWORD *)(a2 + 8))
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a3, a4, a5, 1);
    v18 = *(unsigned int *)(a1 + 632);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 40);
    v20 = *(_QWORD **)(v19 + 8 * v18);
    if (v20)
    {
      (*(void (**)(_QWORD *))*v20)(v20);
      MemChunkFree(v20, 0);
      v18 = *(unsigned int *)(a1 + 632);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 40);
    }
    *(_QWORD *)(v19 + 8 * v18) = 0;
    v21 = *(_QWORD *)(a1 + 624);
    v22 = *(const WordNgramTemplate **)(*(_QWORD *)(v21 + 336) + 8 * v18);
    v23 = *(const WordNgramBuildSpec **)(*(_QWORD *)(v21 + 304) + 8 * v18);
    v24 = MemChunkAlloc(0x728uLL, 0);
    v25 = WordLanguageModel::WordLanguageModel((WordLanguageModel *)v24, *(_DWORD *)(a1 + 32), *(const WordList **)(a1 + 16));
    *(_QWORD *)(a1 + 616) = v25;
    WordLanguageModel::initForBuild(v25, v23, v22, v26, v27);
    WordLanguageModel::startBuildingNgramLM(*(_QWORD *)(a1 + 616), a1 + 640, (_QWORD *)(a1 + 656), (_QWORD *)(a1 + 664), a1 + 672);
    WordLanguageModel::addBuildNgramLM(*(_QWORD *)(a1 + 616), a2, a3, a4);
    WordLanguageModel::endBuildingNgramLM(*(WordLanguageModel **)(a1 + 616));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 40) + 8 * *(unsigned int *)(a1 + 632)) = *(_QWORD *)(a1 + 616);
LABEL_12:
    *(_QWORD *)(a1 + 616) = 0;
  }
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = 0xFFFFFFFFFFFFLL;
  v28 = *(_QWORD **)(a1 + 640);
  if (v28)
  {
    MemChunkFree(v28, 0);
    *(_QWORD *)(a1 + 640) = 0;
  }
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  return DgnIOwnArray<ParamSetBase *>::releaseAll(a1 + 672);
}

_QWORD *MultiLanguageModel::abortBuildingTopicLM(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  _QWORD *v10;
  _QWORD *v11;

  v9 = (char *)this + 616;
  v10 = (_QWORD *)*((_QWORD *)this + 77);
  if (v10
    || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 7035, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM), (v10 = *(_QWORD **)v9) != 0))
  {
    (*(void (**)(_QWORD *))*v10)(v10);
    MemChunkFree(v10, 0);
  }
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)this + 79) = 0xFFFFFFFFFFFFLL;
  v11 = (_QWORD *)*((_QWORD *)this + 80);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((_QWORD *)this + 80) = 0;
  }
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 81) = 0;
  return DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 672);
}

BOOL MultiLanguageModel::isBuildingTopicLM(MultiLanguageModel *this)
{
  return *((_QWORD *)this + 77) != 0;
}

uint64_t MultiLanguageModel::getBuildExternalTopicLmSlot(MultiLanguageModel *this)
{
  return *((unsigned int *)this + 159);
}

uint64_t MultiLanguageModel::getRecentBufferLanguageModel(MultiLanguageModel *this)
{
  return *((_QWORD *)this + 7);
}

void MultiLMContextData::MultiLMContextData(MultiLMContextData *this, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = a2;
  *((_DWORD *)this + 2) = 16777212;
  *(_QWORD *)this = &unk_24C216608;
  *((_QWORD *)this + 2) = 0;
  v4 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  if ((_DWORD)a2)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, a2, 0);
    LODWORD(v5) = *((_DWORD *)this + 6);
    if (v5 > v2)
    {
      DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)v4, v2, v5 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v5 < v2)
  {
    v5 = v5;
    do
      *(_QWORD *)(*v4 + 8 * v5++) = 0;
    while (v2 != v5);
  }
LABEL_8:
  *((_DWORD *)this + 6) = v2;
}

void sub_209925AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<ParamSetBase *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void MultiLMContextData::~MultiLMContextData(MultiLMContextData *this)
{
  *(_QWORD *)this = &unk_24C216608;
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &unk_24C216608;
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 16);
  JUMPOUT(0x20BD149A8);
}

uint64_t MultiLMContextData::sizeObject(uint64_t a1, uint64_t a2)
{
  return sizeObject<LMContextData *>(a1 + 16, a2) + 4 * ((_DWORD)a2 != 3);
}

uint64_t readObject<unsigned int,DgnPrimArray<unsigned int>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  readObject<unsigned int>(a1, (uint64_t)&v6, a3);
  if (*(_QWORD *)a2)
  {
    MemChunkFree(*(_QWORD **)a2, 0);
    *(_QWORD *)a2 = 0;
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if ((_DWORD)v7)
  {
    v4 = 0;
    do
      DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(a2, *(_DWORD *)(v6 + 4 * v4++));
    while (v4 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v6);
}

void sub_209925C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t writeObject<unsigned int,DgnPrimArray<unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  v7 = *(_DWORD *)(a2 + 24);
  v12 = 0;
  v13 = 0;
  if (v7)
  {
    v9 = 0;
    v7 = 0;
    do
    {
      v10 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v5);
      if (v7 == HIDWORD(v13))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v12, 1, 1);
        v7 = v13;
        v9 = v12;
      }
      *(_DWORD *)(v9 + 4 * v7) = v10;
      v7 = v13 + 1;
      LODWORD(v13) = v13 + 1;
      if (v5 + 1 == *(_DWORD *)(a2 + 8))
        v5 = 0;
      else
        ++v5;
    }
    while (v5 != v6);
  }
  v14 = v7;
  writeObject(a1, (int *)&v14, a3);
  writeObjectArray(a1, v12, v13, a3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v12);
}

void sub_209925D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<DgnArray<ScoreArray>>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      DgnArray<DgnArray<ScoreArray>>::destructAt(a1, v2, v4 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v4 < v2)
  {
    v5 = v2 - (unint64_t)v4;
    v6 = 16 * v4;
    do
    {
      v7 = (_QWORD *)(*a1 + v6);
      *v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v5;
    }
    while (v5);
  }
LABEL_8:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

_QWORD *DgnArray<DgnArray<ScoreArray>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

_QWORD *DgnArray<DgnArray<ScoreArray>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<ScoreArray>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void MergedStateTransition::updateMergedStateTransition(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 16) = v11;
    if (v11 == v12)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
      v11 = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = *(_QWORD *)a3;
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)a3 == *(_DWORD *)(*(_QWORD *)a1 + 8 * v6) && *(_DWORD *)(a3 + 4) == *(_DWORD *)(v7 + 8 * v6 + 4))
    goto LABEL_15;
  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
  {
    *(_DWORD *)(a1 + 16) = v8 - 1;
    if ((_DWORD)v8)
      goto LABEL_15;
    goto LABEL_12;
  }
  v9 = (_DWORD *)(v7 + 8 * v8 - 4);
  while (*(v9 - 1) != *(_DWORD *)a3 || *v9 != *(_DWORD *)(a3 + 4))
  {
    v9 -= 2;
    v10 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(v8) = v8 - 1;
    if (((int)v8 < 0) ^ v10 | ((_DWORD)v8 == 0))
      goto LABEL_12;
  }
  *(_DWORD *)(a1 + 16) = v8 - 1;
LABEL_15:
  v13 = DgnArray<PredState>::reverseFind(a1 + 24, a2);
  if (v13 == -1)
  {
    v13 = *(_DWORD *)(a1 + 32);
    v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 36))
    {
      DgnArray<RuleDesc>::reallocElts(a1 + 24, 1, 1);
      v14 = *(_DWORD *)(a1 + 32);
    }
    v15 = *(_QWORD *)(a1 + 24) + 12 * v14;
    v16 = *(_QWORD *)a2;
    *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v15 = v16;
    ++*(_DWORD *)(a1 + 32);
    v17 = *(_DWORD *)(a1 + 48);
    if (v17 == *(_DWORD *)(a1 + 52))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 40, 1, 1);
      v17 = *(_DWORD *)(a1 + 48);
    }
    DgnString::DgnString((DgnString *)(*(_QWORD *)(a1 + 40) + 16 * v17));
    ++*(_DWORD *)(a1 + 48);
  }
  v18 = *(_QWORD *)(a1 + 40) + 16 * v13;
  v19 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 8) <= v19)
  {
    BitArray::setSize((BitArray *)(*(_QWORD *)(a1 + 40) + 16 * v13), v19 + 1);
    v19 = *(_DWORD *)(a1 + 16);
  }
  *(_DWORD *)(*(_QWORD *)v18 + 4 * (v19 >> 5)) |= 1 << v19;
}

uint64_t DgnArray<PredState>::reverseFind(uint64_t a1, unsigned __int16 *a2)
{
  int v3;
  uint64_t result;
  _DWORD *i;
  BOOL v6;

  v3 = *(_DWORD *)(a1 + 8);
  result = (v3 - 1);
  if (v3 >= 1)
  {
    for (i = (_DWORD *)(*(_QWORD *)a1 + 12 * v3 - 4);
          *((unsigned __int16 *)i - 4) != *a2 || *(i - 1) != *((_DWORD *)a2 + 1) || *i != *((_DWORD *)a2 + 2);
          i -= 3)
    {
      v6 = __OFSUB__(v3--, 1);
      if ((v3 < 0) ^ v6 | (v3 == 0))
        return 0xFFFFFFFFLL;
    }
    return (v3 - 1);
  }
  return result;
}

uint64_t sizeObject<BitArray>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[16];

  DgnString::DgnString((DgnString *)v10);
  v4 = BitArray::sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += BitArray::sizeObject(*(_QWORD *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  BitArray::~BitArray((BitArray *)v10);
  return v5;
}

void sub_2099261C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

uint64_t SeedMergedActiveWord::processMergedWord(SeedMergedActiveWord *this, ActiveWord *a2, const HistoryMgr *a3, const PhnIndexSet *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  BitArray *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;

  *((_QWORD *)this + 1) = a2;
  v9 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 16) = *(_DWORD *)(v9 + 16);
  *((_DWORD *)this + 17) = *(_DWORD *)(v9 + 20);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)(v9 + 24);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *(unsigned int *)(v10 + 8);
  v12 = *((_DWORD *)a4 + 2);
  v13 = (SeedMergedActiveWord *)((char *)this + 32);
  BitArray::setSizeNoGrow((SeedMergedActiveWord *)((char *)this + 32), 0);
  BitArray::setSize(v13, v11);
  v14 = *((_DWORD *)this + 7);
  if (v11 > v14)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 16, v11 - v14, 0);
  *((_DWORD *)this + 6) = v11;
  if ((int)v11 >= 1)
    memset_pattern16(*((void **)this + 2), &unk_209A75B40, 2 * v11);
  v15 = (_QWORD *)((char *)this + 48);
  v16 = *((_DWORD *)this + 14);
  if (v16 >= v11)
  {
    if (!(_DWORD)v11)
      goto LABEL_13;
  }
  else
  {
    do
    {
      if (v16 == *((_DWORD *)this + 15))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 48, 1, 1);
        v16 = *((_DWORD *)this + 14);
      }
      DgnString::DgnString((DgnString *)(*((_QWORD *)this + 6) + 16 * v16));
      v16 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v16;
    }
    while (v16 < v11);
  }
  v17 = 0;
  do
  {
    BitArray::setSizeNoGrow((BitArray *)(*v15 + v17), 0);
    BitArray::setSize((BitArray *)(*v15 + v17), v12);
    v17 += 16;
    --v11;
  }
  while (v11);
LABEL_13:
  result = SeedMergedActiveWord::processOnePredStateForPort<true>((uint64_t)this, v10, (uint64_t)a3, a5);
  if (v12 >= 1)
  {
    v19 = v12 + 1;
    do
    {
      if (((*(_DWORD *)(*(_QWORD *)a4 + 4 * ((unsigned __int16)(v19 - 2) >> 5)) >> (v19 - 2)) & 1) != 0)
        result = SeedMergedActiveWord::processOnePredStateForPort<false>((uint64_t)this, v10, (uint64_t)a3, a5, (unsigned __int16)(v19 - 2));
      --v19;
    }
    while (v19 > 1);
  }
  *((_DWORD *)this + 22) = -1;
  return result;
}

uint64_t SeedMergedActiveWord::processOnePredStateForPort<true>(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v4 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 72);
  v5 = *(__int16 *)(v4 + 8);
  if (v5 <= a4)
  {
    v7 = result;
    v8 = v5 == 20000 ? -2 : *(_DWORD *)v4;
    v9 = (unsigned int *)(*(_QWORD *)(a3 + 8) + 36 * v8);
    v15 = ((unint64_t)*v9 >> 25) | ((unint64_t)v9[2] << 32);
    v16 = v9[3];
    result = DgnArray<PredState>::find((unsigned int *)(a2 + 24), (unsigned __int16 *)&v15);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(unsigned int *)(v10 + 16 * result + 8);
    if ((int)v11 >= 1)
    {
      v12 = *(_QWORD *)(v10 + 16 * result);
      do
      {
        v13 = --v11 >> 5;
        if ((*(_DWORD *)(v12 + 4 * v13) & (1 << v11)) != 0)
        {
          *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4 * v13) |= 1 << v11;
          v14 = *(_QWORD *)(v7 + 16);
          if (v5 < *(__int16 *)(v14 + 2 * v11))
            *(_WORD *)(v14 + 2 * v11) = v5;
        }
      }
      while ((unint64_t)(v11 + 1) > 1);
    }
  }
  return result;
}

uint64_t SeedMergedActiveWord::processOnePredStateForPort<false>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t result;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;

  result = ActiveWord::maybeGetNonSilOutPort(*(ActiveWord **)(a1 + 8), a5);
  v11 = *(__int16 *)(result + 8);
  if (v11 <= a4)
  {
    v12 = v11 == 20000 ? -2 : *(_DWORD *)result;
    v13 = (unsigned int *)(*(_QWORD *)(a3 + 8) + 36 * v12);
    v19 = ((unint64_t)*v13 >> 25) | ((unint64_t)v13[2] << 32);
    v20 = v13[3];
    result = DgnArray<PredState>::find((unsigned int *)(a2 + 24), (unsigned __int16 *)&v19);
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(unsigned int *)(v14 + 16 * result + 8);
    if ((int)v15 >= 1)
    {
      v16 = *(_QWORD *)(v14 + 16 * result);
      do
      {
        --v15;
        if (((*(_DWORD *)(v16 + 4 * (v15 >> 5)) >> v15) & 1) != 0)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v15);
          *(_DWORD *)(v17 + 4 * (a5 >> 5)) |= 1 << a5;
          v18 = *(_QWORD *)(a1 + 16);
          if (v11 < *(__int16 *)(v18 + 2 * v15))
            *(_WORD *)(v18 + 2 * v15) = v11;
        }
      }
      while ((unint64_t)(v15 + 1) > 1);
    }
  }
  return result;
}

uint64_t sizeObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sizeObject(a1 + 64, a2);
  v5 = sizeObject<PhnIndexSet>(a1 + 48, a2);
  v6 = BitArray::sizeObject(a1 + 32, a2);
  v7 = sizeObject<unsigned short>(a1 + 16, a2);
  v8 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v8 = 8;
  if ((_DWORD)a2 == 3)
    v8 = 0;
  return v4 + 4 * ((_DWORD)a2 != 3) + v5 + v6 + v7 + v8;
}

{
  uint64_t active;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  active = sizeObject<ActiveWord *>(a1 + 8, a2);
  v5 = sizeObject(a1 + 32, a2);
  v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v6 = 8;
  if ((_DWORD)a2 == 3)
    v6 = 0;
  v7 = 6;
  if ((_DWORD)a2 == 3)
    v7 = 0;
  return v7 + active + v5 + v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sizeObject(a1, a2);
  v5 = sizeObject<FeatureFilterSpec>(a1 + 80, a2);
  v6 = sizeObject(a1 + 96, a2);
  v7 = sizeObject<FeatureFilterSpec>(a1 + 104, a2);
  v8 = sizeObject(a1 + 120, a2);
  v9 = sizeObject(a1 + 144, a2);
  v10 = sizeObject(a1 + 184, a2);
  v11 = 12;
  if ((_DWORD)a2 == 3)
    v11 = 0;
  return v11 + v4 + v5 + v6 + v7 + v8 + v9 + v10;
}

uint64_t MergedActive::initMergedActive(uint64_t result, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 128) = a3;
  *(_BYTE *)(result + 129) = a4;
  return result;
}

uint64_t sizeObject<ActiveWord *>(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 12;
  else
    result = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    v5 = 2;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 3;
    if (a2)
      v6 = v4 << v5;
    else
      v6 = (v4 + (*(_DWORD *)(a1 + 12) - v4)) << v5;
    result += v6;
  }
  return result;
}

uint64_t DgnArray<PredState>::find(unsigned int *a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *i;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  for (i = (_DWORD *)(*(_QWORD *)a1 + 4);
        *((unsigned __int16 *)i - 2) != *a2 || *i != *((_DWORD *)a2 + 1) || i[1] != *((_DWORD *)a2 + 2);
        i += 3)
  {
    if (v2 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ActiveWord::maybeGetNonSilOutPort(ActiveWord *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(v2 + 40);
  if (v3 < 2)
  {
    v4 = 0;
    return *(_QWORD *)(*(_QWORD *)(v2 + 72) + 8 * v4);
  }
  if (v3 - 3 < 2)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 88) + a2);
    if (v4 == 255)
      return 0;
    return *(_QWORD *)(*(_QWORD *)(v2 + 72) + 8 * v4);
  }
  if (v3 == 2)
  {
    v4 = 1;
    return *(_QWORD *)(*(_QWORD *)(v2 + 72) + 8 * v4);
  }
  return 0;
}

uint64_t StartupPrefiltererBuildParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v20 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v20, (uint64_t)"PrefiltererBuildAllowMultiPhonemeSequences", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildAllowMultiPhonemeSequencesBoolHistory);
  v19 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v19, (uint64_t)"PrefiltererBuildDurationScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildDurationScoreScaleDoubleHistory);
  v17 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v17, (uint64_t)"PrefiltererBuildBestScoreAdditionalPhonemeStartDepth", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildBestScoreAdditionalPhonemeStartDepthIntHistory);
  v18 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v18, (uint64_t)"PrefiltererBuildMaxPronLength", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildMaxPronLengthIntHistory);
  v16 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v16, (uint64_t)"PrefiltererBuildMaxWordEndScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildMaxWordEndScoreIntHistory);
  v14 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v14, (uint64_t)"PrefiltererBuildEnableGenoneScoreCacheThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildEnableGenoneScoreCacheThreshDoubleHistory);
  v15 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v15, (uint64_t)"PrefiltererBuildTruncatePackedIntComponentScores", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildTruncatePackedIntComponentScoresBoolHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v12, (uint64_t)"PrefiltererBuildFmpeMinimumPosteriorProbability", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildFmpeMinimumPosteriorProbabilityDoubleHistory);
  v13 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v13, (uint64_t)"PrefiltererBuildLookaheadScoringType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildLookaheadScoringTypeEnumHistory);
  v11 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v11, (uint64_t)"PrefiltererBuildLookaheadThreadingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildLookaheadThreadingTypeEnumHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v0, (uint64_t)"PrefiltererBuildThreadingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildThreadingTypeEnumHistory);
  v1 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v1, (uint64_t)"PrefiltererBuildUseGPU", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildUseGPUBoolHistory);
  v2 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v2, (uint64_t)"PrefiltererBuildHierScorerBeamList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildHierScorerBeamListStringHistory);
  v10 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v10, (uint64_t)"PrefiltererBuildHierScorerCutoffList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildHierScorerCutoffListStringHistory);
  v3 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v3, (uint64_t)"PrefiltererBuildHierScorerCutoffRatioList", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildHierScorerCutoffRatioListStringHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"PrefiltererBuildHierInactiveComponentScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildHierInactiveComponentScoreIntHistory);
  v5 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v5, (uint64_t)"PrefiltererBuildDisableHierarchicalScorer", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildDisableHierarchicalScorerBoolHistory);
  v6 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v6, (uint64_t)"PrefiltererBuildDisableGPUScorer", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildDisableGPUScorerBoolHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v7, (uint64_t)"PrefiltererBuildContextType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildContextTypeEnumHistory);
  v8 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v8, (uint64_t)"PrefiltererBuildWordBoundaryType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBuildWordBoundaryTypeEnumHistory);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_253DF2850, (ParamSpec *)v10);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2850);
}

_DWORD *PrefiltererBuildParamSet::PrefiltererBuildParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C217EC0;
  DgnString::DgnString((DgnString *)(a1 + 26));
  DgnString::DgnString((DgnString *)(a1 + 30));
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_209926D60(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  DgnString *v3;
  DgnString *v4;
  uint64_t v5;
  DgnString *v6;

  v6 = v4;
  DgnString::~DgnString(v6);
  DgnString::~DgnString(v3);
  *v2 = v5 + 16;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererBuildParamSet::PrefiltererBuildParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  uint64_t v11;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C217EC0;
  DgnString::DgnString((DgnString *)(a1 + 104));
  DgnString::DgnString((DgnString *)(a1 + 120));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  DgnString::operator=((DgnString *)(a1 + 104), (DgnString *)(a2 + 104));
  DgnString::operator=((DgnString *)(a1 + 120), (DgnString *)(a2 + 120));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 140) = *(_WORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

void sub_209926EA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DgnString *v2;
  DgnString *v3;
  uint64_t v4;

  DgnString::~DgnString(v3);
  *v1 = v4 + 16;
  DgnString::~DgnString(v2);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererBuildParamSet::setDefaults(PrefiltererBuildParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *Default_string;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;

  *((_BYTE *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2850, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2850, 2, 0, 0, v9, v10, v11, v12);
  *((double *)this + 6) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2850, 3, 0, 0, v13, v14, v15, v16);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2850, 4, 0, 0, v17, v18, v19, v20);
  *((double *)this + 8) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2850, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 18) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2850, 6, 0, 0, v25, v26, v27, v28);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2850, 7, 0, 0, v29, v30, v31, v32);
  *((_BYTE *)this + 80) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2850, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2850, 9, v37, v38, v39, v40, v41, v42);
  *((_DWORD *)this + 22) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2850, 10, v43, v44, v45, v46, v47, v48);
  *((_DWORD *)this + 23) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2850, 11, v49, v50, v51, v52, v53, v54);
  *((_BYTE *)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2850, 12, 0, 0, v55, v56, v57, v58);
  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2850, 13, 0, 0, v59, v60, v61, v62);
  DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 104), Default_string);
  v68 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2850, 14, 0, 0, v64, v65, v66, v67);
  DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 120), v68);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2850, 15, 0, 0, v69, v70, v71, v72);
  *((_BYTE *)this + 140) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2850, 16, 0, 0, v73, v74, v75, v76);
  *((_BYTE *)this + 141) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2850, 17, 0, 0, v77, v78, v79, v80);
  *((_DWORD *)this + 36) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2850, 18, v81, v82, v83, v84, v85, v86);
  result = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2850, 19, v87, v88, v89, v90, v91, v92);
  *((_DWORD *)this + 37) = result;
  return result;
}

uint64_t PrefiltererBuildParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;

  v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v6 = sizeObject(a1 + 104);
    v5 = a2 != 3;
    v4 += (8 * v5 || 2 * v5) + 2 * (8 * v5 + 12 * v5) + v6 + sizeObject(a1 + 120) + (v5 || 4 * v5 || 2 * (v5 || 4 * v5));
  }
  return v4;
}

void PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerBeamList(PrefiltererBuildParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("PrefiltererBuildHierScorerBeamList", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 104), a2);
}

void PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerCutoffRatioList(PrefiltererBuildParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("PrefiltererBuildHierScorerCutoffRatioList", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 120), a2);
}

BOOL PrefiltererBuildParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  char v10;
  ParamSpecMgr *v12;
  int v13;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2850;
        v13 = 1;
        goto LABEL_41;
      }
      if ((_DWORD)a3)
        goto LABEL_30;
      v8 = a1[40];
      return v8 != 0;
    case 2:
      v9 = "int";
      v10 = 2;
      goto LABEL_33;
    case 3:
      v9 = "double";
      v10 = 3;
      goto LABEL_33;
    case 4:
      v9 = "double";
      v10 = 4;
      goto LABEL_33;
    case 5:
      v9 = "double";
      v10 = 5;
      goto LABEL_33;
    case 6:
      v9 = "int";
      v10 = 6;
      goto LABEL_33;
    case 7:
      v9 = "int";
      v10 = 7;
      goto LABEL_33;
    case 8:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2850;
        v13 = 8;
        goto LABEL_41;
      }
      if ((_DWORD)a3)
        goto LABEL_30;
      v8 = a1[80];
      return v8 != 0;
    case 9:
      v9 = "enum";
      v10 = 9;
      goto LABEL_33;
    case 10:
      v9 = "enum";
      v10 = 10;
      goto LABEL_33;
    case 11:
      v9 = "enum";
      v10 = 11;
      goto LABEL_33;
    case 12:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2850;
        v13 = 12;
        goto LABEL_41;
      }
      if ((_DWORD)a3)
        goto LABEL_30;
      v8 = a1[96];
      return v8 != 0;
    case 13:
      v9 = "string";
      v10 = 13;
      goto LABEL_33;
    case 14:
      v9 = "string";
      v10 = 14;
      goto LABEL_33;
    case 15:
      v9 = "int";
      v10 = 15;
      goto LABEL_33;
    case 16:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2850;
        v13 = 16;
        goto LABEL_41;
      }
      if ((_DWORD)a3)
        goto LABEL_30;
      v8 = a1[140];
      return v8 != 0;
    case 17:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2850;
        v13 = 17;
LABEL_41:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!(_DWORD)a3)
      {
        v8 = a1[141];
        return v8 != 0;
      }
LABEL_30:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 18:
      v9 = "enum";
      v10 = 18;
      goto LABEL_33;
    case 19:
      v9 = "enum";
      v10 = 19;
LABEL_33:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t PrefiltererBuildParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_26;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 2;
          goto LABEL_40;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 2;
          goto LABEL_42;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 2;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 3:
      v8 = "double";
      v9 = 3;
      goto LABEL_26;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_26;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_26;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[18];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 6;
          goto LABEL_40;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 6;
          goto LABEL_42;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 6;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[19];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 7;
          goto LABEL_40;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 7;
          goto LABEL_42;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 7;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_26;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_26;
    case 10:
      v8 = "enum";
      v9 = 10;
      goto LABEL_26;
    case 11:
      v8 = "enum";
      v9 = 11;
      goto LABEL_26;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_26;
    case 13:
      v8 = "string";
      v9 = 13;
      goto LABEL_26;
    case 14:
      v8 = "string";
      v9 = 14;
      goto LABEL_26;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 15;
LABEL_40:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 15;
LABEL_42:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 15;
LABEL_44:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_29:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_26;
    case 17:
      v8 = "BOOL";
      v9 = 17;
      goto LABEL_26;
    case 18:
      v8 = "enum";
      v9 = 18;
      goto LABEL_26;
    case 19:
      v8 = "enum";
      v9 = 19;
LABEL_26:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

double PrefiltererBuildParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_25;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_25;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = a1[6];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 3;
          goto LABEL_36;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 3;
          goto LABEL_38;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 3;
          goto LABEL_40;
        default:
          goto LABEL_28;
      }
      return result;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[7];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 4;
          goto LABEL_36;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 4;
          goto LABEL_38;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 4;
          goto LABEL_40;
        default:
          goto LABEL_28;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          result = a1[8];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 5;
LABEL_36:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 5;
LABEL_38:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 5;
LABEL_40:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_28:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_25;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_25;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_25;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_25;
    case 10:
      v8 = "enum";
      v9 = 10;
      goto LABEL_25;
    case 11:
      v8 = "enum";
      v9 = 11;
      goto LABEL_25;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_25;
    case 13:
      v8 = "string";
      v9 = 13;
      goto LABEL_25;
    case 14:
      v8 = "string";
      v9 = 14;
      goto LABEL_25;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_25;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_25;
    case 17:
      v8 = "BOOL";
      v9 = 17;
      goto LABEL_25;
    case 18:
      v8 = "enum";
      v9 = 18;
      goto LABEL_25;
    case 19:
      v8 = "enum";
      v9 = 19;
LABEL_25:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

char *PrefiltererBuildParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  int v10;
  uint64_t v11;
  ParamSpecMgr *v13;
  int v14;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_29;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_29;
    case 3:
      v8 = "double";
      v9 = 3;
      goto LABEL_29;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_29;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_29;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_29;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_29;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_29;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_29;
    case 10:
      v8 = "enum";
      v9 = 10;
      goto LABEL_29;
    case 11:
      v8 = "enum";
      v9 = 11;
      goto LABEL_29;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_29;
    case 13:
      if ((_DWORD)a3 == 1)
      {
        v13 = (ParamSpecMgr *)qword_253DF2850;
        v14 = 13;
        goto LABEL_35;
      }
      if ((_DWORD)a3)
        goto LABEL_32;
      v10 = *(_DWORD *)(a1 + 112);
      v11 = *(_QWORD *)(a1 + 104);
      goto LABEL_24;
    case 14:
      if ((_DWORD)a3 == 1)
      {
        v13 = (ParamSpecMgr *)qword_253DF2850;
        v14 = 14;
LABEL_35:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
      }
      else if ((_DWORD)a3)
      {
LABEL_32:
        throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
        return 0;
      }
      else
      {
        v10 = *(_DWORD *)(a1 + 128);
        v11 = *(_QWORD *)(a1 + 120);
LABEL_24:
        if (v10)
          return (char *)v11;
        else
          return &byte_209A88803;
      }
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_29;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_29;
    case 17:
      v8 = "BOOL";
      v9 = 17;
      goto LABEL_29;
    case 18:
      v8 = "enum";
      v9 = 18;
      goto LABEL_29;
    case 19:
      v8 = "enum";
      v9 = 19;
LABEL_29:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t PrefiltererBuildParamSet::getEnumParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  void *ParamByParamId;
  void *v18;
  void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_15;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_15;
    case 3:
      v8 = "double";
      v9 = 3;
      goto LABEL_15;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_15;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_15;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_15;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_15;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_15;
    case 9:
      switch((int)a3)
      {
        case 0:
          result = a1[21];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 9;
          goto LABEL_44;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 9;
          goto LABEL_48;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 9;
          goto LABEL_52;
        default:
          goto LABEL_30;
      }
      return result;
    case 10:
      switch((int)a3)
      {
        case 0:
          result = a1[22];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 10;
          goto LABEL_44;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 10;
          goto LABEL_48;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 10;
          goto LABEL_52;
        default:
          goto LABEL_30;
      }
      return result;
    case 11:
      switch((int)a3)
      {
        case 0:
          result = a1[23];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 11;
          goto LABEL_44;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 11;
          goto LABEL_48;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 11;
          goto LABEL_52;
        default:
          goto LABEL_30;
      }
      return result;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_15;
    case 13:
      v8 = "string";
      v9 = 13;
      goto LABEL_15;
    case 14:
      v8 = "string";
      v9 = 14;
      goto LABEL_15;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_15;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_15;
    case 17:
      v8 = "BOOL";
      v9 = 17;
LABEL_15:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    case 18:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 18;
          goto LABEL_44;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 18;
          goto LABEL_48;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 18;
          goto LABEL_52;
        default:
          goto LABEL_30;
      }
      return result;
    case 19:
      switch((int)a3)
      {
        case 0:
          result = a1[37];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2850;
          v12 = 19;
LABEL_44:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2850;
          v14 = 19;
LABEL_48:
          v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2850;
          v16 = 19;
LABEL_52:
          v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          break;
        default:
LABEL_30:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

void PrefiltererBuildParamSet::setBoolParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  const char *v11;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererBuildAllowMultiPhonemeSequences";
        goto LABEL_27;
      }
      *((_BYTE *)this + 40) = a3;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 4:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 5:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 6:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 7:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 8:
LABEL_10:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererBuildTruncatePackedIntComponentScores";
        goto LABEL_27;
      }
      *((_BYTE *)this + 80) = v9;
      return;
    case 9:
      throwWrongTypeForParamId(9, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 10:
LABEL_14:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 11:
LABEL_15:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 12:
LABEL_16:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererBuildUseGPU";
        goto LABEL_27;
      }
      *((_BYTE *)this + 96) = v9;
      return;
    case 13:
      throwWrongTypeForParamId(13, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 14:
LABEL_20:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 15:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 16:
LABEL_22:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererBuildDisableHierarchicalScorer";
        goto LABEL_27;
      }
      *((_BYTE *)this + 140) = v9;
      break;
    case 17:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererBuildDisableGPUScorer";
LABEL_27:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 141) = a3;
      }
      break;
    case 18:
      throwWrongTypeForParamId(18, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 19:
LABEL_29:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    default:
LABEL_30:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::setIntParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererBuildBestScoreAdditionalPhonemeStartDepth";
        goto LABEL_30;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      throwWrongTypeForParamId(3, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 4:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 5:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 6:
LABEL_10:
      v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 6, a3, a4, a5, a6, a7, a8);
      if (v23)
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererBuildMaxPronLength";
        goto LABEL_30;
      }
      *((_DWORD *)this + 18) = v9;
      return;
    case 7:
      v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 7, a3, a4, a5, a6, a7, a8);
      if (v28)
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererBuildMaxWordEndScore";
        goto LABEL_30;
      }
      *((_DWORD *)this + 19) = v9;
      break;
    case 8:
      throwWrongTypeForParamId(8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 9:
LABEL_20:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 10:
LABEL_21:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 11:
LABEL_22:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 12:
LABEL_23:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 13:
LABEL_24:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 14:
LABEL_25:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 15:
LABEL_26:
      v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 15, a3, a4, a5, a6, a7, a8);
      if (v33)
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererBuildHierInactiveComponentScore";
LABEL_30:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 34) = v9;
      }
      break;
    case 16:
      throwWrongTypeForParamId(16, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 17:
LABEL_33:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 18:
LABEL_34:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 19:
LABEL_35:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_36;
    default:
LABEL_36:
      throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::setDoubleParameter(PrefiltererBuildParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 3, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildDurationScoreScale";
        goto LABEL_17;
      }
      *((double *)this + 6) = a3;
      return;
    case 4:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 4, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildEnableGenoneScoreCacheThresh";
        goto LABEL_17;
      }
      *((double *)this + 7) = a3;
      break;
    case 5:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 5, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildFmpeMinimumPosteriorProbability";
LABEL_17:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 8) = a3;
      }
      break;
    case 6:
      throwWrongTypeForParamId(6, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_19;
    case 7:
LABEL_19:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_20;
    case 8:
LABEL_20:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_21;
    case 9:
LABEL_21:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 10:
LABEL_22:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 11:
LABEL_23:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 12:
LABEL_24:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 13:
LABEL_25:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 14:
LABEL_26:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 15:
LABEL_27:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 16:
LABEL_28:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 17:
LABEL_29:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_30;
    case 18:
LABEL_30:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_31;
    case 19:
LABEL_31:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_32;
    default:
LABEL_32:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void PrefiltererBuildParamSet::setStringParameter(PrefiltererBuildParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerBeamList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 14:
      PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerCutoffRatioList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 15:
      throwWrongTypeForParamId(15, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void PrefiltererBuildParamSet::setEnumParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 9, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildLookaheadScoringType";
        goto LABEL_34;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 10:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 10, a3, a4, a5, a6, a7, a8);
      if (v25)
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildLookaheadThreadingType";
        goto LABEL_34;
      }
      *((_DWORD *)this + 22) = v9;
      return;
    case 11:
      v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 11, a3, a4, a5, a6, a7, a8);
      if (v32)
      EnumParamSpec::validateValue((EnumParamSpec *)v32, v9, v33, v34, v35, v36, v37, v38);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildThreadingType";
        goto LABEL_34;
      }
      *((_DWORD *)this + 23) = v9;
      return;
    case 12:
      throwWrongTypeForParamId(12, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 13:
LABEL_25:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 14:
LABEL_26:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 15:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 16:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 17:
LABEL_29:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 18:
LABEL_30:
      v39 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 18, a3, a4, a5, a6, a7, a8);
      if (v39)
      EnumParamSpec::validateValue((EnumParamSpec *)v39, v9, v40, v41, v42, v43, v44, v45);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildContextType";
        goto LABEL_34;
      }
      *((_DWORD *)this + 36) = v9;
      break;
    case 19:
      v46 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2850, 19, a3, a4, a5, a6, a7, a8);
      if (v46)
      EnumParamSpec::validateValue((EnumParamSpec *)v46, v9, v47, v48, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererBuildWordBoundaryType";
LABEL_34:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 37) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::~PrefiltererBuildParamSet(PrefiltererBuildParamSet *this)
{
  PrefiltererBuildParamSet::~PrefiltererBuildParamSet(this);
  JUMPOUT(0x20BD149A8);
}

{
  DgnString *v2;

  *(_QWORD *)this = &off_24C217EC0;
  v2 = (PrefiltererBuildParamSet *)((char *)this + 104);
  DgnString::~DgnString((PrefiltererBuildParamSet *)((char *)this + 120));
  DgnString::~DgnString(v2);
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((PrefiltererBuildParamSet *)((char *)this + 8));
}

void MrecInitModule_wordlist_word(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;

  if (!gParDebugShowWordListOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowWordListOnLoad", (const char *)&unk_209A7AB86, (const char *)&unk_209A7AB86, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowWordListOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowWordListOnLoad);
  }
  if (!gParDebugWordListAddDelete)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordListAddDelete", (const char *)&unk_209A7AB86, (const char *)&unk_209A7AB86, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugWordListAddDelete = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListAddDelete);
  }
  if (!gParDebugWordListSetAllPronsAsClient)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugWordListSetAllPronsAsClient", (const char *)&unk_209A7AB86, (const char *)&unk_209A7AB86, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugWordListSetAllPronsAsClient = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListSetAllPronsAsClient);
  }
  if (!gParDebugWordListSetAsFactory)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugWordListSetAsFactory", (const char *)&unk_209A7AB86, (const char *)&unk_209A7AB86, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugWordListSetAsFactory = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListSetAsFactory);
  }
  if (!gParDebugWordListSetPron)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugWordListSetPron", (const char *)&unk_209A7AB86, (const char *)&unk_209A7AB86, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugWordListSetPron = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListSetPron);
  }
}

uint64_t WordIdCollSearchCmp(unsigned int *a1, CharInfo **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CollMgr *v9;
  CharInfo *v10;
  CharInfo *v11;
  unsigned int v12;

  v9 = a2[2];
  v10 = *a2;
  v11 = (CharInfo *)(*((_QWORD *)a2[1] + 28) + *(unsigned int *)(*((_QWORD *)a2[1] + 25) + 4 * *a1));
  LODWORD(a1) = *((unsigned __int8 *)a2 + 26);
  v12 = *((unsigned __int16 *)a2 + 12);
  if ((_DWORD)a1)
    return CollMgr::collPrefixcmpUns8(v9, v12, v11, v10, a5, a6, a7, a8);
  else
    return CollMgr::collStrcmpUns8(v9, v12, v11, v10, a5, a6, a7, a8);
}

uint64_t WordIdCollSearchCmpFromWordId(unsigned int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  CharInfo *v19;
  __int128 v20;
  __int16 v21;
  char v22;

  v10 = *(unsigned int *)a2;
  v11 = *((_WORD *)a2 + 12);
  v20 = *(_OWORD *)(a2 + 8);
  v12 = v20;
  v13 = a2[26];
  v19 = (CharInfo *)(*(_QWORD *)(v20 + 224) + *(unsigned int *)(*(_QWORD *)(v20 + 200) + 4 * v10));
  v21 = v11;
  v22 = v13;
  result = WordIdCollSearchCmp(a1, &v19, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a2[26])
    {
      return 0;
    }
    else
    {
      v15 = *a1;
      v16 = *(unsigned int *)a2;
      if (*((unsigned __int16 *)a2 + 12) >= 0xFFFEu)
        return *(unsigned __int8 *)(*(_QWORD *)(v12 + 104) + v15)
             - *(unsigned __int8 *)(*(_QWORD *)(v12 + 104) + v16);
      v17 = *(_QWORD *)(v12 + 256);
      v18 = *(_DWORD *)(v17 + 4 * v15);
      LODWORD(v17) = *(_DWORD *)(v17 + 4 * v16);
      result = (v18 - v17);
      if (v18 == (_DWORD)v17)
        return *(unsigned __int8 *)(*(_QWORD *)(v12 + 104) + v15)
             - *(unsigned __int8 *)(*(_QWORD *)(v12 + 104) + v16);
    }
  }
  return result;
}

_QWORD *TagBitsAndStrings::reInit(TagBitsAndStrings *this)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this + 2) = 0;
  result = (_QWORD *)*((_QWORD *)this + 3);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t TagBitsAndStrings::compact(TagBitsAndStrings *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void **v15;
  void *v17;
  uint64_t v18;
  void *v19;

  v2 = *((_DWORD *)this + 1);
  v17 = 0;
  v18 = 0;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (v2 + 7) >> 3;
    v6 = v5 + 1;
    v7 = *((_QWORD *)this + 1);
    do
    {
      v8 = *(_DWORD *)(v7 + 4 * v4);
      if (v8 != -1)
      {
        v9 = strlen((const char *)(*((_QWORD *)this + 3) + v8 + v5));
        v10 = v18;
        v11 = v6 + v18 + v9;
        if (HIDWORD(v18) < v11)
        {
          v19 = 0;
          HIDWORD(v18) = realloc_array(v17, &v19, v11, v18, v18, 1);
          v17 = v19;
        }
        LODWORD(v18) = v6 + v18 + v9;
        v12 = v6 + v9;
        if (v6 + v9)
        {
          v13 = v10;
          do
          {
            *((_BYTE *)v17 + v13++) = *(_BYTE *)(*((_QWORD *)this + 3) + v8++);
            --v12;
          }
          while (v12);
        }
        v7 = *((_QWORD *)this + 1);
        *(_DWORD *)(v7 + 4 * v4) = v10;
        v3 = *((unsigned int *)this + 4);
      }
      ++v4;
    }
    while (v4 < v3);
    v14 = v18;
  }
  else
  {
    v14 = 0;
  }
  v15 = (void **)((char *)this + 24);
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v15, &v17, 0, v14);
  DgnPrimArray<unsigned char>::compact(v15);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
}

void sub_20992958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t TagBitsAndStrings::setTagBits(TagBitsAndStrings *this, unsigned int a2, const BitArray *a3)
{
  size_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  result = TagBitsAndStrings::createIndex(this, a2, 0);
  v6 = *((_DWORD *)this + 1);
  v7 = v6 + 7;
  v8 = (v6 + 7) >> 3;
  if ((v6 + 7) >= 8)
  {
    v9 = 0;
    v10 = 0;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    do
    {
      *(_BYTE *)(*((_QWORD *)this + 3) + (result + v10)) = *(_DWORD *)(*(_QWORD *)a3
                                                                                   + (v10 & 0xFFFFFFFC)) >> (v9 & 0x18);
      ++v10;
      v9 += 8;
    }
    while (v11 != v10);
    v6 = *((_DWORD *)this + 1);
  }
  v12 = (v7 & 0xFFFFFFF8) - v6;
  if (v12)
    *(_BYTE *)(*((_QWORD *)this + 3) + result + v8 - 1) &= ~(~(-1 << v12) << (8 - v12));
  return result;
}

size_t TagBitsAndStrings::createIndex(TagBitsAndStrings *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void *v18;

  v6 = *((_DWORD *)this + 1) + 7;
  v7 = v6 >> 3;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = *((_DWORD *)this + 4);
  if (v9 <= a2
    || (v10 = *(unsigned int *)(*v8 + 4 * a2), (_DWORD)v10 == -1)
    || (v11 = strlen((const char *)(*((_QWORD *)this + 3) + v10 + v7)), v11 < a3))
  {
    v12 = a3 + v7 + 1;
    v10 = *((unsigned int *)this + 8);
    if (*((_DWORD *)this + 9) < (v10 + v12))
    {
      v18 = 0;
      *((_DWORD *)this + 9) = realloc_array(*((_QWORD **)this + 3), &v18, (v10 + v12), v10, v10, 1);
      *((_QWORD *)this + 3) = v18;
      v9 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 8) = v10 + v12;
    if (v9 <= a2)
    {
      do
      {
        if (v9 == *((_DWORD *)this + 5))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v8, 1, 1);
          v9 = *((_DWORD *)this + 4);
        }
        v13 = *((_QWORD *)this + 1);
        *(_DWORD *)(v13 + 4 * v9) = -1;
        v9 = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v9;
      }
      while (v9 <= a2);
    }
    else
    {
      v13 = *v8;
      if (*(_DWORD *)(*v8 + 4 * a2) != -1)
      {
        if (v6 >= 8)
        {
          v16 = 0;
          if (v7 <= 1)
            v14 = 1;
          else
            v14 = v7;
          do
          {
            *(_BYTE *)(*((_QWORD *)this + 3) + (v10 + v16)) = *(_BYTE *)(*((_QWORD *)this + 3)
                                                                                     + (v16 + *(_DWORD *)(*((_QWORD *)this + 1) + 4 * a2)));
            ++v16;
          }
          while (v14 != v16);
          v13 = *v8;
        }
        else
        {
          LODWORD(v14) = 0;
        }
        v15 = (_DWORD *)(v13 + 4 * a2);
        goto LABEL_22;
      }
    }
    LODWORD(v14) = 0;
    v15 = (_DWORD *)(v13 + 4 * a2);
LABEL_22:
    *v15 = v10;
    if (v14 < v12)
    {
      v14 = v14;
      do
        *(_BYTE *)(*((_QWORD *)this + 3) + (v10 + v14++)) = 0;
      while (v12 != v14);
    }
    return v10;
  }
  if (v11 > a3)
    *(_BYTE *)this = 1;
  return v10;
}

void TagBitsAndStrings::getTagBits(TagBitsAndStrings *this, unsigned int a2, BitArray *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * a2);
  v6 = *((_DWORD *)this + 1);
  BitArray::setSizeNoGrow(a3, 0);
  BitArray::setSize(a3, v6);
  if (v6 + 7 >= 8)
  {
    v7 = 0;
    v8 = 0;
    v9 = *((_QWORD *)this + 3);
    v10 = *(_QWORD *)a3;
    do
    {
      *(_DWORD *)(v10 + (v8 & 0xFFFFFFFC)) |= *(unsigned __int8 *)(v9 + (v5 + v8)) << (v7 & 0x18);
      ++v8;
      v7 += 8;
    }
    while ((v6 + 7) >> 3 != v8);
  }
}

size_t TagBitsAndStrings::setTagString(TagBitsAndStrings *this, unsigned int a2, const char *__s)
{
  const char *v3;
  unsigned int v6;
  size_t result;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v3 = __s;
  v6 = strlen(__s);
  result = TagBitsAndStrings::createIndex(this, a2, v6);
  if (v6 + 1 > 1)
    v8 = v6 + 1;
  else
    v8 = 1;
  v9 = result + ((*((_DWORD *)this + 1) + 7) >> 3);
  do
  {
    v10 = *v3++;
    *(_BYTE *)(*((_QWORD *)this + 3) + v9++) = v10;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t writeObject(DgnStream *a1, const TagBitsAndStrings *a2, unsigned int *a3)
{
  int v7;

  v7 = *((_DWORD *)a2 + 1);
  writeObject((uint64_t)a1, &v7, a3);
  writeObject<unsigned int>((uint64_t)a1, (uint64_t)a2 + 8, a3);
  return writeObject<unsigned char>((uint64_t)a1, (uint64_t)a2 + 24, a3);
}

void readObject(DgnStream *a1, TagBitsAndStrings *a2, unsigned int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE v15[12];
  unsigned int v16;
  uint64_t **v17;
  int v18;

  v18 = 0;
  readObject((uint64_t)a1, &v18, a3);
  *((_DWORD *)a2 + 1) = v18;
  if (!*((_BYTE *)a1 + 32))
  {
    readObject<unsigned int>(a1, (uint64_t)a2 + 8, a3);
    goto LABEL_27;
  }
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::HashNCHV((uint64_t)v15, 0, 1);
  readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)a1, (uint64_t)v15, a3);
  if (!v16)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v6 = *v17;
  if (*v17)
  {
LABEL_10:
    LODWORD(v7) = 0;
    goto LABEL_11;
  }
  v7 = 0;
  do
  {
    if (v16 - 1 == v7)
      goto LABEL_26;
    v6 = v17[++v7];
  }
  while (!v6);
LABEL_11:
  if (v7 >= v16)
    goto LABEL_26;
  while (1)
  {
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_DWORD *)v6 + 2);
    if (v8 <= v9)
    {
      do
      {
        if (v8 == *((_DWORD *)a2 + 5))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)a2 + 8, 1, 1);
          v8 = *((_DWORD *)a2 + 4);
        }
        v10 = *((_QWORD *)a2 + 1);
        *(_DWORD *)(v10 + 4 * v8) = -1;
        v8 = *((_DWORD *)a2 + 4) + 1;
        *((_DWORD *)a2 + 4) = v8;
        v9 = *((_DWORD *)v6 + 2);
      }
      while (v8 <= v9);
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
    }
    *(_DWORD *)(v10 + 4 * v9) = *((_DWORD *)v6 + 3);
    v11 = (uint64_t *)*v6;
    if (*v6)
      goto LABEL_25;
    v7 = (v7 + 1);
    if (v7 >= v16)
    {
      v11 = v6;
      goto LABEL_25;
    }
    v11 = v17[v7];
    if (!v11)
      break;
LABEL_25:
    v6 = v11;
    if (v7 >= v16)
      goto LABEL_26;
  }
  v12 = (uint64_t *)&v17[v7 + 1];
  v13 = ~v7 + v16;
  while (v13)
  {
    v14 = (uint64_t *)*v12++;
    v11 = v14;
    LODWORD(v7) = v7 + 1;
    --v13;
    if (v14)
      goto LABEL_25;
  }
LABEL_26:
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV((uint64_t)v15);
LABEL_27:
  readObject<unsigned char>(a1, (uint64_t)a2 + 24, a3);
}

void sub_209929B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t readObject<unsigned int,unsigned int,WordIdScope,unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int i;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  v12 = 0;
  readObject(a1, &v12, a3);
  v11 = 0;
  readObject(a1, &v11, a3);
  if (*(_BYTE *)(a1 + 34))
  {
    v10 = 0;
    readObject(a1, &v10, a3);
  }
  v10 = 0;
  readObject(a1, &v10, a3);
  result = (uint64_t)HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(a2, v11);
  *(_BYTE *)(a2 + 20) = 0;
  if (v12)
  {
    for (i = 0; i < v12; ++i)
    {
      v9 = 0;
      readObject(a1, &v9, a3);
      v8 = 0;
      readObject(a1, &v8, a3);
      result = HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(a2, &v9, &v8);
    }
  }
  *(_BYTE *)(a2 + 20) = v10 != 0;
  return result;
}

{
  uint64_t result;
  unsigned int i;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  v12 = 0;
  readObject(a1, &v12, a3);
  v11 = 0;
  readObject(a1, &v11, a3);
  if (*(_BYTE *)(a1 + 34))
  {
    v10 = 0;
    readObject(a1, &v10, a3);
  }
  v10 = 0;
  readObject(a1, &v10, a3);
  result = (uint64_t)Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(a2, v11);
  *(_BYTE *)(a2 + 20) = 0;
  if (v12)
  {
    for (i = 0; i < v12; ++i)
    {
      v9 = 0;
      readObject(a1, &v9, a3);
      v8 = 0;
      readObject(a1, &v8, a3);
      result = Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add(a2, &v9, &v8);
    }
  }
  *(_BYTE *)(a2 + 20) = v10 != 0;
  return result;
}

void WordList::WordList(WordList *this, CollMgr *a2, const PronCollMgr *a3, const PhnMgr *a4)
{
  uint64_t *v8;
  uint64_t v9;

  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 88));
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_BYTE *)this + 272) = 0;
  *(_DWORD *)((char *)this + 274) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  MrecTime::MrecTime((WordList *)((char *)this + 352));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 464));
  DgnString::DgnString((WordList *)((char *)this + 480));
  DgnString::DgnString((WordList *)((char *)this + 496));
  *((_BYTE *)this + 512) = 0;
  *((_DWORD *)this + 137) = 0;
  *(_OWORD *)((char *)this + 516) = 0u;
  *(_OWORD *)((char *)this + 532) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 560));
  DgnString::DgnString((WordList *)((char *)this + 576));
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 624));
  DgnString::DgnString((WordList *)((char *)this + 640));
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  v8 = MemChunkAlloc(0x110uLL, 0);
  *((_QWORD *)this + 3) = EnvMgr::EnvMgr((EnvMgr *)v8, 2u);
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 138) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_BYTE *)this + 420) = 0;
  v9 = *(_QWORD *)this;
  *((_QWORD *)this + 41) = WordIdCollSearchCmpFromWordId;
  *((_QWORD *)this + 42) = this;
  *((_QWORD *)this + 43) = v9;
  *((_BYTE *)this + 272) = 1;
  *(_DWORD *)((char *)this + 274) = 131070;
  *((_QWORD *)this + 46) = this;
  *((_QWORD *)this + 47) = 0;
}

void sub_209929EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DgnString *a10, DgnString *a11, DgnString *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,BitArray *a23)
{
  uint64_t v23;
  uint64_t v24;
  BitArray *v25;
  uint64_t v26;
  BitArray *v27;
  BitArray *v28;
  uint64_t v29;

  BitArray::~BitArray(v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 608);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 592);
  BitArray::~BitArray(v28);
  BitArray::~BitArray(v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 536);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 520);
  DgnString::~DgnString(a10);
  DgnString::~DgnString(a12);
  DgnString::~DgnString(*(DgnString **)(v29 - 104));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v29 - 88));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v23 + 400);
  DgnString::~DgnString(a11);
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26);
  BitArray::~BitArray(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v29 - 96));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v24);
  _Unwind_Resume(a1);
}

void WordList::~WordList(EnvMgr **this)
{
  DgnDelete<EnvMgr>(this[3]);
  this[3] = 0;
  BitArray::~BitArray((BitArray *)(this + 80));
  BitArray::~BitArray((BitArray *)(this + 78));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 76));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 74));
  BitArray::~BitArray((BitArray *)(this + 72));
  BitArray::~BitArray((BitArray *)(this + 70));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 67));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 65));
  DgnString::~DgnString((DgnString *)(this + 62));
  DgnString::~DgnString((DgnString *)(this + 60));
  DgnString::~DgnString((DgnString *)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 55));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 53));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 50));
  DgnString::~DgnString((DgnString *)(this + 44));
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)(this + 34));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 30));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 28));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 25));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 23));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 15));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 13));
  BitArray::~BitArray((BitArray *)(this + 11));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 9));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4));
}

uLong WordList::computeWordIdNameChecksum(WordList *this, unsigned int a2)
{
  uLong v4;
  const char *v5;
  uInt v6;
  unsigned int v7;
  unsigned int v9;

  v9 = a2;
  v4 = computeCRC32(0, 0, 0);
  v5 = (const char *)(*((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * a2));
  v6 = strlen(v5);
  v7 = computeCRC32(v4, (const unsigned __int8 *)v5, v6);
  return computeCRC32(v7, &v9, 1u);
}

uLong WordList::computeWordIdPronChecksum(WordList *this, unsigned int a2)
{
  uLong v4;
  uint64_t v5;
  unsigned int v7;

  v7 = a2;
  LODWORD(v4) = computeCRC32(0, 0, 0);
  v5 = *((_QWORD *)this + 4);
  if (*(_WORD *)(v5 + 2 * a2))
  {
    v4 = computeCRC32(v4, (const unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * *(unsigned int *)(*((_QWORD *)this + 6) + 4 * a2)), *(unsigned __int16 *)(v5 + 2 * a2));
    if (*((_DWORD *)this + 98) >= 2u)
      v4 = computeCRC32(v4, (const unsigned __int8 *)(*((_QWORD *)this + 53) + a2), 1u);
    if (*((_DWORD *)this + 99) >= 2u)
      LODWORD(v4) = computeCRC32(v4, (const unsigned __int8 *)(*((_QWORD *)this + 55) + a2), 1u);
  }
  return computeCRC32(v4, &v7, 1u);
}

uLong WordList::computeWordChecksums(uLong this)
{
  WordList *v1;
  uLong v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = (WordList *)this;
  *(_DWORD *)(this + 376) = 0;
  if (*(_BYTE *)(this + 272) && *(__int16 *)(this + 274) == -2)
    v2 = this + 280;
  else
    v2 = *(_QWORD *)(*(_QWORD *)(this + 296) + 524272);
  if (*(_DWORD *)(v2 + 8))
  {
    v3 = 0;
    do
    {
      this = WordList::computeWordIdNameChecksum(v1, *(_DWORD *)(*(_QWORD *)v2 + 4 * v3));
      *((_DWORD *)v1 + 94) ^= this;
      ++v3;
      v4 = *(unsigned int *)(v2 + 8);
    }
    while (v3 < v4);
    *((_DWORD *)v1 + 95) = 0;
    if ((_DWORD)v4)
    {
      v5 = 0;
      do
      {
        this = WordList::computeWordIdPronChecksum(v1, *(_DWORD *)(*(_QWORD *)v2 + 4 * v5));
        *((_DWORD *)v1 + 95) ^= this;
        ++v5;
      }
      while (v5 < *(unsigned int *)(v2 + 8));
    }
  }
  else
  {
    *(_DWORD *)(this + 380) = 0;
  }
  return this;
}

void WordList::loadTwl(WordList *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t FileVersion;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  char *LineFieldString;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t i;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  char v55;
  char v56;
  unsigned int v57;
  unsigned int j;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int LineFieldUnsigned;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  WordList *v145;
  unsigned int *v146;
  CharInfo *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  char *v163;
  char *v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  char *v212;
  const char *v213;
  int v214;
  unsigned int v215;
  unint64_t k;
  char *v217;
  BOOL v218;
  char *v219;
  EnvMgr *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  int v255;
  const char *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int ItemEnvIdMaybeNew;
  uint64_t v268;
  uint64_t v269;
  EnvMgr *v270;
  char *v271;
  const char *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v277;
  unint64_t v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  __int16 v289;
  void *v290;
  unsigned int v291;
  TagBitsAndStrings *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  const char *v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  char *v331;
  unsigned __int8 *v332;
  BOOL v333;
  int v334;
  int v335;
  BOOL v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  WordList *v346;
  unsigned int v347;
  const char *v348;
  int v349;
  unsigned __int8 *v350;
  unsigned int v351;
  char *__s;
  unsigned int v353;
  const char *v354;
  unsigned int v355;
  char *v356;
  unsigned int v357;
  _WORD *v358;
  uint64_t v359;
  char *v360;
  unsigned int v361;
  char *v362;
  unsigned int v363;
  const char *v364;
  unsigned int v365;
  char *v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  _QWORD v372[2];
  uint64_t v373;
  uint64_t v374;
  int v375[2];
  int v376;
  unsigned int v377[2];
  unsigned int v378[2];
  unsigned int v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  unsigned int v386[2];
  _QWORD v387[2];
  _BYTE v388[32];
  int v389;

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v388);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v388, (uint64_t)a2, 0x62u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v388, "TextWordList");
  v387[0] = 0;
  v387[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v388, sTWL_Versions, (uint64_t)v387, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v388, (unsigned int *)v387, v9, v10, v11, v12, v13, v14);
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v388);
  *(_QWORD *)v386 = 0;
  v385 = 0;
  v383 = 0;
  v384 = 0;
  v381 = 0;
  v382 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfWords", &v386[1], 1, 0, 0xF42400u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronlessWords", v386, 1, 0, 0xF42400u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronIds", &v385, 1, 0, 0xF42400u);
  v380 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfFreePronIds", &v380, 1, 0, 0xF42400u);
  v338 = v380 + v385;
  if (v385 > 0xFFFFF2 || v380 > 0xFFFFF2 || v338 > 0xFFFFF2 || v386[1] > v385 || v386[0] > v386[1])
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1050, (uint64_t)"word/wordlist", 24, (uint64_t)"%u %u %u %u", v16, v17, v385);
  v379 = 0;
  *(_QWORD *)v377 = 0;
  *(_QWORD *)v378 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronPredecessorSeedCategories", &v379, 1, 1u, 0xFAu);
  *((_DWORD *)this + 98) = v379;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronSuccessorSeedCategories", &v378[1], 1, 1u, 0xFAu);
  *((_DWORD *)this + 99) = v378[1];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "StartOfUtterancePredecessorSeedCategory", v377, 1, 0, v379);
  *((_BYTE *)this + 416) = v377[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "EndOfUtteranceSuccessorSeedCategory", v377, 1, 0, v378[1]);
  *((_BYTE *)this + 417) = v377[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "RootDeterminesPronPredecessorSeedCategory", v377, 1, 0, 1u);
  *((_BYTE *)this + 421) = v377[0] == 1;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "RootDeterminesPronSuccessorSeedCategory", v377, 1, 0, 1u);
  *((_BYTE *)this + 422) = v377[0] == 1;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "DefaultClientPronPredecessorSeedCategory", v378, 1, 0, v379 - 1);
  *((_BYTE *)this + 419) = v378[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "DefaultClientPronSuccessorSeedCategory", &v377[1], 1, 0, v378[1] - 1);
  v18 = FileVersion;
  v19 = HIDWORD(FileVersion);
  *((_BYTE *)this + 420) = v377[1];
  if ((_DWORD)FileVersion != 19)
  {
    if ((_DWORD)FileVersion != 20 || (HIDWORD(FileVersion) - 18) <= 0xFFFFFFFD)
      goto LABEL_13;
LABEL_12:
    v375[0] = 0;
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "WordTagsVersion", v375, 1, -16000000, 16000000);
    v20 = v375[0];
    *((_DWORD *)this + 114) = v375[0];
    *((_DWORD *)this + 115) = v20;
    goto LABEL_14;
  }
  if (HIDWORD(FileVersion) == 15)
    goto LABEL_12;
LABEL_13:
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "RequiredWordTagsVersion", (int *)this + 114, 1, -16000000, 16000000);
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "OptionalWordTagsVersion", (int *)this + 115, 1, -16000000, 16000000);
LABEL_14:
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "RequiredTags", (WordList *)((char *)this + 464), 1);
  splitTagsString((uint64_t)this + 464, (uint64_t)&v383);
  *((_DWORD *)this + 138) = v384;
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "OptionalTags", (WordList *)((char *)this + 480), 1);
  splitTagsString((uint64_t)this + 480, (uint64_t)&v381);
  if ((_DWORD)v382)
    *((_DWORD *)this + 129) = v382;
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "NewWordTag", (WordList *)((char *)this + 496), 1);
  v23 = *((_DWORD *)this + 138);
  if ((v23 != 0) == *((_DWORD *)this + 126) < 2u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1142, (uint64_t)"word/wordlist", 58, (uint64_t)"%s", v21, v22, (char)&unk_209A7AB86);
    v23 = *((_DWORD *)this + 138);
  }
  if (v23)
    tagStringToTagBits((uint64_t)this + 496, (unsigned int *)&v383, (WordList *)((char *)this + 560));
  DgnString::DgnString((DgnString *)v375);
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "AllowedCollations", (DgnString *)v375, 1);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v388, v24, v25, v26, v27, v28, v29, v30);
  WordList::setSizeForWordListLoad(this, v338, *((_DWORD *)this + 98), *((_DWORD *)this + 99));
  v373 = 0;
  v374 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v388, (uint64_t)&v373);
  v372[0] = 0;
  v372[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v388, (unint64_t)v372);
  v346 = this;
  if (!(_DWORD)v374)
  {
    v340 = -1;
    v341 = -1;
    v342 = -1;
    v343 = -1;
    v344 = -1;
    v345 = -1;
LABEL_58:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1237, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"Type");
    v347 = -1;
    goto LABEL_59;
  }
  v33 = HIDWORD(FileVersion);
  v34 = 0;
  v35 = 0;
  v340 = -1;
  v341 = -1;
  v342 = -1;
  v343 = -1;
  v344 = -1;
  v345 = -1;
  v347 = -1;
  do
  {
    if (*(_DWORD *)(v373 + v34 + 8))
      v36 = *(const char **)(v373 + v34);
    else
      v36 = (const char *)&unk_209A7AB86;
    if (!strcmp(v36, "Type"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1182, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v347 = v35;
    }
    else if (!strcmp(v36, "WordName"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1190, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v345 = v35;
    }
    else if (!strcmp(v36, "UnsValue1"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1198, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v344 = v35;
    }
    else if (!strcmp(v36, "UnsValue2"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1206, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v343 = v35;
    }
    else if (!strcmp(v36, "UnsValue3"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1214, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v342 = v35;
    }
    else if (!strcmp(v36, "StrValue1"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1222, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v341 = v35;
    }
    else if (!strcmp(v36, "StrValue2"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1230, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      v340 = v35;
    }
    else
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1235, (uint64_t)"word/wordlist", 12, (uint64_t)"%.500s %u %u", v31, v32, (char)v36);
    }
    ++v35;
    v34 += 16;
  }
  while (v35 < v374);
  LODWORD(v19) = v33;
  if (v347 == -1)
    goto LABEL_58;
LABEL_59:
  if (v345 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1238, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"WordName");
  if (v344 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1239, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue1");
  if (v343 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1240, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue2");
  if (v342 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1241, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue3");
  if (v341 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1242, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"StrValue1");
  if (v340 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1243, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"StrValue2");
  if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
    goto LABEL_278;
  LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
  v334 = v19;
  v335 = v18;
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) != 0 || strcmp(LineFieldString, "SeedTable"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1251, (uint64_t)"word/wordlist", 43, (uint64_t)"%u %.500s", v38, v39, v389);
  v40 = (_QWORD *)((char *)this + 400);
  v41 = *((unsigned int *)this + 98);
  v42 = *((_DWORD *)this + 103);
  if (v41 > v42)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 400, v41 - v42, 0);
  v43 = *((unsigned int *)this + 102);
  if (v43 <= v41)
  {
    if (v43 < v41)
    {
      v46 = v41 - v43;
      v47 = 16 * v43;
      do
      {
        v48 = (_QWORD *)(*v40 + v47);
        *v48 = 0;
        v48[1] = 0;
        v47 += 16;
        --v46;
      }
      while (v46);
    }
  }
  else if ((int)v43 > (int)v41)
  {
    v44 = (int)v43;
    v45 = 16 * (int)v43 - 16;
    do
    {
      --v44;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v40 + v45);
      v45 -= 16;
    }
    while (v44 > (int)v41);
  }
  *((_DWORD *)this + 102) = v41;
  v49 = *((_DWORD *)this + 98);
  if (!v49)
    goto LABEL_113;
  v50 = 0;
  for (i = 0; i < v49; ++i)
  {
    v52 = *((_QWORD *)this + 50) + v50;
    v53 = *((unsigned int *)this + 99);
    if (*(_DWORD *)(v52 + 12) < v53)
    {
      v370 = 0;
      *(_DWORD *)(v52 + 12) = realloc_array(*(_QWORD **)v52, &v370, v53, *(unsigned int *)(v52 + 8), *(unsigned int *)(v52 + 8), 1);
      *(_QWORD *)v52 = v370;
      v49 = *((_DWORD *)this + 98);
    }
    *(_DWORD *)(v52 + 8) = v53;
    v50 += 16;
  }
  if (!v49)
  {
LABEL_113:
    v55 = 0;
LABEL_114:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1289, (uint64_t)"word/wordlist", 60, (uint64_t)"%s", v38, v39, (char)&errStr_word_wordlist_E_SEED_TABLE_NOSEED);
    goto LABEL_115;
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = *((_DWORD *)this + 99);
  do
  {
    if (v57)
    {
      for (j = 0; j < v57; ++j)
      {
        v59 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        if (strcmp(v59, "SeedTable"))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1266, (uint64_t)"word/wordlist", 61, (uint64_t)"%s", v60, v61, (char)&errStr_word_wordlist_E_INCOMPLETE_SEEDTABLE);
        DgnString::DgnString((DgnString *)&v370);
        DgnString::DgnString((DgnString *)&v368);
        DgnString::DgnString((DgnString *)&v366);
        DgnString::DgnString((DgnString *)&v364);
        v62 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::operator=((DgnString *)&v370, v62);
        v63 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
        DgnString::operator=((DgnString *)&v368, v63);
        LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v64, v65, v66, v67, v68, v69);
        v77 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v71, v72, v73, v74, v75, v76);
        v84 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v78, v79, v80, v81, v82, v83);
        v85 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
        DgnString::operator=((DgnString *)&v366, v85);
        v86 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
        DgnString::operator=((DgnString *)&v364, v86);
        v89 = v389;
        if (v369 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1270, (uint64_t)"word/wordlist", 44, (uint64_t)"%u", v87, v88, v389);
        if (LineFieldUnsigned != v54)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1272, (uint64_t)"word/wordlist", 62, (uint64_t)"%u", v87, v88, v89);
        if (j != v77)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1274, (uint64_t)"word/wordlist", 63, (uint64_t)"%u", v87, v88, v89);
        if (v84 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1276, (uint64_t)"word/wordlist", 48, (uint64_t)"%u", v87, v88, v89);
        if (v367 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1278, (uint64_t)"word/wordlist", 49, (uint64_t)"%u", v87, v88, v89);
        if (v365 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1280, (uint64_t)"word/wordlist", 50, (uint64_t)"%u", v87, v88, v89);
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 50) + 16 * LineFieldUnsigned) + v77) = v84 == 1;
        DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388);
        v55 |= v84 == 0;
        v56 |= v84 == 1;
        DgnString::~DgnString((DgnString *)&v364);
        DgnString::~DgnString((DgnString *)&v366);
        DgnString::~DgnString((DgnString *)&v368);
        DgnString::~DgnString((DgnString *)&v370);
        v57 = *((_DWORD *)this + 99);
      }
      v49 = *((_DWORD *)this + 98);
    }
    ++v54;
  }
  while (v54 < v49);
  if ((v56 & 1) == 0)
    goto LABEL_114;
LABEL_115:
  *((_BYTE *)this + 418) = v55 & 1;
  DgnString::DgnString((DgnString *)&v370);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    v92 = 0;
    v337 = 0;
    v336 = 0;
    v339 = 0xFFFFFF;
    v93 = 1;
    while (1)
    {
      DgnString::DgnString((DgnString *)&v368);
      DgnString::DgnString((DgnString *)&v366);
      DgnString::DgnString((DgnString *)&v364);
      DgnString::DgnString((DgnString *)&v362);
      v94 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v368, v94);
      v95 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v366, v95);
      v102 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v96, v97, v98, v99, v100, v101);
      v109 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v103, v104, v105, v106, v107, v108);
      v116 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v110, v111, v112, v113, v114, v115);
      v117 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v364, v117);
      v118 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&v362, v118);
      v121 = v389;
      if (v109 >= *((_DWORD *)v346 + 98))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1310, (uint64_t)"word/wordlist", 64, (uint64_t)"%u %u", v119, v120, v109);
      if (v116 >= *((_DWORD *)v346 + 99))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1313, (uint64_t)"word/wordlist", 65, (uint64_t)"%u %u", v119, v120, v109);
      v122 = v365;
      v123 = v364;
      if (v365)
        v124 = v364;
      else
        v124 = (const char *)&unk_209A7AB86;
      if (strcmp(v124, "F") && strcmp(v124, "U"))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1320, (uint64_t)"word/wordlist", 66, (uint64_t)"%u %.500s", v125, v126, v121);
        v122 = v365;
        v123 = v364;
      }
      if (v122)
        v127 = v123;
      else
        v127 = (const char *)&unk_209A7AB86;
      v130 = strcmp(v127, "F");
      if (v367 <= 1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1331, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v128, v129, v121);
      if (v102 >= v338)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1336, (uint64_t)"word/wordlist", 5, (uint64_t)"%d %.500s %u", v128, v129, v121);
      if (*((_DWORD *)v346 + 97) > v102 && *(_BYTE *)(*((_QWORD *)v346 + 13) + v102))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1341, (uint64_t)"word/wordlist", 25, (uint64_t)"%d %.500s %u", v128, v129, v121);
      DgnString::DgnString((DgnString *)&v360, (const DgnString *)&v362);
      v358 = 0;
      v359 = 0;
      if (v361)
        v131 = v360;
      else
        v131 = (char *)&unk_209A7AB86;
      WordList::strToPhonemes((uint64_t)v346, v131, (uint64_t)&v358);
      WordList::checkNewTwlWordBoundaryPhonemes((uint64_t)v346, (uint64_t)&v358, v121, (uint64_t)&v366, (uint64_t)&v360, v132, v133, v134);
      if (v359 >= 0x4000)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1355, (uint64_t)"word/wordlist", 7, (uint64_t)"%d %.500s %d", v135, v136, v121);
      if (v367)
        v137 = v366;
      else
        v137 = (const char *)&unk_209A7AB86;
      if ((_DWORD)v371)
        v138 = (const char *)v370;
      else
        v138 = (const char *)&unk_209A7AB86;
      if (!strcmp(v137, v138))
      {
        if (++v93 >= 0xFF)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1379, (uint64_t)"word/wordlist", 32, (uint64_t)"%d %.500s %d", v139, v140, v121);
        v141 = v359;
        if (v336 || (_DWORD)v359 == 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1382, (uint64_t)"word/wordlist", 17, (uint64_t)"%d %.500s", v139, v140, v121);
          v141 = v359;
          if (!(_DWORD)v359)
            goto LABEL_167;
        }
        else
        {
          v336 = 0;
        }
      }
      else
      {
        DgnString::operator=((DgnString *)&v370, (DgnString *)&v366);
        v141 = v359;
        v336 = (_DWORD)v359 == 0;
        if ((_DWORD)v359)
          v142 = v337;
        else
          v142 = v337 + 1;
        v337 = v142;
        v93 = 1;
        v339 = v102;
        if (!(_DWORD)v359)
          goto LABEL_167;
      }
      if (*v358)
      {
        v143 = v141 - 1;
        if (!v358[v143] && v143)
LABEL_166:
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1394, (uint64_t)"word/wordlist", 37, (uint64_t)"%u", v139, v140, v102);
      }
      else if (v141 != 1)
      {
        goto LABEL_166;
      }
LABEL_167:
      if (v93 == 1)
      {
        v144 = 0xFFFFFFFFLL;
        v145 = v346;
        v146 = (unsigned int *)v339;
      }
      else
      {
        v145 = v346;
        v146 = (unsigned int *)v339;
        v144 = *(unsigned int *)(*((_QWORD *)v346 + 25) + 4 * v339);
      }
      if (v367)
        v147 = (CharInfo *)v366;
      else
        v147 = (CharInfo *)&unk_209A7AB86;
      v148 = WordList::addWordInternal((uint64_t)v145, 0, v102, v146, v144, v147, v93, (uint64_t)&v358, 0, 0);
      this = v145;
      WordList::setPronPredecessorSeedCategory(v145, v148, v109, v149, v150, v151, v152, v153);
      WordList::setPronSuccessorSeedCategory(v145, v148, v116, v154, v155, v156, v157, v158);
      v159 = 1 << v148;
      v160 = v148 >> 5;
      v161 = *((_QWORD *)v145 + 80);
      if (v130)
        v162 = *(_DWORD *)(v161 + 4 * v160) & ~v159;
      else
        v162 = *(_DWORD *)(v161 + 4 * v160) | v159;
      *(_DWORD *)(v161 + 4 * v160) = v162;
      if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
      {
        v163 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::DgnString((DgnString *)&v356, v163);
        if (v357)
          v164 = v356;
        else
          v164 = (char *)&unk_209A7AB86;
        v165 = strcmp(v164, "Pron") != 0;
        DgnString::~DgnString((DgnString *)&v356);
      }
      else
      {
        v165 = 1;
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v358);
      DgnString::~DgnString((DgnString *)&v360);
      DgnString::~DgnString((DgnString *)&v362);
      DgnString::~DgnString((DgnString *)&v364);
      DgnString::~DgnString((DgnString *)&v366);
      DgnString::~DgnString((DgnString *)&v368);
      ++v92;
      if (v165)
        goto LABEL_183;
    }
  }
  v337 = 0;
  v92 = 0;
LABEL_183:
  if (v92 != v385)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1429, (uint64_t)"word/wordlist", 1, (uint64_t)"%d %d", v90, v91, v385);
  if (v335 != 19)
  {
    if (v335 == 20 && v334 == 16)
      goto LABEL_192;
LABEL_190:
    if (v337 != v386[0])
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1434, (uint64_t)"word/wordlist", 29, (uint64_t)"%u %u", v90, v91, v386[0]);
    goto LABEL_192;
  }
  if (v334 != 15)
    goto LABEL_190;
LABEL_192:
  WordList::setupWordIdsForWordListLoad((uint64_t)this);
  BitArray::BitArray((BitArray *)&v368, *((_DWORD *)this + 97));
  DgnString::DgnString((DgnString *)&v366);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    while (1)
    {
      DgnString::DgnString((DgnString *)&v364);
      DgnString::DgnString((DgnString *)&v362);
      DgnString::DgnString((DgnString *)&v360);
      DgnString::DgnString((DgnString *)&v358);
      v168 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v364, v168);
      v169 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v362, v169);
      v176 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v170, v171, v172, v173, v174, v175);
      v183 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v177, v178, v179, v180, v181, v182);
      v190 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v184, v185, v186, v187, v188, v189);
      v191 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v360, v191);
      v192 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&v358, v192);
      if (v183)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1443, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v193, v194, v389);
      if (v190)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1445, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v193, v194, v389);
      v195 = v389;
      if (v363 > 1
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1449, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v193, v194, v389), v363))
      {
        v196 = v362;
      }
      else
      {
        v196 = (char *)&unk_209A7AB86;
      }
      v199 = WordList::lookupWord(v346, v196);
      if (v199 == 0xFFFFFF)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1452, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v197, v198, v195);
      v200 = v368;
      v201 = v199 >> 5;
      v202 = *(_DWORD *)(v368 + 4 * v201);
      v203 = 1 << v199;
      if ((v202 & (1 << v199)) != 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1454, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v197, v198, v195);
        v200 = v368;
        v202 = *(_DWORD *)(v368 + 4 * v201);
      }
      *(_DWORD *)(v200 + 4 * v201) = v202 | v203;
      if (v176)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1458, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v197, v198, v195);
      v204 = v361 ? v360 : (const char *)&unk_209A7AB86;
      if (!strcmp(v204, "F"))
      {
        v207 = *((_QWORD *)v346 + 78);
        v208 = *(_DWORD *)(v207 + 4 * v201) | v203;
      }
      else
      {
        if (strcmp(v204, "U"))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1467, (uint64_t)"word/wordlist", 67, (uint64_t)"%u %.500s", v205, v206, v195);
        v207 = *((_QWORD *)v346 + 78);
        v208 = *(_DWORD *)(v207 + 4 * v201) & ~v203;
      }
      *(_DWORD *)(v207 + 4 * v201) = v208;
      DgnString::DgnString((DgnString *)&v356, (const DgnString *)&v358);
      v211 = *((_DWORD *)v346 + 138);
      if ((v211 != 0) == v357 < 2)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1474, (uint64_t)"word/wordlist", 21, (uint64_t)"%d %.500s", v209, v210, v195);
        v211 = *((_DWORD *)v346 + 138);
      }
      if (v211)
      {
        tagStringToTagBits((uint64_t)&v356, (unsigned int *)&v383, (BitArray *)&v366);
        BitArray::setBitsInRange((_QWORD *)v346 + 72, (const BitArray *)&v366, *((_DWORD *)v346 + 138) * v199, *((_DWORD *)v346 + 138) * v199 + *((_DWORD *)v346 + 138));
      }
      if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
        break;
      v212 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::DgnString((DgnString *)&v354, v212);
      if (v355)
        v213 = v354;
      else
        v213 = (const char *)&unk_209A7AB86;
      v214 = strcmp(v213, "ReqTags");
      DgnString::~DgnString((DgnString *)&v354);
      DgnString::~DgnString((DgnString *)&v356);
      DgnString::~DgnString((DgnString *)&v358);
      DgnString::~DgnString((DgnString *)&v360);
      DgnString::~DgnString((DgnString *)&v362);
      DgnString::~DgnString((DgnString *)&v364);
      if (v214)
        goto LABEL_226;
    }
    DgnString::~DgnString((DgnString *)&v356);
    DgnString::~DgnString((DgnString *)&v358);
    DgnString::~DgnString((DgnString *)&v360);
    DgnString::~DgnString((DgnString *)&v362);
    DgnString::~DgnString((DgnString *)&v364);
  }
LABEL_226:
  v215 = *((_DWORD *)v346 + 97);
  if (v215)
  {
    for (k = 0; k < v215; ++k)
    {
      if (*(_BYTE *)(*((_QWORD *)v346 + 13) + k)
        && k == *(_DWORD *)(*((_QWORD *)v346 + 32) + 4 * k)
        && ((*(_DWORD *)(v368 + 4 * (k >> 5)) >> k) & 1) == 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1504, (uint64_t)"word/wordlist", 54, (uint64_t)"%d %.500s %.500s", v166, v167, v389);
        v215 = *((_DWORD *)v346 + 97);
      }
    }
  }
  BitArray::BitArray((BitArray *)&v364, v215);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    v217 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
    if (!strcmp(v217, "OptTags"))
    {
      v292 = (WordList *)((char *)v346 + 512);
      do
      {
        DgnString::DgnString((DgnString *)&v362);
        DgnString::DgnString((DgnString *)&v360);
        DgnString::DgnString((DgnString *)&v358);
        DgnString::DgnString((DgnString *)&v356);
        v293 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::operator=((DgnString *)&v362, v293);
        v294 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
        DgnString::operator=((DgnString *)&v360, v294);
        v301 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v295, v296, v297, v298, v299, v300);
        v308 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v302, v303, v304, v305, v306, v307);
        v315 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v309, v310, v311, v312, v313, v314);
        v316 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
        DgnString::operator=((DgnString *)&v358, v316);
        v317 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
        DgnString::operator=((DgnString *)&v356, v317);
        if (v301)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1514, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v318, v319, v389);
        if (v308)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1516, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v318, v319, v389);
        if (v315)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1518, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v318, v319, v389);
        v320 = v389;
        if (v361 > 1
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1521, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v318, v319, v389), v361))
        {
          v321 = v360;
        }
        else
        {
          v321 = (char *)&unk_209A7AB86;
        }
        v324 = WordList::lookupWord(v346, v321);
        if (v324 == 0xFFFFFF)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1524, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v322, v323, v320);
        v325 = v364;
        v326 = v324 >> 5;
        v327 = *(_DWORD *)&v364[4 * v326];
        if ((v327 & (1 << v324)) != 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1526, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v322, v323, v320);
          v325 = v364;
          v327 = *(_DWORD *)&v364[4 * v326];
        }
        *(_DWORD *)&v325[4 * v326] = v327 | (1 << v324);
        DgnString::DgnString((DgnString *)&v354, (const DgnString *)&v358);
        DgnString::DgnString((DgnString *)&__s, (const DgnString *)&v356);
        v330 = v355;
        if (!*((_DWORD *)v346 + 129) && v355 >= 2)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1532, (uint64_t)"word/wordlist", 6, (uint64_t)"%d %.500s", v328, v329, v320);
          v330 = v355;
        }
        if (v330 <= 1 && v353 >= 2)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1535, (uint64_t)"word/wordlist", 30, (uint64_t)"%d %.500s", v328, v329, v320);
          v330 = v355;
        }
        if (*((_DWORD *)v346 + 129))
        {
          if (v330 >= 2)
          {
            tagStringToTagBits((uint64_t)&v354, (unsigned int *)&v381, (BitArray *)&v366);
            TagBitsAndStrings::setTagBits(v292, v324, (const BitArray *)&v366);
            if (v353 >= 2)
              TagBitsAndStrings::setTagString(v292, v324, __s);
          }
        }
        if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
        {
          v331 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
          DgnString::DgnString((DgnString *)&v350, v331);
          if (v351)
            v332 = v350;
          else
            v332 = (unsigned __int8 *)&unk_209A7AB86;
          v333 = strcmp((const char *)v332, "OptTags") != 0;
          DgnString::~DgnString((DgnString *)&v350);
        }
        else
        {
          v333 = 1;
        }
        DgnString::~DgnString((DgnString *)&__s);
        DgnString::~DgnString((DgnString *)&v354);
        DgnString::~DgnString((DgnString *)&v356);
        DgnString::~DgnString((DgnString *)&v358);
        DgnString::~DgnString((DgnString *)&v360);
        DgnString::~DgnString((DgnString *)&v362);
      }
      while (!v333);
    }
  }
  BitArray::BitArray((BitArray *)&v362, *((_DWORD *)v346 + 97));
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) != 0)
  {
    v218 = 1;
  }
  else
  {
    v219 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
    v218 = strcmp(v219, "Env") != 0;
  }
  DgnString::DgnString((DgnString *)&v360);
  if (!v218)
  {
    v220 = (EnvMgr *)*((_QWORD *)v346 + 3);
    while (1)
    {
      DgnString::DgnString((DgnString *)&v358);
      DgnString::DgnString((DgnString *)&v356);
      DgnString::DgnString((DgnString *)&v354);
      DgnString::DgnString((DgnString *)&__s);
      v221 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v358, v221);
      v222 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v356, v222);
      v229 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v223, v224, v225, v226, v227, v228);
      v236 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v230, v231, v232, v233, v234, v235);
      v243 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v237, v238, v239, v240, v241, v242);
      v244 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v354, v244);
      v245 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&__s, v245);
      if (v229)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1570, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v246, v247, v389);
      if (v236)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1572, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v246, v247, v389);
      if (v243)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1574, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v246, v247, v389);
      v248 = v389;
      if (v357 > 1
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1577, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v246, v247, v389), v357))
      {
        v249 = v356;
      }
      else
      {
        v249 = (char *)&unk_209A7AB86;
      }
      v252 = WordList::lookupWord(v346, v249);
      if ((_DWORD)v252 == 0xFFFFFF)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1580, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v250, v251, v248);
      v253 = v362;
      v254 = v252 >> 5;
      v255 = *(_DWORD *)&v362[4 * v254];
      if ((v255 & (1 << v252)) != 0)
      {
        v256 = v357 ? v356 : (const char *)&unk_209A7AB86;
        v257 = v361 ? v360 : (const char *)&unk_209A7AB86;
        if (strcmp(v256, v257))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1583, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v258, v259, v248);
          v253 = v362;
          v255 = *(_DWORD *)&v362[4 * v254];
        }
      }
      *(_DWORD *)&v253[4 * v254] = v255 | (1 << v252);
      DgnString::operator=((DgnString *)&v360, (DgnString *)&v356);
      ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v220, v252, 1, v260, v261, v262, v263, v264);
      if (v355 <= 1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1590, (uint64_t)"word/wordlist", 56, (uint64_t)"%u", v265, v266, v389);
      if (v353 <= 1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1592, (uint64_t)"word/wordlist", 57, (uint64_t)"%u", v265, v266, v389);
      v350 = 0;
      v351 = 0;
      DgnTextFile::convertFromEnvValueFormat((uint64_t)&__s, (uint64_t **)&v350);
      v270 = v355 ? (EnvMgr *)v354 : (EnvMgr *)&unk_209A7AB86;
      EnvMgr::setData(v220, ItemEnvIdMaybeNew, v270, v350, v351, 1, v268, v269);
      if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
        break;
      v271 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::DgnString((DgnString *)&v348, v271);
      if (v349)
        v272 = v348;
      else
        v272 = (const char *)&unk_209A7AB86;
      v273 = strcmp(v272, "Env");
      DgnString::~DgnString((DgnString *)&v348);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v350);
      DgnString::~DgnString((DgnString *)&__s);
      DgnString::~DgnString((DgnString *)&v354);
      DgnString::~DgnString((DgnString *)&v356);
      DgnString::~DgnString((DgnString *)&v358);
      if (v273)
        goto LABEL_275;
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v350);
    DgnString::~DgnString((DgnString *)&__s);
    DgnString::~DgnString((DgnString *)&v354);
    DgnString::~DgnString((DgnString *)&v356);
    DgnString::~DgnString((DgnString *)&v358);
  }
LABEL_275:
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1609, (uint64_t)"word/wordlist", 51, (uint64_t)"%u", v274, v275, v389);
  DgnString::~DgnString((DgnString *)&v360);
  BitArray::~BitArray((BitArray *)&v362);
  BitArray::~BitArray((BitArray *)&v364);
  BitArray::~BitArray((BitArray *)&v366);
  BitArray::~BitArray((BitArray *)&v368);
  DgnString::~DgnString((DgnString *)&v370);
  this = v346;
LABEL_278:
  PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 352);
  WordIdPronCollArray::addArray((uint64_t)this + 352, (uint64_t)this + 280);
  v370 = 0;
  v371 = 0;
  if (v376)
    v276 = *(unsigned __int8 **)v375;
  else
    v276 = (unsigned __int8 *)&unk_209A7AB86;
  DgnSplitStringIntoTokens(v276, ",", (uint64_t)&v370, 0);
  v368 = 0;
  v369 = 0;
  if ((_DWORD)v371)
  {
    v277 = 0;
    v278 = 0;
    do
    {
      if (*(_DWORD *)((char *)v370 + v277 + 8))
        v279 = *(const char **)((char *)v370 + v277);
      else
        v279 = (const char *)&unk_209A7AB86;
      if (!strcmp(v279, "_IDENTITY"))
      {
        v289 = -2;
      }
      else
      {
        v286 = CollMgr::lookupCollation(*(CollMgr **)this, v279, v280, v281, v282, v283, v284, v285);
        v289 = v286;
        if (!v286)
        {
          if (*(_DWORD *)((char *)v370 + v277 + 8))
            v290 = *(void **)((char *)v370 + v277);
          else
            v290 = &unk_209A7AB86;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1626, (uint64_t)"word/wordlist", 36, (uint64_t)"%.500s", v287, v288, (char)v290);
          v289 = 0;
        }
      }
      v291 = v369;
      if ((_DWORD)v369 == HIDWORD(v369))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v368, 1, 1);
        v291 = v369;
      }
      *(_WORD *)(v368 + 2 * v291) = v289;
      LODWORD(v369) = v291 + 1;
      ++v278;
      v277 += 16;
    }
    while (v278 < v371);
  }
  DgnCollArray<unsigned int,WordList>::setColls((uint64_t)this + 272, (uint64_t)&v368);
  WordList::computeWordChecksums((uLong)this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v368);
  DgnArray<DgnString>::releaseAll((uint64_t)&v370);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v372);
  DgnArray<DgnString>::releaseAll((uint64_t)&v373);
  DgnString::~DgnString((DgnString *)v375);
  DgnArray<DgnString>::releaseAll((uint64_t)&v381);
  DgnArray<DgnString>::releaseAll((uint64_t)&v383);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v387);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v388);
}

void sub_20992C848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;

  BitArray::~BitArray((BitArray *)&a38);
  BitArray::~BitArray((BitArray *)&a40);
  BitArray::~BitArray((BitArray *)&a42);
  BitArray::~BitArray((BitArray *)&a44);
  DgnString::~DgnString((DgnString *)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnArray<DgnString>::releaseAll((uint64_t)&a50);
  DgnString::~DgnString((DgnString *)&a52);
  DgnArray<DgnString>::releaseAll((uint64_t)&a57);
  DgnArray<DgnString>::releaseAll((uint64_t)&a59);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a63);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&a65);
  _Unwind_Resume(a1);
}

void splitTagsString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v13;
  char v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    v5 = 16 * v4 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a2 + v5));
      v5 -= 16;
    }
    while (v5 != -16);
  }
  *(_DWORD *)(a2 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  if (v6 >= 2 && strcmp(*(const char **)a1, "0"))
  {
    DgnString::DgnString((DgnString *)&v18);
    v10 = 0;
    do
    {
      v11 = *(char *)(*(_QWORD *)a1 + v10);
      if ((v11 - 65) < 0x1A)
        goto LABEL_35;
      if (v11 == 95 || (v11 - 97) < 0x1Au)
        goto LABEL_35;
      if (v10)
        v13 = (v11 - 48) >= 0xA;
      else
        v13 = 1;
      v14 = !v13;
      if (v11 != 44 && (v14 & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 376, (uint64_t)"word/wordlist", 18, (uint64_t)"%c %.500s", v8, v9, *(_BYTE *)(*(_QWORD *)a1 + v10));
      if (v11 == 44)
      {
        ++v10;
        if (v19 < 2 || v10 == v7)
        {
          if (*(_DWORD *)(a1 + 8))
            v15 = *(void **)a1;
          else
            v15 = &unk_209A7AB86;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 382, (uint64_t)"word/wordlist", 19, (uint64_t)"%.500s", v8, v9, (char)v15);
        }
        v16 = *(unsigned int *)(a2 + 8);
        if (v16 == *(_DWORD *)(a2 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a2, 1, 1);
          v16 = *(unsigned int *)(a2 + 8);
        }
        DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + 16 * v16), (const DgnString *)&v18);
        ++*(_DWORD *)(a2 + 8);
        v19 = 0;
      }
      else
      {
LABEL_35:
        DgnString::operator+=(&v18, v11);
        ++v10;
      }
    }
    while (v10 < v7);
    v17 = *(_DWORD *)(a2 + 8);
    if (v17 == *(_DWORD *)(a2 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a2, 1, 1);
      v17 = *(_DWORD *)(a2 + 8);
    }
    DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + 16 * v17), (const DgnString *)&v18);
    ++*(_DWORD *)(a2 + 8);
    DgnString::~DgnString((DgnString *)&v18);
  }
}

void sub_20992CDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *tagStringToTagBits(uint64_t a1, unsigned int *a2, BitArray *a3)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  splitTagsString(a1, (uint64_t)&v25);
  v6 = a2[2];
  BitArray::setSize(a3, a2[2]);
  if ((_DWORD)v6)
    v7 = (_DWORD)v26 == 0;
  else
    v7 = 1;
  if (v7)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = v25;
    v11 = (_DWORD *)(*(_QWORD *)a2 + 8);
    do
    {
      v12 = v10 + 16 * v9;
      if (*v11)
        v13 = (const char *)*((_QWORD *)v11 - 1);
      else
        v13 = (const char *)&unk_209A7AB86;
      v14 = *(_DWORD *)(v12 + 8);
      v15 = *(const char **)v12;
      if (v14)
        v16 = v15;
      else
        v16 = (const char *)&unk_209A7AB86;
      v17 = strcmp(v13, v16);
      v20 = 1 << v8;
      v21 = v8 >> 5;
      if (v17)
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v21) &= ~v20;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v21) |= v20;
        ++v9;
      }
      if (++v8 >= v6)
        break;
      v11 += 4;
    }
    while (v9 < v26);
    if ((_DWORD)v8 && v9 < v26)
    {
      if (*(_DWORD *)(a1 + 8))
        v22 = *(void **)a1;
      else
        v22 = &unk_209A7AB86;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 428, (uint64_t)"word/wordlist", 20, (uint64_t)"%.500s", v18, v19, (char)v22);
    }
  }
  if (v8 < v6)
  {
    v23 = *(_QWORD *)a3;
    do
    {
      *(_DWORD *)(v23 + 4 * (v8 >> 5)) &= ~(1 << v8);
      LODWORD(v8) = v8 + 1;
    }
    while ((_DWORD)v6 != (_DWORD)v8);
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v25);
}

void sub_20992CF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordList::setSizeForWordListLoad(WordList *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  void *v38;

  *((_DWORD *)this + 97) = a2;
  v8 = *((_DWORD *)this + 67);
  v9 = a2;
  v10 = a2 >= v8;
  v11 = a2 - v8;
  if ((_DWORD)v11 != 0 && v10)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 256, v11, 0);
    v9 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 66) = a2;
  v12 = v9;
  if (*((_DWORD *)this + 29) < v9)
  {
    v38 = 0;
    *((_DWORD *)this + 29) = realloc_array(*((_QWORD **)this + 13), &v38, v9, *((unsigned int *)this + 28), *((unsigned int *)this + 28), 1);
    *((_QWORD *)this + 13) = v38;
    v12 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 28) = v9;
  v13 = *((_DWORD *)this + 53);
  v14 = v12;
  if (v12 > v13)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, v12 - v13, 0);
    v14 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 52) = v12;
  v15 = *((_DWORD *)this + 15);
  v16 = v14;
  if (v14 > v15)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, v14 - v15, 0);
    v16 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 14) = v14;
  v17 = *((_DWORD *)this + 11);
  v18 = v16;
  if (v16 > v17)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 32, v16 - v17, 0);
    v18 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 10) = v16;
  if (a3 >= 2)
  {
    v19 = v18;
    if (*((_DWORD *)this + 109) < v18)
    {
      v38 = 0;
      *((_DWORD *)this + 109) = realloc_array(*((_QWORD **)this + 53), &v38, v18, *((unsigned int *)this + 108), *((unsigned int *)this + 108), 1);
      *((_QWORD *)this + 53) = v38;
      v19 = *((_DWORD *)this + 97);
    }
    *((_DWORD *)this + 108) = v18;
    v18 = v19;
  }
  if (a4 >= 2)
  {
    v20 = v18;
    if (*((_DWORD *)this + 113) < v18)
    {
      v38 = 0;
      *((_DWORD *)this + 113) = realloc_array(*((_QWORD **)this + 55), &v38, v18, *((unsigned int *)this + 112), *((unsigned int *)this + 112), 1);
      *((_QWORD *)this + 55) = v38;
      v20 = *((_DWORD *)this + 97);
    }
    *((_DWORD *)this + 112) = v18;
    v18 = v20;
  }
  BitArray::setSize((WordList *)((char *)this + 624), v18);
  BitArray::setSize((WordList *)((char *)this + 640), *((_DWORD *)this + 97));
  BitArray::clearRange((WordList *)((char *)this + 624), 0, *((_DWORD *)this + 158));
  BitArray::clearRange((WordList *)((char *)this + 640), 0, *((_DWORD *)this + 162));
  v21 = *((_DWORD *)this + 138);
  if (v21)
  {
    BitArray::setSize((WordList *)((char *)this + 576), *((_DWORD *)this + 97) * v21);
    BitArray::clearRange((WordList *)((char *)this + 576), 0, *((_DWORD *)this + 146));
  }
  v22 = *((_DWORD *)this + 97);
  v23 = *((_DWORD *)this + 33);
  v24 = v22;
  if (v22 > v23)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 120, v22 - v23, 0);
    v24 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 32) = v22;
  v25 = *((_DWORD *)this + 37);
  v26 = v24;
  if (v24 > v25)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, v24 - v25, 0);
    v26 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 36) = v24;
  v27 = *((_DWORD *)this + 151);
  v28 = v26;
  if (v26 > v27)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 592, v26 - v27, 0);
    v28 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 150) = v26;
  v29 = *((_DWORD *)this + 155);
  v30 = v28;
  if (v28 > v29)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 608, v28 - v29, 0);
    v30 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 154) = v28;
  v31 = *((_DWORD *)this + 41);
  v32 = v30;
  if (v30 > v31)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, v30 - v31, 0);
    v32 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 40) = v30;
  v33 = *((_DWORD *)this + 45);
  v34 = v32;
  if (v32 > v33)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, v32 - v33, 0);
    v34 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 44) = v32;
  v35 = *((_DWORD *)this + 49);
  v36 = v34;
  if (v34 > v35)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, v34 - v35, 0);
    v36 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 48) = v34;
  if (v36 >= 1)
  {
    v37 = v36 + 1;
    do
    {
      WordList::invalidateId(this, v37 - 2);
      --v37;
    }
    while (v37 > 1);
  }
}

void WordList::strToPhonemes(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  __int16 PhnIndex;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;

  DgnString::DgnString((DgnString *)&v13, a2);
  v11 = 0;
  v12 = 0;
  if (v14)
    v5 = v13;
  else
    v5 = (unsigned __int8 *)&unk_209A7AB86;
  DgnSplitStringIntoTokens(v5, ".", (uint64_t)&v11, 0);
  if ((_DWORD)v12)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (*(_DWORD *)(v11 + v6 + 8))
        v8 = *(const char **)(v11 + v6);
      else
        v8 = (const char *)&unk_209A7AB86;
      PhnIndex = PhnMgr::getPhnIndex(*(PhnMgr **)(a1 + 16), v8);
      v10 = *(_DWORD *)(a3 + 8);
      if (v10 == *(_DWORD *)(a3 + 12))
      {
        DgnPrimArray<short>::reallocElts(a3, 1, 1);
        v10 = *(_DWORD *)(a3 + 8);
      }
      *(_WORD *)(*(_QWORD *)a3 + 2 * v10) = PhnIndex;
      *(_DWORD *)(a3 + 8) = v10 + 1;
      ++v7;
      v6 += 16;
    }
    while (v7 < v12);
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v11);
  DgnString::~DgnString((DgnString *)&v13);
}

void sub_20992D3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnArray<DgnString>::releaseAll((uint64_t)&a9);
  DgnString::~DgnString((DgnString *)&a11);
  _Unwind_Resume(a1);
}

void WordList::checkNewTwlWordBoundaryPhonemes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v12);
      v15 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 60);
      v16 = v14 == v15;
      if (v14 == v15 && (!v12 || ((v12 != v8 - 1) & ~v13) == 0))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 5052, (uint64_t)"word/wordlist", 71, (uint64_t)"%d %.500s %.500s", a7, a8, a3);
        v8 = *(_DWORD *)(a2 + 8);
      }
      ++v12;
      v13 = v16;
    }
    while (v12 < v8);
  }
}

uint64_t WordList::addWordInternal(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5, CharInfo *this, uint64_t a7, uint64_t a8, char a9, char a10)
{
  int v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t FreeId;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  unsigned int v50;

  v11 = a7;
  v13 = a5;
  v14 = a4;
  FreeId = a3;
  v16 = (int)a2;
  if (***(_DWORD ***)a1)
    CharInfo::validateEncodedCharString(this, a2, a3, a4, a5, (uint64_t)this, a7, a8);
  v22 = strlen((const char *)this);
  if (v16)
  {
    FreeId = WordList::getFreeId((WordList *)a1);
    if (v14 == 0xFFFFFF && (v14 = WordList::lookupWord((WordList *)a1, (const char *)this), v14 == 0xFFFFFF))
      v14 = FreeId;
    else
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * v14);
  }
  if (FreeId >= 0xFFFFF4)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3010, (uint64_t)"word/wordlist", 10, (uint64_t)"%u %.500s", v20, v21, FreeId);
  if (*(_DWORD *)(a8 + 8))
    PhnMgr::verifyPhonemePron(*(_QWORD *)(a1 + 16), a8, (uint64_t)this, 0, v18, v19, v20, v21);
  v49 = v16;
  if (v11 == 255)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3019, (uint64_t)"word/wordlist", 9, (uint64_t)"%u %.500s", v20, v21, FreeId);
  if (v13 == -1)
  {
    v23 = v14;
    v24 = 0;
    v13 = *(_DWORD *)(a1 + 232);
    v25 = v13;
    do
    {
      v26 = *((_BYTE *)this + v24);
      if (v25 == *(_DWORD *)(a1 + 236))
      {
        DgnPrimArray<char>::reallocElts(a1 + 224, 1, 1);
        v25 = *(_DWORD *)(a1 + 232);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 224) + v25) = v26;
      v25 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v25;
      ++v24;
    }
    while (v24 <= v22);
    v14 = v23;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * FreeId) = v13;
  *(_BYTE *)(*(_QWORD *)(a1 + 104) + FreeId) = v11;
  v50 = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * FreeId) = v14;
  *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * FreeId) = *(_DWORD *)(a8 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * FreeId) = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(a8 + 8))
  {
    v27 = 0;
    v28 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 60);
    do
    {
      v29 = *(unsigned __int16 *)(*(_QWORD *)a8 + 2 * v27);
      if (v29 == v28)
      {
        --*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * FreeId);
        *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * ((*(_DWORD *)(a1 + 80) - 1) >> 5)) |= 1 << (*(_BYTE *)(a1 + 80) - 1);
      }
      else
      {
        v30 = *(_DWORD *)(a1 + 80);
        if (v30 == *(_DWORD *)(a1 + 84))
        {
          DgnPrimArray<short>::reallocElts(a1 + 72, 1, 1);
          v30 = *(_DWORD *)(a1 + 80);
        }
        *(_WORD *)(*(_QWORD *)(a1 + 72) + 2 * v30) = v29;
        *(_DWORD *)(a1 + 80) = v30 + 1;
        BitArray::add((BitArray *)(a1 + 88), 0);
      }
      ++v27;
    }
    while (v27 < *(unsigned int *)(a8 + 8));
  }
  WordList::setEndPhonesInfo((_QWORD *)a1, FreeId);
  if ((v49 & 1) != 0)
  {
    v36 = v50;
    if ((_DWORD)FreeId == v50)
      *(_DWORD *)(*(_QWORD *)(a1 + 624) + 4 * (v50 >> 5)) &= ~(1 << v50);
    v37 = *(_QWORD *)(a1 + 640);
    v38 = FreeId >> 5;
    v39 = *(_DWORD *)(v37 + 4 * (FreeId >> 5)) & ~(1 << FreeId);
  }
  else
  {
    v36 = v50;
    if ((_DWORD)FreeId == v50)
      *(_DWORD *)(*(_QWORD *)(a1 + 624) + 4 * (v50 >> 5)) |= 1 << v50;
    v37 = *(_QWORD *)(a1 + 640);
    v38 = FreeId >> 5;
    v39 = *(_DWORD *)(v37 + 4 * (FreeId >> 5)) | (1 << FreeId);
  }
  *(_DWORD *)(v37 + 4 * v38) = v39;
  v40 = *(_DWORD *)(a1 + 552);
  if (v40 && (_DWORD)FreeId == v36)
    BitArray::setBitsInRange((_QWORD *)(a1 + 576), (const BitArray *)(a1 + 560), v40 * v36, v40 * v36 + v40);
  if (v11 == 1)
    ++*(_DWORD *)(a1 + 384);
  if (v49)
  {
    v41 = *(unsigned __int8 *)(a1 + 419);
    if (*(_BYTE *)(a1 + 421) && (_DWORD)FreeId != v36)
    {
      if (*(_DWORD *)(a1 + 392) < 2u)
        v41 = 0;
      else
        v41 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 424) + v36);
    }
    v42 = *(unsigned __int8 *)(a1 + 420);
    if (*(_BYTE *)(a1 + 422) && (_DWORD)FreeId != v36)
    {
      if (*(_DWORD *)(a1 + 396) < 2u)
        v42 = 0;
      else
        v42 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 440) + v36);
    }
    WordList::setPronPredecessorSeedCategory((WordList *)a1, FreeId, v41, v31, v32, v33, v34, v35);
    WordList::setPronSuccessorSeedCategory((WordList *)a1, FreeId, v42, v43, v44, v45, v46, v47);
    if (a10)
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::add(a1 + 272, FreeId);
    if (a9)
      WordIdPronCollArray::add((WordIdPronCollArray *)(a1 + 352), FreeId);
  }
  *(_DWORD *)(a1 + 376) ^= WordList::computeWordIdNameChecksum((WordList *)a1, FreeId);
  *(_DWORD *)(a1 + 380) ^= WordList::computeWordIdPronChecksum((WordList *)a1, FreeId);
  return FreeId;
}

void WordList::setPronPredecessorSeedCategory(WordList *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = *((_DWORD *)this + 98);
  if (v11 < a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 4794, (uint64_t)"word/wordlist", 64, (uint64_t)"%u %u", a7, a8, a3);
    v11 = *((_DWORD *)this + 98);
  }
  if (v11 >= 2)
    *(_BYTE *)(*((_QWORD *)this + 53) + a2) = v8;
}

void WordList::setPronSuccessorSeedCategory(WordList *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = *((_DWORD *)this + 99);
  if (v11 < a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 4814, (uint64_t)"word/wordlist", 65, (uint64_t)"%u %u", a7, a8, a3);
    v11 = *((_DWORD *)this + 99);
  }
  if (v11 >= 2)
    *(_BYTE *)(*((_QWORD *)this + 55) + a2) = v8;
}

uint64_t WordList::setupWordIdsForWordListLoad(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _DWORD v11[2];
  void *v12;

  v1 = *(unsigned int *)(this + 388);
  if ((_DWORD)v1)
  {
    v2 = this;
    v11[0] = 0;
    v12 = 0;
    v11[1] = realloc_array(0, &v12, 4 * v1, 0, 0, 1) >> 2;
    v10 = v12;
    if (*(_DWORD *)(v2 + 388))
    {
      v3 = 0;
      while (!*(_BYTE *)(*(_QWORD *)(v2 + 104) + v3))
      {
        v6 = *(unsigned int *)(v2 + 248);
        v4 = (void **)(v2 + 240);
        v5 = (_DWORD *)(v2 + 248);
        if (v6 == *(_DWORD *)(v2 + 252))
        {
          DgnPrimArray<unsigned int>::reallocElts(v2 + 240, 1, 1);
          v5 = (_DWORD *)(v2 + 248);
          v4 = (void **)(v2 + 240);
          goto LABEL_8;
        }
LABEL_9:
        *((_DWORD *)*v4 + v6) = v3;
        ++*v5;
        if (++v3 >= (unint64_t)*(unsigned int *)(v2 + 388))
          goto LABEL_10;
      }
      v4 = &v10;
      v5 = v11;
LABEL_8:
      v6 = *v5;
      goto LABEL_9;
    }
LABEL_10:
    DgnCollArray<unsigned int,WordList>::addArray(v2 + 272, (uint64_t)&v10);
    if (*(_DWORD *)(v2 + 388))
    {
      v7 = 0;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 104) + v7)
          && v7 != WordList::lookupWord((WordList *)v2, (const char *)(*(_QWORD *)(v2 + 224)+ *(unsigned int *)(*(_QWORD *)(v2 + 200) + 4 * v7)))&& *(_BYTE *)(*(_QWORD *)(v2 + 104) + v7) == 1)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2768, (uint64_t)"word/wordlist", 3, (uint64_t)"%.500s", v8, v9, *(_QWORD *)(v2 + 224) + *(_BYTE *)(*(_QWORD *)(v2 + 200) + 4 * v7));
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v2 + 388));
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
  }
  return this;
}

void sub_20992DC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::lookupWord(WordList *this, const char *a2)
{
  uint64_t v2;
  char *v3;
  unsigned int Equal;
  _QWORD v6[3];
  __int16 v7;
  char v8;

  v2 = *(_QWORD *)this;
  v6[0] = a2;
  v6[1] = this;
  v6[2] = v2;
  v7 = -2;
  v8 = 0;
  if (*((_BYTE *)this + 272) && *((__int16 *)this + 137) == -2)
    v3 = (char *)this + 280;
  else
    v3 = *(char **)(*((_QWORD *)this + 37) + 524272);
  Equal = DgnPrimArray<unsigned int>::searchFirstEqual(v3, 0, *((_DWORD *)v3 + 2), (uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (Equal == -1)
    return 0xFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)v3 + 4 * Equal);
}

uint64_t WordList::setColls(uint64_t a1, uint64_t a2)
{
  return DgnCollArray<unsigned int,WordList>::setColls(a1 + 272, a2);
}

unint64_t copyBadPredecessorSeedCategoryArray(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  void *v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = v4;
  if (*(_DWORD *)(a2 + 12) < v4)
  {
    v7 = 0;
    result = realloc_array(*(_QWORD **)a2, &v7, v4, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    *(_DWORD *)(a2 + 12) = result;
    *(_QWORD *)a2 = v7;
    v5 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(a2 + 8) = v4;
  if (v5)
  {
    v6 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v6) = *(_BYTE *)(*(_QWORD *)v3 + v6);
      ++v6;
    }
    while (v6 < *(unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WordList::loadBinary(WordList *this, DFile *a2, DFileChecksums *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  DgnStream *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t CurrentSubDirComponents;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  char *v43;
  PrefiltererWordIdPronCollArray *v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned int *v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  uint64_t v55;

  v55 = 0;
  v6 = OpenAndReadMrecHeader((uint64_t)a2, 0x2Fu, 1, "MRWORD!?", (_DWORD *)&v55 + 1, &v55);
  v9 = (DgnStream *)v6;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 34) = 0;
  v10 = v55;
  switch(v55)
  {
    case 0x1300000025:
      v11 = 0;
      v12 = 0;
      *(_BYTE *)(v6 + 32) = 1;
      v45 = 1;
      *(_BYTE *)(v6 + 34) = 1;
      v13 = 19;
LABEL_5:
      v14 = 1;
      goto LABEL_6;
    case 0x1400000026:
      v11 = 0;
      v12 = 0;
      *(_BYTE *)(v6 + 32) = 1;
      v45 = 1;
      *(_BYTE *)(v6 + 34) = 1;
      v13 = 20;
      goto LABEL_5;
    case 0x1400000027:
      v45 = 0;
      v11 = 0;
      v12 = 0;
      v14 = 1;
      *(_BYTE *)(v6 + 32) = 1;
      *(_BYTE *)(v6 + 34) = 1;
      v13 = 20;
      goto LABEL_6;
    case 0x1600000028:
      v45 = 0;
      v14 = 0;
      v11 = 0;
      v12 = 0;
      *(_BYTE *)(v6 + 32) = 1;
      *(_BYTE *)(v6 + 34) = 1;
LABEL_57:
      v13 = 22;
      goto LABEL_6;
    case 0x1600000029:
      v45 = 0;
      v14 = 0;
      v11 = 0;
      v12 = 0;
      goto LABEL_57;
    case 0x160000002ALL:
      v45 = 0;
      v14 = 0;
      v12 = 0;
      v11 = 1;
      goto LABEL_57;
  }
  if (*((_DWORD *)a2 + 6))
    v43 = (char *)*((_QWORD *)a2 + 2);
  else
    v43 = (char *)&unk_209A7AB86;
  MrecHeaderCheckVersions(v43, "MRWORD!?", HIDWORD(v55), v55, 0x18u, 0x2Bu);
  v45 = 0;
  v14 = 0;
  v10 = v55;
  v13 = HIDWORD(v55);
  v11 = 1;
  v12 = 1;
LABEL_6:
  MrecHeaderCheckLatestVersionIfShared(a2, "MRWORD!?", v13, v10, 24, 43, v7, v8);
  v54[0] = 0;
  v54[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  *(_QWORD *)v52 = 0;
  readObject<unsigned short>(v9, (uint64_t)this + 32, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 48, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 72, v52);
  readObject(v9, (WordList *)((char *)this + 88), v52);
  readObject<unsigned char>(v9, (uint64_t)this + 104, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 120, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 136, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 200, v52);
  readObject<char>(v9, (uint64_t)this + 224, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 240, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 256, v52);
  DgnCollArray<unsigned int,WordList>::readObject((uint64_t)this + 272, v9, v52);
  v44 = (WordList *)((char *)this + 352);
  PrefiltererWordIdPronCollArray::readObject((WordList *)((char *)this + 352), v9, v52);
  if (v11)
  {
    readObject((uint64_t)v9, (_DWORD *)this + 94, v52);
    readObject((uint64_t)v9, (_DWORD *)this + 95, v52);
  }
  readObject((uint64_t)v9, (_DWORD *)this + 96, v52);
  v48 = (unsigned int *)((char *)this + 388);
  readObject((uint64_t)v9, (_DWORD *)this + 97, v52);
  readObject((uint64_t)v9, (_DWORD *)this + 98, v52);
  readObject((uint64_t)v9, (_DWORD *)this + 99, v52);
  readObject<DgnPrimArray<BOOL>>(v9, (uint64_t)this + 400, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 416, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 417, v52);
  readObject((uint64_t)v9, (BOOL *)this + 418, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 419, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 420, v52);
  readObject((uint64_t)v9, (BOOL *)this + 421, v52);
  readObject((uint64_t)v9, (BOOL *)this + 422, v52);
  if (v14)
  {
    readObject<BadPredecessorSeedCategory>((uint64_t)v9, (uint64_t)v54, v52);
    readObject<BadPredecessorSeedCategory>((uint64_t)v9, (uint64_t)v53, v52);
  }
  else
  {
    readObject<unsigned char>(v9, (uint64_t)this + 424, v52);
    readObject<unsigned char>(v9, (uint64_t)this + 440, v52);
  }
  readObject(v9, (WordList *)((char *)this + 624), v52);
  readObject(v9, (WordList *)((char *)this + 640), v52);
  if (v12)
  {
    readObject((uint64_t)v9, (_DWORD *)this + 114, v52);
    v15 = (unsigned int *)((char *)this + 460);
  }
  else
  {
    v15 = &v52[1];
  }
  readObject((uint64_t)v9, v15, v52);
  readObject(v9, (WordList *)((char *)this + 464), v52);
  readObject(v9, (WordList *)((char *)this + 480), v52);
  readObject(v9, (WordList *)((char *)this + 496), v52);
  readObject(v9, (WordList *)((char *)this + 576), v52);
  readObject(v9, (WordList *)((char *)this + 512), v52);
  if (v14)
  {
    copyBadPredecessorSeedCategoryArray((unint64_t)v54, (uint64_t)this + 424);
    copyBadPredecessorSeedCategoryArray((unint64_t)v53, (uint64_t)this + 440);
  }
  if ((v12 & 1) == 0)
  {
    v16 = v52[1];
    *((_DWORD *)this + 114) = v52[1];
    *((_DWORD *)this + 115) = v16;
  }
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 3), a2, v9, v52, 0);
  readObjectChecksumAndVerify(v9, v52[0]);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Fu, v52[0]);
  (**(void (***)(DgnStream *))v9)(v9);
  MemChunkFree(v9, 0);
  v18 = *(_QWORD *)this;
  *((_QWORD *)this + 41) = WordIdCollSearchCmpFromWordId;
  *((_QWORD *)this + 42) = this;
  *((_QWORD *)this + 43) = v18;
  v50 = 0;
  v51 = 0;
  splitTagsString((uint64_t)this + 464, (uint64_t)&v50);
  v19 = v51;
  *((_DWORD *)this + 138) = v51;
  if (v19)
    tagStringToTagBits((uint64_t)this + 496, (unsigned int *)&v50, (WordList *)((char *)this + 560));
  v47 = (_QWORD *)((char *)this + 592);
  v20 = *((_DWORD *)this + 97);
  v21 = *((_DWORD *)this + 151);
  v22 = v20;
  if (v20 > v21)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v47, v20 - v21, 0);
    v22 = *v48;
  }
  *((_DWORD *)this + 150) = v20;
  v46 = (_QWORD *)((char *)this + 608);
  v23 = *((_DWORD *)this + 155);
  v24 = v22;
  if (v22 > v23)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v46, v22 - v23, 0);
    v24 = *v48;
  }
  *((_DWORD *)this + 154) = v22;
  v25 = *((_DWORD *)this + 41);
  v26 = v24;
  if (v24 > v25)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, v24 - v25, 0);
    v26 = *v48;
  }
  *((_DWORD *)this + 40) = v24;
  v27 = *((_DWORD *)this + 45);
  v28 = v26;
  if (v26 > v27)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, v26 - v27, 0);
    v28 = *v48;
  }
  *((_DWORD *)this + 44) = v26;
  v29 = *((_DWORD *)this + 49);
  v30 = v28;
  v31 = v28 >= v29;
  v32 = v28 - v29;
  if ((_DWORD)v32 != 0 && v31)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, v32, 0);
    v30 = *v48;
  }
  *((_DWORD *)this + 48) = v28;
  BitArray::BitArray((BitArray *)v49, v30);
  v35 = *((unsigned int *)this + 62);
  if ((int)v35 >= 1)
  {
    v36 = *((_QWORD *)this + 30);
    v37 = v49[0];
    v38 = v35 + 1;
    do
    {
      v39 = *(unsigned int *)(v36 + 4 * (v38 - 2));
      *(_DWORD *)(v37 + ((v39 >> 3) & 0x1FFFFFFC)) |= 1 << v39;
      --v38;
    }
    while (v38 > 1);
  }
  if (*v48)
  {
    v40 = 0;
    do
    {
      *(_WORD *)(*((_QWORD *)this + 19) + 2 * v40) = 0;
      *(_WORD *)(*((_QWORD *)this + 21) + 2 * v40) = 0;
      *(_WORD *)(*((_QWORD *)this + 23) + 2 * v40) = 0;
      v41 = *(_DWORD *)(v49[0] + 4 * (v40 >> 5)) & (1 << v40);
      if (*(_BYTE *)(*((_QWORD *)this + 13) + v40))
      {
        if (v41)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1850, (uint64_t)"word/wordlist", 27, (uint64_t)"%u", v33, v34, v40);
        WordList::setEndPhonesInfo(this, v40);
      }
      else
      {
        if (!v41)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1855, (uint64_t)"word/wordlist", 28, (uint64_t)"%u", v33, v34, v40);
        *(_WORD *)(*v47 + 2 * v40) = -1;
        *(_WORD *)(*v46 + 2 * v40) = -1;
      }
      ++v40;
    }
    while (v40 < *v48);
  }
  if ((v45 & 1) != 0)
  {
    PrefiltererWordIdPronCollArray::removeAll((uint64_t)v44);
    WordIdPronCollArray::addArray((uint64_t)v44, (uint64_t)this + 280);
  }
  if ((v11 & 1) == 0)
    WordList::computeWordChecksums((uLong)this);
  BitArray::~BitArray((BitArray *)v49);
  DgnArray<DgnString>::releaseAll((uint64_t)&v50);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v53);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v54);
}

void sub_20992E564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray(v11 - 104);
  _Unwind_Resume(a1);
}

unint64_t readObject<DgnPrimArray<BOOL>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject((uint64_t)a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<BOOL>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t readObject<BadPredecessorSeedCategory>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  int v8;
  unint64_t v9;
  _DWORD v10[3];

  v10[0] = 0;
  result = readObject(a1, v10, a3);
  v7 = v10[0];
  if (*(_DWORD *)(a2 + 12) >= v10[0])
  {
    *(_DWORD *)(a2 + 8) = v10[0];
    if (!v7)
      return result;
  }
  else
  {
    *(_QWORD *)&v10[1] = 0;
    v8 = realloc_array(*(_QWORD **)a2, (void **)&v10[1], v10[0], *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    *(_QWORD *)a2 = *(_QWORD *)&v10[1];
    *(_DWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 12) = v8;
  }
  v9 = 0;
  do
    result = readObject(a1, (unsigned __int8 *)(*(_QWORD *)a2 + v9++), a3);
  while (v9 < *(unsigned int *)(a2 + 8));
  return result;
}

_QWORD *WordList::setEndPhonesInfo(_QWORD *this, unsigned int a2)
{
  _WORD *v2;
  __int16 v3;
  _QWORD *v4;

  if (*(_WORD *)(this[4] + 2 * a2))
  {
    v2 = (_WORD *)(this[9] + 2 * *(unsigned int *)(this[6] + 4 * a2));
    v3 = v2[*(unsigned __int16 *)(this[4] + 2 * a2) - 1];
    *(_WORD *)(this[74] + 2 * a2) = *v2;
    v4 = this + 76;
  }
  else
  {
    v3 = *(_WORD *)(this[2] + 58);
    *(_WORD *)(this[76] + 2 * a2) = v3;
    v4 = this + 74;
  }
  *(_WORD *)(*v4 + 2 * a2) = v3;
  return this;
}

uint64_t WordList::willLoadWordListInTextFormat(WordList *this, DFile *a2)
{
  return DFile::subFileExists((uint64_t)this, 0x62u);
}

uint64_t WordList::loadWordList(WordList *this, DFile *a2, DFileChecksums *a3)
{
  if (DFile::subFileExists((uint64_t)a2, 0x62u))
    WordList::loadTwl(this, a2);
  else
    WordList::loadBinary(this, a2, a3);
  WordList::compact((uint64_t)this);
  return TagBitsAndStrings::compact((WordList *)((char *)this + 512));
}

uint64_t WordList::compact(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _WORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  void *v44;

  v1 = this;
  v2 = *(unsigned int *)(this + 388);
  if (!(_DWORD)v2)
  {
    if (!*(_DWORD *)(this + 80))
    {
      v5 = 0;
      goto LABEL_31;
    }
    v5 = 0;
    v4 = 0;
    v42 = 0;
    v43 = 0;
    goto LABEL_11;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(this + 104);
  do
  {
    if (*(_BYTE *)(v6 + v3))
    {
      v4 += *(unsigned __int16 *)(*(_QWORD *)(v1 + 32) + 2 * v3);
      if (v3 == *(_DWORD *)(*(_QWORD *)(v1 + 256) + 4 * v3))
      {
        this = strlen((const char *)(*(_QWORD *)(v1 + 224) + *(unsigned int *)(*(_QWORD *)(v1 + 200) + 4 * v3)));
        v5 += this + 1;
      }
    }
    ++v3;
  }
  while (v2 != v3);
  if (*(_DWORD *)(v1 + 80) != v4)
  {
    v42 = 0;
    v43 = 0;
    v40 = 0;
    HIDWORD(v43) = realloc_array(0, &v40, 4 * v2, 0, 0, 1) >> 2;
    v42 = v40;
LABEL_11:
    v40 = 0;
    v41 = 0;
    DgnString::DgnString((DgnString *)&v38);
    if (HIDWORD(v41) < v4)
    {
      v44 = 0;
      HIDWORD(v41) = realloc_array(v40, &v44, 2 * v4, 2 * v41, 2 * v41, 1) >> 1;
      v40 = v44;
    }
    BitArray::preAllocate((BitArray *)&v38, v4);
    if (*(_DWORD *)(v1 + 388))
    {
      v7 = 0;
      v8 = *(_QWORD *)(v1 + 104);
      v9 = v42;
      v10 = v40;
      do
      {
        if (*(_BYTE *)(v8 + v7))
        {
          v9[v43] = v41;
          LODWORD(v43) = v43 + 1;
          v11 = *(unsigned __int16 *)(*(_QWORD *)(v1 + 32) + 2 * v7);
          if (*(_WORD *)(*(_QWORD *)(v1 + 32) + 2 * v7))
          {
            v12 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * v7);
            v13 = *(_QWORD *)(v1 + 72);
            v14 = *(_QWORD *)(v1 + 88);
            v15 = v38;
            do
            {
              v16 = v41;
              v10[v41] = *(_WORD *)(v13 + 2 * v12);
              LODWORD(v41) = v16 + 1;
              v17 = *(_DWORD *)(v14 + 4 * (v12 >> 5));
              v18 = v39++;
              v19 = 1 << v18;
              if (((v17 >> v12) & 1) != 0)
                *(_DWORD *)((char *)v15 + ((v18 >> 3) & 0x1FFFFFFC)) |= v19;
              else
                v15[v18 >> 5] &= ~v19;
              ++v12;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          v9[v43] = 0;
          LODWORD(v43) = v43 + 1;
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v1 + 388));
    }
    v20 = *(_QWORD **)(v1 + 48);
    if (v20)
    {
      MemChunkFree(v20, 0);
      *(_QWORD *)(v1 + 48) = 0;
    }
    *(_QWORD *)(v1 + 56) = 0;
    DgnPrimArray<int>::copyArraySlice(v1 + 48, (uint64_t *)&v42, 0, v43);
    *(_DWORD *)(v1 + 64) = 0;
    v21 = *(_QWORD **)(v1 + 72);
    if (v21)
    {
      MemChunkFree(v21, 0);
      *(_QWORD *)(v1 + 72) = 0;
    }
    *(_QWORD *)(v1 + 80) = 0;
    DgnPrimArray<unsigned short>::copyArraySlice(v1 + 72, (uint64_t *)&v40, 0, v41);
    BitArray::releaseAll(v1 + 88);
    BitArray::operator=((int **)(v1 + 88), (uint64_t)&v38);
    BitArray::~BitArray((BitArray *)&v38);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
  }
LABEL_31:
  if (*(_DWORD *)(v1 + 232) != v5)
  {
    v42 = 0;
    v43 = 0;
    v22 = *(unsigned int *)(v1 + 388);
    if ((_DWORD)v22)
    {
      v40 = 0;
      HIDWORD(v43) = realloc_array(0, &v40, 4 * v22, 0, 0, 1) >> 2;
      v42 = v40;
    }
    v40 = 0;
    v41 = 0;
    if (v5)
    {
      v38 = 0;
      HIDWORD(v41) = realloc_array(0, &v38, v5, 0, 0, 1);
      v40 = v38;
    }
    if (*(_DWORD *)(v1 + 388))
    {
      v23 = 0;
      while (1)
      {
        if (*(_BYTE *)(*(_QWORD *)(v1 + 104) + v23))
        {
          v24 = v42;
          v25 = v43;
          if (v23 == *(_DWORD *)(*(_QWORD *)(v1 + 256) + 4 * v23))
          {
            v42[v43] = v41;
            LODWORD(v43) = v43 + 1;
            v26 = (_BYTE *)(*(_QWORD *)(v1 + 224) + *(unsigned int *)(*(_QWORD *)(v1 + 200) + 4 * v23));
            LOBYTE(v27) = *v26;
            v28 = v41;
            if (*v26)
            {
              v29 = 1;
              do
              {
                *((_BYTE *)v40 + v28) = v27;
                v28 = v41 + 1;
                LODWORD(v41) = v41 + 1;
                v27 = v26[v29++];
              }
              while (v27);
            }
            *((_BYTE *)v40 + v28) = 0;
            v30 = &v41;
            goto LABEL_46;
          }
        }
        else
        {
          v24 = v42;
          v25 = v43;
        }
        v24[v25] = 0;
        v30 = &v43;
LABEL_46:
        ++*(_DWORD *)v30;
        ++v23;
        v31 = *(unsigned int *)(v1 + 388);
        if (v23 >= v31)
        {
          if (*(_DWORD *)(v1 + 388))
          {
            v32 = 0;
            v33 = *(_QWORD *)(v1 + 104);
            v34 = v42;
            do
            {
              if (*(_BYTE *)(v33 + v32))
              {
                v35 = *(unsigned int *)(*(_QWORD *)(v1 + 256) + 4 * v32);
                if (v32 != v35)
                {
                  v34[v32] = v34[v35];
                  v31 = *(unsigned int *)(v1 + 388);
                }
              }
              ++v32;
            }
            while (v32 < v31);
          }
          break;
        }
      }
    }
    v36 = *(_QWORD **)(v1 + 200);
    if (v36)
    {
      MemChunkFree(v36, 0);
      *(_QWORD *)(v1 + 200) = 0;
    }
    *(_QWORD *)(v1 + 208) = 0;
    DgnPrimArray<int>::copyArraySlice(v1 + 200, (uint64_t *)&v42, 0, v43);
    *(_DWORD *)(v1 + 216) = 0;
    v37 = *(_QWORD **)(v1 + 224);
    if (v37)
    {
      MemChunkFree(v37, 0);
      *(_QWORD *)(v1 + 224) = 0;
    }
    *(_QWORD *)(v1 + 232) = 0;
    DgnPrimArray<unsigned char>::copyArraySlice(v1 + 224, &v40, 0, v41);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
  }
  return this;
}

void sub_20992ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordList::saveTwl(WordList *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char *CollationName;
  const char *v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t i;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  const char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t j;
  char *v70;
  char *v71;
  EnvMgr *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int ItemEnvId;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t NameIds;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t Values;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  char *Name;
  char *v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v120);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v120, (uint64_t)a2, 0x62u, a3);
  v118 = 0;
  v119 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v120, sTWL_Versions, (uint64_t)&v118, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v120, "TextWordList", (_QWORD *)(v118 + 8 * (v119 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfWords", *((unsigned int *)this + 96));
  v11 = *((unsigned int *)this + 90);
  if ((_DWORD)v11)
  {
    v12 = 0;
    while (!*(_WORD *)(*((_QWORD *)this + 4) + 2 * *(unsigned int *)(*((_QWORD *)this + 44) + 4 * v12)))
    {
      if (v11 == ++v12)
      {
        LODWORD(v12) = *((_DWORD *)this + 90);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronlessWords", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronIds", *((unsigned int *)this + 72));
  v13 = *((_DWORD *)this + 97);
  if (v13 >= 1)
  {
    v14 = *((unsigned int *)this + 97);
    while (1)
    {
      v15 = v14 - 1;
      if (v13 > (v14 - 1))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 13) + v15))
          break;
      }
      --v14;
      if ((unint64_t)(v15 + 1) <= 1)
      {
        v13 = 0;
        goto LABEL_17;
      }
    }
    v13 = v14;
LABEL_17:
    v16 = *((_DWORD *)this + 72);
    goto LABEL_18;
  }
  v16 = *((_DWORD *)this + 72);
  if (v13 != -1)
  {
LABEL_18:
    v17 = (v13 - v16);
    goto LABEL_19;
  }
  if (v16)
  {
    v13 = -1;
    goto LABEL_18;
  }
  v17 = 0;
LABEL_19:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfFreePronIds", v17);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronPredecessorSeedCategories", *((unsigned int *)this + 98));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronSuccessorSeedCategories", *((unsigned int *)this + 99));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "StartOfUtterancePredecessorSeedCategory", *((unsigned __int8 *)this + 416));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "EndOfUtteranceSuccessorSeedCategory", *((unsigned __int8 *)this + 417));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "RootDeterminesPronPredecessorSeedCategory", *((unsigned __int8 *)this + 421));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "RootDeterminesPronSuccessorSeedCategory", *((unsigned __int8 *)this + 422));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "DefaultClientPronPredecessorSeedCategory", *((unsigned __int8 *)this + 419));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "DefaultClientPronSuccessorSeedCategory", *((unsigned __int8 *)this + 420));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v120, "RequiredWordTagsVersion", *((_DWORD *)this + 114));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v120, "OptionalWordTagsVersion", *((_DWORD *)this + 115));
  if (*((_DWORD *)this + 118))
    v18 = (const char *)*((_QWORD *)this + 58);
  else
    v18 = (const char *)&unk_209A7AB86;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "RequiredTags", v18);
  if (*((_DWORD *)this + 122))
    v19 = (const char *)*((_QWORD *)this + 60);
  else
    v19 = (const char *)&unk_209A7AB86;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "OptionalTags", v19);
  v20 = (char *)&unk_209A7AB86;
  if (*((_DWORD *)this + 126))
    v21 = (const char *)*((_QWORD *)this + 62);
  else
    v21 = (const char *)&unk_209A7AB86;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "NewWordTag", v21);
  DgnString::DgnString((DgnString *)&v116);
  if (*((_DWORD *)this + 80))
  {
    v27 = 0;
    do
    {
      if (v27)
        DgnString::operator+=((DgnString *)&v116, ",");
      v28 = *(unsigned __int16 *)(*((_QWORD *)this + 39) + 2 * v27);
      CollationName = "_IDENTITY";
      if (v28 != 65534)
        CollationName = (char *)CollMgr::getCollationName(*(CollMgr **)this, v28, (uint64_t)"_IDENTITY", v22, v23, v24, v25, v26);
      DgnString::operator+=((DgnString *)&v116, CollationName);
      ++v27;
    }
    while (v27 < *((unsigned int *)this + 80));
  }
  if ((_DWORD)v117)
    v30 = v116;
  else
    v30 = (const char *)&unk_209A7AB86;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "AllowedCollations", v30);
  DgnString::~DgnString((DgnString *)&v116);
  v116 = 0;
  v117 = 0;
  v114 = 0;
  v115 = 0;
  DgnString::DgnString((DgnString *)&v112, "Type");
  v31 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v31 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v31], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v32 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v32 = v115;
  }
  *(_DWORD *)(v114 + 4 * v32) = 0;
  LODWORD(v115) = v32 + 1;
  v103 = v117;
  DgnString::DgnString((DgnString *)&v112, "WordName");
  v33 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v33 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v33], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v34 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v34 = v115;
  }
  *(_DWORD *)(v114 + 4 * v34) = 0;
  LODWORD(v115) = v34 + 1;
  v102 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue1");
  v35 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v35 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v35], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v36 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v36 = v115;
  }
  *(_DWORD *)(v114 + 4 * v36) = 3;
  LODWORD(v115) = v36 + 1;
  v101 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue2");
  v37 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v37 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v37], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v38 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v38 = v115;
  }
  *(_DWORD *)(v114 + 4 * v38) = 3;
  LODWORD(v115) = v38 + 1;
  v100 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue3");
  v39 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v39 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v39], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v40 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v40 = v115;
  }
  *(_DWORD *)(v114 + 4 * v40) = 3;
  LODWORD(v115) = v40 + 1;
  v99 = v117;
  DgnString::DgnString((DgnString *)&v112, "StrValue1");
  v41 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v41 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v41], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v42 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v42 = v115;
  }
  *(_DWORD *)(v114 + 4 * v42) = 0;
  LODWORD(v115) = v42 + 1;
  v98 = v117;
  DgnString::DgnString((DgnString *)&v112, "StrValue2");
  v43 = v117;
  if ((_DWORD)v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    v43 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v43], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  v44 = v115;
  if ((_DWORD)v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    v44 = v115;
  }
  *(_DWORD *)(v114 + 4 * v44) = 0;
  LODWORD(v115) = v44 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v120, (uint64_t)&v114, (uint64_t)&v116);
  v112 = 0;
  v113 = 0;
  v110 = 0;
  v111 = 0;
  splitTagsString((uint64_t)this + 464, (uint64_t)&v112);
  splitTagsString((uint64_t)this + 480, (uint64_t)&v110);
  v45 = v113;
  v46 = v111;
  v47 = *((unsigned int *)this + 98);
  if ((_DWORD)v47)
  {
    v48 = 0;
    LODWORD(v49) = *((_DWORD *)this + 99);
    do
    {
      if ((_DWORD)v49)
      {
        v50 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "SeedTable");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)&unk_209A7AB86);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, v48);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, v50);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 50) + 16 * v48) + v50));
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, (char *)&unk_209A7AB86);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, (char *)&unk_209A7AB86);
          DgnTextFileWriter::writeNextLine(v120);
          ++v50;
          v49 = *((unsigned int *)this + 99);
        }
        while (v50 < v49);
        v47 = *((unsigned int *)this + 98);
      }
      ++v48;
    }
    while (v48 < v47);
  }
  DgnString::DgnString((DgnString *)&v108);
  v96 = v46;
  v106 = 0;
  v107 = 0;
  WordList::getAllByRootId((uint64_t)this, (uint64_t)&v106);
  v51 = *((unsigned int *)this + 97);
  v52 = v45;
  if ((_DWORD)v51)
  {
    for (i = 0; i < v51; ++i)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 13) + i))
      {
        if (i == *(_DWORD *)(*((_QWORD *)this + 32) + 4 * i))
        {
          v54 = &v106[16 * i];
          if (*((_DWORD *)v54 + 2))
          {
            v55 = 0;
            do
            {
              v56 = *(unsigned int *)(*(_QWORD *)v54 + 4 * v55);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "Pron");
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * v56)));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, v56);
              if (*((_DWORD *)this + 98) < 2u)
                v57 = 0;
              else
                v57 = *(unsigned __int8 *)(*((_QWORD *)this + 53) + v56);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, v57);
              if (*((_DWORD *)this + 99) < 2u)
                v58 = 0;
              else
                v58 = *(unsigned __int8 *)(*((_QWORD *)this + 55) + v56);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, v58);
              DgnString::DgnString((DgnString *)&v104);
              if (((*(_DWORD *)(*((_QWORD *)this + 80) + ((v56 >> 3) & 0x1FFFFFFC)) >> v56) & 1) != 0)
                v59 = "F";
              else
                v59 = "U";
              DgnString::operator=((DgnString *)&v104, v59);
              if (v105)
                v60 = v104;
              else
                v60 = (char *)&unk_209A7AB86;
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v60);
              WordList::getHumanReadablePron(this, v56, (DgnString *)&v108);
              if ((_DWORD)v109)
                v61 = v108;
              else
                v61 = (char *)&unk_209A7AB86;
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v61);
              DgnTextFileWriter::writeNextLine(v120);
              DgnString::~DgnString((DgnString *)&v104);
              ++v55;
            }
            while (v55 < *((unsigned int *)v54 + 2));
            v51 = *((unsigned int *)this + 97);
            v52 = v45;
          }
        }
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v106);
  DgnString::~DgnString((DgnString *)&v108);
  DgnString::DgnString((DgnString *)&v108);
  DgnString::DgnString((DgnString *)&v106);
  v62 = *((unsigned int *)this + 97);
  if ((_DWORD)v62)
  {
    v63 = 0;
    v64 = 0;
    while (1)
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 13) + v64) || v64 != *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v64))
        goto LABEL_113;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "ReqTags");
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * v64)));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
      v65 = ((*(_DWORD *)(*((_QWORD *)this + 78) + 4 * (v64 >> 5)) >> v64) & 1) != 0 ? "F" : "U";
      DgnString::DgnString((DgnString *)&v104, v65);
      v66 = v105 ? v104 : (char *)&unk_209A7AB86;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v66);
      if (!v52)
        break;
      BitArray::getBitsFromRange((WordList *)((char *)this + 576), (BitArray *)&v106, v63, v52 + v63);
      tagBitsToTagString((uint64_t)&v106, &v112, (DgnString *)&v108);
      if (!(_DWORD)v109)
        goto LABEL_111;
      v67 = v108;
LABEL_112:
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v67);
      DgnTextFileWriter::writeNextLine(v120);
      DgnString::~DgnString((DgnString *)&v104);
      v62 = *((unsigned int *)this + 97);
LABEL_113:
      ++v64;
      v63 += v52;
      if (v64 >= v62)
        goto LABEL_114;
    }
    LODWORD(v109) = 0;
LABEL_111:
    v67 = (char *)&unk_209A7AB86;
    goto LABEL_112;
  }
LABEL_114:
  BitArray::~BitArray((BitArray *)&v106);
  DgnString::~DgnString((DgnString *)&v108);
  if (v96)
  {
    DgnString::DgnString((DgnString *)&v108);
    DgnString::DgnString((DgnString *)&v106);
    DgnString::DgnString((DgnString *)&v104);
    v68 = *((unsigned int *)this + 97);
    if ((_DWORD)v68)
    {
      for (j = 0; j < v68; ++j)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 13) + j)
          && j == *(_DWORD *)(*((_QWORD *)this + 32) + 4 * j)
          && j < *((unsigned int *)this + 132)
          && *(_DWORD *)(*((_QWORD *)this + 65) + 4 * j) != -1)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "OptTags");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * j)));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
          TagBitsAndStrings::getTagBits((WordList *)((char *)this + 512), j, (BitArray *)&v106);
          tagBitsToTagString((uint64_t)&v106, &v110, (DgnString *)&v108);
          if ((_DWORD)v109)
            v70 = v108;
          else
            v70 = (char *)&unk_209A7AB86;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v70);
          DgnString::operator=((DgnString *)&v104, (char *)(*((_QWORD *)this + 67)+ *(_DWORD *)(*((_QWORD *)this + 65) + 4 * j)+ ((*((_DWORD *)this + 129) + 7) >> 3)));
          if (v105)
            v71 = v104;
          else
            v71 = (char *)&unk_209A7AB86;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v71);
          DgnTextFileWriter::writeNextLine(v120);
          v68 = *((unsigned int *)this + 97);
        }
      }
    }
    DgnString::~DgnString((DgnString *)&v104);
    BitArray::~BitArray((BitArray *)&v106);
    DgnString::~DgnString((DgnString *)&v108);
  }
  v72 = (EnvMgr *)*((_QWORD *)this + 3);
  v108 = 0;
  v109 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v72, (uint64_t)&v108);
  DgnString::DgnString((DgnString *)&v106);
  if ((_DWORD)v109)
  {
    v73 = 0;
    do
    {
      v74 = *(unsigned int *)&v108[4 * v73];
      ItemEnvId = EnvMgr::getItemEnvId(v72, *(_DWORD *)&v108[4 * v73]);
      NameIds = EnvMgr::getNameIds(v72, ItemEnvId, v76, v77, v78, v79, v80, v81);
      v97 = v73;
      v83 = v20;
      Values = EnvMgr::getValues(v72, ItemEnvId, v84, v85, v86, v87, v88, v89);
      if (*(_DWORD *)(NameIds + 8))
      {
        v91 = (_QWORD *)Values;
        v92 = 0;
        v93 = 0;
        do
        {
          Name = (char *)EnvMgr::getName(v72, *(unsigned __int16 *)(*(_QWORD *)NameIds + 2 * v93));
          DgnTextFile::convertToEnvValueFormat(*v91 + v92, (DgnString *)&v106);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "Env");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * v74)));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, Name);
          if ((_DWORD)v107)
            v95 = v106;
          else
            v95 = v83;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v95);
          DgnTextFileWriter::writeNextLine(v120);
          ++v93;
          v92 += 16;
        }
        while (v93 < *(unsigned int *)(NameIds + 8));
      }
      v73 = v97 + 1;
      v20 = v83;
    }
    while (v97 + 1 < (unint64_t)v109);
  }
  DgnString::~DgnString((DgnString *)&v106);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v108);
  DgnArray<DgnString>::releaseAll((uint64_t)&v110);
  DgnArray<DgnString>::releaseAll((uint64_t)&v112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v114);
  DgnArray<DgnString>::releaseAll((uint64_t)&v116);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v118);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v120);
}

