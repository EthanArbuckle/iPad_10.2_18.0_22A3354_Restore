void sub_2099A1EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, MergedActive *a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SearchLMScorer *v20;

  SearchLMScorer::~SearchLMScorer(v20);
  DgnIArray<Utterance *>::~DgnIArray(v16 + 584);
  DgnIArray<Utterance *>::~DgnIArray(v16 + 568);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19);
  MergedActive::~MergedActive(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  _Unwind_Resume(a1);
}

void Recognizer::~Recognizer(Recognizer *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24C2135C0;
  DgnDelete<Active>(*((_QWORD *)this + 35));
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 37));
  DgnDelete<CWIDCrumbBank>(*((_QWORD *)this + 46));
  DgnDelete<Constraint>(*((Constraint **)this + 277));
  v2 = (_QWORD *)*((_QWORD *)this + 47);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 47));
    MemChunkFree(v2, 0);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 48);
  if (v3)
  {
    (*(void (**)(_QWORD))*v3)(*((_QWORD *)this + 48));
    MemChunkFree(v3, 0);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2224);
  SearchLMScorer::~SearchLMScorer((Recognizer *)((char *)this + 624));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 584);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 568);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536);
  MergedActive::~MergedActive((Recognizer *)((char *)this + 392));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
}

{
  Recognizer::~Recognizer(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t DgnDelete<Active>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnIArray<Utterance *>::~DgnIArray(result + 303240);
    HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV((uint64_t)(v1 + 37892));
    Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash((uint64_t)(v1 + 37878));
    ActiveWordMgr::~ActiveWordMgr((ActiveWordMgr *)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<CWIDCrumbBank>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Recognizer::makeRecognizer(char a1, int a2, __int16 a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;

  v19 = MemChunkAlloc(0x968uLL, 0);
  return Recognizer::Recognizer((uint64_t)v19, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void Recognizer::printSize(Recognizer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  Active *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  CWIDCrumbBank *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  RecogGermIterator *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  RecogGermIterator *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  Constraint *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  __int128 v458;
  char v459;
  int v460;
  __int16 v461;
  uint64_t v462;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1154, (DgnString *)&v457);
  if ((_DWORD)v458)
    v16 = (char *)v457;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v457);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (a3 + 1);
  v454 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1155, (DgnString *)&v457);
  if ((_DWORD)v458)
    v27 = (char *)v457;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &byte_209A88803, v22, v22, v27, 171, 171, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 171;
  *a5 += 171;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 12;
  else
    v28 = 16;
  v29 = *((unsigned int *)this + 58);
  v30 = *((_DWORD *)this + 59);
  if (v30 >= v29)
  {
    v31 = 0;
    if ((int)v29 > 0)
      v28 += 4 * (v29 - 1) + 4;
    v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    v31 = 4 * v29;
    v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1157, (DgnString *)&v457);
  if ((_DWORD)v458)
    v37 = (char *)v457;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &byte_209A88803, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 12;
  else
    v38 = 16;
  v39 = *((unsigned int *)this + 62);
  v40 = *((_DWORD *)this + 63);
  if (v40 >= v39)
  {
    v41 = 0;
    if ((int)v39 > 0)
      v38 += 4 * (v39 - 1) + 4;
    v42 = v38 + 4 * (v40 - v39);
  }
  else
  {
    v41 = 4 * v39;
    v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1159, (DgnString *)&v457);
  if ((_DWORD)v458)
    v47 = (char *)v457;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &byte_209A88803, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 4;
  else
    v48 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1160, (DgnString *)&v457);
  if ((_DWORD)v458)
    v53 = (char *)v457;
  else
    v53 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &byte_209A88803, v22, v22, v53, v48, v48, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v48;
  *a5 += v48;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v54 = 4;
  else
    v54 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1161, (DgnString *)&v457);
  if ((_DWORD)v458)
    v59 = (char *)v457;
  else
    v59 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &byte_209A88803, v22, v22, v59, v54, v54, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v54;
  *a5 += v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v60 = 4;
  else
    v60 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1162, (DgnString *)&v457);
  if ((_DWORD)v458)
    v65 = (char *)v457;
  else
    v65 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &byte_209A88803, v22, v22, v65, v60, v60, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v60;
  *a5 += v60;
  v66 = (Active *)*((_QWORD *)this + 35);
  if (v66)
  {
    v456 = 0;
    v457 = 0;
    v455 = 0;
    Active::printSize(v66, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v67 = 4;
  else
    v67 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1163, (DgnString *)&v457);
  if ((_DWORD)v458)
    v72 = (char *)v457;
  else
    v72 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &byte_209A88803, v22, v22, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v67;
  *a5 += v67;
  v73 = sizeObject((uint64_t)this + 288, 0);
  v74 = sizeObject((uint64_t)this + 288, 1);
  v75 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1164, (DgnString *)&v457);
  if ((_DWORD)v458)
    v80 = (char *)v457;
  else
    v80 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v21, &byte_209A88803, v22, v22, v80, v73, v74, v75);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v73;
  *a5 += v74;
  *a6 += v75;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v81 = 4;
  else
    v81 = 8;
  v82 = *((_QWORD *)this + 37);
  if (v82)
  {
    v83 = sizeObject(v82, 0) + v81;
    v84 = *((_QWORD *)this + 37);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v81 = 4;
    else
      v81 = 8;
    if (v84 && (v81 += sizeObject(v84, 1), (v85 = *((_QWORD *)this + 37)) != 0))
      v86 = sizeObject(v85, 3);
    else
      v86 = 0;
  }
  else
  {
    v86 = 0;
    v83 = v81;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1166, (DgnString *)&v457);
  if ((_DWORD)v458)
    v91 = (char *)v457;
  else
    v91 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v21, &byte_209A88803, v22, v22, v91, v83, v81, v86);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v83;
  *a5 += v81;
  *a6 += v86;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1167, (DgnString *)&v457);
  if ((_DWORD)v458)
    v96 = (char *)v457;
  else
    v96 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v21, &byte_209A88803, v22, v22, v96, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1169, (DgnString *)&v457);
  if ((_DWORD)v458)
    v101 = (char *)v457;
  else
    v101 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v21, &byte_209A88803, v22, v22, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1170, (DgnString *)&v457);
  if ((_DWORD)v458)
    v106 = (char *)v457;
  else
    v106 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v21, &byte_209A88803, v22, v22, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1172, (DgnString *)&v457);
  if ((_DWORD)v458)
    v111 = (char *)v457;
  else
    v111 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v21, &byte_209A88803, v22, v22, v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1174, (DgnString *)&v457);
  if ((_DWORD)v458)
    v116 = (char *)v457;
  else
    v116 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &byte_209A88803, v22, v22, v116, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1176, (DgnString *)&v457);
  if ((_DWORD)v458)
    v121 = (char *)v457;
  else
    v121 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v21, &byte_209A88803, v22, v22, v121, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1177, (DgnString *)&v457);
  if ((_DWORD)v458)
    v126 = (char *)v457;
  else
    v126 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &byte_209A88803, v22, v22, v126, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1179, (DgnString *)&v457);
  if ((_DWORD)v458)
    v131 = (char *)v457;
  else
    v131 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v21, &byte_209A88803, v22, v22, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1180, (DgnString *)&v457);
  if ((_DWORD)v458)
    v136 = (char *)v457;
  else
    v136 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v21, &byte_209A88803, v22, v22, v136, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1181, (DgnString *)&v457);
  if ((_DWORD)v458)
    v141 = (char *)v457;
  else
    v141 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &byte_209A88803, v22, v22, v141, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1183, (DgnString *)&v457);
  if ((_DWORD)v458)
    v146 = (char *)v457;
  else
    v146 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v21, &byte_209A88803, v22, v22, v146, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  v147 = (CWIDCrumbBank *)*((_QWORD *)this + 46);
  if (v147)
  {
    v456 = 0;
    v457 = 0;
    v455 = 0;
    CWIDCrumbBank::printSize(v147, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v148 = 4;
  else
    v148 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1195, (DgnString *)&v457);
  if ((_DWORD)v458)
    v153 = (char *)v457;
  else
    v153 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v21, &byte_209A88803, v22, v22, v153, v148, v148, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v148;
  *a5 += v148;
  v154 = (RecogGermIterator *)*((_QWORD *)this + 47);
  if (v154)
  {
    v456 = 0;
    v457 = 0;
    v455 = 0;
    RecogGermIterator::printSize(v154, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v155 = 4;
  else
    v155 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1196, (DgnString *)&v457);
  if ((_DWORD)v458)
    v160 = (char *)v457;
  else
    v160 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v156, v157, v158, v159, v21, &byte_209A88803, v22, v22, v160, v155, v155, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v155;
  *a5 += v155;
  v161 = (RecogGermIterator *)*((_QWORD *)this + 48);
  if (v161)
  {
    v456 = 0;
    v457 = 0;
    v455 = 0;
    RecogGermIterator::printSize(v161, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v162 = 4;
  else
    v162 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1198, (DgnString *)&v457);
  if ((_DWORD)v458)
    v167 = (char *)v457;
  else
    v167 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &byte_209A88803, v22, v22, v167, v162, v162, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v162;
  *a5 += v162;
  v168 = sizeObject((uint64_t)this + 392, 0);
  v169 = sizeObject((uint64_t)this + 392, 1);
  v170 = sizeObject((uint64_t)this + 392, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1200, (DgnString *)&v457);
  if ((_DWORD)v458)
    v175 = (char *)v457;
  else
    v175 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v21, &byte_209A88803, v22, v22, v175, v168, v169, v170);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v168;
  *a5 += v169;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1202, (DgnString *)&v457);
  if ((_DWORD)v458)
    v180 = (char *)v457;
  else
    v180 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &byte_209A88803, v22, v22, v180, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v181 = 12;
  else
    v181 = 16;
  v182 = *((unsigned int *)this + 136);
  v183 = *((_DWORD *)this + 137);
  if (v183 >= v182)
  {
    v184 = 0;
    if ((int)v182 > 0)
      v181 = (v181 | 2) + 2 * (v182 - 1);
    v185 = v181 + 2 * (v183 - v182);
  }
  else
  {
    v184 = 2 * v182;
    v185 = v181;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1204, (DgnString *)&v457);
  if ((_DWORD)v458)
    v190 = (char *)v457;
  else
    v190 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &byte_209A88803, v22, v22, v190, v185, v181, v184);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v185;
  *a5 += v181;
  *a6 += v184;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v191 = 12;
  else
    v191 = 16;
  v192 = *((_DWORD *)this + 140);
  v193 = *((_DWORD *)this + 141);
  v194 = v193 >= v192;
  v195 = v193 - v192;
  if (v194)
  {
    v197 = v192 & ~(v192 >> 31);
    v192 = 0;
    v196 = v191 + v197;
    v191 += v197 + v195;
  }
  else
  {
    v196 = v191;
  }
  v198 = v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1206, (DgnString *)&v457);
  if ((_DWORD)v458)
    v203 = (char *)v457;
  else
    v203 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v199, v200, v201, v202, v21, &byte_209A88803, v22, v22, v203, v191, v196, v198);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v191;
  *a5 += v196;
  *a6 += v198;
  v204 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v204 = 16;
  v205 = *((unsigned int *)this + 144);
  v206 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v206 = 3;
  v207 = (((*((_DWORD *)this + 145) - v205) + v205) << v206) + v204;
  v208 = (v205 << v206) + v204;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1208, (DgnString *)&v457);
  if ((_DWORD)v458)
    v213 = (char *)v457;
  else
    v213 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v21, &byte_209A88803, v22, v22, v213, v207, v208, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v207;
  *a5 += v208;
  v214 = sizeObject<RecogGerm>((uint64_t)this + 584, 0);
  v215 = sizeObject<RecogGerm>((uint64_t)this + 584, 1);
  v457 = 0x3FFFFAFFFFFFLL;
  v458 = xmmword_209A593D0;
  v459 = 0;
  v460 = 1310720000;
  v461 = 0;
  v462 = 0x70000000FFFFFFFELL;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1209, (DgnString *)&v457);
  if ((_DWORD)v458)
    v220 = (char *)v457;
  else
    v220 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v216, v217, v218, v219, v21, &byte_209A88803, v22, v22, v220, v214, v215, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v214;
  *a5 += v215;
  v221 = sizeObject((uint64_t)this + 616, 0) + 17;
  v222 = sizeObject((uint64_t)this + 616, 1) + 17;
  v223 = sizeObject((uint64_t)this + 616, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1210, (DgnString *)&v457);
  if ((_DWORD)v458)
    v228 = (char *)v457;
  else
    v228 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v224, v225, v226, v227, v21, &byte_209A88803, v22, v22, v228, v221, v222, v223);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v221;
  *a5 += v222;
  *a6 += v223;
  v456 = 0;
  v457 = 0;
  v455 = 0;
  SearchLMScorer::printSize((Recognizer *)((char *)this + 624), 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
  *a4 += v457;
  *a5 += v456;
  *a6 += v455;
  v229 = sizeObject((uint64_t)this + 832, 0);
  v230 = sizeObject((uint64_t)this + 832, 1);
  v231 = sizeObject((uint64_t)this + 832, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1213, (DgnString *)&v457);
  if ((_DWORD)v458)
    v236 = (char *)v457;
  else
    v236 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v21, &byte_209A88803, v22, v22, v236, v229, v230, v231);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v229;
  *a5 += v230;
  *a6 += v231;
  v237 = PelStats::sizeObject((uint64_t)this + 880, 0);
  v238 = PelStats::sizeObject((uint64_t)this + 880, 1);
  v239 = PelStats::sizeObject((uint64_t)this + 880, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1215, (DgnString *)&v457);
  if ((_DWORD)v458)
    v244 = (char *)v457;
  else
    v244 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &byte_209A88803, v22, v22, v244, v237, v238, v239);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v237;
  *a5 += v238;
  *a6 += v239;
  v245 = LMStats::sizeObject((uint64_t)this + 1056, 0);
  v246 = LMStats::sizeObject((uint64_t)this + 1056, 1);
  v247 = LMStats::sizeObject((uint64_t)this + 1056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1216, (DgnString *)&v457);
  if ((_DWORD)v458)
    v252 = (char *)v457;
  else
    v252 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v21, &byte_209A88803, v22, v22, v252, v245, v246, v247);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v245;
  *a5 += v246;
  *a6 += v247;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1217, (DgnString *)&v457);
  if ((_DWORD)v458)
    v257 = (char *)v457;
  else
    v257 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v253, v254, v255, v256, v21, &byte_209A88803, v22, v22, v257, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 24;
  *a5 += 24;
  v258 = PelStats::sizeObject((uint64_t)this + 1240, 0);
  v259 = PelStats::sizeObject((uint64_t)this + 1240, 1);
  v260 = PelStats::sizeObject((uint64_t)this + 1240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1219, (DgnString *)&v457);
  if ((_DWORD)v458)
    v265 = (char *)v457;
  else
    v265 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v261, v262, v263, v264, v21, &byte_209A88803, v22, v22, v265, v258, v259, v260);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v258;
  *a5 += v259;
  *a6 += v260;
  v266 = LMStats::sizeObject((uint64_t)this + 1416, 0);
  v267 = LMStats::sizeObject((uint64_t)this + 1416, 1);
  v268 = LMStats::sizeObject((uint64_t)this + 1416, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1221, (DgnString *)&v457);
  if ((_DWORD)v458)
    v273 = (char *)v457;
  else
    v273 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v269, v270, v271, v272, v21, &byte_209A88803, v22, v22, v273, v266, v267, v268);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v266;
  *a5 += v267;
  *a6 += v268;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1223, (DgnString *)&v457);
  if ((_DWORD)v458)
    v278 = (char *)v457;
  else
    v278 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v21, &byte_209A88803, v22, v22, v278, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 24;
  *a5 += 24;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1226, (DgnString *)&v457);
  if ((_DWORD)v458)
    v283 = (char *)v457;
  else
    v283 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v21, &byte_209A88803, v22, v22, v283, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1249, (DgnString *)&v457);
  if ((_DWORD)v458)
    v288 = (char *)v457;
  else
    v288 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v21, &byte_209A88803, v22, v22, v288, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  v289 = LatticeStats::sizeObject((uint64_t)this + 1616, 0);
  v290 = LatticeStats::sizeObject((uint64_t)this + 1616, 1);
  v291 = LatticeStats::sizeObject((uint64_t)this + 1616, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1251, (DgnString *)&v457);
  if ((_DWORD)v458)
    v296 = (char *)v457;
  else
    v296 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &byte_209A88803, v22, v22, v296, v289, v290, v291);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v289;
  *a5 += v290;
  *a6 += v291;
  v297 = SnapTime::sizeObject((uint64_t)this + 2024, 0);
  v298 = SnapTime::sizeObject((uint64_t)this + 2024, 1);
  v299 = SnapTime::sizeObject((uint64_t)this + 2024, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1253, (DgnString *)&v457);
  if ((_DWORD)v458)
    v304 = (char *)v457;
  else
    v304 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v21, &byte_209A88803, v22, v22, v304, v297, v298, v299);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v297;
  *a5 += v298;
  *a6 += v299;
  v305 = SnapTime::sizeObject((uint64_t)this + 2056, 0);
  v306 = SnapTime::sizeObject((uint64_t)this + 2056, 1);
  v307 = SnapTime::sizeObject((uint64_t)this + 2056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1255, (DgnString *)&v457);
  if ((_DWORD)v458)
    v312 = (char *)v457;
  else
    v312 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v21, &byte_209A88803, v22, v22, v312, v305, v306, v307);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v305;
  *a5 += v306;
  *a6 += v307;
  v313 = SnapTime::sizeObject((uint64_t)this + 2088, 0);
  v314 = SnapTime::sizeObject((uint64_t)this + 2088, 1);
  v315 = SnapTime::sizeObject((uint64_t)this + 2088, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1257, (DgnString *)&v457);
  if ((_DWORD)v458)
    v320 = (char *)v457;
  else
    v320 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v21, &byte_209A88803, v22, v22, v320, v313, v314, v315);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v313;
  *a5 += v314;
  *a6 += v315;
  v321 = SnapTime::sizeObject((uint64_t)this + 2120, 0);
  v322 = SnapTime::sizeObject((uint64_t)this + 2120, 1);
  v323 = SnapTime::sizeObject((uint64_t)this + 2120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1259, (DgnString *)&v457);
  if ((_DWORD)v458)
    v328 = (char *)v457;
  else
    v328 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v324, v325, v326, v327, v21, &byte_209A88803, v22, v22, v328, v321, v322, v323);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v321;
  *a5 += v322;
  *a6 += v323;
  v329 = SnapTime::sizeObject((uint64_t)this + 2152, 0);
  v330 = SnapTime::sizeObject((uint64_t)this + 2152, 1);
  v331 = SnapTime::sizeObject((uint64_t)this + 2152, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1261, (DgnString *)&v457);
  if ((_DWORD)v458)
    v336 = (char *)v457;
  else
    v336 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v332, v333, v334, v335, v21, &byte_209A88803, v22, v22, v336, v329, v330, v331);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v329;
  *a5 += v330;
  *a6 += v331;
  v337 = SnapTime::sizeObject((uint64_t)this + 2184, 0);
  v338 = SnapTime::sizeObject((uint64_t)this + 2184, 1);
  v339 = SnapTime::sizeObject((uint64_t)this + 2184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1263, (DgnString *)&v457);
  if ((_DWORD)v458)
    v344 = (char *)v457;
  else
    v344 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v340, v341, v342, v343, v21, &byte_209A88803, v22, v22, v344, v337, v338, v339);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v337;
  *a5 += v338;
  *a6 += v339;
  v345 = (Constraint *)*((_QWORD *)this + 277);
  if (v345)
  {
    v456 = 0;
    v457 = 0;
    v455 = 0;
    Constraint::printSize(v345, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v346 = 4;
  else
    v346 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1265, (DgnString *)&v457);
  if ((_DWORD)v458)
    v351 = (char *)v457;
  else
    v351 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v347, v348, v349, v350, v21, &byte_209A88803, v22, v22, v351, v346, v346, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v346;
  *a5 += v346;
  v352 = sizeObject<CWIDAC>((uint64_t)this + 2224, 0);
  v353 = sizeObject<CWIDAC>((uint64_t)this + 2224, 1);
  HIDWORD(v457) = 0x3FFF;
  v458 = xmmword_209A593D0;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1267, (DgnString *)&v457);
  if ((_DWORD)v458)
    v358 = (char *)v457;
  else
    v358 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v21, &byte_209A88803, v22, v22, v358, v352, v353, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v352;
  *a5 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1269, (DgnString *)&v457);
  if ((_DWORD)v458)
    v363 = (char *)v457;
  else
    v363 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v359, v360, v361, v362, v21, &byte_209A88803, v22, v22, v363, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1271, (DgnString *)&v457);
  if ((_DWORD)v458)
    v368 = (char *)v457;
  else
    v368 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v21, &byte_209A88803, v22, v22, v368, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1273, (DgnString *)&v457);
  if ((_DWORD)v458)
    v373 = (char *)v457;
  else
    v373 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v21, &byte_209A88803, v22, v22, v373, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1275, (DgnString *)&v457);
  if ((_DWORD)v458)
    v378 = (char *)v457;
  else
    v378 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v374, v375, v376, v377, v21, &byte_209A88803, v22, v22, v378, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1277, (DgnString *)&v457);
  if ((_DWORD)v458)
    v383 = (char *)v457;
  else
    v383 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v379, v380, v381, v382, v21, &byte_209A88803, v22, v22, v383, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  v384 = sizeObject((uint64_t)this + 2260, 0);
  v385 = sizeObject((uint64_t)this + 2260, 1);
  v386 = sizeObject((uint64_t)this + 2260, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1279, (DgnString *)&v457);
  if ((_DWORD)v458)
    v391 = (char *)v457;
  else
    v391 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v387, v388, v389, v390, v21, &byte_209A88803, v22, v22, v391, v384, v385, v386);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v384;
  *a5 += v385;
  *a6 += v386;
  v392 = sizeObject<HistoryAndBigScore>((uint64_t)this + 2288, 0);
  v393 = sizeObject<HistoryAndBigScore>((uint64_t)this + 2288, 1);
  v457 = 0x70000000FFFFFFFELL;
  LODWORD(v458) = 1879048192;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1281, (DgnString *)&v457);
  if ((_DWORD)v458)
    v398 = (char *)v457;
  else
    v398 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v394, v395, v396, v397, v21, &byte_209A88803, v22, v22, v398, v392, v393, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v392;
  *a5 += v393;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1282, (DgnString *)&v457);
  if ((_DWORD)v458)
    v403 = (char *)v457;
  else
    v403 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v399, v400, v401, v402, v21, &byte_209A88803, v22, v22, v403, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1284, (DgnString *)&v457);
  if ((_DWORD)v458)
    v408 = (char *)v457;
  else
    v408 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v404, v405, v406, v407, v21, &byte_209A88803, v22, v22, v408, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1286, (DgnString *)&v457);
  if ((_DWORD)v458)
    v413 = (char *)v457;
  else
    v413 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v409, v410, v411, v412, v21, &byte_209A88803, v22, v22, v413, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1288, (DgnString *)&v457);
  if ((_DWORD)v458)
    v418 = (char *)v457;
  else
    v418 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v414, v415, v416, v417, v21, &byte_209A88803, v22, v22, v418, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1290, (DgnString *)&v457);
  if ((_DWORD)v458)
    v423 = (char *)v457;
  else
    v423 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v419, v420, v421, v422, v21, &byte_209A88803, v22, v22, v423, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1292, (DgnString *)&v457);
  if ((_DWORD)v458)
    v428 = (char *)v457;
  else
    v428 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v424, v425, v426, v427, v21, &byte_209A88803, v22, v22, v428, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1294, (DgnString *)&v457);
  if ((_DWORD)v458)
    v433 = (char *)v457;
  else
    v433 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v429, v430, v431, v432, v21, &byte_209A88803, v22, v22, v433, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1296, (DgnString *)&v457);
  if ((_DWORD)v458)
    v438 = (char *)v457;
  else
    v438 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v434, v435, v436, v437, v21, &byte_209A88803, v22, v22, v438, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  v439 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v439 = 16;
  v440 = *((unsigned int *)this + 596);
  v441 = 8 * v440;
  if ((int)v440 <= 0)
    v441 = 0;
  v442 = v441 + v439;
  v443 = v441 + v439 + 8 * (*((_DWORD *)this + 597) - v440);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1298, (DgnString *)&v457);
  if ((_DWORD)v458)
    v448 = (char *)v457;
  else
    v448 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v444, v445, v446, v447, v21, &byte_209A88803, v22, v22, v448, v443, v442, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v443;
  *a5 += v442;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1299, (DgnString *)&v457);
  if ((_DWORD)v458)
    v453 = (char *)v457;
  else
    v453 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v449, v450, v451, v452, v454, &byte_209A88803, (35 - v454), (35 - v454), v453, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v457);
}

void sub_2099A45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t Recognizer::beginTopRecSyncRecog(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(result + 272) = 0;
  *(_DWORD *)(result + 348) = a2;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 1608) = 0;
  *(_QWORD *)(result + 316) = 0xFFFFFFF0FFFFFFF0;
  *(_QWORD *)(result + 2392) = a3;
  *(_QWORD *)(result + 2400) = a4;
  return result;
}

void Recognizer::endTopRecSyncRecog(Recognizer *this)
{
  PelScoreCache *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*((_BYTE *)this + 304))
  {
    v2 = *(PelScoreCache **)(*((_QWORD *)this + 34) + 120);
    if (v2)
    {
      PelScoreCache::removeCacheClient(v2, this);
      *((_BYTE *)this + 360) = 0;
    }
  }
  Active::endActiveSyncRecog(*((Active **)this + 35));
  *((_DWORD *)this + 136) = 0;
  v3 = *((unsigned int *)this + 140);
  if ((_DWORD)v3)
    bzero(*((void **)this + 69), v3);
  SearchLMScorer::endSearchLMScorerSyncRecog((Recognizer *)((char *)this + 624));
  v4 = (_QWORD *)*((_QWORD *)this + 47);
  if (v4)
  {
    (*(void (**)(_QWORD))*v4)(*((_QWORD *)this + 47));
    MemChunkFree(v4, 0);
  }
  *((_QWORD *)this + 47) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 48);
  if (v5)
  {
    (*(void (**)(_QWORD))*v5)(*((_QWORD *)this + 48));
    MemChunkFree(v5, 0);
  }
  *((_QWORD *)this + 48) = 0;
}

uint64_t Recognizer::beginTopRecPassSyncRecog(Recognizer *this, int a2, int a3, PelScorer *a4)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *Bucket;
  _QWORD **v13;
  uint64_t v14;
  uint64_t active;
  uint64_t result;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  *((_QWORD *)this + 34) = a4;
  *((_DWORD *)this + 88) = a2;
  v6 = *((_DWORD *)this + 87);
  *((_DWORD *)this + 89) = v6 * a2;
  if (*((_BYTE *)this + 304))
  {
    v7 = *((_QWORD *)a4 + 15);
    v8 = *((_QWORD *)this + 33);
    v9 = v8 + 56;
    v10 = v8 + 72;
    if (v6 == 1)
      v11 = v9;
    else
      v11 = v10;
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
  Active::beginActiveSyncRecog(*((_QWORD *)this + 35), v11, v7, *((_DWORD *)this + 7), *((_DWORD *)this + 8));
  MrecInitModule_sdpres_sdapi();
  v20 = 0x3FFFFCFFFFFELL;
  v21 = xmmword_209A593D0;
  Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*((_QWORD *)this + 35) + 303024, (uint64_t)&v20);
  if (!*Bucket || (v13 = *(_QWORD ***)(*Bucket + 40)) == 0)
  {
    v14 = *((_QWORD *)this + 35);
    if (*((_BYTE *)this + 304))
      active = Active::newActiveWordSilence(v14, (uint64_t)&v20);
    else
      active = Active::newActiveWordNonAcoustic(v14, (uint64_t)&v20);
    v13 = (_QWORD **)active;
  }
  ((void (*)(_QWORD **, _QWORD, _QWORD, uint64_t))(*v13)[3])(v13, 0, 0, 4294967294);
  if (*((_DWORD *)this + 78) != 3
    || (result = (*(uint64_t (**)(_QWORD *))(*v13[1] + 32))(v13[1]), *((_DWORD *)this + 78) != 3))
  {
    v17 = (_QWORD *)*((_QWORD *)this + 46);
    v19 = *((_DWORD *)this + 72);
    result = (uint64_t)CWIDCrumbBank::setFirstFrame(v17, &v19, 0);
  }
  if (v7)
  {
    PelScoreCache::addCacheClient(v7, this);
    *((_BYTE *)this + 360) = 1;
    result = PelScoreCache::setCacheData(v7, *((const PelScoreCacheData **)this + 37));
  }
  *((_DWORD *)this + 77) = a3;
  if (*((_DWORD *)this + 72) == -1)
    v18 = a3 - 1;
  else
    v18 = 0;
  *((_DWORD *)this + 79) = v18;
  *((_DWORD *)this + 80) = v18;
  *((_DWORD *)this + 81) = 0;
  *((_DWORD *)this + 592) = 0;
  *((_DWORD *)this + 588) = 0;
  return result;
}

uint64_t Recognizer::endTopRecPassSyncRecog(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 288);
  if (v2 == -1 || (v2 = *(_DWORD *)(this + 308), v2 != -16))
  {
    if (*(_DWORD *)(this + 316) == v2 && *(_DWORD *)(this + 312) != 3 && *(_BYTE *)(this + 620))
    {
      this = Recognizer::collectLastFrameConfidencePredictors(this, *(unsigned int *)(this + 600));
      *(_QWORD *)(v1 + 612) = 4294967280;
      *(_BYTE *)(v1 + 620) = 0;
    }
  }
  if (*(_BYTE *)(v1 + 304))
  {
    this = *(_QWORD *)(*(_QWORD *)(v1 + 272) + 120);
    if (this)
      return PelScoreCache::removeCacheClientOfFramesFromTimeOn(this, *(_DWORD *)(v1 + 320), (void *)(*(_DWORD *)(v1 + 288) == 1), (void *)v1);
  }
  return this;
}

BOOL Recognizer::checkForDone(Recognizer *this)
{
  int v1;

  v1 = *((_DWORD *)this + 72);
  if (v1 == -1)
    return *((_DWORD *)this + 79) == v1;
  v1 = *((_DWORD *)this + 77);
  return v1 != -16 && *((_DWORD *)this + 79) == v1;
}

unint64_t Recognizer::collectLastFrameConfidencePredictors(unint64_t this, uint64_t a2)
{
  unint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;
  int i;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 316);
  if (v4 == -16)
    v5 = -16;
  else
    v5 = v4 - *(_DWORD *)(this + 288);
  v6 = (_QWORD *)(this + 224);
  for (i = *(_DWORD *)(this + 232); v5 >= i; *(_DWORD *)(v3 + 232) = i)
  {
    if (i == *(_DWORD *)(v3 + 236))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v3 + 224, 1, 1);
      i = *(_DWORD *)(v3 + 232);
    }
    *(_DWORD *)(*(_QWORD *)(v3 + 224) + 4 * i) = 0;
    i = *(_DWORD *)(v3 + 232) + 1;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v3 + 280) + 303240);
  v9 = *(_DWORD *)(*(_QWORD *)(v3 + 280) + 303248);
  v10 = 0;
  if (v9 - 1 >= 0)
  {
    v11 = *v8 + 8 * (v9 - 1);
    do
    {
      this = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (*(_DWORD *)(this + 104) || *(_BYTE *)(this + 112))
      {
        this = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)this + 80))(this, a2);
        v10 += this;
      }
      --v9;
      v11 -= 8;
    }
    while (v9 >= 1);
  }
  *(_DWORD *)(*v6 + 4 * v5) = v10;
  return this;
}

_DWORD *Recognizer::collectByFrameConfidencePredictors(_DWORD *this)
{
  uint64_t v1;
  int v2;
  int v3;
  _QWORD *v4;
  int i;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  v1 = (uint64_t)this;
  v2 = this[79];
  if (v2 == -16)
    v3 = -16;
  else
    v3 = v2 - this[72];
  v4 = this + 56;
  for (i = this[58]; v3 >= i; *(_DWORD *)(v1 + 232) = i)
  {
    if (i == *(_DWORD *)(v1 + 236))
    {
      this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v1 + 224, 1, 1);
      i = *(_DWORD *)(v1 + 232);
    }
    *(_DWORD *)(*(_QWORD *)(v1 + 224) + 4 * i) = 0;
    i = *(_DWORD *)(v1 + 232) + 1;
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v1 + 280) + 303248);
  v7 = 0;
  if (v6 - 1 >= 0)
  {
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1 + 280) + 303240) + 8 * (v6 - 1));
    do
    {
      v9 = *v8--;
      v7 += *(_DWORD *)(*(_QWORD *)(v9 + 8) + 104);
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(*v4 + 4 * v3) = v7;
  return this;
}

unint64_t DgnPrimArray<unsigned int>::add(unint64_t result, int a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

int32x2_t Recognizer::adjustBestForBWBack(Recognizer *this, int a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *((_DWORD *)this + 79);
  v3 = -16;
  if (v2 != -16)
    v3 = v2 - *((_DWORD *)this + 72);
  if (v3 == *((_DWORD *)this + 77))
    v4 = -16;
  else
    v4 = v3;
  return NetMgr::adjustBestForBWBack((NetMgr *)(*((_QWORD *)this + 35) + 16), a2, v4, (int *)this + 81);
}

unsigned __int8 *Recognizer::debugFrameStart(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  MemChunkRegion *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *CurrentRegion;
  uint64_t v34;
  uint64_t v35;

  if (*(_DWORD *)(gParDiagnosticFrameSpecificCommand + 64))
  {
    v1 = this;
    this = *(unsigned __int8 **)(gParDiagnosticFrameSpecificCommand + 56);
    if (*this)
    {
      v34 = 0;
      v35 = 0;
      DgnSplitStringIntoTokens(this, " \n\r,", (uint64_t)&v34, 0);
      v4 = v35;
      if ((_DWORD)v35)
      {
        v5 = 0;
        do
        {
          v6 = v5 + 1;
          v7 = v34;
          v8 = v5;
          if (v5 + 1 >= v4)
          {
            v9 = v34 + 16 * v5;
            if (*(_DWORD *)(v9 + 8))
              v10 = *(char **)v9;
            else
              v10 = &byte_209A88803;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1907, (uint64_t)"kernel/recog", 2, (uint64_t)"%.500s %u", v2, v3, (char)v10);
            v7 = v34;
          }
          v11 = v7 + 16 * v8;
          if (*(_DWORD *)(v11 + 8))
            v12 = *(const char **)v11;
          else
            v12 = &byte_209A88803;
          v13 = atoi(v12);
          if ((_DWORD)v13 == *((_DWORD *)v1 + 79))
          {
            v18 = v13;
            v19 = v7 + 16 * v6;
            if (*(_DWORD *)(v19 + 8))
              v20 = *(char **)v19;
            else
              v20 = &byte_209A88803;
            xlprintf("Attempting DiagnosticFrameSpecificCommand '%.500s' on frame %d\n", v14, v15, v16, v17, v20, v13);
            if (*(_DWORD *)(v19 + 8))
              v21 = *(const char **)v19;
            else
              v21 = &byte_209A88803;
            if (!strcmp(v21, "DisplayObjectSizes()"))
            {
              InternalDisplayObjectSizes();
            }
            else if (!strcmp(v21, "DisplayMemStats()"))
            {
              MemStatsDisplayFromRef(0, 0, 1, 0, 0, 0, 0);
            }
            else if (!strcmp(v21, "DisplayMemChunkStats()"))
            {
              MrecInitModule_sdpres_sdapi();
            }
            else
            {
              v22 = strcmp(v21, "ErrThrow()");
              if ((_DWORD)v22)
              {
                v25 = (MemChunkRegion *)strcmp(v21, "ErrThrowMemory()");
                if (!(_DWORD)v25)
                {
                  CurrentRegion = MemChunkRegion::getCurrentRegion(v25);
                  ThrowNewFailure((uint64_t)CurrentRegion, 0);
                }
                if (*v21)
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 433, (uint64_t)"kernel/recog", 3, (uint64_t)"%.500s", v30, v31, (char)v21);
              }
              else
              {
                errThrowInternal(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 424, (uint64_t)"kernel/recog", 8, (uint64_t)"%.500s", v23, v24, (char)v21);
              }
            }
            if (*(_DWORD *)(v19 + 8))
              v32 = *(char **)v19;
            else
              v32 = &byte_209A88803;
            xlprintf("Finished DiagnosticFrameSpecificCommand '%.500s' on frame %d\n", v26, v27, v28, v29, v32, v18);
          }
          v5 = v8 + 2;
          v4 = v35;
        }
        while ((int)v8 + 2 < v35);
      }
      return (unsigned __int8 *)DgnArray<DgnString>::releaseAll((uint64_t)&v34);
    }
  }
  return this;
}

void sub_2099A4F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Recognizer::endNonAcousticFrame(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*((_DWORD *)this + 72) != -1)
  {
    v1 = this;
    if (*((_DWORD *)this + 77) == -16)
    {
      v2 = this[35];
      if (!*(_DWORD *)(v2 + 303248)
        || (v5 = 0x3FFFFCFFFFFDLL,
            v6 = xmmword_209A593D0,
            this = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v2 + 303024, (uint64_t)&v5),
            *this)
        && (v3 = *(_QWORD *)(*this + 40)) != 0
        && ((v4 = *(_QWORD *)(v3 + 8), *(_DWORD *)(v4 + 104)) || *(_BYTE *)(v4 + 112))
        && *(_DWORD *)(v1[35] + 303248) == 1)
      {
        *((_DWORD *)v1 + 77) = *((_DWORD *)v1 + 79) + 1;
      }
    }
  }
  return this;
}

uint64_t Recognizer::setRecogEndTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 308) = a2;
  return this;
}

uint64_t Recognizer::checkForAbort(Recognizer *this)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  Recognizer *v8;
  int v9;
  int v10;
  double v11;
  double v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(*((_QWORD *)this + 35) + 88);
  v3 = *((_DWORD *)this + 21);
  v4 = v3 > 0 && v2 >= v3;
  v5 = v4;
  *((_BYTE *)this + 2304) = v5;
  MemChunkRegion::getRegionStats(0, (uint64_t)&v18);
  if (!*((_BYTE *)this + 2304))
  {
    v7 = *((unsigned int *)this + 22);
    if ((int)v7 < 1 || (v14 = v19 < v7, *((_BYTE *)this + 2304) = v19 >= v7, v14))
    {
      if (!*((_BYTE *)this + 304))
        goto LABEL_24;
      v10 = *((_DWORD *)this + 79);
      if (v10 < 50)
        goto LABEL_24;
      v11 = (double)v2 / (double)v10;
      v12 = *((double *)this + 201);
      if (v12 <= v11)
        v12 = (double)v2 / (double)v10;
      v13 = *((_DWORD *)this + 23);
      *((double *)this + 201) = v12;
      v14 = v11 < (double)v13 || v13 <= 0;
      v15 = !v14;
      *((_BYTE *)this + 2304) = v15;
      if (v15)
      {
        v8 = this;
        v9 = 3;
      }
      else
      {
LABEL_24:
        v16 = *((_DWORD *)this + 24);
        if (v16 < 1)
        {
          v6 = 0;
          *((_BYTE *)this + 2304) = 0;
          return v6;
        }
        v4 = *((_DWORD *)this + 302) >= v16;
        *((_BYTE *)this + 2304) = v4;
        if (!v4)
          return 0;
        v8 = this;
        v9 = 4;
      }
    }
    else
    {
      v8 = this;
      v9 = 2;
    }
    Recognizer::setSearchAbortRecognizerStats((uint64_t)v8, v9);
    return 1;
  }
  v6 = 1;
  Recognizer::setSearchAbortRecognizerStats((uint64_t)this, 1);
  return v6;
}

void Recognizer::setSearchAbortRecognizerStats(uint64_t a1, int a2)
{
  unsigned int v3;
  int v4;
  double v5;
  _QWORD v6[12];

  *(_DWORD *)(a1 + 2308) = a2;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 88);
  *(_DWORD *)(a1 + 2312) = *(_DWORD *)(a1 + 1208);
  *(_DWORD *)(a1 + 2316) = v3;
  MemChunkRegion::getRegionStats(0, (uint64_t)v6);
  *(_QWORD *)(a1 + 2320) = v6[1];
  v4 = *(_DWORD *)(a1 + 316);
  if (v4)
    v5 = (double)v3 / (double)v4;
  else
    v5 = 0.0;
  *(double *)(a1 + 2328) = v5;
}

uint64_t Recognizer::turnOffPrefilterer(Recognizer *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  if (*((_DWORD *)this + 9))
    return 0;
  v2 = *(_DWORD *)(*((_QWORD *)this + 35) + 303248);
  if (v2 - 1 >= 0)
  {
    for (i = *(_QWORD *)(*((_QWORD *)this + 35) + 303240) + 8 * (v2 - 1); ; i -= 8)
    {
      v4 = *(_QWORD *)(*(_QWORD *)i + 8);
      if ((*(_DWORD *)(v4 + 104) || *(_BYTE *)(v4 + 112))
        && *(_DWORD *)(v4 + 16) != -50331651
        && *(_BYTE *)(*(_QWORD *)i + 36))
      {
        break;
      }
      if (--v2 <= 0)
        return 1;
    }
    return 0;
  }
  return 1;
}

void Recognizer::doFrame1(Recognizer *this)
{
  Recognizer::debugFrameStart((unsigned __int8 *)this);
  Recognizer::beginTopRecFrame(this, *((_DWORD *)this + 79));
  *((_DWORD *)this + 592) = 0;
  *((_DWORD *)this + 588) = 0;
}

void Recognizer::beginTopRecFrame(Recognizer *this, int a2)
{
  NetMgr::beginNetMgrFrame((NetMgr *)(*((_QWORD *)this + 35) + 16), a2);
  if (*((_DWORD *)this + 78) != 3)
    CWIDCrumbBank::ensureCrumbFrame(*((_DWORD **)this + 46), a2);
  *((_DWORD *)this + 400) = 0;
}

uint64_t Recognizer::doFrame2(Recognizer *this, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  PelScoreCache *v13;
  int ScoreNoBackoff;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)this + 304))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, _QWORD))(**((_QWORD **)this + 34) + 56))(*((_QWORD *)this + 34), *((unsigned int *)this + 79), 0, a2, (char *)this + 880, 0);
    if (!*((_DWORD *)this + 78))
    {
      if (*((_BYTE *)this + 25))
      {
        v16 = *((_QWORD *)this + 35);
        if (*(_DWORD *)(v16 + 302984) == *(_DWORD *)(v16 + 302960))
          DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(v16 + 302952);
      }
    }
  }
  v3 = *((_DWORD *)this + 79);
  if (v3 != -16)
  {
    v4 = *((_DWORD *)this + 72);
    v5 = v3 - v4;
    if (v4 == 1)
    {
      if (v5 != -1)
        goto LABEL_9;
    }
    else if (v5 != *((_DWORD *)this + 77))
    {
      goto LABEL_9;
    }
  }
  v5 = -16;
LABEL_9:
  if (*((_DWORD *)this + 78) == 3)
  {
    Recognizer::adjustBestForBWBack(this, 0);
    v6 = 5000;
  }
  else
  {
    v6 = NetMgr::normalizeBestAndComputeEstimatedThresh((NetMgr *)(*((_QWORD *)this + 35) + 16), v5, *((_DWORD *)this + 4) + *((_DWORD *)this + 3), (int *)this + 81);
    v7 = *((_DWORD *)this + 81);
    v8 = *((_DWORD *)this + 84);
    if (v8 == *((_DWORD *)this + 85))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 328, 1, 1);
      v8 = *((_DWORD *)this + 84);
    }
    *(_DWORD *)(*((_QWORD *)this + 41) + 4 * v8) = v7;
    ++*((_DWORD *)this + 84);
  }
  v9 = 5000;
  if (v5 != -16)
  {
    v9 = *((_DWORD *)this + 150);
    *(_QWORD *)((char *)this + 612) = 4294967280;
    *((_BYTE *)this + 620) = 0;
  }
  v10 = *((_DWORD *)this + 13);
  if (v10 == -1)
    v11 = 5000;
  else
    v11 = (v6 - v10);
  result = Active::scoreActiveWords(*((_QWORD *)this + 35), *((unsigned int *)this + 79), v9, v6, *((_DWORD *)this + 5), v11, *((unsigned int *)this + 14));
  if (v5 != -16 && *((_DWORD *)this + 78) != 3)
    result = (uint64_t)Recognizer::collectByFrameConfidencePredictors(this);
  *((_DWORD *)this + 86) = 0;
  if (*((_BYTE *)this + 304))
  {
    v13 = *(PelScoreCache **)(*((_QWORD *)this + 34) + 120);
    ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(v13, 0);
    v15 = *((_QWORD *)this + 34);
    *((_DWORD *)this + 86) = ScoreNoBackoff + *(__int16 *)(*((_QWORD *)this + 35) + 260);
    (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v15 + 64))(v15, *((unsigned int *)this + 79), (char *)this + 880);
    result = PelScoreCache::removeCacheClientOfFrame((uint64_t)v13, *((_DWORD *)this + 79), this);
    *((_DWORD *)this + 80) = *((_DWORD *)this + 72) + *((_DWORD *)this + 79);
  }
  return result;
}

uint64_t Recognizer::doFrame3(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 active;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;

  v4 = NetMgr::computeThreshScore((NetMgr *)(*(_QWORD *)(a1 + 280) + 16), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), (unsigned int *)(a1 + 1216), (unint64_t *)(a1 + 1224));
  active = Active::thresholdActiveWords(*(Active **)(a1 + 280), *(_DWORD *)(a1 + 316), v4, *(_DWORD *)(a1 + 20));
  if (*(_DWORD *)(a1 + 312) == 3)
  {
    v6 = *(_QWORD *)(a1 + 280);
    v7 = *(_DWORD *)(a1 + 288);
    v8 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)(a1 + 604) = *(__int16 *)(v6 + 264);
    *(_DWORD *)(a1 + 600) = v4;
    *(_DWORD *)(a1 + 616) = v7;
    *(_DWORD *)(a1 + 608) = v8;
    *(_DWORD *)(a1 + 612) = v8 + v7;
    *(_BYTE *)(a1 + 620) = 1;
  }
  else
  {
    Recognizer::seedActiveWords(a1, v4, 20000, active, a2);
    v9 = *(_DWORD *)(a1 + 316);
    v10 = *(_DWORD *)(a1 + 248);
    if (v9 >= v10)
    {
      do
      {
        if (v10 == *(_DWORD *)(a1 + 252))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 240, 1, 1);
          v10 = *(_DWORD *)(a1 + 248);
        }
        v11 = *(_QWORD *)(a1 + 240);
        *(_DWORD *)(v11 + 4 * v10) = 0;
        v10 = *(_DWORD *)(a1 + 248) + 1;
        *(_DWORD *)(a1 + 248) = v10;
        v9 = *(_DWORD *)(a1 + 316);
      }
      while (v9 >= v10);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 240);
    }
    *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(a1 + 1600);
    v6 = *(_QWORD *)(a1 + 280);
  }
  v12 = *(__int16 *)(v6 + 216);
  if (v12 == 20000)
    v13 = -2;
  else
    v13 = *(_DWORD *)(v6 + 208);
  *(_DWORD *)(a1 + 2244) = v13;
  *(_DWORD *)(a1 + 2248) = v12;
  v14 = *(_QWORD *)(v6 + 232);
  if (!v14)
  {
    *(_BYTE *)(a1 + 2252) = 0;
    goto LABEL_20;
  }
  *(_BYTE *)(a1 + 2252) = 1;
  v15 = *(_DWORD *)(v14 + 16);
  *(_DWORD *)(a1 + 2260) = v15;
  *(_DWORD *)(a1 + 2264) = *(_DWORD *)(v14 + 20);
  *(_OWORD *)(a1 + 2268) = *(_OWORD *)(v14 + 24);
  if (v15 >> 25 == 126)
  {
    v16 = -16;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14))
    {
      *(_DWORD *)(a1 + 2256) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 104))(v14);
      goto LABEL_20;
    }
    v16 = *(_DWORD *)(a1 + 316);
  }
  *(_DWORD *)(a1 + 2256) = v16;
LABEL_20:
  if (*(_DWORD *)(a1 + 312) != 1)
  {
    if (*(_BYTE *)(a1 + 304))
    {
      v17 = *(_DWORD *)(a1 + 80);
      v18 = *(_DWORD *)(a1 + 316);
      if (v17 && !(v18 % v17))
      {
        Active::prune(*(_QWORD *)(a1 + 280));
        v18 = *(_DWORD *)(a1 + 316);
      }
      Active::pruneTimeConstrained(*(Active **)(a1 + 280), v18);
    }
    else
    {
      Active::prune(*(_QWORD *)(a1 + 280));
      Recognizer::endNonAcousticFrame((uint64_t *)a1);
    }
  }
  result = Recognizer::endTopRecFrame((Recognizer *)a1, *(_DWORD *)(a1 + 316));
  *(_DWORD *)(a1 + 316) += *(_DWORD *)(a1 + 288);
  ++*(_DWORD *)(a1 + 1208);
  return result;
}

void Recognizer::seedActiveWords(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_DWORD *)(a1 + 312);
  if (v9 != 3)
    a3 = *(__int16 *)(*(_QWORD *)(a1 + 280) + 264);
  v10 = *(_DWORD *)(a1 + 288);
  v11 = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 604) = a3;
  *(_DWORD *)(a1 + 600) = a2;
  *(_DWORD *)(a1 + 616) = v10;
  *(_DWORD *)(a1 + 608) = v11;
  *(_DWORD *)(a1 + 612) = v11 + v10;
  *(_BYTE *)(a1 + 620) = 1;
  if (v9 == 3)
  {
    Recognizer::doBackward((Recognizer *)a1);
  }
  else
  {
    CWIDCrumbBank::setBestAccumScore(*(CWIDCrumbBank **)(a1 + 368), v11, *(_DWORD *)(a1 + 324));
    Recognizer::doFinalSilForward((Recognizer *)a1);
    if (a4)
      Recognizer::doForward(a1, a5, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t Recognizer::endTopRecFrame(Recognizer *this, int a2)
{
  if (*((_DWORD *)this + 78) != 3)
    CWIDCrumbBank::endCrumbFrame(*((CWIDCrumbBank **)this + 46), a2, *((_DWORD *)this + 86));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Recognizer::getBestHistoryMaybeExtend(Recognizer *this, char a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t *Bucket;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  __int128 v32;

  v8 = *((_QWORD *)this + 35);
  v31 = 0x3FFFFCFFFFFDLL;
  v32 = xmmword_209A593D0;
  Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v8 + 303024, (uint64_t)&v31);
  if (!*Bucket
    || *((_BYTE *)this + 2304)
    || (a2 & 1) != 0
    || (v10 = *(_QWORD *)(*Bucket + 40)) == 0
    || (v11 = *(_QWORD *)(v10 + 8), (v12 = *(_DWORD *)(v11 + 104)) == 0) && (!*(_BYTE *)(v11 + 112) || (a3 & 1) == 0))
  {
    v23 = *((_QWORD *)this + 35);
    if (*(_WORD *)(v23 + 216) == 20000)
    {
      v24 = 1879048192;
      v25 = 4294967294;
    }
    else
    {
      v25 = *(unsigned int *)(v23 + 208);
      v24 = 1879048192;
    }
    goto LABEL_38;
  }
  v13 = *(unsigned int *)(v11 + 64);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = 0;
  v15 = *(uint64_t **)(v11 + 56);
  do
  {
    v17 = *v15++;
    v16 = v17;
    if (*(__int16 *)(v17 + 8) < 20000)
      v14 = v16;
    --v13;
  }
  while (v13);
  v18 = !v14 || a3 == 0;
  if (v18)
  {
LABEL_18:
    v19 = 1879048192;
    goto LABEL_19;
  }
  v19 = 20000;
  if (*(_WORD *)(v14 + 8) == 20000)
  {
LABEL_19:
    v20 = -2;
    if (!v12)
    {
LABEL_35:
      v24 = *((_DWORD *)this + 81) + v19;
      v29 = *((_DWORD *)this + 79);
      v25 = Recognizer::extendHistory((uint64_t)this, v20, (int *)(v11 + 16), 0, v29 + 1, v29 + 1);
      CWIDCrumbBank::addZeroFrameFinalSilHABS(*((_QWORD *)this + 46), v29, *(_QWORD *)(v10 + 8) + 16, v25, v24);
      goto LABEL_38;
    }
    goto LABEL_20;
  }
  v20 = *(_DWORD *)v14;
  v19 = *(__int16 *)(v14 + 8);
  if (!v12)
    goto LABEL_35;
LABEL_20:
  v21 = *(_DWORD *)(v11 + 40);
  if (v21 < 2)
  {
    v22 = 0;
  }
  else if (v21 - 3 >= 2)
  {
    v18 = v21 == 2;
    v22 = 1;
    if (!v18)
      v22 = 255;
  }
  else
  {
    v22 = **(unsigned __int8 **)(v11 + 88);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 8 * v22);
  v27 = *(__int16 *)(v26 + 8);
  if (v19 <= v27)
    goto LABEL_35;
  if (v27 == 20000)
    v28 = -2;
  else
    v28 = *(_DWORD *)v26;
  v24 = *((_DWORD *)this + 81) + v27;
  v25 = Recognizer::extendHistory((uint64_t)this, v28, (int *)(v11 + 16), 0, *((_DWORD *)this + 79), *((_DWORD *)this + 79));
LABEL_38:
  *a4 = v24;
  return v25;
}

uint64_t Recognizer::extendHistory(uint64_t a1, int a2, int *a3, int a4, int a5, int a6)
{
  uint64_t result;
  char v8;

  v8 = 0;
  result = HistoryMgr::extendHistory(*(_QWORD *)(a1 + 280) + 72, a2, a3, a4, a5, a6, &v8);
  if (v8)
    ++*(_DWORD *)(a1 + 1212);
  return result;
}

uint64_t Recognizer::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, uint64_t a7, unint64_t a8)
{
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v21;
  uint64_t v22;
  unint64_t v23;
  signed int v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  signed int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  PrefilterResult *v41;
  signed int v42;
  uint64_t GermsForFrame;
  int PartialResultWord;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  signed int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56[2];
  unsigned int v57;
  uint64_t v58;
  int v59;
  _QWORD v60[2];
  uint64_t v61;
  __int128 v62;
  void (**v63)(WordLatticeLC *__hidden);
  unint64_t v64;
  int v65;
  _BYTE v66[44];
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;

  v16 = a6[2];
  if (v16 >= 1)
  {
    v17 = 112 * v16 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a6 + v17))(*(_QWORD *)a6 + v17);
      v17 -= 112;
    }
    while (v17 != -112);
  }
  a6[2] = 0;
  *(_DWORD *)(a8 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 2248);
  if (v18 == 20000)
    return 1879048192;
  v19 = *(_DWORD *)(a1 + 2244);
  if (v19 == -2)
    return 1879048192;
  v58 = a2;
  *(_QWORD *)v56 = a3;
  v54 = a4;
  v55 = a5;
  v57 = *(_DWORD *)(a1 + 324) + v18;
  HistoryMgr::getForwardContents(*(_QWORD *)(a1 + 280) + 72, v19, a7);
  if (*(_DWORD *)(a7 + 8))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *(_QWORD *)a7 + v22;
      v26 = *(_DWORD *)(v25 + 24);
      if ((v26 - v24) < *(_DWORD *)(a1 + 220))
        return v57;
      v27 = *(_DWORD *)(v25 + 28);
      v65 = v24;
      *(_DWORD *)v66 = v26 - v24;
      *(_DWORD *)&v66[4] = v27 - v26;
      memset(&v66[8], 0, 36);
      v67 = 1879048192;
      v68 = 0;
      v69 = -1;
      v63 = &off_24C2149F8;
      v64 = 0xBFF0000000000000;
      v70 = *(_QWORD *)v25;
      v71 = *(_OWORD *)(v25 + 8);
      v28 = a6[2];
      if (v28 == a6[3])
      {
        DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
        LODWORD(v28) = a6[2];
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a6 + 112 * v28), (const WordLatticeLC *)&v63);
      ++a6[2];
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
      v29 = *(unsigned int *)(a8 + 8);
      if (v29 == *(_DWORD *)(a8 + 12))
      {
        v21 = DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
        v29 = *(unsigned int *)(a8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a8 + 4 * v29) = 1;
      ++*(_DWORD *)(a8 + 8);
      ++v23;
      v22 += 32;
      v24 = v27;
      if (v23 >= *(unsigned int *)(a7 + 8))
        goto LABEL_17;
    }
  }
  v27 = 0;
LABEL_17:
  if (!*(_BYTE *)(a1 + 2252))
  {
    v34 = 1;
    v31 = v58;
    if (!v58)
      return v57;
    goto LABEL_29;
  }
  v30 = *(_DWORD *)(a1 + 2260);
  v31 = v58;
  if (v30 >> 25 == 126)
  {
    v32 = v30 & 0xFFFFFF;
    if ((v30 & 0xFFFFFF) == 0xFFFFFD && a6[2] == 1)
    {
      v33 = *(_DWORD *)(a1 + 316);
      *(_DWORD *)(*(_QWORD *)a6 + 20) += v33 - v27;
      v34 = 1;
      v27 = v33;
      if (!v58)
        return v57;
LABEL_29:
      if (v34)
      {
        v61 = 0x3FFFFAFFFFFCLL;
        v62 = xmmword_209A593D0;
        v39 = a6[2];
        if (v39)
        {
          v40 = *(_QWORD *)a6 + 112 * (v39 - 1);
          v61 = *(_QWORD *)(v40 + 88);
          v62 = *(_OWORD *)(v40 + 96);
        }
        v41 = *(PrefilterResult **)(v31 + 48);
        v42 = *((_DWORD *)v41 + 4);
        if (v42 <= v27)
        {
LABEL_40:
          v48 = 1;
        }
        else
        {
          while (1)
          {
            GermsForFrame = PrefilterResult::getGermsForFrame(v41, v27);
            v65 = -16;
            memset(v66, 0, sizeof(v66));
            v67 = 1879048192;
            v68 = 0;
            v69 = -1;
            v63 = &off_24C2149F8;
            v64 = 0xBFF0000000000000;
            HIDWORD(v70) = 0x3FFF;
            v71 = xmmword_209A593D0;
            PartialResultWord = Recognizer::getPartialResultWord(a1, GermsForFrame, v27, (unsigned int *)&v61, (uint64_t)&v63, (int *)v60);
            if ((PartialResultWord & 1) == 0)
              break;
            v45 = *(_DWORD *)v66;
            if (*(_DWORD *)v66 < *(_DWORD *)(a1 + 216))
              break;
            v46 = a6[2];
            if (v46 == a6[3])
            {
              DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
              LODWORD(v46) = a6[2];
            }
            WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a6 + 112 * v46), (const WordLatticeLC *)&v63);
            ++a6[2];
            v47 = *(unsigned int *)(a8 + 8);
            if (v47 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
              v47 = *(unsigned int *)(a8 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a8 + 4 * v47) = 2;
            ++*(_DWORD *)(a8 + 8);
            v27 += v45;
            v61 = v70;
            v62 = v71;
            WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
            if (v42 <= v27)
              goto LABEL_40;
          }
          v48 = PartialResultWord ^ 1;
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
        }
        if (*(_QWORD *)v56 && v48)
        {
          v49 = *(_DWORD *)(*(_QWORD *)v56 + 8);
          v60[0] = 0;
          v60[1] = 0;
          if (v49 > v27)
          {
            v50 = 0;
            while ((v55 - v27) >= *(_DWORD *)(a1 + 208))
            {
              Recognizer::returnIncompleteGerms(v21, v27, *(_QWORD **)v56, v54, (uint64_t)v60);
              v65 = -16;
              memset(v66, 0, sizeof(v66));
              v67 = 1879048192;
              v68 = 0;
              v69 = -1;
              v63 = &off_24C2149F8;
              v64 = 0xBFF0000000000000;
              HIDWORD(v70) = 0x3FFF;
              v71 = xmmword_209A593D0;
              if ((Recognizer::getPartialResultWord(a1, (uint64_t)v60, v27, (unsigned int *)&v61, (uint64_t)&v63, &v59) & 1) == 0)
                goto LABEL_56;
              v51 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < *(_DWORD *)(a1 + 212))
                goto LABEL_56;
              v52 = a6[2];
              if (v52 == a6[3])
              {
                DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
                LODWORD(v52) = a6[2];
              }
              WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a6 + 112 * v52), (const WordLatticeLC *)&v63);
              ++a6[2];
              v53 = *(unsigned int *)(a8 + 8);
              if (v53 == *(_DWORD *)(a8 + 12))
              {
                DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
                v53 = *(unsigned int *)(a8 + 8);
              }
              *(_DWORD *)(*(_QWORD *)a8 + 4 * v53) = 3;
              ++*(_DWORD *)(a8 + 8);
              v61 = v70;
              v62 = v71;
              if (*(_DWORD *)(a1 + 204) - 1 < ++v50)
              {
LABEL_56:
                WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
                break;
              }
              v27 += v51;
              WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
              if (v49 <= v27)
                break;
            }
          }
          DgnIArray<Utterance *>::~DgnIArray((uint64_t)v60);
        }
      }
      return v57;
    }
    v38 = *(_DWORD *)(a1 + 316) - v27;
    v65 = v27;
    *(_DWORD *)v66 = v38;
    memset(&v66[4], 0, 40);
    v67 = 1879048192;
    v68 = 0;
    v69 = -1;
    v63 = &off_24C2149F8;
    v64 = 0xBFF0000000000000;
    v70 = __PAIR64__(*(_DWORD *)(a1 + 2264), v30);
    v71 = *(_OWORD *)(a1 + 2268);
    DgnArray<WordLatticeLC>::add((uint64_t)a6, (WordLatticeLC *)&v63);
    v34 = v32 != 16777213;
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 392) == 0;
    v35 = *(_DWORD *)(a1 + 2256);
    v36 = v35 - v27;
    if ((v35 - v27) < *(_DWORD *)(a1 + 220))
      return v57;
    v37 = *(_DWORD *)(a1 + 316) - v35;
    v65 = v27;
    *(_DWORD *)v66 = v36;
    *(_DWORD *)&v66[4] = v37;
    memset(&v66[8], 0, 36);
    v67 = 1879048192;
    v68 = 0;
    v69 = -1;
    v63 = &off_24C2149F8;
    v64 = 0xBFF0000000000000;
    v70 = __PAIR64__(*(_DWORD *)(a1 + 2264), v30);
    v71 = *(_OWORD *)(a1 + 2268);
    DgnArray<WordLatticeLC>::add((uint64_t)a6, (WordLatticeLC *)&v63);
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v63);
  v21 = DgnPrimArray<unsigned int>::add(a8, 1);
  v27 = *(_DWORD *)(a1 + 316);
  if (v58)
    goto LABEL_29;
  return v57;
}

void sub_2099A618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

void DgnArray<WordLatticeLC>::add(uint64_t a1, WordLatticeLC *a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<WordLatticeLC>::reallocElts(a1, 1, 1);
    v4 = *(_DWORD *)(a1 + 8);
  }
  WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a1 + 112 * v4), a2);
  ++*(_DWORD *)(a1 + 8);
}

uint64_t Recognizer::getPartialResultWord(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, int *a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *Legal;
  uint64_t SeededWeights;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v37;
  uint64_t v38;
  uint64_t v40;
  int *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  __int16 v48;
  int v49;
  int v50;
  __int16 v51;
  int v52;
  void (**v53)(WordLatticeLC *__hidden);
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  char v69;
  _BYTE v70[56];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[2];

  if (!a2 || !*(_DWORD *)(a2 + 8))
    return 0;
  v12 = MemChunkAlloc(0x30uLL, 0);
  *((_DWORD *)v12 + 2) = 0;
  *((_BYTE *)v12 + 32) = 0;
  v12[3] = 0;
  *v12 = (uint64_t)&off_24C217428;
  v12[5] = a2;
  *((_DWORD *)v12 + 3) = *(_DWORD *)(a2 + 8);
  Constraint::prunePreList(*(Constraint **)(a1 + 2216), (RecogGermIterator *)v12, 1, v13, v14, v15, v16, v17);
  v77[0] = 0;
  Legal = Constraint::getLegal(*(_QWORD *)(a1 + 2216), a4, 0, 1, (int *)v77 + 1, a3, v77, 0, 0, 0, 0);
  if (HIDWORD(v77[0]))
  {
    v43 = (uint64_t)Legal;
    v52 = -83886084;
    SeededWeights = Constraint::getSeededWeights(*(_QWORD *)(a1 + 2216), a4, a3);
    v76 = 0u;
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    v72 = 0u;
    v71 = 0u;
    v20 = (_QWORD *)v43;
    LMStats::resetStats((LMStats *)v70);
    v21 = a1 + 624;
    v68 = v21;
    v69 = 1;
    SearchLMScorer::setContext(v21, 4211081212, a4, v43, 1, SeededWeights, (LMStats *)v70, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    v22 = *(unsigned int *)(v43 + 8);
    if ((_DWORD)v22)
    {
      v40 = a5;
      v41 = a6;
      v42 = v12;
      v23 = 0;
      v50 = 0;
      v51 = 0;
      v48 = 0x3FFF;
      v49 = -2;
      v46 = 0;
      v47 = -50331651;
      v24 = 20000;
      v45 = -83886084;
      do
      {
        v25 = *v20 + 16 * v23;
        v26 = *(unsigned int *)(v25 + 8);
        if (*(_DWORD *)(v25 + 8))
        {
          v44 = v23;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = *(_QWORD *)v25 + v27;
            v30 = *(__int16 *)(v29 + 30);
            if ((v30 & 0x80000000) == 0)
            {
              v53 = *(void (***)(WordLatticeLC *__hidden))v29;
              v54 = *(_OWORD *)(v29 + 8);
              v31 = *(__int16 *)(v29 + 28);
              v32 = *(__int16 *)(v29 + 26);
              v33 = SearchLMScorer::lmScoreNonSilCwidac(v21, (unsigned int *)&v53, (LMStats *)v70);
              if (v31 != 20000 && v32 != 20000 && v33 != 20000 && v32 + v31 + v33 < v24)
              {
                v47 = (int)v53;
                v48 = WORD2(v53);
                v50 = v54;
                v51 = HIWORD(v53);
                v49 = DWORD1(v54);
                v37 = (unsigned __int16)v30;
                if ((v30 & 0xFFFE) == 0)
                  v37 = 1;
                v24 = v32 + v31 + v33;
                v45 = HIDWORD(v54);
                v52 = DWORD2(v54);
                v46 = v37;
              }
              v26 = *(unsigned int *)(v25 + 8);
            }
            ++v28;
            v27 += 44;
          }
          while (v28 < v26);
          v20 = (_QWORD *)v43;
          v23 = v44;
          v22 = *(unsigned int *)(v43 + 8);
        }
        ++v23;
      }
      while (v23 < v22);
      if (v24 >= 20000)
      {
        v38 = 0;
      }
      else
      {
        *((_QWORD *)&v54 + 1) = __PAIR64__(v46, a3);
        v55 = 0u;
        v56 = 0u;
        v57 = 0;
        v58 = 1879048192;
        v59 = 0;
        v60 = -1;
        v53 = &off_24C2149F8;
        *(_QWORD *)&v54 = 0xBFF0000000000000;
        v61 = v47;
        v62 = v48;
        v63 = v51;
        v64 = v50;
        v65 = v49;
        v66 = v52;
        v67 = v45;
        *(_QWORD *)(v40 + 8) = 0xBFF0000000000000;
        *(_DWORD *)(v40 + 16) = a3;
        *(_DWORD *)(v40 + 20) = v46;
        *(_QWORD *)(v40 + 56) = 0;
        *(_OWORD *)(v40 + 40) = 0u;
        *(_OWORD *)(v40 + 24) = 0u;
        *(_QWORD *)(v40 + 64) = 1879048192;
        *(_DWORD *)(v40 + 72) = 0;
        *(_QWORD *)(v40 + 80) = -1;
        *(_DWORD *)(v40 + 88) = v47;
        *(_WORD *)(v40 + 92) = v48;
        *(_WORD *)(v40 + 94) = v51;
        *(_DWORD *)(v40 + 96) = v50;
        *(_DWORD *)(v40 + 100) = v49;
        *(_DWORD *)(v40 + 104) = v52;
        *(_DWORD *)(v40 + 108) = v45;
        WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v53);
        *v41 = v24;
        v38 = 1;
      }
      v12 = v42;
    }
    else
    {
      v38 = 0;
    }
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v68);
  }
  else
  {
    v38 = 0;
  }
  (*(void (**)(uint64_t *))*v12)(v12);
  MemChunkFree(v12, 0);
  return v38;
}

void sub_2099A65EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  SearchLMContext::~SearchLMContext((SearchLMContext *)&a36);
  _Unwind_Resume(a1);
}

unint64_t Recognizer::returnIncompleteGerms(int a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int i;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = *(_QWORD *)(*a3 + 8 * a2);
  if (!v5)
    return result;
  v8 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t ***)(v5 + 80);
    v10 = *v9;
    if (*v9)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      v11 = 1;
      while (v8 != v11)
      {
        v10 = v9[v11++];
        if (v10)
        {
          LODWORD(v8) = v11 - 1;
          goto LABEL_11;
        }
      }
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_11:
  v12 = *(unsigned int *)(v5 + 8);
  v13 = *(_DWORD *)(a5 + 12);
  if (v12 > v13)
    result = DgnPrimArray<unsigned long long>::reallocElts(a5, v12 - v13, 0);
  v15 = *(unsigned int *)(a5 + 8);
  if (v15 < v12)
  {
    v16 = v12 - v15;
    v17 = *(_QWORD *)a5 + 8 * v15 + 6;
    do
    {
      *(_QWORD *)(v17 - 6) = 4211081215;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  *(_DWORD *)(a5 + 8) = v12;
  if (v8 >= *(_DWORD *)(v5 + 12))
    return result;
  for (i = 0; ; ++i)
  {
    v19 = *((unsigned int *)v10 + 2);
    if (v10)
      v20 = (unsigned __int16 *)v10 + 6;
    else
      v20 = 0;
    v21 = *v20;
    if (*((_DWORD *)v10 + 2) >> 25 < *(_DWORD *)(a4 + 8))
    {
      v22 = *(_QWORD *)a4 + 16 * (v19 >> 25);
      if ((v19 & 0xFFFFFF) < *(_DWORD *)(v22 + 8))
      {
        v23 = *(_WORD *)(*(_QWORD *)v22 + 2 * (v19 & 0xFFFFFF));
        if (v23 != 20000)
          v21 -= v23;
      }
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * i) = ((unint64_t)v20[1] << 48) | ((unint64_t)v21 << 32) | v19;
    v24 = (uint64_t *)*v10;
    v25 = *(unsigned int *)(v5 + 12);
    if (*v10)
      goto LABEL_33;
    v8 = (v8 + 1);
    if (v8 >= v25)
    {
      v24 = v10;
      goto LABEL_33;
    }
    v26 = *(_QWORD *)(v5 + 80);
    v24 = *(uint64_t **)(v26 + 8 * v8);
    if (!v24)
      break;
LABEL_33:
    v10 = v24;
    if (v8 >= v25)
      return result;
  }
  v27 = (uint64_t *)(v26 + 8 * v8 + 8);
  v28 = ~v8 + v25;
  while (v28)
  {
    v29 = (uint64_t *)*v27++;
    v24 = v29;
    LODWORD(v8) = v8 + 1;
    --v28;
    if (v29)
      goto LABEL_33;
  }
  return result;
}

uint64_t *Recognizer::makeRecognizerResults(Recognizer *this, LatticeStats *a2, int a3)
{
  int BestHistoryMaybeExtend;
  int v7;
  uint64_t *SilentLattice;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CWIDCrumbBank *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  _BOOL8 v19;
  _BOOL4 v20;
  int LatticeType;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  char v26;
  int v27;
  uint64_t *v28;
  CWIDCrumbBank *v29;
  const HistoryMgr *v30;
  unsigned int v31;
  char v32;
  uint64_t **v33;
  int v34;
  int v35;
  uint64_t *Lattice;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned int i;
  unsigned int j;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t *v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  SearchLMScorer *v86;
  int v87;
  uint64_t v88;
  int v89[2];
  __int128 v90;
  int v91;
  void *v92[2];

  v91 = 1879048192;
  BestHistoryMaybeExtend = Recognizer::getBestHistoryMaybeExtend(this, (char)a2, *((unsigned __int8 *)this + 149), &v91);
  v7 = v91;
  if (v91 == 1879048192 && (a3 & 1) == 0)
  {
    SilentLattice = 0;
    *((_BYTE *)this + 2240) = 1;
    return SilentLattice;
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2024), 1, 1, 1, 1);
  v13 = (CWIDCrumbBank *)*((_QWORD *)this + 46);
  v84 = VocMgr::smpVocMgr;
  v14 = *((_DWORD *)this + 77);
  if (v14)
  {
    v14 = CWIDCrumbBank::getLastFrame(v13) + 1;
    v15 = *((_DWORD *)this + 77);
  }
  else
  {
    v15 = 0;
  }
  if (v14)
    v16 = BestHistoryMaybeExtend == -2;
  else
    v16 = 1;
  v17 = !v16;
  v18 = *((_DWORD *)this + 43);
  v87 = v14;
  v83 = v15;
  if (v18 != 2)
  {
    if (v18 == 3)
    {
      v19 = 0;
      v20 = 0;
      v18 = 1;
      goto LABEL_18;
    }
    v18 = 3;
  }
  v19 = *((_BYTE *)this + 144) != 0;
  v20 = *((_BYTE *)this + 145) != 0;
LABEL_18:
  LatticeType = BackTraceLatticeBuilder::getLatticeType((BackTraceLatticeBuilder *)v19, v20, v18, *((unsigned __int8 *)this + 148), v9, v10, v11, v12);
  v82 = a3;
  v85 = v17;
  if (!LatticeType
    && *((_BYTE *)this + 144)
    && *((_DWORD *)this + 43) == 2
    && (*((_BYTE *)this + 145) ? (v27 = v17) : (v27 = 0), v27 == 1))
  {
    v24 = HistoryMgr::copyAndOverrideToBigramHistories((HistoryMgr *)(*((_QWORD *)this + 35) + 72));
    v28 = MemChunkAlloc(0x38uLL, 0);
    v29 = CWIDCrumbBank::CWIDCrumbBank((CWIDCrumbBank *)v28, (const HistoryMgr *)(*((_QWORD *)this + 35) + 72));
    CWIDCrumbBank::copy(v29, v13);
    CWIDCrumbBank::mergeCrumbs((unsigned int *)v28, v30);
    CWIDCrumbBank::updateCrumbHistory(v28, v24);
    v22 = 1;
    v23 = (uint64_t)v13;
    v13 = (CWIDCrumbBank *)v28;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  Latch<MemChunkRegion,LatchAdapter>::Latch(v89, (uint64_t)&gGlobalMemChunkRegion);
  v25 = MemChunkAlloc(0x238uLL, 0);
  v86 = (Recognizer *)((char *)this + 624);
  if (*((_BYTE *)this + 8))
    v26 = 0;
  else
    v26 = *((_BYTE *)this + 146) == 0;
  BackTraceLatticeBuilder::BackTraceLatticeBuilder((uint64_t)v25, *((Constraint **)this + 277), (uint64_t)v13, *((_QWORD *)this + 35) + 302952, (uint64_t)v86, *((_BYTE *)this + 304) != 0, LatticeType, *((_DWORD *)this + 28), *((double *)this + 13), *((_DWORD *)this + 29), *((_DWORD *)this + 30), *((_DWORD *)this + 31), *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_BYTE *)this + 147) != 0, *((_BYTE *)this + 148) != 0, v26,
    *((_DWORD *)this + 38),
    *((_DWORD *)this + 14),
    *((_BYTE *)this + 166),
    *((_BYTE *)this + 196),
    v22,
    v23,
    v24);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v89);
  if (v85)
  {
    if (v7 == 1879048192)
    {
      *(_QWORD *)v89 = 0x3FFFFCFFFFFDLL;
      v90 = xmmword_209A593D0;
      v31 = Recognizer::extendHistory((uint64_t)this, BestHistoryMaybeExtend, v89, 0, *((_DWORD *)this + 77), *((_DWORD *)this + 77));
      v32 = CWIDCrumbBank::setTopChoiceHistoryExtendToEnd(v13, v31, *((_DWORD *)this + 77));
    }
    else
    {
      v89[0] = 1879048192;
      LODWORD(v92[0]) = -2;
      CWIDCrumbBank::getRightSilenceInfo((uint64_t)v13, v87 - 1, (unsigned int *)v92, v89);
      CWIDCrumbBank::setTopChoiceHistory((uint64_t *)v13, v92[0]);
      v32 = 0;
    }
    v35 = *((_DWORD *)this + 4) + *((_DWORD *)this + 3);
    Latch<MemChunkRegion,LatchAdapter>::Latch(v89, (uint64_t)&gGlobalMemChunkRegion);
    Lattice = BackTraceLatticeBuilder::makeLattice((BackTraceLatticeBuilder *)v25, *((_WORD *)this + 264), *((PelScorer **)this + 34), v7 == 1879048192, v32, *((unsigned __int8 *)this + 100), (Recognizer *)((char *)this + 1616), v35, *((_DWORD *)this + 88), *((_DWORD *)this + 89), (char)a2);
    SilentLattice = Lattice;
    v37 = v7 == 1879048192;
    if (*((_BYTE *)this + 304))
      v38 = v82;
    else
      v38 = 0;
    *((_BYTE *)Lattice + 209) = v37;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v89);
    if (v23)
    {
      DgnDelete<CWIDCrumbBank>((uint64_t)v13);
      *((_BYTE *)SilentLattice + 207) = v83 == v87;
      v33 = (uint64_t **)v84;
      if ((v38 & 1) != 0)
      {
LABEL_40:
        v39 = *((_DWORD *)this + 77);
        for (i = *((_DWORD *)this + 58); v39 > i; *((_DWORD *)this + 58) = i)
        {
          if (i == *((_DWORD *)this + 59))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 224, 1, 1);
            i = *((_DWORD *)this + 58);
          }
          *(_DWORD *)(*((_QWORD *)this + 28) + 4 * i) = 0;
          i = *((_DWORD *)this + 58) + 1;
        }
        for (j = *((_DWORD *)this + 62); v39 > j; *((_DWORD *)this + 62) = j)
        {
          if (j == *((_DWORD *)this + 63))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 240, 1, 1);
            j = *((_DWORD *)this + 62);
          }
          *(_DWORD *)(*((_QWORD *)this + 30) + 4 * j) = 0;
          j = *((_DWORD *)this + 62) + 1;
        }
        v34 = 1;
        goto LABEL_51;
      }
    }
    else
    {
      *((_BYTE *)SilentLattice + 207) = v83 == v87;
      v33 = (uint64_t **)v84;
      if (v38)
        goto LABEL_40;
    }
    v34 = 0;
  }
  else
  {
    Latch<MemChunkRegion,LatchAdapter>::Latch(v89, (uint64_t)&gGlobalMemChunkRegion);
    SilentLattice = BackTraceLatticeBuilder::makeSilentLattice((BackTraceLatticeBuilder *)*((unsigned __int16 *)this + 264), *((_DWORD *)this + 77), *((_DWORD *)this + 88), *((_DWORD *)this + 89), *((unsigned __int8 *)this + 304), (uint64_t)this + 1616, a2);
    *(_WORD *)((char *)SilentLattice + 209) = 257;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v89);
    v33 = (uint64_t **)v84;
    v34 = 0;
    *((_BYTE *)SilentLattice + 207) = v83 == v87;
  }
LABEL_51:
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v88, (uint64_t)&gGlobalMemChunkRegion);
  if (v25)
  {
    BackTraceLatticeBuilder::~BackTraceLatticeBuilder((BackTraceLatticeBuilder *)v25);
    MemChunkFree(v42, 0);
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2056), 1, 1, 1, 1);
  v50 = *((_QWORD *)this + 277);
  if ((*(_DWORD *)(v50 + 68) & 0xFFFFFFFD) == 0 && *(_DWORD *)(v50 + 192))
    WordLattice::computeParseTokens((uint64_t)SilentLattice, v50 + 168, (uint64_t *)(v50 + 184));
  if (*((_BYTE *)SilentLattice + 210))
    goto LABEL_57;
  if (*((_BYTE *)this + 304))
  {
    if (*((_BYTE *)this + 146))
    {
      SnapTime::recordTime((Recognizer *)((char *)this + 2184), 1, 1, 1, 1);
      WordLattice::addSegmentations((WordLattice *)SilentLattice, *((const Active **)this + 35), *((const PhnMgr **)this + 32), *((const PicMgr **)this + 33));
      if (*((_BYTE *)SilentLattice + 210))
        goto LABEL_57;
    }
  }
  if (!*((_BYTE *)this + 675))
  {
    v58 = *((unsigned __int8 *)this + 678);
    if (!*((_BYTE *)this + 678))
    {
      v59 = 0;
      goto LABEL_111;
    }
  }
  if (WordLattice::hasCollapsedWords((WordLattice *)SilentLattice))
  {
    v59 = 0;
    v58 = 0;
    goto LABEL_111;
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2088), 1, 1, 1, 1);
  *(_QWORD *)v89 = 0;
  *(_QWORD *)&v90 = 0;
  if (!*((_DWORD *)SilentLattice + 26))
  {
LABEL_107:
    v75 = 0;
    v74 = 0;
    goto LABEL_108;
  }
  v62 = 0;
  do
  {
    v63 = SilentLattice[16] + 136 * *(unsigned int *)(SilentLattice[12] + 4 * v62);
    v66 = *(_DWORD *)(v63 + 88);
    v64 = (unsigned int *)(v63 + 88);
    v65 = v66;
    if (v66 >> 27 != 31)
    {
      v67 = v90;
      if (!(_DWORD)v90)
        goto LABEL_90;
      v68 = *(unsigned __int16 **)v89;
      v69 = v90;
      v70 = 0xFFFFFFFFLL;
      while (1)
      {
        v71 = *v68++;
        if (v71 == v65 >> 25)
          break;
        --v70;
        if (!--v69)
          goto LABEL_90;
      }
      if (!v70)
      {
LABEL_90:
        v72 = *((_QWORD *)this + 277);
        if ((*(_DWORD *)(v72 + 68) & 0xFFFFFFFD) == 0)
        {
          if (!Constraint::isLMAllowedForState(v72, v64))
            goto LABEL_96;
          v67 = v90;
        }
        if (v67 == DWORD1(v90))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v89, 1, 1);
          v67 = v90;
        }
        *(_WORD *)(*(_QWORD *)v89 + 2 * v67) = v65 >> 25;
        LODWORD(v90) = v67 + 1;
      }
    }
LABEL_96:
    ++v62;
  }
  while (v62 < *((unsigned int *)SilentLattice + 26));
  if (!(_DWORD)v90)
    goto LABEL_107;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  do
  {
    v76 = **v33;
    v77 = *(_QWORD *)(*(_QWORD *)(v76 + 8 * *(unsigned __int16 *)(*(_QWORD *)v89 + 2 * v73)) + 72);
    if (*((_BYTE *)this + 675)
      && (*(unsigned int (**)(_QWORD, unsigned int *))(*(_QWORD *)v77 + 448))(*(_QWORD *)(*(_QWORD *)(v76 + 8 * *(unsigned __int16 *)(*(_QWORD *)v89 + 2 * v73)) + 72), v64))
    {
      v75 = 1;
    }
    if (*((_BYTE *)this + 678) && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 312))(v77, 0))
      v74 = 1;
    ++v73;
  }
  while (v73 < v90);
LABEL_108:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v89);
  v59 = v75 & 1;
  v58 = v74 & 1;
  if ((v59 & 1) != 0)
  {
LABEL_113:
    if (*((_DWORD *)this + 184))
      v79 = **((_DWORD **)this + 91);
    else
      v79 = -50331650;
    if (v59)
      v80 = 4;
    else
      v80 = 3;
    v78 = WordLattice::expandLMContext((WordLattice *)SilentLattice, v80, v79, *((_DWORD *)this + 48), (uint64_t)this + 1616, (_DWORD *)this + 584, (_DWORD *)this + 585);
    if (v78 != 1)
    {
      SnapTime::recordTime((Recognizer *)((char *)this + 2120), 1, 1, 1, 1);
      WordLattice::rescoreLatticeLM((WordLattice *)SilentLattice, v86, (Recognizer *)((char *)this + 1616), v59);
    }
    goto LABEL_121;
  }
LABEL_111:
  if (v58)
    goto LABEL_113;
  v78 = 0;
LABEL_121:
  SnapTime::recordTime((Recognizer *)((char *)this + 2152), 1, 1, 1, 1);
  if (*((_BYTE *)this + 304) && *((_BYTE *)this + 146))
  {
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
  }
  else
  {
    v81 = MemChunkAlloc(0x120uLL, 0);
    WordLattice::WordLattice((WordLattice *)v81, (const WordLattice *)SilentLattice, 0, 0, 0, 0, 0, 0);
    if (SilentLattice)
    {
      (*(void (**)(uint64_t *))(*SilentLattice + 48))(SilentLattice);
      MemChunkFree(SilentLattice, 0);
    }
    SilentLattice = v81;
  }
  WordLattice::maybePruneToNumUniquePaths((uint64_t)SilentLattice, *((_DWORD *)this + 47));
  if (!*((_BYTE *)SilentLattice + 210) && v78 == 1)
    *((_BYTE *)SilentLattice + 210) = 1;
LABEL_57:
  v51 = *((_QWORD *)this + 277);
  if ((*(_DWORD *)(v51 + 68) & 0xFFFFFFFD) == 0 && *(_DWORD *)(v51 + 192))
    WordLattice::fixStateIds((uint64_t)SilentLattice, v43, v44, v45, v46, v47, v48, v49);
  if (v34)
  {
    v52 = *(_QWORD *)(*((_QWORD *)this + 34) + 120);
    v53 = *(unsigned int *)(v52 + 480);
    *(_QWORD *)v89 = 0;
    *(_QWORD *)&v90 = 0;
    if ((_DWORD)v53)
    {
      v92[0] = 0;
      v54 = realloc_array(0, v92, 2 * v53, 0, 0, 1);
      v55 = 0;
      v56 = (unsigned __int16 *)v92[0];
      *(void **)v89 = v92[0];
      LODWORD(v90) = v53;
      DWORD1(v90) = v54 >> 1;
      v57 = *(_QWORD *)(v52 + 472) + 2;
      do
      {
        v56[v55] = *(_WORD *)(v57 + 1 * v55);
        ++v55;
      }
      while (v53 != v55);
    }
    else
    {
      v56 = 0;
      LODWORD(v90) = 0;
    }
    v60 = *((_DWORD *)this + 77);
    while (v60 > v53)
    {
      if ((_DWORD)v53 == DWORD1(v90))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)v89, 1, 1);
        LODWORD(v53) = v90;
        v56 = *(unsigned __int16 **)v89;
      }
      v56[v53] = 0;
      LODWORD(v53) = v53 + 1;
      LODWORD(v90) = v53;
    }
    WordLattice::computeConfidencePredictorsForLinks((uint64_t)SilentLattice, (uint64_t)this + 224, (uint64_t *)this + 30, (__int16 **)v89);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v89);
  }
  *((_BYTE *)this + 2240) = 1;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v88);
  return SilentLattice;
}

void sub_2099A7174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t Recognizer::shadowBest(Recognizer *this, Recognizer *a2, int a3, int a4, char a5)
{
  return NetMgr::shadowBest(*((_QWORD *)this + 35) + 16, (NetMgr *)(*((_QWORD *)a2 + 35) + 16), a3, a4, a5);
}

uint64_t *Recognizer::setPelScores(PelScoreCacheData **this, const PelScoreCacheData *a2)
{
  uint64_t *result;

  DgnDelete<PelScoreCacheData>(this[37]);
  if (a2)
    result = PelScoreCacheData::clone(a2);
  else
    result = 0;
  this[37] = (PelScoreCacheData *)result;
  return result;
}

uint64_t Recognizer::beginTrackingConfidenceStatistics(uint64_t this)
{
  *(_DWORD *)(this + 232) = 0;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

_DWORD *Recognizer::setInitialContext(uint64_t a1, uint64_t *a2)
{
  return SearchLMScorer::setInitialContext((_DWORD *)(a1 + 624), a2);
}

__n128 Recognizer::setContextPars(uint64_t a1, __n128 *a2)
{
  uint64_t *v4;
  __n128 result;

  v4 = MemChunkAlloc(0x18uLL, 0);
  result = *a2;
  *(__n128 *)v4 = *a2;
  *((_DWORD *)v4 + 4) = a2[1].n128_u32[0];
  *((_BYTE *)v4 + 20) = a2[1].n128_u8[4];
  *(_QWORD *)(a1 + 760) = v4;
  return result;
}

uint64_t Recognizer::setRightGermsBackward(Recognizer *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *(_DWORD *)(*((_QWORD *)this + 35) + 303248);
  *((_DWORD *)this + 148) = 0;
  v3 = *((_DWORD *)this + 149);
  if (v2 > v3)
    DgnArray<RecogGerm>::reallocElts((uint64_t)this + 584, v2 - v3, 0);
  *((_DWORD *)this + 144) = 0;
  v4 = *((_DWORD *)this + 145);
  if (v2 > v4)
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 568, v2 - v4, 0);
  *((_DWORD *)this + 144) = v2;
  v5 = *(unsigned int *)(*((_QWORD *)this + 35) + 303248);
  if ((int)v5 - 1 < 0)
    return 0;
  v6 = 0;
  result = 0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 35) + 303240);
  v9 = -1;
  do
  {
    v10 = *(_QWORD *)(v8 + 8 * (v5 + v9));
    v11 = *(_QWORD *)(v10 + 8);
    if (*(_DWORD *)(v11 + 104) || *(_BYTE *)(v11 + 112))
    {
      *(_QWORD *)(*((_QWORD *)this + 71) + 8 * v6) = v10;
      v12 = *(_QWORD *)(v10 + 8);
      if (*((_DWORD *)this + 151) >= *(__int16 *)(v12 + 108))
      {
        v13 = *(_DWORD *)(v12 + 16);
        if (v13 >> 25 == 126)
        {
          if (v13 == -50331650)
            result = v10;
        }
        else
        {
          v14 = *((_DWORD *)this + 148);
          v15 = *((_QWORD *)this + 73) + 44 * v14;
          *(_QWORD *)v15 = 0x3FFFFAFFFFFFLL;
          *(_OWORD *)(v15 + 8) = xmmword_209A593D0;
          *((_DWORD *)this + 148) = v14 + 1;
          *(_DWORD *)v15 = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v15 + 4) = *(_DWORD *)(v12 + 20);
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v12 + 24);
          *(_BYTE *)(v15 + 24) = 0;
          *(_DWORD *)(v15 + 26) = 1310720000;
          *(_WORD *)(v15 + 30) = 0;
          *(_QWORD *)(v15 + 32) = 0x70000000FFFFFFFELL;
          *(_DWORD *)(v15 + 40) = v6;
        }
      }
    }
    ++v6;
    --v9;
  }
  while (v5 != v6);
  return result;
}

uint64_t *Recognizer::doBackward(Recognizer *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *result;
  int v11;
  _QWORD *Legal;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  _BYTE v37[6];
  uint64_t v38;
  int v39;

  v23 = Recognizer::setRightGermsBackward(this);
  v2 = (_QWORD *)*((_QWORD *)this + 48);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 48));
    MemChunkFree(v2, 0);
  }
  v3 = MemChunkAlloc(0x30uLL, 0);
  *((_DWORD *)v3 + 2) = 0;
  *((_BYTE *)v3 + 32) = 0;
  v3[3] = 0;
  *v3 = (uint64_t)&off_24C218850;
  v3[5] = (uint64_t)this + 584;
  *((_DWORD *)v3 + 3) = *((_DWORD *)this + 148);
  *((_QWORD *)this + 48) = v3;
  Constraint::prunePreList(*((Constraint **)this + 277), (RecogGermIterator *)v3, 1, v4, v5, v6, v7, v8);
  v9 = (_QWORD *)*((_QWORD *)this + 47);
  if (v9)
  {
    (*(void (**)(_QWORD))*v9)(*((_QWORD *)this + 47));
    MemChunkFree(v9, 0);
  }
  *((_QWORD *)this + 47) = 0;
  result = MemChunkAlloc(0x30uLL, 0);
  result[3] = 0;
  *result = (uint64_t)&off_24C2177C0;
  result[5] = (uint64_t)this + 2224;
  v11 = *((_DWORD *)this + 558);
  *((_DWORD *)result + 3) = v11;
  *((_QWORD *)this + 47) = result;
  v34 = 0x3FFFFAFFFFFFLL;
  v35 = xmmword_209A593D0;
  v36 = 0;
  *(_DWORD *)v37 = 1310720000;
  *(_WORD *)&v37[4] = 0;
  v38 = 0x70000000FFFFFFFELL;
  *((_BYTE *)result + 32) = 0;
  *((_DWORD *)result + 2) = 0;
  if (v11)
  {
    do
    {
      (*(void (**)(uint64_t *, uint64_t *))(*result + 16))(result, &v34);
      v32 = v34;
      v33 = v35;
      if (v34 >> 25 == 126)
      {
        v34 = 0x3FFFFCFFFFFDLL;
        v35 = xmmword_209A593D0;
      }
      v31 = 0;
      Legal = Constraint::getLegal(*((_QWORD *)this + 277), (unsigned int *)&v32, 0, 0, &v31, *((_DWORD *)this + 79), (_DWORD *)this + 308, 0, 0, 0, 0);
      if (v31)
      {
        v13 = Legal;
        v14 = *((unsigned __int16 *)Legal + 4);
        if (*((_WORD *)Legal + 4))
        {
          v15 = 0;
          do
          {
            v16 = *v13 + 16 * v15;
            if (*(_DWORD *)(v16 + 8))
            {
              v17 = 0;
              v18 = 40;
              do
              {
                v19 = *(_QWORD *)(*((_QWORD *)this + 71) + 8 * *(unsigned int *)(*(_QWORD *)v16 + v18));
                Recognizer::seedOneBackward((uint64_t)this, v19, (unsigned __int16)v15, (unsigned int *)&v34);
                if (*((_BYTE *)this + 304) && v34 >> 25 != 126)
                  Recognizer::seedOneBackward((uint64_t)this, v19, 0, (unsigned int *)&v34);
                ++v17;
                v18 += 44;
              }
              while (v17 < *(unsigned int *)(v16 + 8));
            }
            ++v15;
          }
          while (v15 != v14);
        }
      }
      if (v23)
      {
        if (v32 >> 25 == 126
          || (v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                          + (((unint64_t)v32 >> 22) & 0x3F8))
                              + 48),
              v21 = v32 & 0xFFFFFF,
              *(_WORD *)(*(_QWORD *)(v20 + 32) + 2 * v21) != 1)
          || *(_WORD *)(*(_QWORD *)(v20 + 592) + 2 * v21))
        {
          if (Constraint::getCanSeedFinalSilence(*((_QWORD *)this + 277), (unsigned int *)&v32, *((_DWORD *)this + 79)))
          {
            v24 = v34;
            v25 = v35;
            v26 = v36;
            v27 = *(_WORD *)v37;
            v28 = *(_DWORD *)&v37[2];
            v29 = v38;
            v30 = v39;
            Recognizer::seedOneBackward((uint64_t)this, v23, 0, (unsigned int *)&v24);
          }
        }
      }
      result = (uint64_t *)*((_QWORD *)this + 47);
      v22 = *((_DWORD *)result + 2) + 1;
      *((_DWORD *)result + 2) = v22;
      if (*((_BYTE *)result + 32))
      {
        (*(void (**)(uint64_t *))(*result + 24))(result);
        result = (uint64_t *)*((_QWORD *)this + 47);
        v22 = *((_DWORD *)result + 2);
      }
    }
    while (v22 != *((_DWORD *)result + 3));
  }
  return result;
}

uint64_t Recognizer::seedOneBackward(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  _QWORD v23[2];

  v8 = *a4;
  if (v8 >> 25 == 126)
    v9 = 0;
  else
    v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v8 >> 22) & 0x3F8))
                                                     + 48)
                                         + 608)
                             + 2 * (v8 & 0xFFFFFF));
  result = *(_QWORD *)(a2 + 8);
  if ((_DWORD)a3
    || (*(_BYTE *)(a1 + 304) ? (v11 = (*(_DWORD *)(result + 16) & 0xFE000000) == -67108864) : (v11 = 1), v11))
  {
    v12 = *(_DWORD *)(result + 40);
    if (v12 < 2)
    {
      v13 = 0;
    }
    else if (v12 - 3 >= 2)
    {
      v13 = 255;
      if (v12 == 2)
        v13 = 1;
    }
    else
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)(result + 88) + v9);
    }
    v15 = 0;
    v14 = *(_QWORD *)(result + 72) + 8 * v13;
  }
  else
  {
    v14 = *(_QWORD *)(result + 72);
    v15 = 1;
  }
  v16 = *(int **)v14;
  v17 = *(__int16 *)(*(_QWORD *)v14 + 8);
  if (*(_DWORD *)(a1 + 604) >= v17)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result) + v17;
    v19 = *(_DWORD *)(a1 + 612);
    v20 = v19;
    if (v15)
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 104))(*(_QWORD *)(a2 + 8));
    v21 = Recognizer::extendHistory(a1, *v16, (int *)(*(_QWORD *)(a2 + 8) + 16), v20 != v19, v20, v19);
    v23[0] = &unk_24C217688;
    v23[1] = a2;
    return Recognizer::seedOneFromPort(a1, (uint64_t)v23, a3, v18, 0, 0, 0, 0, 0, v21, (uint64_t)a4, v22, 20000);
  }
  return result;
}

uint64_t Recognizer::seedOneFromPort(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, uint64_t a11, int a12, int a13)
{
  uint64_t result;
  unsigned int *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t *Bucket;
  uint64_t v29;
  uint64_t v30;
  uint64_t active;
  _BOOL4 v32;
  uint64_t *v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int v37;
  int MaxEndTime;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  __int128 v51;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v21 = (unsigned int *)result;
  v22 = *(_DWORD *)(a1 + 600);
  if (a13 == 20000)
    v23 = 0;
  else
    v23 = a13;
  v24 = (a5 + a4 + a6 + a7 - a8 + v23);
  if (a13 != 20000)
    v22 += *(_DWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 304))
  {
    v25 = a9;
    if (a9 == -1)
    {
      v22 = 5000;
LABEL_13:
      a4 = v24;
      goto LABEL_17;
    }
    v26 = *(__int16 *)(a11 + 28);
    if (v26 == 20000)
    {
      if (!*(_BYTE *)(a1 + 165))
        v25 = 0;
      v22 -= v25;
      goto LABEL_13;
    }
    if (!*(_BYTE *)(a1 + 164))
      v26 = 0;
    a4 = v26 + v24;
    v22 -= a9;
  }
LABEL_17:
  if (a4 <= v22)
  {
    v27 = *(_DWORD *)(a11 + 4);
    v49 = *(_DWORD *)a11;
    v50 = v27;
    v51 = *(_OWORD *)(a11 + 8);
    if (v49 >> 25 == 126)
    {
      Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(_QWORD *)(a1 + 280) + 303024, (uint64_t)&v49);
      if (!*Bucket || (v29 = *(_QWORD *)(*Bucket + 40)) == 0)
      {
        v30 = *(_QWORD *)(a1 + 280);
        if (*(_BYTE *)(a1 + 304))
          active = Active::newActiveWordSilence(v30, (uint64_t)&v49);
        else
          active = Active::newActiveWordNonAcoustic(v30, (uint64_t)&v49);
        v29 = active;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 166))
        HIWORD(v50) = a3;
      v48 = 0xFFFFFFFE00000000;
      v32 = MergedActive::convertToMergedCWIDAC((MergedActive *)(a1 + 392), &v49, (unsigned int *)&v48);
      v33 = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(_QWORD *)(a1 + 280) + 303024, (uint64_t)&v49);
      if (!*v33 || (v29 = *(_QWORD *)(*v33 + 40)) == 0)
      {
        v34 = *(_QWORD *)(a1 + 280);
        if (*(_BYTE *)(a1 + 304))
        {
          if (*(_DWORD *)(a1 + 312))
            v35 = 0;
          else
            v35 = *(_BYTE *)(a1 + 25) != 0;
          v36 = Active::newActiveWord(v34, &v49, a8, *(_DWORD *)(a1 + 76), v35);
        }
        else
        {
          v36 = Active::newActiveWordNonAcoustic(v34, (uint64_t)&v49);
        }
        v29 = v36;
      }
      if (v32)
      {
        v37 = v21[3];
        v46 = ((unint64_t)*v21 >> 25) | ((unint64_t)v21[2] << 32);
        v47 = v37;
        MergedStateTransition::updateMergedStateTransition(*(_QWORD *)(v29 + 24), (unsigned __int16 *)&v46, (uint64_t)&v48);
        MaxEndTime = Constraint::getMaxEndTime(*(_QWORD *)(a1 + 2216), (unsigned int *)a11);
        v45 = *(_DWORD *)(v29 + 32);
        if (v45 <= MaxEndTime)
          v45 = MaxEndTime;
        *(_DWORD *)(v29 + 32) = v45;
        if (Constraint::getSuccessorRecursivePrefilteringAllowed(*(unsigned __int16 **)(a1 + 2216), (unsigned int *)a11, v39, v40, v41, v42, v43, v44))
        {
          *(_BYTE *)(v29 + 36) = 1;
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 24))(v29, a3, v24, a10);
  }
  return result;
}

BOOL MergedActive::convertToMergedCWIDAC(MergedActive *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v6;
  _BOOL8 result;
  StateMgr *v8;
  unsigned int v9;

  if (!*(_QWORD *)a1)
    return 0;
  v6 = *a2;
  result = MergedActive::isCWIDAllowMerge(a1, *a2);
  if (result)
  {
    v8 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v6 >> 22) & 0x3F8)) + 56);
    v9 = a2[2];
    *a3 = v9;
    if (*((_BYTE *)a1 + 128))
    {
      result = MergedActive::isStateAllowMerge(a1, v8, v9);
      if (result)
      {
        *((_WORD *)a2 + 2) = 0x3FFF;
        a2[2] = -1;
        result = 1;
      }
    }
    else
    {
      result = 0;
    }
    a3[1] = a2[3];
    if (*((_BYTE *)a1 + 129))
    {
      a2[3] = -3;
      return 1;
    }
  }
  return result;
}

uint64_t Recognizer::seedFromOnePredToOnePhoneForward(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  LMStats *v24;
  uint64_t v25;

  v8 = *((unsigned int *)a8 + 2);
  if ((int)v8 >= 1)
  {
    v11 = result;
    v24 = (LMStats *)(result + 1056);
    v25 = result + 624;
    v12 = v8 + 1;
    do
    {
      v13 = v12 - 2;
      v14 = *a8;
      v15 = (unsigned int *)(*a8 + 44 * (v12 - 2));
      if (!*(_BYTE *)(v11 + 361)
        || (result = *(_QWORD *)(v11 + 2216), (*(_DWORD *)(result + 68) & 0xFFFFFFFD) != 0)
        || (result = Constraint::isPrecedingNonAcousticWordRequiredForState(result, (unsigned int *)(*a8 + 44 * v13)),
            (result & 1) == 0))
      {
        if (a6 == -2)
        {
          v16 = 0;
        }
        else
        {
          result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(_QWORD *)(v11 + 2216), (uint64_t)v15, *(_DWORD *)(v11 + 324) + a4);
          v16 = result;
        }
        if (a7 == -2
          || (v18 = *v15, v18 >> 25 != 126)
          && (v19 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v18 >> 22) & 0x3F8)) + 48),
              v20 = v18 & 0xFFFFFF,
              *(_WORD *)(*(_QWORD *)(v19 + 32) + 2 * v20) == 1)
          && !*(_WORD *)(*(_QWORD *)(v19 + 592) + 2 * v20))
        {
          v17 = 0;
        }
        else
        {
          result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(_QWORD *)(v11 + 2216), (uint64_t)v15, *(_DWORD *)(v11 + 324) + a5);
          v17 = result;
        }
        if ((v16 | v17) == 1)
        {
          result = SearchLMScorer::lmScoreNonSilCwidac(v25, v15, v24);
          v21 = result;
          if (v16)
            result = Recognizer::seedOneFromPort(v11, a2, a3, a4, result, *(__int16 *)(v14 + 44 * v13 + 26), *(_DWORD *)(v11 + 152), *(_DWORD *)(v11 + 48), *(_DWORD *)(v11 + 156), a6, (uint64_t)v15, v22, 20000);
          if (v17)
            result = Recognizer::seedOneFromPort(v11, a2, 0, a5, v21, *(__int16 *)(v14 + 44 * v13 + 26), *(_DWORD *)(v11 + 152), *(_DWORD *)(v11 + 48), *(_DWORD *)(v11 + 156), a7, (uint64_t)v15, v22, 20000);
        }
      }
      --v12;
    }
    while (v12 > 1);
  }
  return result;
}

uint64_t Recognizer::seedFromOnePredToOnePhoneWithNonAcousticWordForward(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, uint64_t *a8, int a9, int **a10)
{
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  LMStats *v28;
  uint64_t v29;

  v10 = *((unsigned int *)a8 + 2);
  if ((int)v10 >= 1)
  {
    v12 = result;
    v29 = result + 624;
    v28 = (LMStats *)(result + 1056);
    v13 = v10 + 1;
    do
    {
      result = *(_QWORD *)(v12 + 2216);
      if ((*(_DWORD *)(result + 68) & 0xFFFFFFFD) == 0)
      {
        v14 = v13 - 2;
        v15 = *a8;
        v16 = (unsigned int *)(*a8 + 44 * (v13 - 2));
        result = Constraint::isPrecedingNonAcousticWordValidForState(result, v16, a9);
        if ((_DWORD)result)
        {
          if (v16[5] != -83886084)
          {
            if (a6 == -2)
            {
              v17 = 0;
            }
            else
            {
              result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(_QWORD *)(v12 + 2216), (uint64_t)v16, *(_DWORD *)(v12 + 324) + a4);
              v17 = result;
            }
            if (a7 == -2)
            {
              v18 = 0;
            }
            else
            {
              result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(_QWORD *)(v12 + 2216), (uint64_t)v16, *(_DWORD *)(v12 + 324) + a5);
              v18 = result;
            }
            if ((v17 | v18) == 1)
            {
              v19 = SearchLMScorer::lmScoreNonSilCwidac(v29, v16, v28);
              result = *(_QWORD *)(v12 + 2216);
              if ((*(_DWORD *)(result + 68) & 0xFFFFFFFD) != 0
                || (v20 = v19, result = Constraint::getWeightsForState(result, v16), v19 = v20, (_DWORD)result == 0xFFFF))
              {
                v21 = *a10;
              }
              else
              {
                v21 = &(*a10)[result];
              }
              v22 = *v21;
              v23 = *(_DWORD *)(v12 + 68);
              if (v23 == -1 || v22 + v19 <= v23)
              {
                if (v17)
                {
                  v24 = v19;
                  result = Recognizer::seedOneFromPort(v12, a2, a3, a4, v19, *(__int16 *)(v15 + 44 * v14 + 26), *(_DWORD *)(v12 + 152), *(_DWORD *)(v12 + 48), *(_DWORD *)(v12 + 156), a6, (uint64_t)v16, v25, v22);
                  v19 = v24;
                }
                if (v18)
                  result = Recognizer::seedOneFromPort(v12, a2, 0, a5, v19, *(__int16 *)(v15 + 44 * v14 + 26), *(_DWORD *)(v12 + 152), *(_DWORD *)(v12 + 48), *(_DWORD *)(v12 + 156), a7, (uint64_t)v16, v25, v22);
              }
            }
          }
        }
      }
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

_QWORD *Recognizer::seedFromOnePredForward(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  LMStats *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  int v40;
  int v41;
  _BOOL4 v42;
  _QWORD *Legal;
  uint64_t SeededPrecedingNonAcousticWords;
  unsigned int *v45;
  _QWORD *v46;
  unsigned int *v47;
  int WeightsForState;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  _DWORD *v74;
  int v75;
  signed int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int16 v81;
  signed int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  signed int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int *v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  LMStats *v123;
  uint64_t v124;
  unsigned int v125;
  SearchLMScorer *v126;
  LMStats *v127;
  uint64_t v128;
  _BYTE *v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int *v152;
  BOOL v153;
  BOOL v154;
  unsigned int v155;
  LMStats *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  char v184;
  uint64_t v185;
  int v186;
  int *v188;
  unsigned int v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  int v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  uint64_t *v237;
  int v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  unsigned int v249;
  unsigned int *v250;
  int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  _QWORD *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  _QWORD *v261;
  unsigned int v262;
  unsigned int v263;
  _BOOL4 v264;
  uint64_t *v265;
  SearchLMScorer **SeededWeights;
  uint64_t v267;
  _QWORD *v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  char v273;
  int *v275;
  _QWORD *v276;
  int v277;
  int v278;
  SearchLMScorer *v279;
  int v280;
  LMStats *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD **v284;
  int v285;
  int v286;
  void *v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  SearchLMScorer *v293;
  __int128 v294;
  _QWORD *v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  int v308;
  SearchLMScorer *v309;
  uint64_t v310;
  unsigned int v311;
  int v312;
  __int128 v313;

  v284 = (_QWORD **)VocMgr::smpVocMgr;
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = *v5;
  v6 = v5[1];
  v311 = *v5;
  v312 = v6;
  v313 = *(_OWORD *)(v5 + 2);
  v8 = *(_DWORD *)(a1 + 604);
  v283 = a2;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v271 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 184))(*(_QWORD *)(v9 + 8));
  if (*(_DWORD *)(a1 + 312))
    v264 = 0;
  else
    v264 = *(_BYTE *)(a1 + 25) != 0;
  v10 = v7 & 0xFE000000;
  v11 = v7 & 0xFFFFFF;
  v12 = (_DWORD)v11 == 16777208 || (v7 & 0xFE000000) != -67108864;
  if (v10 == -67108864 || (_DWORD)v11 == 16777208)
  {
    v270 = 0;
  }
  else
  {
    v14 = (v7 >> 22) & 0x3F8;
    v270 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**v284 + v14) + 48) + 608)
                               + 2 * v11);
    v15 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + v14) + 48);
    if (*(_WORD *)(*(_QWORD *)(v15 + 32) + 2 * v11) == 1)
    {
      v12 = 0;
      v16 = 0;
      v17 = 0;
      if (!*(_WORD *)(*(_QWORD *)(v15 + 592) + 2 * v11))
        goto LABEL_26;
    }
    else
    {
      v12 = 0;
    }
  }
  if (Constraint::getCanSeedFinalSilence(*(_QWORD *)(a1 + 2216), v5, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316)))
  {
    if (*(_BYTE *)(a1 + 673))
      v18 = v10 == -67108864;
    else
      v18 = 1;
    v17 = !v18;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
LABEL_26:
  v259 = v16;
  v309 = 0;
  v310 = 0;
  v307 = 0x70000000FFFFFFFELL;
  v308 = 1879048192;
  v306 = 0;
  v19 = (uint64_t *)(a1 + 2288);
  *(_DWORD *)(a1 + 2296) = 0;
  v282 = a1;
  v265 = (uint64_t *)(a1 + 2288);
  if (v8 >= a3)
  {
    v33 = *(_QWORD *)(a1 + 2216);
    if ((*(_DWORD *)(v33 + 68) & 0xFFFFFFFD) != 0)
      SeededWeights = 0;
    else
      SeededWeights = (SearchLMScorer **)Constraint::getSeededWeights(v33, v5, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316));
    if (!*(_BYTE *)(a1 + 304))
    {
      Legal = Constraint::getLegal(*(_QWORD *)(a1 + 2216), v5, 0, 0, &v306, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316), (_DWORD *)(a1 + 1232), 0, 0, 0, 0);
      SeededPrecedingNonAcousticWords = 0;
      v277 = 0;
LABEL_125:
      v115 = *((_DWORD *)Legal + 2);
      if (v115)
      {
LABEL_129:
        v117 = (unsigned __int16)v115;
        v118 = *(_DWORD *)(a1 + 2300);
        if (v117 > v118)
          DgnArray<RuleDesc>::reallocElts((uint64_t)v19, v117 - v118, 0);
        v22 = v9;
        v27 = (uint64_t)Legal;
        v23 = v8;
        v119 = *(unsigned int *)(a1 + 2296);
        if (v119 < v117)
        {
          v120 = v117 - v119;
          v121 = 12 * v119;
          do
          {
            v122 = *v19 + v121;
            *(_QWORD *)v122 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v122 + 8) = 1879048192;
            v121 += 12;
            --v120;
          }
          while (v120);
        }
        v32 = v117;
        *(_DWORD *)(a1 + 2296) = v117;
        v30 = a1 + 624;
        v31 = (LMStats *)(a1 + 1056);
        v293 = (SearchLMScorer *)(a1 + 624);
        LOBYTE(v294) = 1;
        v25 = v277;
        v26 = SeededPrecedingNonAcousticWords;
        goto LABEL_135;
      }
      if (*((_DWORD *)Legal + 3))
        goto LABEL_127;
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)Legal, 1, 0);
      v131 = *((unsigned int *)Legal + 2);
      if (v131 > 1)
      {
        if ((int)v131 >= 2)
        {
          v132 = 16 * v131 - 16;
          do
          {
            --v131;
            DgnIArray<Utterance *>::~DgnIArray(*Legal + v132);
            v132 -= 16;
          }
          while (v131 > 1);
        }
        goto LABEL_128;
      }
      if (!(_DWORD)v131)
      {
LABEL_127:
        v116 = (_QWORD *)*Legal;
        *v116 = 0;
        v116[1] = 0;
      }
LABEL_128:
      LOWORD(v115) = 1;
      *((_DWORD *)Legal + 2) = 1;
      goto LABEL_129;
    }
    v304 = 0;
    v305 = 0;
    v34 = *(unsigned int *)(a1 + 544);
    v275 = (int *)v5;
    v261 = (_QWORD *)(a1 + 536);
    v257 = Constraint::getLegal(*(_QWORD *)(a1 + 2216), v5, *(unsigned int *)(a1 + 36), 1, &v306, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316), (_DWORD *)(a1 + 1232), a1 + 536, (uint64_t *)(a1 + 552), a1 + 2360, 0);
    if ((_DWORD)v7 == -50331650 && *(_DWORD *)(a1 + 2368))
    {
      v35 = 0;
      v36 = 0;
      while (1)
      {
        v37 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v283 + 32))(v283, v270, *(unsigned int *)(a1 + 604));
        v38 = v37;
        if (v37)
          break;
        ++v36;
        v35 += 12;
        if (v36 >= *(_DWORD *)(a1 + 2368))
          goto LABEL_45;
      }
      if (v264 && !*(_BYTE *)(*(_QWORD *)(v9 + 8) + 114))
      {
        v53 = v9;
        v54 = -2;
      }
      else
      {
        v53 = v9;
        v54 = *(_DWORD *)(v37 + 4);
      }
      v55 = *(__int16 *)(v37 + 8);
      HIDWORD(v307) = v54;
      v56 = a1;
      v57 = Recognizer::extendHistory(a1, *(_DWORD *)v37, v275, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
      v58 = (uint64_t *)(*(_QWORD *)(v56 + 2360) + v35);
      v59 = *v58;
      v60 = *((_DWORD *)v58 + 2);
      v61 = *(_DWORD *)(v56 + 612);
      v62 = *(_DWORD *)(v56 + 2352);
      if (v62 == *(_DWORD *)(v56 + 2356))
      {
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v56 + 2344, 1, 1);
        v62 = *(_DWORD *)(v56 + 2352);
      }
      v63 = v271 + v55;
      v64 = *(_QWORD *)(v56 + 2344) + 28 * v62;
      *(_QWORD *)v64 = v59;
      *(_DWORD *)(v64 + 8) = v60;
      *(_DWORD *)(v64 + 12) = v271 + v55;
      *(_WORD *)(v64 + 16) = v270;
      *(_DWORD *)(v64 + 20) = v57;
      *(_DWORD *)(v64 + 24) = v61;
      ++*(_DWORD *)(v56 + 2352);
      v65 = **(unsigned int **)(v56 + 256);
      v66 = *(_DWORD *)(v56 + 2300);
      if (v65 > v66)
        DgnArray<RuleDesc>::reallocElts((uint64_t)v265, v65 - v66, 0);
      v67 = *(unsigned int *)(v282 + 2296);
      if (v67 < v65)
      {
        v68 = v65 - v67;
        v69 = 12 * v67;
        do
        {
          v70 = *v265 + v69;
          *(_QWORD *)v70 = 0x70000000FFFFFFFELL;
          *(_DWORD *)(v70 + 8) = 1879048192;
          v69 += 12;
          --v68;
        }
        while (v68);
      }
      *(_DWORD *)(v282 + 2296) = v65;
      if ((_WORD)v65)
      {
        v71 = 0;
        do
        {
          v72 = *(_DWORD *)(v282 + 324) + v63;
          v73 = *(_DWORD *)(v38 + 4);
          if (v264 && *(_BYTE *)(*(_QWORD *)(v53 + 8) + 114) == 0)
            v73 = -2;
          v74 = (_DWORD *)(*(_QWORD *)(v282 + 2288) + v71);
          v74[1] = v73;
          v74[2] = v72;
          *v74 = v57;
          v71 += 12;
        }
        while (12 * (unsigned __int16)v65 != v71);
      }
      Recognizer::dropCrumbs(v282, (unsigned int *)v275, a3, v271, &v307, v265);
      goto LABEL_107;
    }
LABEL_45:
    if (v12)
    {
      v302 = 0;
      v303 = 0;
      v300 = 0;
      v301 = 0;
      v298 = 0;
      v299 = 0;
      v297 = -2;
      v295 = 0;
      v296 = 0;
      (*(void (**)(uint64_t, _QWORD **, uint64_t *, int *, uint64_t *, _QWORD **))(*(_QWORD *)v283 + 40))(v283, &v302, &v300, &v297, &v298, &v295);
      v39 = v284;
      v40 = v297;
      v41 = v303;
      v42 = (int)v303 >= 1 && *(_DWORD *)v302 == -50331651;
      v45 = (unsigned int *)v275;
      if ((int)v303 <= v42 + 1)
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v295);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v298);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v300);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v302);
LABEL_107:
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v304);
        return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v309);
      }
      v272 = v42;
      HIDWORD(v293) = 0x3FFF;
      v294 = xmmword_209A593D0;
      v267 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v283 + 32))(v283, 0, *(unsigned int *)(a1 + 604));
      v75 = v297;
      if (!*(_DWORD *)(a1 + 2300))
        DgnArray<RuleDesc>::reallocElts((uint64_t)v265, 1, 0);
      v76 = v272;
      if (!*(_DWORD *)(a1 + 2296))
      {
        v77 = *v265;
        *(_QWORD *)v77 = 0x70000000FFFFFFFELL;
        *(_DWORD *)(v77 + 8) = 1879048192;
      }
      *(_DWORD *)(a1 + 2296) = 1;
      v78 = v272;
      v79 = (v41 - 2);
      v80 = v302;
      if ((int)v79 > (int)v272)
      {
        v278 = v41;
        v252 = v8;
        v254 = v9;
        v81 = 0;
        v253 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                     + (((unint64_t)*((unsigned int *)v302 + v272) >> 22) & 0x3F8))
                         + 48);
        v82 = v41 - 2;
        v280 = -50331650;
        while (1)
        {
          v83 = *(_DWORD *)(v300 + 4 * v79);
          *(_DWORD *)(a1 + 2296) = 0;
          if ((*((_DWORD *)v302 + v79) & 0xFFFFFF) != 0xFFFFF9)
            break;
          --v82;
LABEL_104:
          --v79;
          if (v82 <= v76)
          {
            v80 = v302;
            v9 = v254;
            v8 = v252;
            v45 = (unsigned int *)v275;
            v39 = v284;
            v41 = v278;
            v78 = v272;
            v104 = v280;
            goto LABEL_109;
          }
        }
        LODWORD(v293) = *((_DWORD *)v302 + v79);
        HIDWORD(v293) = 0x3FFF;
        v294 = xmmword_209A593D0;
        v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283);
        v85 = v83 + 1;
        LODWORD(v294) = *(_DWORD *)(v84 + 8);
        HIDWORD(v294) = *((_DWORD *)v302 + v79) & 0xFE000000 | *((_DWORD *)v295 + v79) & 0xFFFFFF;
        DWORD2(v294) = v280;
        v280 = *((_DWORD *)v302 + v79);
        v86 = *(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * *(unsigned int *)(v300 + 4 * v79));
        v75 = Recognizer::extendHistory(a1, v40, (int *)&v293, 0, v85, v85);
        if (v264 && *(_BYTE *)(*(_QWORD *)(v254 + 8) + 114) == 0)
          v87 = -2;
        else
          v87 = *(_DWORD *)(v267 + 4);
        v88 = *((_DWORD *)v302 + --v82) & 0xFFFFFF;
        if (v88 == 16777209)
        {
          if (v79 < 2)
            goto LABEL_92;
          v89 = *((_DWORD *)v302 + (v79 - 2));
          if (v89 == -50331651)
            goto LABEL_92;
          v88 = v89 & 0xFFFFFF;
        }
        v81 = *(_WORD *)(*(_QWORD *)(v253 + 592) + 2 * v88);
LABEL_92:
        v90 = *(_DWORD *)(v298 + 4 * v79);
        v91 = a1;
        v92 = v81 + 1;
        v93 = *(_DWORD *)(v91 + 2300);
        if (v93 <= v81)
        {
          v94 = v82;
          v95 = v87;
          DgnArray<RuleDesc>::reallocElts((uint64_t)v265, v92 - v93, 0);
          v87 = v95;
          v82 = v94;
        }
        v96 = *(unsigned int *)(v282 + 2296);
        if (v96 <= v81)
        {
          v97 = v81 - v96 + 1;
          v98 = 12 * v96;
          do
          {
            v99 = *v265 + v98;
            *(_QWORD *)v99 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v99 + 8) = 1879048192;
            v98 += 12;
            --v97;
          }
          while (v97);
        }
        *(_DWORD *)(v282 + 2296) = v92;
        a1 = v282;
        v100 = (int *)(*(_QWORD *)(v282 + 2288) + 12 * v81);
        v100[1] = v87;
        v100[2] = v90 + v86;
        *v100 = v75;
        v101 = *(_DWORD *)(v300 + 4 * v79);
        v291 = 0;
        v292 = 0;
        v289 = 0;
        v290 = 0;
        v287 = 0;
        v288 = 0;
        CWIDCrumbBank::getFrameInfo(*(_QWORD *)(v282 + 368), 0, v101, (uint64_t)&v291, (uint64_t)&v289, (uint64_t)&v287);
        if ((_DWORD)v292)
        {
          v102 = 0;
          v103 = 0;
          while (!CWIDAC::operator==(v291 + v102, (uint64_t)&v293)
               || CWIDCrumbBank::getHistory(*(_QWORD *)(v282 + 368), v101, v291 + v102, v81) != v75)
          {
            ++v103;
            v102 += 24;
            if (v103 >= v292)
              goto LABEL_102;
          }
        }
        else
        {
LABEL_102:
          CWIDCrumbBank::addCrumbWACSRecordEFst(*(CWIDCrumbBank **)(v282 + 368), v101, (uint64_t)&v293, *(_DWORD *)(v298 + 4 * v79) + v271, &v307, v265, v81);
        }
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v287);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v289);
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v291);
        v40 = v75;
        v76 = v272;
        goto LABEL_104;
      }
      v104 = -50331650;
LABEL_109:
      v105 = *((_DWORD *)v80 + v78);
      v46 = v261;
      if ((v105 & 0xFFFFFF) != 0xFFFFF9)
      {
        v106 = v45[2];
        v311 = v105;
        v312 = 0x3FFF;
        *(_QWORD *)&v313 = v106 | 0xFFFFFFFE00000000;
        *((_QWORD *)&v313 + 1) = v104 | 0xFAFFFFFC00000000;
      }
      v107 = **(int ***)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v283 + 16))(v283) + 8) + 72);
      *v107 = v75;
      v107[1] = 0;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v295);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v298);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v300);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v302);
    }
    else
    {
      v41 = 0;
      v45 = (unsigned int *)v275;
      v39 = v284;
      v46 = (_QWORD *)(a1 + 536);
    }
    v277 = v41;
    if (*(_BYTE *)(a1 + 361))
    {
      v108 = v8;
      v109 = *(_QWORD *)(a1 + 2216);
      if ((*(_DWORD *)(v109 + 68) & 0xFFFFFFFD) == 0)
      {
        v110 = *v45;
        if (v110 >> 25 == 126
          || (v111 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v110 >> 22) & 0x3F8)) + 48),
              v112 = v110 & 0xFFFFFF,
              *(_WORD *)(*(_QWORD *)(v111 + 32) + 2 * v112) != 1)
          || *(_WORD *)(*(_QWORD *)(v111 + 592) + 2 * v112))
        {
          SeededPrecedingNonAcousticWords = Constraint::getSeededPrecedingNonAcousticWords(v109, v45);
          v39 = v284;
          v46 = v261;
LABEL_120:
          if (v34 < *(_DWORD *)(a1 + 544))
          {
            do
            {
              if ((PhnMgr::operator==(*(_QWORD *)(a1 + 256), *(_QWORD *)(**v39 + 8 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v34)) + 184) & 1) == 0)errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 5223, (uint64_t)"kernel/recog", 4, (uint64_t)"%u", v113, v114, *(_WORD *)(*v46 + 2 * v34));
              ++v34;
            }
            while (v34 < *(unsigned int *)(a1 + 544));
          }
          DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v304);
          v19 = v265;
          v8 = v108;
          Legal = v257;
          goto LABEL_125;
        }
      }
    }
    else
    {
      v108 = v8;
    }
    SeededPrecedingNonAcousticWords = 0;
    goto LABEL_120;
  }
  if (v17 && (v20 = *(_QWORD *)(a1 + 2216), (*(_DWORD *)(v20 + 68) & 0xFFFFFFFD) == 0))
  {
    v47 = v5;
    WeightsForState = Constraint::getWeightsForState(v20, v5);
    if (WeightsForState != 0xFFFF)
    {
      v49 = (unint64_t)*v47 >> 25;
      v50 = v49 + 1;
      if (HIDWORD(v310) <= v49)
      {
        v293 = 0;
        HIDWORD(v310) = realloc_array(v309, (void **)&v293, 16 * v50, 16 * v310, 16 * v310, 1) >> 4;
        v309 = v293;
      }
      if (v310 <= v50)
      {
        if (v310 <= v49)
        {
          v245 = v49 - v310 + 1;
          v246 = 16 * v310;
          do
          {
            v247 = (_QWORD *)((char *)v309 + v246);
            *v247 = 0;
            v247[1] = 0;
            v246 += 16;
            --v245;
          }
          while (v245);
        }
      }
      else
      {
        v51 = (int)v310;
        if ((int)v310 > (int)v50)
        {
          v52 = 16 * (int)v310 - 16;
          do
          {
            --v51;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v309 + v52);
            v52 -= 16;
          }
          while (v51 > v50);
        }
      }
      LODWORD(v310) = v49 + 1;
      v248 = (_QWORD *)((char *)v309 + 16 * v49);
      v250 = (unsigned int *)(v248 + 1);
      v249 = *((_DWORD *)v248 + 2);
      a1 = v282;
      if (v249 == *((_DWORD *)v248 + 3))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v248, 1, 1);
        v249 = *v250;
      }
      *(_DWORD *)(*v248 + 4 * v249) = WeightsForState;
      ++*v250;
    }
    SeededWeights = &v309;
  }
  else
  {
    SeededWeights = 0;
  }
  if (!*(_DWORD *)(a1 + 2300))
    DgnArray<RuleDesc>::reallocElts((uint64_t)v19, 1, 0);
  v21 = v17;
  v22 = v9;
  v23 = v8;
  if (!*(_DWORD *)(a1 + 2296))
  {
    v24 = *v19;
    *(_QWORD *)v24 = 0x70000000FFFFFFFELL;
    *(_DWORD *)(v24 + 8) = 1879048192;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v285 = 0;
  v28 = 0;
  v29 = 0;
  v256 = 0;
  *(_DWORD *)(a1 + 2296) = 1;
  v30 = a1 + 624;
  v293 = (SearchLMScorer *)(a1 + 624);
  v31 = (LMStats *)(a1 + 1056);
  LOBYTE(v294) = v21;
  v32 = 0xFFFF;
  if (v21)
  {
LABEL_135:
    v256 = 1;
    v123 = v31;
    SearchLMScorer::setContext(v30, 4211081212, &v311, v27, 1, (uint64_t)SeededWeights, v31, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    v31 = v123;
    v285 = v25;
    v28 = (_QWORD *)v26;
    v29 = (_QWORD *)v27;
  }
  v268 = v29;
  v281 = v31;
  v276 = v28;
  if (v23 < a3)
  {
    v273 = 0;
    v269 = 20000;
    v124 = v22;
    v125 = v32;
    v126 = (SearchLMScorer *)v30;
    goto LABEL_182;
  }
  v273 = 0;
  v269 = 20000;
  v124 = v22;
  v125 = v32;
  if (*(_BYTE *)(a1 + 304))
  {
    v126 = (SearchLMScorer *)v30;
    if (v270)
    {
      v127 = v31;
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v283 + 32))(v283, 0xFFFFLL, *(unsigned int *)(a1 + 604));
      if (v128)
      {
        if (v264)
        {
          v129 = *(_BYTE **)(v22 + 8);
          if (v129[114])
            v130 = *(_DWORD *)(v128 + 4);
          else
            v130 = -2;
        }
        else
        {
          v130 = *(_DWORD *)(v128 + 4);
          v129 = *(_BYTE **)(v22 + 8);
        }
        v133 = *(__int16 *)(v128 + 8);
        HIDWORD(v307) = v130;
        v134 = *(_DWORD *)v128;
        v135 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v129 + 104))(v129);
        v269 = v271 + v133;
        LODWORD(v307) = Recognizer::extendHistory(a1, v134, (int *)&v311, 1, v135, *(_DWORD *)(a1 + 612));
        v273 = 1;
      }
      else
      {
        v273 = 0;
        v269 = 20000;
      }
      v31 = v127;
      if (v125)
        goto LABEL_159;
      goto LABEL_182;
    }
  }
  else
  {
    v126 = (SearchLMScorer *)v30;
  }
  if (v125)
  {
LABEL_159:
    v136 = v124;
    v137 = 0;
    v138 = 4;
    v139 = 8;
    v262 = v125;
    v140 = v125;
    while (1)
    {
      v141 = (int *)(*v268 + v139);
      v143 = *v141;
      v142 = (uint64_t *)(v141 - 2);
      if (!v143)
      {
        v153 = v137 || *(_BYTE *)(v282 + 304) == 0;
        v154 = v153;
        if (!v285 && v154)
          goto LABEL_180;
      }
      v144 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v283 + 32))(v283, (unsigned __int16)v137, *(unsigned int *)(v282 + 604));
      v145 = v144;
      if (v144)
      {
        v146 = *(__int16 *)(v144 + 8);
        v147 = Recognizer::extendHistory(v282, *(_DWORD *)v144, (int *)&v311, 0, *(_DWORD *)(v282 + 612), *(_DWORD *)(v282 + 612));
        v148 = v147;
        v149 = v271 + v146;
        v150 = *(_DWORD *)(v282 + 324) + v271 + v146;
        v151 = *(_DWORD *)(v145 + 4);
        if (v264 && *(_BYTE *)(*(_QWORD *)(v136 + 8) + 114) == 0)
          v151 = -2;
        v152 = (int *)(*(_QWORD *)(v282 + 2288) + v138);
        *(v152 - 1) = v147;
        *v152 = v151;
        v152[1] = v150;
        if (v147 != -2)
        {
          v273 = 1;
          v155 = v307;
          goto LABEL_179;
        }
        v273 = 1;
      }
      else
      {
        v149 = 20000;
      }
      v155 = v307;
      if ((_DWORD)v307 != -2)
      {
        v148 = -2;
LABEL_179:
        Recognizer::seedFromOnePredToOnePhoneForward(v282, v283, v270, v149, v269, v148, v155, v142);
      }
LABEL_180:
      ++v137;
      v138 += 12;
      v139 += 16;
      if (v140 == v137)
      {
        v31 = v281;
        a1 = v282;
        v124 = v136;
        v19 = v265;
        v125 = v262;
        break;
      }
    }
  }
LABEL_182:
  if (v259)
  {
    v156 = v31;
    v157 = 604;
    if (!*(_BYTE *)(a1 + 24))
      v157 = 600;
    v158 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v283 + 32))(v283, 0, *(unsigned int *)(a1 + v157));
    v159 = v158;
    if (v158)
    {
      v160 = *(__int16 *)(v158 + 8);
      v161 = Recognizer::extendHistory(a1, *(_DWORD *)v158, (int *)&v311, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
      v162 = v161;
      v163 = v271 + v160;
      v164 = *(_DWORD *)(a1 + 324) + v163;
      v165 = *(_DWORD *)(v159 + 4);
      if (v264 && *(_BYTE *)(*(_QWORD *)(v124 + 8) + 114) == 0)
        v165 = -2;
      v166 = *(unsigned int **)(a1 + 2288);
      v166[1] = v165;
      v166[2] = v164;
      *v166 = v161;
      if (v256)
        v167 = SearchLMScorer::lmScoreFinalSilence(v126, v156);
      else
        v167 = SearchLMScorer::lmScoreFinalSilenceWithoutActualLM((uint64_t)v126, 4211081212, &v311);
      Recognizer::seedOneFromPort(a1, v283, v270, v163, v167, 0, 0, 0, *(_DWORD *)(a1 + 160), v162, a1 + 832, v251, 20000);
      v273 = 1;
    }
  }
  if (!v28 || !*((_DWORD *)v28 + 2))
  {
    v198 = v269;
    goto LABEL_317;
  }
  v304 = 0;
  v305 = 0;
  v286 = *(_DWORD *)(a1 + 64) + *(_DWORD *)(a1 + 604);
  v302 = 0;
  v303 = 0;
  v300 = 0;
  v301 = 0;
  v298 = 0;
  v299 = 0;
  v295 = 0;
  v296 = 0;
  v291 = 0;
  v292 = 0;
  v255 = v124;
  v263 = v125;
  v279 = v126;
  if (*((_DWORD *)SeededWeights + 2))
  {
    v168 = *((unsigned int *)v28 + 2);
    if ((int)v168 >= 1)
    {
      do
      {
        v169 = v168 - 1;
        v170 = (unint64_t)*(unsigned int *)(*v28 + 4 * (v168 - 1)) >> 25;
        if (v170 < *((_DWORD *)SeededWeights + 2))
        {
          v171 = (uint64_t)*SeededWeights + 16 * v170;
          v172 = *(unsigned int *)(v171 + 8);
          if ((_DWORD)v172)
          {
            LODWORD(v303) = 0;
            v173 = v295;
            v260 = v168;
            if (!HIDWORD(v296))
            {
              v289 = 0;
              HIDWORD(v296) = realloc_array(v295, &v289, 4uLL, 4 * v296, 4 * v296, 1) >> 2;
              v173 = v289;
              v295 = v289;
            }
            v174 = 0;
            v175 = 0;
            v258 = v169;
            v176 = v169;
            LODWORD(v296) = 1;
            v177 = 20000;
            *v173 = 20000;
            do
            {
              v178 = *(unsigned int *)(*(_QWORD *)v171 + 4 * v174);
              v179 = SearchLMScorer::lmScoreNonAcousticWord(v279, *(_DWORD *)(*v276 + 4 * v176), v178, v281);
              v180 = v179;
              v181 = *(_DWORD *)(v282 + 60);
              v182 = v181 == -1 || v179 <= v181;
              v184 = v182 && v179 + a3 <= v286;
              v185 = v303;
              if (v303 == (unint64_t)HIDWORD(v303))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v302, 1, 1);
                v185 = v303;
              }
              *((_DWORD *)v302 + v185) = v178;
              v186 = v303;
              LODWORD(v303) = v303 + 1;
              if (v177 > v180 || v186 == 0)
                v177 = v180;
              if ((_DWORD)v178 == 0xFFFF)
              {
                v188 = (int *)v295;
              }
              else
              {
                v189 = v296;
                if (v296 <= v178)
                {
                  do
                  {
                    if (v189 == HIDWORD(v296))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v295, 1, 1);
                      v189 = v296;
                    }
                    v190 = v295;
                    *((_DWORD *)v295 + v189) = 20000;
                    v189 = v296 + 1;
                    LODWORD(v296) = v189;
                  }
                  while (v189 <= v178);
                }
                else
                {
                  v190 = v295;
                }
                v188 = (int *)v190 + v178;
              }
              v175 |= v184;
              *v188 = v180;
              ++v174;
            }
            while (v174 != v172);
            v169 = v258;
            v168 = v260;
            if ((v175 & 1) != 0)
            {
              v191 = v301;
              if (v301 == (unint64_t)HIDWORD(v301))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v300, 1, 1);
                v191 = v301;
              }
              v192 = (_QWORD *)(v300 + 16 * v191);
              *v192 = 0;
              v192[1] = 0;
              DgnPrimArray<int>::copyArraySlice((unint64_t)v192, (uint64_t *)&v302, 0, v303);
              LODWORD(v301) = v301 + 1;
              v193 = v299;
              if (v299 == (unint64_t)HIDWORD(v299))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v298, 1, 1);
                v193 = v299;
              }
              *(_DWORD *)(v298 + 4 * v193) = v177;
              LODWORD(v299) = v299 + 1;
              v194 = v292;
              if (v292 == (unint64_t)HIDWORD(v292))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v291, 1, 1);
                v194 = v292;
              }
              v195 = (_QWORD *)(v291 + 16 * v194);
              *v195 = 0;
              v195[1] = 0;
              DgnPrimArray<int>::copyArraySlice((unint64_t)v195, (uint64_t *)&v295, 0, v296);
              LODWORD(v292) = v292 + 1;
              v196 = *(_DWORD *)(*v276 + 4 * v176);
              v197 = v305;
              if (v305 == (unint64_t)HIDWORD(v305))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v304, 1, 1);
                v197 = v305;
              }
              *(_DWORD *)(v304 + 4 * v197) = v196;
              LODWORD(v305) = v305 + 1;
            }
          }
        }
        v182 = v168 <= 1;
        v168 = v169;
        v28 = v276;
      }
      while (!v182);
    }
  }
  else
  {
    v289 = 0;
    v199 = realloc_array(0, &v289, 4uLL, 0, 0, 1);
    v295 = v289;
    LODWORD(v296) = 1;
    HIDWORD(v296) = v199 >> 2;
    if (!HIDWORD(v303))
    {
      v289 = 0;
      HIDWORD(v303) = realloc_array(v302, &v289, 4uLL, 4 * v303, 4 * v303, 1) >> 2;
      v302 = v289;
    }
    LODWORD(v303) = 1;
    v200 = *((unsigned int *)v28 + 2);
    if ((int)v200 >= 1)
    {
      v201 = v200 + 1;
      do
      {
        v202 = (v201 - 2);
        v203 = SearchLMScorer::lmScoreNonAcousticWord(v126, *(_DWORD *)(*v28 + 4 * v202), 0xFFFFLL, v281);
        v204 = v203;
        v205 = *(_DWORD *)(v282 + 60);
        if ((v203 <= v205 || v205 == -1) && v203 + a3 <= v286)
        {
          *(_DWORD *)v302 = 0xFFFF;
          v208 = v301;
          if (v301 == (unint64_t)HIDWORD(v301))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v300, 1, 1);
            v208 = v301;
          }
          v209 = (_QWORD *)(v300 + 16 * v208);
          *v209 = 0;
          v209[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v209, (uint64_t *)&v302, 0, v303);
          LODWORD(v301) = v301 + 1;
          v210 = v299;
          if (v299 == (unint64_t)HIDWORD(v299))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v298, 1, 1);
            v210 = v299;
          }
          *(_DWORD *)(v298 + 4 * v210) = v204;
          LODWORD(v299) = v299 + 1;
          *(_DWORD *)v295 = v204;
          v211 = v292;
          if (v292 == (unint64_t)HIDWORD(v292))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v291, 1, 1);
            v211 = v292;
          }
          v212 = (_QWORD *)(v291 + 16 * v211);
          *v212 = 0;
          v212[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v212, (uint64_t *)&v295, 0, v296);
          LODWORD(v292) = v292 + 1;
          v213 = *(_DWORD *)(*v28 + 4 * v202);
          v214 = v305;
          if (v305 == (unint64_t)HIDWORD(v305))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v304, 1, 1);
            v214 = v305;
          }
          *(_DWORD *)(v304 + 4 * v214) = v213;
          LODWORD(v305) = v305 + 1;
        }
        --v201;
      }
      while (v201 > 1);
    }
  }
  LODWORD(v215) = v305;
  if ((int)v305 >= 1)
  {
    a1 = v282;
    if ((_BYTE)v294)
    {
      SearchLMScorer::unsetContext((uint64_t)v293);
      LODWORD(v215) = v305;
      LOBYTE(v294) = 0;
      v289 = 0;
      v290 = 0;
      v19 = v265;
      if ((int)v305 < 1)
      {
LABEL_315:
        DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v289);
        goto LABEL_316;
      }
    }
    else
    {
      LOBYTE(v294) = 0;
      v289 = 0;
      v290 = 0;
    }
    v216 = v215;
    while (1)
    {
      v215 = (v215 - 1);
      v217 = *(unsigned int *)(v304 + 4 * v215);
      if (v270
        && (v218 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v283 + 32))(v283, 0xFFFFLL, (v286 - *(_DWORD *)(v298 + 4 * v215)))) != 0)
      {
        if ((_DWORD)v307 == -2)
        {
          if (v264)
          {
            v219 = *(_BYTE **)(v255 + 8);
            if (v219[114])
              v220 = *(_DWORD *)(v218 + 4);
            else
              v220 = -2;
          }
          else
          {
            v220 = *(_DWORD *)(v218 + 4);
            v219 = *(_BYTE **)(v255 + 8);
          }
          v222 = *(__int16 *)(v218 + 8);
          HIDWORD(v307) = v220;
          v223 = *(_DWORD *)v218;
          v224 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v219 + 104))(v219);
          v269 = v271 + v222;
          LODWORD(v307) = Recognizer::extendHistory(a1, v223, (int *)&v311, 1, v224, *(_DWORD *)(a1 + 612));
        }
        v273 = 1;
        v221 = 1;
      }
      else
      {
        v221 = 0;
      }
      if (*(_DWORD *)(v300 + 16 * v215 + 8) != 1)
        break;
      v225 = v290;
      if (**(_DWORD **)(v300 + 16 * v215) != 0xFFFF)
        goto LABEL_287;
      if ((int)v290 >= 1)
      {
        v226 = 16 * v290 - 16;
        do
        {
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v289 + v226);
          v226 -= 16;
        }
        while (v226 != -16);
      }
      LODWORD(v290) = 0;
LABEL_300:
      v287 = v279;
      LOBYTE(v288) = 1;
      SearchLMScorer::setContext((uint64_t)v279, 4211081212, &v311, (uint64_t)v268, 1, (uint64_t)&v289, v281, 1, v217, 0xFAFFFFFC);
      if (v263)
      {
        v234 = 0;
        v235 = 8;
        do
        {
          if (v234)
          {
            v236 = (int *)(*v268 + v235);
            v238 = *v236;
            v237 = (uint64_t *)(v236 - 2);
            if (v238)
            {
              v239 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v283 + 32))(v283, (unsigned __int16)v234, (v286 - *(_DWORD *)(v298 + 4 * v215)));
              if (v239)
              {
                v240 = *(__int16 *)(v239 + 8);
                v241 = Recognizer::extendHistory(a1, *(_DWORD *)v239, (int *)&v311, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
                v242 = v271 + v240;
                v273 = 1;
              }
              else
              {
                v241 = -2;
                v242 = 20000;
              }
              if (((v241 == -2) & ~v221) == 0)
              {
                if (v221)
                  v243 = v307;
                else
                  v243 = -2;
                Recognizer::seedFromOnePredToOnePhoneWithNonAcousticWordForward(a1, v283, v270, v242, v269, v241, v243, v237, *(_DWORD *)(v304 + 4 * v215), (int **)(v291 + 16 * v215));
              }
            }
          }
          ++v234;
          v235 += 16;
        }
        while (v263 != v234);
      }
      SearchLMContext::~SearchLMContext((SearchLMContext *)&v287);
      v182 = v216-- <= 1;
      v19 = v265;
      if (v182)
        goto LABEL_315;
    }
    v225 = v290;
LABEL_287:
    if (v225)
      *((_DWORD *)v289 + 4 * v225 - 2) = 0;
    v227 = v217 >> 25;
    v228 = (v217 >> 25) + 1;
    if (HIDWORD(v290) <= (v217 >> 25))
    {
      v287 = 0;
      HIDWORD(v290) = realloc_array(v289, &v287, 16 * v228, 16 * v225, 16 * v225, 1) >> 4;
      v289 = v287;
      v225 = v290;
    }
    if (v225 <= v228)
    {
      if (v225 <= v227)
      {
        v231 = v227 - v225 + 1;
        v232 = 16 * v225;
        do
        {
          v233 = (char *)v289 + v232;
          *v233 = 0;
          v233[1] = 0;
          v232 += 16;
          --v231;
        }
        while (v231);
      }
    }
    else if ((int)v225 > (int)v228)
    {
      v229 = (int)v225;
      v230 = 16 * (int)v225 - 16;
      do
      {
        --v229;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v289 + v230);
        v230 -= 16;
      }
      while (v229 > v228);
    }
    LODWORD(v290) = (v217 >> 25) + 1;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v289 + 16 * v227, (uint64_t *)(v300 + 16 * v215), 0, *(_DWORD *)(v300 + 16 * v215 + 8));
    a1 = v282;
    goto LABEL_300;
  }
  a1 = v282;
  v19 = v265;
LABEL_316:
  v198 = v269;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v291);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v295);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v298);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v300);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v302);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v304);
LABEL_317:
  if ((v273 & 1) != 0 && *(_DWORD *)(a1 + 312) != 3)
  {
    if (v198 != 20000)
      v308 = *(_DWORD *)(a1 + 324) + v198;
    Recognizer::dropCrumbs(a1, &v311, a3, v271, &v307, v19);
  }
  SearchLMContext::~SearchLMContext((SearchLMContext *)&v293);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v309);
}

void sub_2099A9BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1 - 184);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t Recognizer::dropCrumbs(uint64_t a1, unsigned int *a2, __int16 a3, __int16 a4, _DWORD *a5, uint64_t *a6)
{
  unint64_t v7;
  CWIDCrumbBank *v8;
  int v9;
  __int16 v10;
  int v11;

  v7 = *a2;
  if (v7 >> 25 == 126)
  {
    v8 = *(CWIDCrumbBank **)(a1 + 368);
    v9 = *(_DWORD *)(a1 + 608);
    v10 = a4 + a3;
    return CWIDCrumbBank::addCrumbWACSRecord(v8, v9, (uint64_t)a2, v10, a5, a6);
  }
  v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v7 >> 22) & 0x3F8))
                                                    + 56)
                                        + 528)
                            + 2 * a2[2]);
  v8 = *(CWIDCrumbBank **)(a1 + 368);
  v9 = *(_DWORD *)(a1 + 608);
  v10 = a4 + a3;
  if (v11 == 127)
    return CWIDCrumbBank::addCrumbWACSRecord(v8, v9, (uint64_t)a2, v10, a5, a6);
  return CWIDCrumbBank::addCrumbWACSRecordEFst(*(CWIDCrumbBank **)(a1 + 368), v9, (uint64_t)a2, v10, a5, a6, 0xFFFFu);
}

uint64_t Recognizer::doFinalSilForward(Recognizer *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  __int128 v20;

  v2 = *((_QWORD *)this + 35);
  v19 = 0x3FFFFCFFFFFDLL;
  v20 = xmmword_209A593D0;
  result = (uint64_t)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v2 + 303024, (uint64_t)&v19);
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 40);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (*(_DWORD *)(v5 + 104) || *(_BYTE *)(v5 + 112))
      {
        v6 = *(_DWORD *)(v5 + 40);
        if (v6 < 2)
        {
          v7 = 0;
        }
        else if (v6 - 3 >= 2)
        {
          v8 = v6 == 2;
          v7 = 1;
          if (!v8)
            v7 = 255;
        }
        else
        {
          v7 = **(unsigned __int8 **)(v5 + 88);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v7);
        v10 = *((_DWORD *)this + 78);
        if (v10)
          v11 = 0;
        else
          v11 = *((_BYTE *)this + 25) != 0;
        v12 = *(__int16 *)(v9 + 8);
        if (!*((_BYTE *)this + 304))
        {
          v19 = (uint64_t)&unk_24C217688;
          *(_QWORD *)&v20 = v4;
          result = Recognizer::seedOneFromPort((uint64_t)this, (uint64_t)&v19, 0, v12, 0, 0, 0, 0, 0, *(_DWORD *)v9, (uint64_t)this + 832, v18, 20000);
          v10 = *((_DWORD *)this + 78);
        }
        if (v10 != 3)
        {
          v13 = Recognizer::extendHistory((uint64_t)this, *(_DWORD *)v9, (int *)(*(_QWORD *)(v4 + 8) + 16), 0, *((_DWORD *)this + 153), *((_DWORD *)this + 153));
          v14 = *((_DWORD *)this + 81) + v12;
          *((_DWORD *)this + 574) = 0;
          if (*((_DWORD *)this + 575)
            || (DgnArray<RuleDesc>::reallocElts((uint64_t)this + 2288, 1, 0), !*((_DWORD *)this + 574)))
          {
            v15 = *((_QWORD *)this + 286);
            *(_QWORD *)v15 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v15 + 8) = 1879048192;
          }
          *((_DWORD *)this + 574) = 1;
          v16 = *(_DWORD *)(v9 + 4);
          if (v11)
            v16 = -2;
          v17 = (int *)*((_QWORD *)this + 286);
          v17[1] = v16;
          v17[2] = v14;
          *v17 = v13;
          return CWIDCrumbBank::addFinalSilHABS(*((CWIDCrumbBank **)this + 46), *((_DWORD *)this + 152), *(_QWORD *)(v4 + 8) + 16, v13, v14);
        }
      }
    }
  }
  return result;
}

void Recognizer::doForward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t *v11;
  Constraint *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  ActiveWord *v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  const PhnIndexSet *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[2];

  v10 = *(_QWORD **)(a1 + 376);
  if (v10)
  {
    (*(void (**)(_QWORD))*v10)(*(_QWORD *)(a1 + 376));
    MemChunkFree(v10, 0);
  }
  *(_QWORD *)(a1 + 376) = 0;
  if (a2)
  {
    v11 = MemChunkAlloc(0x30uLL, 0);
    *((_DWORD *)v11 + 2) = 0;
    *((_BYTE *)v11 + 32) = 0;
    v11[3] = 0;
    *v11 = (uint64_t)&off_24C217428;
    v11[5] = a2;
    *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 376) = v11;
    v12 = *(Constraint **)(a1 + 2216);
  }
  else
  {
    v12 = *(Constraint **)(a1 + 2216);
    v11 = 0;
  }
  Constraint::prunePreList(v12, (RecogGermIterator *)v11, 0, a4, a5, a6, a7, a8);
  v13 = *(_DWORD *)(a1 + 604);
  v14 = v13;
  if (!*(_BYTE *)(a1 + 24))
    v14 = *(_DWORD *)(a1 + 600);
  v15 = *(_QWORD *)(a1 + 392);
  if (v15)
  {
    *(_DWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 416) = 1;
  }
  v16 = (uint64_t *)(a1 + 392);
  v17 = (_QWORD *)(*(_QWORD *)(a1 + 280) + 303240);
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 303248);
  if (v18 - 1 >= 0)
  {
    v19 = 8 * (v18 - 1);
    do
    {
      v20 = *(ActiveWord **)(*v17 + v19);
      v21 = *((_QWORD *)v20 + 1);
      v22 = *(__int16 *)(v21 + 108);
      if ((*(_DWORD *)(v21 + 104) || *(_BYTE *)(v21 + 112)) && *(_DWORD *)(v21 + 16) != -50331651 && v14 >= v22)
      {
        if (*(_DWORD *)(v21 + 24) == -1 || *(_DWORD *)(v21 + 28) == -3)
        {
          MergedActive::add(a1 + 392, v20);
        }
        else
        {
          v32[0] = &unk_24C217688;
          v32[1] = v20;
          Recognizer::seedFromOnePredForward(a1, (uint64_t)v32, v22);
        }
        if (v13 >= v22)
          ++*(_DWORD *)(a1 + 1600);
      }
      --v18;
      v19 -= 8;
    }
    while (v18 >= 1);
    v15 = *v16;
  }
  if (v15)
  {
    *(_DWORD *)(a1 + 416) = 2;
    v24 = *(unsigned int *)(a1 + 408);
    if (!(_DWORD)v24)
      goto LABEL_36;
    for (i = 0; i != v24; ++i)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * i) + 8);
      v27 = (const PhnIndexSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 192))(v26);
      SeedMergedActiveWord::processMergedWord((SeedMergedActiveWord *)(a1 + 424), *(ActiveWord **)(*(_QWORD *)(a1 + 400) + 8 * i), *(const HistoryMgr **)(a1 + 392), v27, v14);
      v28 = *(unsigned int *)(a1 + 448);
      if ((int)v28 >= 1)
      {
        do
        {
          v29 = v28 - 1;
          v30 = *(_QWORD *)(a1 + 440);
          if (*(_WORD *)(v30 + 2 * (v28 - 1)) != 20000)
          {
            *(_DWORD *)(a1 + 512) = v28 - 1;
            v31 = *(_QWORD **)(*(_QWORD *)(a1 + 432) + 24);
            *(_WORD *)(a1 + 492) = 0x3FFF;
            *(_QWORD *)(a1 + 496) = *(_QWORD *)(*v31 + 8 * v29);
            Recognizer::seedFromOnePredForward(a1, a1 + 424, *(__int16 *)(v30 + 2 * v29));
          }
          v28 = v29;
        }
        while ((unint64_t)(v29 + 1) > 1);
      }
    }
    if (*v16)
LABEL_36:
      *(_DWORD *)(a1 + 416) = 0;
  }
}

unint64_t MergedActive::add(unint64_t this, ActiveWord *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 16);
  if (v4 == *(_DWORD *)(this + 20))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 8, 1, 1);
    v4 = *(_DWORD *)(v3 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4) = a2;
  *(_DWORD *)(v3 + 16) = v4 + 1;
  return this;
}

uint64_t Recognizer::setConstraint(Constraint **this, Constraint *a2)
{
  uint64_t result;
  _BOOL4 v5;
  Constraint *v6;
  _BOOL4 v7;

  result = (uint64_t)DgnDelete<Constraint>(this[277]);
  this[277] = a2;
  if (a2)
  {
    result = Constraint::setupConstraint(a2);
    if (*((_BYTE *)this + 168))
      v5 = (*((_DWORD *)this[277] + 17) & 0xFFFFFFFD) == 0;
    else
      v5 = 0;
    v7 = *((_BYTE *)this + 169)
      && (v6 = this[277], (*((_DWORD *)v6 + 17) & 0xFFFFFFFD) == 0)
      && *((_QWORD *)v6 + 27) != 0;
    if (v5 || v7)
      result = MergedActive::initMergedActive((uint64_t)(this + 49), (uint64_t)this[35] + 72, v5, v7);
  }
  *((_QWORD *)this[35] + 37875) = this[277];
  return result;
}

uint64_t Recognizer::addCrumbsToPrefilterResult(CWIDCrumbBank **this, char a2, const PrefilterResult *a3, unsigned int a4, PrefilterResult *a5)
{
  CWIDCrumbBank **v8;
  uint64_t result;
  int v10;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  signed int v27;
  signed int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  signed int v36;
  signed int v37;
  uint64_t GermsForFrame;
  uint64_t v39;
  __int16 *v40;
  int v41;
  int v42;
  CWIDCrumbBank **v44;
  _QWORD v45[2];
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  v8 = this;
  result = CWIDCrumbBank::getLastFrame(this[46]);
  if ((a2 & 1) == 0)
  {
    v10 = result + 1;
    if (!*((_BYTE *)v8 + 2304) && v10 != 0)
    {
      if (!*(_BYTE *)a5 && !*((_DWORD *)a5 + 4))
        PrefilterResult::initEmpty(a5, v10);
      v47 = 0;
      v48 = 0;
      v46[0] = 0;
      v46[1] = 0;
      v45[0] = 0;
      v45[1] = 0;
      if ((v10 & 0x80000000) == 0)
      {
        v42 = a4 + 1;
        v12 = v10;
        v44 = v8;
        do
        {
          v41 = v12;
          CWIDCrumbBank::getFrameInfo((unint64_t)v8[46], 0, v12, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
          if ((_DWORD)v48)
          {
            v13 = 0;
            do
            {
              v14 = *(_DWORD *)(v47 + 24 * v13);
              if ((v14 + 0x8000000) >> 25 >= 5)
              {
                v15 = **(_DWORD **)(v45[0] + 24 * v13 + 16);
                if (v15 != -2)
                {
                  v32 = *((_QWORD *)v44[35] + 10);
                  if (*(_DWORD *)(v32 + 36 * v15) == -50331650
                    || (v33 = *(_DWORD *)(v32 + 36 * v15 + 32), v33 == -2))
                  {
                    v34 = 0;
                  }
                  else
                  {
                    v34 = *(_DWORD *)(v32 + 36 * v33 + 28);
                  }
                  PrefilterResult::addEntry(a5, v34, *(_DWORD *)(v47 + 24 * v13), 20000);
                  v35 = v42 + v34;
                  if (v34 >= a4)
                    v36 = v34 - a4;
                  else
                    v36 = 0;
                  if (v35 >= v10)
                    v37 = v10;
                  else
                    v37 = v35;
                  while (v36 < v37)
                  {
                    if (a3)
                    {
                      GermsForFrame = PrefilterResult::getGermsForFrame(a3, v36);
                      v39 = *(unsigned int *)(GermsForFrame + 8);
                      if ((_DWORD)v39)
                      {
                        v40 = (__int16 *)(*(_QWORD *)GermsForFrame + 4);
                        while (*((_DWORD *)v40 - 1) != v14)
                        {
                          v40 += 4;
                          if (!--v39)
                            goto LABEL_69;
                        }
                        PrefilterResult::addEntry(a5, v36, v14, *v40);
                      }
                    }
                    else
                    {
                      PrefilterResult::addEntry(a5, v36, v14, 20000);
                    }
LABEL_69:
                    ++v36;
                  }
                }
                v16 = v45[0];
                v17 = *(_QWORD *)(v45[0] + 24 * v13);
                if (v17)
                {
                  v18 = 0;
                  do
                  {
                    v19 = *(unsigned int *)(v17 + 8);
                    v20 = *(unsigned int **)(v16 + 24 * v13 + 16);
                    if (v20)
                      v21 = (v19 + 1);
                    else
                      v21 = v19;
                    if (v18 >= v21)
                      break;
                    if (v18 != v19)
                      v20 = (unsigned int *)(*(_QWORD *)v17 + 12 * v18);
                    if (v20)
                    {
                      if (v20[2] != 1879048192)
                      {
                        v22 = *v20;
                        if (v22 != -2)
                        {
                          v23 = *((_QWORD *)v44[35] + 10);
                          if (*(_DWORD *)(v23 + 36 * v22) == -50331650
                            || (v24 = *(_DWORD *)(v23 + 36 * v22 + 32), v24 == -2))
                          {
                            v25 = 0;
                          }
                          else
                          {
                            v25 = *(_DWORD *)(v23 + 36 * v24 + 28);
                          }
                          PrefilterResult::addEntry(a5, v25, v14, 20000);
                          v26 = v42 + v25;
                          if (v25 >= a4)
                            v27 = v25 - a4;
                          else
                            v27 = 0;
                          if (v26 >= v10)
                            v28 = v10;
                          else
                            v28 = v26;
                          while (v27 < v28)
                          {
                            if (a3)
                            {
                              v29 = PrefilterResult::getGermsForFrame(a3, v27);
                              v30 = *(unsigned int *)(v29 + 8);
                              if ((_DWORD)v30)
                              {
                                v31 = (__int16 *)(*(_QWORD *)v29 + 4);
                                while (*((_DWORD *)v31 - 1) != v14)
                                {
                                  v31 += 4;
                                  if (!--v30)
                                    goto LABEL_47;
                                }
                                PrefilterResult::addEntry(a5, v27, v14, *v31);
                              }
                            }
                            else
                            {
                              PrefilterResult::addEntry(a5, v27, v14, 20000);
                            }
LABEL_47:
                            ++v27;
                          }
                        }
                      }
                    }
                    ++v18;
                    v16 = v45[0];
                    v17 = *(_QWORD *)(v45[0] + 24 * v13);
                  }
                  while (v17);
                }
              }
              ++v13;
            }
            while (v13 < v48);
          }
          v12 = v41 - 1;
          v8 = v44;
        }
        while (v41 > 0);
      }
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)v45);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v46);
      return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v47);
    }
  }
  return result;
}

void sub_2099AA700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t Recognizer::setEmbeddedTransducers(unint64_t result, uint64_t a2)
{
  if (a2)
    return DgnArray<StateSpec>::copyArraySlice(result + 2376, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  return result;
}

void GermRecogGermIterator::~GermRecogGermIterator(GermRecogGermIterator *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

void MergedActive::MergedActive(MergedActive *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  SeedMergedActiveWord::SeedMergedActiveWord((MergedActive *)((char *)this + 32));
  *((_WORD *)this + 64) = 0;
}

void sub_2099AA7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1 + 8);
  _Unwind_Resume(a1);
}

void SeedMergedActiveWord::SeedMergedActiveWord(SeedMergedActiveWord *this)
{
  *(_QWORD *)this = &unk_24C2170A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  DgnString::DgnString((SeedMergedActiveWord *)((char *)this + 32));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 17) = 0x3FFF;
  *(_OWORD *)((char *)this + 72) = xmmword_209A593D0;
  *((_DWORD *)this + 22) = -1;
}

void sub_2099AA82C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 16);
  _Unwind_Resume(a1);
}

void SeedMergedActiveWord::~SeedMergedActiveWord(SeedMergedActiveWord *this)
{
  *(_QWORD *)this = &unk_24C2170A0;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 48);
  BitArray::~BitArray((SeedMergedActiveWord *)((char *)this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &unk_24C2170A0;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 48);
  BitArray::~BitArray((SeedMergedActiveWord *)((char *)this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  JUMPOUT(0x20BD149A8);
}

uint64_t SeedMergedActiveWord::getScoredWord(SeedMergedActiveWord *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t SeedMergedActiveWord::getCWIDAC(SeedMergedActiveWord *this)
{
  return (uint64_t)this + 64;
}

uint64_t SeedMergedActiveWord::maybeGetActiveOutPort(SeedMergedActiveWord *this, unsigned int a2, int a3)
{
  uint64_t result;

  if (a2 == 0xFFFF)
  {
    if (((*(_DWORD *)(*((_QWORD *)this + 4) + (((unint64_t)*((unsigned int *)this + 22) >> 3) & 0x1FFFFFFC)) >> *((_DWORD *)this + 22)) & 1) == 0)
      return 0;
    result = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72);
  }
  else
  {
    result = ActiveWord::maybeGetNonSilOutPort(*((ActiveWord **)this + 1), a2);
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 16 * *((unsigned int *)this + 22)) + 4 * (a2 >> 5)) >> a2) & 1) == 0)
      return 0;
  }
  if (*(__int16 *)(result + 8) > a3)
    return 0;
  return result;
}

uint64_t SeedMergedActiveWord::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

void MergedActive::~MergedActive(MergedActive *this)
{
  *((_QWORD *)this + 4) = &unk_24C2170A0;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 80);
  BitArray::~BitArray((MergedActive *)((char *)this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 8);
}

void *MemChunkRegion::getCurrentRegion(MemChunkRegion *this)
{
  uint64_t *v1;
  void *result;

  if (MemChunkRegion::smTlsID != -1)
  {
    v1 = (uint64_t *)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v1)
    {
      result = (void *)*v1;
      if (result)
        return result;
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  return &gGlobalMemChunkRegion;
}

BOOL MergedActive::isCWIDAllowMerge(MergedActive *this, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * (a2 >> 25)) + 48);
  v3 = a2 & 0xFFFFFF;
  if (*(unsigned __int16 *)(v2[4] + 2 * v3) < 2u)
    return 0;
  if (*(_WORD *)(v2[74] + 2 * v3))
    return 1;
  return *(unsigned __int16 *)(v2[76] + 2 * v3) != 0;
}

BOOL MergedActive::isStateAllowMerge(MergedActive *this, StateMgr *a2, unsigned int a3)
{
  return !*(_BYTE *)(*((_QWORD *)a2 + 48) + a3)
      && *(_BYTE *)(*((_QWORD *)a2 + 40) + a3)
      && *(_BYTE *)(*((_QWORD *)a2 + 44) + a3)
      && *(_BYTE *)(*((_QWORD *)a2 + 46) + a3)
      && !*(_DWORD *)(*((_QWORD *)a2 + 36) + 4 * a3)
      && *(_DWORD *)(*((_QWORD *)a2 + 34) + 4 * a3) == 0xFFFF;
}

void SeedUnmergedActiveWord::~SeedUnmergedActiveWord(SeedUnmergedActiveWord *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t SeedUnmergedActiveWord::getScoredWord(SeedUnmergedActiveWord *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t SeedUnmergedActiveWord::getCWIDAC(SeedUnmergedActiveWord *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 16;
}

uint64_t SeedUnmergedActiveWord::maybeGetActiveOutPort(SeedUnmergedActiveWord *this, unsigned int a2, int a3)
{
  ActiveWord *v4;
  uint64_t result;

  v4 = (ActiveWord *)*((_QWORD *)this + 1);
  if (a2 == 0xFFFF)
    result = **(_QWORD **)(*((_QWORD *)v4 + 1) + 72);
  else
    result = ActiveWord::maybeGetNonSilOutPort(v4, a2);
  if (*(__int16 *)(result + 8) > a3)
    return 0;
  return result;
}

uint64_t SeedUnmergedActiveWord::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

_QWORD *DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<CWIDCrumbWACSFrame>(*(CWIDCrumbWACSFrame **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

CWIDCrumbWACSFrame *DgnDelete<CWIDCrumbWACSFrame>(CWIDCrumbWACSFrame *result)
{
  _QWORD *v1;

  if (result)
  {
    CWIDCrumbWACSFrame::~CWIDCrumbWACSFrame(result);
    return (CWIDCrumbWACSFrame *)MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitLibrary_fst(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_arcgraph_fst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fstcore_fst();
  MrecInitModule_fstsrch_fst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fwdbwd_fst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_virtmap_fst();
}

void MrecInitLibrarySet_throughFst(void)
{
  MrecInitLibrarySet_throughKernel();
  MrecInitLibrary_fst();
}

void FeatureFrame::~FeatureFrame(FeatureFrame *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t FeatureFrame::getFeature(FeatureFrame *this)
{
  return (uint64_t)this + 8;
}

uint64_t FeatureFrame::getScaledFeature(FeatureFrame *this, unsigned int a2, int a3, int a4, const BinaryIntScale *a5)
{
  int v5;
  uint64_t v6;
  char v7;

  if (*((_BYTE *)this + 4))
  {
    LOBYTE(v5) = *(_BYTE *)(*((_QWORD *)this + 1) + a2);
  }
  else
  {
    v6 = 1 << (*(_DWORD *)a5 - 1);
    if (!*(_DWORD *)a5)
      LODWORD(v6) = 0;
    v5 = ((int)v6 + (int)((double)a4 + *(double *)(*((_QWORD *)this + 3) + 8 * a2) * (double)a3)) >> *(_DWORD *)a5;
    if (v5 <= 0)
      v7 = 0;
    else
      v7 = -1;
    if (v5 >= 0x100)
      LOBYTE(v5) = v7;
  }
  return v5;
}

void FeatureFrame::setFeature(uint64_t a1, uint64_t a2)
{
  DgnPrimArray<double>::copyArraySlice(a1 + 24, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 4) = 0;
}

unint64_t FeatureFrame::scaleFeatureToUns8(unint64_t this, _QWORD *a2, _QWORD *a3, BinaryIntScale *a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  void *v11;

  v7 = this;
  v8 = *(unsigned int *)(this + 32);
  v9 = v8;
  if (*(_DWORD *)(this + 20) < v8)
  {
    v11 = 0;
    this = realloc_array(*(_QWORD **)(this + 8), &v11, v8, *(unsigned int *)(this + 16), *(unsigned int *)(this + 16), 1);
    *(_DWORD *)(v7 + 20) = this;
    *(_QWORD *)(v7 + 8) = v11;
    v9 = *(_DWORD *)(v7 + 32);
  }
  *(_DWORD *)(v7 + 16) = v8;
  if (v9)
  {
    v10 = 0;
    do
    {
      this = FeatureFrame::getScaledFeature((FeatureFrame *)v7, v10, *(_DWORD *)(*a2 + 4 * v10), *(_DWORD *)(*a3 + 4 * v10), a4);
      *(_BYTE *)(*(_QWORD *)(v7 + 8) + v10++) = this;
    }
    while (v10 < *(unsigned int *)(v7 + 32));
  }
  *(_BYTE *)(v7 + 4) = 1;
  return this;
}

void MrecInitModule_lookahsc_prefilt(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugPrefiltererLookahead)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugPrefiltererLookahead", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugPrefiltererLookahead = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererLookahead);
  }
}

uint64_t SimpleLookaheadScorer::SimpleLookaheadScorer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24C217490;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = a4;
  *(_DWORD *)(a1 + 32) = -16;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((_QWORD *)(a1 + 40), *(unsigned int *)(a2 + 128));
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
    v7 = *(unsigned int *)(a2 + 128);
  else
    v7 = 0;
  DgnArray<ScoreFixArray>::DgnArray((_QWORD *)(a1 + 64), v7);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = **(_DWORD **)(*(_QWORD *)(a1 + 8) + 64);
  *(_DWORD *)(a1 + 96) = 0;
  v9 = v8 - 2;
  if (v8 != 2)
  {
    *(_QWORD *)(a1 + 88) = MemChunkAlloc(2 * (v8 - 2), 0);
    *(_DWORD *)(a1 + 96) = v9;
  }
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 104, *(_DWORD *)(a2 + 40));
  v10 = *(unsigned int *)(a2 + 40);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if ((_DWORD)v10)
    DgnPrimArray<short>::reallocElts(a1 + 120, v10, 0);
  *(_DWORD *)(a1 + 128) = v10;
  return a1;
}

void sub_2099AAF88(_Unwind_Exception *a1)
{
  FeatureArraySpinQueue *v1;
  ScoreFixArraySpinQueue *v2;
  uint64_t v3;
  uint64_t v4;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v3);
  ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(v2);
  FeatureArraySpinQueue::~FeatureArraySpinQueue(v1);
  _Unwind_Resume(a1);
}

void SimpleLookaheadScorer::~SimpleLookaheadScorer(SimpleLookaheadScorer *this)
{
  FeatureArraySpinQueue *v2;
  ScoreFixArraySpinQueue *v3;

  *(_QWORD *)this = &off_24C217490;
  v2 = (SimpleLookaheadScorer *)((char *)this + 40);
  *((_QWORD *)this + 7) = 0;
  v3 = (SimpleLookaheadScorer *)((char *)this + 64);
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 8) = -16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88);
  ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(v3);
  FeatureArraySpinQueue::~FeatureArraySpinQueue(v2);
}

{
  SimpleLookaheadScorer::~SimpleLookaheadScorer(this);
  JUMPOUT(0x20BD149A8);
}

double SimpleLookaheadScorer::reset(SimpleLookaheadScorer *this)
{
  double result;

  result = 0.0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 8) = -16;
  return result;
}

void SimpleLookaheadScorer::printSize(SimpleLookaheadScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 125, (DgnString *)&v102);
  if ((_DWORD)v103)
    v16 = v102;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v102);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 126, (DgnString *)&v102);
  if ((_DWORD)v103)
    v28 = v102;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 127, (DgnString *)&v102);
  if ((_DWORD)v103)
    v34 = v102;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v29;
  *a5 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 128, (DgnString *)&v102);
  if ((_DWORD)v103)
    v39 = v102;
  else
    v39 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v39, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 129, (DgnString *)&v102);
  if ((_DWORD)v103)
    v44 = v102;
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v44, 4, 4, 0);
  v101 = a3;
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 138, (DgnString *)&v102);
  if ((_DWORD)v103)
    v49 = v102;
  else
    v49 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  v50 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 40, 0) + 8;
  v51 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 40, 1) + 8;
  v102 = 0;
  v103 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 139, (DgnString *)&v102);
  if ((_DWORD)v103)
    v56 = v102;
  else
    v56 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v22, &byte_209A88803, v23, v23, v56, v50, v51, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v50;
  *a5 += v51;
  v57 = sizeObject<ScoreFixArray>((uint64_t)this + 64, 0) + 8;
  v58 = sizeObject<ScoreFixArray>((uint64_t)this + 64, 1) + 8;
  v102 = 0;
  LODWORD(v103) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 140, (DgnString *)&v102);
  if ((_DWORD)v103)
    v63 = v102;
  else
    v63 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v22, &byte_209A88803, v23, v23, v63, v57, v58, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v57;
  *a5 += v58;
  v64 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 12;
  v65 = *((unsigned int *)this + 24);
  if ((int)v65 <= 0)
    v66 = 0;
  else
    v66 = 2 * v65;
  v67 = v66 + v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 142, (DgnString *)&v102);
  if ((_DWORD)v103)
    v72 = v102;
  else
    v72 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &byte_209A88803, v23, v23, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v67;
  *a5 += v67;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 12;
  else
    v73 = 16;
  v74 = *((_DWORD *)this + 28);
  v75 = *((_DWORD *)this + 29);
  v76 = v75 >= v74;
  v77 = v75 - v74;
  if (v76)
  {
    v79 = v74 & ~(v74 >> 31);
    v74 = 0;
    v78 = v73 + v79;
    v73 += v79 + v77;
  }
  else
  {
    v78 = v73;
  }
  v80 = v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 143, (DgnString *)&v102);
  if ((_DWORD)v103)
    v85 = v102;
  else
    v85 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v22, &byte_209A88803, v23, v23, v85, v73, v78, v80);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v73;
  *a5 += v78;
  *a6 += v80;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v86 = 12;
  else
    v86 = 16;
  v87 = *((unsigned int *)this + 32);
  v88 = *((_DWORD *)this + 33);
  if (v88 >= v87)
  {
    v89 = 0;
    if ((int)v87 > 0)
      v86 = (v86 | 2) + 2 * (v87 - 1);
    v90 = v86 + 2 * (v88 - v87);
  }
  else
  {
    v89 = 2 * v87;
    v90 = v86;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 145, (DgnString *)&v102);
  if ((_DWORD)v103)
    v95 = v102;
  else
    v95 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v22, &byte_209A88803, v23, v23, v95, v90, v86, v89);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v90;
  *a5 += v86;
  *a6 += v89;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 147, (DgnString *)&v102);
  if ((_DWORD)v103)
    v100 = v102;
  else
    v100 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v101, &byte_209A88803, (35 - v101), (35 - v101), v100, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v102);
}

void sub_2099AB70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t *SimpleLookaheadScorer::scoreForLookahead(uint64_t *result, int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v5 = (uint64_t)result;
  if (a3)
  {
    v8 = *((_DWORD *)result + 15);
    result = (uint64_t *)FeatureArraySpinQueue::add((uint64_t)(result + 5), a3);
    if (*(_DWORD *)(v5 + 28))
    {
      v17 = 0;
      v18 = 0;
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)&v17, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
      LODWORD(v18) = *(_DWORD *)(v5 + 24);
      SimpleLookaheadScorer::doScore(v5, &v17);
      ScoreFixArraySpinQueue::add(v5 + 64, v5 + 88);
      result = (uint64_t *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
    }
    v9 = *(_DWORD *)(v5 + 32);
    if (v9 == -16)
    {
      *(_DWORD *)(v5 + 32) = a2;
      v9 = a2;
    }
    v10 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 128);
    if (*(_DWORD *)(v5 + 60) >= v10)
    {
      if (v8 == v10)
        *(_DWORD *)(v5 + 32) = v9 + 1;
      return SimpleLookaheadScorer::doOverallScore(v5, (uint64_t)a4);
    }
  }
  else
  {
    v11 = *((_DWORD *)result + 15);
    if (*(_DWORD *)(result[1] + 128) > v11)
    {
      result = SimpleLookaheadScorer::doOverallScore((uint64_t)result, (uint64_t)a4);
      v11 = *(_DWORD *)(v5 + 60);
    }
    if (v11 >= 2)
    {
      do
      {
        v12 = v11 - 1;
        v13 = *(_DWORD *)(v5 + 56);
        if ((v13 + 1) < *(_DWORD *)(v5 + 48))
          v14 = v13 + 1;
        else
          v14 = 0;
        *(_DWORD *)(v5 + 56) = v14;
        *(_DWORD *)(v5 + 60) = v12;
        if (*(_DWORD *)(v5 + 28))
        {
          v15 = *(_DWORD *)(v5 + 84);
          if (v15)
          {
            *(_DWORD *)(v5 + 84) = --v15;
            if (v15)
            {
              v16 = *(_DWORD *)(v5 + 80);
              if ((v16 + 1) < *(_DWORD *)(v5 + 72))
                v15 = v16 + 1;
              else
                v15 = 0;
            }
          }
          *(_DWORD *)(v5 + 80) = v15;
        }
        ++*(_DWORD *)(v5 + 32);
        result = SimpleLookaheadScorer::doOverallScore(v5, (uint64_t)a4);
        v11 = *(_DWORD *)(v5 + 60);
      }
      while (v11 > 1);
    }
    *a4 = 1;
  }
  return result;
}

void sub_2099AB8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *SimpleLookaheadScorer::doOverallScore(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 28);
  if (v4 == 1)
  {
    SimpleLookaheadScorer::computeMinimumScore(a1);
  }
  else if (v4)
  {
    SimpleLookaheadScorer::computeCombinedScore(a1);
  }
  else
  {
    SimpleLookaheadScorer::computeSmoothFrame(a1);
    SimpleLookaheadScorer::doScore(a1, (unsigned __int8 **)(a1 + 104));
  }
  return SynchronizedArray<ScoreFixArray>::add(a2, *(_DWORD *)(a1 + 32), a1 + 88);
}

unint64_t FeatureArraySpinQueue::add(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (v5 + 1 < v3)
      v4 = v5 + 1;
    else
      v4 = 0;
    *(_DWORD *)(a1 + 16) = v4;
    --v2;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2 + 1;
    v4 = *(_DWORD *)(a1 + 16);
  }
  return DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)a1 + 16 * ((v2 + v4) % v3), (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t SimpleLookaheadScorer::doScore(uint64_t result, unsigned __int8 **a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned __int16 i;

  v2 = *(_DWORD *)(result + 96);
  if (v2)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      if (i)
      {
        result = *(_QWORD *)(v4 + 8);
        if (*(unsigned __int16 *)(*(_QWORD *)(result + 64) + 56) == i)
        {
          *(_WORD *)(*(_QWORD *)(v4 + 88) + 2 * i) = 20000;
        }
        else
        {
          result = Lookahead::scoreOneForLookahead(result, a2, *(_DWORD *)(*(_QWORD *)(result + 104) + 4 * i));
          *(_WORD *)(*(_QWORD *)(v4 + 88) + 2 * i) = result;
          v2 = *(_DWORD *)(v4 + 96);
        }
      }
      else
      {
        **(_WORD **)(v4 + 88) = 20000;
      }
    }
  }
  return result;
}

uint64_t *ScoreFixArraySpinQueue::add(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (v5 + 1 < v3)
      v4 = v5 + 1;
    else
      v4 = 0;
    *(_DWORD *)(a1 + 16) = v4;
    --v2;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2 + 1;
    v4 = *(_DWORD *)(a1 + 16);
  }
  return DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(*(_QWORD *)a1 + 16 * ((v2 + v4) % v3)), (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t SimpleLookaheadScorer::getNextFrameTime(SimpleLookaheadScorer *this)
{
  int v1;

  v1 = *((_DWORD *)this + 8);
  if (v1 == -16)
    v1 = 0;
  return (*((_DWORD *)this + 15) + v1);
}

uint64_t SimpleLookaheadScorer::scoreLookaheadUntil(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  v9 = *(_DWORD *)(a4 + 16);
  if (v9 <= a2)
  {
    for (i = v8; ; ++i)
    {
      v11 = *(_DWORD *)(a3 + 16);
      if (v11 <= i)
        break;
      v12 = *(_QWORD *)(a3 + 8) + 16 * i;
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v14, (_QWORD *)v12, 0, *(_DWORD *)(v12 + 8));
      SimpleLookaheadScorer::scoreForLookahead(a1, i, (uint64_t)v14, (_BYTE *)a4);
      v9 = *(_DWORD *)(a4 + 16);
      if (v9 > a2)
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
    }
    if (*(_BYTE *)a3 && !*(_BYTE *)a4)
    {
      *(_DWORD *)(a4 + 4) = v9;
      SimpleLookaheadScorer::scoreForLookahead(a1, v11, 0, (_BYTE *)a4);
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
}

void sub_2099ABB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SimpleLookaheadScorer::computeSmoothFrame(uint64_t this)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  if (*(_DWORD *)(this + 24))
  {
    v1 = 0;
    v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 136) + 4 * (*(_DWORD *)(this + 60) - 1));
    do
    {
      v3 = *(unsigned int *)(this + 60);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = *(int **)(*(_QWORD *)(this + 8) + 120);
        v6 = *(_DWORD *)(this + 56);
        v7 = *(_DWORD *)(this + 48);
        do
        {
          v8 = v6;
          if (v6 >= v7)
            v8 = v6 % v7;
          v9 = *v5++;
          v4 += v9 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 16 * v8) + v1);
          ++v6;
          --v3;
        }
        while (v3);
      }
      else
      {
        v4 = 0;
      }
      *(_BYTE *)(*(_QWORD *)(this + 104) + v1++) = (v4 + (v2 >> 1)) / v2;
    }
    while (v1 < *(unsigned int *)(this + 24));
  }
  return this;
}

uint64_t SimpleLookaheadScorer::computeMinimumScore(uint64_t this)
{
  unsigned int v1;
  unsigned __int16 v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;

  v1 = *(_DWORD *)(this + 96);
  if (v1)
  {
    v2 = 0;
    v3 = *(_DWORD *)(this + 72);
    v4 = *(_QWORD *)(this + 64);
    v5 = *(_DWORD *)(this + 80);
    v6 = *(unsigned int *)(this + 84);
    v7 = *(_QWORD *)(this + 88);
    do
    {
      v8 = v5;
      if (v5 >= v3)
        v8 = v5 % v3;
      v9 = *(_QWORD *)(v4 + 16 * v8);
      this = v2;
      v10 = *(_WORD *)(v9 + 2 * v2);
      v11 = v6 - 1;
      v12 = v5 + 1;
      if (v6 >= 2)
      {
        do
        {
          if (v12 >= v3)
            v13 = 16 * (v12 % v3);
          else
            v13 = 16 * v12;
          v14 = *(__int16 *)(*(_QWORD *)(v4 + v13) + 2 * v2);
          if (v14 < v10)
            v10 = v14;
          ++v12;
          --v11;
        }
        while (v11);
      }
      *(_WORD *)(v7 + 2 * v2++) = v10;
    }
    while (v1 > v2);
  }
  return this;
}

uint64_t SimpleLookaheadScorer::computeCombinedScore(uint64_t this)
{
  unsigned int v1;
  unsigned __int16 v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;

  v1 = *(_DWORD *)(this + 96);
  if (v1)
  {
    v2 = 0;
    v3 = *(_DWORD *)(this + 72);
    v4 = *(_QWORD *)(this + 64);
    v5 = *(_DWORD *)(this + 80);
    v6 = *(_DWORD *)(this + 84);
    v7 = *(_QWORD *)(this + 88);
    do
    {
      v8 = v5;
      if (v5 >= v3)
        v8 = v5 % v3;
      v9 = *(__int16 *)(*(_QWORD *)(v4 + 16 * v8) + 2 * v2);
      if (v6 >= 2)
      {
        v10 = *(_QWORD *)(this + 8);
        v11 = v5 + 1;
        v12 = v6 - 1;
        do
        {
          v13 = v11;
          if (v11 >= v3)
            v13 = v11 % v3;
          v14 = *(__int16 *)(*(_QWORD *)(v4 + 16 * v13) + 2 * v2);
          v16 = v14 - v9;
          v15 = v14 - v9 < 0;
          if (v14 < v9)
            v9 = v14;
          if (v15)
            v17 = -v16;
          else
            v17 = v16;
          if (v17 < *(_DWORD *)(v10 + 80))
            v9 -= *(_DWORD *)(*(_QWORD *)(v10 + 72) + 4 * v17);
          ++v11;
          --v12;
        }
        while (v12);
      }
      *(_WORD *)(v7 + 2 * v2++) = v9;
    }
    while (v1 > v2);
  }
  return this;
}

uint64_t *SynchronizedArray<ScoreFixArray>::add(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6 == *(_DWORD *)(a1 + 20))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 8, 1, 1);
    v6 = *(_DWORD *)(a1 + 16);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 16 * v6;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v6 + 1;
  return DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(v7 + 16 * a2), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
}

void LookaheadScorerThreadWorker::~LookaheadScorerThreadWorker(LookaheadScorerThreadWorker *this)
{
  *(_QWORD *)this = off_24C218340;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  *(_QWORD *)this = off_24C218340;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t LookaheadScorerThreadWorker::onStartup(LookaheadScorerThreadWorker *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 6);
  v3 = MemChunkAlloc(0x88uLL, 0);
  *((_QWORD *)this + 33) = SimpleLookaheadScorer::SimpleLookaheadScorer((uint64_t)v3, *(_QWORD *)(v2 + 1576), *(_QWORD *)(v2 + 1584), *(_DWORD *)(v2 + 1592));
  v4 = MemChunkAlloc(0x18uLL, 0);
  *((_QWORD *)this + 34) = SynchronizedArray<ScoreFixArray>::SynchronizedArray((uint64_t)v4);
  v5 = MemChunkAlloc(0x18uLL, 0);
  result = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v5);
  *((_QWORD *)this + 35) = result;
  return result;
}

uint64_t LookaheadScorerThreadWorker::onShutdown(LookaheadScorerThreadWorker *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 33);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 33));
    MemChunkFree(v2, 0);
  }
  DgnDelete<SynchronizedArray<ScoreFixArray>>(*((_QWORD *)this + 34));
  return DgnDelete<UttFeatureArraySynchronizedArray>(*((_QWORD *)this + 35));
}

uint64_t DgnDelete<SynchronizedArray<ScoreFixArray>>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnArray<DgnVector>::releaseAll(result + 8);
    return MemChunkFree(v1, 0);
  }
  return result;
}

_BYTE *LookaheadScorerThreadWorker::onPlay(LookaheadScorerThreadWorker *this)
{
  uint64_t v1;
  _BYTE *result;

  v1 = *((_QWORD *)this + 6);
  *((_DWORD *)this + 64) = *(_DWORD *)(v1 + 1604);
  result = (_BYTE *)*((_QWORD *)this + 35);
  if (!*result)
    return (_BYTE *)SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)result, *(_QWORD *)(v1 + 1608));
  return result;
}

uint64_t LookaheadScorerThreadWorker::playOne(LookaheadScorerThreadWorker *this)
{
  uint64_t v1;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 34);
  if (*(_BYTE *)v1)
    return 4;
  v4 = *((_DWORD *)this + 64);
  if (v4 != -16 && *(_DWORD *)(v1 + 16) > v4)
    return 4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 33) + 32))(*((_QWORD *)this + 33));
  v6 = v5;
  v7 = *((_QWORD *)this + 35);
  if (*(_DWORD *)(v7 + 16) <= v5)
  {
    if (*(_BYTE *)v7)
    {
      v10 = (uint64_t *)*((_QWORD *)this + 33);
      v11 = *((_QWORD *)this + 34);
      *(_DWORD *)(v11 + 4) = *(_DWORD *)(v11 + 16);
      SimpleLookaheadScorer::scoreForLookahead(v10, v6, 0, (_BYTE *)v11);
    }
    return 4;
  }
  v8 = *(_QWORD *)(v7 + 8) + 16 * v5;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 288, (_QWORD *)v8, 0, *(_DWORD *)(v8 + 8));
  SimpleLookaheadScorer::scoreForLookahead(*((uint64_t **)this + 33), v6, (uint64_t)this + 288, *((_BYTE **)this + 34));
  v9 = *((_DWORD *)this + 64);
  if (v9 != -16 && *(_DWORD *)(*((_QWORD *)this + 34) + 16) > v9)
    return 4;
  return 1;
}

uint64_t LookaheadScorerThreadWorker::reset(LookaheadScorerThreadWorker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v6, *((_QWORD *)this + 5));
  v2 = *((_QWORD *)this + 33);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 35);
  if (v3)
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v3);
  v4 = *((_QWORD *)this + 34);
  if (v4)
    SynchronizedArray<ScoreFixArray>::reset(v4);
  *((_DWORD *)this + 64) = -16;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v6);
}

void sub_2099AC118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void LookaheadScorerThreadWorker::printSize(LookaheadScorerThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  int v70;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 635, (DgnString *)&v69);
  if (v70)
    v15 = v69;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v69);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 638, (DgnString *)&v69);
  if (v70)
    v26 = v69;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 4;
  else
    v27 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 639, (DgnString *)&v69);
  if (v70)
    v32 = v69;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 4;
  else
    v33 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 640, (DgnString *)&v69);
  if (v70)
    v38 = v69;
  else
    v38 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 641, (DgnString *)&v69);
  if (v70)
    v44 = v69;
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v44, v39, v39, 0);
  v64 = a3;
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 12;
  else
    v45 = 16;
  v46 = *((_DWORD *)this + 74);
  v47 = *((_DWORD *)this + 75);
  v48 = a2;
  v49 = v47 >= v46;
  v50 = v47 - v46;
  if (v49)
  {
    v52 = v46 & ~(v46 >> 31);
    v46 = 0;
    v51 = v45 + v52;
    v45 += v52 + v50;
  }
  else
  {
    v51 = v45;
  }
  v53 = v46;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 643, (DgnString *)&v69);
  if (v70)
    v58 = v69;
  else
    v58 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v20, &byte_209A88803, v21, v21, v58, v45, v51, v53);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v45;
  *a5 += v51;
  *a6 += v53;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  DgnThreadWorker::printSize(this, v48, v20, &v68, &v66, &v67);
  *a4 += v68;
  *a5 += v66;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 651, (DgnString *)&v69);
  if (v70)
    v63 = v69;
  else
    v63 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v64, &byte_209A88803, (35 - v64), (35 - v64), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v69);
}

void sub_2099AC54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t LookaheadScorerThread::stopScoring(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  DgnThreadClient::pause((DgnThreadClient *)a1, a2, a3, a4, a5, a6, a7, a8);
  SynchronizedArray<ScoreFixArray>::update(a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 272));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 264) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 264));
  *(_DWORD *)(a1 + 1600) = result;
  *(_BYTE *)(a1 + 1596) = 0;
  return result;
}

void LookaheadScorerThread::printSize(LookaheadScorerThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  LookaheadScorerThread *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  int v69;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 715, (DgnString *)&v68);
  if (v69)
    v16 = v68;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  v64 = this;
  DgnString::~DgnString((DgnString *)&v68);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 717, (DgnString *)&v68);
  if (v69)
    v26 = v68;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 4;
  else
    v27 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 718, (DgnString *)&v68);
  if (v69)
    v32 = v68;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v27;
  *a5 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 719, (DgnString *)&v68);
  if (v69)
    v37 = v68;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 720, (DgnString *)&v68);
  if (v69)
    v42 = v68;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v42, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v68);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 722, (DgnString *)&v68);
  if (v69)
    v47 = v68;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 724, (DgnString *)&v68);
  if (v69)
    v52 = v68;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 725, (DgnString *)&v68);
  if (v69)
    v58 = v68;
  else
    v58 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v53;
  *a5 += v53;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  DgnThreadClient::printSize(v64, a2, (a3 + 1), &v67, &v65, &v66);
  *a4 += v67;
  *a5 += v65;
  *a6 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 734, (DgnString *)&v68);
  if (v69)
    v63 = v68;
  else
    v63 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, a3, &byte_209A88803, (35 - a3), (35 - a3), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v68);
}

void sub_2099ACA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *ThreadedLookaheadScorer::ThreadedLookaheadScorer(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  uint64_t v11;

  *a1 = &off_24C2179F0;
  v10 = MemChunkAlloc(0x650uLL, 0);
  v11 = DgnThread<LookaheadScorerThreadWorker>::DgnThread((uint64_t)v10, a2, 0, "LookaheadScorer");
  *(_QWORD *)v11 = &off_24C217458;
  *(_QWORD *)(v11 + 1576) = a3;
  *(_QWORD *)(v11 + 1584) = a4;
  *(_DWORD *)(v11 + 1592) = a5;
  *(_BYTE *)(v11 + 1596) = 0;
  *(_QWORD *)(v11 + 1600) = 0xFFFFFFF000000000;
  *(_QWORD *)(v11 + 1608) = 0;
  a1[1] = v11;
  DgnThreadClient::startup((DgnThreadClient *)v11);
  return a1;
}

void ThreadedLookaheadScorer::~ThreadedLookaheadScorer(DgnThreadClient **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  DgnThreadClient *v9;

  *this = (DgnThreadClient *)&off_24C2179F0;
  if (DgnThreadClient::isLive(this[1]) && !DgnThreadClient::hasErrored(this[1]))
    DgnThreadClient::shutdown(this[1], v2, v3, v4, v5, v6, v7, v8);
  v9 = this[1];
  if (v9)
  {
    (**(void (***)(DgnThreadClient *))v9)(this[1]);
    MemChunkFree(v9, 0);
  }
}

{
  ThreadedLookaheadScorer::~ThreadedLookaheadScorer(this);
  JUMPOUT(0x20BD149A8);
}

void ThreadedLookaheadScorer::printSize(ThreadedLookaheadScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 769, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 771, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 774, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_209A88803, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_2099ACD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedLookaheadScorer::reset(ThreadedLookaheadScorer *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  result = LookaheadScorerThreadWorker::reset(*(LookaheadScorerThreadWorker **)(v1 + 56));
  *(_DWORD *)(v1 + 1600) = 0;
  return result;
}

uint64_t ThreadedLookaheadScorer::getNextFrameTime(ThreadedLookaheadScorer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 1600);
}

uint64_t ThreadedLookaheadScorer::scoreLookaheadUntil(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(a4 + 16) <= (int)a2 && !*(_BYTE *)a4)
  {
    v9 = *(_QWORD *)(result + 8);
    *(_BYTE *)(v9 + 1596) = 1;
    *(_DWORD *)(v9 + 1604) = a2;
    *(_QWORD *)(v9 + 1608) = a3;
    DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)v9, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v9 + 1608) = 0;
    *(_DWORD *)(v9 + 1604) = -16;
    return LookaheadScorerThread::stopScoring(v9, a4, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

BOOL ThreadedLookaheadScorer::maybeStartScoring(uint64_t a1, uint64_t a2)
{
  BOOL isScoring;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  isScoring = LookaheadScorerThread::isScoring(*(LookaheadScorerThread **)(a1 + 8));
  v12 = *(_QWORD *)(a1 + 8);
  if (!isScoring && !**(_BYTE **)(*(_QWORD *)(v12 + 56) + 272))
  {
    *(_QWORD *)(v12 + 1608) = a2;
    DgnThreadClient::play((DgnThreadClient *)v12, v5, v6, v7, v8, v9, v10, v11);
    *(_BYTE *)(v12 + 1596) = 1;
    *(_QWORD *)(v12 + 1608) = 0;
    v12 = *(_QWORD *)(a1 + 8);
  }
  return LookaheadScorerThread::isScoring((LookaheadScorerThread *)v12);
}

BOOL LookaheadScorerThread::isScoring(LookaheadScorerThread *this)
{
  _BOOL8 result;

  if (!*((_BYTE *)this + 1596))
    return 0;
  result = DgnThreadClient::isLive(this);
  if ((_DWORD)result)
    return !DgnThreadClient::hasErrored(this);
  return result;
}

uint64_t ThreadedLookaheadScorer::maybeStopScoring(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = LookaheadScorerThread::isScoring(*(LookaheadScorerThread **)(a1 + 8));
  if ((_DWORD)result)
  {
    if (!a2)
      return LookaheadScorerThread::stopScoring(*(_QWORD *)(a1 + 8), a3, v7, v8, v9, v10, v11, v12);
    result = DgnThreadClient::getThreadState(*(DgnThreadClient **)(a1 + 8));
    if ((_DWORD)result == 4)
      return LookaheadScorerThread::stopScoring(*(_QWORD *)(a1 + 8), a3, v7, v8, v9, v10, v11, v12);
  }
  return result;
}

uint64_t ThreadedLookaheadScorer::getThreadId(ThreadedLookaheadScorer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 28);
}

uint64_t SimpleLookaheadScorer::maybeStartScoring()
{
  return 0;
}

uint64_t LookaheadScorer::getThreadId(LookaheadScorer *this)
{
  return 0xFFFFFFFFLL;
}

void LookaheadScorerThread::~LookaheadScorerThread(LookaheadScorerThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t *DgnThread<LookaheadScorerThreadWorker>::newWorker(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(_QWORD *)(a1 + 16));
  v2 = MemChunkAlloc(0x130uLL, *(MemChunkRegion **)(a1 + 16));
  DgnThreadWorker::DgnThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 28));
  *v2 = (uint64_t)off_24C218340;
  *((_DWORD *)v2 + 64) = -16;
  v2[37] = 0;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 35) = 0u;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_2099AD010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<ScoreFixArray>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        v5 = (int)v4;
        v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          DgnPrimFixArray<double>::~DgnPrimFixArray(*a1 + v6);
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v4 < v2)
  {
    v7 = v2 - (unint64_t)v4;
    v8 = (_DWORD *)(*a1 + 16 * v4 + 8);
    do
    {
      *((_QWORD *)v8 - 1) = 0;
      *v8 = 0;
      v8 += 4;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(ScoreFixArraySpinQueue *this)
{
  *((_QWORD *)this + 2) = 0;
  DgnArray<DgnVector>::releaseAll((uint64_t)this);
}

void FeatureArraySpinQueue::~FeatureArraySpinQueue(FeatureArraySpinQueue *this)
{
  *((_QWORD *)this + 2) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this);
}

uint64_t DgnThread<LookaheadScorerThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  _QWORD *v5;

  v5 = (_QWORD *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *v5 = &unk_24C219928;
  *(_QWORD *)(a1 + 56) = DgnThread<LookaheadScorerThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_2099AD17C(_Unwind_Exception *a1)
{
  DgnThreadClient *v1;

  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<LookaheadScorerThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t ListDFileSubFileStream::ListDFileSubFileStream(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char *a6)
{
  _QWORD *v9;
  DgnString *v10;

  v9 = (_QWORD *)DgnFileStream::DgnFileStream(a1, a2, a3, a4);
  *v9 = &off_24C217588;
  v10 = (DgnString *)(v9 + 14);
  DgnString::DgnString((DgnString *)(v9 + 14));
  *(_QWORD *)(a1 + 104) = a5;
  DgnString::operator=(v10, a6);
  return a1;
}

void sub_2099AD214(_Unwind_Exception *a1)
{
  DgnFileStream *v1;
  DgnString *v2;

  DgnString::~DgnString(v2);
  DgnFileStream::~DgnFileStream(v1);
  _Unwind_Resume(a1);
}

void ListDFileSubFileStream::~ListDFileSubFileStream(ListDFileSubFileStream *this, uint64_t a2, const char *a3)
{
  DFile *v4;
  const char *v5;

  *(_QWORD *)this = &off_24C217588;
  v4 = (DFile *)*((_QWORD *)this + 13);
  if (v4)
  {
    if (*((_DWORD *)this + 30))
      v5 = (const char *)*((_QWORD *)this + 14);
    else
      v5 = (const char *)&unk_209A7BA0C;
    DFile::reportProgress(v4, v5, a3);
    *((_QWORD *)this + 13) = 0;
  }
  DgnString::~DgnString((ListDFileSubFileStream *)((char *)this + 112));
  DgnFileStream::~DgnFileStream(this);
}

{
  ListDFileSubFileStream::~ListDFileSubFileStream(this, a2, a3);
  JUMPOUT(0x20BD149A8);
}

void ListDFileSubFileStream::printSize(ListDFileSubFileStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 117, (DgnString *)&v43);
  if (v44)
    v16 = (void *)v43;
  else
    v16 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7BA0C, a3, &unk_209A7BA0C, v16);
  DgnString::~DgnString((DgnString *)&v43);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7BA0C);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  DgnFileStream::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v43, &v42, &v41);
  *a4 += v43;
  *a5 += v42;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 120, (DgnString *)&v43);
  if (v44)
    v26 = (void *)v43;
  else
    v26 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A7BA0C, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v43);
  *a4 += v21;
  *a5 += v21;
  v27 = (char *)this + 112;
  v28 = sizeObject((char *)this + 112);
  v29 = sizeObject(v27);
  v30 = sizeObject(v27);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 122, (DgnString *)&v43);
  if (v44)
    v35 = (void *)v43;
  else
    v35 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &unk_209A7BA0C, (34 - a3), (34 - a3), v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v43);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 124, (DgnString *)&v43);
  if (v44)
    v40 = (void *)v43;
  else
    v40 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, a3, &unk_209A7BA0C, (35 - a3), (35 - a3), v40, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v43);
}

void sub_2099AD574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ListDFile::ListDFile(ListDFile *this, const FileSpec *a2)
{
  uint64_t v2;

  DFile::DFile(this, a2);
  *(_QWORD *)v2 = &off_24C219BB8;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 144) = 0;
}

uint64_t ListDFile::createReadOnlyClone(ListDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;

  if (*((_DWORD *)this + 6))
    v8 = (void *)*((_QWORD *)this + 2);
  else
    v8 = &unk_209A7BA0C;
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 145, (uint64_t)"dfutil/listdf", 10, (uint64_t)"%.500s", a7, a8, (char)v8);
  return 0;
}

void ListDFile::~ListDFile(ListDFile *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24C219BB8;
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 16));
    MemChunkFree(v2, 0);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 96);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 80);
  DFile::~DFile(this);
}

{
  ListDFile::~ListDFile(this);
  JUMPOUT(0x20BD149A8);
}

void ListDFile::printSize(ListDFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 162, (DgnString *)&v79);
  if (v80)
    v16 = (void *)v79;
  else
    v16 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7BA0C, a3, &unk_209A7BA0C, v16);
  DgnString::~DgnString((DgnString *)&v79);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7BA0C);
  v78 = 0;
  v79 = 0;
  v21 = (a3 + 1);
  v77 = 0;
  DFile::printSize(this, 0xFFFFFFFFLL, v21, &v79, &v78, &v77);
  *a4 += v79;
  *a5 += v78;
  *a6 += v77;
  v22 = sizeObject<DgnString>((uint64_t)this + 80, 0);
  v23 = sizeObject<DgnString>((uint64_t)this + 80, 1);
  v24 = sizeObject<DgnString>((uint64_t)this + 80, 3);
  v76 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 166, (DgnString *)&v79);
  if (v80)
    v30 = (void *)v79;
  else
    v30 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v21, &unk_209A7BA0C, v25, v25, v30, v22, v23, v24);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v22;
  *a5 += v23;
  *a6 += v24;
  v31 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  v32 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  v33 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 168, (DgnString *)&v79);
  if (v80)
    v38 = (void *)v79;
  else
    v38 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v21, &unk_209A7BA0C, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 12;
  else
    v39 = 16;
  v40 = *((_DWORD *)this + 30);
  v41 = *((_DWORD *)this + 31);
  v42 = v41 >= v40;
  v43 = v41 - v40;
  if (v42)
  {
    v45 = v40 & ~(v40 >> 31);
    v40 = 0;
    v44 = v39 + v45;
    v39 += v45 + v43;
  }
  else
  {
    v44 = v39;
  }
  v46 = v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 170, (DgnString *)&v79);
  if (v80)
    v51 = (void *)v79;
  else
    v51 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_209A7BA0C, v25, v25, v51, v39, v44, v46);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v39;
  *a5 += v44;
  *a6 += v46;
  v52 = *((_QWORD *)this + 16);
  if (v52)
  {
    v78 = 0;
    v79 = 0;
    v77 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v52 + 16))(v52, 0xFFFFFFFFLL, v21, &v79, &v78, &v77);
    *a4 += v79;
    *a5 += v78;
    *a6 += v77;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 172, (DgnString *)&v79);
  if (v80)
    v58 = (void *)v79;
  else
    v58 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_209A7BA0C, v25, v25, v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 12;
  else
    v59 = 16;
  v60 = *((_DWORD *)this + 36);
  v61 = *((_DWORD *)this + 37);
  v42 = v61 >= v60;
  v62 = v61 - v60;
  if (v42)
  {
    v64 = v60 & ~(v60 >> 31);
    v60 = 0;
    v63 = v59 + v64;
    v59 += v64 + v62;
  }
  else
  {
    v63 = v59;
  }
  v65 = v60;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 174, (DgnString *)&v79);
  if (v80)
    v70 = (void *)v79;
  else
    v70 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_209A7BA0C, v25, v25, v70, v59, v63, v65);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v59;
  *a5 += v63;
  *a6 += v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 176, (DgnString *)&v79);
  if (v80)
    v75 = (void *)v79;
  else
    v75 = &unk_209A7BA0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v76, &unk_209A7BA0C, (35 - v76), (35 - v76), v75, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v79);
}

void sub_2099ADBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ListDFile::startUp(ListDFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  char *LineFieldString;
  char *v37;
  uint64_t CurrentLine;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  const char *v52;
  int v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  RealDFile *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  const char *v65;
  _BYTE v66[16];
  char *v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  _BYTE v75[240];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v75);
  DgnTextFileParser::openDgnTextFileParser((DgnTextFileParser *)v75, (char **)this + 2);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v75, "ListDFile");
  v73 = 0;
  v74 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v75, sListDFile_Versions, (uint64_t)&v73, v2, v3, v4, v5, v6);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v75, (unsigned int *)&v73, v7, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v75, v13, v14, v15, v16, v17, v18, v19);
  v71 = 0;
  v72 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v75, (uint64_t)&v71);
  v69 = 0;
  v70 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v75, (unint64_t)&v69);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v75, 2, v20, v21, v22, v23, v24, v25);
  v26 = v71;
  if (*(_DWORD *)(v71 + 8))
    v27 = *(const char **)v71;
  else
    v27 = (const char *)&unk_209A7BA0C;
  if (strcmp(v27, "InternalFileName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 210, (uint64_t)"dfutil/listdf", 4, (uint64_t)"%.500s %.500s", v28, v29, (char)"InternalFileName");
    v26 = v71;
  }
  if (*v69)
  {
    if (*(_DWORD *)(v26 + 8))
      v30 = *(void **)v26;
    else
      v30 = &unk_209A7BA0C;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 213, (uint64_t)"dfutil/listdf", 9, (uint64_t)"%.500s %.500s", v28, v29, (char)v30);
    v26 = v71;
  }
  if (*(_DWORD *)(v26 + 24))
    v31 = *(const char **)(v26 + 16);
  else
    v31 = (const char *)&unk_209A7BA0C;
  if (strcmp(v31, "ExternalFileName"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 216, (uint64_t)"dfutil/listdf", 4, (uint64_t)"%.500s %.500s", v32, v33, (char)"ExternalFileName");
  if (v69[1])
  {
    if (*(_DWORD *)(v71 + 8))
      v34 = *(const char **)v71;
    else
      v34 = (const char *)&unk_209A7BA0C;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 219, (uint64_t)"dfutil/listdf", 9, (uint64_t)"%.500s %.500s", v32, v33, (char)v34);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
  DgnArray<DgnString>::releaseAll((uint64_t)&v71);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v73);
  DgnString::DgnString((DgnString *)&v73);
  DgnString::DgnString((DgnString *)&v71);
  DgnString::preAllocate((unint64_t)&v71, 256);
  v35 = (_QWORD *)((char *)this + 96);
  v69 = 0;
  v70 = 0;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v75))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v75, 0);
    DgnString::operator=((DgnString *)&v73, LineFieldString);
    v37 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v75, 1u);
    DgnString::operator=((DgnString *)&v71, v37);
    if (DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)&v73) != -1)
    {
      CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v75);
      if (*(_DWORD *)(CurrentLine + 8))
        v41 = *(void **)CurrentLine;
      else
        v41 = &unk_209A7BA0C;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 234, (uint64_t)"dfutil/listdf", 5, (uint64_t)"%.500s", v39, v40, (char)v41);
    }
    if (DgnString::find((DgnString *)&v73, 92) != -1)
    {
      if ((_DWORD)v74)
        LOBYTE(v44) = (_BYTE)v73;
      else
        v44 = &unk_209A7BA0C;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 237, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v42, v43, (char)v44);
    }
    v45 = v74;
    if (v74 <= 1)
    {
      LOBYTE(v46) = (_BYTE)v73;
      if (!(_DWORD)v74)
        v46 = &unk_209A7BA0C;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 240, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v42, v43, (char)v46);
      v45 = v74;
    }
    if (v45)
      v47 = v73;
    else
      v47 = (const char *)&unk_209A7BA0C;
    if (strcmp(v47, "*") || ((_DWORD)v72 ? (v55 = (_BYTE *)v71) : (v55 = &unk_209A7BA0C), !*v55))
    {
      if (v45 < 2)
        goto LABEL_77;
      v50 = 0;
      v51 = 1;
      while (2)
      {
        v52 = v73;
        v53 = v73[v50];
        if (v50 && v53 == 46)
        {
          if (v73[v50 - 1] != 47)
          {
            if (!v51)
              v52 = (const char *)&unk_209A7BA0C;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 260, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
            v52 = v73;
            v53 = v73[v50];
            goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          if (v53 != 46)
          {
            if (!v50 || v52[v50 - 1] == 47)
            {
              if (!(_DWORD)v74)
                v52 = (const char *)&unk_209A7BA0C;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 265, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
              v52 = v73;
              v53 = v73[v50];
            }
            if (v53 == 47 && (!v50 || v52[v50 - 1] == 47))
            {
              if (!(_DWORD)v74)
                v52 = (const char *)&unk_209A7BA0C;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 270, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
            }
          }
        }
        ++v50;
        v51 = v74;
        LODWORD(v54) = v74 - 1;
        if ((_DWORD)v74)
          v54 = v54;
        else
          v54 = 0;
        if (v50 >= v54)
          goto LABEL_77;
        continue;
      }
    }
    DgnString::DgnString((DgnString *)&v67);
    FileSpec::getPathOnly((ListDFile *)((char *)this + 16), (DgnString *)&v67);
    FileSpec::FileSpec((FileSpec *)v66);
    if (v68)
      v56 = v67;
    else
      v56 = (char *)&unk_209A7BA0C;
    if ((_DWORD)v72)
      v57 = (char *)v71;
    else
      v57 = (char *)&unk_209A7BA0C;
    FileSpec::fillFromDefPathAndName((FileSpec *)v66, v56, v57);
    v58 = MemChunkAlloc(0x1B8uLL, 0);
    v59 = RealDFile::RealDFile((RealDFile *)v58, (const FileSpec *)v66);
    *((_QWORD *)this + 16) = v59;
    RealDFile::startUp((uint64_t)v59, 0, 1, 1, 0, 0);
    FileSpec::~FileSpec((FileSpec *)v66);
    DgnString::~DgnString((DgnString *)&v67);
LABEL_77:
    v60 = *((unsigned int *)this + 22);
    if (v60 == *((_DWORD *)this + 23))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, 1, 1);
      v60 = *((unsigned int *)this + 22);
    }
    DgnString::DgnString((DgnString *)(*((_QWORD *)this + 10) + 16 * v60), (const DgnString *)&v73);
    ++*((_DWORD *)this + 22);
    v61 = *((unsigned int *)this + 26);
    v62 = v61;
    if (v61 == *((_DWORD *)this + 27))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
      v62 = *((unsigned int *)this + 26);
    }
    DgnString::DgnString((DgnString *)(*v35 + 16 * v62));
    ++*((_DWORD *)this + 26);
    DgnString::preAllocate(*((_QWORD *)this + 12) + 16 * v61, 96);
    DgnString::operator=((DgnString *)(*v35 + 16 * v61), (DgnString *)&v71);
    v63 = *((_DWORD *)this + 30);
    if (v63 == *((_DWORD *)this + 31))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 112, 1, 1);
      v63 = *((_DWORD *)this + 30);
    }
    *(_BYTE *)(*((_QWORD *)this + 14) + v63) = 0;
    *((_DWORD *)this + 30) = v63 + 1;
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v69);
  DgnString::~DgnString((DgnString *)&v71);
  DgnString::~DgnString((DgnString *)&v73);
  ListDFile::populateBackoffSubFileActiveArray(this, v64, v65);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v75);
}

void sub_2099AE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va2);
  _Unwind_Resume(a1);
}

_QWORD *ListDFile::populateBackoffSubFileActiveArray(_QWORD *this, uint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t i;
  const DgnString *v9;
  const char *v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  const char *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  DgnString *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v3 = this[16];
  if (v3)
  {
    v4 = (uint64_t)this;
    v19 = 0;
    v20 = 0;
    v5 = *((unsigned int *)this + 22);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      for (i = 0; i < v5; ++i)
      {
        v9 = (const DgnString *)(*(_QWORD *)(v4 + 80) + v6);
        if (*((_DWORD *)v9 + 2))
          v10 = *(const char **)v9;
        else
          v10 = (const char *)&unk_209A7BA0C;
        if (strcmp(v10, "*"))
        {
          if (v7 == HIDWORD(v20))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v19, 1, 1);
            v7 = v20;
          }
          DgnString::DgnString((DgnString *)(v19 + 16 * v7), v9);
          v7 = v20 + 1;
          LODWORD(v20) = v20 + 1;
          v5 = *(unsigned int *)(v4 + 88);
        }
        v6 += 16;
      }
      v3 = *(_QWORD *)(v4 + 128);
    }
    v11 = *(unsigned int *)(v3 + 160);
    if (*(_DWORD *)(v4 + 148) < v11)
    {
      v21 = 0;
      *(_DWORD *)(v4 + 148) = realloc_array(*(_QWORD **)(v4 + 136), &v21, v11, *(unsigned int *)(v4 + 144), *(unsigned int *)(v4 + 144), 1);
      *(_QWORD *)(v4 + 136) = v21;
    }
    *(_DWORD *)(v4 + 144) = v11;
    if (v11 >= 2)
    {
      v12 = 1;
      while (1)
      {
        v13 = v12;
        v14 = (const char *)(*(_QWORD *)(v3 + 152) + ((unint64_t)v12 << 7));
        v15 = (_BYTE *)(*(_QWORD *)(v4 + 136) + v12);
        *v15 = 1;
        if (!*v14)
          goto LABEL_27;
        if ((_DWORD)v20)
          break;
LABEL_28:
        v12 = v13 + 1;
        if (v11 <= (unsigned __int16)(v13 + 1))
          return DgnArray<DgnString>::releaseAll((uint64_t)&v19);
      }
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(_DWORD *)(v19 + v16 + 8) ? *(DgnString **)(v19 + v16) : (DgnString *)&unk_209A7BA0C;
        if (!DgnString::compareNoCase(v18, v14, a3))
          break;
        ++v17;
        v16 += 16;
        if (v17 >= v20)
          goto LABEL_28;
      }
      v15 = (_BYTE *)(*(_QWORD *)(v4 + 136) + v13);
LABEL_27:
      *v15 = 0;
      goto LABEL_28;
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v19);
  }
  return this;
}

void sub_2099AE4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ListDFile::subFileExistsByExplicitExtension(ListDFile *this, char *a2)
{
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  DgnString *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v14;
  int v15;

  DgnString::DgnString((DgnString *)&v14);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v14);
  if (*((_DWORD *)this + 22))
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *((_QWORD *)this + 10) + v5;
      v8 = *(_DWORD *)(v7 + 8) ? *(DgnString **)v7 : (DgnString *)&unk_209A7BA0C;
      v9 = (const char *)(v15 ? v14 : &unk_209A7BA0C);
      if (!DgnString::compareNoCase(v8, v9, v4))
        break;
      ++v6;
      v5 += 16;
      if (v6 >= *((unsigned int *)this + 22))
        goto LABEL_11;
    }
    v12 = *(_DWORD *)(*((_QWORD *)this + 12) + v5 + 8) > 1u;
  }
  else
  {
LABEL_11:
    v10 = *((_QWORD *)this + 16);
    if (v10)
    {
      if (v15)
        v11 = v14;
      else
        v11 = &unk_209A7BA0C;
      v12 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v10 + 24))(v10, v11);
    }
    else
    {
      v12 = 0;
    }
  }
  DgnString::~DgnString((DgnString *)&v14);
  return v12;
}

void sub_2099AE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *ListDFile::openSubFileByExplicitExtension(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  DgnString *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  _BYTE v27[16];
  char *v28;
  int v29;
  void *v30;
  int v31;

  v12 = (char *)&unk_209A7BA0C;
  if (a3 > 4 || ((1 << a3) & 0x19) == 0)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 345, (uint64_t)"dfutil/listdf", 3, (uint64_t)"%s", a7, a8, (char)&unk_209A7BA0C);
  DgnString::DgnString((DgnString *)&v30);
  DFile::makeSubFileName(a1 + 56, a2, (DgnString *)&v30);
  if (!*(_DWORD *)(a1 + 88))
    goto LABEL_24;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v18 = *(_QWORD *)(a1 + 80) + v16;
    v19 = *(_DWORD *)(v18 + 8) ? *(DgnString **)v18 : (DgnString *)&unk_209A7BA0C;
    v20 = (const char *)(v31 ? v30 : &unk_209A7BA0C);
    if (!DgnString::compareNoCase(v19, v20, v13))
      break;
    ++v17;
    v16 += 16;
    if (v17 >= *(unsigned int *)(a1 + 88))
      goto LABEL_24;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + v16 + 8) <= 1u)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 356, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v14, v15, (char)a2);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_24:
    v24 = *(_QWORD *)(a1 + 128);
    if (v24)
    {
      if (v31)
        v25 = v30;
      else
        v25 = &unk_209A7BA0C;
      v23 = (uint64_t *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, v25, a3, a4);
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 395, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v14, v15, (char)a2);
      v23 = 0;
    }
  }
  else
  {
    DgnString::DgnString((DgnString *)&v28);
    FileSpec::getPathOnly((FileSpec *)(a1 + 16), (DgnString *)&v28);
    FileSpec::FileSpec((FileSpec *)v27);
    if (v29)
      v21 = v28;
    else
      v21 = (char *)&unk_209A7BA0C;
    v22 = *(_QWORD *)(a1 + 96) + v16;
    if (*(_DWORD *)(v22 + 8))
      v12 = *(char **)v22;
    FileSpec::fillFromDefPathAndName((FileSpec *)v27, v21, v12);
    v23 = MemChunkAlloc(0x80uLL, 0);
    ListDFileSubFileStream::ListDFileSubFileStream((uint64_t)v23, 0, a4, (uint64_t)v27, a1, a2);
    *(_BYTE *)(*(_QWORD *)(a1 + 112) + v17) = 1;
    FileSpec::~FileSpec((FileSpec *)v27);
    DgnString::~DgnString((DgnString *)&v28);
  }
  DgnString::~DgnString((DgnString *)&v30);
  return v23;
}

void sub_2099AE880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  FileSpec::~FileSpec((FileSpec *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  _Unwind_Resume(a1);
}

void ListDFile::removeSubFileByExplicitExtension(ListDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 403, (uint64_t)"dfutil/listdf", 3, (uint64_t)"%s", a7, a8, (char)&unk_209A7BA0C);
}

off_t ListDFile::getSubFileSizeByExplicitExtension(ListDFile *this, char *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  DgnString *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  off_t FileSize;
  uint64_t v18;
  uint64_t v19;
  OsFile *v20;
  OsFile *v21;
  void *v22;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  void *v28;
  int v29;

  DgnString::DgnString((DgnString *)&v28);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v28);
  if (!*((_DWORD *)this + 22))
    goto LABEL_20;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = *((_QWORD *)this + 10) + v7;
    v10 = *(_DWORD *)(v9 + 8) ? *(DgnString **)v9 : (DgnString *)&unk_209A7BA0C;
    v11 = (const char *)(v29 ? v28 : &unk_209A7BA0C);
    if (!DgnString::compareNoCase(v10, v11, v4))
      break;
    ++v8;
    v7 += 16;
    if (v8 >= *((unsigned int *)this + 22))
      goto LABEL_20;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 12) + v7 + 8) <= 1u)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 419, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v5, v6, (char)a2);
  if ((v8 & 0x80000000) != 0)
  {
LABEL_20:
    v15 = *((_QWORD *)this + 16);
    if (v15)
    {
      if (v29)
        v16 = v28;
      else
        v16 = &unk_209A7BA0C;
      FileSize = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v15 + 48))(v15, v16);
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 444, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v5, v6, (char)a2);
      FileSize = 0;
    }
  }
  else
  {
    DgnString::DgnString((DgnString *)&v26);
    FileSpec::getPathOnly((ListDFile *)((char *)this + 16), (DgnString *)&v26);
    FileSpec::FileSpec((FileSpec *)&v24);
    if (v27)
      v12 = v26;
    else
      v12 = (char *)&unk_209A7BA0C;
    v13 = *((_QWORD *)this + 12) + v7;
    if (*(_DWORD *)(v13 + 8))
      v14 = *(char **)v13;
    else
      v14 = (char *)&unk_209A7BA0C;
    FileSpec::fillFromDefPathAndName((FileSpec *)&v24, v12, v14);
    OsFile::openOsFile((const FileSpec *)&v24, 0);
    v21 = v20;
    if (!v20)
    {
      if (v25)
        LOBYTE(v22) = v24;
      else
        v22 = &unk_209A7BA0C;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 434, (uint64_t)"dfutil/listdf", 2, (uint64_t)"%.500s %.500s", v18, v19, (char)v22);
    }
    FileSize = OsFile::getFileSize(v21);
    DgnDelete<OsFile>(v21);
    FileSpec::~FileSpec((FileSpec *)&v24);
    DgnString::~DgnString((DgnString *)&v26);
  }
  DgnString::~DgnString((DgnString *)&v28);
  return FileSize;
}

void sub_2099AEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  FileSpec::~FileSpec((FileSpec *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  _Unwind_Resume(a1);
}

void ListDFile::deleteFileAndCleanUp(ListDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 451, (uint64_t)"dfutil/listdf", 3, (uint64_t)"%s", a7, a8, (char)&unk_209A7BA0C);
}

void ListDFile::verifyHaveOpenedAllSubFiles(ListDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;

  v10 = *((unsigned int *)this + 22);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i < v10; ++i)
    {
      v13 = *((_QWORD *)this + 10) + v11;
      v14 = *(_DWORD *)(v13 + 8);
      v15 = *(const char **)v13;
      if (v14)
        v16 = v15;
      else
        v16 = (const char *)&unk_209A7BA0C;
      if (strcmp(v16, "*")
        && *(_DWORD *)(*((_QWORD *)this + 12) + v11 + 8) >= 2u
        && !*(_BYTE *)(*((_QWORD *)this + 14) + i))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 495, (uint64_t)"dfutil/listdf", 8, (uint64_t)"%.500s %.500s", a7, a8, (char)v16);
        v10 = *((unsigned int *)this + 22);
      }
      v11 += 16;
    }
  }
  v17 = *((_QWORD *)this + 16);
  if (v17)
    RealDFile::verifyHaveOpenedAllSubFiles(v17, (uint64_t)a2, (_QWORD *)this + 17, a4, a5, a6, a7, a8);
}

void ListDFile::fillSubFileSizeInfo(ListDFile *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t i;
  const DgnString *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((unsigned int *)this + 22);
  if ((_DWORD)v2)
  {
    v3 = 0;
    for (i = 0; i < v2; ++i)
    {
      v5 = (const DgnString *)(*((_QWORD *)this + 10) + v3);
      if (*((_DWORD *)v5 + 2))
        v6 = *(const char **)v5;
      else
        v6 = (const char *)&unk_209A7BA0C;
      if (strcmp(v6, "*") && *(_DWORD *)(*((_QWORD *)this + 12) + v3 + 8) >= 2u)
      {
        v7 = (*(uint64_t (**)(ListDFile *, const char *))(*(_QWORD *)this + 48))(this, v6);
        DFileProgressInfo::add(*((DFileProgressInfo **)this + 1), v5, v7);
        v2 = *((unsigned int *)this + 22);
      }
      v3 += 16;
    }
  }
  v8 = *((_QWORD *)this + 16);
  if (v8)
    RealDFile::fillSubFileSizeInfo(v8, (_QWORD *)this + 17);
}

uint64_t ListDFile::attachProgressInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  result = *(_QWORD *)(a1 + 128);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t TEnvManager::TEnvManager(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  *(_QWORD *)a1 = off_24C2140A8;
  *(_QWORD *)(a1 + 8) = a3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), &byte_209A88803);
  *(_QWORD *)a1 = &off_24C213C28;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *a2;
  *(_OWORD *)(a1 + 88) = a2[1];
  *(_OWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void TEnvManager::TEnvManager(TEnvManager *this, char *__s, uint64_t a3)
{
  std::string *p_p;
  std::string __p;

  getFilePath(__s, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)this = off_24C2140A8;
  *((_QWORD *)this + 1) = a3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C213C28;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, __s);
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 9) = 1;
}

void sub_2099AEF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;

  *(_QWORD *)v15 = v17 + 16;
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

_BYTE *TEnvManager::open(_BYTE *this)
{
  uint64_t v1;
  FileSpec *v2;
  int v3;
  const char *v4;
  FILE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *exception;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  uint64_t v17;
  _BYTE __p[24];
  uint64_t v19;

  if (!this[40])
  {
    v1 = (uint64_t)this;
    v2 = (FileSpec *)(this + 48);
    v3 = (char)this[71];
    v4 = this + 48;
    if (v3 < 0)
      v4 = *(const char **)v2;
    v5 = fopen(v4, "rb");
    if (v5)
    {
      fclose(v5);
      if (*(char *)(v1 + 71) < 0)
        v2 = *(FileSpec **)v2;
      this = (_BYTE *)SDEnvHolder_NewFromFile(v2, 1uLL);
    }
    else
    {
      if ((*(_BYTE *)(v1 + 8) & 1) != 0)
      {
        if (*(char *)(v1 + 71) < 0)
          v2 = *(FileSpec **)v2;
        tknPrintf("Error: %s does not exist.\n", v6, v7, v8, v9, v2);
        std::string::basic_string[abi:ne180100]<0>(v16, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v16;
          v19 = v17;
        }
        *(_QWORD *)__p = &unk_24C214120;
        if (v19 >= 0)
          v12 = &__p[8];
        else
          v12 = *(const char **)&__p[8];
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/envmgr.cpp", 63, v10, v11);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v14 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v15 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        *exception = &unk_24C214120;
      }
      this = (_BYTE *)SDEnvHolder_New();
    }
    *(_QWORD *)(v1 + 80) = this;
    *(_BYTE *)(v1 + 40) = 1;
  }
  return this;
}

void sub_2099AF120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TIOException::~TIOException(void **this)
{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

void TEnvManager::close(TEnvManager *this)
{
  char v2;
  unint64_t v3;
  FileSpec **v4;
  FileSpec *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *exception;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  uint64_t v17;
  _BYTE __p[24];
  uint64_t v19;

  if (*((_BYTE *)this + 40))
  {
    v2 = *((_BYTE *)this + 71);
    if (v2 < 0)
    {
      if (!*((_QWORD *)this + 7))
        return;
    }
    else if (!*((_BYTE *)this + 71))
    {
      return;
    }
    v3 = *((_QWORD *)this + 10);
    if ((*((_BYTE *)this + 8) & 1) != 0)
    {
      SDEnvHolder_Delete(v3);
    }
    else
    {
      v4 = (FileSpec **)((char *)this + 48);
      v5 = (TEnvManager *)((char *)this + 48);
      if (v2 < 0)
        v5 = *v4;
      if (SDEnvHolder_Save(v3, v5, 1u) != 1)
      {
        if (*((char *)this + 71) < 0)
          v4 = (FileSpec **)*v4;
        tknPrintf("Error: couldn't write to %s\n", v6, v7, v8, v9, v4);
        std::string::basic_string[abi:ne180100]<0>(v16, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v16;
          v19 = v17;
        }
        *(_QWORD *)__p = &unk_24C214120;
        if (v19 >= 0)
          v12 = &__p[8];
        else
          v12 = *(const char **)&__p[8];
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/envmgr.cpp", 100, v10, v11);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v14 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v15 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        *exception = &unk_24C214120;
      }
    }
    *((_BYTE *)this + 40) = 0;
  }
}

void sub_2099AF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TEnvManager::getVar(TEnvManager *this, EnvMgr *a2, char *a3, unsigned int a4)
{
  if (((*(uint64_t (**)(TEnvManager *))(*(_QWORD *)this + 32))(this) & 1) == 0)
    (*(void (**)(TEnvManager *))(*(_QWORD *)this + 16))(this);
  return SDEnv_GetData((unint64_t *)this + 9, a2, a3, a4);
}

void TEnvManager::setVar(TEnvManager *this, EnvMgr *a2, const char *a3, uint64_t a4)
{
  unint64_t *v8;
  int Data;

  if (((*(uint64_t (**)(TEnvManager *))(*(_QWORD *)this + 32))(this) & 1) == 0)
    (*(void (**)(TEnvManager *))(*(_QWORD *)this + 16))(this);
  v8 = (unint64_t *)((char *)this + 72);
  Data = SDEnv_GetData(v8, a2, 0, 0);
  if (a4 || Data)
    SDEnv_SetData(v8, a2, (const unsigned __int8 *)a3, a4);
}

uint64_t TEnvManager::isOpen(TEnvManager *this)
{
  return *((unsigned __int8 *)this + 40);
}

void MrecInitModule_fwdbwd_fst(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;

  if (!gParDebugFwdBwd)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFwdBwd", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugFwdBwd = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFwdBwd);
  }
  if (!gParFwdBwdUseGPU)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "FwdBwdUseGPU", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParFwdBwdUseGPU = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseGPU);
  }
  if (!gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "FwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs);
  }
  if (!gParFwdBwdUseCPUGetNumOutPorts)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "FwdBwdUseCPUGetNumOutPorts", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParFwdBwdUseCPUGetNumOutPorts = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetNumOutPorts);
  }
  if (!gParFwdBwdUseCPUCumulativeSums)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "FwdBwdUseCPUCumulativeSums", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParFwdBwdUseCPUCumulativeSums = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUCumulativeSums);
  }
  if (!gParFwdBwdUseCPUInitCandidateStates)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "FwdBwdUseCPUInitCandidateStates", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParFwdBwdUseCPUInitCandidateStates = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUInitCandidateStates);
  }
  if (!gParFwdBwdUseCPUMakeBackwardDecision)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "FwdBwdUseCPUMakeBackwardDecision", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v13 = &unk_24C214CE8;
    gParFwdBwdUseCPUMakeBackwardDecision = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUMakeBackwardDecision);
  }
  if (!gParFwdBwdUseCPUGetBlockSizes)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "FwdBwdUseCPUGetBlockSizes", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParFwdBwdUseCPUGetBlockSizes = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetBlockSizes);
  }
  if (!gParFwdBwdUseCPUInitCandidateBlocks)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "FwdBwdUseCPUInitCandidateBlocks", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v17 = &unk_24C214CE8;
    gParFwdBwdUseCPUInitCandidateBlocks = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUInitCandidateBlocks);
  }
  if (!gParFwdBwdUseCPUCopyWithCutoff)
  {
    v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "FwdBwdUseCPUCopyWithCutoff", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v19 = &unk_24C214CE8;
    gParFwdBwdUseCPUCopyWithCutoff = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUCopyWithCutoff);
  }
  if (!gParFwdBwdUseCPUSortCandidatesByState)
  {
    v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "FwdBwdUseCPUSortCandidatesByState", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v21 = &unk_24C214CE8;
    gParFwdBwdUseCPUSortCandidatesByState = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUSortCandidatesByState);
  }
  if (!gParFwdBwdUseCPUDoStep)
  {
    v22 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v22, "FwdBwdUseCPUDoStep", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v23 = &unk_24C214CE8;
    gParFwdBwdUseCPUDoStep = (uint64_t)v23;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUDoStep);
  }
  if (!gParFwdBwdUseCPUSortCandidatesByScore)
  {
    v24 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v24, "FwdBwdUseCPUSortCandidatesByScore", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v25 = &unk_24C214CE8;
    gParFwdBwdUseCPUSortCandidatesByScore = (uint64_t)v25;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUSortCandidatesByScore);
  }
  if (!gParFwdBwdUseCPUUpdateBackwardLinks)
  {
    v26 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v26, "FwdBwdUseCPUUpdateBackwardLinks", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v27 = &unk_24C214CE8;
    gParFwdBwdUseCPUUpdateBackwardLinks = (uint64_t)v27;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUUpdateBackwardLinks);
  }
  if (!gParDebugFwdBwdActivePelSelection)
  {
    v28 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v28, "DebugFwdBwdActivePelSelection", (const char *)&unk_209A7BAD0, (const char *)&unk_209A7BAD0, 0, 0, 0);
    *v29 = &unk_24C214CE8;
    gParDebugFwdBwdActivePelSelection = (uint64_t)v29;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFwdBwdActivePelSelection);
  }
}

void FwdBwd::FwdBwd(FwdBwd *this, const PicMgr *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  SearchItf::SearchItf(this);
  *(_QWORD *)v5 = &off_24C218D98;
  *(_DWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 160) = -1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)(v5 + 200) = 0;
  *(_QWORD *)(v5 + 208) = a2;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  if (*(_BYTE *)(gParFwdBwdUseGPU + 41))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 477, (uint64_t)"fst/fwdbwd", 1, (uint64_t)"%s", v3, v4, (char)&unk_209A7BAD0);
}

void sub_2099AFCA4(_Unwind_Exception *a1)
{
  SearchItf *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = v8;
  DgnIArray<Utterance *>::~DgnIArray(v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v9);
  DgnIArray<Utterance *>::~DgnIArray(v6);
  DgnIArray<Utterance *>::~DgnIArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v7);
  DgnArray<FwdBwdColumn>::releaseAll(v3);
  DgnIArray<Utterance *>::~DgnIArray(v2);
  SearchItf::~SearchItf(v1);
  _Unwind_Resume(a1);
}

void FwdBwd::~FwdBwd(FwdBwdGPUData **this)
{
  *this = (FwdBwdGPUData *)&off_24C218D98;
  DgnDelete<FwdBwdGPUData>(this[23]);
  this[23] = 0;
  this[26] = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 37));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 35));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 33));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 31));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 29));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 27));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 24));
  DgnArray<FwdBwdColumn>::releaseAll((uint64_t)(this + 21));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 18));
  SearchItf::~SearchItf((SearchItf *)this);
}

{
  FwdBwd::~FwdBwd(this);
  JUMPOUT(0x20BD149A8);
}

FwdBwdGPUData *DgnDelete<FwdBwdGPUData>(FwdBwdGPUData *result)
{
  _QWORD *v1;

  if (result)
  {
    FwdBwdGPUData::~FwdBwdGPUData(result);
    return (FwdBwdGPUData *)MemChunkFree(v1, 0);
  }
  return result;
}

double FwdBwd::reset(FwdBwd *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  double result;
  int v6;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v6 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
    v3 = *((_DWORD *)*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v2, &v6) + 4);
  }
  else
  {
    v3 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  }
  v4 = *((_QWORD *)this + 29);
  *(_DWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v4 + 16) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t FwdBwd::getNumOutPortsItf(uint64_t this)
{
  if (*(_QWORD *)(this + 184))
    return FwdBwd::getNumOutPortsGPU(this);
  else
    return FwdBwd::getNumOutPortsCPU(this);
}

uint64_t FwdBwd::getNumOutPortsCPU(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  if (*(_DWORD *)(this + 136))
  {
    v1 = 0;
    v2 = *(_QWORD *)(this + 232);
    v3 = *(_QWORD *)(this + 40);
    v4 = *(_QWORD *)(this + 216);
    do
    {
      v5 = *(_DWORD *)(v2 + 40 * v1);
      if (*(_DWORD *)(v3 + 160) == v5)
      {
        v6 = 0;
      }
      else
      {
        v7 = *(_DWORD *)(v3 + 140);
        v6 = v7 > (int)v5;
        v8 = *(_QWORD *)(v3 + 152);
        do
        {
          v9 = *(_DWORD *)(v8 + 4 * v5);
          v10 = v5 + 1;
          v5 += 2;
          if (v7 > *(_DWORD *)(v8 + 4 * v10))
            ++v6;
        }
        while ((v9 & 0x80000000) == 0);
      }
      *(_DWORD *)(v4 + 4 * v1++) = v6;
    }
    while (v1 < *(unsigned int *)(this + 136));
  }
  return this;
}

uint64_t FwdBwd::getNumOutPortsGPU(uint64_t this)
{
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (*(_BYTE *)(gParFwdBwdUseCPUGetNumOutPorts + 41) && *(_DWORD *)(this + 136))
  {
    v1 = 0;
    v2 = *(unsigned int **)(this + 232);
    v3 = *(_QWORD *)(this + 184);
    v4 = *(_QWORD *)(this + 216);
    do
    {
      v6 = *v2;
      v2 += 10;
      v5 = v6;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 120) <= v5)
          goto LABEL_8;
      }
      else if (*(_DWORD *)(*(_QWORD *)(this + 40) + 160) == (_DWORD)v5)
      {
LABEL_8:
        v7 = 0;
        goto LABEL_9;
      }
      v7 = *(_DWORD *)(*(_QWORD *)(v3 + 160) + 4 * v5);
LABEL_9:
      *(_DWORD *)(v4 + 4 * v1++) = v7;
    }
    while (v1 < *(unsigned int *)(this + 136));
  }
  return this;
}

_QWORD *FwdBwd::getNumOutPortsFromFwdBwdProbsGPU(_QWORD *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  if (*(_BYTE *)(gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs + 41))
  {
    v2 = this[21];
    v3 = v2 + 40 * a2;
    v5 = *(_DWORD *)(v3 + 16);
    v4 = (unsigned int *)(v3 + 16);
    if (v5)
    {
      v6 = 0;
      v7 = *(unsigned int **)(v2 + 40 * a2 + 8);
      v8 = this[23];
      v9 = this[27];
      do
      {
        v11 = *v7;
        v7 += 14;
        v10 = v11;
        if (v8)
        {
          if (*(_DWORD *)(v8 + 120) <= v10)
            goto LABEL_8;
        }
        else if (*(_DWORD *)(this[5] + 160) == (_DWORD)v10)
        {
LABEL_8:
          v12 = 0;
          goto LABEL_9;
        }
        v12 = *(_DWORD *)(*(_QWORD *)(v8 + 160) + 4 * v10);
LABEL_9:
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *v4);
    }
  }
  return this;
}

uint64_t FwdBwd::cumulativeSumsItf(FwdBwd *this, int *a2, int a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  if (*((_QWORD *)this + 23))
  {
    result = 0;
    if (a3 >= 1 && *(_BYTE *)(gParFwdBwdUseCPUCumulativeSums + 41))
    {
      LODWORD(result) = 0;
      v4 = a3;
      do
      {
        v5 = *a2;
        *a2++ = result;
        result = (v5 + result);
        --v4;
      }
      while (v4);
    }
  }
  else if (a3 < 1)
  {
    return 0;
  }
  else
  {
    LODWORD(result) = 0;
    v6 = a3;
    do
    {
      v7 = *a2;
      *a2++ = result;
      result = (v7 + result);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t FwdBwd::initCandidateStatesItf(uint64_t this)
{
  if (*(_QWORD *)(this + 184))
    return FwdBwd::initCandidateStatesGPU(this);
  else
    return FwdBwd::initCandidateStatesCPU(this);
}

uint64_t FwdBwd::initCandidateStatesCPU(uint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v1 = *(unsigned int *)(this + 136);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 40);
    do
    {
      v4 = *(_QWORD *)(this + 232) + 40 * v2;
      v5 = *(_DWORD *)v4;
      if (*(_DWORD *)(v3 + 160) != *(_DWORD *)v4)
      {
        v6 = *(unsigned int *)(*(_QWORD *)(this + 216) + 4 * v2);
        if (*(_DWORD *)(v3 + 140) > (signed int)v5)
        {
          v7 = *(_QWORD *)(this + 248) + 40 * v6;
          v8 = *(_OWORD *)v4;
          v9 = *(_OWORD *)(v4 + 16);
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(v4 + 32);
          *(_OWORD *)v7 = v8;
          *(_OWORD *)(v7 + 16) = v9;
          v10 = *(_QWORD *)(this + 248) + 40 * v6;
          *(_DWORD *)(v10 + 24) = v2;
          *(_DWORD *)(v10 + 28) = 1;
          LODWORD(v6) = v6 + 1;
          v3 = *(_QWORD *)(this + 40);
        }
        v11 = *(_QWORD *)(v3 + 152);
        v12 = *(_DWORD *)(v3 + 140);
        do
        {
          v13 = *(_DWORD *)(v11 + 4 * v5);
          v14 = *(_DWORD *)(v11 + 4 * (v5 + 1));
          if (v12 > v14)
          {
            v15 = *(_QWORD *)(this + 248) + 40 * v6;
            *(_DWORD *)v15 = v14;
            v16 = *(_QWORD *)(this + 232) + 40 * v2;
            v17 = (double)((v13 >> 20) & 0x3FF);
            *(double *)(v15 + 8) = *(double *)(v16 + 8) + v17;
            *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
            *(_DWORD *)(v15 + 20) = v13 & 0xFFFFF;
            *(_DWORD *)(v15 + 24) = v2;
            *(_DWORD *)(v15 + 28) = 1;
            *(double *)(v15 + 32) = v17;
            LODWORD(v6) = v6 + 1;
          }
          v5 += 2;
        }
        while ((v13 & 0x80000000) == 0);
        v1 = *(unsigned int *)(this + 136);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return this;
}

uint64_t FwdBwd::initCandidateStatesGPU(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  int v16;
  double v17;

  if (*(_BYTE *)(gParFwdBwdUseCPUInitCandidateStates + 41))
  {
    v1 = *(unsigned int *)(this + 136);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = *(_QWORD *)(this + 232);
      v4 = *(_QWORD *)(this + 184);
      do
      {
        v5 = *(unsigned int *)(v3 + 40 * v2);
        if (v4)
        {
          if (*(_DWORD *)(v4 + 120) > v5)
            goto LABEL_8;
        }
        else if (*(_DWORD *)(*(_QWORD *)(this + 40) + 160) != (_DWORD)v5)
        {
LABEL_8:
          v6 = *(unsigned int *)(*(_QWORD *)(v4 + 160) + 4 * v5);
          if ((_DWORD)v6)
          {
            v7 = 0;
            v8 = *(_DWORD *)(*(_QWORD *)(v4 + 176) + 4 * v5);
            v9 = *(_DWORD *)(*(_QWORD *)(this + 216) + 4 * v2);
            v10 = v3 + 40 * v2;
            v11 = (_DWORD *)(v10 + 16);
            v12 = *(_QWORD *)(this + 248);
            v13 = *(_QWORD *)(v4 + 144);
            v14 = (double *)(v10 + 8);
            do
            {
              v15 = v12 + 40 * (v9 + v7);
              *(_DWORD *)(v15 + 16) = *v11;
              *(_DWORD *)v15 = *(_DWORD *)(v13 + 4 * (v8 + v7));
              v16 = *(_DWORD *)(v13 + 4 * (v8 + v6 + v7));
              v17 = *(float *)(v13 + 4 * (v8 + 2 * v6 + v7));
              *(double *)(v15 + 8) = *v14 + v17;
              *(_DWORD *)(v15 + 20) = v16;
              *(_DWORD *)(v15 + 24) = v2;
              *(_DWORD *)(v15 + 28) = 1;
              *(double *)(v15 + 32) = v17;
              ++v7;
            }
            while (v6 != v7);
          }
        }
        ++v2;
      }
      while (v2 != v1);
    }
  }
  return this;
}

void FwdBwd::makeBackwardDecision(FwdBwd *this, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  long double v17;
  uint64_t v18;
  uint64_t *v19;

  if (*(_BYTE *)(gParFwdBwdUseCPUMakeBackwardDecision + 41))
  {
    v3 = *((_QWORD *)this + 21);
    v4 = *(unsigned int *)(v3 + 40 * a2 + 16);
    if ((_DWORD)v4)
    {
      v6 = 0;
      v7 = *(_QWORD *)(v3 + 40 * a2 + 8);
      v19 = (uint64_t *)(v3 + 40 * (a2 + 1) + 24);
      v8 = *((_QWORD *)this + 23);
      do
      {
        v9 = *(unsigned int *)(v7 + 56 * v6);
        if (v8)
        {
          if (*(_DWORD *)(v8 + 120) > v9)
            goto LABEL_6;
        }
        else if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) != (_DWORD)v9)
        {
LABEL_6:
          v10 = *(_DWORD *)(*(_QWORD *)(v8 + 160) + 4 * v9);
          if (v10)
          {
            v11 = *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v6);
            v12 = *v19;
            v13 = -1.79769313e308;
            do
            {
              v14 = v12 + 24 * v11;
              v15 = *(double *)(v14 + 16);
              if (v13 != -1.79769313e308)
              {
                if (v15 == -1.79769313e308)
                {
                  v15 = v13;
                }
                else
                {
                  if (v13 > v15)
                    v16 = *(double *)(v14 + 16);
                  else
                    v16 = v13;
                  if (v13 > v15)
                    v15 = v13;
                  if (v16 - v15 >= -400.0)
                  {
                    v17 = exp(v16 - v15);
                    v15 = v15 + log1p(v17);
                  }
                }
              }
              ++v11;
              v13 = v15;
              --v10;
            }
            while (v10);
          }
          else
          {
            v15 = -1.79769313e308;
          }
          v18 = v7 + 56 * v6;
          *(double *)(v18 + 16) = v15 - a3;
          *(_BYTE *)(v18 + 40) = 0;
          goto LABEL_24;
        }
        *(_QWORD *)(v7 + 56 * v6 + 16) = 0xFFEFFFFFFFFFFFFFLL;
LABEL_24:
        ++v6;
      }
      while (v6 != v4);
    }
  }
}

uint64_t FwdBwd::getStateBlockSizesCPU(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(this + 264);
    do
    {
      if (a3 < 1)
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        v7 = v4 * a3;
        v8 = a3;
        do
        {
          if (!v7
            || (int)v7 < a2
            && *(_DWORD *)(*(_QWORD *)(this + 248) + 40 * (v7 - 1)) != *(_DWORD *)(*(_QWORD *)(this + 248) + 40 * v7))
          {
            ++v6;
          }
          ++v7;
          --v8;
        }
        while (v8);
      }
      *(_DWORD *)(v5 + 4 * v4++) = v6;
    }
    while (v4 != a4);
  }
  return this;
}

_QWORD *FwdBwd::initCandidateBlocksCPU(_QWORD *this, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = this[33];
    do
    {
      if (a3 >= 1)
      {
        v6 = v4 * a3;
        v7 = *(_DWORD *)(v5 + 4 * v4);
        v8 = a3;
        do
        {
          if (!v6 || (int)v6 < a2 && *(_DWORD *)(this[31] + 40 * (v6 - 1)) != *(_DWORD *)(this[31] + 40 * v6))
            *(_DWORD *)(this[35] + 4 * v7++) = v6;
          ++v6;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return this;
}

uint64_t FwdBwd::doStepFwdBwdCPU(uint64_t this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  long double v22;

  if (a3 >= 1)
  {
    v3 = this;
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = *(_QWORD *)(v3 + 280);
      v7 = v4 + 1;
      v8 = a2;
      if (v4 + 1 != v5)
        v8 = *(_DWORD *)(v6 + 4 * v7);
      v9 = *(_DWORD *)(v6 + 4 * v4);
      v10 = *(_QWORD *)(v3 + 248) + 40 * v9;
      v11 = 5 * v4;
      v12 = *(_QWORD *)(v3 + 296) + 40 * v4;
      v13 = *(_OWORD *)v10;
      v14 = *(_OWORD *)(v10 + 16);
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v10 + 32);
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      v15 = *(_QWORD *)(v3 + 296) + 8 * v11;
      *(_DWORD *)(v15 + 24) = v9;
      *(_DWORD *)(v15 + 28) = v8 - v9;
      v16 = *(double *)(v15 + 8);
      v17 = v9 + 1;
      if ((int)(v9 + 1) >= v8)
      {
        v20 = *(double *)(v15 + 8);
      }
      else
      {
        v18 = *(_QWORD *)(v3 + 248);
        do
        {
          v19 = v18 + 40 * v17;
          v20 = *(double *)(v19 + 8);
          if (v16 != -1.79769313e308)
          {
            if (v20 == -1.79769313e308)
            {
              v20 = v16;
            }
            else
            {
              if (v16 > v20)
                v21 = *(double *)(v19 + 8);
              else
                v21 = v16;
              if (v16 > v20)
                v20 = v16;
              if (v21 - v20 >= -400.0)
              {
                v22 = exp(v21 - v20);
                v20 = v20 + log1p(v22);
              }
            }
          }
          ++v17;
          v16 = v20;
        }
        while (v8 != v17);
      }
      this = PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v3 + 32), *(unsigned __int16 *)(v15 + 20));
      *(double *)(*(_QWORD *)(v3 + 296) + 8 * v11 + 8) = v20 - (double)(int)this;
      v4 = v7;
    }
    while (v7 != v5);
  }
  return this;
}

uint64_t FwdBwd::copyWithCutoffCPU(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 16);
    v5 = a3 - 1;
    if (v4 < a3 - 1)
      v5 = *(_DWORD *)(result + 16);
    v6 = 40 * v4;
    while (v6 != v3)
    {
      v7 = *(_QWORD *)(result + 232) + v3;
      *(_DWORD *)v7 = *(_DWORD *)(a2 + v3);
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + v3 + 8);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v3 + 16);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + v3 + 32);
      v3 += 40;
      if (40 * a3 == v3)
      {
        ++v5;
        break;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(result + 136) = v5;
  return result;
}

uint64_t FwdBwd::appendNonEmittingCandidates(uint64_t result, double *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v5 = result;
  v6 = *(unsigned int *)a2;
  v7 = *(_QWORD *)(result + 184);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 120) <= v6)
      return result;
    LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(v7 + 112) + 4 * v6);
    v8 = *(_QWORD *)(result + 40);
  }
  else
  {
    v8 = *(_QWORD *)(result + 40);
    if (*(_DWORD *)(v8 + 160) == (_DWORD)v6)
      return result;
  }
  if (*(_DWORD *)(v8 + 140) <= (int)v6
    || (*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v6) & 0x40000000) != 0)
  {
    v18 = 0;
    do
    {
      v9 = *(_QWORD *)(v5 + 40);
      v10 = *(_QWORD *)(v9 + 152);
      v11 = *(_DWORD *)(v10 + 4 * v6);
      v12 = *(_DWORD *)(v10 + 4 * (v6 + 1));
      v18 = v12;
      if (*(_DWORD *)(v9 + 140) <= v12)
      {
        result = *(_QWORD *)(v5 + 184);
        if (result)
        {
          if (*(_DWORD *)(v9 + 160) == v12)
          {
            v12 = *(_DWORD *)(result + 120);
          }
          else
          {
            result = (uint64_t)HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(result, &v18);
            v12 = *(_DWORD *)(*(_QWORD *)result + 16);
          }
        }
        v13 = a2[1];
        v14 = *((_DWORD *)a2 + 4);
        v16 = *(_DWORD *)(a3 + 8);
        v15 = *(_DWORD *)(a3 + 12);
        if (v16 + 1 > v15)
          result = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a3, v16 + 1 - v15, 0);
        *(_DWORD *)(a3 + 8) = v16 + 1;
        v17 = *(_QWORD *)a3 + 40 * v16;
        *(_DWORD *)v17 = v12;
        *(double *)(v17 + 8) = v13 + (double)((v11 >> 20) & 0x3FF);
        *(_DWORD *)(v17 + 16) = v14;
        *(_QWORD *)(v17 + 20) = -1;
        *(_DWORD *)(v17 + 28) = 0;
        *(_QWORD *)(v17 + 32) = 0;
      }
      LODWORD(v6) = v6 + 2;
    }
    while ((v11 & 0x80000000) == 0);
  }
  return result;
}

uint64_t FwdBwd::propagateNulls(FwdBwd *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  char *v12;
  void *v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  void *v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v26 = 0;
  v27 = 0;
  LODWORD(v2) = *((_DWORD *)this + 34);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *((_QWORD *)this + 29) + v3;
      v6 = *(_OWORD *)(v5 + 16);
      v24[0] = *(_OWORD *)v5;
      v24[1] = v6;
      v25 = *(_QWORD *)(v5 + 32);
      FwdBwd::appendNonEmittingCandidates((uint64_t)this, (double *)v24, (uint64_t)&v26);
      ++v4;
      v2 = *((unsigned int *)this + 34);
      v3 += 40;
    }
    while (v4 < v2);
    v7 = v27;
    if ((_DWORD)v27)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *(_OWORD *)(v26 + v8 + 16);
        v22[0] = *(_OWORD *)(v26 + v8);
        v22[1] = v10;
        v23 = *(_QWORD *)(v26 + v8 + 32);
        FwdBwd::appendNonEmittingCandidates((uint64_t)this, (double *)v22, (uint64_t)&v26);
        ++v9;
        v7 = v27;
        v8 += 40;
      }
      while (v9 < v27);
      LODWORD(v2) = *((_DWORD *)this + 34);
    }
  }
  else
  {
    v7 = 0;
  }
  v20 = 0;
  v21 = 0;
  v11 = v2 + v7;
  if ((_DWORD)v2 + v7)
  {
    v28 = 0;
    HIDWORD(v21) = realloc_array(0, &v28, 40 * v11, 0, 0, 1) / 0x28;
    v12 = (char *)v28;
    v20 = v28;
    LODWORD(v2) = *((_DWORD *)this + 34);
  }
  else
  {
    v12 = 0;
  }
  LODWORD(v21) = v11;
  v13 = memcpy(v12, *((const void **)this + 29), 40 * v2);
  v14 = *((_DWORD *)this + 34);
  v15 = v27;
  if ((_DWORD)v27)
  {
    v16 = v26 + 16;
    v17 = *((_DWORD *)this + 34);
    do
    {
      v18 = &v12[40 * v17];
      *(_DWORD *)v18 = *(_DWORD *)(v16 - 16);
      *((_QWORD *)v18 + 1) = *(_QWORD *)(v16 - 8);
      *((_OWORD *)v18 + 1) = *(_OWORD *)v16;
      *((_QWORD *)v18 + 4) = *(_QWORD *)(v16 + 16);
      ++v17;
      v16 += 40;
      --v15;
    }
    while (v15);
  }
  FwdBwd::sortAndMergeNonEmittingCandidates((uint64_t)v13, (uint64_t)&v20, v14);
  mrec_qsort_r<FBTokenCompareByScoreDecr>((unint64_t)v20, v21, 40);
  FwdBwd::copyWithCutoffCPU((uint64_t)this, (uint64_t)v20, v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v20);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v26);
}

void sub_2099B0A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1 - 56);
  _Unwind_Resume(a1);
}

void FwdBwd::sortAndMergeNonEmittingCandidates(uint64_t a1, uint64_t a2, signed int a3)
{
  unsigned int v3;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  int *v15;
  double v16;
  long double v17;
  unsigned int v18;

  v3 = a3;
  mrec_qsort_r<FBTokenCompareByStateID>((char *)(*(_QWORD *)a2 + 40 * a3), (*(_DWORD *)(a2 + 8) - a3), 40);
  v5 = *(unsigned int *)(a2 + 8);
  if (v5 > v3)
  {
    v6 = *(int **)a2;
    v7 = v3;
    v8 = 10 * v3;
    do
    {
      if (v7)
      {
        v9 = v6[v8];
        if (v9 == v6[v8 - 10])
        {
          v10 = (double *)&v6[10 * v3 - 10];
          v12 = v10[1];
          v11 = v10 + 1;
          v13 = v12;
          v14 = *(double *)&v6[v8 + 2];
          if (v12 != -1.79769313e308)
          {
            if (v14 == -1.79769313e308)
            {
              v14 = v13;
            }
            else
            {
              if (v13 > v14)
                v16 = *(double *)&v6[v8 + 2];
              else
                v16 = v13;
              if (v13 > v14)
                v14 = v13;
              if (v16 - v14 >= -400.0)
              {
                v17 = exp(v16 - v14);
                v14 = v14 + log1p(v17);
              }
            }
          }
          *v11 = v14;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = *v6;
      }
      v15 = &v6[10 * v3];
      *v15 = v9;
      *((_QWORD *)v15 + 1) = *(_QWORD *)&v6[v8 + 2];
      *((_OWORD *)v15 + 1) = *(_OWORD *)&v6[v8 + 4];
      *((_QWORD *)v15 + 4) = *(_QWORD *)&v6[v8 + 8];
      ++v3;
LABEL_18:
      ++v7;
      v8 += 10;
    }
    while (v5 != v7);
  }
  v18 = *(_DWORD *)(a2 + 12);
  if (v3 > v18)
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a2, v3 - v18, 0);
  *(_DWORD *)(a2 + 8) = v3;
}

unint64_t mrec_qsort_r<FBTokenCompareByScoreDecr>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  double *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  char v33;
  int v34;
  unint64_t v35;
  double *v36;
  double *v37;
  double *v38;
  _QWORD *v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  char v44;
  uint64_t v45;
  double v46;
  char v47;
  double v48;
  double v49;
  double v50;
  int v51;
  uint64_t v52;
  double v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  BOOL v67;
  int64_t v68;
  unint64_t v69;
  double *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_120:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v75 = result + a2 * a3;
      v76 = result + a3;
      v77 = result;
      do
      {
        if (v76 > result)
        {
          v78 = v77;
          v79 = v76;
          do
          {
            v80 = v79;
            v79 += v4;
            if (*(double *)(v79 + 8) >= *(double *)(v80 + 8))
              break;
            if (v7)
            {
              v81 = 0;
              v82 = v78 + a3;
              if (v6)
              {
                do
                {
                  v83 = *(_QWORD *)(v82 + 8 * v81);
                  *(_QWORD *)(v82 + 8 * v81) = *(_QWORD *)(v78 + 8 * v81);
                  *(_QWORD *)(v78 + 8 * v81++) = v83;
                }
                while ((unint64_t)a3 >> 3 != v81);
              }
              else
              {
                do
                {
                  v84 = *(_BYTE *)(v82 + v81);
                  *(_BYTE *)(v82 + v81) = *(_BYTE *)(v78 + v81);
                  *(_BYTE *)(v78 + v81++) = v84;
                }
                while (a3 != v81);
              }
            }
            else
            {
              v85 = *(_QWORD *)v80;
              *(_QWORD *)v80 = *(_QWORD *)v79;
              *(_QWORD *)v79 = v85;
            }
            v78 += v4;
          }
          while (v79 > result);
        }
        v76 += a3;
        v77 += a3;
      }
      while (v76 < v75);
    }
  }
  else
  {
    v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      v9 = (double *)(result + (a2 >> 1) * a3);
      if (a2 != 7)
      {
        v10 = result + (a2 - 1) * a3;
        if (a2 < 0x29)
        {
          v12 = result;
          v16 = result + (a2 - 1) * a3;
        }
        else
        {
          v11 = (a2 >> 3) * a3;
          v12 = result + v11;
          v13 = *(double *)(result + 8);
          v14 = *(double *)(result + v11 + 8);
          v15 = *(double *)(result + 2 * v11 + 8);
          if (v13 <= v14)
          {
            if (v14 >= v15)
            {
              if (v13 <= v15)
                v12 = result + 2 * v11;
              else
                v12 = result;
            }
          }
          else if (v14 <= v15)
          {
            if (v13 <= v15)
              v12 = result;
            else
              v12 = result + 2 * v11;
          }
          v17 = *(double *)((char *)v9 - v11 + 8);
          v18 = v9[1];
          v19 = *(double *)((char *)v9 + v11 + 8);
          if (v17 <= v18)
          {
            if (v18 >= v19)
            {
              if (v17 <= v19)
                v9 = (double *)((char *)v9 + v11);
              else
                v9 = (double *)((char *)v9 - v11);
            }
          }
          else if (v18 <= v19)
          {
            if (v17 <= v19)
              v9 = (double *)((char *)v9 - v11);
            else
              v9 = (double *)((char *)v9 + v11);
          }
          v20 = v10 - 2 * v11;
          v16 = v10 - v11;
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v16 + 8);
          v23 = *(double *)(v10 + 8);
          if (v21 <= v22)
          {
            if (v22 >= v23)
            {
              if (v21 <= v23)
                v16 = result + (a2 - 1) * a3;
              else
                v16 = v20;
            }
          }
          else if (v22 <= v23)
          {
            if (v21 <= v23)
              v16 = v20;
            else
              v16 = result + (a2 - 1) * a3;
          }
        }
        v24 = *(double *)(v12 + 8);
        v25 = v9[1];
        v26 = *(double *)(v16 + 8);
        if (v24 <= v25)
        {
          if (v25 >= v26)
          {
            if (v24 <= v26)
              v9 = (double *)v16;
            else
              v9 = (double *)v12;
          }
        }
        else if (v25 <= v26)
        {
          if (v24 <= v26)
            v9 = (double *)v12;
          else
            v9 = (double *)v16;
        }
      }
      if (v7)
      {
        if (v6)
        {
          v27 = (uint64_t *)result;
          v28 = (unint64_t)a3 >> 3;
          do
          {
            v29 = *v27;
            *v27++ = *(_QWORD *)v9;
            *(_QWORD *)v9++ = v29;
            --v28;
          }
          while (v28);
        }
        else
        {
          v31 = a3;
          v32 = (char *)result;
          do
          {
            v33 = *v32;
            *v32++ = *(_BYTE *)v9;
            *(_BYTE *)v9 = v33;
            v9 = (double *)((char *)v9 + 1);
            --v31;
          }
          while (v31);
        }
      }
      else
      {
        v30 = *(_QWORD *)result;
        *(double *)result = *v9;
        *(_QWORD *)v9 = v30;
      }
      v34 = 0;
      v35 = result + a3;
      v36 = (double *)(result + (a2 - 1) * a3);
      v37 = v36;
      v38 = (double *)(result + a3);
      v39 = (_QWORD *)(result + a3);
LABEL_54:
      while (v38 <= v37)
      {
        v40 = v38[1];
        v41 = *(double *)(result + 8);
        if (v40 < v41)
          break;
        if (v40 == v41)
        {
          if (v7)
          {
            v42 = 0;
            if (v6)
            {
              do
              {
                v43 = *(double *)&v39[v42];
                v39[v42] = *(_QWORD *)&v38[v42];
                v38[v42++] = v43;
              }
              while (v8 != v42);
            }
            else
            {
              do
              {
                v44 = *((_BYTE *)v39 + v42);
                *((_BYTE *)v39 + v42) = *((_BYTE *)v38 + v42);
                *((_BYTE *)v38 + v42++) = v44;
              }
              while (a3 != v42);
            }
          }
          else
          {
            v55 = *v39;
            *v39 = *(_QWORD *)v38;
            *(_QWORD *)v38 = v55;
          }
          v39 = (_QWORD *)((char *)v39 + a3);
          v34 = 1;
        }
        v38 = (double *)((char *)v38 + a3);
      }
      while (v38 <= v37)
      {
        v49 = v37[1];
        v50 = *(double *)(result + 8);
        if (v49 == v50)
          v51 = 0;
        else
          v51 = -1;
        if (v49 < v50)
          v51 = 1;
        if (v51 < 0)
        {
          if (v7)
          {
            v52 = 0;
            if (v6)
            {
              do
              {
                v53 = v38[v52];
                v38[v52] = v37[v52];
                v37[v52++] = v53;
              }
              while (v8 != v52);
            }
            else
            {
              do
              {
                v54 = *((_BYTE *)v38 + v52);
                *((_BYTE *)v38 + v52) = *((_BYTE *)v37 + v52);
                *((_BYTE *)v37 + v52++) = v54;
              }
              while (a3 != v52);
            }
          }
          else
          {
            v56 = *(_QWORD *)v38;
            *v38 = *v37;
            *(_QWORD *)v37 = v56;
          }
          v38 = (double *)((char *)v38 + a3);
          v37 = (double *)((char *)v37 + v4);
          v34 = 1;
          goto LABEL_54;
        }
        if (!v51)
        {
          if (v7)
          {
            v45 = 0;
            if (v6)
            {
              do
              {
                v46 = v37[v45];
                v37[v45] = v36[v45];
                v36[v45++] = v46;
              }
              while (v8 != v45);
            }
            else
            {
              do
              {
                v47 = *((_BYTE *)v37 + v45);
                *((_BYTE *)v37 + v45) = *((_BYTE *)v36 + v45);
                *((_BYTE *)v36 + v45++) = v47;
              }
              while (a3 != v45);
            }
          }
          else
          {
            v48 = *v37;
            *v37 = *v36;
            *v36 = v48;
          }
          v36 = (double *)((char *)v36 + v4);
          v34 = 1;
        }
        v37 = (double *)((char *)v37 + v4);
      }
      v57 = result + a2 * a3;
      if (!v34)
        break;
      v58 = (char *)v38 - (char *)v39;
      if ((uint64_t)((uint64_t)v39 - result) >= (char *)v38 - (char *)v39)
        v59 = (char *)v38 - (char *)v39;
      else
        v59 = (unint64_t)v39 - result;
      if (v59)
      {
        if (v6)
        {
          v60 = (uint64_t *)((char *)v38 - v59);
          v61 = v59 >> 3;
          v62 = (uint64_t *)result;
          do
          {
            v63 = *v62;
            *v62++ = *v60;
            *v60++ = v63;
            --v61;
          }
          while (v61);
        }
        else
        {
          v64 = -(uint64_t)v59;
          v65 = (char *)result;
          do
          {
            v66 = *v65;
            *v65++ = *((_BYTE *)v38 + v64);
            *((_BYTE *)v38 + v64) = v66;
            v67 = __CFADD__(v64++, 1);
          }
          while (!v67);
        }
      }
      v68 = (char *)v36 - (char *)v37;
      v69 = v57 - ((_QWORD)v36 + a3);
      if ((char *)v36 - (char *)v37 < (uint64_t)v69)
        v69 = (char *)v36 - (char *)v37;
      if (v69)
      {
        if (v6)
        {
          v70 = (double *)(v57 - v69);
          v71 = v69 >> 3;
          do
          {
            v72 = *(_QWORD *)v38;
            *v38++ = *v70;
            *(_QWORD *)v70++ = v72;
            --v71;
          }
          while (v71);
        }
        else
        {
          v73 = -(uint64_t)v69;
          do
          {
            v74 = *(_BYTE *)v38;
            *(_BYTE *)v38 = *(_BYTE *)(v57 + v73);
            v38 = (double *)((char *)v38 + 1);
            *(_BYTE *)(v57 + v73) = v74;
            v67 = __CFADD__(v73++, 1);
          }
          while (!v67);
        }
      }
      if (v58 > a3)
        result = mrec_qsort_r<FBTokenCompareByScoreDecr>();
      if (v68 <= a3)
        return result;
      result = v57 - v68;
      a2 = v68 / (unint64_t)a3;
      v6 = (((v57 - v68) | a3) & 7) == 0;
      if ((((v57 - v68) | a3) & 7) != 0)
        v7 = 2;
      else
        v7 = v5;
      if (a2 < 7)
        goto LABEL_120;
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v86 = result;
      do
      {
        if (v35 > result)
        {
          v87 = v86;
          v88 = v35;
          do
          {
            v89 = v88;
            v88 += v4;
            if (*(double *)(v88 + 8) >= *(double *)(v89 + 8))
              break;
            if (v7)
            {
              v90 = 0;
              v91 = v87 + a3;
              if (v6)
              {
                do
                {
                  v92 = *(_QWORD *)(v91 + 8 * v90);
                  *(_QWORD *)(v91 + 8 * v90) = *(_QWORD *)(v87 + 8 * v90);
                  *(_QWORD *)(v87 + 8 * v90++) = v92;
                }
                while (v8 != v90);
              }
              else
              {
                do
                {
                  v93 = *(_BYTE *)(v91 + v90);
                  *(_BYTE *)(v91 + v90) = *(_BYTE *)(v87 + v90);
                  *(_BYTE *)(v87 + v90++) = v93;
                }
                while (a3 != v90);
              }
            }
            else
            {
              v94 = *(_QWORD *)v89;
              *(_QWORD *)v89 = *(_QWORD *)v88;
              *(_QWORD *)v88 = v94;
            }
            v87 += v4;
          }
          while (v88 > result);
        }
        v35 += a3;
        v86 += a3;
      }
      while (v35 < v57);
    }
  }
  return result;
}

char *mrec_qsort_r<FBTokenCompareByStateID>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  int v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  char v50;
  int v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  BOOL v80;
  int64_t v81;
  int64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  int64_t v86;
  char v87;
  char *v88;
  char *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_162:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v88 = &result[a2 * a3];
      v89 = &result[a3];
      v90 = result;
      do
      {
        if (v89 > result)
        {
          v91 = v90;
          v92 = v89;
          do
          {
            v93 = v92;
            v92 = (_DWORD *)((char *)v92 + v4);
            if (*v92 <= *v93)
              break;
            if (v7)
            {
              v94 = 0;
              v95 = (uint64_t)v91 + a3;
              if (v6)
              {
                do
                {
                  v96 = *(_QWORD *)(v95 + 8 * v94);
                  *(_QWORD *)(v95 + 8 * v94) = *(_QWORD *)&v91[2 * v94];
                  *(_QWORD *)&v91[2 * v94++] = v96;
                }
                while ((unint64_t)a3 >> 3 != v94);
              }
              else
              {
                do
                {
                  v97 = *(_BYTE *)(v95 + v94);
                  *(_BYTE *)(v95 + v94) = *((_BYTE *)v91 + v94);
                  *((_BYTE *)v91 + v94++) = v97;
                }
                while (a3 != v94);
              }
            }
            else
            {
              v98 = *(_QWORD *)v93;
              *(_QWORD *)v93 = *(_QWORD *)v92;
              *(_QWORD *)v92 = v98;
            }
            v91 = (_DWORD *)((char *)v91 + v4);
          }
          while (v92 > (_DWORD *)result);
        }
        v89 += a3;
        v90 = (_DWORD *)((char *)v90 + a3);
      }
      while (v89 < v88);
    }
  }
  else
  {
    v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      v9 = &result[(a2 >> 1) * a3];
      if (a2 != 7)
      {
        v10 = &result[(a2 - 1) * a3];
        if (a2 <= 0x28)
        {
          v22 = *(_DWORD *)result;
          v33 = *(_DWORD *)v9;
          v13 = result;
          v42 = *(_DWORD *)v10;
        }
        else
        {
          v11 = (a2 >> 3) * a3;
          v12 = 2 * v11;
          v13 = &result[2 * v11];
          v14 = *(_DWORD *)result;
          v15 = *(_DWORD *)&result[v11];
          v16 = *(_DWORD *)v13;
          if (*(_DWORD *)result >= *(_DWORD *)v13)
            v17 = *(_DWORD *)v13;
          else
            v17 = *(_DWORD *)result;
          if (v14 >= v16)
            v18 = &result[2 * v11];
          else
            v18 = result;
          if (v15 > v16)
          {
            v17 = *(_DWORD *)&result[v11];
            v18 = &result[v11];
          }
          if (v14 <= v16)
            v19 = *(_DWORD *)v13;
          else
            v19 = *(_DWORD *)result;
          if (v14 >= v16)
            v13 = result;
          v20 = v15 < v16;
          if (v15 >= v16)
            v21 = v19;
          else
            v21 = *(_DWORD *)&result[v11];
          if (v20)
            v13 = &result[v11];
          if (v14 < v15)
            v22 = v21;
          else
            v22 = v17;
          if (v14 >= v15)
            v13 = v18;
          v23 = -(uint64_t)v11;
          v24 = &v9[-v11];
          v25 = &v9[v11];
          v26 = *(_DWORD *)v24;
          v27 = *(_DWORD *)v9;
          v28 = *(_DWORD *)v25;
          if (*(_DWORD *)v24 >= *(_DWORD *)v25)
            v29 = *(_DWORD *)v25;
          else
            v29 = *(_DWORD *)v24;
          if (v26 >= v28)
            v30 = v25;
          else
            v30 = v24;
          if (v27 > v28)
          {
            v29 = *(_DWORD *)v9;
            v30 = &result[(a2 >> 1) * a3];
          }
          if (v26 <= v28)
            v31 = *(_DWORD *)v25;
          else
            v31 = *(_DWORD *)v24;
          if (v26 >= v28)
            v25 = v24;
          if (v27 >= v28)
            v32 = v31;
          else
            v32 = *(_DWORD *)v9;
          if (v27 >= v28)
            v9 = v25;
          if (v26 < v27)
            v33 = v32;
          else
            v33 = v29;
          if (v26 >= v27)
            v9 = v30;
          v34 = &v10[-v12];
          v35 = &v10[v23];
          v36 = *(_DWORD *)v34;
          v37 = *(_DWORD *)v35;
          v38 = *(_DWORD *)v10;
          if (*(_DWORD *)v34 >= *(_DWORD *)v10)
            v39 = *(_DWORD *)v10;
          else
            v39 = *(_DWORD *)v34;
          if (v36 >= v38)
            v40 = &result[(a2 - 1) * a3];
          else
            v40 = v34;
          if (v37 > v38)
          {
            v39 = *(_DWORD *)v35;
            v40 = v35;
          }
          if (v36 <= v38)
            v41 = *(_DWORD *)v10;
          else
            v41 = *(_DWORD *)v34;
          if (v36 >= v38)
            v10 = v34;
          if (v37 >= v38)
            v42 = v41;
          else
            v42 = *(_DWORD *)v35;
          if (v37 < v38)
            v10 = v35;
          if (v36 >= v37)
          {
            v42 = v39;
            v10 = v40;
          }
        }
        if (v22 >= v42)
          v43 = v10;
        else
          v43 = v13;
        if (v33 > v42)
          v43 = v9;
        if (v22 >= v42)
          v10 = v13;
        if (v33 >= v42)
          v9 = v10;
        if (v22 >= v33)
          v9 = v43;
      }
      if (v7)
      {
        if (v6)
        {
          v44 = result;
          v45 = (unint64_t)a3 >> 3;
          do
          {
            v46 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v9;
            v44 += 8;
            *(_QWORD *)v9 = v46;
            v9 += 8;
            --v45;
          }
          while (v45);
        }
        else
        {
          v48 = a3;
          v49 = result;
          do
          {
            v50 = *v49;
            *v49++ = *v9;
            *v9++ = v50;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        v47 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v9;
        *(_QWORD *)v9 = v47;
      }
      v51 = 0;
      v52 = &result[a3];
      v53 = &result[(a2 - 1) * a3];
      v54 = v53;
      v55 = &result[a3];
      v56 = &result[a3];
LABEL_96:
      while (v55 <= v54 && *(_DWORD *)v55 <= *(_DWORD *)result)
      {
        if (*(_DWORD *)v55 == *(_DWORD *)result)
        {
          if (v7)
          {
            v57 = 0;
            if (v6)
            {
              do
              {
                v58 = *(_QWORD *)&v56[8 * v57];
                *(_QWORD *)&v56[8 * v57] = *(_QWORD *)&v55[8 * v57];
                *(_QWORD *)&v55[8 * v57++] = v58;
              }
              while (v8 != v57);
            }
            else
            {
              do
              {
                v59 = v56[v57];
                v56[v57] = v55[v57];
                v55[v57++] = v59;
              }
              while (a3 != v57);
            }
          }
          else
          {
            v68 = *(_QWORD *)v56;
            *(_QWORD *)v56 = *(_QWORD *)v55;
            *(_QWORD *)v55 = v68;
          }
          v56 += a3;
          v51 = 1;
        }
        v55 += a3;
      }
      while (v55 <= v54)
      {
        if (*(_DWORD *)v54 == *(_DWORD *)result)
          v64 = 0;
        else
          v64 = -1;
        if (*(_DWORD *)v54 > *(_DWORD *)result)
          v64 = 1;
        if (v64 < 0)
        {
          if (v7)
          {
            v65 = 0;
            if (v6)
            {
              do
              {
                v66 = *(_QWORD *)&v55[8 * v65];
                *(_QWORD *)&v55[8 * v65] = *(_QWORD *)&v54[8 * v65];
                *(_QWORD *)&v54[8 * v65++] = v66;
              }
              while (v8 != v65);
            }
            else
            {
              do
              {
                v67 = v55[v65];
                v55[v65] = v54[v65];
                v54[v65++] = v67;
              }
              while (a3 != v65);
            }
          }
          else
          {
            v69 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v54;
            *(_QWORD *)v54 = v69;
          }
          v55 += a3;
          v54 += v4;
          v51 = 1;
          goto LABEL_96;
        }
        if (!v64)
        {
          if (v7)
          {
            v60 = 0;
            if (v6)
            {
              do
              {
                v61 = *(_QWORD *)&v54[8 * v60];
                *(_QWORD *)&v54[8 * v60] = *(_QWORD *)&v53[8 * v60];
                *(_QWORD *)&v53[8 * v60++] = v61;
              }
              while (v8 != v60);
            }
            else
            {
              do
              {
                v62 = v54[v60];
                v54[v60] = v53[v60];
                v53[v60++] = v62;
              }
              while (a3 != v60);
            }
          }
          else
          {
            v63 = *(_QWORD *)v54;
            *(_QWORD *)v54 = *(_QWORD *)v53;
            *(_QWORD *)v53 = v63;
          }
          v53 += v4;
          v51 = 1;
        }
        v54 += v4;
      }
      v70 = &result[a2 * a3];
      if (!v51)
        break;
      v71 = v55 - v56;
      if (v56 - result >= v55 - v56)
        v72 = v55 - v56;
      else
        v72 = v56 - result;
      if (v72)
      {
        if (v6)
        {
          v73 = &v55[-v72];
          v74 = v72 >> 3;
          v75 = result;
          do
          {
            v76 = *(_QWORD *)v75;
            *(_QWORD *)v75 = *(_QWORD *)v73;
            v75 += 8;
            *(_QWORD *)v73 = v76;
            v73 += 8;
            --v74;
          }
          while (v74);
        }
        else
        {
          v77 = -(uint64_t)v72;
          v78 = result;
          do
          {
            v79 = *v78;
            *v78++ = v55[v77];
            v55[v77] = v79;
            v80 = __CFADD__(v77++, 1);
          }
          while (!v80);
        }
      }
      v81 = v53 - v54;
      v82 = v70 - &v53[a3];
      if (v53 - v54 < v82)
        v82 = v53 - v54;
      if (v82)
      {
        if (v6)
        {
          v83 = &v70[-v82];
          v84 = (unint64_t)v82 >> 3;
          do
          {
            v85 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v83;
            v55 += 8;
            *(_QWORD *)v83 = v85;
            v83 += 8;
            --v84;
          }
          while (v84);
        }
        else
        {
          v86 = -v82;
          do
          {
            v87 = *v55;
            *v55++ = v70[v86];
            v70[v86] = v87;
            v80 = __CFADD__(v86++, 1);
          }
          while (!v80);
        }
      }
      if (v71 > a3)
        result = (char *)mrec_qsort_r<FBTokenCompareByStateID>();
      if (v81 <= a3)
        return result;
      result = &v70[-v81];
      a2 = v81 / (unint64_t)a3;
      v6 = ((((_BYTE)v70 - v81) | a3) & 7) == 0;
      if (((((_BYTE)v70 - v81) | a3) & 7) != 0)
        v7 = 2;
      else
        v7 = v5;
      if (a2 < 7)
        goto LABEL_162;
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v99 = result;
      do
      {
        if (v52 > result)
        {
          v100 = v99;
          v101 = v52;
          do
          {
            v102 = v101;
            v101 = (_DWORD *)((char *)v101 + v4);
            if (*v101 <= *v102)
              break;
            if (v7)
            {
              v103 = 0;
              v104 = (uint64_t)v100 + a3;
              if (v6)
              {
                do
                {
                  v105 = *(_QWORD *)(v104 + 8 * v103);
                  *(_QWORD *)(v104 + 8 * v103) = *(_QWORD *)&v100[2 * v103];
                  *(_QWORD *)&v100[2 * v103++] = v105;
                }
                while (v8 != v103);
              }
              else
              {
                do
                {
                  v106 = *(_BYTE *)(v104 + v103);
                  *(_BYTE *)(v104 + v103) = *((_BYTE *)v100 + v103);
                  *((_BYTE *)v100 + v103++) = v106;
                }
                while (a3 != v103);
              }
            }
            else
            {
              v107 = *(_QWORD *)v102;
              *(_QWORD *)v102 = *(_QWORD *)v101;
              *(_QWORD *)v101 = v107;
            }
            v100 = (_DWORD *)((char *)v100 + v4);
          }
          while (v101 > (_DWORD *)result);
        }
        v52 += a3;
        v99 = (_DWORD *)((char *)v99 + a3);
      }
      while (v52 < v70);
    }
  }
  return result;
}

double FwdBwd::copyNonCondensedBackwardLinks(FwdBwd *this, unsigned int a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  double v15;

  FwdBwd::maybeReallocFwdBwdColumn((uint64_t)this, *((_DWORD *)this + 40) + 2);
  v5 = *((_QWORD *)this + 21) + 40 * (*((_DWORD *)this + 40) + 1);
  v8 = *(_DWORD *)(v5 + 32);
  v7 = (unsigned int *)(v5 + 32);
  v6 = v8;
  v9 = v7[1];
  if (a2 > v9)
    DgnArray<CWIDAC>::reallocElts((uint64_t)(v7 - 2), a2 - v9, 0);
  *v7 = a2;
  v10 = a2;
  if (v6 < a2)
  {
    v11 = a2 - v6;
    v12 = (_OWORD *)(*((_QWORD *)v7 - 1) + 24 * v6 + 8);
    result = 0.0;
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      *v12 = xmmword_209A7BAC0;
      v12 = (_OWORD *)((char *)v12 + 24);
      --v11;
    }
    while (v11);
  }
  if ((int)a2 >= 1)
  {
    v13 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 40 * (*((_DWORD *)this + 40) + 1) + 24) + 16);
    v14 = (_QWORD *)(*((_QWORD *)this + 31) + 32);
    do
    {
      *((_DWORD *)v13 - 4) = *((_DWORD *)v14 - 2);
      v15 = *(double *)v14;
      v14 += 5;
      result = v15;
      *((double *)v13 - 1) = v15;
      *v13 = 0xFFEFFFFFFFFFFFFFLL;
      v13 += 3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t FwdBwd::maybeReallocFwdBwdColumn(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = (_QWORD *)(this + 168);
  v5 = *(_DWORD *)(this + 180);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if ((_DWORD)v7 != 0 && v6)
    this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(this + 168, v7, 0);
  v8 = *(unsigned int *)(v3 + 176);
  if (v8 <= a2)
  {
    if (v8 < a2)
    {
      v9 = a2 - v8;
      v10 = 40 * v8;
      do
      {
        v11 = *v4 + v10;
        *(_QWORD *)(v11 + 32) = 0;
        *(_OWORD *)v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        v10 += 40;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    this = DgnArray<FwdBwdColumn>::destructAt((uint64_t)v4, a2, v8 - a2);
  }
  *(_DWORD *)(v3 + 176) = a2;
  return this;
}

uint64_t FwdBwd::doFrame(FwdBwd *this, unsigned int a2, int a3, SearchStats *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  FwdBwd::getNumOutPortsItf((uint64_t)this);
  v6 = FwdBwd::cumulativeSumsItf(this, *((int **)this + 27), *((_DWORD *)this + 34));
  v7 = *((_DWORD *)this + 65);
  if (v6 > v7)
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 248, v6 - v7, 0);
  *((_DWORD *)this + 64) = v6;
  FwdBwd::initCandidateStatesItf((uint64_t)this);
  mrec_qsort_r<FBTokenCompareByStateID>(*((char **)this + 31), v6, 40);
  v8 = vcvtpd_s64_f64((double)v6 * 0.00390625);
  v9 = *((_DWORD *)this + 69);
  if (v8 > v9)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 264, v8 - v9, 0);
  *((_DWORD *)this + 68) = v8;
  if (!*((_QWORD *)this + 23) || *(_BYTE *)(gParFwdBwdUseCPUGetBlockSizes + 41))
    FwdBwd::getStateBlockSizesCPU((uint64_t)this, v6, 256, v8);
  v10 = FwdBwd::cumulativeSumsItf(this, *((int **)this + 33), v8);
  v11 = *((_DWORD *)this + 73);
  if (v10 > v11)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, v10 - v11, 0);
  *((_DWORD *)this + 72) = v10;
  if (!*((_QWORD *)this + 23) || *(_BYTE *)(gParFwdBwdUseCPUInitCandidateBlocks + 41))
    FwdBwd::initCandidateBlocksCPU(this, v6, 256, v8);
  FwdBwd::copyNonCondensedBackwardLinks(this, v6);
  v12 = *((_DWORD *)this + 77);
  if (v10 > v12)
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 296, v10 - v12, 0);
  *((_DWORD *)this + 76) = v10;
  if (!*((_QWORD *)this + 23) || *(_BYTE *)(gParFwdBwdUseCPUDoStep + 41))
    FwdBwd::doStepFwdBwdCPU((uint64_t)this, v6, v10);
  mrec_qsort_r<FBTokenCompareByScoreDecr>(*((_QWORD *)this + 37), (int)v10, 40);
  if (!*((_QWORD *)this + 23) || *(_BYTE *)(gParFwdBwdUseCPUCopyWithCutoff + 41))
    FwdBwd::copyWithCutoffCPU((uint64_t)this, *((_QWORD *)this + 37), v10);
  FwdBwd::propagateNulls(this);
  *((_DWORD *)this + 40) = a2;
  return FwdBwd::copyActiveToFwdProbs(this, a2);
}

uint64_t FwdBwd::copyActiveToFwdProbs(FwdBwd *this, unsigned int a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  double v20;
  int *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;

  v4 = *((unsigned int *)this + 34);
  if ((_DWORD)v4)
  {
    v5 = (double *)(*((_QWORD *)this + 29) + 8);
    v6 = -1.79769313e308;
    do
    {
      v7 = *v5;
      if (v6 != -1.79769313e308)
      {
        if (v7 == -1.79769313e308)
        {
          v7 = v6;
        }
        else
        {
          if (v6 > v7)
            v8 = *v5;
          else
            v8 = v6;
          if (v6 > v7)
            v7 = v6;
          if (v8 - v7 >= -400.0)
          {
            v9 = exp(v8 - v7);
            v7 = v7 + log1p(v9);
          }
        }
      }
      v5 += 5;
      v6 = v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v7 = -1.79769313e308;
  }
  result = FwdBwd::maybeReallocFwdBwdColumn((uint64_t)this, a2 + 1);
  v11 = *((_QWORD *)this + 21);
  *(double *)(v11 + 40 * a2) = v7;
  if (*((_DWORD *)this + 34))
  {
    v12 = 0;
    v13 = v11 + 40 * a2;
    v14 = (_QWORD *)(v13 + 8);
    v15 = (_DWORD *)(v13 + 16);
    v32 = (_DWORD *)(v13 + 20);
    while (1)
    {
      v16 = *((_QWORD *)this + 29);
      v17 = v16 + 40 * v12;
      v18 = *(double *)(v17 + 8) - v7;
      *(double *)(v17 + 8) = v18;
      v19 = *(_DWORD *)(v17 + 20);
      if (v19 < 0)
      {
        v20 = 0.0;
      }
      else
      {
        result = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v17 + 20));
        v20 = (double)-(int)result;
        v16 = *((_QWORD *)this + 29);
        v18 = *(double *)(v16 + 40 * v12 + 8);
      }
      v21 = (int *)(v16 + 40 * v12);
      v22 = *v21;
      v23 = *((_QWORD *)v21 + 3);
      v24 = *v15;
      v25 = v24 + 1;
      if ((v24 + 1) > *v32)
        break;
      *v15 = v25;
      v26 = 0uLL;
      if ((_DWORD)v24 != -1)
        goto LABEL_24;
      v30 = -1;
LABEL_27:
      v31 = *v14 + 56 * v30;
      *(_DWORD *)v31 = v22;
      *(double *)(v31 + 8) = v18;
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)(v31 + 24) = 0;
      *(double *)(v31 + 32) = v20;
      *(_BYTE *)(v31 + 40) = 0;
      *(_DWORD *)(v31 + 44) = v19;
      *(_QWORD *)(v31 + 48) = v23;
      if (++v12 >= (unint64_t)*((unsigned int *)this + 34))
        return result;
    }
    result = DgnArray<DiskNgramContext>::reallocElts((uint64_t)v14, (v24 + 1 - *v32), 0);
    *v15 = v25;
    v26 = 0uLL;
LABEL_24:
    v27 = 56 * v24;
    do
    {
      v28 = *v14 + v27;
      *(_DWORD *)v28 = -1;
      *(_OWORD *)(v28 + 8) = v26;
      *(_OWORD *)(v28 + 24) = v26;
      *(_BYTE *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 44) = -1;
      *(_DWORD *)(v28 + 52) = 0;
      ++v24;
      v29 = *v15;
      v27 += 56;
    }
    while (v24 < v29);
    v30 = v29 - 1;
    goto LABEL_27;
  }
  return result;
}

uint64_t FwdBwd::endTopRecPassSyncRecog(FwdBwd *this)
{
  FwdBwd::doBackwardPass(this);
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FwdBwd::doBackwardPass(FwdBwd *this)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unsigned int v10;
  double v11;
  double v12;
  unsigned int v13;

  v2 = *((_DWORD *)this + 44);
  v3 = v2 - 1;
  v4 = *((_QWORD *)this + 21);
  v5 = v4 + 40 * (v2 - 1);
  v6 = *(unsigned int *)(v5 + 16);
  if (*(_DWORD *)(v5 + 16))
  {
    v7 = *(_QWORD *)(v4 + 40 * v3 + 8);
    v8 = *((_QWORD *)this + 23);
    v9 = (double *)(v7 + 16);
    while (1)
    {
      v10 = *((_DWORD *)v9 - 4);
      if (!v8)
        break;
      v11 = 0.0;
      if (*(_DWORD *)(v8 + 120) > v10)
        goto LABEL_5;
LABEL_6:
      v12 = v11 + *(v9 - 1);
      *v9 = v11;
      v9[1] = v12;
      v9 += 7;
      if (!--v6)
      {
        v13 = 0;
        do
          FwdBwd::updateBackwardProbNullArcs((uint64_t)this, v5, v13++);
        while (v13 < *(_DWORD *)(v5 + 16));
        goto LABEL_11;
      }
    }
    v11 = 0.0;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == v10)
      goto LABEL_6;
LABEL_5:
    v11 = -1.79769313e308;
    goto LABEL_6;
  }
LABEL_11:
  if (v3 >= 1)
  {
    do
      FwdBwd::doBackwardStep(this, --v2);
    while (v2 > 1);
  }
}

void FwdBwd::printSize(FwdBwd *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  int v29;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 2459, (DgnString *)&v28);
  if (v29)
    v16 = v28;
  else
    v16 = &unk_209A7BAD0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7BAD0, a3, &unk_209A7BAD0, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7BAD0);
  v26 = 0;
  v27 = 0;
  SearchItf::printSize(this, a2, (a3 + 1), &v27, &v26, &v26);
  *a4 += v27;
  *a5 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 2467, (DgnString *)&v28);
  if (v29)
    v25 = v28;
  else
    v25 = &unk_209A7BAD0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &unk_209A7BAD0, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_2099B2018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL FwdBwd::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = *(_DWORD *)(a1 + 152);
  v8 = *(_DWORD *)(a2 + 8);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a2 = MemChunkAlloc(*(unsigned int *)(a1 + 152), 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  else if (!v8)
  {
    goto LABEL_10;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)a2 + v10++) = 0;
  while (v10 < *(unsigned int *)(a2 + 8));
LABEL_10:
  v11 = *(unsigned int *)(a1 + 136);
  if (!(_DWORD)v11)
  {
    v13 = -1.79769313e308;
LABEL_24:
    v14 = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  v12 = (double *)(*(_QWORD *)(a1 + 232) + 16);
  v13 = -1.79769313e308;
  v14 = 0xFFFFFFFFLL;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) == *((_DWORD *)v12 - 4)
      && *(_DWORD *)v12 != -1
      && *(_DWORD *)(*(_QWORD *)(a1 + 144) + 12 * *(unsigned int *)v12 + 8) == *(_DWORD *)(a1 + 160))
    {
      if (v13 < *(v12 - 1))
        v13 = *(v12 - 1);
      v14 = *(unsigned int *)v12;
    }
    v12 += 5;
    --v11;
  }
  while (v11);
  if (v14 == 0xFFFFFFFFLL)
    goto LABEL_24;
  v15 = v14;
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + v15) = 1;
    v15 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 12 * v15);
  }
  while ((_DWORD)v15 != -1);
LABEL_25:
  v16 = (int)-v13;
  if (v13 == -1.79769313e308)
    v16 = 1879048192;
  *a4 = v16;
  return v14 != 0xFFFFFFFFLL;
}

uint64_t FwdBwd::beginTopRecSyncRecog(FwdBwd *this, VirtMap *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)this + 61);
  v5 = v3;
  if (v3 > v4)
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 232, v3 - v4, 0);
    v5 = *((_DWORD *)this + 4);
  }
  *((_DWORD *)this + 60) = v3;
  *((_DWORD *)this + 34) = 0;
  v6 = *((_DWORD *)this + 57);
  if (v5 > v6)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 216, v5 - v6, 0);
  *((_DWORD *)this + 56) = v5;
  return (**(uint64_t (***)(FwdBwd *))this)(this);
}

uint64_t FwdBwd::endTopRecSyncRecog(FwdBwd *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 29) = 0;
  }
  *((_QWORD *)this + 30) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 31);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 31) = 0;
  }
  *((_QWORD *)this + 32) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 33);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 33) = 0;
  }
  *((_QWORD *)this + 34) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 35);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 35) = 0;
  }
  *((_QWORD *)this + 36) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 37);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 37) = 0;
  }
  *((_QWORD *)this + 38) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 27);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((_QWORD *)this + 27) = 0;
  }
  *((_QWORD *)this + 28) = 0;
  DgnArray<FwdBwdColumn>::releaseAll((uint64_t)this + 168);
  return *((_QWORD *)this + 14);
}

_QWORD *DgnArray<FwdBwdColumn>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<FwdBwdColumn>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void FwdBwd::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unsigned int Node;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  const WordLatticeLC *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  int v27;
  _QWORD v28[2];
  int v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  __int128 v40;
  _DWORD v41[2];
  __int128 v42;

  Node = Lattice<WordLatticeLC>::createNode((uint64_t)a2);
  v6 = *(_DWORD *)(a1 + 152);
  v7 = (v6 - 1);
  if (v6 - 1 >= 0)
  {
    v8 = Node;
    v9 = 0;
    v10 = 0;
    v11 = 12 * (v6 - 1);
    v26 = 0xFFFFFF;
    v27 = 0;
    do
    {
      if (*(_BYTE *)(*a3 + v7))
      {
        v12 = *(_QWORD *)(a1 + 144);
        v14 = *(_DWORD *)(v12 + v11 + 4);
        v13 = *(_DWORD *)(v12 + v11 + 8);
        v15 = *(_DWORD *)(v12 + v11);
        v16 = v27;
        if (v14 == 16777209)
          v16 = v13 - (v9 + v10);
        v17 = v26;
        if (v14 != 16777209)
          v17 = *(_DWORD *)(v12 + v11 + 4);
        v26 = v17;
        v27 = v16;
        v9 = v13 - v10;
        if ((v15 & 0x80000000) != 0 || *(_DWORD *)(v12 + 12 * v15 + 4) != 16777209)
        {
          v18 = (const WordLatticeLC *)Lattice<WordLatticeLC>::createNode((uint64_t)a2);
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), v26, v19, v20, v21, v22, v23, v24, (uint64_t)v41);
          v29 = v10;
          v30 = v9;
          v31 = v27;
          v32 = 0u;
          v33 = 0u;
          v34 = 0;
          v35 = 1879048192;
          v36 = 0;
          v37 = -1;
          v28[0] = &off_24C2149F8;
          v28[1] = 0xBFF0000000000000;
          v38 = v41[0];
          v39 = v41[1];
          v40 = v42;
          Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a2, v8, v18, (WordLatticeLC *)v28);
          v10 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + v11 + 8);
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v28);
          v9 = 0;
          v8 = v18;
        }
      }
      --v6;
      v11 -= 12;
      --v7;
    }
    while (v6 > 0);
  }
}

void sub_2099B24C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

void FwdBwd::updateBackwardProbNullArcs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  int v27;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 + 56 * a3;
  v6 = *(unsigned __int8 *)(v4 + 40);
  v5 = (_BYTE *)(v4 + 40);
  if (!v6)
  {
    *v5 = 1;
    v10 = *(unsigned int *)(v3 + 56 * a3);
    v11 = *(_QWORD *)(a1 + 184);
    if (v11)
    {
      if (*(_DWORD *)(v11 + 120) > v10)
      {
        v27 = 0;
        LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(v11 + 112) + 4 * v10);
        goto LABEL_7;
      }
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != (_DWORD)v10)
    {
      v27 = 0;
LABEL_7:
      v12 = (double *)(v3 + 56 * a3 + 16);
      do
      {
        v13 = *(_QWORD *)(a1 + 40);
        v14 = *(_QWORD *)(v13 + 152);
        v15 = *(_DWORD *)(v14 + 4 * v10);
        v16 = *(_DWORD *)(v14 + 4 * (v10 + 1));
        v27 = v16;
        if (*(_DWORD *)(v13 + 140) <= v16)
        {
          v17 = *(_QWORD *)(a1 + 184);
          if (v17)
          {
            if (*(_DWORD *)(v13 + 160) == v16)
              v16 = *(_DWORD *)(v17 + 120);
            else
              v16 = *((_DWORD *)*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v17, &v27) + 4);
            v27 = v16;
          }
          v18 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v18)
          {
            v19 = 0;
            v20 = 0;
            v21 = (v15 >> 20) & 0x3FF;
            v22 = 56 * v18;
            while (*(_DWORD *)(*(_QWORD *)(a2 + 8) + v20) != v16)
            {
              v20 += 56;
              ++v19;
              if (v22 == v20)
                goto LABEL_31;
            }
            if ((v19 & 0x80000000) == 0)
            {
              FwdBwd::updateBackwardProbNullArcs(a1, a2);
              v23 = *v12;
              v24 = *(double *)(*(_QWORD *)(a2 + 8) + v20 + 16) + (double)v21;
              if (*v12 != -1.79769313e308)
              {
                if (v24 == -1.79769313e308)
                {
                  v24 = *v12;
                }
                else
                {
                  if (v23 > v24)
                    v25 = *(double *)(*(_QWORD *)(a2 + 8) + v20 + 16) + (double)v21;
                  else
                    v25 = *v12;
                  if (v23 > v24)
                    v24 = *v12;
                  if (v25 - v24 >= -400.0)
                  {
                    v26 = exp(v25 - v24);
                    v24 = v24 + log1p(v26);
                  }
                }
              }
              *v12 = v24;
            }
          }
        }
LABEL_31:
        LODWORD(v10) = v10 + 2;
      }
      while ((v15 & 0x80000000) == 0);
    }
    *(double *)(v3 + 56 * a3 + 24) = *(double *)(v3 + 56 * a3 + 8) + *(double *)(v3 + 56 * a3 + 16);
  }
}

void FwdBwd::doBackwardStep(FwdBwd *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *((_QWORD *)this + 21) + 40 * (a2 - 1);
  FwdBwd::doBackwardStepFromEmittingItf(this, a2);
  if (*(_DWORD *)(v3 + 16))
  {
    v4 = 0;
    do
      FwdBwd::updateBackwardProbNullArcs((uint64_t)this, v3, v4++);
    while (v4 < *(_DWORD *)(v3 + 16));
  }
}

void FwdBwd::doBackwardStepFromEmittingCPU(FwdBwd *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 21);
  v3 = v2 + 40 * (a2 - 1);
  v5 = *(_DWORD *)(v3 + 16);
  v4 = (unsigned int *)(v3 + 16);
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = v2 + 40 * a2;
    v10 = v2 + 40 * (a2 - 1);
    v13 = *(_QWORD *)(v10 + 8);
    v12 = (uint64_t *)(v10 + 8);
    v11 = v13;
    do
    {
      FwdBwd::updateBackwardProbFromEmittingCPU((uint64_t)this, (unsigned int *)(v11 + v7), v9);
      v11 = *v12;
      *(_BYTE *)(*v12 + v7 + 40) = 0;
      ++v8;
      v7 += 56;
    }
    while (v8 < *v4);
  }
}

void FwdBwd::updateBackwardProbFromEmittingCPU(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double *v19;
  double v20;
  double v21;
  long double v22;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a2;
  if (*(_DWORD *)(v4 + 160) == *a2)
  {
    v6 = -1.79769313e308;
  }
  else
  {
    v8 = *(_DWORD *)(v4 + 140);
    if (v8 <= (int)v5)
      goto LABEL_11;
    v9 = *(unsigned int *)(a3 + 16);
    if (!(_DWORD)v9)
      goto LABEL_11;
    v10 = 0;
    v11 = (double *)(*(_QWORD *)(a3 + 8) + 32);
    while (*((_DWORD *)v11 - 8) != v5)
    {
      ++v10;
      v11 += 7;
      if (v9 == v10)
        goto LABEL_11;
    }
    if ((v10 & 0x80000000) != 0)
LABEL_11:
      v12 = -1.79769313e308;
    else
      v12 = *(v11 - 2) + *v11;
    v13 = *(_QWORD *)(v4 + 152);
    do
    {
      v14 = *(_DWORD *)(v13 + 4 * v5);
      v15 = *(_DWORD *)(v13 + 4 * (v5 + 1));
      if (v8 > v15)
      {
        v16 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = (v14 >> 20) & 0x3FF;
          v19 = (double *)(*(_QWORD *)(a3 + 8) + 32);
          while (*((_DWORD *)v19 - 8) != v15)
          {
            ++v17;
            v19 += 7;
            if (v16 == v17)
              goto LABEL_30;
          }
          if ((v17 & 0x80000000) == 0)
          {
            v20 = *(v19 - 2) + *v19 + (double)v18;
            if (v12 == -1.79769313e308)
            {
              v12 = *(v19 - 2) + *v19 + (double)v18;
            }
            else if (v20 != -1.79769313e308)
            {
              if (v12 > v20)
                v21 = *(v19 - 2) + *v19 + (double)v18;
              else
                v21 = v12;
              if (v12 <= v20)
                v12 = *(v19 - 2) + *v19 + (double)v18;
              if (v21 - v12 >= -400.0)
              {
                v22 = exp(v21 - v12);
                v12 = v12 + log1p(v22);
              }
            }
          }
        }
      }
LABEL_30:
      v5 += 2;
    }
    while ((v14 & 0x80000000) == 0);
    v6 = v12 - *(double *)a3;
  }
  *((double *)a2 + 2) = v6;
}

uint64_t FwdBwd::updateBackwardLinksGPU(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double *v13;

  if (*(_BYTE *)(gParFwdBwdUseCPUUpdateBackwardLinks + 41))
  {
    v2 = *(_QWORD *)(this + 168) + 40 * a2;
    v3 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 8);
      v6 = *(_QWORD *)(v2 + 24) + 16;
      do
      {
        v7 = *(unsigned int *)(v5 + 56 * v4 + 48);
        if ((v7 & 0x80000000) == 0)
        {
          v8 = *(_DWORD *)(v5 + 56 * v4 + 52);
          if (v8 >= 1)
          {
            v9 = (v8 + v7);
            v10 = v5 + 56 * v4;
            v11 = *(double *)(v10 + 32);
            v12 = *(double *)(v10 + 16);
            v13 = (double *)(v6 + 24 * v7);
            do
            {
              *v13 = *(v13 - 1) + v11 + v12;
              v13 += 3;
              ++v7;
            }
            while (v7 < v9);
          }
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
  return this;
}

void FwdBwd::doBackwardStepFromEmittingGPU(FwdBwd *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  FwdBwd::updateBackwardLinksGPU((uint64_t)this, a2);
  v4 = *((_QWORD *)this + 21) + 40 * v2;
  v5 = 40 * v2;
  mrec_qsort_r<FBTokenCompareByStateID>(*(char **)(v4 + 24), *(unsigned int *)(v4 + 32), 24);
  FwdBwd::getNumOutPortsFromFwdBwdProbsGPU(this, --v2);
  FwdBwd::cumulativeSumsItf(this, *((int **)this + 27), *(_DWORD *)(*((_QWORD *)this + 21) + 40 * v2 + 16));
  FwdBwd::makeBackwardDecision(this, v2, *(double *)(*((_QWORD *)this + 21) + v5));
}

void FwdBwd::doBackwardStepFromEmittingItf(FwdBwd *this, unsigned int a2)
{
  if (*((_QWORD *)this + 23))
    FwdBwd::doBackwardStepFromEmittingGPU(this, a2);
  else
    FwdBwd::doBackwardStepFromEmittingCPU(this, a2);
}

void FwdBwdGPUData::~FwdBwdGPUData(FwdBwdGPUData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)this);
}

FwdBwdGPUData *FwdBwd::loadArcGraphOnGPU(FwdBwd *this)
{
  FwdBwdGPUData *result;

  result = (FwdBwdGPUData *)*((_QWORD *)this + 23);
  if (result)
    return (FwdBwdGPUData *)FwdBwdGPUData::loadArcGraph(result, *((const ArcGraph **)this + 5));
  return result;
}

uint64_t FwdBwdGPUData::loadArcGraph(FwdBwdGPUData *this, const ArcGraph *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  void **v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t **Bucket;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t **v55;
  _DWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[16];
  int v66;
  uint64_t v67;

  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll((uint64_t)this);
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  Hash<int,int,IntToUintScope,unsigned int>::Hash((uint64_t)v65, 0, 16);
  if (*((_DWORD *)a2 + 40))
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a2 + 35);
      v6 = v5 > (int)v4;
      v7 = *((_QWORD *)a2 + 19);
      do
      {
        v8 = *(_DWORD *)(v7 + 4 * v4);
        v9 = v4 + 1;
        v4 += 2;
        if (v5 > *(_DWORD *)(v7 + 4 * v9))
          ++v6;
      }
      while ((v8 & 0x80000000) == 0);
      v10 = *((_DWORD *)this + 34);
      if (v6 >= v10)
      {
        v11 = *((_DWORD *)this + 35);
        if (v6 + 1 > v11)
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 128, v6 + 1 - v11, 0);
        *((_DWORD *)this + 34) = v6 + 1;
        v12 = *((_QWORD *)this + 16);
        do
          *(_DWORD *)(v12 + 4 * v10++) = 0;
        while (v10 <= v6);
      }
      ++*(_DWORD *)(*((_QWORD *)this + 16) + 4 * v6);
    }
    while (*((_DWORD *)a2 + 40) != v4);
  }
  v58 = (_QWORD *)((char *)this + 176);
  v63 = 0;
  v64 = 0;
  if (*((_DWORD *)this + 34))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      if (v14 == HIDWORD(v64))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v63, 1, 1);
        v14 = v64;
        v13 = v63;
      }
      *(_DWORD *)(v13 + 4 * v14) = v16;
      v14 = v64 + 1;
      LODWORD(v64) = v64 + 1;
      v16 += *(_DWORD *)(*((_QWORD *)this + 16) + 4 * v15++);
    }
    while (v15 < *((unsigned int *)this + 34));
    v17 = *((_DWORD *)this + 31);
    if (v16 > v17)
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 112, v16 - v17, 0);
    *((_DWORD *)this + 30) = v16;
    v18 = *((_DWORD *)this + 47);
    if (v16 > v18)
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v58, v16 - v18, 0);
  }
  else
  {
    v16 = 0;
    *((_DWORD *)this + 30) = 0;
  }
  *((_DWORD *)this + 46) = v16;
  v19 = *((_DWORD *)this + 43);
  if (v16 + 1 > v19)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 160, v16 + 1 - v19, 0);
  *((_DWORD *)this + 42) = v16 + 1;
  v20 = *((_QWORD *)this + 20);
  if (v16)
  {
    v21 = (_DWORD *)*((_QWORD *)this + 14);
    v22 = (_DWORD *)*v58;
    v23 = v16;
    v24 = v16;
    v25 = (_DWORD *)*((_QWORD *)this + 20);
    do
    {
      *v21++ = -1;
      *v22++ = -1;
      *v25++ = -1;
      --v24;
    }
    while (v24);
  }
  else
  {
    v23 = 0;
  }
  *(_DWORD *)(v20 + 4 * v23) = 0;
  LODWORD(v59) = 0;
  if (*((_DWORD *)a2 + 40))
  {
    v26 = 0;
    do
    {
      v62 = v26;
      v27 = *((_DWORD *)a2 + 35) > v26;
      do
      {
        v28 = *((_QWORD *)a2 + 19);
        v29 = *(_DWORD *)(v28 + 4 * v26);
        v30 = *(_DWORD *)(v28 + 4 * (v26 + 1));
        LODWORD(v59) = v30;
        if (*((_DWORD *)a2 + 35) > v30)
        {
          if (v66)
            v31 = (-1640531527 * v30) >> -(char)v66;
          else
            v31 = 0;
          v32 = *(uint64_t **)(v67 + 8 * v31);
          if (v32)
          {
            while (*((_DWORD *)v32 + 2) != v30 || *((_DWORD *)v32 + 3) != v30)
            {
              v32 = (uint64_t *)*v32;
              if (!v32)
                goto LABEL_41;
            }
          }
          else
          {
LABEL_41:
            v61 = v29 & 0xFFFFF;
            Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)v65, (int *)&v59, &v61);
          }
          ++v27;
        }
        v26 += 2;
      }
      while ((v29 & 0x80000000) == 0);
      v61 = 0;
      v61 = (*(_DWORD *)(v63 + 4 * v27))++;
      *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v61) = v62;
      *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v61) = v27;
      Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this, &v62, &v61);
    }
    while (*((_DWORD *)a2 + 40) != v26);
  }
  v59 = 0;
  v60 = 0;
  *((_DWORD *)this + 38) = 0;
  if (*((_DWORD *)this + 34))
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      if (v34 == HIDWORD(v60))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v59, 1, 1);
        v34 = v60;
        v33 = v59;
      }
      *(_DWORD *)(v33 + 4 * v34) = 3 * v36;
      v34 = v60 + 1;
      LODWORD(v60) = v60 + 1;
      v36 += *(_DWORD *)(*((_QWORD *)this + 16) + 4 * v35) * v35;
      ++v35;
    }
    while (v35 < *((unsigned int *)this + 34));
  }
  else
  {
    v36 = 0;
  }
  v37 = (void **)((char *)this + 144);
  v38 = 3 * v36;
  v39 = *((_DWORD *)this + 39);
  if (3 * v36 > v39)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 144, 3 * v36 - v39, 0);
  *((_DWORD *)this + 38) = v38;
  if (v36)
  {
    if (v38 <= 1)
      v40 = 1;
    else
      v40 = 3 * v36;
    memset(*v37, 255, 4 * v40);
  }
  v62 = 0;
  if (*((_DWORD *)a2 + 40))
  {
    v41 = 0;
    do
    {
      v61 = v41;
      Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this, (int *)&v61);
      if (*Bucket)
        v43 = (unsigned int *)(*Bucket + 2);
      else
        v43 = 0;
      v44 = *v43;
      v45 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v44);
      v46 = v59;
      v47 = *(unsigned int *)(v59 + 4 * v45);
      *(_DWORD *)(*v58 + 4 * v44) = v47;
      *(_DWORD *)(v46 + 4 * v45) += 3 * v45;
      if (*((_DWORD *)a2 + 35) <= (signed int)v41)
      {
        v52 = 2 * v45;
      }
      else
      {
        v48 = *v43;
        v49 = *v37;
        *((_DWORD *)*v37 + v47) = v48;
        if (v66)
          v50 = (-1640531527 * v41) >> -(char)v66;
        else
          v50 = 0;
        v51 = (uint64_t *)(v67 + 8 * v50);
        do
        {
          do
            v51 = (uint64_t *)*v51;
          while (*((_DWORD *)v51 + 2) != v41);
        }
        while (*((_DWORD *)v51 + 3) != v41);
        v49[(v47 + v45)] = *((_DWORD *)v51 + 4);
        v52 = 2 * v45;
        v49[(v47 + 2 * v45)] = 0;
        LODWORD(v47) = v47 + 1;
      }
      do
      {
        v53 = *((_QWORD *)a2 + 19);
        v54 = *(_DWORD *)(v53 + 4 * v41);
        v62 = *(_DWORD *)(v53 + 4 * (v41 + 1));
        if (*((_DWORD *)a2 + 35) > v62)
        {
          v55 = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this, &v62);
          v56 = *v37;
          *((_DWORD *)*v37 + v47) = *((_DWORD *)*v55 + 4);
          v56[(v47 + v45)] = v54 & 0xFFFFF;
          *(float *)&v56[(v47 + v52)] = (float)((v54 >> 20) & 0x3FF);
          LODWORD(v47) = v47 + 1;
        }
        v41 += 2;
      }
      while ((v54 & 0x80000000) == 0);
    }
    while (*((_DWORD *)a2 + 40) != v41);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)v65);
}

void sub_2099B3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t FwdBwd::getBestExitScore(FwdBwd *this)
{
  return 20000;
}

uint64_t FwdBwd::getBestScoreMaybeUpdateFstNode(FwdBwd *this, Node *a2)
{
  return 20000;
}

uint64_t FwdBwd::getBestScoreThisFrame(FwdBwd *this)
{
  return 20000;
}

uint64_t FwdBwd::getNActiveStates(FwdBwd *this)
{
  return 0;
}

uint64_t FwdBwd::makePartialResult()
{
  return 1879048192;
}

uint64_t FwdBwd::getRequiredVirtMapSize(FwdBwd *this)
{
  return 0;
}

uint64_t DgnArray<FwdBwdColumn>::destructAt(uint64_t result, int a2, int a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v4 = (_QWORD *)result;
    v5 = v3;
    v6 = a2;
    v7 = 40 * v3 - 16;
    do
    {
      --v5;
      v8 = DgnIArray<Utterance *>::~DgnIArray(*v4 + v7);
      result = DgnIArray<Utterance *>::~DgnIArray(v8 - 16);
      v7 -= 40;
    }
    while (v5 > v6);
  }
  return result;
}

uint64_t Hash<int,int,IntToUintScope,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218BF8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 16;
  else
    v7 = 20;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2099B31B8(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<int,int,IntToUintScope,unsigned int>::~Hash(uint64_t a1)
{
  Hash<int,int,IntToUintScope,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<int,int,IntToUintScope,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218BF8;
  if (*(_DWORD *)(a1 + 8))
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t StartupAdapterParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;

  v71 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v71, (uint64_t)"AdaptationSilenceAccumulateFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationSilenceAccumulateFactorDoubleHistory);
  v70 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v70, (uint64_t)"AdaptationNonSilenceAccumulateFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationNonSilenceAccumulateFactorDoubleHistory);
  v65 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v65, (uint64_t)"AdaptationAccumulateDoublyGenericBackoffPels", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationAccumulateDoublyGenericBackoffPelsBoolHistory);
  v64 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v64, (uint64_t)"AdaptationAccumulateRightGenericBackoffPels", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationAccumulateRightGenericBackoffPelsBoolHistory);
  v60 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v60, (uint64_t)"AdaptationAccumulateLeftGenericBackoffPels", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationAccumulateLeftGenericBackoffPelsBoolHistory);
  v67 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v67, (uint64_t)"AdaptationConTransAccInitFromIdentityMatrix", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccInitFromIdentityMatrixBoolHistory);
  v69 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v69, (uint64_t)"AdaptationMicUseDiagonal", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationMicUseDiagonalBoolHistory);
  v68 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v68, (uint64_t)"AdaptationConTransAccRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccRelevanceIntHistory);
  v58 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v58, (uint64_t)"AdaptationConTransAccComputeTransformMatrix", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccComputeTransformMatrixBoolHistory);
  v57 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v57, (uint64_t)"AdaptationConTransAccComputeTranslation", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccComputeTranslationBoolHistory);
  v56 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v56, (uint64_t)"AdaptationConTransAccDiagonalTransforms", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccDiagonalTransformsBoolHistory);
  v62 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v62, (uint64_t)"AdaptationConTransAccMinAccumFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccMinAccumFramesIntHistory);
  v55 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v55, (uint64_t)"AdaptationConTransAccMaxNumTransforms", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccMaxNumTransformsIntHistory);
  v63 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v63, (uint64_t)"AdaptationConTransAccOnlineNumTransformsMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineNumTransformsMinIntHistory);
  v61 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v61, (uint64_t)"AdaptationConTransAccOnlineNumTransformsRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineNumTransformsRangeIntHistory);
  v54 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v54, (uint64_t)"AdaptationConTransAccOnlineCommitIntervalUtts", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineCommitIntervalUttsIntHistory);
  v53 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v53, (uint64_t)"AdaptationConTransAccOnlineCommitIntervalSeconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineCommitIntervalSecondsIntHistory);
  v47 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v47, (uint64_t)"AdaptationConTransAccSilenceToSpeechWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccSilenceToSpeechWeightIntHistory);
  v59 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v59, (uint64_t)"AdaptationDTMMIntruderMinMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMIntruderMinMicrosecondsIntHistory);
  v66 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v66, (uint64_t)"AdaptationDTMMNumIterations", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMNumIterationsIntHistory);
  v39 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v39, (uint64_t)"AdaptationBaumWelchMaxUttSeconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationBaumWelchMaxUttSecondsIntHistory);
  v37 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v37, (uint64_t)"AdaptationBaumWelchScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationBaumWelchScaleDoubleHistory);
  v36 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v36, (uint64_t)"AdaptationBaumWelchThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationBaumWelchThreshScoreIntHistory);
  v48 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v48, (uint64_t)"AdaptationConTransAccOnlineDecayInterval", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineDecayIntervalIntHistory);
  v42 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v42, (uint64_t)"AdaptationConTransAccOnlineDecayFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineDecayFactorDoubleHistory);
  v41 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v41, (uint64_t)"AdaptationConTransAccOnlineIncludeCurrentTransform", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccOnlineIncludeCurrentTransformBoolHistory);
  v38 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v38, (uint64_t)"AdaptationConTransAccNumIterations", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccNumIterationsIntHistory);
  v34 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v34, (uint64_t)"AdaptationConTransAccGlobalSmoothingMinAccumFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccGlobalSmoothingMinAccumFramesIntHistory);
  v33 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v33, (uint64_t)"AdaptationConTransAccGlobalSmoothingRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccGlobalSmoothingRelevanceIntHistory);
  v28 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v28, (uint64_t)"AdaptationConTransAccComponentBackoffPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccComponentBackoffPercentDoubleHistory);
  v32 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v32, (uint64_t)"AdaptationConTransAccMaxTotalComponentProbability", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccMaxTotalComponentProbabilityDoubleHistory);
  v35 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v35, (uint64_t)"AdaptationConTransAccRootGenoneClassMinFrameCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccRootGenoneClassMinFrameCountIntHistory);
  v27 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v27, (uint64_t)"AdaptationConTransAccGenoneClassMinFrameCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccGenoneClassMinFrameCountIntHistory);
  v52 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v52, (uint64_t)"AdaptationTransAccGlobalSmoothingMinAccumFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccGlobalSmoothingMinAccumFramesIntHistory);
  v51 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v51, (uint64_t)"AdaptationTransAccGlobalSmoothingRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccGlobalSmoothingRelevanceIntHistory);
  v50 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v50, (uint64_t)"AdaptationTransAccMaxNumTransforms", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccMaxNumTransformsIntHistory);
  v49 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v49, (uint64_t)"AdaptationTransAccMinAccumFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccMinAccumFramesIntHistory);
  v46 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v46, (uint64_t)"AdaptationTransAccComponentBackoffPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccComponentBackoffPercentDoubleHistory);
  v43 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v43, (uint64_t)"AdaptationTransAccGenoneClassMinFrameCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccGenoneClassMinFrameCountIntHistory);
  v44 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v44, (uint64_t)"AdaptationTransAccMaxTotalComponentProbability", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccMaxTotalComponentProbabilityDoubleHistory);
  v45 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v45, (uint64_t)"AdaptationTransAccRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccRelevanceIntHistory);
  v40 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v40, (uint64_t)"AdaptationTransAccNumIterations", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationTransAccNumIterationsIntHistory);
  v16 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v16, (uint64_t)"AdaptationBasisMeanRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationBasisMeanRelevanceIntHistory);
  v11 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v11, (uint64_t)"AdaptationBasisDevRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationBasisDevRelevanceIntHistory);
  v31 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v31, (uint64_t)"AdaptationLogWeightRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationLogWeightRelevanceIntHistory);
  v30 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v30, (uint64_t)"AdaptationMaxLogWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationMaxLogWeightIntHistory);
  v29 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v29, (uint64_t)"AdaptationDurationRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDurationRelevanceIntHistory);
  v26 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v26, (uint64_t)"AdaptationDTMMScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMScoreScaleDoubleHistory);
  v24 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v24, (uint64_t)"AdaptationDTMMNormalizedDeltaRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMNormalizedDeltaRangeDoubleHistory);
  v23 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v23, (uint64_t)"AdaptationDTMMNormalizedDeltaMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMNormalizedDeltaMinDoubleHistory);
  v25 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v25, (uint64_t)"AdaptationDTMMUniqMaxDeltaMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMUniqMaxDeltaMicrosecondsIntHistory);
  v21 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v21, (uint64_t)"AdaptationDTMMMaxIntrudersPerStartTimeSegment", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMaxIntrudersPerStartTimeSegmentIntHistory);
  v22 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v22, (uint64_t)"AdaptationDTMMStartTimeSegmentMaxDeltaMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMStartTimeSegmentMaxDeltaMicrosecondsIntHistory);
  v19 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v19, (uint64_t)"AdaptationDTMMMeanGradientWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMeanGradientWeightDoubleHistory);
  v13 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v13, (uint64_t)"AdaptationDTMMDevGradientWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMDevGradientWeightDoubleHistory);
  v20 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v20, (uint64_t)"AdaptationDTMMPositiveGradientWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMPositiveGradientWeightDoubleHistory);
  v18 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v18, (uint64_t)"AdaptationDTMMNegativeGradientWeight", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMNegativeGradientWeightDoubleHistory);
  v15 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v15, (uint64_t)"AdaptationDTMMMinPositiveCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMinPositiveCountDoubleHistory);
  v10 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v10, (uint64_t)"AdaptationDTMMMinNegativeCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMinNegativeCountDoubleHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v0, (uint64_t)"AdaptationDTMMMinTotalCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMinTotalCountDoubleHistory);
  v14 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v14, (uint64_t)"AdaptationDTMMSmoothGradients", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMSmoothGradientsBoolHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v12, (uint64_t)"AdaptationDTMMSmoothRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMSmoothRelevanceIntHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v1, (uint64_t)"AdaptationDTMMErrorFunction", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMErrorFunctionEnumHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"AdaptationDTMMErrorBeta", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMErrorBetaDoubleHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v3, (uint64_t)"AdaptationDTMMErrorOffset", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMErrorOffsetDoubleHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"AdaptationDTMMMaxIntruderCount", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationDTMMMaxIntruderCountIntHistory);
  v17 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v17, (uint64_t)"AdaptationConTransAccComputeExtraGlobalTransform", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccComputeExtraGlobalTransformBoolHistory);
  v5 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v5, (uint64_t)"AdaptationConTransAccComputeHierScorerTransforms", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccComputeHierScorerTransformsBoolHistory);
  v6 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v6, (uint64_t)"AdaptationConTransAccEconomizeCofactorComputation", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccEconomizeCofactorComputationBoolHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"AdaptationConTransAccRidgeRegularizationFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccRidgeRegularizationFactorIntHistory);
  v8 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v8, (uint64_t)"AdaptationConTransAccDecomposedAccumCutoffPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sAdaptationConTransAccDecomposedAccumCutoffPercentIntHistory);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v10);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_253DF2828, (ParamSpec *)v17);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2828);
}

_DWORD *AdapterParamSet::AdapterParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C214C68;
  AdapterParamSet::setDefaults((AdapterParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_2099B42A4(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t AdapterParamSet::AdapterParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = (_OWORD *)(a1 + 308);
  v12 = (_OWORD *)(a2 + 308);
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C214C68;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v14;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *v11 = *v12;
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)((char *)v11 + 52) = *(_OWORD *)((char *)v12 + 52);
  v15 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v15;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  return a1;
}

uint64_t AdapterParamSet::setDefaults(AdapterParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t result;

  *((_BYTE *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 1, 0, 0, a5, a6, a7, a8);
  *((_BYTE *)this + 41) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 2, 0, 0, v9, v10, v11, v12);
  *((_BYTE *)this + 42) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 3, 0, 0, v13, v14, v15, v16);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 4, 0, 0, v17, v18, v19, v20);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 13) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 6, 0, 0, v25, v26, v27, v28);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 17) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 9, 0, 0, v37, v38, v39, v40);
  *((double *)this + 9) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 10, 0, 0, v41, v42, v43, v44);
  *((_BYTE *)this + 80) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 11, 0, 0, v45, v46, v47, v48);
  *((_BYTE *)this + 81) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 12, 0, 0, v49, v50, v51, v52);
  *((_BYTE *)this + 82) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 13, 0, 0, v53, v54, v55, v56);
  *((_BYTE *)this + 83) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 14, 0, 0, v57, v58, v59, v60);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 15, 0, 0, v61, v62, v63, v64);
  *((_DWORD *)this + 22) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 16, 0, 0, v65, v66, v67, v68);
  *((_DWORD *)this + 23) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 17, 0, 0, v69, v70, v71, v72);
  *((_BYTE *)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 18, 0, 0, v73, v74, v75, v76);
  *((_DWORD *)this + 25) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 19, 0, 0, v77, v78, v79, v80);
  *((double *)this + 13) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 20, 0, 0, v81, v82, v83, v84);
  *((_DWORD *)this + 28) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 21, 0, 0, v85, v86, v87, v88);
  *((_DWORD *)this + 29) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 22, 0, 0, v89, v90, v91, v92);
  *((_DWORD *)this + 30) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 23, 0, 0, v93, v94, v95, v96);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 24, 0, 0, v97, v98, v99, v100);
  *((double *)this + 16) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 25, 0, 0, v101, v102, v103, v104);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 26, 0, 0, v105, v106, v107, v108);
  *((_BYTE *)this + 140) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 27, 0, 0, v109, v110, v111, v112);
  *((_DWORD *)this + 36) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 28, 0, 0, v113, v114, v115, v116);
  *((_DWORD *)this + 37) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 29, 0, 0, v117, v118, v119, v120);
  *((_DWORD *)this + 38) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 30, 0, 0, v121, v122, v123, v124);
  *((_DWORD *)this + 39) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 31, 0, 0, v125, v126, v127, v128);
  *((_DWORD *)this + 40) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 32, 0, 0, v129, v130, v131, v132);
  *((_BYTE *)this + 164) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 33, 0, 0, v133, v134, v135, v136);
  *((_DWORD *)this + 42) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 34, 0, 0, v137, v138, v139, v140);
  *((double *)this + 22) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 35, 0, 0, v141, v142, v143, v144);
  *((double *)this + 23) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 36, 0, 0, v145, v146, v147, v148);
  *((_DWORD *)this + 48) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2828, 37, v149, v150, v151, v152, v153, v154);
  *((double *)this + 25) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 38, 0, 0, v155, v156, v157, v158);
  *((_DWORD *)this + 52) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 39, 0, 0, v159, v160, v161, v162);
  *((_DWORD *)this + 53) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 40, 0, 0, v163, v164, v165, v166);
  *((_DWORD *)this + 54) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 41, 0, 0, v167, v168, v169, v170);
  *((double *)this + 28) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 42, 0, 0, v171, v172, v173, v174);
  *((double *)this + 29) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 43, 0, 0, v175, v176, v177, v178);
  *((double *)this + 30) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 44, 0, 0, v179, v180, v181, v182);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 45, 0, 0, v183, v184, v185, v186);
  *((double *)this + 32) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 46, 0, 0, v187, v188, v189, v190);
  *((double *)this + 33) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 47, 0, 0, v191, v192, v193, v194);
  *((double *)this + 34) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 48, 0, 0, v195, v196, v197, v198);
  *((_DWORD *)this + 70) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 49, 0, 0, v199, v200, v201, v202);
  *((double *)this + 36) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 50, 0, 0, v203, v204, v205, v206);
  *((double *)this + 37) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 51, 0, 0, v207, v208, v209, v210);
  *((_BYTE *)this + 304) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 52, 0, 0, v211, v212, v213, v214);
  *((_DWORD *)this + 77) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 53, 0, 0, v215, v216, v217, v218);
  *((_DWORD *)this + 78) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 54, 0, 0, v219, v220, v221, v222);
  *((_DWORD *)this + 79) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 55, 0, 0, v223, v224, v225, v226);
  *((_DWORD *)this + 80) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 56, 0, 0, v227, v228, v229, v230);
  *((_DWORD *)this + 81) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 57, 0, 0, v231, v232, v233, v234);
  *((_DWORD *)this + 82) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 58, 0, 0, v235, v236, v237, v238);
  *((_BYTE *)this + 332) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2828, 59, 0, 0, v239, v240, v241, v242);
  *((double *)this + 42) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 60, 0, 0, v243, v244, v245, v246);
  *((double *)this + 43) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 61, 0, 0, v247, v248, v249, v250);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 62, 0, 0, v251, v252, v253, v254);
  *((_DWORD *)this + 90) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 63, 0, 0, v255, v256, v257, v258);
  *((_DWORD *)this + 91) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 64, 0, 0, v259, v260, v261, v262);
  *((_DWORD *)this + 92) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 65, 0, 0, v263, v264, v265, v266);
  *((_DWORD *)this + 93) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 66, 0, 0, v267, v268, v269, v270);
  *((double *)this + 47) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2828, 67, 0, 0, v271, v272, v273, v274);
  *((_DWORD *)this + 96) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 68, 0, 0, v275, v276, v277, v278);
  *((_DWORD *)this + 97) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 69, 0, 0, v279, v280, v281, v282);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2828, 70, 0, 0, v283, v284, v285, v286);
  *((_DWORD *)this + 98) = result;
  return result;
}

uint64_t AdapterParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v4 = 6;
    if (a2 == 3)
      v4 = 0;
    result += ((8 * (a2 != 3)) | (32 * (a2 != 3)) | ((unint64_t)(a2 != 3) << 6) | v4)
            + v4
            + 208 * (a2 != 3);
  }
  return result;
}

BOOL AdapterParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  char v10;
  ParamSpecMgr *v12;
  int v13;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 1;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[40];
      return v8 != 0;
    case 2:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 2;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[41];
      return v8 != 0;
    case 3:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 3;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[42];
      return v8 != 0;
    case 4:
      v9 = "int";
      v10 = 4;
      goto LABEL_98;
    case 5:
      v9 = "int";
      v10 = 5;
      goto LABEL_98;
    case 6:
      v9 = "int";
      v10 = 6;
      goto LABEL_98;
    case 7:
      v9 = "double";
      v10 = 7;
      goto LABEL_98;
    case 8:
      v9 = "int";
      v10 = 8;
      goto LABEL_98;
    case 9:
      v9 = "int";
      v10 = 9;
      goto LABEL_98;
    case 10:
      v9 = "double";
      v10 = 10;
      goto LABEL_98;
    case 11:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 11;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[80];
      return v8 != 0;
    case 12:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 12;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[81];
      return v8 != 0;
    case 13:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 13;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[82];
      return v8 != 0;
    case 14:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 14;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[83];
      return v8 != 0;
    case 15:
      v9 = "int";
      v10 = 15;
      goto LABEL_98;
    case 16:
      v9 = "int";
      v10 = 16;
      goto LABEL_98;
    case 17:
      v9 = "int";
      v10 = 17;
      goto LABEL_98;
    case 18:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 18;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[96];
      return v8 != 0;
    case 19:
      v9 = "int";
      v10 = 19;
      goto LABEL_98;
    case 20:
      v9 = "double";
      v10 = 20;
      goto LABEL_98;
    case 21:
      v9 = "int";
      v10 = 21;
      goto LABEL_98;
    case 22:
      v9 = "int";
      v10 = 22;
      goto LABEL_98;
    case 23:
      v9 = "int";
      v10 = 23;
      goto LABEL_98;
    case 24:
      v9 = "int";
      v10 = 24;
      goto LABEL_98;
    case 25:
      v9 = "double";
      v10 = 25;
      goto LABEL_98;
    case 26:
      v9 = "int";
      v10 = 26;
      goto LABEL_98;
    case 27:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 27;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[140];
      return v8 != 0;
    case 28:
      v9 = "int";
      v10 = 28;
      goto LABEL_98;
    case 29:
      v9 = "int";
      v10 = 29;
      goto LABEL_98;
    case 30:
      v9 = "int";
      v10 = 30;
      goto LABEL_98;
    case 31:
      v9 = "int";
      v10 = 31;
      goto LABEL_98;
    case 32:
      v9 = "int";
      v10 = 32;
      goto LABEL_98;
    case 33:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 33;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[164];
      return v8 != 0;
    case 34:
      v9 = "int";
      v10 = 34;
      goto LABEL_98;
    case 35:
      v9 = "double";
      v10 = 35;
      goto LABEL_98;
    case 36:
      v9 = "double";
      v10 = 36;
      goto LABEL_98;
    case 37:
      v9 = "enum";
      v10 = 37;
      goto LABEL_98;
    case 38:
      v9 = "double";
      v10 = 38;
      goto LABEL_98;
    case 39:
      v9 = "int";
      v10 = 39;
      goto LABEL_98;
    case 40:
      v9 = "int";
      v10 = 40;
      goto LABEL_98;
    case 41:
      v9 = "int";
      v10 = 41;
      goto LABEL_98;
    case 42:
      v9 = "double";
      v10 = 42;
      goto LABEL_98;
    case 43:
      v9 = "double";
      v10 = 43;
      goto LABEL_98;
    case 44:
      v9 = "double";
      v10 = 44;
      goto LABEL_98;
    case 45:
      v9 = "double";
      v10 = 45;
      goto LABEL_98;
    case 46:
      v9 = "double";
      v10 = 46;
      goto LABEL_98;
    case 47:
      v9 = "double";
      v10 = 47;
      goto LABEL_98;
    case 48:
      v9 = "double";
      v10 = 48;
      goto LABEL_98;
    case 49:
      v9 = "int";
      v10 = 49;
      goto LABEL_98;
    case 50:
      v9 = "double";
      v10 = 50;
      goto LABEL_98;
    case 51:
      v9 = "double";
      v10 = 51;
      goto LABEL_98;
    case 52:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 52;
        goto LABEL_113;
      }
      if ((_DWORD)a3)
        goto LABEL_96;
      v8 = a1[304];
      return v8 != 0;
    case 53:
      v9 = "int";
      v10 = 53;
      goto LABEL_98;
    case 54:
      v9 = "int";
      v10 = 54;
      goto LABEL_98;
    case 55:
      v9 = "int";
      v10 = 55;
      goto LABEL_98;
    case 56:
      v9 = "int";
      v10 = 56;
      goto LABEL_98;
    case 57:
      v9 = "int";
      v10 = 57;
      goto LABEL_98;
    case 58:
      v9 = "int";
      v10 = 58;
      goto LABEL_98;
    case 59:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2828;
        v13 = 59;
LABEL_113:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!(_DWORD)a3)
      {
        v8 = a1[332];
        return v8 != 0;
      }
LABEL_96:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 60:
      v9 = "double";
      v10 = 60;
      goto LABEL_98;
    case 61:
      v9 = "double";
      v10 = 61;
      goto LABEL_98;
    case 62:
      v9 = "double";
      v10 = 62;
      goto LABEL_98;
    case 63:
      v9 = "int";
      v10 = 63;
      goto LABEL_98;
    case 64:
      v9 = "int";
      v10 = 64;
      goto LABEL_98;
    case 65:
      v9 = "int";
      v10 = 65;
      goto LABEL_98;
    case 66:
      v9 = "int";
      v10 = 66;
      goto LABEL_98;
    case 67:
      v9 = "double";
      v10 = 67;
      goto LABEL_98;
    case 68:
      v9 = "int";
      v10 = 68;
      goto LABEL_98;
    case 69:
      v9 = "int";
      v10 = 69;
      goto LABEL_98;
    case 70:
      v9 = "int";
      v10 = 70;
LABEL_98:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t AdapterParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_103;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_103;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_103;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 4;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 4;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 4;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          result = a1[12];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 5;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 5;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 5;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 6;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 6;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 6;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_103;
    case 8:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 8;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 8;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 8;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          result = a1[17];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 9;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 9;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 9;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_103;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_103;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_103;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_103;
    case 14:
      v8 = "BOOL";
      v9 = 14;
      goto LABEL_103;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[21];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 15;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 15;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 15;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          result = a1[22];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 16;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 16;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 16;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 17:
      switch((int)a3)
      {
        case 0:
          result = a1[23];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 17;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 17;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 17;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_103;
    case 19:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 19;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 19;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 19;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_103;
    case 21:
      switch((int)a3)
      {
        case 0:
          result = a1[28];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 21;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 21;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 21;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          result = a1[29];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 22;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 22;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 22;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 23:
      switch((int)a3)
      {
        case 0:
          result = a1[30];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 23;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 23;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 23;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 24:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 24;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 24;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 24;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_103;
    case 26:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 26;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 26;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 26;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 27:
      v8 = "BOOL";
      v9 = 27;
      goto LABEL_103;
    case 28:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 28;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 28;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 28;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          result = a1[37];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 29;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 29;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 29;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          result = a1[38];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 30;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 30;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 30;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          result = a1[39];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 31;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 31;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 31;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          result = a1[40];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 32;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 32;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 32;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_103;
    case 34:
      switch((int)a3)
      {
        case 0:
          result = a1[42];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 34;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 34;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 34;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_103;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_103;
    case 37:
      v8 = "enum";
      v9 = 37;
      goto LABEL_103;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_103;
    case 39:
      switch((int)a3)
      {
        case 0:
          result = a1[52];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 39;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 39;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 39;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 40:
      switch((int)a3)
      {
        case 0:
          result = a1[53];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 40;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 40;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 40;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          result = a1[54];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 41;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 41;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 41;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_103;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_103;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_103;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_103;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_103;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_103;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_103;
    case 49:
      switch((int)a3)
      {
        case 0:
          result = a1[70];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 49;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 49;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 49;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_103;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_103;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_103;
    case 53:
      switch((int)a3)
      {
        case 0:
          result = a1[77];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 53;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 53;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 53;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          result = a1[78];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 54;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 54;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 54;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          result = a1[79];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 55;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 55;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 55;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          result = a1[80];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 56;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 56;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 56;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          result = a1[81];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 57;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 57;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 57;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 58:
      switch((int)a3)
      {
        case 0:
          result = a1[82];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 58;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 58;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 58;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 59:
      v8 = "BOOL";
      v9 = 59;
      goto LABEL_103;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_103;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_103;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_103;
    case 63:
      switch((int)a3)
      {
        case 0:
          result = a1[90];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 63;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 63;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 63;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 64:
      switch((int)a3)
      {
        case 0:
          result = a1[91];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 64;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 64;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 64;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 65:
      switch((int)a3)
      {
        case 0:
          result = a1[92];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 65;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 65;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 65;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 66:
      switch((int)a3)
      {
        case 0:
          result = a1[93];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 66;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 66;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 66;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 67:
      v8 = "double";
      v9 = 67;
LABEL_103:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      return 0;
    case 68:
      switch((int)a3)
      {
        case 0:
          result = a1[96];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 68;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 68;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 68;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 69:
      switch((int)a3)
      {
        case 0:
          result = a1[97];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 69;
          goto LABEL_223;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 69;
          goto LABEL_225;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 69;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 70:
      switch((int)a3)
      {
        case 0:
          result = a1[98];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 70;
LABEL_223:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 70;
LABEL_225:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 70;
LABEL_227:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_113:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double AdapterParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_94;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_94;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_94;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_94;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_94;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_94;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[7];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 7;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 7;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 7;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_94;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_94;
    case 10:
      switch((int)a3)
      {
        case 0:
          result = a1[9];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 10;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 10;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 10;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_94;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_94;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_94;
    case 14:
      v8 = "BOOL";
      v9 = 14;
      goto LABEL_94;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_94;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_94;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_94;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_94;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_94;
    case 20:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 20;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 20;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 20;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_94;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_94;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_94;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_94;
    case 25:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 25;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 25;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 25;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_94;
    case 27:
      v8 = "BOOL";
      v9 = 27;
      goto LABEL_94;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_94;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_94;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_94;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_94;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_94;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_94;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_94;
    case 35:
      switch((int)a3)
      {
        case 0:
          result = a1[22];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 35;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 35;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 35;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 36:
      switch((int)a3)
      {
        case 0:
          result = a1[23];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 36;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 36;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 36;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 37:
      v8 = "enum";
      v9 = 37;
      goto LABEL_94;
    case 38:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 38;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 38;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 38;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 39:
      v8 = "int";
      v9 = 39;
      goto LABEL_94;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_94;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_94;
    case 42:
      switch((int)a3)
      {
        case 0:
          result = a1[28];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 42;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 42;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 42;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          result = a1[29];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 43;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 43;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 43;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 44:
      switch((int)a3)
      {
        case 0:
          result = a1[30];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 44;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 44;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 44;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 45:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 45;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 45;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 45;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          result = a1[32];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 46;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 46;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 46;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          result = a1[33];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 47;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 47;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 47;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 48;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 48;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 48;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_94;
    case 50:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 50;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 50;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 50;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 51:
      switch((int)a3)
      {
        case 0:
          result = a1[37];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 51;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 51;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 51;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_94;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_94;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_94;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_94;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_94;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_94;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_94;
    case 59:
      v8 = "BOOL";
      v9 = 59;
      goto LABEL_94;
    case 60:
      switch((int)a3)
      {
        case 0:
          result = a1[42];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 60;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 60;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 60;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          result = a1[43];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 61;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 61;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 61;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          result = a1[44];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 62;
          goto LABEL_155;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 62;
          goto LABEL_157;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 62;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_94;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_94;
    case 65:
      v8 = "int";
      v9 = 65;
      goto LABEL_94;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_94;
    case 67:
      switch((int)a3)
      {
        case 0:
          result = a1[47];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2828;
          v12 = 67;
LABEL_155:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2828;
          v14 = 67;
LABEL_157:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2828;
          v16 = 67;
LABEL_159:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_90:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_94;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_94;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_94:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t AdapterParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_73;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_73;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_73;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_73;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_73;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_73;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_73;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_73;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_73;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_73;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_73;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_73;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_73;
    case 14:
      v8 = "BOOL";
      v9 = 14;
      goto LABEL_73;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_73;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_73;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_73;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_73;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_73;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_73;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_73;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_73;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_73;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_73;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_73;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_73;
    case 27:
      v8 = "BOOL";
      v9 = 27;
      goto LABEL_73;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_73;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_73;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_73;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_73;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_73;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_73;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_73;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_73;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_73;
    case 37:
      v8 = "enum";
      v9 = 37;
      goto LABEL_73;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_73;
    case 39:
      v8 = "int";
      v9 = 39;
      goto LABEL_73;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_73;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_73;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_73;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_73;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_73;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_73;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_73;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_73;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_73;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_73;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_73;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_73;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_73;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_73;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_73;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_73;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_73;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_73;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_73;
    case 59:
      v8 = "BOOL";
      v9 = 59;
      goto LABEL_73;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_73;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_73;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_73;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_73;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_73;
    case 65:
      v8 = "int";
      v9 = 65;
      goto LABEL_73;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_73;
    case 67:
      v8 = "double";
      v9 = 67;
      goto LABEL_73;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_73;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_73;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_73:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t AdapterParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  void *ParamByParamId;
  void *v12;
  void *v13;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_64;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_64;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_64;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_64;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_64;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_64;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_64;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_64;
    case 9:
      v8 = "int";
      v9 = 9;
      goto LABEL_64;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_64;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_64;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_64;
    case 13:
      v8 = "BOOL";
      v9 = 13;
      goto LABEL_64;
    case 14:
      v8 = "BOOL";
      v9 = 14;
      goto LABEL_64;
    case 15:
      v8 = "int";
      v9 = 15;
      goto LABEL_64;
    case 16:
      v8 = "int";
      v9 = 16;
      goto LABEL_64;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_64;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_64;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_64;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_64;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_64;
    case 22:
      v8 = "int";
      v9 = 22;
      goto LABEL_64;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_64;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_64;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_64;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_64;
    case 27:
      v8 = "BOOL";
      v9 = 27;
      goto LABEL_64;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_64;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_64;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_64;
    case 31:
      v8 = "int";
      v9 = 31;
      goto LABEL_64;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_64;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_64;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_64;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_64;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_64;
    case 37:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 192);
          break;
        case 1:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 37, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v12 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 37, a3, a4, a5, a6, a7, a8);
          if (v12)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v12);
          break;
        case 3:
          v13 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 37, a3, a4, a5, a6, a7, a8);
          if (v13)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v13);
          break;
        default:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_64;
    case 39:
      v8 = "int";
      v9 = 39;
      goto LABEL_64;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_64;
    case 41:
      v8 = "int";
      v9 = 41;
      goto LABEL_64;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_64;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_64;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_64;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_64;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_64;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_64;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_64;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_64;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_64;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_64;
    case 52:
      v8 = "BOOL";
      v9 = 52;
      goto LABEL_64;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_64;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_64;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_64;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_64;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_64;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_64;
    case 59:
      v8 = "BOOL";
      v9 = 59;
      goto LABEL_64;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_64;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_64;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_64;
    case 63:
      v8 = "int";
      v9 = 63;
      goto LABEL_64;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_64;
    case 65:
      v8 = "int";
      v9 = 65;
      goto LABEL_64;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_64;
    case 67:
      v8 = "double";
      v9 = 67;
      goto LABEL_64;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_64;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_64;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_64:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void AdapterParamSet::setBoolParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  const char *v11;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationAccumulateDoublyGenericBackoffPels";
        goto LABEL_78;
      }
      *((_BYTE *)this + 40) = a3;
      return;
    case 2:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationAccumulateLeftGenericBackoffPels";
        goto LABEL_78;
      }
      *((_BYTE *)this + 41) = a3;
      return;
    case 3:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationAccumulateRightGenericBackoffPels";
        goto LABEL_78;
      }
      *((_BYTE *)this + 42) = a3;
      return;
    case 4:
      throwWrongTypeForParamId(4, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 5:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 6:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 7:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 8:
LABEL_12:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 9:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 10:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 11:
LABEL_15:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccComputeHierScorerTransforms";
        goto LABEL_78;
      }
      *((_BYTE *)this + 80) = v9;
      return;
    case 12:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccComputeTransformMatrix";
        goto LABEL_78;
      }
      *((_BYTE *)this + 81) = a3;
      return;
    case 13:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccComputeTranslation";
        goto LABEL_78;
      }
      *((_BYTE *)this + 82) = a3;
      return;
    case 14:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccDiagonalTransforms";
        goto LABEL_78;
      }
      *((_BYTE *)this + 83) = a3;
      return;
    case 15:
      throwWrongTypeForParamId(15, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 16:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 17:
LABEL_26:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 18:
LABEL_27:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccInitFromIdentityMatrix";
        goto LABEL_78;
      }
      *((_BYTE *)this + 96) = v9;
      return;
    case 19:
      throwWrongTypeForParamId(19, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 20:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 21:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 22:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 23:
LABEL_34:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 24:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 25:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 26:
LABEL_37:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 27:
LABEL_38:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccOnlineIncludeCurrentTransform";
        goto LABEL_78;
      }
      *((_BYTE *)this + 140) = v9;
      return;
    case 28:
      throwWrongTypeForParamId(28, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 29:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 30:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 31:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 32:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 33:
LABEL_46:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationConTransAccEconomizeCofactorComputation";
        goto LABEL_78;
      }
      *((_BYTE *)this + 164) = v9;
      return;
    case 34:
      throwWrongTypeForParamId(34, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 35:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 36:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 37:
LABEL_52:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 38:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 39:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 40:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 41:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 42:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 43:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 44:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 45:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 46:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 47:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 48:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 49:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 50:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 51:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 52:
LABEL_67:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationDTMMSmoothGradients";
        goto LABEL_78;
      }
      *((_BYTE *)this + 304) = v9;
      break;
    case 53:
      throwWrongTypeForParamId(53, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 54:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 55:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 56:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 57:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 58:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 59:
LABEL_76:
      if (*((_DWORD *)this + 9))
      {
        v11 = "AdaptationMicUseDiagonal";
LABEL_78:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 332) = v9;
      }
      break;
    case 60:
      throwWrongTypeForParamId(60, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 61:
LABEL_81:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 62:
LABEL_82:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 63:
LABEL_83:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 64:
LABEL_84:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_85;
    case 65:
LABEL_85:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 66:
LABEL_86:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 67:
LABEL_87:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 68:
LABEL_88:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 69:
LABEL_89:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 70:
LABEL_90:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_91;
    default:
LABEL_91:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void AdapterParamSet::setIntParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 4, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationBasisDevRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 5:
      v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 5, a3, a4, a5, a6, a7, a8);
      if (v23)
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationBasisMeanRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 12) = v9;
      return;
    case 6:
      v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 6, a3, a4, a5, a6, a7, a8);
      if (v28)
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationBaumWelchMaxUttSeconds";
        goto LABEL_190;
      }
      *((_DWORD *)this + 13) = v9;
      return;
    case 7:
      throwWrongTypeForParamId(7, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 8:
LABEL_20:
      v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 8, a3, a4, a5, a6, a7, a8);
      if (v33)
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationBaumWelchThreshScore";
        goto LABEL_190;
      }
      *((_DWORD *)this + 16) = v9;
      return;
    case 9:
      v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 9, a3, a4, a5, a6, a7, a8);
      if (v38)
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccSilenceToSpeechWeight";
        goto LABEL_190;
      }
      *((_DWORD *)this + 17) = v9;
      return;
    case 10:
      throwWrongTypeForParamId(10, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 11:
LABEL_29:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 12:
LABEL_30:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 13:
LABEL_31:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 14:
LABEL_32:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 15:
LABEL_33:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 15, a3, a4, a5, a6, a7, a8);
      if (v43)
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccGenoneClassMinFrameCount";
        goto LABEL_190;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 16:
      v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 16, a3, a4, a5, a6, a7, a8);
      if (v48)
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccGlobalSmoothingMinAccumFrames";
        goto LABEL_190;
      }
      *((_DWORD *)this + 22) = v9;
      return;
    case 17:
      v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 17, a3, a4, a5, a6, a7, a8);
      if (v53)
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccGlobalSmoothingRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 23) = v9;
      return;
    case 18:
      throwWrongTypeForParamId(18, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 19:
LABEL_47:
      v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 19, a3, a4, a5, a6, a7, a8);
      if (v58)
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccMaxNumTransforms";
        goto LABEL_190;
      }
      *((_DWORD *)this + 25) = v9;
      return;
    case 20:
      throwWrongTypeForParamId(20, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 21:
LABEL_52:
      v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 21, a3, a4, a5, a6, a7, a8);
      if (v63)
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccMinAccumFrames";
        goto LABEL_190;
      }
      *((_DWORD *)this + 28) = v9;
      return;
    case 22:
      v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 22, a3, a4, a5, a6, a7, a8);
      if (v68)
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccNumIterations";
        goto LABEL_190;
      }
      *((_DWORD *)this + 29) = v9;
      return;
    case 23:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 23, a3, a4, a5, a6, a7, a8);
      if (v73)
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccOnlineCommitIntervalSeconds";
        goto LABEL_190;
      }
      *((_DWORD *)this + 30) = v9;
      return;
    case 24:
      v78 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 24, a3, a4, a5, a6, a7, a8);
      if (v78)
      IntParamSpec::validateValue((IntParamSpec *)v78, v9, 0, 0, v79, v80, v81, v82);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccOnlineCommitIntervalUtts";
        goto LABEL_190;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 25:
      throwWrongTypeForParamId(25, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 26:
LABEL_69:
      v83 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 26, a3, a4, a5, a6, a7, a8);
      if (v83)
      IntParamSpec::validateValue((IntParamSpec *)v83, v9, 0, 0, v84, v85, v86, v87);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccOnlineDecayInterval";
        goto LABEL_190;
      }
      *((_DWORD *)this + 34) = v9;
      return;
    case 27:
      throwWrongTypeForParamId(27, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 28:
LABEL_74:
      v88 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 28, a3, a4, a5, a6, a7, a8);
      if (v88)
      IntParamSpec::validateValue((IntParamSpec *)v88, v9, 0, 0, v89, v90, v91, v92);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccOnlineNumTransformsMin";
        goto LABEL_190;
      }
      *((_DWORD *)this + 36) = v9;
      return;
    case 29:
      v93 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 29, a3, a4, a5, a6, a7, a8);
      if (v93)
      IntParamSpec::validateValue((IntParamSpec *)v93, v9, 0, 0, v94, v95, v96, v97);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccOnlineNumTransformsRange";
        goto LABEL_190;
      }
      *((_DWORD *)this + 37) = v9;
      return;
    case 30:
      v98 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 30, a3, a4, a5, a6, a7, a8);
      if (v98)
      IntParamSpec::validateValue((IntParamSpec *)v98, v9, 0, 0, v99, v100, v101, v102);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 38) = v9;
      return;
    case 31:
      v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 31, a3, a4, a5, a6, a7, a8);
      if (v103)
      IntParamSpec::validateValue((IntParamSpec *)v103, v9, 0, 0, v104, v105, v106, v107);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccRootGenoneClassMinFrameCount";
        goto LABEL_190;
      }
      *((_DWORD *)this + 39) = v9;
      return;
    case 32:
      v108 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 32, a3, a4, a5, a6, a7, a8);
      if (v108)
      IntParamSpec::validateValue((IntParamSpec *)v108, v9, 0, 0, v109, v110, v111, v112);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccDecomposedAccumCutoffPercent";
        goto LABEL_190;
      }
      *((_DWORD *)this + 40) = v9;
      return;
    case 33:
      throwWrongTypeForParamId(33, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 34:
LABEL_95:
      v113 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 34, a3, a4, a5, a6, a7, a8);
      if (v113)
      IntParamSpec::validateValue((IntParamSpec *)v113, v9, 0, 0, v114, v115, v116, v117);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationConTransAccRidgeRegularizationFactor";
        goto LABEL_190;
      }
      *((_DWORD *)this + 42) = v9;
      return;
    case 35:
      throwWrongTypeForParamId(35, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_100;
    case 36:
LABEL_100:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_101;
    case 37:
LABEL_101:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 38:
LABEL_102:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_103;
    case 39:
LABEL_103:
      v118 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 39, a3, a4, a5, a6, a7, a8);
      if (v118)
      IntParamSpec::validateValue((IntParamSpec *)v118, v9, 0, 0, v119, v120, v121, v122);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMIntruderMinMicroseconds";
        goto LABEL_190;
      }
      *((_DWORD *)this + 52) = v9;
      return;
    case 40:
      v123 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 40, a3, a4, a5, a6, a7, a8);
      if (v123)
      IntParamSpec::validateValue((IntParamSpec *)v123, v9, 0, 0, v124, v125, v126, v127);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMMaxIntruderCount";
        goto LABEL_190;
      }
      *((_DWORD *)this + 53) = v9;
      return;
    case 41:
      v128 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 41, a3, a4, a5, a6, a7, a8);
      if (v128)
      IntParamSpec::validateValue((IntParamSpec *)v128, v9, 0, 0, v129, v130, v131, v132);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMMaxIntrudersPerStartTimeSegment";
        goto LABEL_190;
      }
      *((_DWORD *)this + 54) = v9;
      return;
    case 42:
      throwWrongTypeForParamId(42, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 43:
LABEL_117:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 44:
LABEL_118:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_119;
    case 45:
LABEL_119:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_120;
    case 46:
LABEL_120:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_121;
    case 47:
LABEL_121:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_122;
    case 48:
LABEL_122:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_123;
    case 49:
LABEL_123:
      v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 49, a3, a4, a5, a6, a7, a8);
      if (v133)
      IntParamSpec::validateValue((IntParamSpec *)v133, v9, 0, 0, v134, v135, v136, v137);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMNumIterations";
        goto LABEL_190;
      }
      *((_DWORD *)this + 70) = v9;
      return;
    case 50:
      throwWrongTypeForParamId(50, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_129;
    case 51:
LABEL_129:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_130;
    case 52:
LABEL_130:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 53:
LABEL_131:
      v138 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 53, a3, a4, a5, a6, a7, a8);
      if (v138)
      IntParamSpec::validateValue((IntParamSpec *)v138, v9, 0, 0, v139, v140, v141, v142);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMSmoothRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 77) = v9;
      return;
    case 54:
      v143 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 54, a3, a4, a5, a6, a7, a8);
      if (v143)
      IntParamSpec::validateValue((IntParamSpec *)v143, v9, 0, 0, v144, v145, v146, v147);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMStartTimeSegmentMaxDeltaMicroseconds";
        goto LABEL_190;
      }
      *((_DWORD *)this + 78) = v9;
      return;
    case 55:
      v148 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 55, a3, a4, a5, a6, a7, a8);
      if (v148)
      IntParamSpec::validateValue((IntParamSpec *)v148, v9, 0, 0, v149, v150, v151, v152);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDTMMUniqMaxDeltaMicroseconds";
        goto LABEL_190;
      }
      *((_DWORD *)this + 79) = v9;
      return;
    case 56:
      v153 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 56, a3, a4, a5, a6, a7, a8);
      if (v153)
      IntParamSpec::validateValue((IntParamSpec *)v153, v9, 0, 0, v154, v155, v156, v157);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationDurationRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 80) = v9;
      return;
    case 57:
      v158 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 57, a3, a4, a5, a6, a7, a8);
      if (v158)
      IntParamSpec::validateValue((IntParamSpec *)v158, v9, 0, 0, v159, v160, v161, v162);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationLogWeightRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 81) = v9;
      return;
    case 58:
      v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 58, a3, a4, a5, a6, a7, a8);
      if (v163)
      IntParamSpec::validateValue((IntParamSpec *)v163, v9, 0, 0, v164, v165, v166, v167);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationMaxLogWeight";
        goto LABEL_190;
      }
      *((_DWORD *)this + 82) = v9;
      return;
    case 59:
      throwWrongTypeForParamId(59, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_157;
    case 60:
LABEL_157:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_158;
    case 61:
LABEL_158:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_159;
    case 62:
LABEL_159:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_160;
    case 63:
LABEL_160:
      v168 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 63, a3, a4, a5, a6, a7, a8);
      if (v168)
      IntParamSpec::validateValue((IntParamSpec *)v168, v9, 0, 0, v169, v170, v171, v172);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccGenoneClassMinFrameCount";
        goto LABEL_190;
      }
      *((_DWORD *)this + 90) = v9;
      return;
    case 64:
      v173 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 64, a3, a4, a5, a6, a7, a8);
      if (v173)
      IntParamSpec::validateValue((IntParamSpec *)v173, v9, 0, 0, v174, v175, v176, v177);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccGlobalSmoothingMinAccumFrames";
        goto LABEL_190;
      }
      *((_DWORD *)this + 91) = v9;
      return;
    case 65:
      v178 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 65, a3, a4, a5, a6, a7, a8);
      if (v178)
      IntParamSpec::validateValue((IntParamSpec *)v178, v9, 0, 0, v179, v180, v181, v182);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccGlobalSmoothingRelevance";
        goto LABEL_190;
      }
      *((_DWORD *)this + 92) = v9;
      return;
    case 66:
      v183 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 66, a3, a4, a5, a6, a7, a8);
      if (v183)
      IntParamSpec::validateValue((IntParamSpec *)v183, v9, 0, 0, v184, v185, v186, v187);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccMaxNumTransforms";
        goto LABEL_190;
      }
      *((_DWORD *)this + 93) = v9;
      return;
    case 67:
      throwWrongTypeForParamId(67, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_178;
    case 68:
LABEL_178:
      v188 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 68, a3, a4, a5, a6, a7, a8);
      if (v188)
      IntParamSpec::validateValue((IntParamSpec *)v188, v9, 0, 0, v189, v190, v191, v192);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccMinAccumFrames";
        goto LABEL_190;
      }
      *((_DWORD *)this + 96) = v9;
      return;
    case 69:
      v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 69, a3, a4, a5, a6, a7, a8);
      if (v193)
      IntParamSpec::validateValue((IntParamSpec *)v193, v9, 0, 0, v194, v195, v196, v197);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccNumIterations";
        goto LABEL_190;
      }
      *((_DWORD *)this + 97) = v9;
      break;
    case 70:
      v198 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 70, a3, a4, a5, a6, a7, a8);
      if (v198)
      IntParamSpec::validateValue((IntParamSpec *)v198, v9, 0, 0, v199, v200, v201, v202);
      if (*((_DWORD *)this + 9))
      {
        v22 = "AdaptationTransAccRelevance";
LABEL_190:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 98) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void AdapterParamSet::setDoubleParameter(AdapterParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 7, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationBaumWelchScale";
        goto LABEL_136;
      }
      *((double *)this + 7) = a3;
      return;
    case 8:
      throwWrongTypeForParamId(8, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 10:
LABEL_15:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 10, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationConTransAccComponentBackoffPercent";
        goto LABEL_136;
      }
      *((double *)this + 9) = a3;
      return;
    case 11:
      throwWrongTypeForParamId(11, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_21;
    case 12:
LABEL_21:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 13:
LABEL_22:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 14:
LABEL_23:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 15:
LABEL_24:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 16:
LABEL_25:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 17:
LABEL_26:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 18:
LABEL_27:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 19:
LABEL_28:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 20:
LABEL_29:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 20, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationConTransAccMaxTotalComponentProbability";
        goto LABEL_136;
      }
      *((double *)this + 13) = a3;
      return;
    case 21:
      throwWrongTypeForParamId(21, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_35;
    case 22:
LABEL_35:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_36;
    case 23:
LABEL_36:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_37;
    case 24:
LABEL_37:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_38;
    case 25:
LABEL_38:
      v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 25, a4, a5, a6, a7, a8, a9);
      if (v37)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationConTransAccOnlineDecayFactor";
        goto LABEL_136;
      }
      *((double *)this + 16) = a3;
      return;
    case 26:
      throwWrongTypeForParamId(26, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_44;
    case 27:
LABEL_44:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_45;
    case 28:
LABEL_45:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_46;
    case 29:
LABEL_46:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_47;
    case 30:
LABEL_47:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_48;
    case 31:
LABEL_48:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_49;
    case 32:
LABEL_49:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_50;
    case 33:
LABEL_50:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_51;
    case 34:
LABEL_51:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_52;
    case 35:
LABEL_52:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 35, a4, a5, a6, a7, a8, a9);
      if (v43)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMDevGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 22) = a3;
      return;
    case 36:
      v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 36, a4, a5, a6, a7, a8, a9);
      if (v49)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMErrorBeta";
        goto LABEL_136;
      }
      *((double *)this + 23) = a3;
      return;
    case 37:
      throwWrongTypeForParamId(37, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_62;
    case 38:
LABEL_62:
      v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 38, a4, a5, a6, a7, a8, a9);
      if (v55)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMErrorOffset";
        goto LABEL_136;
      }
      *((double *)this + 25) = a3;
      return;
    case 39:
      throwWrongTypeForParamId(39, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_67;
    case 40:
LABEL_67:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_68;
    case 41:
LABEL_68:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_69;
    case 42:
LABEL_69:
      v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 42, a4, a5, a6, a7, a8, a9);
      if (v61)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMMeanGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 28) = a3;
      return;
    case 43:
      v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 43, a4, a5, a6, a7, a8, a9);
      if (v67)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMMinNegativeCount";
        goto LABEL_136;
      }
      *((double *)this + 29) = a3;
      return;
    case 44:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 44, a4, a5, a6, a7, a8, a9);
      if (v73)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v73, a3, 0, 0, v74, v75, v76, v77, v78);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMMinPositiveCount";
        goto LABEL_136;
      }
      *((double *)this + 30) = a3;
      return;
    case 45:
      v79 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 45, a4, a5, a6, a7, a8, a9);
      if (v79)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v79, a3, 0, 0, v80, v81, v82, v83, v84);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMMinTotalCount";
        goto LABEL_136;
      }
      *((double *)this + 31) = a3;
      return;
    case 46:
      v85 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 46, a4, a5, a6, a7, a8, a9);
      if (v85)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v85, a3, 0, 0, v86, v87, v88, v89, v90);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMNegativeGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 32) = a3;
      return;
    case 47:
      v91 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 47, a4, a5, a6, a7, a8, a9);
      if (v91)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v91, a3, 0, 0, v92, v93, v94, v95, v96);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMNormalizedDeltaMin";
        goto LABEL_136;
      }
      *((double *)this + 33) = a3;
      return;
    case 48:
      v97 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 48, a4, a5, a6, a7, a8, a9);
      if (v97)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v97, a3, 0, 0, v98, v99, v100, v101, v102);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMNormalizedDeltaRange";
        goto LABEL_136;
      }
      *((double *)this + 34) = a3;
      return;
    case 49:
      throwWrongTypeForParamId(49, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_99;
    case 50:
LABEL_99:
      v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 50, a4, a5, a6, a7, a8, a9);
      if (v103)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v103, a3, 0, 0, v104, v105, v106, v107, v108);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMPositiveGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 36) = a3;
      return;
    case 51:
      v109 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 51, a4, a5, a6, a7, a8, a9);
      if (v109)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v109, a3, 0, 0, v110, v111, v112, v113, v114);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationDTMMScoreScale";
        goto LABEL_136;
      }
      *((double *)this + 37) = a3;
      return;
    case 52:
      throwWrongTypeForParamId(52, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_108;
    case 53:
LABEL_108:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_109;
    case 54:
LABEL_109:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_110;
    case 55:
LABEL_110:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_111;
    case 56:
LABEL_111:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_112;
    case 57:
LABEL_112:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_113;
    case 58:
LABEL_113:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_114;
    case 59:
LABEL_114:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_115;
    case 60:
LABEL_115:
      v115 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 60, a4, a5, a6, a7, a8, a9);
      if (v115)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v115, a3, 0, 0, v116, v117, v118, v119, v120);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationNonSilenceAccumulateFactor";
        goto LABEL_136;
      }
      *((double *)this + 42) = a3;
      return;
    case 61:
      v121 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 61, a4, a5, a6, a7, a8, a9);
      if (v121)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v121, a3, 0, 0, v122, v123, v124, v125, v126);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationSilenceAccumulateFactor";
        goto LABEL_136;
      }
      *((double *)this + 43) = a3;
      return;
    case 62:
      v127 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 62, a4, a5, a6, a7, a8, a9);
      if (v127)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v127, a3, 0, 0, v128, v129, v130, v131, v132);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationTransAccComponentBackoffPercent";
        goto LABEL_136;
      }
      *((double *)this + 44) = a3;
      break;
    case 63:
      throwWrongTypeForParamId(63, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_129;
    case 64:
LABEL_129:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_130;
    case 65:
LABEL_130:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_131;
    case 66:
LABEL_131:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_132;
    case 67:
LABEL_132:
      v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 67, a4, a5, a6, a7, a8, a9);
      if (v133)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v133, a3, 0, 0, v134, v135, v136, v137, v138);
      if (*((_DWORD *)this + 9))
      {
        v24 = "AdaptationTransAccMaxTotalComponentProbability";
LABEL_136:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 47) = a3;
      }
      break;
    case 68:
      throwWrongTypeForParamId(68, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_139;
    case 69:
LABEL_139:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_140;
    case 70:
LABEL_140:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_141;
    default:
LABEL_141:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void AdapterParamSet::setStringParameter(AdapterParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void AdapterParamSet::setEnumParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2828, 37, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
        throwParamSetSetFailed("AdaptationDTMMErrorFunction", "enum", v18, v19, v20, v21, v22, v23);
      else
        *((_DWORD *)this + 48) = v9;
      return;
    case 38:
      throwWrongTypeForParamId(38, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 39:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 40:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 41:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 42:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 43:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 44:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 45:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 46:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 47:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 48:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 49:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 50:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 51:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 52:
LABEL_57:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 53:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 54:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 55:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 56:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 57:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 58:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 59:
LABEL_64:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 60:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 61:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 62:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 63:
LABEL_68:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 64:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 65:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 66:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 67:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 68:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 69:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 70:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void AdapterParamSet::~AdapterParamSet(AdapterParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((AdapterParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((AdapterParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

uint64_t minAddAllocWithExtra(uint64_t result, int a2)
{
  unsigned int v2;

  v2 = ((90 * a2) >> 10) + 32;
  if (v2 <= result)
    return result;
  else
    return v2;
}

const TLocaleInfo **buildRegExp(const TFileObject *a1, TLexicon *a2, int a3)
{
  const TLocaleInfo **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 *v18;
  const char *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  __int128 *v27;
  __int32 *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *exception;
  std::string *v36;
  const char *v37;
  _QWORD *v38;
  std::string *v39;
  __int128 v40;
  __int128 v41;
  _BYTE __p[24];
  _QWORD v43[128];
  char v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  int64x2_t v48;
  uint64_t v49;

  v47 = &unk_209A7D0FC;
  v48 = vdupq_n_s64(1uLL);
  v49 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v47, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v46) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v45, *((std::string::size_type *)&v45 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v45;
      v43[0] = v46;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v43[0] >= 0)
      v34 = &__p[8];
    else
      v34 = *(const char **)&__p[8];
    conditionalAssert(v34, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 70, v30, v31);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v43[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v36 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v40 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v40;
    }
    *exception = &unk_24C214BA0;
  }
  v6 = (const TLocaleInfo **)operator new();
  TRegExp::TRegExp(v6, (uint64_t)a2 + 240);
  v7 = *((_QWORD *)a1 + 3);
  if (v7)
  {
    v8 = 0;
    v9 = "Error : %s%s\n";
    while (1)
    {
      v10 = v8;
      v8 = 1;
      if ((TFileObject::verify((TFileObject *)v7, 1, 0) & 1) == 0)
      {
        if (*(_DWORD *)(v7 + 40) != 2)
        {
          if (a3)
          {
            if (TLexicon::checkName((uint64_t)a2, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              loggableFileObject((uint64_t *)v7);
              v11 = __p[23];
              v12 = *(_BYTE **)__p;
              loggableUnicode(*(unsigned int **)(v7 + 24), &v45);
              if (v11 >= 0)
                v17 = __p;
              else
                v17 = v12;
              v18 = &v45;
              if (v46 < 0)
                v18 = (__int128 *)v45;
              tknPrintf("Error: %s'%s' is an invalid token name.\n", v13, v14, v15, v16, v17, v18);
              if (SHIBYTE(v46) < 0)
                operator delete((void *)v45);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v8 = 1;
              goto LABEL_31;
            }
            if (*(_BYTE *)(getPropCheckTokenExistence() + 8)
              && !TLexicon::findHeadClone((uint64_t)a2, *(__int32 **)(v7 + 24)))
            {
              v19 = v9;
              loggableFileObject((uint64_t *)v7);
              v20 = __p[23];
              v21 = *(_BYTE **)__p;
              loggableUnicode(*(unsigned int **)(v7 + 24), &v45);
              if (v20 >= 0)
                v26 = __p;
              else
                v26 = v21;
              v27 = &v45;
              if (v46 < 0)
                v27 = (__int128 *)v45;
              tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v22, v23, v24, v25, v26, v27);
              v9 = v19;
              if (SHIBYTE(v46) < 0)
                operator delete((void *)v45);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
          }
          v8 = v10;
LABEL_31:
          *(_QWORD *)__p = v43;
          *(_OWORD *)&__p[8] = xmmword_209A57DD0;
          v44 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v7 + 24), (uint64_t)__p, 0, 3);
          if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
          {
            if (v44)
            {
              LODWORD(v45) = 0;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v45, 1uLL);
              v28 = *(__int32 **)__p;
              --*(_QWORD *)&__p[16];
            }
            else
            {
              v28 = *(__int32 **)__p;
              if (*(_QWORD *)&__p[8])
                *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
            }
          }
          else
          {
            v28 = *(__int32 **)__p;
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
          }
          TRegExp::add(v6, v28, 0);
          if (v44 && *(_QWORD **)__p != v43 && *(_QWORD *)__p)
            MEMORY[0x20BD149A8]();
          goto LABEL_41;
        }
        TRegExp::add(v6, *(__int32 **)(v7 + 24), 0);
        v8 = v10;
      }
LABEL_41:
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
      {
        if ((v8 & 1) != 0)
        {
          TRegExp::~TRegExp((TRegExp *)v6);
          MEMORY[0x20BD149A8]();
          std::string::basic_string[abi:ne180100]<0>(&v45, &byte_209A88803);
          *(_QWORD *)__p = aPpx;
          if (SHIBYTE(v46) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v45, *((std::string::size_type *)&v45 + 1));
          }
          else
          {
            *(_OWORD *)&__p[8] = v45;
            v43[0] = v46;
          }
          *(_QWORD *)__p = &unk_24C214BA0;
          if (v43[0] >= 0)
            v37 = &__p[8];
          else
            v37 = *(const char **)&__p[8];
          conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 125, v32, v33);
          *(_QWORD *)__p = aPpx;
          if (SHIBYTE(v43[0]) < 0)
            operator delete(*(void **)&__p[8]);
          if (SHIBYTE(v46) < 0)
            operator delete((void *)v45);
          v38 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *v38 = aPpx;
          v39 = (std::string *)(v38 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            v41 = *(_OWORD *)__p;
            v38[3] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v41;
          }
          *v38 = &unk_24C214BA0;
        }
        break;
      }
    }
  }
  TRegExp::doneAdding((TRegExp *)v6);
  return v6;
}

void sub_2099BBB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099BBB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_2099BBBB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 121) < 0)
    JUMPOUT(0x2099BBC24);
  JUMPOUT(0x2099BBC44);
}

void sub_2099BBBDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x60C40CE5A77A8);
  _Unwind_Resume(a1);
}

void sub_2099BBBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 121) < 0)
    operator delete(*(void **)(v18 - 144));
  if (a18 < 0)
    JUMPOUT(0x2099BBC24);
  _Unwind_Resume(a1);
}

void sub_2099BBC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (LOBYTE(STACK[0x438]))
    buildRegExp((uint64_t *)va, v5);
  _Unwind_Resume(a1);
}

void TFsaBuilder::minimizeChildren(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  _QWORD *v4;
  uint64_t **v9;
  uint64_t **v10;
  _QWORD *v11;

  v4 = *(_QWORD **)(a3 + 24);
  if (v4)
  {
    v9 = a4 + 1;
    do
    {
      v11 = (_QWORD *)v4[2];
      if (!v11[1])
      {
        TFsaBuilder::minimizeChildren(a1, a2);
        v10 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>((uint64_t)a4, (uint64_t *)&v11);
        if (v9 == v10)
        {
          v11[1] = 1;
          std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(a4, (uint64_t *)&v11, (uint64_t *)&v11);
        }
        else
        {
          TFsa::moveTrans((uint64_t)a2, v4, a3, (uint64_t)v10[4]);
          TFsa::deleteState(a2, v11);
        }
      }
      v4 = (_QWORD *)v4[5];
    }
    while (v4);
  }
}

void TFsaBuilder::addSuffix(int a1, TAllocator *this, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  int v8;

  v4 = (uint64_t)a3;
  if (*a4)
  {
    v6 = a4 + 1;
    do
    {
      v7 = TFsa::newState(this, 0);
      TFsa::newTrans(this, v4, (uint64_t)v7, *(v6 - 1));
      v8 = *v6++;
      v4 = (uint64_t)v7;
    }
    while (v8);
  }
  else
  {
    v7 = a3;
  }
  TFsa::addExtremity((uint64_t)this, (uint64_t)v7, 1u);
}

TFsa *TFsaBuilder::operator()(uint64_t a1, uint64_t *a2)
{
  TFsa *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v14;
  _QWORD *v15[2];

  v4 = (TFsa *)operator new();
  TFsa::TFsa(v4);
  v5 = TFsa::newState(v4, 0);
  TFsa::addExtremity((uint64_t)v4, (uint64_t)v5, 0);
  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      v8 = *(_DWORD **)(v6 + 8 * v7);
      v9 = v5[3];
      if (v9)
      {
        v10 = v5;
        do
        {
          if (*v8 == *(_DWORD *)v9)
          {
            v10 = *(_QWORD **)(v9 + 16);
            v11 = v10 + 3;
            ++v8;
          }
          else
          {
            v11 = (uint64_t *)(v9 + 40);
          }
          v9 = *v11;
        }
        while (v9);
      }
      else
      {
        v10 = v5;
      }
      TFsaBuilder::minimizeChildren(a1, v4, (uint64_t)v10, &v14);
      TFsaBuilder::addSuffix(v12, v4, v10, v8);
      ++v7;
      v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 3);
  }
  TFsaBuilder::minimizeChildren(a1, v4, (uint64_t)v5, &v14);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v14, v15[0]);
  return v4;
}

void sub_2099BBED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void TDecompounder::load(TDecompounder *this, TInputStream *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void **v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void **v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const __int32 **v36;
  const __int32 **v37;
  unint64_t v38;
  uint64_t v39;
  TFsa *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  _QWORD *v46;
  std::string *v47;
  const char *v48;
  _QWORD *v49;
  std::string *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  _QWORD *exception;
  std::string *v59;
  const char *v60;
  _QWORD *v61;
  std::string *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *v66[2];
  uint64_t v67;
  _BYTE v68[24];
  uint64_t v69;
  void *__p[2];
  uint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  void *v75[2];
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  _BYTE v79[24];
  uint64_t v80;
  char v81;
  _BYTE v82[24];
  uint64_t v83;
  __int32 *v84;
  __int128 v85;
  uint64_t v86;
  __int32 *v87;
  __int128 v88;
  uint64_t v89;
  __int32 *v90;
  __int128 v91;
  uint64_t v92;
  __int32 *v93;
  __int128 v94;
  uint64_t v95;
  __int32 *v96;
  __int128 v97;
  uint64_t v98;
  __int32 *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (TInputStream::verifyHeader((uint64_t)a2, "TknDecomp", (uint64_t)&pTknDecompVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v66, &byte_209A88803);
    *(_QWORD *)v82 = aPpx;
    if (SHIBYTE(v67) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v82[8], (const std::string::value_type *)v66[0], (std::string::size_type)v66[1]);
    }
    else
    {
      *(_OWORD *)&v82[8] = *(_OWORD *)v66;
      v83 = v67;
    }
    *(_QWORD *)v82 = &unk_24C214BA0;
    if (v83 >= 0)
      v57 = &v82[8];
    else
      v57 = *(const char **)&v82[8];
    conditionalAssert(v57, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 382, v53, v54);
    *(_QWORD *)v82 = aPpx;
    if (SHIBYTE(v83) < 0)
      operator delete(*(void **)&v82[8]);
    if (SHIBYTE(v67) < 0)
      operator delete(v66[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v82, &byte_209A88803);
    *exception = aPpx;
    v59 = (std::string *)(exception + 1);
    if ((v82[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v82, *(std::string::size_type *)&v82[8]);
    }
    else
    {
      v63 = *(_OWORD *)v82;
      exception[3] = *(_QWORD *)&v82[16];
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v63;
    }
    *exception = &unk_24C214BA0;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v66, a2);
  v4 = v66[0];
  *(_OWORD *)&v82[8] = xmmword_209A57D80;
  *(_QWORD *)v82 = dword_209A7D100;
  v85 = xmmword_209A57D80;
  v83 = -1;
  v84 = dword_209A7D120;
  v88 = xmmword_209A57D80;
  v86 = -1;
  v87 = dword_209A7D148;
  v91 = xmmword_209A57D80;
  v89 = -1;
  v90 = dword_209A7D184;
  v94 = xmmword_209A7D0E0;
  v92 = -1;
  v93 = dword_209A7D1BC;
  v95 = -1;
  v97 = xmmword_209A57D80;
  v96 = dword_209A7D1FC;
  v100 = xmmword_209A57D80;
  v98 = 1;
  v99 = dword_209A7D238;
  v101 = 1;
  if (TFileObject::verify((uint64_t)v66[0], (uint64_t)v82, 7uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v77, &byte_209A88803);
    *(_QWORD *)v79 = aPpx;
    if ((v77[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v79[8], *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
    }
    else
    {
      *(_OWORD *)&v79[8] = *(_OWORD *)v77;
      v80 = *(_QWORD *)&v77[16];
    }
    *(_QWORD *)v79 = &unk_24C214BA0;
    if (v80 >= 0)
      v60 = &v79[8];
    else
      v60 = *(const char **)&v79[8];
    conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 404, v55, v56);
    *(_QWORD *)v79 = aPpx;
    if (SHIBYTE(v80) < 0)
      operator delete(*(void **)&v79[8]);
    if ((v77[23] & 0x80000000) != 0)
      operator delete(*(void **)v77);
    v61 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v79, &byte_209A88803);
    *v61 = aPpx;
    v62 = (std::string *)(v61 + 1);
    if ((v79[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)v79, *(std::string::size_type *)&v79[8]);
    }
    else
    {
      v64 = *(_OWORD *)v79;
      v61[3] = *(_QWORD *)&v79[16];
      *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v64;
    }
    *v61 = &unk_24C214BA0;
  }
  v5 = v4[3];
  if (v5)
  {
    v65 = 0;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D100))
      {
        if (!wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D120))
        {
          *((_QWORD *)this + 3) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D148))
        {
          *((_QWORD *)this + 5) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D184))
        {
          *((_QWORD *)this + 4) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D1BC))
        {
          *((_QWORD *)this + 6) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D1FC))
        {
          v65 = 1;
        }
        else
        {
          v65 |= wcscmp(*(const __int32 **)(v5 + 8), dword_209A7D238) == 0;
        }
        goto LABEL_70;
      }
      v6 = *(_QWORD *)this;
      *(int64x2_t *)&v79[8] = vdupq_n_s64(1uLL);
      *(_QWORD *)v79 = &unk_209A7D0FC;
      v80 = -1;
      if (TFileObject::verify(v5, (uint64_t)v79, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v75, &byte_209A88803);
        *(_QWORD *)v77 = aPpx;
        if (SHIBYTE(v76) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v77[8], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
        }
        else
        {
          *(_OWORD *)&v77[8] = *(_OWORD *)v75;
          v78 = v76;
        }
        *(_QWORD *)v77 = &unk_24C214BA0;
        if (v78 >= 0)
          v45 = &v77[8];
        else
          v45 = *(const char **)&v77[8];
        conditionalAssert(v45, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 304, v41, v42);
        *(_QWORD *)v77 = aPpx;
        if (SHIBYTE(v78) < 0)
          operator delete(*(void **)&v77[8]);
        if (SHIBYTE(v76) < 0)
          operator delete(v75[0]);
        v46 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v77, &byte_209A88803);
        *v46 = aPpx;
        v47 = (std::string *)(v46 + 1);
        if ((v77[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
        }
        else
        {
          v51 = *(_OWORD *)v77;
          v46[3] = *(_QWORD *)&v77[16];
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v51;
        }
        *v46 = &unk_24C214BA0;
      }
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v7 = *(_QWORD *)(v5 + 24);
      if (!v7)
      {
        v37 = 0;
        v36 = 0;
        goto LABEL_64;
      }
      v8 = 0;
      do
      {
        if ((TFileObject::verify((TFileObject *)v7, 0, 0) & 1) != 0)
          goto LABEL_27;
        if (TLexicon::checkName(v6, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          loggableFileObject((uint64_t *)v7);
          v9 = v68[23];
          v10 = *(_BYTE **)v68;
          loggableUnicode(*(unsigned int **)(v7 + 24), __p);
          if (v9 >= 0)
            v15 = v68;
          else
            v15 = v10;
          if (v71 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          tknPrintf("Error: %s'%s' is an invalid token name.\n", v11, v12, v13, v14, v15, v16);
          if (SHIBYTE(v71) < 0)
            operator delete(__p[0]);
          if ((v68[23] & 0x80000000) != 0)
            operator delete(*(void **)v68);
LABEL_27:
          v8 = 1;
          goto LABEL_28;
        }
        if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v6, *(__int32 **)(v7 + 24)))
        {
          loggableFileObject((uint64_t *)v7);
          v17 = v68[23];
          v18 = *(_BYTE **)v68;
          loggableUnicode(*(unsigned int **)(v7 + 24), __p);
          if (v17 >= 0)
            v23 = v68;
          else
            v23 = v18;
          if (v71 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v19, v20, v21, v22, v23, v24);
          if (SHIBYTE(v71) < 0)
            operator delete(__p[0]);
          if ((v68[23] & 0x80000000) != 0)
            operator delete(*(void **)v68);
        }
        v25 = *(_QWORD *)(v7 + 24);
        v26 = v73;
        if (v73 >= v74)
        {
          v28 = (v73 - (_BYTE *)v72) >> 3;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v29 = (v74 - (_BYTE *)v72) >> 2;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if ((unint64_t)(v74 - (_BYTE *)v72) >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v74, v30);
          else
            v31 = 0;
          v32 = &v31[8 * v28];
          *(_QWORD *)v32 = v25;
          v27 = v32 + 8;
          v34 = (char *)v72;
          v33 = v73;
          if (v73 != v72)
          {
            do
            {
              v35 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v32 - 1) = v35;
              v32 -= 8;
            }
            while (v33 != v34);
            v33 = (char *)v72;
          }
          v72 = v32;
          v73 = v27;
          v74 = &v31[8 * v30];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v73 = v25;
          v27 = v26 + 8;
        }
        v73 = v27;
LABEL_28:
        v7 = *(_QWORD *)(v7 + 16);
      }
      while (v7);
      if ((v8 & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v68 = aPpx;
        if (SHIBYTE(v71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v68[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v68[8] = *(_OWORD *)__p;
          v69 = v71;
        }
        *(_QWORD *)v68 = &unk_24C214BA0;
        if (v69 >= 0)
          v48 = &v68[8];
        else
          v48 = *(const char **)&v68[8];
        conditionalAssert(v48, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 337, v43, v44);
        *(_QWORD *)v68 = aPpx;
        if (SHIBYTE(v69) < 0)
          operator delete(*(void **)&v68[8]);
        if (SHIBYTE(v71) < 0)
          operator delete(__p[0]);
        v49 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v68, &byte_209A88803);
        *v49 = aPpx;
        v50 = (std::string *)(v49 + 1);
        if ((v68[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v68, *(std::string::size_type *)&v68[8]);
        }
        else
        {
          v52 = *(_OWORD *)v68;
          v49[3] = *(_QWORD *)&v68[16];
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v52;
        }
        *v49 = &unk_24C214BA0;
      }
      v36 = (const __int32 **)v72;
      v37 = (const __int32 **)v73;
LABEL_64:
      v38 = 126 - 2 * __clz(v37 - v36);
      if (v37 == v36)
        v39 = 0;
      else
        v39 = v38;
      std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>((uint64_t)v36, v37, (uint64_t)&v81, v39, 1);
      v40 = TFsaBuilder::operator()((uint64_t)v68, (uint64_t *)&v72);
      if (v72)
      {
        v73 = (char *)v72;
        operator delete(v72);
      }
      *((_QWORD *)this + 2) = v40;
LABEL_70:
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
      {
        if ((v65 & 1) != 0)
          tknPrintString("Warning: Decompounder model has been lobotomized on load.\n");
        break;
      }
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v66);
}

void sub_2099BCC10()
{
  uint64_t v0;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v0);
  JUMPOUT(0x2099BCD8CLL);
}

void sub_2099BCD84()
{
  JUMPOUT(0x2099BCD8CLL);
}

void sub_2099BCE24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099BCE30(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2099BCE38);
  __clang_call_terminate(a1);
}

void TDecompounder::TDecompounder(TDecompounder *this, TInputStream *a2, TLexicon *a3, TTokenizerParamManager *a4)
{
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  TDecompounder::load(this, a2);
}

void TDecompounder::~TDecompounder(TDecompounder *this)
{
  TFsa *v2;
  TRegExp *v3;
  TRegExp *v4;
  TRegExp *v5;
  TRegExp *v6;

  v2 = (TFsa *)*((_QWORD *)this + 2);
  if (v2)
  {
    TFsa::~TFsa(v2);
    MEMORY[0x20BD149A8]();
  }
  v3 = (TRegExp *)*((_QWORD *)this + 3);
  if (v3)
  {
    TRegExp::~TRegExp(v3);
    MEMORY[0x20BD149A8]();
  }
  v4 = (TRegExp *)*((_QWORD *)this + 4);
  if (v4)
  {
    TRegExp::~TRegExp(v4);
    MEMORY[0x20BD149A8]();
  }
  v5 = (TRegExp *)*((_QWORD *)this + 5);
  if (v5)
  {
    TRegExp::~TRegExp(v5);
    MEMORY[0x20BD149A8]();
  }
  v6 = (TRegExp *)*((_QWORD *)this + 6);
  if (v6)
  {
    TRegExp::~TRegExp(v6);
    MEMORY[0x20BD149A8]();
  }
}

uint64_t TDecompounder::isValidWord(TDecompounder *this, int **a2, __int32 **a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t ActiveConfigHandle;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  unsigned __int8 v25;
  int isUpper;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  __int32 *v35;
  TLocaleInfo *v37;
  TLocaleInfo *v38;
  __int32 *v39;
  __int128 v40;
  _BYTE v41[785];
  char v42;
  __int32 *v43;
  __int128 v44;
  _BYTE v45[785];
  char v46;
  unsigned int *v47;
  __int128 v48;
  _BYTE v49[1024];
  char v50;
  int v51;

  if (a4 && (a5 & 1) != 0)
    return 0;
  v47 = (unsigned int *)v49;
  v48 = xmmword_209A57DD0;
  v50 = 1;
  TWord::getTokenName(a3, (uint64_t)&v47);
  v11 = *((_QWORD *)this + 1);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 5624));
  if (!*(_BYTE *)(v11 + TParam::getValidConfig((TParam *)(v11 + 5624), ActiveConfigHandle) + 5776))
    goto LABEL_44;
  v13 = *((_QWORD *)this + 1);
  v14 = TParam::getActiveConfigHandle((TParam *)(v13 + 5128));
  if (!*(_BYTE *)(v13 + TParam::getValidConfig((TParam *)(v13 + 5128), v14) + 5280))
  {
    v17 = (_QWORD *)*((_QWORD *)this + 3);
    if (v17)
    {
      if (*((_QWORD *)&v48 + 1) >= (unint64_t)v48)
      {
        if (v50)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v18 = v47;
          --*((_QWORD *)&v48 + 1);
        }
        else
        {
          v18 = v47;
          if ((_QWORD)v48)
            v47[(_QWORD)v48 - 1] = 0;
        }
      }
      else
      {
        v18 = v47;
        v47[*((_QWORD *)&v48 + 1)] = 0;
      }
      if (TRegExp::match(v17, v18, 0))
        goto LABEL_51;
    }
  }
  if (a4)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 5);
    if (v15)
    {
      if (*((_QWORD *)&v48 + 1) >= (unint64_t)v48)
      {
        if (v50)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v16 = v47;
          --*((_QWORD *)&v48 + 1);
        }
        else
        {
          v16 = v47;
          if ((_QWORD)v48)
            v47[(_QWORD)v48 - 1] = 0;
        }
      }
      else
      {
        v16 = v47;
        v47[*((_QWORD *)&v48 + 1)] = 0;
      }
      if (TRegExp::match(v15, v16, 0))
        goto LABEL_51;
    }
    if ((a5 & 1) != 0)
    {
LABEL_23:
      v19 = (_QWORD *)*((_QWORD *)this + 4);
      if (v19)
      {
        if (*((_QWORD *)&v48 + 1) < (unint64_t)v48)
        {
          v20 = v47;
          v47[*((_QWORD *)&v48 + 1)] = 0;
          goto LABEL_43;
        }
        if (v50)
        {
LABEL_33:
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v20 = v47;
          --*((_QWORD *)&v48 + 1);
          goto LABEL_43;
        }
        v20 = v47;
        if ((_QWORD)v48)
          v47[(_QWORD)v48 - 1] = 0;
LABEL_43:
        if (TRegExp::match(v19, v20, 0))
          goto LABEL_51;
        goto LABEL_44;
      }
      goto LABEL_44;
    }
    if ((a4 & 1) != 0)
      goto LABEL_44;
  }
  else if (a5)
  {
    goto LABEL_23;
  }
  v19 = (_QWORD *)*((_QWORD *)this + 6);
  if (v19)
  {
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v48)
    {
      v20 = v47;
      v47[*((_QWORD *)&v48 + 1)] = 0;
      goto LABEL_43;
    }
    if (v50)
      goto LABEL_33;
    v20 = v47;
    if ((_QWORD)v48)
      v47[(_QWORD)v48 - 1] = 0;
    goto LABEL_43;
  }
LABEL_44:
  v21 = *((_QWORD *)this + 1);
  v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 5376));
  if (*(_BYTE *)(v21 + TParam::getValidConfig((TParam *)(v21 + 5376), v22) + 5528))
    v23 = a5 == 0;
  else
    v23 = 1;
  if (v23)
    goto LABEL_52;
  v24 = **a2;
  {
    v37 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v37);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v37;
  }
  isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24);
  v27 = *v47;
  {
    v38 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v38);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v38;
  }
  if (isUpper == TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27))
  {
LABEL_52:
    v29 = *((_QWORD *)this + 1);
    v30 = TParam::getActiveConfigHandle((TParam *)(v29 + 6120));
    v10 = 1;
    if (*(_BYTE *)(v29 + TParam::getValidConfig((TParam *)(v29 + 6120), v30) + 6272))
      v31 = a5 == 0;
    else
      v31 = 1;
    if (v31)
      goto LABEL_99;
    v43 = (__int32 *)v45;
    v44 = xmmword_209A57DD0;
    v46 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v43);
    v39 = (__int32 *)v41;
    v40 = xmmword_209A57DD0;
    v42 = 1;
    TWord::getCategoryTag((uint64_t)a3, &v39);
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v51, 1uLL);
        v32 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v32 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v32 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    if (!wcscmp(v32, dword_209A7D258))
      goto LABEL_93;
    if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
    {
      if (v46)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), &v51, 1uLL);
        v33 = v43;
        --*((_QWORD *)&v44 + 1);
      }
      else
      {
        v33 = v43;
        if ((_QWORD)v44)
          v43[(_QWORD)v44 - 1] = 0;
      }
    }
    else
    {
      v33 = v43;
      v43[*((_QWORD *)&v44 + 1)] = 0;
    }
    if (!wcscmp(v33, dword_209A7D258))
      goto LABEL_93;
    if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
    {
      if (v46)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), &v51, 1uLL);
        v34 = v43;
        --*((_QWORD *)&v44 + 1);
      }
      else
      {
        v34 = v43;
        if ((_QWORD)v44)
          v43[(_QWORD)v44 - 1] = 0;
      }
    }
    else
    {
      v34 = v43;
      v43[*((_QWORD *)&v44 + 1)] = 0;
    }
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v51, 1uLL);
        v35 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v35 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v35 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    if (!wcsncmp(v34, v35, 2uLL))
    {
LABEL_93:
      if (v42 && v39 != (__int32 *)v41 && v39)
        MEMORY[0x20BD149A8]();
      if (v46 && v43 != (__int32 *)v45 && v43)
        MEMORY[0x20BD149A8]();
      goto LABEL_99;
    }
    if (v42 && v39 != (__int32 *)v41 && v39)
      MEMORY[0x20BD149A8]();
    if (v46 && v43 != (__int32 *)v45 && v43)
      MEMORY[0x20BD149A8]();
  }
LABEL_51:
  v10 = 0;
LABEL_99:
  if (v50 && v47 != (unsigned int *)v49 && v47)
    MEMORY[0x20BD149A8]();
  return v10;
}

void sub_2099BD654(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xC70]))
  {
    v4 = STACK[0x858];
    if (STACK[0x858] != v2)
    {
      if (v4)
        MEMORY[0x20BD149A8](v4, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::decompound(TDecompounder *this, const TWord *a2, TFsa *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  TAllocator *v6;
  TAllocator *v7;
  __int32 **v8;
  TWord *v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t ActiveConfigHandle;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  _DWORD *v34;
  int v35;
  int *v36;
  unsigned int *v37;
  BOOL HeadClonesCollated;
  int v39;
  BOOL v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ValidConfig;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  TWord *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  _QWORD *v78;
  uint64_t WordSpec;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v94;
  __int128 v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  int HaveCommonPron;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _BYTE *v132;
  char *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _QWORD **v146;
  unint64_t v147;
  uint64_t i;
  uint64_t v149;
  char *v150;
  _QWORD *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t TransCount;
  _QWORD *v169;
  char *v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *j;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  int **v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  uint64_t v195;
  TDecompounder *v196;
  unint64_t *v197;
  uint64_t *v198;
  char *v199;
  void *v200;
  char *v201;
  char *v202;
  void *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  _BYTE v208[809];
  char v209;
  void *v210;
  _QWORD *v211;
  _BYTE *v212;
  __int128 v213;
  _BYTE v214[801];
  char v215;
  _QWORD v216[2];
  _BYTE *v217;
  __int128 v218;
  _BYTE v219[1024];
  char v220;
  __int128 v221;
  void *v222;
  __int128 __p;
  _BYTE v224[1024];
  char v225;
  uint64_t v226;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v9 = (TWord *)v8;
  v196 = (TDecompounder *)v5;
  v226 = *MEMORY[0x24BDAC8D0];
  v217 = v219;
  v218 = xmmword_209A57DD0;
  v220 = 1;
  TWord::getWrittenForm(v8, (uint64_t)&v217);
  v216[0] = TWord::getWordSpec(v9);
  v216[1] = v10;
  v212 = v214;
  v213 = xmmword_209A57DD0;
  v215 = 1;
  v11 = (int *)TStringParam::get((TStringParam *)(*((_QWORD *)v196 + 1) + 10744));
  TBuffer<wchar_t>::assign((uint64_t)&v212, v11);
  *((_DWORD *)v212 + 70) = 48;
  v222 = 0;
  std::vector<TState *>::vector(&v210, *((_QWORD *)&v218 + 1) + 1, &v222);
  v187 = (int **)v9;
  v12 = TFsa::newState(v7, 0);
  *(_QWORD *)v210 = v12;
  TFsa::addExtremity((uint64_t)v7, *(_QWORD *)v210, 0);
  v194 = (unint64_t *)v7;
  v13 = *((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v14 = 0;
    do
    {
      v188 = v14;
      v189 = *((_QWORD *)v210 + v14);
      if (!v189)
        goto LABEL_215;
      v206 = v208;
      v207 = xmmword_209A57DD0;
      v209 = 1;
      if (v13 >= (unint64_t)v218)
      {
        if (v220)
        {
          LODWORD(v222) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v217, v13, (int *)&v222, 1uLL);
          v15 = v217;
          --*((_QWORD *)&v218 + 1);
        }
        else
        {
          v15 = v217;
          if ((_QWORD)v218)
            *(_DWORD *)&v217[4 * v218 - 4] = 0;
        }
      }
      else
      {
        v15 = v217;
        *(_DWORD *)&v217[4 * v13] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v206, (int *)&v15[4 * v188]);
      v203 = 0;
      v204 = 0;
      v205 = 0;
      v16 = *((_QWORD *)v196 + 1);
      ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v16 + 5128));
      if (!*(_BYTE *)(v16 + TParam::getValidConfig((TParam *)(v16 + 5128), ActiveConfigHandle) + 5280)
        || (v18 = (_QWORD *)*((_QWORD *)v196 + 2)) == 0
        || !v18[25])
      {
        v26 = *(_QWORD **)v196;
        if (*((_QWORD *)&v207 + 1) >= (unint64_t)v207)
        {
          if (v209)
          {
            LODWORD(v222) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v206, *((unint64_t *)&v207 + 1), (int *)&v222, 1uLL);
            v27 = (int *)v206;
            --*((_QWORD *)&v207 + 1);
          }
          else
          {
            v27 = (int *)v206;
            if ((_QWORD)v207)
              *(_DWORD *)&v206[4 * v207 - 4] = 0;
          }
        }
        else
        {
          v27 = (int *)v206;
          *(_DWORD *)&v206[4 * *((_QWORD *)&v207 + 1)] = 0;
        }
        v28 = *((_QWORD *)v196 + 1);
        v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 16464));
        v30 = *(int *)(v28 + 4 * TParam::getValidConfig((TParam *)(v28 + 16464), v29) + 16624);
        v31 = *((_QWORD *)v196 + 1);
        v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 16112));
        v33 = *(int *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 16112), v32) + 16272);
        if (*((_QWORD *)&v213 + 1) >= (unint64_t)v213)
        {
          if (v215)
          {
            LODWORD(v222) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v212, *((unint64_t *)&v213 + 1), (int *)&v222, 1uLL);
            v34 = v212;
            --*((_QWORD *)&v213 + 1);
          }
          else
          {
            v34 = v212;
            if ((_QWORD)v213)
              *(_DWORD *)&v212[4 * v213 - 4] = 0;
          }
        }
        else
        {
          v34 = v212;
          *(_DWORD *)&v212[4 * *((_QWORD *)&v213 + 1)] = 0;
        }
        v222 = v224;
        __p = xmmword_209A57DD0;
        v225 = 1;
        v35 = *v27;
        if (*v27)
        {
          v36 = v27 + 1;
          do
          {
            LODWORD(v200) = v35;
            TBuffer<wchar_t>::insert((uint64_t)&v222, *((unint64_t *)&__p + 1), (int *)&v200, 1uLL);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)__p)
            {
              if (v225)
              {
                LODWORD(v200) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v222, *((unint64_t *)&__p + 1), (int *)&v200, 1uLL);
                v37 = (unsigned int *)v222;
                --*((_QWORD *)&__p + 1);
              }
              else
              {
                v37 = (unsigned int *)v222;
                if ((_QWORD)__p)
                  *((_DWORD *)v222 + __p - 1) = 0;
              }
            }
            else
            {
              v37 = (unsigned int *)v222;
              *((_DWORD *)v222 + *((_QWORD *)&__p + 1)) = 0;
            }
            HeadClonesCollated = TLexicon::findHeadClonesCollated(v26, v37, v34, v30, v33, &v203);
            v39 = *v36++;
            v35 = v39;
            if (v39)
              v40 = HeadClonesCollated;
            else
              v40 = 0;
          }
          while (v40);
          if (v225 && v222 != v224 && v222)
            MEMORY[0x20BD149A8]();
        }
        goto LABEL_57;
      }
      v19 = (uint64_t *)v18[19];
      v20 = (uint64_t *)v18[20];
      if (v19 != v20)
      {
        while (!*v19)
        {
          if (++v19 == v20)
          {
            v19 = v20;
            break;
          }
        }
      }
      v21 = *(_QWORD *)v196;
      v22 = *v19;
      v23 = *((_QWORD *)&v207 + 1);
      v24 = v207;
      if (*((_QWORD *)&v207 + 1) >= (unint64_t)v207)
      {
        if (v209)
        {
          LODWORD(v200) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v206, *((unint64_t *)&v207 + 1), (int *)&v200, 1uLL);
          v23 = --*((_QWORD *)&v207 + 1);
          v25 = (int *)v206;
          v24 = v207;
        }
        else
        {
          v25 = (int *)v206;
          if (!(_QWORD)v207)
            goto LABEL_53;
          *(_DWORD *)&v206[4 * v207 - 4] = 0;
        }
      }
      else
      {
        v25 = (int *)v206;
        *(_DWORD *)&v206[4 * *((_QWORD *)&v207 + 1)] = 0;
      }
      if (v23 >= v24)
      {
        if (v209)
        {
          LODWORD(v200) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v206, v23, (int *)&v200, 1uLL);
          v41 = (int *)v206;
          --*((_QWORD *)&v207 + 1);
          goto LABEL_56;
        }
        if (v24)
          v25[v24 - 1] = 0;
      }
      else
      {
        v25[v23] = 0;
      }
LABEL_53:
      v41 = v25;
LABEL_56:
      v42 = *((_QWORD *)v196 + 1);
      v43 = TParam::getActiveConfigHandle((TParam *)(v42 + 16464));
      v44 = *(int *)(v42 + 4 * TParam::getValidConfig((TParam *)(v42 + 16464), v43) + 16624);
      v45 = *((_QWORD *)v196 + 1);
      v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 16112));
      ValidConfig = TParam::getValidConfig((TParam *)(v45 + 16112), v46);
      fsaSearch(v21, v22, v25, v41, (__int32 *)&v222, &v222, 0, v44, *(int *)(v45 + 4 * ValidConfig + 16272), &v203);
LABEL_57:
      __p = 0uLL;
      v222 = 0;
      v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&__p + 8, 1uLL);
      *v48 = v189;
      v50 = v48 + 1;
      v51 = (char *)__p;
      v52 = (char *)v222;
      v53 = (char *)v48;
      if ((void *)__p != v222)
      {
        do
        {
          v54 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *((_QWORD *)v53 - 1) = v54;
          v53 -= 8;
        }
        while (v51 != v52);
        v51 = (char *)v222;
      }
      v222 = v53;
      *(_QWORD *)&__p = v48 + 1;
      *((_QWORD *)&__p + 1) = &v48[v49];
      if (v51)
        operator delete(v51);
      *(_QWORD *)&__p = v50;
      v55 = v204;
      if (v204 != v203)
      {
        v56 = 0;
        v55 = (char *)v203;
        do
        {
          v193 = v56;
          v57 = &v55[32 * v56];
          v59 = *(TWord **)v57;
          v58 = *((_QWORD *)v57 + 1);
          v60 = *((_QWORD *)v196 + 1);
          v61 = TParam::getActiveConfigHandle((TParam *)(v60 + 5376));
          if (*(_BYTE *)(v60 + TParam::getValidConfig((TParam *)(v60 + 5376), v61) + 5528))
            *((_QWORD *)v203 + 4 * v193 + 2) &= 0xFFFFFFFFFFFFFFBCLL;
          v62 = *TWord::getOptionalTagBits(v59);
          v195 = v58 + v188;
          if ((v62 & 0x80) != 0)
          {
            if (!v188 || *((_QWORD *)&v218 + 1) == v195)
              goto LABEL_205;
          }
          else
          {
            if (!TDecompounder::isValidWord(v196, v187, (__int32 **)v59, v188 == 0, *((_QWORD *)&v218 + 1) == v58 + v188))goto LABEL_205;
            v63 = *((_QWORD *)v196 + 1);
            v64 = TParam::getActiveConfigHandle((TParam *)(v63 + 5872));
            if (*(_BYTE *)(v63 + TParam::getValidConfig((TParam *)(v63 + 5872), v64) + 6024))
              v65 = v216[0] == -1;
            else
              v65 = 1;
            if (v65)
            {
              if (!*((_QWORD *)v210 + v195))
              {
                v66 = TFsa::newState((TAllocator *)v194, 0);
                *((_QWORD *)v210 + v195) = v66;
              }
              v67 = operator new();
              TWord::getWordSpec(v59);
              if (v68 == -1)
                v69 = 4;
              else
                v69 = 1;
              v70 = (char *)v203 + 32 * v193;
              *(_DWORD *)v67 = v69;
              *(_QWORD *)(v67 + 8) = v59;
              *(_OWORD *)(v67 + 16) = *((_OWORD *)v70 + 1);
              TFsa::newTrans((TAllocator *)v194, v189, *((_QWORD *)v210 + v195), v67);
              goto LABEL_205;
            }
          }
          if (TWord::getWordSpec(v59) != -1 && (void *)__p != v222)
          {
            v71 = 0;
            v72 = (uint64_t)(__p - (_QWORD)v222) >> 3;
            if (v72 <= 1)
              v72 = 1;
            v190 = v72;
            while (1)
            {
              v73 = *((_QWORD *)v222 + v71);
              v201 = 0;
              v202 = 0;
              v200 = 0;
              v191 = v73;
              v192 = v71;
              v74 = *(_QWORD **)(v73 + 16);
              if (!v74)
                goto LABEL_199;
              do
              {
                if ((v62 & 0x80) != 0 && (*(_BYTE *)TWord::getOptionalTagBits(*(TWord **)(*v74 + 8)) & 0x80) != 0)
                {
                  v102 = v201;
                  if (v201 >= v202)
                  {
                    v109 = (v201 - (_BYTE *)v200) >> 3;
                    if ((unint64_t)(v109 + 1) >> 61)
                      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                    v110 = (v202 - (_BYTE *)v200) >> 2;
                    if (v110 <= v109 + 1)
                      v110 = v109 + 1;
                    if ((unint64_t)(v202 - (_BYTE *)v200) >= 0x7FFFFFFFFFFFFFF8)
                      v111 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v111 = v110;
                    if (v111)
                      v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v202, v111);
                    else
                      v112 = 0;
                    v124 = &v112[8 * v109];
                    *(_QWORD *)v124 = v74;
                    v103 = v124 + 8;
                    v126 = (char *)v200;
                    v125 = v201;
                    if (v201 != v200)
                    {
                      do
                      {
                        v127 = *((_QWORD *)v125 - 1);
                        v125 -= 8;
                        *((_QWORD *)v124 - 1) = v127;
                        v124 -= 8;
                      }
                      while (v125 != v126);
                      v125 = (char *)v200;
                    }
                    v200 = v124;
                    v201 = v103;
                    v202 = &v112[8 * v111];
                    if (v125)
                      operator delete(v125);
                  }
                  else
                  {
                    *(_QWORD *)v201 = v74;
                    v103 = v102 + 8;
                  }
                  v201 = v103;
                }
                else
                {
                  v75 = *((_QWORD *)v196 + 1);
                  v76 = TParam::getActiveConfigHandle((TParam *)(v75 + 5872));
                  if (*(_BYTE *)(v75 + TParam::getValidConfig((TParam *)(v75 + 5872), v76) + 6024))
                    v77 = v216[0] == -1;
                  else
                    v77 = 1;
                  if (!v77)
                  {
                    v197 = 0;
                    v198 = 0;
                    v78 = v74;
                    v199 = 0;
                    do
                    {
                      WordSpec = TWord::getWordSpec(*(TWord **)(*v78 + 8));
                      v81 = WordSpec;
                      v82 = v80;
                      if (v198 >= (uint64_t *)v199)
                      {
                        v84 = ((char *)v198 - (char *)v197) >> 4;
                        v85 = v84 + 1;
                        if ((unint64_t)(v84 + 1) >> 60)
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        v86 = v199 - (char *)v197;
                        if ((v199 - (char *)v197) >> 3 > v85)
                          v85 = v86 >> 3;
                        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
                          v87 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v87 = v85;
                        if (v87)
                          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v199, v87);
                        else
                          v88 = 0;
                        v89 = (unint64_t *)&v88[16 * v84];
                        *v89 = v81;
                        v89[1] = v82;
                        v90 = (unint64_t *)v198;
                        v91 = v89;
                        if (v198 != (uint64_t *)v197)
                        {
                          do
                          {
                            *((_OWORD *)v91 - 1) = *((_OWORD *)v90 - 1);
                            v91 -= 2;
                            v90 -= 2;
                          }
                          while (v90 != v197);
                          v90 = v197;
                        }
                        v83 = (uint64_t *)(v89 + 2);
                        v197 = v91;
                        v199 = &v88[16 * v87];
                        if (v90)
                          operator delete(v90);
                      }
                      else
                      {
                        *v198 = WordSpec;
                        v198[1] = v80;
                        v83 = v198 + 2;
                      }
                      v198 = v83;
                      v78 = *(_QWORD **)(v78[3] + 16);
                    }
                    while (v78);
                    v92 = (unint64_t *)(v83 - 2);
                    if (v197 != (unint64_t *)v83 && v92 > v197)
                    {
                      v94 = v197 + 2;
                      do
                      {
                        v221 = *((_OWORD *)v94 - 1);
                        v95 = v221;
                        *((_OWORD *)v94 - 1) = *(_OWORD *)v92;
                        *(_OWORD *)v92 = v95;
                        v92 -= 2;
                        v96 = v94 >= v92;
                        v94 += 2;
                      }
                      while (!v96);
                    }
                    v97 = TWord::getWordSpec(v59);
                    v99 = v97;
                    v100 = v98;
                    if (v198 >= (uint64_t *)v199)
                    {
                      v104 = ((char *)v198 - (char *)v197) >> 4;
                      v105 = v104 + 1;
                      if ((unint64_t)(v104 + 1) >> 60)
                        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                      v106 = v199 - (char *)v197;
                      if ((v199 - (char *)v197) >> 3 > v105)
                        v105 = v106 >> 3;
                      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
                        v107 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v107 = v105;
                      if (v107)
                        v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v199, v107);
                      else
                        v108 = 0;
                      v113 = (unint64_t *)&v108[16 * v104];
                      *v113 = v99;
                      v113[1] = v100;
                      v114 = (unint64_t *)v198;
                      v115 = v113;
                      if (v198 != (uint64_t *)v197)
                      {
                        do
                        {
                          *((_OWORD *)v115 - 1) = *((_OWORD *)v114 - 1);
                          v115 -= 2;
                          v114 -= 2;
                        }
                        while (v114 != v197);
                        v114 = v197;
                      }
                      v101 = (char *)(v113 + 2);
                      v197 = v115;
                      v199 = &v108[16 * v107];
                      if (v114)
                        operator delete(v114);
                    }
                    else
                    {
                      *v198 = v97;
                      v198[1] = v98;
                      v101 = (char *)(v198 + 2);
                    }
                    v116 = (unint64_t)(v101 - (char *)v197) >> 4;
                    if (*((_QWORD *)&v218 + 1) == v195)
                      HaveCommonPron = SDWord_WordsHaveCommonPron(v197, v116, (uint64_t)v216, 1u);
                    else
                      HaveCommonPron = SDWord_WordsHavePrefixPron(v197, v116, (uint64_t)v216, 1u);
                    if (!HaveCommonPron)
                    {
                      v118 = v201;
                      if (v201 >= v202)
                      {
                        v120 = (v201 - (_BYTE *)v200) >> 3;
                        if ((unint64_t)(v120 + 1) >> 61)
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        v121 = (v202 - (_BYTE *)v200) >> 2;
                        if (v121 <= v120 + 1)
                          v121 = v120 + 1;
                        if ((unint64_t)(v202 - (_BYTE *)v200) >= 0x7FFFFFFFFFFFFFF8)
                          v122 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v122 = v121;
                        if (v122)
                          v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v202, v122);
                        else
                          v123 = 0;
                        v128 = &v123[8 * v120];
                        *(_QWORD *)v128 = v74;
                        v119 = v128 + 8;
                        v130 = (char *)v200;
                        v129 = v201;
                        if (v201 != v200)
                        {
                          do
                          {
                            v131 = *((_QWORD *)v129 - 1);
                            v129 -= 8;
                            *((_QWORD *)v128 - 1) = v131;
                            v128 -= 8;
                          }
                          while (v129 != v130);
                          v129 = (char *)v200;
                        }
                        v200 = v128;
                        v201 = v119;
                        v202 = &v123[8 * v122];
                        if (v129)
                          operator delete(v129);
                      }
                      else
                      {
                        *(_QWORD *)v201 = v74;
                        v119 = v118 + 8;
                      }
                      v201 = v119;
                    }
                    if (v197)
                      operator delete(v197);
                  }
                }
                v74 = (_QWORD *)v74[4];
              }
              while (v74);
              v132 = v200;
              v133 = v201;
              if (v200 == v201)
                goto LABEL_199;
              if (TState::getTransCount(v191, 0) != (v133 - v132) >> 3)
                break;
LABEL_202:
              if (v200)
              {
                v201 = (char *)v200;
                operator delete(v200);
              }
              v71 = v192 + 1;
              if (v192 + 1 == v190)
                goto LABEL_205;
            }
            v134 = TFsa::newState((TAllocator *)v194, 0);
            v135 = v134;
            v136 = __p;
            if ((unint64_t)__p >= *((_QWORD *)&__p + 1))
            {
              v138 = (uint64_t)(__p - (_QWORD)v222) >> 3;
              if ((unint64_t)(v138 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v139 = (uint64_t)(*((_QWORD *)&__p + 1) - (_QWORD)v222) >> 2;
              if (v139 <= v138 + 1)
                v139 = v138 + 1;
              if (*((_QWORD *)&__p + 1) - (_QWORD)v222 >= 0x7FFFFFFFFFFFFFF8uLL)
                v140 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v140 = v139;
              if (v140)
                v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&__p + 8, v140);
              else
                v141 = 0;
              v142 = &v141[8 * v138];
              *(_QWORD *)v142 = v135;
              v137 = v142 + 8;
              v143 = (char *)__p;
              v144 = (char *)v222;
              if ((void *)__p != v222)
              {
                do
                {
                  v145 = *((_QWORD *)v143 - 1);
                  v143 -= 8;
                  *((_QWORD *)v142 - 1) = v145;
                  v142 -= 8;
                }
                while (v143 != v144);
                v143 = (char *)v222;
              }
              v222 = v142;
              *(_QWORD *)&__p = v137;
              *((_QWORD *)&__p + 1) = &v141[8 * v140];
              if (v143)
                operator delete(v143);
            }
            else
            {
              *(_QWORD *)__p = v134;
              v137 = (_QWORD *)(v136 + 8);
            }
            *(_QWORD *)&__p = v137;
            v146 = (_QWORD **)v200;
            if (v201 != v200)
            {
              v147 = 0;
              do
              {
                TFsa::moveTrans((uint64_t)v194, v146[v147], v146[v147][3], *(_QWORD *)(__p - 8));
                ++v147;
                v146 = (_QWORD **)v200;
              }
              while (v147 < (v201 - (_BYTE *)v200) >> 3);
            }
            for (i = *(_QWORD *)(v191 + 24); i; i = *(_QWORD *)(i + 40))
            {
              v149 = operator new();
              v150 = (char *)v203 + 32 * v193;
              *(_DWORD *)v149 = 1;
              *(_QWORD *)(v149 + 8) = v59;
              *(_OWORD *)(v149 + 16) = *((_OWORD *)v150 + 1);
              TFsa::newTrans((TAllocator *)v194, *(_QWORD *)(__p - 8), *(_QWORD *)(i + 16), v149);
            }
LABEL_199:
            if (!*((_QWORD *)v210 + v195))
            {
              v151 = TFsa::newState((TAllocator *)v194, 0);
              *((_QWORD *)v210 + v195) = v151;
            }
            v152 = operator new();
            v153 = (char *)v203 + 32 * v193;
            *(_DWORD *)v152 = 1;
            *(_QWORD *)(v152 + 8) = v59;
            *(_OWORD *)(v152 + 16) = *((_OWORD *)v153 + 1);
            TFsa::newTrans((TAllocator *)v194, v189, *((_QWORD *)v210 + v195), v152);
            goto LABEL_202;
          }
LABEL_205:
          v56 = v193 + 1;
          v55 = (char *)v203;
        }
        while (v193 + 1 < (unint64_t)((v204 - (_BYTE *)v203) >> 5));
      }
      if (v222)
      {
        *(_QWORD *)&__p = v222;
        operator delete(v222);
        v55 = (char *)v203;
      }
      if (v55)
      {
        v204 = v55;
        operator delete(v55);
      }
      if (v209 && v206 != v208 && v206)
        MEMORY[0x20BD149A8]();
      v13 = *((_QWORD *)&v218 + 1);
LABEL_215:
      v14 = v188 + 1;
    }
    while (v188 + 1 < v13);
  }
  v154 = *(v211 - 1);
  if (v154)
    TFsa::addExtremity((uint64_t)v194, v154, 1u);
  std::vector<unsigned long>::vector(&v222, (uint64_t)(v194[7] - v194[6]) >> 3);
  v206 = 0;
  v207 = 0uLL;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v206, v194[5]);
  v156 = (_QWORD *)v194[6];
  v155 = (_QWORD *)v194[7];
  if (v156 != v155)
  {
    while (!*v156)
    {
      if (++v156 == v155)
        goto LABEL_251;
    }
  }
  if (v156 != v155)
  {
    do
    {
      v157 = (_QWORD *)*v156;
      if (!*(_QWORD *)(*v156 + 24) && v157[5] == -1)
      {
        v158 = v207;
        if ((unint64_t)v207 >= *((_QWORD *)&v207 + 1))
        {
          v160 = (uint64_t)(v207 - (_QWORD)v206) >> 3;
          if ((unint64_t)(v160 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v161 = (uint64_t)(*((_QWORD *)&v207 + 1) - (_QWORD)v206) >> 2;
          if (v161 <= v160 + 1)
            v161 = v160 + 1;
          if (*((_QWORD *)&v207 + 1) - (_QWORD)v206 >= 0x7FFFFFFFFFFFFFF8uLL)
            v162 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v162 = v161;
          if (v162)
            v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v207 + 8, v162);
          else
            v163 = 0;
          v164 = &v163[8 * v160];
          *(_QWORD *)v164 = v157;
          v159 = v164 + 8;
          v166 = v206;
          v165 = (char *)v207;
          if ((char *)v207 != v206)
          {
            do
            {
              v167 = *((_QWORD *)v165 - 1);
              v165 -= 8;
              *((_QWORD *)v164 - 1) = v167;
              v164 -= 8;
            }
            while (v165 != v166);
            v165 = v206;
          }
          v206 = v164;
          *(_QWORD *)&v207 = v159;
          *((_QWORD *)&v207 + 1) = &v163[8 * v162];
          if (v165)
            operator delete(v165);
        }
        else
        {
          *(_QWORD *)v207 = v157;
          v159 = (_QWORD *)(v158 + 8);
        }
        *(_QWORD *)&v207 = v159;
      }
      TransCount = TState::getTransCount((uint64_t)v157, 1u);
      *((_QWORD *)v222 + *v157) = TransCount;
      v169 = v156 + 1;
      while (v169 != v155)
      {
        if (*v169++)
        {
          v156 = v169 - 1;
          goto LABEL_250;
        }
      }
      v156 = v155;
LABEL_250:
      ;
    }
    while (v156 != (_QWORD *)v194[7]);
  }
LABEL_251:
  v171 = (char *)v207;
  if ((char *)v207 != v206)
  {
    v172 = 0;
    v171 = v206;
    do
    {
      v173 = *(_QWORD **)&v171[8 * v172];
      for (j = (_QWORD *)v173[2]; j; j = (_QWORD *)j[4])
      {
        v175 = (_QWORD *)j[3];
        v176 = v222;
        --*((_QWORD *)v222 + *v175);
        if (!v176[*v175])
        {
          v177 = v207;
          if ((unint64_t)v207 >= *((_QWORD *)&v207 + 1))
          {
            v179 = (uint64_t)(v207 - (_QWORD)v206) >> 3;
            if ((unint64_t)(v179 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v180 = (uint64_t)(*((_QWORD *)&v207 + 1) - (_QWORD)v206) >> 2;
            if (v180 <= v179 + 1)
              v180 = v179 + 1;
            if (*((_QWORD *)&v207 + 1) - (_QWORD)v206 >= 0x7FFFFFFFFFFFFFF8uLL)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v180;
            if (v181)
              v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v207 + 8, v181);
            else
              v182 = 0;
            v183 = &v182[8 * v179];
            *(_QWORD *)v183 = v175;
            v178 = v183 + 8;
            v185 = v206;
            v184 = (char *)v207;
            if ((char *)v207 != v206)
            {
              do
              {
                v186 = *((_QWORD *)v184 - 1);
                v184 -= 8;
                *((_QWORD *)v183 - 1) = v186;
                v183 -= 8;
              }
              while (v184 != v185);
              v184 = v206;
            }
            v206 = v183;
            *(_QWORD *)&v207 = v178;
            *((_QWORD *)&v207 + 1) = &v182[8 * v181];
            if (v184)
              operator delete(v184);
          }
          else
          {
            *(_QWORD *)v207 = v175;
            v178 = (_QWORD *)(v177 + 8);
          }
          *(_QWORD *)&v207 = v178;
        }
        if (*j)
          MEMORY[0x20BD149A8](*j, 0x1060C40A1FB9E56);
      }
      TFsa::deleteState(v194, v173);
      ++v172;
      v171 = v206;
    }
    while (v172 < (uint64_t)(v207 - (_QWORD)v206) >> 3);
  }
  if (v171)
  {
    *(_QWORD *)&v207 = v171;
    operator delete(v171);
  }
  if (v222)
  {
    *(_QWORD *)&__p = v222;
    operator delete(v222);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v215 && v212 != v214 && v212)
    MEMORY[0x20BD149A8]();
  if (v220 && v217 != v219)
  {
    if (v217)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2099BE9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p)
{
  void *v39;
  void *v40;
  unint64_t v41;

  if (__p)
    operator delete(__p);
  v39 = (void *)STACK[0xD88];
  if (STACK[0xD88])
  {
    STACK[0xD90] = (unint64_t)v39;
    operator delete(v39);
  }
  v40 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v40;
    operator delete(v40);
  }
  if (LOBYTE(STACK[0x938]))
  {
    v41 = STACK[0x520];
    if (STACK[0x520] != a11)
    {
      if (v41)
        MEMORY[0x20BD149A8](v41, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xD68]))
  {
    if (STACK[0x950] != a12 && STACK[0x950] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void fsaSearch(uint64_t a1, uint64_t a2, int *a3, int *a4, __int32 *a5, _DWORD *a6, int a7, size_t a8, size_t a9, void **a10)
{
  uint64_t v14;
  __int32 **HeadClone;
  const __int32 *v17;
  unsigned int *v18;
  __int32 **v19;
  __int32 **v20;
  __int32 **v21;
  unint64_t v22;
  __int32 ***v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int32 ***v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t *i;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  __int32 **v40;
  uint64_t v41;
  uint64_t Score;
  const __int32 *v45;
  __int128 v46;
  _BYTE v47[785];
  char v48;
  unsigned int *v49;
  __int128 v50;
  _BYTE v51[1024];
  char v52;
  int v53[3];

  v14 = a2;
  if (*(_QWORD *)(a2 + 40) != -1)
  {
    *a6 = 0;
    HeadClone = (__int32 **)TLexicon::findHeadClone(a1, a5);
    if (!HeadClone)
      HeadClone = (__int32 **)TLexicon::addTempWord(a1, a5, 0, 0, 0);
    v49 = (unsigned int *)v51;
    v50 = xmmword_209A57DD0;
    v52 = 1;
    v45 = (const __int32 *)v47;
    v46 = xmmword_209A57DD0;
    v48 = 1;
    TWord::getWrittenForm(HeadClone, (uint64_t)&v49);
    TBuffer<wchar_t>::resize((uint64_t)&v45, 0);
    TBuffer<wchar_t>::insert((uint64_t)&v45, 0, a3, a4 - a3);
    if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
    {
      if (v48)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v53, 1uLL);
        v17 = v45;
        --*((_QWORD *)&v46 + 1);
      }
      else
      {
        v17 = v45;
        if ((_QWORD)v46)
          v45[v46 - 1] = 0;
      }
    }
    else
    {
      v17 = v45;
      v45[*((_QWORD *)&v46 + 1)] = 0;
    }
    if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
    {
      if (v52)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v53, 1uLL);
        v18 = v49;
        --*((_QWORD *)&v50 + 1);
      }
      else
      {
        v18 = v49;
        if ((_QWORD)v50)
          v49[(_QWORD)v50 - 1] = 0;
      }
    }
    else
    {
      v18 = v49;
      v49[*((_QWORD *)&v50 + 1)] = 0;
    }
    Score = TLexicon::makeScore(a1, v17, v18, a8, a9);
    v20 = HeadClone;
    v21 = (__int32 **)*((_QWORD *)&v46 + 1);
    v22 = (unint64_t)a10[2];
    v23 = (__int32 ***)a10[1];
    if ((unint64_t)v23 >= v22)
    {
      v40 = v19;
      v41 = v14;
      v25 = ((char *)v23 - (_BYTE *)*a10) >> 5;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)*a10;
      if (v27 >> 4 > v26)
        v26 = v27 >> 4;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a10 + 2), v28);
      else
        v29 = 0;
      v30 = (__int32 ***)&v29[32 * v25];
      v31 = &v29[32 * v28];
      *v30 = v20;
      v30[1] = v21;
      v30[2] = (__int32 **)Score;
      v30[3] = v40;
      v24 = v30 + 4;
      v33 = (char *)*a10;
      v32 = (char *)a10[1];
      if (v32 == *a10)
      {
        v14 = v41;
      }
      else
      {
        v14 = v41;
        do
        {
          v34 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v30 - 1) = v34;
          v30 -= 4;
          v32 -= 32;
        }
        while (v32 != v33);
        v32 = (char *)*a10;
      }
      *a10 = v30;
      a10[1] = v24;
      a10[2] = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v23 = v20;
      v23[1] = v21;
      v24 = v23 + 4;
      v23[2] = (__int32 **)Score;
      v23[3] = v19;
    }
    a10[1] = v24;
    if (v48 && v45 != (const __int32 *)v47 && v45)
      MEMORY[0x20BD149A8]();
    if (v52 && v49 != (unsigned int *)v51 && v49)
      MEMORY[0x20BD149A8]();
  }
  for (i = *(uint64_t **)(v14 + 24); i; i = (uint64_t *)i[5])
  {
    v36 = *i;
    if (*i == 92)
      v37 = 1;
    else
      v37 = a7;
    if ((v37 & 1) == 0)
    {
      v38 = *a4;
      v39 = *(_QWORD *)(a1 + 272);
      if (!v39)
        goto LABEL_52;
      if ((unint64_t)v38 < 0x10000)
        v38 = *(_DWORD *)(v39 + 4 * v38);
      if ((unint64_t)(int)v36 < 0x10000)
        LODWORD(v39) = *(_DWORD *)(v39 + 4 * (int)v36);
      else
LABEL_52:
        v39 = *i;
      if (v38 != (_DWORD)v39)
        continue;
    }
    *a6 = v36;
    fsaSearch(a1, i[2], a3, &a4[v37 ^ 1], a5, a6 + 1);
  }
}

void sub_2099BEF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v20;

  if (LOBYTE(STACK[0x468]) && a19 != a14 && a19)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x888]))
  {
    v20 = STACK[0x470];
    if (STACK[0x470] != a15)
    {
      if (v20)
        MEMORY[0x20BD149A8](v20, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::addWords(TDecompounder *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t Segment;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  char *v14;
  uint64_t v15;
  uint64_t ActiveConfigHandle;
  char v17;
  uint64_t v18;
  int **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v25;
  int *v26;
  uint64_t OutEdge;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ValidConfig;
  unint64_t v41;
  _BYTE *v42;
  const TWord *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[3];
  int v62[10];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  _BYTE *v73;
  uint64_t v74;
  unsigned int *v75;
  __int128 v76;
  _BYTE v77[1024];
  char v78;

  Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    v9 = Segment;
    v10 = *(_DWORD *)(Segment + 24);
    v11 = v10 > 5;
    v12 = (1 << v10) & 0x2D;
    if (v11 || v12 == 0)
    {
      v75 = (unsigned int *)v77;
      v76 = xmmword_209A57DD0;
      v78 = 1;
      TBuffer<wchar_t>::assign((uint64_t)&v75, *(int **)Segment);
      v14 = *(char **)(v9 + 8);
      if (*(_DWORD *)(v9 + 24) == 1
        && (v15 = *((_QWORD *)this + 1),
            ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 13360)),
            *(_BYTE *)(v15 + TParam::getValidConfig((TParam *)(v15 + 13360), ActiveConfigHandle) + 13512))
        && *v14)
      {
        v17 = 0;
        do
        {
          v18 = TSegmenter::getSegment(a4, v14);
          v19 = (int **)v18;
          if (!v18)
            break;
          if (**(_DWORD **)v18 != 45)
            break;
          v20 = TSegmenter::getSegment(a4, *(char **)(v18 + 8));
          v21 = v20;
          if (!v20)
            break;
          if (*(_DWORD *)(v20 + 24) != 1)
            break;
          v22 = 0;
          v23 = *v19;
          while (v23[v22++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v23, v22 - 1);
          v25 = 0;
          v26 = *(int **)v21;
          while (v26[v25++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v26, v25 - 1);
          v14 = *(char **)(v21 + 8);
          v17 = 1;
        }
        while (*v14);
      }
      else
      {
        v17 = 0;
      }
      OutEdge = TVertex::getOutEdge((uint64_t)a2);
      if (!OutEdge)
        goto LABEL_30;
      v29 = 0;
LABEL_24:
      v29 |= (*(_BYTE *)(OutEdge + 64) & 0xC0) == 0;
      while (1)
      {
        OutEdge = *(_QWORD *)(OutEdge + 8);
        if (!OutEdge)
          break;
        if (!*(_BYTE *)(OutEdge + 32))
          goto LABEL_24;
      }
      if (v17 & 1 | ((v29 & 1) == 0)
        || (v30 = *((_QWORD *)this + 1),
            v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 13112)),
            *(_BYTE *)(v30 + TParam::getValidConfig((TParam *)(v30 + 13112), v31) + 13264)))
      {
LABEL_30:
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v32 = *(_QWORD **)this;
        if (*((_QWORD *)&v76 + 1) >= (unint64_t)v76)
        {
          if (v78)
          {
            v62[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v62, 1uLL);
            v33 = v75;
            --*((_QWORD *)&v76 + 1);
          }
          else
          {
            v33 = v75;
            if ((_QWORD)v76)
              v75[(_QWORD)v76 - 1] = 0;
          }
        }
        else
        {
          v33 = v75;
          v75[*((_QWORD *)&v76 + 1)] = 0;
        }
        v34 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 1) + 10744));
        v35 = *((_QWORD *)this + 1);
        v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 16464));
        v37 = *(int *)(v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 16464), v36) + 16624);
        v38 = *((_QWORD *)this + 1);
        v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 16112));
        ValidConfig = TParam::getValidConfig((TParam *)(v38 + 16112), v39);
        TLexicon::findHeadClonesCollated(v32, v33, v34, v37, *(int *)(v38 + 4 * ValidConfig + 16272), &v72);
        if (v72 == v73)
          goto LABEL_44;
        v41 = (v73 - (_BYTE *)v72) >> 5;
        if (v41 <= 1)
          v41 = 1;
        v42 = (char *)v72 + 16;
        while ((*v42 & 0x35) != 0)
        {
          v42 += 32;
          if (!--v41)
            goto LABEL_44;
        }
        v43 = (const TWord *)*((_QWORD *)v42 - 2);
        if (!v43)
        {
LABEL_44:
          v44 = *(_QWORD *)this;
          if (*((_QWORD *)&v76 + 1) >= (unint64_t)v76)
          {
            if (v78)
            {
              v62[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v62, 1uLL);
              v45 = (int *)v75;
              --*((_QWORD *)&v76 + 1);
            }
            else
            {
              v45 = (int *)v75;
              if ((_QWORD)v76)
                v75[(_QWORD)v76 - 1] = 0;
            }
          }
          else
          {
            v45 = (int *)v75;
            v75[*((_QWORD *)&v76 + 1)] = 0;
          }
          v43 = (const TWord *)TLexicon::addTempWord(v44, v45, 0, 0, 0);
        }
        TFsa::TFsa((TFsa *)v62);
        TDecompounder::decompound(this, v43, (TFsa *)v62, v46, v47);
        if (v63)
        {
          v60 = 0;
          std::vector<TVertex *>::vector(__p, (v65 - v64) >> 3, &v60);
          v48 = v68;
          if (v68 != v69)
          {
            while (!*v48)
            {
              if (++v48 == v69)
              {
                v48 = v69;
                break;
              }
            }
          }
          *((_QWORD *)__p[0] + *(_QWORD *)*v48) = a2;
          v49 = TGraph::addVertex(a3, v14);
          v50 = v70;
          if (v70 != v71)
          {
            while (!*v50)
            {
              if (++v50 == v71)
              {
                v50 = v71;
                break;
              }
            }
          }
          *((_QWORD *)__p[0] + *(_QWORD *)*v50) = v49;
          v52 = v64;
          v51 = v65;
          if (v65 != v64)
          {
            v53 = 0;
            do
            {
              if (*(_QWORD *)(v52 + 8 * v53) && !*((_QWORD *)__p[0] + v53))
              {
                v54 = TGraph::addVertex(a3, 0);
                *((_QWORD *)__p[0] + v53) = v54;
                v52 = v64;
                v51 = v65;
              }
              ++v53;
            }
            while (v53 < (v51 - v52) >> 3);
          }
          v56 = v66;
          v55 = v67;
          if (v67 != v66)
          {
            v57 = 0;
            do
            {
              v58 = *(_QWORD *)(v56 + 8 * v57);
              if (v58)
              {
                v59 = *(_QWORD *)v58;
                TGraph::addEdge(a3, *((_QWORD *)__p[0] + **(_QWORD **)(v58 + 24)), *((_QWORD **)__p[0] + **(_QWORD **)(v58 + 16)), *(_QWORD *)v58);
                MEMORY[0x20BD149A8](v59, 0x1060C40A1FB9E56);
                v56 = v66;
                v55 = v67;
              }
              ++v57;
            }
            while (v57 < (v55 - v56) >> 3);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        TFsa::~TFsa((TFsa *)v62);
        if (v72)
        {
          v73 = v72;
          operator delete(v72);
        }
      }
      if (v78 && v75 != (unsigned int *)v77)
      {
        if (v75)
          MEMORY[0x20BD149A8]();
      }
    }
  }
}

void sub_2099BF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p)
    operator delete(__p);
  TFsa::~TFsa((TFsa *)&a15);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (LOBYTE(STACK[0x540]))
  {
    if (a46 != a10 && a46 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(uint64_t result, const __int32 **a2, uint64_t a3, uint64_t a4, char a5)
{
  const __int32 **v8;
  const __int32 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const __int32 **v15;
  const __int32 *v16;
  const __int32 **v17;
  char v18;
  BOOL v19;
  const __int32 *v20;

  v8 = (const __int32 **)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = wcscmp(*(a2 - 1), *v9);
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((wcscmp(*(v9 - 1), *v9) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v9, a2);
            v9 = (const __int32 **)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(v9, a2, a2, a3);
        return result;
    }
  }
}

const __int32 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  const __int32 **v3;
  const __int32 **v4;
  uint64_t v5;
  const __int32 **v6;
  const __int32 *v7;
  const __int32 *v8;
  const __int32 *v9;
  uint64_t v10;
  const __int32 **v11;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 1;
    if (result + 1 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v4;
        result = (const __int32 **)wcscmp(v7, v8);
        if ((result & 0x80000000) != 0)
        {
          v9 = *v6;
          v10 = v5;
          while (1)
          {
            *(const __int32 **)((char *)v3 + v10 + 8) = *(const __int32 **)((char *)v3 + v10);
            if (!v10)
              break;
            result = (const __int32 **)wcscmp(v9, *(const __int32 **)((char *)v3 + v10 - 8));
            v10 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v11 = (const __int32 **)((char *)v3 + v10 + 8);
              goto LABEL_10;
            }
          }
          v11 = v3;
LABEL_10:
          *v11 = v9;
        }
        v4 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

const __int32 **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  const __int32 **v3;
  const __int32 *v4;
  const __int32 *v5;
  const __int32 *v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;

  if (result != a2)
  {
    v3 = result;
    while (v3 + 1 != a2)
    {
      v5 = *v3;
      v4 = v3[1];
      ++v3;
      result = (const __int32 **)wcscmp(v4, v5);
      if ((result & 0x80000000) != 0)
      {
        v6 = *v3;
        v7 = v3;
        do
        {
          v8 = v7;
          v9 = *--v7;
          *v8 = v9;
          result = (const __int32 **)wcscmp(v6, *(v8 - 2));
        }
        while ((result & 0x80000000) != 0);
        *v7 = v6;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3)
{
  int v6;
  int v7;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;
  const __int32 *v12;

  v6 = wcscmp(*a2, *a1);
  v7 = wcscmp(*a3, *a2);
  if (v6 < 0)
  {
    v9 = *a1;
    if (v7 < 0)
    {
      *a1 = *a3;
      *a3 = v9;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      if (wcscmp(*a3, v9) < 0)
      {
        v10 = *a2;
        *a2 = *a3;
        *a3 = v10;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0)
      return 0;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (wcscmp(*a2, *a1) < 0)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
  }
  return 1;
}

const __int32 **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  const __int32 **v2;
  const __int32 *v4;
  const __int32 **v5;
  const __int32 **v6;
  const __int32 *v7;
  const __int32 *v8;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;

  v2 = a2;
  v4 = *a1;
  if (wcscmp(*a1, *(a2 - 1)) < 0)
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    v5 = a1 + 1;
    do
    {
      v6 = v5;
      if (v5 >= v2)
        break;
      ++v5;
    }
    while ((wcscmp(v4, *v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
      v8 = *--v2;
    while (wcscmp(v4, v8) < 0);
  }
  while (v6 < v2)
  {
    v9 = *v6;
    *v6 = *v2;
    *v2 = v9;
    do
    {
      v10 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v10) & 0x80000000) == 0);
    do
      v11 = *--v2;
    while (wcscmp(v4, v11) < 0);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v4;
  return v6;
}

const __int32 **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4;
  const __int32 *v5;
  int v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 **v11;
  const __int32 **v12;
  const __int32 *v13;
  const __int32 *v14;
  const __int32 *v15;

  v4 = 0;
  v5 = *a1;
  do
    v6 = wcscmp(a1[++v4], v5);
  while (v6 < 0);
  v7 = &a1[v4];
  v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *--a2;
    }
    while ((wcscmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
      v9 = *--a2;
    while ((wcscmp(v9, v5) & 0x80000000) == 0);
  }
  if (v7 < a2)
  {
    v11 = &a1[v4];
    v12 = a2;
    do
    {
      v13 = *v11;
      *v11 = *v12;
      *v12 = v13;
      do
      {
        v14 = v11[1];
        ++v11;
      }
      while (wcscmp(v14, v5) < 0);
      do
        v15 = *--v12;
      while ((wcscmp(v15, v5) & 0x80000000) == 0);
    }
    while (v11 < v12);
    v8 = v11 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v5;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const __int32 *v6;
  const __int32 **v7;
  const __int32 **v8;
  uint64_t v9;
  int v10;
  const __int32 *v11;
  uint64_t v12;
  const __int32 **v13;
  const __int32 **v14;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (wcscmp(*(a2 - 1), *a1) < 0)
      {
        v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (wcscmp(*v8, *v7) < 0)
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        v13 = (const __int32 **)((char *)a1 + v12);
        *(const __int32 **)((char *)a1 + v12 + 24) = *(const __int32 **)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if ((wcscmp(v11, v13[1]) & 0x80000000) == 0)
        {
          v14 = (const __int32 **)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4)
{
  uint64_t result;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3);
  result = wcscmp(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = wcscmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = wcscmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4, const __int32 **a5)
{
  uint64_t result;
  const __int32 *v11;
  const __int32 *v12;
  const __int32 *v13;
  const __int32 *v14;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3, a4);
  result = wcscmp(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    result = wcscmp(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = wcscmp(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        result = wcscmp(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

const __int32 **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const __int32 **v12;
  const __int32 **v13;
  const __int32 **v14;
  const __int32 *v15;
  uint64_t v16;
  const __int32 **v17;
  const __int32 *v18;
  const __int32 **v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (wcscmp(*v14, *a1) < 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, const __int32 **a4)
{
  unint64_t v4;
  const __int32 **v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  const __int32 **v11;
  uint64_t v12;
  const __int32 *v13;
  const __int32 **v14;
  uint64_t v15;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v9 = ((uint64_t)a4 - result) >> 2;
      v10 = v9 + 1;
      v11 = (const __int32 **)(result + 8 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
      {
        ++v11;
        v10 = v12;
      }
      result = wcscmp(*v11, *v5);
      if ((result & 0x80000000) == 0)
      {
        v13 = *v5;
        do
        {
          v14 = v11;
          *v5 = *v11;
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = (const __int32 **)(v6 + 8 * v15);
          if (2 * v10 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
          {
            ++v11;
            v15 = 2 * v10 + 2;
          }
          result = wcscmp(*v11, v13);
          v5 = v14;
          v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *v14 = v13;
      }
    }
  }
  return result;
}

const __int32 **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __int32 **v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[v5 + 1];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3 && wcscmp(*v8, a1[v5 + 2]) < 0)
    {
      ++v8;
      v9 = v10;
    }
    *a1 = *v8;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;
  const __int32 **v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (const __int32 **)(result + 8 * (v4 >> 1));
    v8 = (const __int32 **)(a2 - 8);
    result = wcscmp(*v7, *(const __int32 **)(a2 - 8));
    if ((result & 0x80000000) != 0)
    {
      v9 = *v8;
      do
      {
        v10 = v7;
        *v8 = *v7;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (const __int32 **)(v5 + 8 * v6);
        result = wcscmp(*v7, v9);
        v8 = v10;
      }
      while ((result & 0x80000000) != 0);
      *v10 = v9;
    }
  }
  return result;
}

_QWORD *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = TFsaBuilder::TStateCompare::operator()(v5, v3[4], *a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || TFsaBuilder::TStateCompare::operator()(v5, *a2, v6[4]))
    return v2;
  return v6;
}

uint64_t TFsaBuilder::TStateCompare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a3 + 40);
  if ((v3 != -1) == (v4 != -1))
    return std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(*(unint64_t **)(a2 + 24), 1u, 0, 1, *(unint64_t **)(a3 + 24), 1u, 0, 1);
  return v4 != -1 && v3 == -1;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(unint64_t *a1, unsigned int a2, unint64_t *a3, int a4, unint64_t *a5, unsigned int a6, unint64_t *a7, int a8)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (a6 == a8 && a5 == a7)
    return 0;
  while (a2 != a4 || a1 != a3)
  {
    v9 = *a1;
    v10 = *a5;
    v11 = *a1 >= *a5;
    if (*a1 == *a5)
    {
      v9 = a1[2];
      v10 = a5[2];
      v11 = v9 >= v10;
    }
    if (!v11)
      break;
    if (v10 >= v9)
    {
      a1 = (unint64_t *)a1[a2 + 4];
      a5 = (unint64_t *)a5[a6 + 4];
      if (a6 != a8 || a5 != a7)
        continue;
    }
    return 0;
  }
  return 1;
}

uint64_t *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!TFsaBuilder::TStateCompare::operator()(v7, *a3, v4[4]))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!TFsaBuilder::TStateCompare::operator()(v7, v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *std::vector<TState *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2099C0688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<TVertex *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2099C0708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL arabicToRoman(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;

  v2 = a1 - 3000;
  if (a1 - 3000 >= 0xFFFFFFFFFFFFF449)
  {
    v4 = a1;
    v5 = 0;
    v6 = 1000;
    do
    {
      if (v6 <= v4)
      {
        v7 = 0;
        v8 = (int *)*(&arabicToRoman(unsigned long,TBuffer<wchar_t> &)::pppszRomanTable + 9 * (3 - v5) + v4 / v6 - 1);
        while (v8[v7++])
          ;
        TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), v8, v7 - 1);
      }
      v4 %= v6;
      ++v5;
      v6 /= 0xAuLL;
    }
    while (v5 != 4);
  }
  return v2 < 0xFFFFFFFFFFFFF449;
}

BOOL romanToArabic(__int32 *a1, _QWORD *a2)
{
  __int32 v3;
  __int32 *v4;
  BOOL v5;
  __int32 *v6;
  unint64_t v7;
  __int32 v8;
  __int32 *v9;
  unint64_t v10;
  uint64_t v11;

  *a2 = 0;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1;
    v5 = 0;
    while (1)
    {
      v6 = wcschr(dword_209A7D418, v3);
      if (!v6)
        return 1;
      if ((unint64_t)((char *)v6 - (char *)dword_209A7D418) <= 0x18)
        v7 = v6 - dword_209A7D418;
      else
        v7 = v6 - dword_209A7D418 - 7;
      v8 = v4[1];
      if (!v8)
        goto LABEL_19;
      v9 = wcschr(dword_209A7D418, v8);
      if (!v9)
        return 1;
      v10 = (unint64_t)((char *)v9 - (char *)dword_209A7D418) <= 0x18
          ? v9 - dword_209A7D418
          : v9 - dword_209A7D418 - 7;
      if (v5 && v10 > v7)
        return 1;
      v5 = v7 == v10;
      if ((v7 & 1) != 0)
      {
        if (v10 >= v7)
          return 1;
      }
      else if (v10 > v7 + 2)
      {
        return 1;
      }
      if (v10 > v7)
      {
        v11 = romanToArabic(wchar_t const*,unsigned long &)::pNums[v10]
            - romanToArabic(wchar_t const*,unsigned long &)::pNums[v7]
            + *a2;
        *a2 = v11;
        v4 += 2;
      }
      else
      {
LABEL_19:
        v11 = *a2 + romanToArabic(wchar_t const*,unsigned long &)::pNums[v7];
        *a2 = v11;
        ++v4;
      }
      v3 = *v4;
      if (!*v4)
        return v11 == 0;
    }
  }
  else
  {
    v11 = 0;
    return v11 == 0;
  }
}

char *getNextToken(char *a1, uint64_t a2, char *a3)
{
  char v6;
  char *v7;
  int v8;
  char *v9;
  int v11;

  TBuffer<char>::resize(a2, 0);
  if (!a1)
    return 0;
  v6 = *a1;
  if (!*a1)
    return 0;
  v7 = a1;
  while (strchr(a3, v6))
  {
    v8 = *++a1;
    v6 = v8;
    ++v7;
    if (!v8)
      return 0;
  }
  v9 = a1;
  do
  {
    if (strchr(a3, v6))
      break;
    v11 = *++v9;
    v6 = v11;
  }
  while (v11);
  TBuffer<char>::resize(a2, 0);
  TBuffer<char>::insert(a2, 0, a1, v9 - v7);
  return v9;
}

int *getNextToken(int *a1, uint64_t a2, __int32 *a3)
{
  __int32 v6;
  int *v7;
  __int32 v8;
  __int32 v9;
  int *v10;
  __int32 v11;

  TBuffer<wchar_t>::resize(a2, 0);
  if (!a1)
    return 0;
  v6 = *a1;
  if (!*a1)
    return 0;
  v7 = a1;
  while (wcschr(a3, v6))
  {
    v8 = a1[1];
    ++a1;
    v6 = v8;
    ++v7;
    if (!v8)
      return 0;
  }
  v9 = *a1;
  if (!*a1)
    return 0;
  v10 = a1;
  do
  {
    if (wcschr(a3, v9))
      break;
    v11 = v10[1];
    ++v10;
    v9 = v11;
  }
  while (v11);
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, a1, v10 - v7);
  return v10;
}

uint64_t slashEscape(uint64_t result, uint64_t a2)
{
  int *i;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;

  for (i = (int *)result; ; ++i)
  {
    v4 = *i;
    if (*i > 12)
    {
      switch(v4)
      {
        case 13:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_209A7D46C;
          goto LABEL_13;
        case 34:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_209A7D484;
          goto LABEL_13;
        case 92:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_209A7D478;
LABEL_13:
          v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_209A7D454;
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_209A7D460;
      goto LABEL_13;
    }
    if (!v4)
      break;
LABEL_16:
    v9 = *i;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    v8 = 1;
LABEL_14:
    result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  return result;
}

{
  _BYTE *i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;

  for (i = (_BYTE *)result; ; ++i)
  {
    v4 = *i;
    if (v4 > 0xC)
    {
      switch(v4)
      {
        case 0xDu:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\r";
          goto LABEL_13;
        case 0x22u:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\\"";
          goto LABEL_13;
        case 0x5Cu:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\\\";
LABEL_13:
          v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "\\t";
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "\\n";
      goto LABEL_13;
    }
    if (!*i)
      break;
LABEL_16:
    v9 = v4;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    v8 = 1;
LABEL_14:
    result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  return result;
}

uint64_t tildeEscape(uint64_t result, uint64_t a2)
{
  int *i;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;

  for (i = (int *)result; ; ++i)
  {
    v4 = *i;
    if (*i <= 31)
      break;
    if (v4 != 32)
    {
      if (v4 == 95)
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = a2;
        v7 = (int *)&unk_209A7D4C0;
        goto LABEL_16;
      }
      if (v4 == 126)
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = a2;
        v7 = (int *)&unk_209A7D4B4;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    v5 = *(_QWORD *)(a2 + 16);
    v6 = a2;
    v7 = (int *)&unk_209A7D4CC;
LABEL_19:
    v8 = 1;
LABEL_20:
    result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  if (v4 > 9)
  {
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_209A7D49C;
      goto LABEL_16;
    }
    if (v4 == 13)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_209A7D4A8;
LABEL_16:
      v8 = 2;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v4 == 9)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = a2;
    v7 = (int *)&unk_209A7D490;
    goto LABEL_16;
  }
  if (v4)
  {
LABEL_18:
    v9 = *i;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    goto LABEL_19;
  }
  return result;
}

uint64_t formatString(__int32 *a1, _QWORD *a2, uint64_t a3)
{
  int *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v13;

  v5 = a1;
  v6 = wcschr(a1, 37);
  if (v6)
  {
    v7 = v6;
    do
    {
      v8 = v7 + 1;
      v9 = (v7[1] - 49);
      if (v9 > 8 || v9 >= (uint64_t)(a2[1] - *a2) >> 3)
      {
        v8 = v7;
      }
      else
      {
        TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), v5, v7 - v5);
        v10 = 0;
        v11 = *(int **)(*a2 + 8 * v9);
        while (v11[v10++])
          ;
        TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), v11, v10 - 1);
        v5 = v7 + 2;
      }
      v7 = wcschr(v8 + 1, 37);
    }
    while (v7);
  }
  v13 = 0;
  while (v5[v13++])
    ;
  return TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), v5, v13 - 1);
}

void MrecInitModule_recogctl_recogctl(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugShowPerFrameRecognitionTimes)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPerFrameRecognitionTimes", (const char *)&unk_209A7D4F0, (const char *)&unk_209A7D4F0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowPerFrameRecognitionTimes = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPerFrameRecognitionTimes);
  }
  if (!gParDebugShowRecogWorkTypeStateTransitions)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowRecogWorkTypeStateTransitions", (const char *)&unk_209A7D4F0, (const char *)&unk_209A7D4F0, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowRecogWorkTypeStateTransitions = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowRecogWorkTypeStateTransitions);
  }
  if (!gParDebugShowParamSetParametersOnLoad)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowParamSetParametersOnLoad", (const char *)&unk_209A7D4F0, (const char *)&unk_209A7D4F0, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowParamSetParametersOnLoad = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowParamSetParametersOnLoad);
  }
  if (!gParDebugResultProcessing)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugResultProcessing", (const char *)&unk_209A7D4F0, (const char *)&unk_209A7D4F0, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugResultProcessing = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugResultProcessing);
  }
}

uint64_t RecogSpecLayer::RecogSpecLayer(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6, int a7, int a8, double a9, char a10, unsigned int a11, int a12, unsigned int a13, unsigned int a14, unsigned int a15, int a16, unsigned int a17, uint64_t a18, char a19, char a20,char a21,unsigned int a22,unsigned int a23,unsigned int a24,unsigned int a25,int a26,int a27)
{
  uint64_t v27;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  __int128 v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;

  v27 = a2;
  v29 = a16;
  if (a4)
  {
    v59 = 0uLL;
    v61 = 0;
    v60 = 0;
    if (a7 + a6 + *(_DWORD *)(a2 + 364) >= 5000)
      a6 = 5000;
    else
      a6 += a7 + *(_DWORD *)(a2 + 364);
    v58 = -1;
    a7 = 0;
  }
  else
  {
    *((_QWORD *)&v59 + 1) = __PAIR64__(a14, a13);
    DWORD1(v59) = a12;
    v61 = __PAIR64__(a11, a15);
    if (a3)
    {
      v60 = *(_BYTE *)(a2 + 204) != 0;
      LODWORD(v59) = *(_DWORD *)(a2 + 84);
    }
    else
    {
      LODWORD(v59) = 0;
      v60 = 0;
    }
    v58 = *(_DWORD *)(a2 + 304);
  }
  if (a4)
  {
    a9 = *(double *)(a2 + 352);
    v30 = *(_DWORD *)(a2 + 360);
    v31 = v30 == -1 || a16 == -1;
    v32 = v30 + a16;
    if (v31)
      v29 = -1;
    else
      v29 = v32;
  }
  v57 = *(_DWORD *)(a2 + 164);
  v56 = *(_DWORD *)(a2 + 296);
  v55 = *(_DWORD *)(a2 + 292);
  v54 = *(_DWORD *)(a2 + 288);
  v53 = *(_DWORD *)(a2 + 300);
  v52 = *(_DWORD *)(a2 + 284);
  v51 = *(_DWORD *)(a2 + 344);
  v48 = *(_DWORD *)(a2 + 60);
  v49 = *(_DWORD *)(a2 + 64);
  v50 = *(_DWORD *)(a2 + 56);
  v33 = *(_DWORD *)(a2 + 68);
  v34 = *(unsigned __int8 *)(a2 + 448);
  v62 = a1;
  if (a3)
    LOBYTE(a3) = *(_BYTE *)(v27 + 40) != 0;
  *((_QWORD *)&v47 + 1) = __PAIR64__(a25, a24);
  *(_QWORD *)&v47 = __PAIR64__(a23, a22);
  HIDWORD(v46) = *(_DWORD *)(v27 + 48);
  HIDWORD(v45) = *(_DWORD *)(v27 + 168);
  LODWORD(v46) = *(_DWORD *)(v27 + 160);
  LOBYTE(v45) = *(_BYTE *)(v27 + 196);
  *((_QWORD *)&v44 + 1) = a18;
  *(_QWORD *)&v44 = __PAIR64__(a17, v29);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v49, v51);
  *(_QWORD *)&v43 = __PAIR64__(v52, v53);
  *((_QWORD *)&v40 + 1) = __PAIR64__(v54, v55);
  *(_QWORD *)&v40 = __PAIR64__(v56, v57);
  *((_QWORD *)&v39 + 1) = __PAIR64__(v61, HIDWORD(v59));
  *(_QWORD *)&v39 = *(_QWORD *)((char *)&v59 + 4);
  RecognizerOptions::RecognizerOptions(a1, a5, a6, a7, a8, a10, v60, HIDWORD(v61), a9, v39, v59, v58, v40, v43, __SPAIR64__(v48, v50), v33, v34 != 0, v44, *(_OWORD *)(v27 + 228),
    *(_BYTE *)(v27 + 52) != 0,
    *(_BYTE *)(v27 + 53) != 0,
    a19,
    a20,
    a3,
    *(_BYTE *)(v27 + 260),
    __SPAIR64__(*(_DWORD *)(v27 + 380), *(_DWORD *)(v27 + 324)),
    *(_DWORD *)(v27 + 372),
    *(_BYTE *)(v27 + 376),
    *(_BYTE *)(v27 + 384),
    *(_DWORD *)(v27 + 72),
    BYTE1(*(_DWORD *)(v27 + 72)),
    BYTE2(*(_DWORD *)(v27 + 72)),
    HIBYTE(*(_DWORD *)(v27 + 72)),
    *(_DWORD *)(v27 + 192),
    v45,
    v46,
    *(_DWORD *)(v27 + 44),
    a21,
    v47,
    a26,
    a27);
  v35.n128_u64[0] = *(_QWORD *)(v27 + 488);
  v42 = *(_DWORD *)(v27 + 160);
  LOBYTE(v41) = *(_BYTE *)(v27 + 196);
  FstCoreOptions::FstCoreOptions(v62 + 216, (int)*(double *)(v27 + 416), (int)*(double *)(v27 + 424), *(_BYTE *)(v27 + 444), *(_DWORD *)(v27 + 432), *(_DWORD *)(v27 + 436), *(_DWORD *)(v27 + 440), -(int)v35.n128_f64[0], v35, *(_DWORD *)(v27 + 476), *(_QWORD *)(v27 + 496), BYTE4(*(_QWORD *)(v27 + 496)), *(_DWORD *)(v27 + 48), *(_DWORD *)(v27 + 44), *(_DWORD *)(v27 + 192), v41, *(_DWORD *)(v27 + 168), v42, SBYTE1(v42),
    SBYTE2(v42),
    SHIBYTE(v42));
  *(_QWORD *)(v62 + 296) = v27;
  if (!*(_BYTE *)(v62 + 17)
    || !*(_BYTE *)(v62 + 140)
    || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 429, (uint64_t)"recogctl/recogctl", 12, (uint64_t)"%.500s %.500s %.500s %.500s", v36, v37, (char)"SearchActiveNodePreserveMultipleHistories"), (v27 = *(_QWORD *)(v62 + 296)) != 0))
  {
    ++*(_DWORD *)(v27 + 36);
  }
  return v62;
}

void sub_2099C14B4(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

uint64_t RecogSpecLayer::RecogSpecLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = RecognizerOptions::RecognizerOptions();
  FstCoreOptions::FstCoreOptions(v4 + 216, a2 + 216);
  v5 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v5;
  if (v5)
    ++*(_DWORD *)(v5 + 36);
  return a1;
}

void sub_2099C1524(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void RecogSpecLayer::~RecogSpecLayer(RecogSpecLayer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 37);
  if (v1)
  {
    --*(_DWORD *)(v1 + 36);
    *((_QWORD *)this + 37) = 0;
  }
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
}

void RecogSpec::RecogSpec(RecogSpec *this, char a2, char a3, __int16 a4, __int16 a5)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_BYTE *)this = a2;
  *((_BYTE *)this + 6) = a3;
  *((_WORD *)this + 1) = a4;
  *((_WORD *)this + 2) = a5;
}

uint64_t RecogSpec::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  v4 = (unsigned int *)(a1 + 8);
  if (*(_DWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(_QWORD *)(a1 + 8) + 8 * v5));
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5++) = 0;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  DgnIOwnArray<RecogSpecLayer *>::copyArraySlice(v4, (_QWORD *)(a2 + 8), 0, *(_DWORD *)(a2 + 16));
  if (*(_DWORD *)(a1 + 16))
  {
    v6 = 0;
    do
    {
      v7 = MemChunkAlloc(0x130uLL, 0);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = RecogSpecLayer::RecogSpecLayer((uint64_t)v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6));
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

RecogSpecLayer *DgnDelete<RecogSpecLayer>(RecogSpecLayer *result)
{
  _QWORD *v1;

  if (result)
  {
    RecogSpecLayer::~RecogSpecLayer(result);
    return (RecogSpecLayer *)MemChunkFree(v1, 0);
  }
  return result;
}

void RecogSpec::RecogSpec(RecogSpec *this, const RecogSpec *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  RecogSpec::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_2099C16A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<RecogSpecLayer *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void RecogSpec::~RecogSpec(RecogSpec *this)
{
  DgnIOwnArray<RecogSpecLayer *>::releaseAll((uint64_t)this + 8);
}

uint64_t sizeObject<RecogSpecLayer *>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;

  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v13 = gShadowDiagnosticShowIdealizedObjectSizes;
    if ((int)v5 >= 1)
    {
      v6 = v5 + 1;
      v7 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v7)
          v8 = 4;
        else
          v8 = 8;
        if (a2 != 2)
        {
          v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v6 - 2));
          if (v9)
          {
            v10 = RecognizerOptions::sizeObject(*(_QWORD *)(*(_QWORD *)a1 + 8 * (v6 - 2)), a2);
            v8 += v10 + sizeObject(v9 + 216, a2);
            v7 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v8;
        --v6;
      }
      while (v6 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v13)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

unint64_t RecogSpec::addLayer(unsigned __int8 *a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, char a8, double a9, unsigned int a10, int a11, unsigned int a12, unsigned int a13, unsigned int a14, int a15, unsigned int a16, unsigned int a17, unsigned int a18, char a19, char a20,char a21,unsigned int a22,unsigned int a23,unsigned int a24,unsigned int a25,int a26,int a27)
{
  int v30;
  uint64_t *v31;
  unint64_t result;
  unsigned int v33;

  v30 = *a1;
  v31 = MemChunkAlloc(0x130uLL, 0);
  result = RecogSpecLayer::RecogSpecLayer((uint64_t)v31, a2, v30, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13, a14, a15, a16, __SPAIR64__(a18, a17), a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  v33 = *((_DWORD *)a1 + 4);
  if (v33 == *((_DWORD *)a1 + 5))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(a1 + 8), 1, 1);
    v33 = *((_DWORD *)a1 + 4);
  }
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v33) = v31;
  *((_DWORD *)a1 + 4) = v33 + 1;
  return result;
}

void RecogContext::RecogContext(RecogContext *this)
{
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void RecogContext::~RecogContext(RecogContext *this)
{
  DgnDelete<DgnArray<DgnPrimArray<unsigned int>>>(*(_QWORD *)this);
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 3));
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 4));
  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 5));
  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t DgnDelete<DgnArray<DgnPrimArray<unsigned int>>>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnArray<DgnPrimArray<unsigned char>>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

unint64_t RecogContext::setLeftContext(uint64_t a1, uint64_t a2)
{
  return DgnPrimArray<int>::copyArraySlice(a1 + 8, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

void RecogLayerPhaseStats::RecogLayerPhaseStats(RecogLayerPhaseStats *this)
{
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  PelStats::resetStats(this);
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  LMStats::resetStats((RecogLayerPhaseStats *)((char *)this + 176));
  SearchStats::resetStats((uint64_t)this + 328);
  NetStats::resetStats((RecogLayerPhaseStats *)((char *)this + 360));
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  FstStats::resetStats((RecogLayerPhaseStats *)((char *)this + 464));
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
}

void RecogLayerPhaseStats::printSize(RecogLayerPhaseStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  int v79;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 766, (DgnString *)&v78);
  if (v79)
    v16 = v78;
  else
    v16 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D4F0, a3, &unk_209A7D4F0, v16);
  DgnString::~DgnString((DgnString *)&v78);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D4F0);
  v21 = SnapTime::sizeObject((uint64_t)this + 720, 0);
  v22 = SnapTime::sizeObject((uint64_t)this + 720, 1);
  v23 = SnapTime::sizeObject((uint64_t)this + 720, 3);
  v24 = (a3 + 1);
  v77 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 768, (DgnString *)&v78);
  if (v79)
    v30 = v78;
  else
    v30 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A7D4F0, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = PelStats::sizeObject((uint64_t)this, 0);
  v32 = PelStats::sizeObject((uint64_t)this, 1);
  v33 = PelStats::sizeObject((uint64_t)this, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 769, (DgnString *)&v78);
  if (v79)
    v38 = v78;
  else
    v38 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A7D4F0, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = LMStats::sizeObject((uint64_t)this + 176, 0);
  v40 = LMStats::sizeObject((uint64_t)this + 176, 1);
  v41 = LMStats::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 770, (DgnString *)&v78);
  if (v79)
    v46 = v78;
  else
    v46 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_209A7D4F0, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = sizeObject((uint64_t)this + 328, 0);
  v48 = sizeObject((uint64_t)this + 328, 1);
  v49 = sizeObject((uint64_t)this + 328, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 771, (DgnString *)&v78);
  if (v79)
    v54 = v78;
  else
    v54 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_209A7D4F0, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  v55 = NetStats::sizeObject((uint64_t)this + 360, 0);
  v56 = NetStats::sizeObject((uint64_t)this + 360, 1);
  v57 = NetStats::sizeObject((uint64_t)this + 360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 772, (DgnString *)&v78);
  if (v79)
    v62 = v78;
  else
    v62 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v24, &unk_209A7D4F0, v25, v25, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  v63 = (char *)this + 464;
  v64 = FstStats::sizeObject((uint64_t)this + 464, 0);
  v65 = FstStats::sizeObject((uint64_t)v63, 1);
  v66 = FstStats::sizeObject((uint64_t)v63, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 773, (DgnString *)&v78);
  if (v79)
    v71 = v78;
  else
    v71 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v24, &unk_209A7D4F0, v25, v25, v71, v64, v65, v66);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v64;
  *a5 += v65;
  *a6 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 775, (DgnString *)&v78);
  if (v79)
    v76 = v78;
  else
    v76 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v77, &unk_209A7D4F0, (35 - v77), (35 - v77), v76, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v78);
}

void sub_2099C1F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t PRStats::recordPartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8;
  __int128 *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  __int32 v16;
  unsigned __int32 v17;
  int v18;
  int32x4_t v19;
  unsigned __int32 v20;
  unsigned int v21;
  float64x2_t v22;
  float64x2_t v23;
  unint64_t v29;
  unint64_t CyclesPerSecond;
  double v31;
  unint64_t v32;
  unint64_t result;
  double v34;
  __int128 v35;
  unsigned int i;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (__int128 *)(a1 + 16);
  v10 = (uint64_t *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  if ((_DWORD)v12)
  {
    v13 = 0;
    while (*(_DWORD *)(*v10 + 4 * v13) == *(_DWORD *)(*(_QWORD *)a2 + 4 * v13))
    {
      if (v12 == ++v13)
        goto LABEL_10;
    }
    LODWORD(v12) = v13;
  }
LABEL_10:
  v14 = v11 - v12;
  v15 = v8 - v12;
  if (v14 >= v15)
    v16 = v15;
  else
    v16 = v14;
  v17 = v15 - v16;
  v18 = *(_DWORD *)(a1 + 20);
  v19.i32[0] = v16;
  v19.i32[1] = v14 - v16;
  v19.i64[1] = v17 | 0x100000000;
  *(int32x4_t *)(a1 + 24) = vaddq_s32(*(int32x4_t *)(a1 + 24), v19);
  *(_DWORD *)(a1 + 40) += v8;
  v20 = v17 + v14;
  *(_DWORD *)(a1 + 20) = v18 + v20;
  if (v20)
  {
    v21 = *(_DWORD *)(a1 + 48) + v8;
    ++*(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 48) = v21;
    DgnPrimArray<int>::copyArraySlice(a1 + 64, (uint64_t *)a2, 0, v8);
  }
  v22 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 88));
  v23 = vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(a4 + 1)), v22);
  __asm { FMOV            V3.2D, #0.5 }
  *(float64x2_t *)(a1 + 112) = vaddq_f64(*(float64x2_t *)(a1 + 112), vmulq_f64(v23, vsubq_f64(vaddq_f64(vmulq_f64(v23, _Q3), v22), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(uint64_t *)(a1 + 56)), 0))));
  v29 = *a4;
  CyclesPerSecond = ClockTimer::getCyclesPerSecond((ClockTimer *)&ClockTimer::smClockTimer);
  v31 = (double)(uint64_t)(1000000 * (v29 % CyclesPerSecond) / CyclesPerSecond + 1000000 * (v29 / CyclesPerSecond));
  v32 = *(_QWORD *)(a1 + 80);
  result = ClockTimer::getCyclesPerSecond((ClockTimer *)&ClockTimer::smClockTimer);
  v34 = (double)(uint64_t)(1000000 * (v32 % result) / result + 1000000 * (v32 / result));
  *(double *)(a1 + 128) = *(double *)(a1 + 128)
                        + (v31 - v34) * ((v31 - v34) * 0.5 + v34 - (double)*(uint64_t *)(a1 + 56));
  v35 = *((_OWORD *)a4 + 1);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 96) = v35;
  *(_QWORD *)(a1 + 56) = a3;
  for (i = *(_DWORD *)(a1 + 8); *(_DWORD *)(a2 + 8) > i; *(_DWORD *)(a1 + 8) = i)
  {
    if (i == *(_DWORD *)(a1 + 12))
    {
      DgnArray<RecogResultToken>::reallocElts(a1, 1, 1);
      i = *(_DWORD *)(a1 + 8);
    }
    v37 = *(_QWORD *)a1 + 96 * i;
    v38 = *v9;
    v39 = v9[2];
    *(_OWORD *)(v37 + 16) = v9[1];
    *(_OWORD *)(v37 + 32) = v39;
    *(_OWORD *)v37 = v38;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 48) = 0;
    result = DgnPrimArray<int>::copyArraySlice(v37 + 48, v10, 0, *(_DWORD *)(a1 + 72));
    v40 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v37 + 64) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v37 + 80) = v40;
    i = *(_DWORD *)(a1 + 8) + 1;
  }
  return result;
}

void RecogLayerStats::RecogLayerStats(RecogLayerStats *this)
{
  uint64_t v2;

  RecogLayerPhaseStats::RecogLayerPhaseStats(this);
  RecogLayerPhaseStats::RecogLayerPhaseStats((RecogLayerPhaseStats *)(v2 + 752));
  LatticeStats::LatticeStats((RecogLayerStats *)((char *)this + 1552));
  *((_DWORD *)this + 502) = 0;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 536) = 0;
  *((_DWORD *)this + 570) = 0;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2232) = 0u;
  *(_OWORD *)((char *)this + 2216) = 0u;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
}

void RecogLayerStats::printSize(RecogLayerStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1041, (DgnString *)&v83);
  if (v84)
    v16 = (void *)v83;
  else
    v16 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D4F0, a3, &unk_209A7D4F0, v16);
  DgnString::~DgnString((DgnString *)&v83);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D4F0);
  if (this)
  {
    v82 = 0;
    v83 = 0;
    v21 = (a3 + 1);
    v81 = 0;
    RecogLayerPhaseStats::printSize(this, 0xFFFFFFFFLL, v21, &v83, &v82, &v81);
    *a4 += v83;
    *a5 += v82;
    *a6 += v81;
  }
  else
  {
    v21 = (a3 + 1);
  }
  v82 = 0;
  v83 = 0;
  v81 = 0;
  RecogLayerPhaseStats::printSize((RecogLayerStats *)((char *)this + 752), 0xFFFFFFFFLL, v21, &v83, &v82, &v81);
  *a4 += v83;
  *a5 += v82;
  *a6 += v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v26 = (void *)v83;
  else
    v26 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v31 = (void *)v83;
  else
    v31 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v36 = (void *)v83;
  else
    v36 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v36, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v41 = (void *)v83;
  else
    v41 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v41, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v46 = (void *)v83;
  else
    v46 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84)
    v51 = (void *)v83;
  else
    v51 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v51, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1049, (DgnString *)&v83);
  if (v84)
    v56 = (void *)v83;
  else
    v56 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v56, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1051, (DgnString *)&v83);
  if (v84)
    v61 = (void *)v83;
  else
    v61 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v61, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1053, (DgnString *)&v83);
  if (v84)
    v66 = (void *)v83;
  else
    v66 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  v67 = (char *)this + 1552;
  v68 = LatticeStats::sizeObject((uint64_t)this + 1552, 0);
  v69 = LatticeStats::sizeObject((uint64_t)v67, 1);
  v70 = LatticeStats::sizeObject((uint64_t)v67, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1055, (DgnString *)&v83);
  if (v84)
    v75 = (void *)v83;
  else
    v75 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v75, v68, v69, v70);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += v68;
  *a5 += v69;
  *a6 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1056, (DgnString *)&v83);
  if (v84)
    v80 = (void *)v83;
  else
    v80 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, a3, &unk_209A7D4F0, (35 - a3), (35 - a3), v80, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v83);
}

void sub_2099C2924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecogPhaseStats::RecogPhaseStats(RecogPhaseStats *this)
{
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  PelStats::resetStats(this);
  PrefStats::resetStats((RecogPhaseStats *)((char *)this + 176));
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  PelStats::resetStats((RecogPhaseStats *)((char *)this + 288));
}

void RecogPhaseStats::printSize(RecogPhaseStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  int v63;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1072, (DgnString *)&v62);
  if (v63)
    v16 = v62;
  else
    v16 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D4F0, a3, &unk_209A7D4F0, v16);
  DgnString::~DgnString((DgnString *)&v62);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D4F0);
  v21 = SnapTime::sizeObject((uint64_t)this + 256, 0);
  v22 = SnapTime::sizeObject((uint64_t)this + 256, 1);
  v23 = SnapTime::sizeObject((uint64_t)this + 256, 3);
  v24 = (a3 + 1);
  v61 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1073, (DgnString *)&v62);
  if (v63)
    v30 = v62;
  else
    v30 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A7D4F0, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = PelStats::sizeObject((uint64_t)this, 0);
  v32 = PelStats::sizeObject((uint64_t)this, 1);
  v33 = PelStats::sizeObject((uint64_t)this, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1075, (DgnString *)&v62);
  if (v63)
    v38 = v62;
  else
    v38 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A7D4F0, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = PrefStats::sizeObject((uint64_t)this + 176, 0);
  v40 = PrefStats::sizeObject((uint64_t)this + 176, 1);
  v41 = PrefStats::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1076, (DgnString *)&v62);
  if (v63)
    v46 = v62;
  else
    v46 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_209A7D4F0, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = (char *)this + 288;
  v48 = PelStats::sizeObject((uint64_t)this + 288, 0);
  v49 = PelStats::sizeObject((uint64_t)v47, 1);
  v50 = PelStats::sizeObject((uint64_t)v47, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1078, (DgnString *)&v62);
  if (v63)
    v55 = v62;
  else
    v55 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v24, &unk_209A7D4F0, v25, v25, v55, v48, v49, v50);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v48;
  *a5 += v49;
  *a6 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1079, (DgnString *)&v62);
  if (v63)
    v60 = v62;
  else
    v60 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v61, &unk_209A7D4F0, (35 - v61), (35 - v61), v60, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v62);
}

void sub_2099C2DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecogStats::RecogStats(RecogStats *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  RecogPhaseStats::RecogPhaseStats((RecogStats *)((char *)this + 16));
  RecogPhaseStats::RecogPhaseStats((RecogStats *)((char *)this + 480));
  *((_DWORD *)this + 244) = 0;
  *((_BYTE *)this + 980) = 0;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_QWORD *)this + 119) = 0;
  *(_QWORD *)((char *)this + 965) = 0;
  bzero((char *)this + 984, 0x298uLL);
}

void sub_2099C2E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnArray<RecogLayerStats>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void RecogStats::printSize(RecogStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  unint64_t *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  int v322;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1123, (DgnString *)&v321);
  if (v322)
    v16 = (void *)v321;
  else
    v16 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D4F0, a3, &unk_209A7D4F0, v16);
  DgnString::~DgnString((DgnString *)&v321);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D4F0);
  v21 = (a3 + 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1125, (DgnString *)&v321);
  if (v322)
    v26 = (void *)v321;
  else
    v26 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v22, v23, v24, v25, (a3 + 1), &unk_209A7D4F0, (a3 + 1), &unk_209A7D4F0, v26);
  v317 = a6;
  DgnString::~DgnString((DgnString *)&v321);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v27, v28, v29, v30, (a3 + 1), &unk_209A7D4F0);
  LODWORD(v31) = *((_DWORD *)this + 2);
  v318 = a3;
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = (a3 + 2);
    do
    {
      v38 = *(_QWORD *)this;
      v320 = 0;
      v321 = 0;
      v319 = 0;
      RecogLayerStats::printSize((RecogLayerStats *)(v38 + v32), v33, v37, &v321, &v320, &v319);
      v34 += v319;
      v35 += v320;
      v36 += v321;
      ++v33;
      v31 = *((unsigned int *)this + 2);
      v32 += 2368;
    }
    while (v33 < v31);
    LODWORD(a3) = v318;
  }
  else
  {
    v36 = 0;
    v35 = 0;
    v34 = 0;
  }
  v39 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 16;
  v40 = v39 + v36;
  v41 = v39 + v35;
  v42 = v40 + 2368 * (*((_DWORD *)this + 3) - v31);
  v43 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1125, (DgnString *)&v321);
  if (v322)
    v48 = (void *)v321;
  else
    v48 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v48, v42, v41, v34);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v42;
  *a5 += v41;
  *v317 += v34;
  v320 = 0;
  v321 = 0;
  v319 = 0;
  RecogPhaseStats::printSize((RecogStats *)((char *)this + 16), 0xFFFFFFFFLL, v21, &v321, &v320, &v319);
  *a4 += v321;
  *a5 += v320;
  *v317 += v319;
  v320 = 0;
  v321 = 0;
  v319 = 0;
  RecogPhaseStats::printSize((RecogStats *)((char *)this + 480), 0xFFFFFFFFLL, v21, &v321, &v320, &v319);
  *a4 += v321;
  *a5 += v320;
  *v317 += v319;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1131, (DgnString *)&v321);
  if (v322)
    v53 = (void *)v321;
  else
    v53 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v53, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1133, (DgnString *)&v321);
  if (v322)
    v58 = (void *)v321;
  else
    v58 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v58, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1135, (DgnString *)&v321);
  if (v322)
    v63 = (void *)v321;
  else
    v63 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v63, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1137, (DgnString *)&v321);
  if (v322)
    v68 = (void *)v321;
  else
    v68 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v68, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1139, (DgnString *)&v321);
  if (v322)
    v73 = (void *)v321;
  else
    v73 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1141, (DgnString *)&v321);
  if (v322)
    v78 = (void *)v321;
  else
    v78 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v78, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1143, (DgnString *)&v321);
  if (v322)
    v83 = (void *)v321;
  else
    v83 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v83, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1145, (DgnString *)&v321);
  if (v322)
    v88 = (void *)v321;
  else
    v88 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v88, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1147, (DgnString *)&v321);
  if (v322)
    v93 = (void *)v321;
  else
    v93 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v93, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1149, (DgnString *)&v321);
  if (v322)
    v98 = (void *)v321;
  else
    v98 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1151, (DgnString *)&v321);
  if (v322)
    v103 = (void *)v321;
  else
    v103 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v103, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1153, (DgnString *)&v321);
  if (v322)
    v108 = (void *)v321;
  else
    v108 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v108, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1155, (DgnString *)&v321);
  if (v322)
    v113 = (void *)v321;
  else
    v113 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v113, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1157, (DgnString *)&v321);
  if (v322)
    v118 = (void *)v321;
  else
    v118 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v118, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1159, (DgnString *)&v321);
  if (v322)
    v123 = (void *)v321;
  else
    v123 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v123, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1161, (DgnString *)&v321);
  if (v322)
    v128 = (void *)v321;
  else
    v128 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v128, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1163, (DgnString *)&v321);
  if (v322)
    v133 = (void *)v321;
  else
    v133 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v133, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1165, (DgnString *)&v321);
  if (v322)
    v138 = (void *)v321;
  else
    v138 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v138, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1167, (DgnString *)&v321);
  if (v322)
    v143 = (void *)v321;
  else
    v143 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v143, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1169, (DgnString *)&v321);
  if (v322)
    v148 = (void *)v321;
  else
    v148 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_209A7D4F0, (34 - a3), (34 - a3), v148, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  v149 = SnapTime::sizeObject((uint64_t)this + 1024, 0);
  v150 = SnapTime::sizeObject((uint64_t)this + 1024, 1);
  v151 = SnapTime::sizeObject((uint64_t)this + 1024, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1171, (DgnString *)&v321);
  if (v322)
    v156 = (void *)v321;
  else
    v156 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_209A7D4F0, v43, v43, v156, v149, v150, v151);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v149;
  *a5 += v150;
  *v317 += v151;
  v157 = SnapTime::sizeObject((uint64_t)this + 1056, 0);
  v158 = SnapTime::sizeObject((uint64_t)this + 1056, 1);
  v159 = SnapTime::sizeObject((uint64_t)this + 1056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1173, (DgnString *)&v321);
  if (v322)
    v164 = (void *)v321;
  else
    v164 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_209A7D4F0, v43, v43, v164, v157, v158, v159);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v157;
  *a5 += v158;
  *v317 += v159;
  v165 = SnapTime::sizeObject((uint64_t)this + 1088, 0);
  v166 = SnapTime::sizeObject((uint64_t)this + 1088, 1);
  v167 = SnapTime::sizeObject((uint64_t)this + 1088, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1175, (DgnString *)&v321);
  if (v322)
    v172 = (void *)v321;
  else
    v172 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_209A7D4F0, v43, v43, v172, v165, v166, v167);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v165;
  *a5 += v166;
  *v317 += v167;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1177, (DgnString *)&v321);
  if (v322)
    v177 = (void *)v321;
  else
    v177 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_209A7D4F0, v43, v43, v177, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1179, (DgnString *)&v321);
  if (v322)
    v182 = (void *)v321;
  else
    v182 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v21, &unk_209A7D4F0, v43, v43, v182, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  v183 = SnapTime::sizeObject((uint64_t)this + 1136, 0);
  v184 = SnapTime::sizeObject((uint64_t)this + 1136, 1);
  v185 = SnapTime::sizeObject((uint64_t)this + 1136, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1181, (DgnString *)&v321);
  if (v322)
    v190 = (void *)v321;
  else
    v190 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &unk_209A7D4F0, v43, v43, v190, v183, v184, v185);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v183;
  *a5 += v184;
  *v317 += v185;
  v191 = SnapTime::sizeObject((uint64_t)this + 1168, 0);
  v192 = SnapTime::sizeObject((uint64_t)this + 1168, 1);
  v193 = SnapTime::sizeObject((uint64_t)this + 1168, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1182, (DgnString *)&v321);
  if (v322)
    v198 = (void *)v321;
  else
    v198 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v21, &unk_209A7D4F0, v43, v43, v198, v191, v192, v193);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v191;
  *a5 += v192;
  *v317 += v193;
  v199 = SnapTime::sizeObject((uint64_t)this + 1200, 0);
  v200 = SnapTime::sizeObject((uint64_t)this + 1200, 1);
  v201 = SnapTime::sizeObject((uint64_t)this + 1200, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1184, (DgnString *)&v321);
  if (v322)
    v206 = (void *)v321;
  else
    v206 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v202, v203, v204, v205, v21, &unk_209A7D4F0, v43, v43, v206, v199, v200, v201);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v199;
  *a5 += v200;
  *v317 += v201;
  v207 = SnapTime::sizeObject((uint64_t)this + 1232, 0);
  v208 = SnapTime::sizeObject((uint64_t)this + 1232, 1);
  v209 = SnapTime::sizeObject((uint64_t)this + 1232, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1186, (DgnString *)&v321);
  if (v322)
    v214 = (void *)v321;
  else
    v214 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v21, &unk_209A7D4F0, v43, v43, v214, v207, v208, v209);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v207;
  *a5 += v208;
  *v317 += v209;
  v215 = SnapTime::sizeObject((uint64_t)this + 1264, 0);
  v216 = SnapTime::sizeObject((uint64_t)this + 1264, 1);
  v217 = SnapTime::sizeObject((uint64_t)this + 1264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1188, (DgnString *)&v321);
  if (v322)
    v222 = (void *)v321;
  else
    v222 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v21, &unk_209A7D4F0, v43, v43, v222, v215, v216, v217);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v215;
  *a5 += v216;
  *v317 += v217;
  v223 = SnapTime::sizeObject((uint64_t)this + 1296, 0);
  v224 = SnapTime::sizeObject((uint64_t)this + 1296, 1);
  v225 = SnapTime::sizeObject((uint64_t)this + 1296, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1190, (DgnString *)&v321);
  if (v322)
    v230 = (void *)v321;
  else
    v230 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_209A7D4F0, v43, v43, v230, v223, v224, v225);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v223;
  *a5 += v224;
  *v317 += v225;
  v231 = SnapTime::sizeObject((uint64_t)this + 1328, 0);
  v232 = SnapTime::sizeObject((uint64_t)this + 1328, 1);
  v233 = SnapTime::sizeObject((uint64_t)this + 1328, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1192, (DgnString *)&v321);
  if (v322)
    v238 = (void *)v321;
  else
    v238 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v234, v235, v236, v237, v21, &unk_209A7D4F0, v43, v43, v238, v231, v232, v233);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v231;
  *a5 += v232;
  *v317 += v233;
  v239 = SnapTime::sizeObject((uint64_t)this + 1360, 0);
  v240 = SnapTime::sizeObject((uint64_t)this + 1360, 1);
  v241 = SnapTime::sizeObject((uint64_t)this + 1360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1194, (DgnString *)&v321);
  if (v322)
    v246 = (void *)v321;
  else
    v246 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v21, &unk_209A7D4F0, v43, v43, v246, v239, v240, v241);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v239;
  *a5 += v240;
  *v317 += v241;
  v247 = SnapTime::sizeObject((uint64_t)this + 1392, 0);
  v248 = SnapTime::sizeObject((uint64_t)this + 1392, 1);
  v249 = SnapTime::sizeObject((uint64_t)this + 1392, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1196, (DgnString *)&v321);
  if (v322)
    v254 = (void *)v321;
  else
    v254 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_209A7D4F0, v43, v43, v254, v247, v248, v249);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v247;
  *a5 += v248;
  *v317 += v249;
  v255 = SnapTime::sizeObject((uint64_t)this + 1424, 0);
  v256 = SnapTime::sizeObject((uint64_t)this + 1424, 1);
  v257 = SnapTime::sizeObject((uint64_t)this + 1424, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1198, (DgnString *)&v321);
  if (v322)
    v262 = (void *)v321;
  else
    v262 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v258, v259, v260, v261, v21, &unk_209A7D4F0, v43, v43, v262, v255, v256, v257);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v255;
  *a5 += v256;
  *v317 += v257;
  v263 = SnapTime::sizeObject((uint64_t)this + 1456, 0);
  v264 = SnapTime::sizeObject((uint64_t)this + 1456, 1);
  v265 = SnapTime::sizeObject((uint64_t)this + 1456, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1200, (DgnString *)&v321);
  if (v322)
    v270 = (void *)v321;
  else
    v270 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v266, v267, v268, v269, v21, &unk_209A7D4F0, v43, v43, v270, v263, v264, v265);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v263;
  *a5 += v264;
  *v317 += v265;
  v271 = SnapTime::sizeObject((uint64_t)this + 1488, 0);
  v272 = SnapTime::sizeObject((uint64_t)this + 1488, 1);
  v273 = SnapTime::sizeObject((uint64_t)this + 1488, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1202, (DgnString *)&v321);
  if (v322)
    v278 = (void *)v321;
  else
    v278 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v21, &unk_209A7D4F0, v43, v43, v278, v271, v272, v273);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v271;
  *a5 += v272;
  *v317 += v273;
  v279 = SnapTime::sizeObject((uint64_t)this + 1520, 0);
  v280 = SnapTime::sizeObject((uint64_t)this + 1520, 1);
  v281 = SnapTime::sizeObject((uint64_t)this + 1520, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1204, (DgnString *)&v321);
  if (v322)
    v286 = (void *)v321;
  else
    v286 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_209A7D4F0, v43, v43, v286, v279, v280, v281);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v279;
  *a5 += v280;
  *v317 += v281;
  v287 = SnapTime::sizeObject((uint64_t)this + 1552, 0);
  v288 = SnapTime::sizeObject((uint64_t)this + 1552, 1);
  v289 = SnapTime::sizeObject((uint64_t)this + 1552, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1206, (DgnString *)&v321);
  if (v322)
    v294 = (void *)v321;
  else
    v294 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v290, v291, v292, v293, v21, &unk_209A7D4F0, v43, v43, v294, v287, v288, v289);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v287;
  *a5 += v288;
  *v317 += v289;
  v295 = SnapTime::sizeObject((uint64_t)this + 1584, 0);
  v296 = SnapTime::sizeObject((uint64_t)this + 1584, 1);
  v297 = SnapTime::sizeObject((uint64_t)this + 1584, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1208, (DgnString *)&v321);
  if (v322)
    v302 = (void *)v321;
  else
    v302 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v21, &unk_209A7D4F0, v43, v43, v302, v295, v296, v297);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v295;
  *a5 += v296;
  *v317 += v297;
  v303 = (char *)this + 1616;
  v304 = SnapTime::sizeObject((uint64_t)this + 1616, 0);
  v305 = SnapTime::sizeObject((uint64_t)v303, 1);
  v306 = SnapTime::sizeObject((uint64_t)v303, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1210, (DgnString *)&v321);
  if (v322)
    v311 = (void *)v321;
  else
    v311 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v307, v308, v309, v310, v21, &unk_209A7D4F0, v43, v43, v311, v304, v305, v306);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v304;
  *a5 += v305;
  *v317 += v306;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1211, (DgnString *)&v321);
  if (v322)
    v316 = (void *)v321;
  else
    v316 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v312, v313, v314, v315, v318, &unk_209A7D4F0, (35 - v318), (35 - v318), v316, *a4, *a5, *v317);
  DgnString::~DgnString((DgnString *)&v321);
}

void sub_2099C4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t RecogStats::initRecognitionPhaseTimes(uint64_t a1, int64x2_t *a2, int64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t *v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64x2_t v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  int64x2_t *v64;
  int64x2_t *v65;
  int64x2_t v66;
  int64x2_t *v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t *v73;
  int64x2_t *v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t *v77;
  int64x2_t v78;
  __int128 v79;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];

  v17 = *(unsigned int *)(a4 + 8);
  v86[0] = 0;
  v86[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v86, (uint64_t *)a4, 0, v17);
  v85[0] = 0;
  v85[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v85, (uint64_t *)a5, 0, *(_DWORD *)(a5 + 8));
  v84[0] = 0;
  v84[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v84, (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  v83[0] = 0;
  v83[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v83, (uint64_t *)a7, 0, *(_DWORD *)(a7 + 8));
  v82[0] = 0;
  v82[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v82, (uint64_t *)a8, 0, *(_DWORD *)(a8 + 8));
  v81[0] = 0;
  v81[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v81, (uint64_t *)a9, 0, *(_DWORD *)(a9 + 8));
  v18 = (int64x2_t *)v86[0];
  v19 = (v17 - 1);
  if ((int)v17 - 1 >= 0)
  {
    v20 = 0;
    v21 = v81[0] + 32 * v19;
    v22 = v86[0] + 32 * v19;
    v23 = v19 + 1;
    v24 = v82[0] + 32 * v19;
    v25 = v83[0] + 32 * v19;
    v26 = v84[0] + 32 * v19;
    v27 = v85[0] + 32 * v19;
    do
    {
      v28 = *(_QWORD *)(v21 + v20);
      if (!v28)
      {
        v29 = v21 + v20;
        if (*(_QWORD *)(v21 + v20 + 8) || *(_QWORD *)(v29 + 16) || *(_QWORD *)(v21 + v20 + 24))
        {
          v28 = 0;
        }
        else if (v20)
        {
          v41 = *(_OWORD *)(v22 + v20 + 32);
          v42 = *(_OWORD *)(v22 + v20 + 48);
          *(_OWORD *)(v21 + v20) = v41;
          *(_OWORD *)(v29 + 16) = v42;
          v28 = v41;
        }
        else
        {
          v28 = *a10;
          v47 = a10[3];
          *(_QWORD *)v21 = *a10;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)(a10 + 1);
          *(_QWORD *)(v21 + 24) = v47;
        }
      }
      v30 = *(_QWORD *)(v24 + v20);
      if (!v30)
      {
        v31 = v24 + v20;
        if (*(_QWORD *)(v24 + v20 + 8) || *(_QWORD *)(v31 + 16) || *(_QWORD *)(v24 + v20 + 24))
        {
          v30 = 0;
        }
        else
        {
          v43 = *(_QWORD *)(v21 + v20 + 24);
          *(_QWORD *)(v24 + v20) = v28;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)(v21 + v20 + 8);
          *(_QWORD *)(v24 + v20 + 24) = v43;
          v30 = v28;
        }
      }
      v32 = *(_QWORD *)(v25 + v20);
      if (!v32)
      {
        v33 = v25 + v20;
        if (*(_QWORD *)(v25 + v20 + 8) || *(_QWORD *)(v33 + 16) || *(_QWORD *)(v25 + v20 + 24))
        {
          v32 = 0;
        }
        else
        {
          v44 = *(_QWORD *)(v24 + v20 + 24);
          *(_QWORD *)(v25 + v20) = v30;
          *(_OWORD *)(v33 + 8) = *(_OWORD *)(v24 + v20 + 8);
          *(_QWORD *)(v25 + v20 + 24) = v44;
          v32 = v30;
        }
      }
      v34 = *(_QWORD *)(v26 + v20);
      if (!v34)
      {
        v35 = v26 + v20;
        if (*(_QWORD *)(v26 + v20 + 8) || *(_QWORD *)(v35 + 16) || *(_QWORD *)(v26 + v20 + 24))
        {
          v34 = 0;
        }
        else
        {
          v45 = *(_QWORD *)(v25 + v20 + 24);
          *(_QWORD *)(v26 + v20) = v32;
          *(_OWORD *)(v35 + 8) = *(_OWORD *)(v25 + v20 + 8);
          *(_QWORD *)(v26 + v20 + 24) = v45;
          v34 = v32;
        }
      }
      v36 = *(_QWORD *)(v27 + v20);
      if (!v36)
      {
        v37 = v27 + v20;
        if (*(_QWORD *)(v27 + v20 + 8) || *(_QWORD *)(v37 + 16) || *(_QWORD *)(v27 + v20 + 24))
        {
          v36 = 0;
        }
        else
        {
          v46 = *(_QWORD *)(v26 + v20 + 24);
          *(_QWORD *)(v27 + v20) = v34;
          *(_OWORD *)(v37 + 8) = *(_OWORD *)(v26 + v20 + 8);
          *(_QWORD *)(v27 + v20 + 24) = v46;
          v36 = v34;
        }
      }
      if (!*(_QWORD *)(v22 + v20))
      {
        v38 = v22 + v20;
        if (!*(_QWORD *)(v22 + v20 + 8) && !*(_QWORD *)(v38 + 16) && !*(_QWORD *)(v22 + v20 + 24))
        {
          v39 = *(_QWORD *)(v27 + v20 + 24);
          *(_QWORD *)(v22 + v20) = v36;
          *(_OWORD *)(v38 + 8) = *(_OWORD *)(v27 + v20 + 8);
          *(_QWORD *)(v22 + v20 + 24) = v39;
        }
      }
      v20 -= 32;
    }
    while (v23-- > 1);
    v18 = (int64x2_t *)v86[0];
  }
  if (a3->i64[0] | a3->i64[1] | a3[1].i64[0] | a3[1].i64[1])
    v48 = a3;
  else
    v48 = v18;
  v49 = vsubq_s64(a2[1], *(int64x2_t *)(a1 + 1104));
  v50 = *v48;
  v51 = v48[1];
  *(int64x2_t *)(a1 + 1328) = vsubq_s64(*a2, *(int64x2_t *)(a1 + 1088));
  *(int64x2_t *)(a1 + 1344) = v49;
  v52 = vsubq_s64(v51, a2[1]);
  *(int64x2_t *)(a1 + 1360) = vsubq_s64(v50, *a2);
  *(int64x2_t *)(a1 + 1376) = v52;
  v53 = vsubq_s64(v18[1], v51);
  *(int64x2_t *)(a1 + 1392) = vsubq_s64(*v18, v50);
  *(int64x2_t *)(a1 + 1408) = v53;
  v54 = 0uLL;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  if ((_DWORD)v17)
  {
    v55 = 0;
    v56 = v85[0];
    v57 = v84[0];
    v58 = v83[0];
    v59 = 0uLL;
    v60 = v82[0];
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = v81[0];
    do
    {
      v64 = (int64x2_t *)(v56 + 32 * v55);
      v65 = &v18[2 * v55];
      v66 = vsubq_s64(v64[1], v65[1]);
      *(int64x2_t *)(a1 + 1424) = vaddq_s64(vsubq_s64(*v64, *v65), *(int64x2_t *)(a1 + 1424));
      *(int64x2_t *)(a1 + 1440) = vaddq_s64(v66, *(int64x2_t *)(a1 + 1440));
      v67 = (int64x2_t *)(v57 + 32 * v55);
      v54 = vaddq_s64(vsubq_s64(*v67, *v64), v54);
      v68 = vsubq_s64(v67[1], v64[1]);
      *(int64x2_t *)(a1 + 1456) = v54;
      v59 = vaddq_s64(v68, v59);
      *(int64x2_t *)(a1 + 1472) = v59;
      v69 = (int64x2_t *)(v58 + 32 * v55);
      v61 = vaddq_s64(vsubq_s64(*v69, *v67), v61);
      v70 = vsubq_s64(v69[1], v67[1]);
      *(int64x2_t *)(a1 + 1488) = v61;
      v62 = vaddq_s64(v70, v62);
      *(int64x2_t *)(a1 + 1504) = v62;
      v71 = (int64x2_t *)(v60 + 32 * v55);
      v72 = vsubq_s64(v71[1], v69[1]);
      *(int64x2_t *)(a1 + 1520) = vaddq_s64(vsubq_s64(*v71, *v69), *(int64x2_t *)(a1 + 1520));
      *(int64x2_t *)(a1 + 1536) = vaddq_s64(v72, *(int64x2_t *)(a1 + 1536));
      v73 = (int64x2_t *)(v63 + 32 * v55);
      v74 = v73 + 1;
      v75 = vsubq_s64(v73[1], v71[1]);
      *(int64x2_t *)(a1 + 1552) = vaddq_s64(vsubq_s64(*v73, *v71), *(int64x2_t *)(a1 + 1552));
      *(int64x2_t *)(a1 + 1568) = vaddq_s64(v75, *(int64x2_t *)(a1 + 1568));
      if (v55 == v19)
      {
        v76 = vsubq_s64(*((int64x2_t *)a10 + 1), *v74);
        *(int64x2_t *)(a1 + 1584) = vaddq_s64(vsubq_s64(*(int64x2_t *)a10, *v73), *(int64x2_t *)(a1 + 1584));
        *(int64x2_t *)(a1 + 1600) = vaddq_s64(v76, *(int64x2_t *)(a1 + 1600));
        ++v55;
      }
      else
      {
        ++v55;
        v77 = &v18[2 * v55];
        v78 = vsubq_s64(v77[1], *v74);
        *(int64x2_t *)(a1 + 1584) = vaddq_s64(vsubq_s64(*v77, *v73), *(int64x2_t *)(a1 + 1584));
        *(int64x2_t *)(a1 + 1600) = vaddq_s64(v78, *(int64x2_t *)(a1 + 1600));
      }
    }
    while (v55 != v17);
  }
  v79 = *((_OWORD *)a10 + 1);
  *(_OWORD *)(a1 + 1616) = *(_OWORD *)a10;
  *(_OWORD *)(a1 + 1632) = v79;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v81);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v82);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v83);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v84);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v85);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v86);
}

void sub_2099C4C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;
  uint64_t v15;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v13 = va_arg(va4, _QWORD);
  v15 = va_arg(va4, _QWORD);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  _Unwind_Resume(a1);
}

void PrefiltererThreadInsurance::~PrefiltererThreadInsurance(PrefiltererThreadInsurance *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;

  v2 = *(_DWORD **)this;
  if (v2)
  {
    if (!**((_BYTE **)this + 1))
    {
      v3 = **((_DWORD **)this + 2);
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v2 + 136))(v2, 0);
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 96))(*(_QWORD *)this);
      **((_DWORD **)this + 2) = v4;
      if (v3 != v4)
      {
        v5 = (_QWORD *)*((_QWORD *)this + 4);
        v18 = 0u;
        v19 = 0u;
        SnapTime::recordTime((SnapTime *)&v18, 1, 0, 0, 0);
        v6 = *((_QWORD *)&v18 + 1);
        v7 = v19;
        v8 = v18 - *v5;
        v9 = *((_QWORD *)&v18 + 1) - v5[1];
        v10 = v19 - v5[2];
        v11 = *((_QWORD *)&v19 + 1) - v5[3];
        *v5 = v18;
        v5[1] = v6;
        *((_OWORD *)v5 + 1) = v7;
        v12 = (_QWORD *)*((_QWORD *)this + 5);
        v13 = *v12 + v8;
        v14 = v12[1] + v9;
        *v12 = v13;
        v12[1] = v14;
        v15 = v12[2] + v10;
        v16 = v12[3] + v11;
        v12[2] = v15;
        v12[3] = v16;
        if (*(_DWORD *)(*((_QWORD *)this + 1) + 4) == -16)
        {
          v17 = (_QWORD *)*((_QWORD *)this + 3);
          *v17 = v13;
          v17[1] = v14;
          v17[2] = v15;
          v17[3] = v16;
        }
      }
    }
  }
}

void ChannelThreadInsurance::~ChannelThreadInsurance(ChannelThreadInsurance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int64x2_t *v11;
  int64x2_t v12;
  int v13;
  int64x2_t *v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21[2];
  int64x2_t v22;
  int64x2_t v23;

  if (*(_QWORD *)this)
  {
    v9 = *((_QWORD *)this + 1);
    if (!*(_BYTE *)v9)
    {
      v10 = *(_DWORD *)(v9 + 16);
      ChannelMgr::maybeStopCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, *(Utterance **)this, a3, a4, a5, a6, a7, a8, v21);
      v11 = (int64x2_t *)*((_QWORD *)this + 3);
      v12 = v11[1];
      *v11 = vaddq_s64(*v11, v21[0]);
      v11[1] = vaddq_s64(v12, v21[1]);
      UttFeatureArraySynchronizedArray::update(*((_QWORD *)this + 1), *(const Utterance **)this);
      v13 = *(_DWORD *)(*((_QWORD *)this + 1) + 16);
      **((_DWORD **)this + 2) = v13;
      if (v10 != v13)
      {
        v14 = (int64x2_t *)*((_QWORD *)this + 4);
        v22 = 0u;
        v23 = 0u;
        SnapTime::recordTime((SnapTime *)&v22, 1, 0, 0, 0);
        v15 = v14[1];
        v16 = vsubq_s64(v22, *v14);
        *v14 = v22;
        v17 = vsubq_s64(v23, v15);
        v14[1] = v23;
        v18 = (int64x2_t *)*((_QWORD *)this + 5);
        v19 = vaddq_s64(v16, *v18);
        v20 = vaddq_s64(v17, v18[1]);
        *v18 = v19;
        v18[1] = v20;
      }
    }
  }
}

void LookaheadThreadInsurance::~LookaheadThreadInsurance(LookaheadThreadInsurance *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int64x2_t *v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;

  v2 = *((_QWORD *)this + 1);
  if (v2 && !**((_BYTE **)this + 2))
  {
    v3 = **((_DWORD **)this + 3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 56))(v2, 0);
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    **((_DWORD **)this + 3) = v4;
    if (v3 != v4)
    {
      v5 = (int64x2_t *)*((_QWORD *)this + 4);
      v12 = 0u;
      v13 = 0u;
      SnapTime::recordTime((SnapTime *)&v12, 1, 0, 0, 0);
      v6 = v5[1];
      v7 = vsubq_s64(v12, *v5);
      *v5 = v12;
      v8 = vsubq_s64(v13, v6);
      v5[1] = v13;
      v9 = (int64x2_t *)*((_QWORD *)this + 5);
      v10 = vaddq_s64(v7, *v9);
      v11 = vaddq_s64(v8, v9[1]);
      *v9 = v10;
      v9[1] = v11;
    }
  }
}

void FrameTransformThreadInsurance::~FrameTransformThreadInsurance(FrameTransformThreadInsurance *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int64x2_t *v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;

  v2 = *((_QWORD *)this + 1);
  if (v2 && !**((_BYTE **)this + 2))
  {
    v3 = **((_DWORD **)this + 3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 104))(v2, 0);
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    **((_DWORD **)this + 3) = v4;
    if (v3 != v4)
    {
      v5 = (int64x2_t *)*((_QWORD *)this + 4);
      v12 = 0u;
      v13 = 0u;
      SnapTime::recordTime((SnapTime *)&v12, 1, 0, 0, 0);
      v6 = v5[1];
      v7 = vsubq_s64(v12, *v5);
      *v5 = v12;
      v8 = vsubq_s64(v13, v6);
      v5[1] = v13;
      v9 = (int64x2_t *)*((_QWORD *)this + 5);
      v10 = vaddq_s64(v7, *v9);
      v11 = vaddq_s64(v8, v9[1]);
      *v9 = v10;
      v9[1] = v11;
    }
  }
}

_QWORD *ProcessPrefilterer::ProcessPrefilterer(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, char a6, char a7, _BYTE *a8, _DWORD *a9, int64x2_t *a10, int64x2_t *a11, int64x2_t *a12)
{
  uint64_t v12;
  int v17;
  char v18;
  int v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;

  v12 = a5;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a8;
  *((_DWORD *)a1 + 8) = a5;
  *((_DWORD *)a1 + 9) = *a9;
  *((_BYTE *)a1 + 40) = a6;
  *((_BYTE *)a1 + 41) = a7;
  *(_QWORD *)((char *)a1 + 44) = 0xFFFFFFF000000000;
  if (!a2 || *a8)
  {
    *((_DWORD *)a1 + 9) = a5;
    return a1;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v18 = v17;
  if (v17)
    *((_DWORD *)a1 + 11) = (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(*(_QWORD *)*a1 + 136))(*a1, *((_BYTE *)a1 + 40) == 0, a1[3]);
  if (*((_BYTE *)a1 + 41))
  {
    if (!*(_BYTE *)a3 && (!a4 || !*a4))
      return a1;
    v12 = *(unsigned int *)(a3 + 16);
  }
  if (*((_BYTE *)a1 + 40)
    && !*((_DWORD *)a1 + 11)
    && (int)v12 >= (int)ReturnListQueue::getNextFrameTime((ReturnListQueue *)a1[3])
    && !*(_BYTE *)a1[3])
  {
    *((_DWORD *)a1 + 11) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)*a1 + 112))(*a1, v12, a3, a4);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1) & 1) == 0)
  {
    v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 96))(*a1);
    *a9 = v19;
    if ((v18 & 1) != 0 || *((_DWORD *)a1 + 9) < v19)
    {
      v25 = 0u;
      v26 = 0u;
      SnapTime::recordTime((SnapTime *)&v25, 1, 0, 0, 0);
      v20 = v26;
      v21 = vsubq_s64(v25, *a11);
      v22 = vsubq_s64(v26, a11[1]);
      *a11 = v25;
      a11[1] = v20;
      v23 = vaddq_s64(v22, a12[1]);
      *a12 = vaddq_s64(v21, *a12);
      a12[1] = v23;
    }
  }
  *((_DWORD *)a1 + 9) = *a9;
  if (*(_DWORD *)(a1[3] + 4) == -16)
  {
    v24 = a12[1];
    *a10 = *a12;
    a10[1] = v24;
  }
  return a1;
}

void ProcessPrefilterer::~ProcessPrefilterer(ProcessPrefilterer *this)
{
  ReturnListQueue *v2;
  unsigned int v3;
  uint64_t v4;

  if (*(_QWORD *)this)
  {
    if (!*((_BYTE *)this + 41))
    {
      v2 = (ReturnListQueue *)*((_QWORD *)this + 3);
      if (!*(_BYTE *)v2
        && (!*((_BYTE *)this + 40) || (int)ReturnListQueue::getNextFrameTime(v2) > *((_DWORD *)this + 8)))
      {
        v3 = *((_DWORD *)this + 11);
        if (v3 < 2)
        {
LABEL_13:
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 128))(*(_QWORD *)this, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
          return;
        }
        if (v3 == 2)
        {
          v4 = *((_QWORD *)this + 1);
        }
        else
        {
          if (v3 != 3)
            return;
          v4 = *((_QWORD *)this + 2);
        }
        if (*(_DWORD *)(v4 + 16) > *((_DWORD *)this + 9))
          goto LABEL_13;
      }
    }
  }
}

_QWORD *ProcessLookahead::ProcessLookahead(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, _BYTE *a8, _DWORD *a9, int64x2_t *a10, int64x2_t *a11)
{
  int v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;

  *a1 = a2;
  a1[1] = a3;
  *((_DWORD *)a1 + 4) = a4;
  *((_DWORD *)a1 + 5) = *a9;
  *((_BYTE *)a1 + 24) = a5;
  *((_BYTE *)a1 + 25) = a7;
  a1[4] = a8;
  if (a2 && !*a8)
  {
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)a2 + 56))(a2, (a5 | a6 | a7) ^ 1u, a8);
    if (*((_BYTE *)a1 + 25))
    {
      if (!*(_BYTE *)a3)
        return a1;
      *((_DWORD *)a1 + 4) = *(_DWORD *)(a3 + 16);
      if (!*(_BYTE *)a1[4])
        goto LABEL_11;
    }
    if (a6 && *((_BYTE *)a1 + 24) && *(_DWORD *)(a1[4] + 16) <= *((_DWORD *)a1 + 4))
LABEL_11:
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
    *((_DWORD *)a1 + 5) = v15;
    if (*a9 != v15)
    {
      v20 = 0u;
      v21 = 0u;
      SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
      v16 = v21;
      v17 = vsubq_s64(v20, *a10);
      v18 = vsubq_s64(v21, a10[1]);
      *a10 = v20;
      a10[1] = v16;
      v19 = vaddq_s64(v18, a11[1]);
      *a11 = vaddq_s64(v17, *a11);
      a11[1] = v19;
      *a9 = *((_DWORD *)a1 + 5);
    }
  }
  else
  {
    *((_DWORD *)a1 + 5) = a4;
  }
  return a1;
}

void ProcessLookahead::~ProcessLookahead(ProcessLookahead *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (!*((_BYTE *)this + 25))
    {
      v3 = *((_QWORD *)this + 4);
      if (!*(_BYTE *)v3
        && (!*((_BYTE *)this + 24) || *(_DWORD *)(v3 + 16) > *((_DWORD *)this + 4))
        && *(_DWORD *)(*((_QWORD *)this + 1) + 16) > *((_DWORD *)this + 5))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
      }
    }
  }
}

_QWORD *ProcessFrameTransform::ProcessFrameTransform(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, char a8, uint64_t a9, _DWORD *a10, int64x2_t *a11, int64x2_t *a12)
{
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v24;
  int64x2_t v25;

  *a1 = a3;
  a1[1] = a4;
  *((_DWORD *)a1 + 4) = a5;
  *((_DWORD *)a1 + 5) = -16;
  *((_DWORD *)a1 + 6) = *a10;
  *((_BYTE *)a1 + 28) = a6;
  *((_BYTE *)a1 + 29) = a8;
  a1[4] = a9;
  if (!a3)
  {
    *((_DWORD *)a1 + 5) = a5;
LABEL_17:
    *((_DWORD *)a1 + 6) = a5;
    return a1;
  }
  LODWORD(a5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a5);
  v14 = *a1;
  *((_DWORD *)a1 + 5) = a5;
  if (!v14 || *(_BYTE *)a1[4])
    goto LABEL_17;
  v15 = (a7 & 1) == 0 && !*((_BYTE *)a1 + 28) && *((_BYTE *)a1 + 29) == 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v14 + 104))(v14, v15);
  if (*((_BYTE *)a1 + 29))
  {
    v16 = a1[1];
    if (!*(_BYTE *)v16)
      return a1;
    v17 = *(unsigned int *)(v16 + 16);
    *((_DWORD *)a1 + 5) = v17;
    if (!*(_BYTE *)a1[4])
      goto LABEL_13;
  }
  if (a7 && *(_DWORD *)(a1[4] + 16) <= *((_DWORD *)a1 + 4))
  {
    v17 = *((unsigned int *)a1 + 5);
    v16 = a1[1];
LABEL_13:
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, v17, v16);
  }
  v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  *((_DWORD *)a1 + 6) = v18;
  if (*a10 != v18)
  {
    v24 = 0u;
    v25 = 0u;
    SnapTime::recordTime((SnapTime *)&v24, 1, 0, 0, 0);
    v19 = v25;
    v20 = vsubq_s64(v24, *a11);
    v21 = vsubq_s64(v25, a11[1]);
    *a11 = v24;
    a11[1] = v19;
    v22 = vaddq_s64(v21, a12[1]);
    *a12 = vaddq_s64(v20, *a12);
    a12[1] = v22;
    *a10 = *((_DWORD *)a1 + 6);
  }
  return a1;
}

void ProcessFrameTransform::~ProcessFrameTransform(ProcessFrameTransform *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (!*((_BYTE *)this + 29))
    {
      v3 = *((_QWORD *)this + 4);
      if (!*(_BYTE *)v3
        && (!*((_BYTE *)this + 28) || *(_DWORD *)(v3 + 16) > *((_DWORD *)this + 4))
        && *(_DWORD *)(*((_QWORD *)this + 1) + 16) > *((_DWORD *)this + 6))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
      }
    }
  }
}

void ProcessChannel::ProcessChannel(ProcessChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Utterance *a6, UttFeatureArraySynchronizedArray *a7, int *a8, int64x2_t *a9, int64x2_t *a10, int64x2_t *a11)
{
  int v12;
  int v13;
  int *v15;
  ChannelMgr *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const Utterance *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int *v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;

  *(_QWORD *)this = a6;
  *((_QWORD *)this + 1) = a7;
  if (a6)
  {
    v12 = a5;
    v13 = a4;
    if ((a3 | a4 | a5) == 1 && *(_BYTE *)a7 == 0)
    {
      v15 = a8;
      v17 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      ChannelMgr::maybeStopCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, a6, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, &v43);
      if (v13)
      {
        ChannelMgr::collectThroughUttFrame(v17, *(Utterance **)this, a2, v19, v20, v21, v22, v23, &v45);
        v43 = vaddq_s64(v43, v45);
        v44 = vaddq_s64(v44, v46);
      }
      v24 = *(const Utterance **)this;
      if (!v12 || !*((_BYTE *)v24 + 416))
      {
LABEL_27:
        UttFeatureArraySynchronizedArray::update(*((_QWORD *)this + 1), v24);
        v35 = *((_QWORD *)this + 1);
        v36 = *(_DWORD *)(v35 + 16);
        if (*(_BYTE *)v35)
          *(_DWORD *)(v35 + 4) = v36;
        v45 = 0u;
        v46 = 0u;
        SnapTime::recordTime((SnapTime *)&v45, 1, 0, 0, 0);
        v37 = v46;
        v38 = vsubq_s64(v45, *a10);
        v39 = vsubq_s64(v46, a10[1]);
        *a10 = v45;
        a10[1] = v37;
        v40 = vaddq_s64(v39, a11[1]);
        *a11 = vaddq_s64(v38, *a11);
        a11[1] = v40;
        v41 = vaddq_s64(a9[1], v44);
        *a9 = vaddq_s64(*a9, v43);
        a9[1] = v41;
        *v15 = v36;
        return;
      }
      v42 = v15;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      while (1)
      {
        if (v25 || v26 || v27 || v28)
        {
          ClockTimer::useFreeTime(&v45);
          v25 += v45.i64[0];
          v26 += v45.i64[1];
          v27 += v46.i64[0];
          v28 += v46.i64[1];
          ChannelMgr::collectAvailableDataForUtt(v17, *(Utterance **)this, v29, v30, v31, v32, v33, v34);
          if (v25)
            goto LABEL_25;
          if (v26)
            goto LABEL_24;
          if (v27)
            goto LABEL_23;
          if (v28)
          {
            v27 = 0;
LABEL_23:
            v26 = 0;
LABEL_24:
            v25 = 0;
            goto LABEL_25;
          }
        }
        else
        {
          ChannelMgr::collectAvailableDataForUtt(v17, v24, v18, v19, v20, v21, v22, v23);
        }
        ClockTimer::useFreeTime(&v45);
        v26 = v45.i64[1];
        v25 = v45.i64[0];
        v28 = v46.i64[1];
        v27 = v46.i64[0];
LABEL_25:
        v24 = *(const Utterance **)this;
        if (!*(_BYTE *)(*(_QWORD *)this + 416))
        {
          v43.i64[0] += v25;
          v43.i64[1] += v26;
          v44.i64[0] += v27;
          v44.i64[1] += v28;
          v15 = v42;
          goto LABEL_27;
        }
      }
    }
  }
}

void ProcessChannel::~ProcessChannel(Utterance **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this)
  {
    if (!*(_BYTE *)this[1])
      ChannelMgr::maybeStartCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, *this, a3, a4, a5, a6, a7, a8);
  }
}

void RecogController::RecogController(RecogController *this, const RecogSpec *a2, int a3, PrefiltererSearchParamSet *a4, SearchCrossLayerParamSet *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  void *v45;

  *(_QWORD *)this = &off_24C2151A8;
  RecogSpec::RecogSpec((RecogController *)((char *)this + 8), a2);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v9 = (_QWORD *)((char *)this + 72);
  *(_OWORD *)((char *)this + 88) = 0u;
  v10 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_QWORD *)&v11 = 0xF0000000FLL;
  *((_QWORD *)&v11 + 1) = 0xF0000000FLL;
  *(_OWORD *)((char *)this + 292) = v11;
  *((_DWORD *)this + 77) = -16;
  *((_QWORD *)this + 39) = 0xF0000000FLL;
  *((_DWORD *)this + 98) = 0;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_QWORD *)((char *)this + 348) = 0;
  *((_DWORD *)this + 89) = 0;
  *(_QWORD *)((char *)this + 332) = 0;
  *(_QWORD *)((char *)this + 340) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 114) = a4;
  *((_QWORD *)this + 115) = a5;
  *((_DWORD *)this + 232) = -1;
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::Hash((uint64_t)this + 936, 0, 16);
  *((_BYTE *)this + 224) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_BYTE *)this + 156) = 0;
  *((_WORD *)this + 144) = 0;
  *((_BYTE *)this + 290) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 137) = 0;
  *((_BYTE *)this + 568) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 529) = 0u;
  v12 = *((unsigned int *)a2 + 4);
  v13 = *((_QWORD *)this + 114);
  if (v13)
    ++*(_DWORD *)(v13 + 36);
  v14 = *((_QWORD *)this + 115);
  if (v14)
    ++*(_DWORD *)(v14 + 36);
  *((_WORD *)this + 448) = 0;
  if (*((_DWORD *)this + 71) < v12)
  {
    v45 = 0;
    *((_DWORD *)this + 71) = realloc_array(*((_QWORD **)this + 34), &v45, v12, *((unsigned int *)this + 70), *((unsigned int *)this + 70), 1);
    *((_QWORD *)this + 34) = v45;
    *((_DWORD *)this + 70) = v12;
LABEL_8:
    bzero(*((void **)this + 34), v12);
    v15 = 0;
    goto LABEL_9;
  }
  *((_DWORD *)this + 70) = v12;
  if ((_DWORD)v12)
    goto LABEL_8;
  v15 = 1;
LABEL_9:
  *((_BYTE *)this + 898) = 0;
  v16 = *((_DWORD *)this + 21);
  if (v12 > v16)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, v12 - v16, 0);
  v17 = *((unsigned int *)this + 20);
  if (v17 <= v12)
  {
    if (v17 < v12)
    {
      v20 = v12 - v17;
      v21 = 16 * v17;
      do
      {
        v22 = (_QWORD *)(*v9 + v21);
        *v22 = 0;
        v22[1] = 0;
        v21 += 16;
        --v20;
      }
      while (v20);
    }
  }
  else if ((int)v17 > (int)v12)
  {
    v18 = (int)v17;
    v19 = 16 * (int)v17 - 16;
    do
    {
      --v18;
      DgnIArray<Utterance *>::~DgnIArray(*v9 + v19);
      v19 -= 16;
    }
    while (v18 > (int)v12);
  }
  *((_DWORD *)this + 20) = v12;
  v23 = *((_DWORD *)this + 25);
  if (v12 > v23)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 88, v12 - v23, 0);
  v24 = *((unsigned int *)this + 24);
  if (v24 <= v12)
  {
    if (v24 < v12)
    {
      v27 = v12 - v24;
      v28 = 16 * v24;
      do
      {
        v29 = (_QWORD *)(*v10 + v28);
        *v29 = 0;
        v29[1] = 0;
        v28 += 16;
        --v27;
      }
      while (v27);
    }
  }
  else if ((int)v24 > (int)v12)
  {
    v25 = (int)v24;
    v26 = 16 * (int)v24 - 16;
    do
    {
      --v25;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v10 + v26);
      v26 -= 16;
    }
    while (v25 > (int)v12);
  }
  *((_DWORD *)this + 24) = v12;
  if ((v15 & 1) == 0)
  {
    v30 = 0;
    v31 = v12;
    do
    {
      v32 = *v9 + v30;
      v33 = *(_DWORD *)(v32 + 12);
      if (v33 <= 0x63)
        DgnArray<RecogResultToken>::reallocElts(v32, 100 - v33, 0);
      v34 = *v10 + v30;
      v35 = *(_DWORD *)(v34 + 12);
      if (v35 <= 0x63)
        DgnPrimArray<unsigned int>::reallocElts(v34, 100 - v35, 0);
      v30 += 16;
      --v31;
    }
    while (v31);
  }
  v36 = *((_DWORD *)this + 29);
  if (v12 > v36)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 104, v12 - v36, 0);
  *((_DWORD *)this + 28) = v12;
  v37 = *((_DWORD *)this + 33);
  if (v37 <= 0x63)
    DgnArray<WordLatticeLC>::reallocElts((uint64_t)this + 120, 100 - v37, 0);
  v38 = *((_DWORD *)this + 37);
  if (v38 <= 0x63)
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 136, 100 - v38, 0);
  if (a3)
  {
    v39 = MemChunkAlloc(0x670uLL, 0);
    RecogStats::RecogStats((RecogStats *)v39);
    *((_QWORD *)this + 113) = v39;
    v40 = *((_DWORD *)v39 + 3);
    if (v12 > v40)
      DgnArray<RecogLayerStats>::reallocElts((uint64_t)v39, v12 - v40, 0);
    v41 = *((_DWORD *)v39 + 2);
    if (v41 <= v12)
    {
      if (v41 < v12)
      {
        v42 = v12 - v41;
        v43 = 2368 * v41;
        do
        {
          RecogLayerStats::RecogLayerStats((RecogLayerStats *)(*v39 + v43));
          v43 += 2368;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      DgnArray<RecogLayerStats>::destructAt(v39, v12, v41 - v12);
    }
    *((_DWORD *)v39 + 2) = v12;
  }
  *((_BYTE *)this + 880) = 0;
}

void sub_2099C5E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(a12);
  DgnIArray<Utterance *>::~DgnIArray(a13);
  DgnIArray<Utterance *>::~DgnIArray(a14);
  DgnIArray<Utterance *>::~DgnIArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21 + 416);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21 + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v22);
  DgnIArray<Utterance *>::~DgnIArray(v21);
  DgnArray<WordLatticeLC>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v20);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v19);
  DgnIOwnArray<FstCore *>::releaseAll(a11);
  DgnIOwnArray<ParamSetBase *>::releaseAll(a10);
  DgnIOwnArray<RecogSpecLayer *>::releaseAll(v18 + 16);
  _Unwind_Resume(a1);
}

void RecogController::~RecogController(RecogController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_QWORD *)this = &off_24C2151A8;
  v2 = *((_QWORD *)this + 114);
  if (v2)
  {
    --*(_DWORD *)(v2 + 36);
    *((_QWORD *)this + 114) = 0;
  }
  v3 = *((_QWORD *)this + 115);
  if (v3)
  {
    --*(_DWORD *)(v3 + 36);
    *((_QWORD *)this + 115) = 0;
  }
  v4 = (uint64_t *)((char *)this + 32);
  if (*((_DWORD *)this + 10))
  {
    v5 = 0;
    do
    {
      v6 = *v4;
      v7 = *(_QWORD **)(*v4 + 8 * v5);
      if (v7)
      {
        (*(void (**)(_QWORD))*v7)(*(_QWORD *)(*v4 + 8 * v5));
        MemChunkFree(v7, 0);
        v6 = *v4;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
      DgnDelete<FstCore>(*(FstCore **)(*((_QWORD *)this + 6) + 8 * v5));
      *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5++) = 0;
    }
    while (v5 < *((unsigned int *)this + 10));
  }
  v8 = (_QWORD *)*((_QWORD *)this + 31);
  if (v8)
  {
    (*(void (**)(_QWORD))(*v8 + 16))(*((_QWORD *)this + 31));
    MemChunkFree(v8, 0);
  }
  *((_QWORD *)this + 31) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 32));
  *((_QWORD *)this + 32) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 33));
  *((_QWORD *)this + 33) = 0;
  DgnDelete<ReproMgr>(*((ReproMgr **)this + 111));
  *((_QWORD *)this + 111) = 0;
  DgnDelete<RecogStats>(*((_QWORD *)this + 113));
  *((_QWORD *)this + 113) = 0;
  DgnDelete<ReturnListQueue>(*((ReturnListQueue **)this + 65));
  *((_QWORD *)this + 65) = 0;
  DgnDelete<PrefilterResult>(*((PrefilterResult **)this + 66));
  *((_QWORD *)this + 66) = 0;
  DgnDelete<PrefilterResult>(*((PrefilterResult **)this + 67));
  *((_QWORD *)this + 67) = 0;
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash((uint64_t)this + 936);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 864);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 816);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 576);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  DgnArray<WordLatticeLC>::releaseAll((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 88);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 72);
  DgnIOwnArray<FstCore *>::releaseAll((uint64_t)this + 48);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 32);
  DgnIOwnArray<RecogSpecLayer *>::releaseAll((uint64_t)this + 16);
}

{
  RecogController::~RecogController(this);
  JUMPOUT(0x20BD149A8);
}

ReproMgr *DgnDelete<ReproMgr>(ReproMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    ReproMgr::~ReproMgr(result);
    return (ReproMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<RecogStats>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnArray<RecogLayerStats>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

ReturnListQueue *DgnDelete<ReturnListQueue>(ReturnListQueue *result)
{
  _QWORD *v1;

  if (result)
  {
    ReturnListQueue::~ReturnListQueue(result);
    return (ReturnListQueue *)MemChunkFree(v1, 0);
  }
  return result;
}

void RecogController::printSize(RecogController *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  PelScoreCacheData *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  PelScoreCacheData *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  int v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  void *v562;
  ReproMgr *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  void *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  RecogStats *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  void *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  void *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  void *v613;
  uint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t v618[4];

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3050, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v16 = (void *)v618[0];
  else
    v16 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D4F0, a3, &unk_209A7D4F0, v16);
  DgnString::~DgnString((DgnString *)v618);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D4F0);
  v21 = sizeObject<RecogSpecLayer *>((uint64_t)this + 16, 0) + 6;
  v22 = sizeObject<RecogSpecLayer *>((uint64_t)this + 16, 1) + 6;
  v23 = (a3 + 1);
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3051, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v29 = (void *)v618[0];
  else
    v29 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_209A7D4F0, (34 - a3), (34 - a3), v29, v21, v22, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3052, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v34 = (void *)v618[0];
  else
    v34 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v30, v31, v32, v33, (a3 + 1), &unk_209A7D4F0, (a3 + 1), &unk_209A7D4F0, v34);
  v615 = a6;
  DgnString::~DgnString((DgnString *)v618);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v35, v36, v37, v38, (a3 + 1), &unk_209A7D4F0);
  v39 = *((unsigned int *)this + 10);
  v614 = a3;
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = (a3 + 2);
    do
    {
      v45 = *((_QWORD *)this + 4);
      if (*(_QWORD *)(v45 + 8 * v40))
      {
        v617 = 0;
        v618[0] = 0;
        v616 = 0;
        Recognizer::printSize(*(Recognizer **)(v45 + 8 * v40), v40, v44, v618, &v617, &v616);
        v43 += v618[0];
        v42 += v617;
        v41 += v616;
        v39 = *((unsigned int *)this + 10);
      }
      ++v40;
    }
    while (v40 < v39);
  }
  else
  {
    v43 = 0;
    v42 = 0;
    v41 = 0;
    v39 = 0;
  }
  v46 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v46 = 16;
  v47 = v46 + v43;
  v48 = v46 + v42;
  v49 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v49 = 3;
  v50 = v47 + ((unint64_t)*((unsigned int *)this + 11) << v49);
  v51 = v48 + (v39 << v49);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3052, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v56 = (void *)v618[0];
  else
    v56 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v23, &unk_209A7D4F0, v24, v24, v56, v50, v51, v41);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v50;
  *a5 += v51;
  *v615 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3053, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v61 = (void *)v618[0];
  else
    v61 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v57, v58, v59, v60, v23, &unk_209A7D4F0, v23, &unk_209A7D4F0, v61);
  DgnString::~DgnString((DgnString *)v618);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v62, v63, v64, v65, v23, &unk_209A7D4F0);
  v66 = *((unsigned int *)this + 14);
  if ((_DWORD)v66)
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    do
    {
      v71 = *((_QWORD *)this + 6);
      if (*(_QWORD *)(v71 + 8 * v67))
      {
        v617 = 0;
        v618[0] = 0;
        v616 = 0;
        FstCore::printSize(*(FstCore **)(v71 + 8 * v67), v67, (v614 + 2), v618, &v617, &v616);
        v70 += v618[0];
        v69 += v617;
        v68 += v616;
        v66 = *((unsigned int *)this + 14);
      }
      ++v67;
    }
    while (v67 < v66);
  }
  else
  {
    v70 = 0;
    v69 = 0;
    v68 = 0;
    v66 = 0;
  }
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = v72 + v70;
  v74 = v72 + v69;
  v75 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v75 = 3;
  v76 = v73 + ((unint64_t)*((unsigned int *)this + 15) << v75);
  v77 = v74 + (v66 << v75);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3053, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v82 = (void *)v618[0];
  else
    v82 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v23, &unk_209A7D4F0, v24, v24, v82, v76, v77, v68);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v76;
  *a5 += v77;
  *v615 += v68;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3055, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v87 = (void *)v618[0];
  else
    v87 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v23, &unk_209A7D4F0, v24, v24, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  v88 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 0);
  v89 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 1);
  v90 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3057, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v95 = (void *)v618[0];
  else
    v95 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v23, &unk_209A7D4F0, v24, v24, v95, v88, v89, v90);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v88;
  *a5 += v89;
  *v615 += v90;
  v96 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 88, 0);
  v97 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 88, 1);
  v618[0] = 0;
  v618[1] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3059, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v102 = (void *)v618[0];
  else
    v102 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v23, &unk_209A7D4F0, v24, v24, v102, v96, v97, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v96;
  *a5 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v103 = 12;
  else
    v103 = 16;
  v104 = *((unsigned int *)this + 28);
  v105 = *((_DWORD *)this + 29);
  if (v105 >= v104)
  {
    v106 = 0;
    if ((int)v104 > 0)
      v103 += 4 * (v104 - 1) + 4;
    v107 = v103 + 4 * (v105 - v104);
  }
  else
  {
    v106 = 4 * v104;
    v107 = v103;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3061, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v112 = (void *)v618[0];
  else
    v112 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v23, &unk_209A7D4F0, v24, v24, v112, v107, v103, v106);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v107;
  *a5 += v103;
  *v615 += v106;
  v113 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 0);
  v114 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 1);
  v115 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3063, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v120 = (void *)v618[0];
  else
    v120 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v23, &unk_209A7D4F0, v24, v24, v120, v113, v114, v115);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v113;
  *a5 += v114;
  *v615 += v115;
  v121 = sizeObject<HistContents>((uint64_t)this + 136, 0);
  v122 = sizeObject<HistContents>((uint64_t)this + 136, 1);
  v618[0] = 0x3FFFFAFFFFFFLL;
  *(_OWORD *)&v618[1] = xmmword_209A593D0;
  v618[3] = 0x1F0000001FLL;
  sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3065, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v127 = (void *)v618[0];
  else
    v127 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v23, &unk_209A7D4F0, v24, v24, v127, v121, v122, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v121;
  *a5 += v122;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3067, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v132 = (void *)v618[0];
  else
    v132 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v23, &unk_209A7D4F0, v24, v24, v132, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3069, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v137 = (void *)v618[0];
  else
    v137 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v23, &unk_209A7D4F0, v24, v24, v137, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v138 = SnapTime::sizeObject((uint64_t)this + 160, 0);
  v139 = SnapTime::sizeObject((uint64_t)this + 160, 1);
  v140 = SnapTime::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3071, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v145 = (void *)v618[0];
  else
    v145 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v23, &unk_209A7D4F0, v24, v24, v145, v138, v139, v140);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v138;
  *a5 += v139;
  *v615 += v140;
  v146 = SnapTime::sizeObject((uint64_t)this + 192, 0);
  v147 = SnapTime::sizeObject((uint64_t)this + 192, 1);
  v148 = SnapTime::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3073, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v153 = (void *)v618[0];
  else
    v153 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v23, &unk_209A7D4F0, v24, v24, v153, v146, v147, v148);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v146;
  *a5 += v147;
  *v615 += v148;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3075, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v158 = (void *)v618[0];
  else
    v158 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v23, &unk_209A7D4F0, v24, v24, v158, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v159 = 4;
  else
    v159 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3076, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v164 = (void *)v618[0];
  else
    v164 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v23, &unk_209A7D4F0, v24, v24, v164, v159, v159, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v159;
  *a5 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v165 = 4;
  else
    v165 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3077, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v170 = (void *)v618[0];
  else
    v170 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v23, &unk_209A7D4F0, v24, v24, v170, v165, v165, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v165;
  *a5 += v165;
  v171 = *((_QWORD *)this + 31);
  if (v171)
  {
    v617 = 0;
    v618[0] = 0;
    v616 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v171 + 32))(v171, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v172 = 4;
  else
    v172 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3079, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v177 = (void *)v618[0];
  else
    v177 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v23, &unk_209A7D4F0, v24, v24, v177, v172, v172, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v172;
  *a5 += v172;
  v178 = (PelScoreCacheData *)*((_QWORD *)this + 32);
  if (v178)
  {
    v617 = 0;
    v618[0] = 0;
    v616 = 0;
    PelScoreCacheData::printSize(v178, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v179 = 4;
  else
    v179 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3081, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v184 = (void *)v618[0];
  else
    v184 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v23, &unk_209A7D4F0, v24, v24, v184, v179, v179, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v179;
  *a5 += v179;
  v185 = (PelScoreCacheData *)*((_QWORD *)this + 33);
  if (v185)
  {
    v617 = 0;
    v618[0] = 0;
    v616 = 0;
    PelScoreCacheData::printSize(v185, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v186 = 4;
  else
    v186 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3083, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v191 = (void *)v618[0];
  else
    v191 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v23, &unk_209A7D4F0, v24, v24, v191, v186, v186, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v186;
  *a5 += v186;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v192 = 12;
  else
    v192 = 16;
  v193 = *((_DWORD *)this + 70);
  v194 = *((_DWORD *)this + 71);
  v195 = v194 >= v193;
  v196 = v194 - v193;
  if (v195)
  {
    v198 = v193 & ~(v193 >> 31);
    v193 = 0;
    v197 = v192 + v198;
    v192 += v198 + v196;
  }
  else
  {
    v197 = v192;
  }
  v199 = v193;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3085, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v204 = (void *)v618[0];
  else
    v204 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v23, &unk_209A7D4F0, v24, v24, v204, v192, v197, v199);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v192;
  *a5 += v197;
  *v615 += v199;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3087, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v209 = (void *)v618[0];
  else
    v209 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v23, &unk_209A7D4F0, v24, v24, v209, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3089, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v214 = (void *)v618[0];
  else
    v214 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v23, &unk_209A7D4F0, v24, v24, v214, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3091, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v219 = (void *)v618[0];
  else
    v219 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v23, &unk_209A7D4F0, v24, v24, v219, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3093, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v224 = (void *)v618[0];
  else
    v224 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v23, &unk_209A7D4F0, v24, v24, v224, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3095, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v229 = (void *)v618[0];
  else
    v229 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v225, v226, v227, v228, v23, &unk_209A7D4F0, v24, v24, v229, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3097, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v234 = (void *)v618[0];
  else
    v234 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v23, &unk_209A7D4F0, v24, v24, v234, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3099, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v239 = (void *)v618[0];
  else
    v239 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v235, v236, v237, v238, v23, &unk_209A7D4F0, v24, v24, v239, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3101, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v244 = (void *)v618[0];
  else
    v244 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v23, &unk_209A7D4F0, v24, v24, v244, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3103, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v249 = (void *)v618[0];
  else
    v249 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v245, v246, v247, v248, v23, &unk_209A7D4F0, v24, v24, v249, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3105, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v254 = (void *)v618[0];
  else
    v254 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v23, &unk_209A7D4F0, v24, v24, v254, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3107, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v259 = (void *)v618[0];
  else
    v259 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v255, v256, v257, v258, v23, &unk_209A7D4F0, v24, v24, v259, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3109, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v264 = (void *)v618[0];
  else
    v264 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v23, &unk_209A7D4F0, v24, v24, v264, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3111, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v269 = (void *)v618[0];
  else
    v269 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v265, v266, v267, v268, v23, &unk_209A7D4F0, v24, v24, v269, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3113, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v274 = (void *)v618[0];
  else
    v274 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v23, &unk_209A7D4F0, v24, v24, v274, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3115, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v279 = (void *)v618[0];
  else
    v279 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v275, v276, v277, v278, v23, &unk_209A7D4F0, v24, v24, v279, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3117, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v284 = (void *)v618[0];
  else
    v284 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v280, v281, v282, v283, v23, &unk_209A7D4F0, v24, v24, v284, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v285 = 12;
  else
    v285 = 16;
  v286 = *((unsigned int *)this + 88);
  v287 = *((_DWORD *)this + 89);
  if (v287 >= v286)
  {
    v288 = 0;
    if ((int)v286 > 0)
      v285 += 8 * (v286 - 1) + 8;
    v289 = v285 + 8 * (v287 - v286);
  }
  else
  {
    v288 = 8 * v286;
    v289 = v285;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3119, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v294 = (void *)v618[0];
  else
    v294 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v290, v291, v292, v293, v23, &unk_209A7D4F0, v24, v24, v294, v289, v285, v288);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v289;
  *a5 += v285;
  *v615 += v288;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3121, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v299 = (void *)v618[0];
  else
    v299 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v295, v296, v297, v298, v23, &unk_209A7D4F0, v24, v24, v299, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3123, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v304 = (void *)v618[0];
  else
    v304 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v23, &unk_209A7D4F0, v24, v24, v304, 8, 8, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3125, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v309 = (void *)v618[0];
  else
    v309 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v305, v306, v307, v308, v23, &unk_209A7D4F0, v24, v24, v309, 8, 8, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 8;
  *a5 += 8;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v310 = 4;
  else
    v310 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3127, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v315 = (void *)v618[0];
  else
    v315 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v311, v312, v313, v314, v23, &unk_209A7D4F0, v24, v24, v315, v310, v310, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v310;
  *a5 += v310;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3129, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v320 = (void *)v618[0];
  else
    v320 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v23, &unk_209A7D4F0, v24, v24, v320, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v321 = 12;
  else
    v321 = 16;
  v322 = *((_DWORD *)this + 102);
  v323 = *((_DWORD *)this + 103);
  v195 = v323 >= v322;
  v324 = v323 - v322;
  if (v195)
  {
    v326 = v322 & ~(v322 >> 31);
    v322 = 0;
    v325 = v321 + v326;
    v321 += v326 + v324;
  }
  else
  {
    v325 = v321;
  }
  v327 = v322;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3131, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v332 = (void *)v618[0];
  else
    v332 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v328, v329, v330, v331, v23, &unk_209A7D4F0, v24, v24, v332, v321, v325, v327);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v321;
  *a5 += v325;
  *v615 += v327;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3133, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v337 = (void *)v618[0];
  else
    v337 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v333, v334, v335, v336, v23, &unk_209A7D4F0, v24, v24, v337, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v338 = 4;
  else
    v338 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3134, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v343 = (void *)v618[0];
  else
    v343 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v339, v340, v341, v342, v23, &unk_209A7D4F0, v24, v24, v343, v338, v338, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v338;
  *a5 += v338;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v344 = 4;
  else
    v344 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3135, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v349 = (void *)v618[0];
  else
    v349 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v345, v346, v347, v348, v23, &unk_209A7D4F0, v24, v24, v349, v344, v344, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v344;
  *a5 += v344;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v350 = 4;
  else
    v350 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3137, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v355 = (void *)v618[0];
  else
    v355 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v351, v352, v353, v354, v23, &unk_209A7D4F0, v24, v24, v355, v350, v350, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v350;
  *a5 += v350;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v356 = 4;
  else
    v356 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3139, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v361 = (void *)v618[0];
  else
    v361 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v357, v358, v359, v360, v23, &unk_209A7D4F0, v24, v24, v361, v356, v356, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v356;
  *a5 += v356;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v362 = 4;
  else
    v362 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3141, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v367 = (void *)v618[0];
  else
    v367 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v363, v364, v365, v366, v23, &unk_209A7D4F0, v24, v24, v367, v362, v362, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v362;
  *a5 += v362;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v368 = 4;
  else
    v368 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3143, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v373 = (void *)v618[0];
  else
    v373 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v23, &unk_209A7D4F0, v24, v24, v373, v368, v368, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v368;
  *a5 += v368;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v374 = 4;
  else
    v374 = 8;
  v375 = *((_QWORD *)this + 59);
  if (v375)
  {
    v376 = v374 + sizeObject<DgnPrimArray<unsigned char>>(v375 + 8, 0) + 5;
    v377 = *((_QWORD *)this + 59);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v374 = 4;
    else
      v374 = 8;
    if (v377)
    {
      v374 += sizeObject<DgnPrimArray<unsigned char>>(v377 + 8, 1) + 5;
      if (*((_QWORD *)this + 59))
      {
        v618[0] = 0;
        v618[1] = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
      }
    }
  }
  else
  {
    v376 = v374;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3145, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v382 = (void *)v618[0];
  else
    v382 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v23, &unk_209A7D4F0, v24, v24, v382, v376, v374, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v376;
  *a5 += v374;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v383 = 4;
  else
    v383 = 8;
  v384 = *((_QWORD *)this + 60);
  if (v384)
  {
    v385 = v383 + sizeObject<DgnPrimArray<unsigned char>>(v384 + 8, 0) + 5;
    v386 = *((_QWORD *)this + 60);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v383 = 4;
    else
      v383 = 8;
    if (v386)
    {
      v383 += sizeObject<DgnPrimArray<unsigned char>>(v386 + 8, 1) + 5;
      if (*((_QWORD *)this + 60))
      {
        v618[0] = 0;
        v618[1] = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
      }
    }
  }
  else
  {
    v385 = v383;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3147, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v391 = (void *)v618[0];
  else
    v391 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v387, v388, v389, v390, v23, &unk_209A7D4F0, v24, v24, v391, v385, v383, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v385;
  *a5 += v383;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3149, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v396 = (void *)v618[0];
  else
    v396 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v392, v393, v394, v395, v23, &unk_209A7D4F0, v24, v24, v396, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3151, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v401 = (void *)v618[0];
  else
    v401 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v397, v398, v399, v400, v23, &unk_209A7D4F0, v24, v24, v401, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v402 = 4;
  else
    v402 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3152, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v407 = (void *)v618[0];
  else
    v407 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v403, v404, v405, v406, v23, &unk_209A7D4F0, v24, v24, v407, v402, v402, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v402;
  *a5 += v402;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v408 = 4;
  else
    v408 = 8;
  v409 = *((_QWORD *)this + 63);
  if (v409)
  {
    v410 = v408 + sizeObject<ScoreFixArray>(v409 + 8, 0) + 5;
    v411 = *((_QWORD *)this + 63);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v408 = 4;
    else
      v408 = 8;
    if (v411)
    {
      v408 += sizeObject<ScoreFixArray>(v411 + 8, 1) + 5;
      if (*((_QWORD *)this + 63))
      {
        v618[0] = 0;
        LODWORD(v618[1]) = 0;
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v618);
      }
    }
  }
  else
  {
    v410 = v408;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3154, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v416 = (void *)v618[0];
  else
    v416 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v412, v413, v414, v415, v23, &unk_209A7D4F0, v24, v24, v416, v410, v408, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v410;
  *a5 += v408;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v417 = 4;
  else
    v417 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3156, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v422 = (void *)v618[0];
  else
    v422 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v418, v419, v420, v421, v23, &unk_209A7D4F0, v24, v24, v422, v417, v417, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v417;
  *a5 += v417;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v423 = 4;
  else
    v423 = 8;
  v424 = *((_QWORD *)this + 65);
  if (v424)
  {
    v425 = sizeObject(v424, 0) + v423;
    v426 = *((_QWORD *)this + 65);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v423 = 4;
    else
      v423 = 8;
    if (v426 && (v423 += sizeObject(v426, 1), (v427 = *((_QWORD *)this + 65)) != 0))
      v428 = sizeObject(v427, 3);
    else
      v428 = 0;
  }
  else
  {
    v428 = 0;
    v425 = v423;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3158, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v433 = (void *)v618[0];
  else
    v433 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v429, v430, v431, v432, v23, &unk_209A7D4F0, v24, v24, v433, v425, v423, v428);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v425;
  *a5 += v423;
  *v615 += v428;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v434 = 4;
  else
    v434 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3159, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v439 = (void *)v618[0];
  else
    v439 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v435, v436, v437, v438, v23, &unk_209A7D4F0, v24, v24, v439, v434, v434, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v434;
  *a5 += v434;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v440 = 4;
  else
    v440 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3161, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v445 = (void *)v618[0];
  else
    v445 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v23, &unk_209A7D4F0, v24, v24, v445, v440, v440, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v440;
  *a5 += v440;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3163, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v450 = (void *)v618[0];
  else
    v450 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v23, &unk_209A7D4F0, v24, v24, v450, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3166, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v455 = (void *)v618[0];
  else
    v455 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v451, v452, v453, v454, v23, &unk_209A7D4F0, v24, v24, v455, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v456 = 12;
  else
    v456 = 16;
  v457 = *((_DWORD *)this + 140);
  v458 = *((_DWORD *)this + 141);
  v195 = v458 >= v457;
  v459 = v458 - v457;
  if (v195)
  {
    v461 = v457 & ~(v457 >> 31);
    v457 = 0;
    v460 = v456 + v461;
    v456 += v461 + v459;
  }
  else
  {
    v460 = v456;
  }
  v462 = v457;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3168, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v467 = (void *)v618[0];
  else
    v467 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v463, v464, v465, v466, v23, &unk_209A7D4F0, v24, v24, v467, v456, v460, v462);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v456;
  *a5 += v460;
  *v615 += v462;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3170, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v472 = (void *)v618[0];
  else
    v472 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v468, v469, v470, v471, v23, &unk_209A7D4F0, v24, v24, v472, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v473 = sizeObject<Germ>((uint64_t)this + 576, 0);
  v474 = sizeObject<Germ>((uint64_t)this + 576, 1);
  v618[0] = 4211081215;
  sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3172, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v479 = (void *)v618[0];
  else
    v479 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v475, v476, v477, v478, v23, &unk_209A7D4F0, v24, v24, v479, v473, v474, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v473;
  *a5 += v474;
  v480 = SnapTime::sizeObject((uint64_t)this + 592, 0);
  v481 = SnapTime::sizeObject((uint64_t)this + 592, 1);
  v482 = SnapTime::sizeObject((uint64_t)this + 592, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3174, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v487 = (void *)v618[0];
  else
    v487 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v483, v484, v485, v486, v23, &unk_209A7D4F0, v24, v24, v487, v480, v481, v482);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v480;
  *a5 += v481;
  *v615 += v482;
  v488 = SnapTime::sizeObject((uint64_t)this + 624, 0);
  v489 = SnapTime::sizeObject((uint64_t)this + 624, 1);
  v490 = SnapTime::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3176, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v495 = (void *)v618[0];
  else
    v495 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v491, v492, v493, v494, v23, &unk_209A7D4F0, v24, v24, v495, v488, v489, v490);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v488;
  *a5 += v489;
  *v615 += v490;
  v496 = SnapTime::sizeObject((uint64_t)this + 656, 0);
  v497 = SnapTime::sizeObject((uint64_t)this + 656, 1);
  v498 = SnapTime::sizeObject((uint64_t)this + 656, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3178, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v503 = (void *)v618[0];
  else
    v503 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v499, v500, v501, v502, v23, &unk_209A7D4F0, v24, v24, v503, v496, v497, v498);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v496;
  *a5 += v497;
  *v615 += v498;
  v504 = SnapTime::sizeObject((uint64_t)this + 688, 0);
  v505 = SnapTime::sizeObject((uint64_t)this + 688, 1);
  v506 = SnapTime::sizeObject((uint64_t)this + 688, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3180, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v511 = (void *)v618[0];
  else
    v511 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v507, v508, v509, v510, v23, &unk_209A7D4F0, v24, v24, v511, v504, v505, v506);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v504;
  *a5 += v505;
  *v615 += v506;
  v512 = SnapTime::sizeObject((uint64_t)this + 720, 0);
  v513 = SnapTime::sizeObject((uint64_t)this + 720, 1);
  v514 = SnapTime::sizeObject((uint64_t)this + 720, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3182, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v519 = (void *)v618[0];
  else
    v519 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v515, v516, v517, v518, v23, &unk_209A7D4F0, v24, v24, v519, v512, v513, v514);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v512;
  *a5 += v513;
  *v615 += v514;
  v520 = SnapTime::sizeObject((uint64_t)this + 752, 0);
  v521 = SnapTime::sizeObject((uint64_t)this + 752, 1);
  v522 = SnapTime::sizeObject((uint64_t)this + 752, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3184, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v527 = (void *)v618[0];
  else
    v527 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v523, v524, v525, v526, v23, &unk_209A7D4F0, v24, v24, v527, v520, v521, v522);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v520;
  *a5 += v521;
  *v615 += v522;
  v528 = SnapTime::sizeObject((uint64_t)this + 784, 0);
  v529 = SnapTime::sizeObject((uint64_t)this + 784, 1);
  v530 = SnapTime::sizeObject((uint64_t)this + 784, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3186, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v535 = (void *)v618[0];
  else
    v535 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v531, v532, v533, v534, v23, &unk_209A7D4F0, v24, v24, v535, v528, v529, v530);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v528;
  *a5 += v529;
  *v615 += v530;
  v536 = sizeObject<SnapTime>((uint64_t)this + 816, 0);
  v537 = sizeObject<SnapTime>((uint64_t)this + 816, 1);
  memset(v618, 0, sizeof(v618));
  SnapTime::sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3188, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v542 = (void *)v618[0];
  else
    v542 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v538, v539, v540, v541, v23, &unk_209A7D4F0, v24, v24, v542, v536, v537, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v536;
  *a5 += v537;
  v543 = SnapTime::sizeObject((uint64_t)this + 832, 0);
  v544 = SnapTime::sizeObject((uint64_t)this + 832, 1);
  v545 = SnapTime::sizeObject((uint64_t)this + 832, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3190, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v550 = (void *)v618[0];
  else
    v550 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v546, v547, v548, v549, v23, &unk_209A7D4F0, v24, v24, v550, v543, v544, v545);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v543;
  *a5 += v544;
  *v615 += v545;
  v551 = sizeObject<SnapTime>((uint64_t)this + 864, 0);
  v552 = sizeObject<SnapTime>((uint64_t)this + 864, 1);
  memset(v618, 0, sizeof(v618));
  SnapTime::sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3192, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v557 = (void *)v618[0];
  else
    v557 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v553, v554, v555, v556, v23, &unk_209A7D4F0, v24, v24, v557, v551, v552, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v551;
  *a5 += v552;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3194, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v562 = (void *)v618[0];
  else
    v562 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v558, v559, v560, v561, v23, &unk_209A7D4F0, v24, v24, v562, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v563 = (ReproMgr *)*((_QWORD *)this + 111);
  if (v563)
  {
    v617 = 0;
    v618[0] = 0;
    v616 = 0;
    ReproMgr::printSize(v563, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v564 = 4;
  else
    v564 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3196, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v569 = (void *)v618[0];
  else
    v569 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v565, v566, v567, v568, v23, &unk_209A7D4F0, v24, v24, v569, v564, v564, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v564;
  *a5 += v564;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3198, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v574 = (void *)v618[0];
  else
    v574 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v570, v571, v572, v573, v23, &unk_209A7D4F0, v24, v24, v574, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3200, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v579 = (void *)v618[0];
  else
    v579 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v575, v576, v577, v578, v23, &unk_209A7D4F0, v24, v24, v579, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3202, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v584 = (void *)v618[0];
  else
    v584 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v580, v581, v582, v583, v23, &unk_209A7D4F0, v24, v24, v584, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v585 = (RecogStats *)*((_QWORD *)this + 113);
  if (v585)
  {
    v617 = 0;
    v618[0] = 0;
    v616 = 0;
    RecogStats::printSize(v585, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v586 = 4;
  else
    v586 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3204, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v591 = (void *)v618[0];
  else
    v591 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v587, v588, v589, v590, v23, &unk_209A7D4F0, v24, v24, v591, v586, v586, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v586;
  *a5 += v586;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v592 = 4;
  else
    v592 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3206, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v597 = (void *)v618[0];
  else
    v597 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v593, v594, v595, v596, v23, &unk_209A7D4F0, v24, v24, v597, v592, v592, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v592;
  *a5 += v592;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v598 = 4;
  else
    v598 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3208, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v603 = (void *)v618[0];
  else
    v603 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v599, v600, v601, v602, v23, &unk_209A7D4F0, v24, v24, v603, v598, v598, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v598;
  *a5 += v598;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3210, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v608 = (void *)v618[0];
  else
    v608 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v604, v605, v606, v607, v23, &unk_209A7D4F0, v24, v24, v608, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3212, (DgnString *)v618);
  if (LODWORD(v618[1]))
    v613 = (void *)v618[0];
  else
    v613 = &unk_209A7D4F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v609, v610, v611, v612, v614, &unk_209A7D4F0, (35 - v614), (35 - v614), v613, *a4, *a5, *v615);
  DgnString::~DgnString((DgnString *)v618);
}

void sub_2099C90D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<RecogResultToken>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v4 = sizeObject<RecogResultToken>((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject<RecogResultToken>(*(_QWORD *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v10);
  return v5;
}

void sub_2099C9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<HistContents>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v10 = 0x3FFFFAFFFFFFLL;
  v11 = xmmword_209A593D0;
  v12 = 0x1F0000001FLL;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 32 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t sizeObject<SnapTime>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD v10[2];

  memset(v10, 0, sizeof(v10));
  v4 = SnapTime::sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += SnapTime::sizeObject(*(_QWORD *)a1 + 32 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t RecogController::setupRecognizers(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  char v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  const ArcGraph *ArcGraphOrThrow;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int *v43;
  __int16 v44;

  v9 = a4;
  v12 = result;
  v13 = *(unsigned __int16 *)(result + 12);
  if (v13 == 0xFFFF)
    v14 = 0;
  else
    v14 = *(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 40) + 8 * v13);
  if (*(_DWORD *)(result + 24))
  {
    v15 = 0;
    v43 = (unsigned int *)(result + 56);
    v44 = *(_WORD *)(result + 10);
    v16 = (unsigned int *)(result + 40);
    do
    {
      v17 = *(unsigned __int16 *)(*a9 + 2 * v15);
      if (v17 != 127)
      {
        ArcGraphOrThrow = (const ArcGraph *)ModelMgr::getArcGraphOrThrow((ModelMgr *)ModelMgr::smpModelMgr, v17, a3, a4, a5, a6, a7, a8);
        v22 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v15);
        if (*(_DWORD *)(*(_QWORD *)(v22 + 296) + 132) == 1)
          v23 = 2;
        else
          v23 = 1;
        result = FstCore::makeRecognizer((__int128 *)(v22 + 216), v44, v14, v23, ArcGraphOrThrow);
        v24 = result;
        v25 = *(_DWORD *)(v12 + 56);
        if (v25 == *(_DWORD *)(v12 + 60))
        {
          result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 48, 1, 1);
          v25 = *v43;
        }
        *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v25) = v24;
        *(_DWORD *)(v12 + 56) = v25 + 1;
        v26 = *(_DWORD *)(v12 + 40);
        v27 = (_QWORD *)(v12 + 32);
        v28 = (unsigned int *)(v12 + 40);
        if (v26 != *(_DWORD *)(v12 + 44))
          goto LABEL_24;
        result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 32, 1, 1);
        v28 = (unsigned int *)(v12 + 40);
        v27 = (_QWORD *)(v12 + 32);
        goto LABEL_23;
      }
      if (*(_BYTE *)(v12 + 8))
      {
        v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v15) + 138) != 0;
        if (!v14)
          goto LABEL_18;
      }
      else
      {
        v18 = 0;
        if (!v14)
        {
LABEL_18:
          v20 = 0;
          v19 = 0;
          goto LABEL_19;
        }
      }
      v19 = *(_QWORD *)(v14 + 48);
      v20 = v14 + 80;
LABEL_19:
      result = Recognizer::makeRecognizer(*(_BYTE *)(v12 + 8) != 0, v18, v44, v20, v19, *(_BYTE *)(v12 + 14), *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v15), a5, a6, a7, a8);
      v29 = result;
      v30 = *(_DWORD *)(v12 + 40);
      if (v30 == *(_DWORD *)(v12 + 44))
      {
        result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 32, 1, 1);
        v30 = *v16;
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v30) = v29;
      *(_DWORD *)(v12 + 40) = v30 + 1;
      v26 = *(_DWORD *)(v12 + 56);
      v27 = (_QWORD *)(v12 + 48);
      v28 = v43;
      if (v26 != *(_DWORD *)(v12 + 60))
        goto LABEL_24;
      result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 48, 1, 1);
      v28 = v43;
      v27 = (_QWORD *)(v12 + 48);
LABEL_23:
      v26 = *v28;
LABEL_24:
      *(_QWORD *)(*v27 + 8 * v26) = 0;
      *v28 = v26 + 1;
      ++v15;
    }
    while (v15 < *(unsigned int *)(v12 + 24));
  }
  v31 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = *a2;
    do
    {
      v34 = v33 + 16 * v32;
      if (*(_DWORD *)(v34 + 8))
      {
        v35 = 0;
        do
        {
          if (v32 != v35)
          {
            v36 = *(unsigned __int16 *)(*(_QWORD *)v34 + 2 * v35);
            if (v36 != 20000)
            {
              v37 = *(_QWORD *)(v12 + 32);
              if (!*(_QWORD *)(v37 + 8 * v32) || !*(_QWORD *)(v37 + 8 * v35))
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3284, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Cross-layer thresholding");
              v38 = *(_DWORD *)(a3 + 8);
              if (v38)
                LOWORD(v38) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16 * v32) + 2 * v35);
              result = Recognizer::shadowBest(*(Recognizer **)(*(_QWORD *)(v12 + 32) + 8 * v32), *(Recognizer **)(*(_QWORD *)(v12 + 32) + 8 * v35), (__int16)v36, (__int16)v38, v9);
              v33 = *a2;
            }
          }
          ++v35;
          v34 = v33 + 16 * v32;
        }
        while (v35 < *(unsigned int *)(v34 + 8));
        v31 = *((unsigned int *)a2 + 2);
      }
      ++v32;
    }
    while (v32 < v31);
  }
  return result;
}

uint64_t RecogController::recognizeOneSingleLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v45, 1, 1);
  v27 = v46;
  *(_QWORD *)(v45 + 8 * v46) = a5;
  LODWORD(v46) = v27 + 1;
  v43 = 0;
  v44 = 0;
  DgnPrimArray<char>::reallocElts((uint64_t)&v43, 1, 1);
  v28 = v44;
  *(_BYTE *)(v43 + v44) = a15;
  LODWORD(v44) = v28 + 1;
  v29 = *(unsigned int *)(a9 + 8);
  v41 = 0;
  v42 = 0;
  if ((_DWORD)v29)
  {
    v39 = 0;
    v30 = realloc_array(0, &v39, 8 * v29, 0, 0, 1);
    v41 = v39;
    v31 = *(unsigned int *)(a9 + 8);
    LODWORD(v42) = v29;
    HIDWORD(v42) = v30 >> 3;
    v39 = 0;
    v40 = 0;
    if ((_DWORD)v31)
    {
      v37[0] = 0;
      v32 = realloc_array(0, v37, 8 * v31, 0, 0, 1);
      v33 = v37[0];
      v39 = v37[0];
      LODWORD(v29) = v42;
      LODWORD(v40) = v31;
      HIDWORD(v40) = v32 >> 3;
      if (!(_DWORD)v42)
        goto LABEL_9;
    }
    else
    {
      v33 = 0;
    }
    v34 = 0;
    do
    {
      v41[v34] = 0;
      v33[v34++] = 0;
    }
    while (v29 != v34);
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, _QWORD **, __int16, uint64_t, uint64_t, char, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4, &v45, a6, a7, a8, a9, a10, &v39, &v41, a11, a12, a13, a14, &v43, a16, a17,
    a18,
    a19,
    0,
    0,
    0);
  v38 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)a1 + 64))(a1, 0, 0, &v38);
  v37[0] = 0;
  v37[1] = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, v37);
  v35 = *(_QWORD *)v37[0];
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v39);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v45);
  return v35;
}

void sub_2099C9A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_2099C9AD8()
{
  JUMPOUT(0x2099C9AC8);
}

BOOL RecogController::haveCompletePrefilterResult(RecogController *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 66);
  return v1 && *v1 != 0;
}

uint64_t RecogController::extractPrefilterResult(RecogController *this)
{
  uint64_t v2;
  PrefilterResult *v3;
  _QWORD *v4;

  v2 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  *((_BYTE *)this + 898) = 1;
  v3 = (PrefilterResult *)*((_QWORD *)this + 67);
  if (v3)
  {
    PrefilterResult::~PrefilterResult(v3);
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 67) = 0;
  }
  return v2;
}

void RecogController::startRecognizeOne(uint64_t a1, uint64_t a2, uint64_t a3, PrefilterResult *a4, uint64_t **a5, _QWORD *a6, uint64_t a7, uint64_t *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, char a13, char a14, unsigned int *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,_OWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  MemChunkRegion *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t **v44;
  int v45;
  uint64_t i;
  int v47;
  uint64_t j;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t CollWords;
  int v57;
  PrefilterResult *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  int v63;
  __int128 v64;
  unsigned int *v65;
  unint64_t v66;
  uint64_t v68;
  unsigned int *v70;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  Constraint *StateConstraint;
  Recognizer *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  const char *v99;
  const char *v100;
  uint64_t k;
  uint64_t v102;
  int v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  double v113;
  int v114;
  uint64_t m;
  uint64_t v116;
  double v117;
  uint64_t v118;
  int v119;
  const char *v120;
  const char *v121;
  uint64_t n;
  uint64_t v123;
  int v124;
  const char *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  const char *v131;
  const char *v132;
  uint64_t ii;
  uint64_t v134;
  int v135;
  const char *v136;
  const char *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t jj;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t kk;
  char v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  BOOL v158;
  unsigned int v159;
  int HasFeatData;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  char *v174;
  char *v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  int v189;
  uint64_t v190;
  uint64_t FeaturesPerFrame;
  uint64_t TransformedFrames;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const PelMgr *v197;
  _QWORD *FrameTransformer;
  uint64_t *v199;
  ConstrainedTransAccMgr *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t MicrosecPerFrame;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t SigProc;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const PelMgr *v233;
  _QWORD *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  __int16 v240;
  unsigned int v241;
  uint64_t *v242;
  __int16 v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int RequiredVirtMapSize;
  uint64_t VirtMap;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  _OWORD *v259;
  uint64_t v260;
  _OWORD *v261;
  const PelScoreCacheData *v262;
  PelScoreCacheData **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  Recognizer *v273;
  Utterance *v274;
  int v275;
  Utterance *v276;
  int v277;
  FstCore *v278;
  Utterance *v279;
  int v280;
  Utterance *v281;
  uint64_t v282;
  PrefilterResult *v283;
  _QWORD *v284;
  char v285;
  uint64_t *v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v290;
  uint64_t **v291;
  void *v292[2];
  int v293;
  char v294;

  SnapTime::recordTime((SnapTime *)(a1 + 160), 1, 1, 1, 1);
  MemChunkRegion::resetInternalLocalMaxAllocBytes(0, v32);
  *(_QWORD *)(a1 + 888) = a23;
  v39 = *(unsigned int *)(a1 + 40);
  *(_BYTE *)(a1 + 898) = 0;
  *(_BYTE *)(a1 + 224) = a17;
  v40 = *a5;
  v283 = a4;
  v284 = a6;
  if (v39 >= 2)
  {
    v41 = 1;
    v42 = *(_DWORD *)(*v40 + 340);
    do
    {
      if (v42 != *(_DWORD *)((*a5)[v41] + 340))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3441, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchRecognitionContinuationInterval");
      ++v41;
    }
    while (v39 != v41);
    v287 = a7;
    v43 = v39;
    v44 = a5;
    v45 = *(unsigned __int8 *)(**a5 + 337);
    for (i = 1; i != v43; ++i)
    {
      if ((v45 != 0) != (*(_BYTE *)((*v44)[i] + 337) != 0))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3443, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchRecognitionBatchProcessing");
    }
    v47 = *(unsigned __int8 *)(**v44 + 385);
    for (j = 1; j != v43; ++j)
    {
      if ((v47 != 0) != (*(_BYTE *)((*v44)[j] + 385) != 0))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3445, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchEstimateAndPreScoreActivePels");
    }
    a5 = v44;
    v49 = 1;
    v50 = *(_DWORD *)(**v44 + 504);
    v39 = v43;
    do
    {
      if (v50 != *(_DWORD *)((*a5)[v49] + 504))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3447, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchPartialIncludePrefiltererResult");
      ++v49;
    }
    while (v43 != v49);
    v40 = *a5;
    a6 = v284;
    a2 = a2;
    a7 = v287;
  }
  v51 = a21;
  v52 = *v40;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(v52 + 340);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(v52 + 337);
  *(_BYTE *)(a1 + 880) = *(_BYTE *)(v52 + 385);
  *(_QWORD *)(a1 + 232) = a3;
  v53 = *(_QWORD *)(a1 + 904);
  if (v53)
  {
    *(_BYTE *)(v53 + 944) = a3 != 0;
    if (a3)
      v54 = *(_BYTE *)(a3 + 416) != 0;
    else
      v54 = 0;
    v55 = a19;
    *(_BYTE *)(v53 + 945) = v54;
    *(_BYTE *)(v53 + 946) = a19 != 0;
    *(_BYTE *)(v53 + 947) = a4 != 0;
    *(_DWORD *)(v53 + 948) = 0;
    if (a19)
    {
      CollWords = StateMgr::getCollWords(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)(a19 + 8))+ 56), *(_DWORD *)(a19 + 12), 0xFFFFu, 0, v35, v36, v37, v38);
      v55 = a19;
      v53 = *(_QWORD *)(a1 + 904);
      *(_DWORD *)(v53 + 948) += *(_DWORD *)(CollWords + 8);
    }
    if (a3)
      v57 = *(_DWORD *)(*(_QWORD *)(a3 + 432) + 208);
    else
      v57 = 0;
    *(_DWORD *)(v53 + 952) = v57;
    if (v55)
    {
      v58 = a4;
      v59 = a6;
      v60 = v55;
      *(_DWORD *)(*(_QWORD *)(a1 + 904) + 956) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55)
                                                             + 88);
      v61 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32);
      v62 = v60;
      a6 = v59;
      a4 = v58;
      v63 = *(_DWORD *)(v61(v62) + 92);
      v53 = *(_QWORD *)(a1 + 904);
    }
    else
    {
      v63 = 0;
      *(_DWORD *)(v53 + 956) = 0;
    }
    *(_DWORD *)(v53 + 960) = v63;
    *(_QWORD *)(v53 + 964) = *(_QWORD *)(**a5 + 152);
    v64 = a22[1];
    *(_OWORD *)(v53 + 1088) = *a22;
    *(_OWORD *)(v53 + 1104) = v64;
    v65 = *(unsigned int **)(a1 + 232);
    v51 = a21;
    if (v65 && *v65 - 1 <= 0xFFFFFFFD)
      *(_BYTE *)(*(_QWORD *)(a1 + 904) + 972) = ChannelMgr::getChannelType((ChannelMgr *)ChannelMgr::smpChannelMgr, *v65, v33, v34, v35, v36, v37, v38)- 1 < 2;
  }
  *(_QWORD *)(a1 + 424) = a19;
  *(_QWORD *)(a1 + 432) = a4;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = v51;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  if (!(_DWORD)v39)
  {
    v152 = 0;
    v88 = *a5;
    goto LABEL_146;
  }
  v66 = 0;
  v285 = 0;
  v68 = v39;
  v70 = a15;
  v286 = a6 + 1;
  v290 = v68;
  v288 = 8 * v68;
  v291 = a5;
  do
  {
    v72 = (*a5)[v66 / 8];
    v73 = *(_DWORD *)(v72 + 188);
    v74 = *(_DWORD *)(v72 + 172);
    v75 = *(_DWORD *)(v72 + 176);
    v292[0] = *(void **)(v72 + 180);
    v292[1] = (void *)__PAIR64__(v73, v74);
    v293 = v75;
    v294 = 0;
    StateConstraint = (Constraint *)Constraint::makeStateConstraint(a2, a7, a8, *(_QWORD *)(*a9 + v66), *(_QWORD *)(*a10 + v66), *(_QWORD *)(*a12 + v66), *(_DWORD *)(v72 + 80), *(_DWORD *)(v72 + 76), a13, v70);
    v77 = *(Recognizer **)(*(_QWORD *)(a1 + 32) + v66);
    if (v77)
    {
      if (*(_BYTE *)(a1 + 8))
      {
        Recognizer::beginTrackingConfidenceStatistics((uint64_t)v77);
        v77 = *(Recognizer **)(*(_QWORD *)(a1 + 32) + v66);
      }
      Recognizer::resetRecognizerStats(v77);
      Recognizer::setInitialContext(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v66), v286);
      Recognizer::setContextPars(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v66), (__n128 *)v292);
      Recognizer::setEmbeddedTransducers(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v66), *(_QWORD *)(*a11 + v66));
      v78 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v66);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(v78 + 200);
      goto LABEL_42;
    }
    v79 = a9;
    v80 = a10;
    v81 = a12;
    v82 = a7;
    v83 = a8;
    v84 = a2;
    FstCore::resetRecognizerStats(*(FstCore **)(*(_QWORD *)(a1 + 48) + v66));
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v66) + 72);
    v86 = MemChunkAlloc(0x18uLL, 0);
    *(_OWORD *)v86 = *(_OWORD *)v292;
    *((_DWORD *)v86 + 4) = v293;
    *((_BYTE *)v86 + 20) = v294;
    *(_QWORD *)(v85 + 136) = v86;
    FstCore::setEmbeddedTransducers(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v66), *(_QWORD *)(*a11 + v66));
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v66);
    if (v78)
    {
      v285 = 1;
      a2 = v84;
      a8 = v83;
      a7 = v82;
      a12 = v81;
      a10 = v80;
      a9 = v79;
      v70 = a15;
LABEL_42:
      Recognizer::setConstraint((Constraint **)v78, StateConstraint);
      a5 = v291;
      goto LABEL_43;
    }
    FstCore::setConstraint(*(Constraint ***)(*(_QWORD *)(a1 + 48) + v66), StateConstraint);
    v285 = 1;
    a2 = v84;
    a5 = v291;
    a8 = v83;
    a7 = v82;
    a12 = v81;
    a10 = v80;
    a9 = v79;
    v70 = a15;
LABEL_43:
    v87 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v66);
    if (v87)
      *(_BYTE *)(v87 + 361) = a14;
    v66 += 8;
  }
  while (v288 != v66);
  v88 = *a5;
  if ((_DWORD)v290 != 1)
  {
    v89 = 1;
    v90 = *(_DWORD *)(*v88 + 132);
    do
    {
      if (v90 != *(_DWORD *)((*a5)[v89] + 132))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3609, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchDecimationType");
      ++v89;
    }
    while (v290 != v89);
    v91 = 1;
    v92 = *(_DWORD *)(**a5 + 128);
    do
    {
      if (v92 != *(_DWORD *)((*a5)[v91] + 128))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3611, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccStartFrame");
      ++v91;
    }
    while (v290 != v91);
    v93 = 1;
    v94 = *(_DWORD *)(**a5 + 124);
    do
    {
      if (v94 != *(_DWORD *)((*a5)[v93] + 124))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3613, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccRampFrames");
      ++v93;
    }
    while (v290 != v93);
    v95 = 1;
    v96 = *(_DWORD *)(**a5 + 120);
    do
    {
      if (v96 != *(_DWORD *)((*a5)[v95] + 120))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3615, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccMaxSilenceFrames");
      ++v95;
    }
    while (v290 != v95);
    v97 = **a5;
    v98 = *(_DWORD *)(v97 + 112);
    v99 = *(const char **)(v97 + 104);
    if (v98)
      v100 = v99;
    else
      v100 = (const char *)&unk_209A7D4F0;
    for (k = 1; k != v290; ++k)
    {
      v102 = (*v291)[k];
      v103 = *(_DWORD *)(v102 + 112);
      v104 = *(const char **)(v102 + 104);
      if (v103)
        v105 = v104;
      else
        v105 = (const char *)&unk_209A7D4F0;
      if (strcmp(v100, v105))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3617, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v106, v107, (char)"SearchConTransAccFactorList");
    }
    v108 = 1;
    v109 = *(_DWORD *)(**v291 + 96);
    do
    {
      if (v109 != *(_DWORD *)((*v291)[v108] + 96))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3619, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v106, v107, (char)"SearchConTransAccDecayFrequency");
      ++v108;
    }
    while (v290 != v108);
    v110 = 1;
    v111 = *(double *)(**v291 + 88);
    do
    {
      if (v111 != *(double *)((*v291)[v110] + 88))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3621, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchConTransAccDecayFactor");
      ++v110;
    }
    while (v290 != v110);
    v112 = 1;
    v113 = *(double *)(**v291 + 136);
    do
    {
      if (v113 != *(double *)((*v291)[v112] + 136))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3623, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchEnableGenoneScoreCacheThresh");
      ++v112;
    }
    while (v290 != v112);
    v114 = *(unsigned __int8 *)(**v291 + 368);
    for (m = 1; m != v290; ++m)
    {
      if ((v114 != 0) != (*(_BYTE *)((*v291)[m] + 368) != 0))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3625, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v106, v107, (char)"SearchTruncatePackedIntComponentScores");
    }
    v116 = 1;
    v117 = *(double *)(**v291 + 144);
    do
    {
      if (v117 != *(double *)((*v291)[v116] + 144))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3627, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchFmpeMinimumPosteriorProbability");
      ++v116;
    }
    while (v290 != v116);
    v118 = **v291;
    v119 = *(_DWORD *)(v118 + 400);
    v120 = *(const char **)(v118 + 392);
    if (v119)
      v121 = v120;
    else
      v121 = (const char *)&unk_209A7D4F0;
    for (n = 1; n != v290; ++n)
    {
      v123 = (*v291)[n];
      v124 = *(_DWORD *)(v123 + 400);
      v125 = *(const char **)(v123 + 392);
      if (v124)
        v126 = v125;
      else
        v126 = (const char *)&unk_209A7D4F0;
      if (strcmp(v121, v126))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3629, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v127, v128, (char)"SearchHierScorerBeamList");
    }
    v129 = **v291;
    v130 = *(_DWORD *)(v129 + 464);
    v131 = *(const char **)(v129 + 456);
    if (v130)
      v132 = v131;
    else
      v132 = (const char *)&unk_209A7D4F0;
    for (ii = 1; ii != v290; ++ii)
    {
      v134 = (*v291)[ii];
      v135 = *(_DWORD *)(v134 + 464);
      v136 = *(const char **)(v134 + 456);
      if (v135)
        v137 = v136;
      else
        v137 = (const char *)&unk_209A7D4F0;
      if (strcmp(v132, v137))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3631, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchHierScorerCutoffRatioList");
    }
    a5 = v291;
    v138 = 1;
    v139 = *(_DWORD *)(**v291 + 408);
    do
    {
      if (v139 != *(_DWORD *)((*v291)[v138] + 408))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3633, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchHierInactiveComponentScore");
      ++v138;
    }
    while (v290 != v138);
    v140 = 1;
    v141 = *(double *)(**v291 + 312);
    do
    {
      if (v141 != *(double *)((*v291)[v140] + 312))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3635, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v37, v38, (char)"SearchPelScoreScale");
      ++v140;
    }
    while (v290 != v140);
    v142 = 1;
    v143 = *(_DWORD *)(**v291 + 152);
    do
    {
      if (v143 != *(_DWORD *)((*v291)[v142] + 152))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3637, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchFrameTransformerThreadingType");
      ++v142;
    }
    while (v290 != v142);
    v144 = 1;
    v145 = *(_DWORD *)(**v291 + 156);
    do
    {
      if (v145 != *(_DWORD *)((*v291)[v144] + 156))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3638, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchThreadingType");
      ++v144;
    }
    while (v290 != v144);
    v146 = *(unsigned __int8 *)(**v291 + 328);
    for (jj = 1; jj != v290; ++jj)
    {
      if ((v146 != 0) != (*(_BYTE *)((*v291)[jj] + 328) != 0))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3640, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchPrefilterResultUseCrumbBank");
    }
    v148 = 1;
    v149 = *(_DWORD *)(**v291 + 332);
    do
    {
      if (v149 != *(_DWORD *)((*v291)[v148] + 332))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3642, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchPrefilterResultUseCrumbBankDistanceMaxFrames");
      ++v148;
    }
    while (v290 != v148);
    v150 = *(unsigned __int8 *)(**v291 + 444);
    for (kk = 1; kk != v290; ++kk)
    {
      if ((v150 != 0) != (*(_BYTE *)((*v291)[kk] + 444) != 0))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3644, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"FstCoreRepeatFrame");
    }
    v88 = *v291;
  }
  a4 = v283;
  a6 = v284;
  v152 = v285;
LABEL_146:
  v153 = *v88;
  v154 = *(_DWORD *)(v153 + 132);
  *(_DWORD *)(a1 + 1048) = v154;
  if (*(_QWORD *)(a1 + 232))
  {
    v155 = *(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 40) + 8 * *(unsigned __int16 *)(a1 + 12));
    *(_QWORD *)(a1 + 320) = 0;
    v156 = *(_DWORD *)(v153 + 128);
    *(_DWORD *)(a1 + 332) = v156;
    v157 = *(_QWORD *)(v155 + 40);
    *(_QWORD *)(a1 + 384) = v157;
    if (v156)
      v158 = v157 == 0;
    else
      v158 = 0;
    if (v158)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3665, (uint64_t)"recogctl/recogctl", 1, (uint64_t)"%s", v37, v38, (char)&unk_209A7D4F0);
      v156 = *(_DWORD *)(a1 + 332);
    }
    if (((v156 != 0) & v152) == 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3667, (uint64_t)"recogctl/recogctl", 11, (uint64_t)"%s", v37, v38, (char)&errStr_recogctl_recogctl_E_ONLINE_CONSTRAINED_TRANSACC_INVALID_WITH_FST);
    v159 = **(_DWORD **)(a1 + 232);
    if (v159 - 1 <= 0xFFFFFFFD)
    {
      HasFeatData = ChannelMgr::sourceHasFeatData((ChannelMgr *)ChannelMgr::smpChannelMgr, v159, v33, v34, v35, v36, v37, v38);
      if (*(_DWORD *)(a1 + 332))
      {
        if (HasFeatData)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3674, (uint64_t)"recogctl/recogctl", 5, (uint64_t)"%s", v161, v162, (char)&errStr_recogctl_recogctl_E_ONLINE_CONSTRAINED_TRANSACC_INVALID_WITH_FEATURES);
      }
    }
    v163 = **a5;
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(v163 + 124);
    *(_DWORD *)(a1 + 340) = *(_DWORD *)(v163 + 120);
    if (*(_DWORD *)(a1 + 332))
    {
      v164 = *(_QWORD *)(a1 + 384);
      v165 = *(_DWORD *)(v164 + 8);
      v166 = *(_DWORD *)(a1 + 356);
      if (v165 > v166)
      {
        DgnPrimArray<unsigned long long>::reallocElts(a1 + 344, v165 - v166, 0);
        v164 = *(_QWORD *)(a1 + 384);
        v163 = **a5;
      }
      *(_DWORD *)(a1 + 352) = v165;
      *(_DWORD *)(a1 + 328) = *(_DWORD *)(v164 + 4);
    }
    v167 = *(_DWORD *)(v163 + 112);
    v168 = *(unsigned __int8 **)(v163 + 104);
    if (v167)
      v169 = v168;
    else
      v169 = (unsigned __int8 *)&unk_209A7D4F0;
    DgnSplitStringParValueIntoDoubleArray((char)"SearchConTransAccFactorList", (int)"accumulation factors", v169, 1.0, 0.0, 1.0, a1 + 344);
    v172 = **a5;
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(v172 + 96);
    v173 = *(double *)(v172 + 88);
    *(double *)(a1 + 368) = v173;
    if (v173 == 0.0)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3699, (uint64_t)"recogctl/recogctl", 2, (uint64_t)"%s", v170, v171, (char)&errStr_recogctl_recogctl_E_DISALLOWED_DECAY_FACTOR);
      v172 = **a5;
    }
    *(_QWORD *)(a1 + 376) = 0x3FF0000000000000;
    if (*(_DWORD *)(v172 + 400))
      v174 = *(char **)(v172 + 392);
    else
      v174 = (char *)&unk_209A7D4F0;
    if (*(_DWORD *)(v172 + 464))
      v175 = *(char **)(v172 + 456);
    else
      v175 = (char *)&unk_209A7D4F0;
    if (*a6)
      v176 = *(_BYTE *)(v172 + 449) == 0;
    else
      v176 = 0;
    *(_QWORD *)(a1 + 248) = User::newPelScorer((User *)v155, *(_DWORD *)(a1 + 332) != 0, *(double *)(v172 + 136), *(_BYTE *)(v172 + 368) != 0, *(double *)(v172 + 144), v174, v175, *(_DWORD *)(v172 + 408), v176);
    v186 = *(_QWORD *)(ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4), v178, v179, v180, v181, v182, v183)+ 400);
    v187 = **a5;
    v188 = *(double *)(v187 + 312);
    v189 = *(unsigned __int8 *)(v187 + 444);
    if (v154 == 1)
      v177 = 2;
    else
      v177 = 1;
    if (v154 == 1)
    {
      if (v189)
        v188 = v188 * 0.5;
    }
    else if (v189)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3739, (uint64_t)"recogctl/recogctl", 15, (uint64_t)"%s", v184, v185, (char)&errStr_recogctl_recogctl_E_DISALLOWED_REPEAT_FRAME_WITH_NO_DECIMATION);
    }
    v190 = *(_QWORD *)(a1 + 248);
    FeaturesPerFrame = Utterance::getFeaturesPerFrame(*(Utterance **)(a1 + 232));
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v190 + 40))(v190, FeaturesPerFrame, 0, v186, 1, *(unsigned __int8 *)(a1 + 224), *(unsigned __int8 *)(**a5 + 320), v188);
    TransformedFrames = Utterance::getTransformedFrames(*(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 12), v177);
    if (TransformedFrames)
    {
      *(_QWORD *)(a1 + 464) = TransformedFrames;
    }
    else
    {
      v193 = MemChunkAlloc(0x18uLL, 0);
      v194 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v193);
      *(_QWORD *)(a1 + 480) = v194;
      *(_DWORD *)(a1 + 492) = v177;
      *(_QWORD *)(a1 + 464) = v194;
      v195 = *(_QWORD *)(a1 + 248);
      v196 = *(_QWORD *)(v195 + 56);
      if (v196)
        v197 = *(const PelMgr **)(v196 + 112);
      else
        v197 = 0;
      FrameTransformer = FrameTransformer::makeFrameTransformer(a6[7], *(NeuralNet **)(v155 + 368), *(_QWORD *)(v155 + 16), *(_QWORD *)(v155 + 32), v197, *(_DWORD *)(**a5 + 152), v177, *(unsigned __int8 *)(v195 + 131), *(double *)(v195 + 136), *(double *)(v195 + 144));
      *(_QWORD *)(a1 + 448) = FrameTransformer;
      (*(void (**)(_QWORD *))(*FrameTransformer + 64))(FrameTransformer);
    }
    if (*(_QWORD *)(*(_QWORD *)(a1 + 248) + 96))
    {
      v199 = MemChunkAlloc(0x48uLL, 0);
      ConstrainedTransAccMgr::ConstrainedTransAccMgr((uint64_t)v199, a1, v186);
      *(_QWORD *)(a1 + 512) = v200;
      ConstrainedTransAccMgr::initAccum(v200, 1, v201, v202, v203, v204, v205, v206);
    }
  }
  else
  {
    v177 = 0;
  }
  v207 = *(_QWORD *)(a1 + 496);
  if (v207)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 24))(v207);
    v208 = MemChunkAlloc(0x18uLL, 0);
    *(_QWORD *)(a1 + 504) = SynchronizedArray<ScoreFixArray>::SynchronizedArray((uint64_t)v208);
  }
  v209 = *(_QWORD *)(a1 + 424);
  if (v209)
  {
    v210 = *(_DWORD *)(*(_QWORD *)(a1 + 912) + 48);
    if (v154)
      v211 = 1;
    else
      v211 = v210 == 0;
    if (!v211 || (v154 == 1 ? (v212 = v210 == 1) : (v212 = 1), !v212))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3812, (uint64_t)"recogctl/recogctl", 3, (uint64_t)"%s", v37, v38, (char)&errStr_recogctl_recogctl_E_MISMATCHED_DECIMATION);
      v209 = *(_QWORD *)(a1 + 424);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 40))(v209, a16);
    v213 = *(_QWORD *)(a1 + 424);
    v214 = *(unsigned __int8 *)(a1 + 224);
    MicrosecPerFrame = Utterance::getMicrosecPerFrame(*(Utterance **)(a1 + 232));
    v216 = Utterance::getFeaturesPerFrame(*(Utterance **)(a1 + 232));
    SigProc = ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4), v217, v218, v219, v220, v221, v222);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v213 + 48))(v213, v214, MicrosecPerFrame, v216, *(_QWORD *)(SigProc + 400), *(_QWORD *)(a1 + 912));
    if (a6[3])
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 72))(*(_QWORD *)(a1 + 424));
    a4 = v283;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 144))(*(_QWORD *)(a1 + 424)) == *(unsigned __int16 *)(a1 + 12))
    {
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 480);
      *(_DWORD *)(a1 + 488) = *(_DWORD *)(a1 + 492);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 448);
    }
    else
    {
      v224 = *(_QWORD *)(a1 + 232);
      v225 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 144))(*(_QWORD *)(a1 + 424));
      v226 = Utterance::getTransformedFrames(v224, v225, v177);
      if (v226)
      {
        *(_QWORD *)(a1 + 456) = v226;
      }
      else
      {
        v227 = MemChunkAlloc(0x18uLL, 0);
        v228 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v227);
        *(_QWORD *)(a1 + 472) = v228;
        *(_DWORD *)(a1 + 488) = v177;
        *(_QWORD *)(a1 + 456) = v228;
        v229 = ModelMgr::smpModelMgr;
        v230 = *(_QWORD *)(*(_QWORD *)(v229 + 40)
                         + 8
                         * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 144))(*(_QWORD *)(a1 + 424)));
        v231 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 160))(*(_QWORD *)(a1 + 424));
        v232 = *(_QWORD *)(v231 + 56);
        if (v232)
          v233 = *(const PelMgr **)(v232 + 112);
        else
          v233 = 0;
        v234 = FrameTransformer::makeFrameTransformer(a6[8], *(NeuralNet **)(v230 + 368), *(_QWORD *)(v230 + 16), *(_QWORD *)(v230 + 32), v233, *(_DWORD *)(**a5 + 152), v177, *(unsigned __int8 *)(v231 + 131), *(double *)(v231 + 136), *(double *)(v231 + 144));
        *(_QWORD *)(a1 + 440) = v234;
        (*(void (**)(_QWORD *))(*v234 + 64))(v234);
      }
    }
  }
  *(_BYTE *)(a1 + 290) = 0;
  if ((unint64_t)a4 | *(_QWORD *)(a1 + 424))
  {
    v235 = a20;
    *(_QWORD *)(a1 + 528) = a20;
    v236 = **a5;
    if (*(_BYTE *)(v236 + 328))
    {
      *(_BYTE *)(a1 + 544) = 1;
      *(_DWORD *)(a1 + 548) = *(_DWORD *)(v236 + 332);
      v235 = MemChunkAlloc(0x20uLL, 0);
      PrefilterResult::PrefilterResult((PrefilterResult *)v235, a2);
      *(_QWORD *)(a1 + 536) = v237;
      if (!*(_QWORD *)(a1 + 528))
      {
        v238 = MemChunkAlloc(0x20uLL, 0);
        PrefilterResult::PrefilterResult((PrefilterResult *)v238, a2);
        *(_QWORD *)(a1 + 528) = v239;
      }
    }
    v240 = a2;
    v241 = v177;
    v242 = MemChunkAlloc(0x58uLL, 0);
    *(_QWORD *)(a1 + 520) = ReturnListQueue::ReturnListQueue((uint64_t)v242, (uint64_t)v235, *(_DWORD *)(a1 + 64), v240);
    if (a4)
    {
      PrefilterResult::copyIntoQueue(a4, (ReturnListQueue *)v242);
      *(_BYTE *)(a1 + 290) = 1;
    }
  }
  else
  {
    v243 = a2;
    v241 = v177;
    v244 = **a5;
    if (*(_BYTE *)(v244 + 328))
    {
      *(_BYTE *)(a1 + 544) = 1;
      *(_DWORD *)(a1 + 548) = *(_DWORD *)(v244 + 332);
      v245 = MemChunkAlloc(0x20uLL, 0);
      PrefilterResult::PrefilterResult((PrefilterResult *)v245, v243);
      *(_QWORD *)(a1 + 528) = v246;
    }
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v247 = 0;
    do
    {
      v248 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v247);
      if (v248)
      {
        Recognizer::beginTopRecSyncRecog(v248, v241, a24, a25);
      }
      else
      {
        RequiredVirtMapSize = FstCore::getRequiredVirtMapSize(*(FstCore **)(*(_QWORD *)(a1 + 48) + 8 * v247));
        VirtMap = RecogCtlMgr::getVirtMap((RecogCtlMgr *)RecogCtlMgr::smpRecogCtlMgr, RequiredVirtMapSize);
        FstCore::beginTopRecSyncRecog(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v247), v241, VirtMap);
        if (*(_BYTE *)(*(_QWORD *)a18 + v247))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3950, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v251, v252, (char)"Prefiltering in startRecognizeOne");
      }
      ++v247;
    }
    while (v247 < *(unsigned int *)(a1 + 40));
  }
  DgnPrimArray<BOOL>::copyArraySlice(a1 + 552, (uint64_t *)a18, 0, *(_DWORD *)(a18 + 8));
  *(_BYTE *)(a1 + 568) = 0;
  if (*(_DWORD *)(a1 + 40))
  {
    v257 = 0;
    do
    {
      v258 = *(unsigned int *)(a1 + 824);
      if (v258 == *(_DWORD *)(a1 + 828))
      {
        DgnArray<PrefilterResultFrame>::reallocElts(a1 + 816, 1, 1);
        v258 = *(unsigned int *)(a1 + 824);
      }
      v259 = (_OWORD *)(*(_QWORD *)(a1 + 816) + 32 * v258);
      *v259 = 0u;
      v259[1] = 0u;
      ++*(_DWORD *)(a1 + 824);
      v260 = *(unsigned int *)(a1 + 872);
      if (v260 == *(_DWORD *)(a1 + 876))
      {
        DgnArray<PrefilterResultFrame>::reallocElts(a1 + 864, 1, 1);
        v260 = *(unsigned int *)(a1 + 872);
      }
      v261 = (_OWORD *)(*(_QWORD *)(a1 + 864) + 32 * v260);
      *v261 = 0u;
      v261[1] = 0u;
      ++*(_DWORD *)(a1 + 872);
      v262 = (const PelScoreCacheData *)v284[4];
      if (v262)
      {
        v263 = *(PelScoreCacheData ***)(*(_QWORD *)(a1 + 32) + 8 * v257);
        if (!v263)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3970, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v255, v256, (char)"setPelScores");
          v263 = *(PelScoreCacheData ***)(*(_QWORD *)(a1 + 32) + 8 * v257);
          v262 = (const PelScoreCacheData *)v284[4];
        }
        Recognizer::setPelScores(v263, v262);
      }
      ++v257;
    }
    while (v257 < *(unsigned int *)(a1 + 40));
  }
  *(_WORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  if (*(_QWORD *)(a1 + 232))
  {
    v264 = MemChunkAlloc(0x18uLL, 0);
    v264[1] = 0;
    v264[2] = 0;
    *v264 = 0;
    v265 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v264);
    *(_QWORD *)(a1 + 240) = v265;
    UttFeatureArraySynchronizedArray::update(v265, *(const Utterance **)(a1 + 232));
    v266 = *(_QWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(v266 + 16);
    *(_BYTE *)(a1 + 289) = *(_BYTE *)v266;
  }
  v267 = *(_DWORD *)(a1 + 928);
  if (v267 == -1)
  {
    v268 = *(_DWORD *)(a1 + 40);
    goto LABEL_254;
  }
  RecogController::setCallerThreadIdForChildren((RecogController *)a1, v267);
  v268 = *(_DWORD *)(a1 + 40);
  if (v268)
  {
    v269 = *(_QWORD *)(a1 + 32);
    v270 = *(unsigned int *)(a1 + 40);
    do
    {
      if (*(_QWORD *)v269)
        *(_BYTE *)(*(_QWORD *)v269 + 672) = 0;
      v269 += 8;
      --v270;
    }
    while (v270);
LABEL_254:
    LODWORD(v271) = v268;
    if (*(_DWORD *)(a1 + 412) < v268)
    {
      v292[0] = 0;
      *(_DWORD *)(a1 + 412) = realloc_array(*(_QWORD **)(a1 + 400), v292, v268, *(unsigned int *)(a1 + 408), *(unsigned int *)(a1 + 408), 1);
      *(void **)(a1 + 400) = v292[0];
      LODWORD(v271) = *(_DWORD *)(a1 + 40);
    }
    *(_DWORD *)(a1 + 408) = v268;
    if ((_DWORD)v271)
    {
      v272 = 0;
      while (1)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 400) + v272) = 0;
        v273 = *(Recognizer **)(*(_QWORD *)(a1 + 32) + 8 * v272);
        if (!v273)
        {
          v278 = *(FstCore **)(*(_QWORD *)(a1 + 48) + 8 * v272);
          v279 = *(Utterance **)(a1 + 232);
          if (v279)
          {
            v280 = Utterance::getMicrosecPerFrame(v279);
            v281 = *(Utterance **)(a1 + 232);
            if (v281 && !*((_BYTE *)v281 + 416))
            {
              v282 = Utterance::numCompleteRecogFrames(v281, v241);
LABEL_272:
              FstCore::beginTopRecPassSyncRecog(v278, v280, v282, *(PelScorer **)(a1 + 248), v253, v254, v255, v256);
              goto LABEL_273;
            }
          }
          else
          {
            v280 = 0;
          }
          v282 = 4294967280;
          goto LABEL_272;
        }
        v274 = *(Utterance **)(a1 + 232);
        if (!v274)
          break;
        v275 = Utterance::getMicrosecPerFrame(v274);
        v276 = *(Utterance **)(a1 + 232);
        if (!v276 || *((_BYTE *)v276 + 416))
          goto LABEL_268;
        v277 = Utterance::numCompleteRecogFrames(v276, v241);
LABEL_269:
        Recognizer::beginTopRecPassSyncRecog(v273, v275, v277, *(PelScorer **)(a1 + 248));
LABEL_273:
        ++v272;
        v271 = *(unsigned int *)(a1 + 40);
        if (v272 >= v271)
          goto LABEL_276;
      }
      v275 = 0;
LABEL_268:
      v277 = -16;
      goto LABEL_269;
    }
  }
  else
  {
    LODWORD(v271) = 0;
    *(_DWORD *)(a1 + 408) = 0;
  }
LABEL_276:
  *(_DWORD *)(a1 + 416) = v271;
  *(_BYTE *)(a1 + 896) = 1;
}

double Recognizer::resetRecognizerStats(Recognizer *this)
{
  double result;

  PelStats::resetStats((Recognizer *)((char *)this + 880));
  LMStats::resetStats((Recognizer *)((char *)this + 1056));
  SearchStats::resetStats((uint64_t)this + 1208);
  PelStats::resetStats((Recognizer *)((char *)this + 1240));
  LMStats::resetStats((Recognizer *)((char *)this + 1416));
  SearchStats::resetStats((uint64_t)this + 1568);
  *((_DWORD *)this + 585) = 0;
  *(_OWORD *)((char *)this + 2308) = 0u;
  *(_OWORD *)((char *)this + 2324) = 0u;
  LatticeStats::resetStats((Recognizer *)((char *)this + 1616));
  result = 0.0;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  return result;
}

double FstCore::resetRecognizerStats(FstCore *this)
{
  PelStats::resetStats((FstCore *)((char *)this + 80));
  PelStats::resetStats((FstCore *)((char *)this + 256));
  SearchStats::resetStats((uint64_t)this + 432);
  SearchStats::resetStats((uint64_t)this + 464);
  *((_QWORD *)this + 137) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  return LatticeStats::resetStats((FstCore *)((char *)this + 688));
}

void RecogController::setCallerThreadIdForChildren(RecogController *this, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *((_QWORD *)this + 53);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v4);
    v12 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v5
      || (v13 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v5)) == 0)
    {
      v14 = v5;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v5, v6, v7, v8, v9, v10, v11);
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v14);
    }
    *(_DWORD *)(v13 + 64) = a2;
  }
  v15 = *((_QWORD *)this + 62);
  if (v15)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
    v23 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v16
      || (v24 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v16)) == 0)
    {
      v25 = v16;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v16, v17, v18, v19, v20, v21, v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v25);
    }
    *(_DWORD *)(v24 + 64) = a2;
  }
  v26 = *((_QWORD *)this + 56);
  if (v26)
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 120))(v26);
    v34 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v27
      || (v35 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v27)) == 0)
    {
      v36 = v27;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v27, v28, v29, v30, v31, v32, v33);
      v35 = *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v36);
    }
    *(_DWORD *)(v35 + 64) = a2;
  }
  v37 = *((_QWORD *)this + 55);
  if (v37 && v37 != *((_QWORD *)this + 56))
  {
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 120))(v37);
    v45 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v38
      || (v46 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v38)) == 0)
    {
      v47 = v38;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v38, v39, v40, v41, v42, v43, v44);
      v46 = *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v47);
    }
    *(_DWORD *)(v46 + 64) = a2;
  }
}

BOOL RecogController::recognizeOneDone(RecogController *this)
{
  return *((_BYTE *)this + 288) || *((_DWORD *)this + 104) == 0;
}

uint64_t RecogController::restartPostSynchronousRecognition(RecogController *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  v2 = *((_QWORD *)this + 53);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  if (*((_DWORD *)this + 10))
  {
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        Recognizer::setSynchronousRecognizerStats(*(Recognizer **)(v4 + 8 * v3));
        NetStats::operator=(*(_QWORD *)(v5 + 280) + 302696, *(_QWORD *)(v5 + 280) + 302592);
      }
      else
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v3);
        PelStats::operator=(v6 + 256, v6 + 80);
        v7 = *(_DWORD *)(v6 + 472);
        v8 = *(_DWORD *)(v6 + 440);
        SearchStats::operator=(v6 + 464, v6 + 432);
        if (v7 <= v8)
          v9 = v8;
        else
          v9 = v7;
        *(_DWORD *)(v6 + 472) = v9;
        *(_DWORD *)(v6 + 440) = 0;
        v10 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v3);
        FstStats::operator=(v10 + 1376, v10 + 1120);
      }
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 10));
  }
  v11 = *((_OWORD *)this + 50);
  *((_OWORD *)this + 52) = *((_OWORD *)this + 49);
  *((_OWORD *)this + 53) = v11;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)this + 864, (uint64_t *)this + 102, 0, *((_DWORD *)this + 206));
  return SnapTime::recordTime((RecogController *)((char *)this + 192), 1, 1, 1, 1);
}

void Recognizer::setSynchronousRecognizerStats(Recognizer *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  PelStats::operator=((uint64_t)this + 1240, (uint64_t)this + 880);
  LMStats::operator=((uint64_t)this + 1416, (uint64_t)this + 1056);
  v2 = *((_DWORD *)this + 394);
  v3 = *((_DWORD *)this + 304);
  SearchStats::operator=((uint64_t)this + 1568, (uint64_t)this + 1208);
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  *((_DWORD *)this + 394) = v4;
  *((_DWORD *)this + 304) = 0;
}

uint64_t RecogController::recognizeOneDoMainSearch(RecogController *this, int64x2_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  FstCore *v12;
  Recognizer *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  Recognizer *v19;
  int v20;
  BOOL v21;
  ReturnListQueue *v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  ReturnListQueue *v27;
  uint64_t v28;
  _QWORD *v29;
  __int32 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t i;
  Recognizer *v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t *v48;
  int64x2_t v49;
  uint64_t v50;
  unint64_t j;
  Recognizer *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  int64x2_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __int32 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *Bucket;
  uint64_t v85;
  ModelMgr *v86;
  unsigned int EmbRecSpecId;
  unsigned __int16 v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned __int16 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  double v100;
  char v101;
  unsigned int *v102;
  __int16 v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  ActiveWordEmbeddedFst *FstActiveWord;
  unsigned __int16 v108[4];
  unsigned int v109;
  _BYTE v110[16];
  unsigned __int8 *v111[2];
  uint64_t v112;
  uint64_t v113;
  int v114;
  int64x2_t v115[3];

  if (!*((_DWORD *)this + 104))
    return 0;
  if (!*((_DWORD *)this + 10))
    goto LABEL_35;
  v11 = 0;
  do
  {
    if (*(_BYTE *)(*((_QWORD *)this + 50) + v11))
      goto LABEL_15;
    v12 = *(FstCore **)(*((_QWORD *)this + 6) + 8 * v11);
    v13 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * v11);
    v14 = *((_QWORD *)this + 58);
    if (!v14 || !*(_BYTE *)v14)
      goto LABEL_9;
    v15 = *(_DWORD *)(v14 + 16);
    if (v13)
    {
      Recognizer::setRecogEndTime(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v11), v15);
LABEL_9:
      if (!v12)
        goto LABEL_11;
      goto LABEL_10;
    }
    FstCore::setRecogEndTime(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v11), v15);
    if (!v12)
      goto LABEL_11;
LABEL_10:
    if (FstCore::checkForDone(v12))
      goto LABEL_14;
LABEL_11:
    if (v13 && ((Recognizer::checkForAbort(v13) & 1) != 0 || Recognizer::checkForDone(v13)))
    {
LABEL_14:
      *(_BYTE *)(*((_QWORD *)this + 50) + v11) = 1;
      --*((_DWORD *)this + 104);
    }
LABEL_15:
    ++v11;
    v16 = *((unsigned int *)this + 10);
  }
  while (v11 < v16);
  if (!*((_DWORD *)this + 104))
    return 0;
  if (!(_DWORD)v16)
  {
LABEL_35:
    v18 = 0;
    goto LABEL_36;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 50) + v17))
    {
      v19 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * v17);
      v20 = *(unsigned __int8 *)(*((_QWORD *)this + 69) + v17);
      if (*(_BYTE *)(*((_QWORD *)this + 69) + v17))
        v21 = v19 == 0;
      else
        v21 = 0;
      if (v21)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4222, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Prefiltering in recognizeOneDoMainSearch");
        v20 = *(unsigned __int8 *)(*((_QWORD *)this + 69) + v17);
      }
      if (v20)
      {
        if (Recognizer::turnOffPrefilterer(v19))
          *(_BYTE *)(*((_QWORD *)this + 69) + v17) = 0;
        else
          v18 = 1;
      }
    }
    ++v17;
  }
  while (v17 < *((unsigned int *)this + 10));
LABEL_36:
  v22 = (ReturnListQueue *)*((_QWORD *)this + 65);
  if (!v22
    || *(_BYTE *)v22
    || (int)ReturnListQueue::getNextFrameTime(v22) > *((_DWORD *)this + 78) + 1
    || (v18 & 1) == 0 && !*(_QWORD *)(*((_QWORD *)this + 65) + 48))
  {
    v114 = -16;
    if (*((_QWORD *)this + 29))
    {
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, int *))(**((_QWORD **)this + 31) + 72))(*((_QWORD *)this + 31), *((unsigned int *)this + 78), *((_QWORD *)this + 58), &v114);
      v24 = *((_QWORD *)this + 58);
      if (v24 && (v23 & 1) == 0)
      {
        *((_DWORD *)this + 79) = v114;
        return 2;
      }
    }
    else
    {
      v24 = *((_QWORD *)this + 58);
    }
    v112 = 0;
    v113 = 0;
    v111[0] = 0;
    v111[1] = 0;
    if (v24)
    {
      v26 = *(_QWORD *)(v24 + 8) + 16 * *((unsigned int *)this + 78);
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)&v112, (_QWORD *)v26, 0, *(_DWORD *)(v26 + 8));
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v111, &v112, 0, v113);
    }
    if ((v18 & 1) != 0)
    {
      v27 = (ReturnListQueue *)*((_QWORD *)this + 65);
      if (*((_QWORD *)this + 54) && !*((_DWORD *)v27 + 10))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4283, (uint64_t)"recogctl/recogctl", 14, (uint64_t)"%s", a7, a8, (char)&errStr_recogctl_recogctl_E_PREFILTERRESULT_INCOMPATIBLE_WITH_UTT);
        v27 = (ReturnListQueue *)*((_QWORD *)this + 65);
      }
      v115[0].i32[0] = -16;
      v28 = ReturnListQueue::dequeue(v27, v115[0].i32);
      DgnArray<Germ>::copyArraySlice((unint64_t)this + 576, (_QWORD *)v28, 0, *(_DWORD *)(v28 + 8));
      v29 = (_QWORD *)DgnIArray<Utterance *>::~DgnIArray(v28);
      MemChunkFree(v29, 0);
      v30 = *(_DWORD *)(*((_QWORD *)this + 65) + 4);
      if (v30 != -16 && v30 <= v115[0].i32[0] && v30 > *((_DWORD *)this + 78))
      {
        if (*((_DWORD *)this + 10))
        {
          v31 = 0;
          do
          {
            v32 = *((_QWORD *)this + 4);
            v33 = *(_QWORD *)(v32 + 8 * v31);
            if (v33)
            {
              Recognizer::setSynchronousRecognizerStats(*(Recognizer **)(v32 + 8 * v31));
              NetStats::operator=(*(_QWORD *)(v33 + 280) + 302696, *(_QWORD *)(v33 + 280) + 302592);
            }
            else
            {
              v34 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v31);
              PelStats::operator=(v34 + 256, v34 + 80);
              v35 = *(_DWORD *)(v34 + 472);
              v36 = *(_DWORD *)(v34 + 440);
              SearchStats::operator=(v34 + 464, v34 + 432);
              if (v35 <= v36)
                v37 = v36;
              else
                v37 = v35;
              *(_DWORD *)(v34 + 472) = v37;
              *(_DWORD *)(v34 + 440) = 0;
              v38 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v31);
              FstStats::operator=(v38 + 1376, v38 + 1120);
            }
            ++v31;
          }
          while (v31 < *((unsigned int *)this + 10));
        }
        DgnArray<SnapTime>::copyArraySlice((unint64_t)this + 864, (uint64_t *)this + 102, 0, *((_DWORD *)this + 206));
        SnapTime::recordTime((RecogController *)((char *)this + 192), 1, 1, 1, 1);
      }
    }
    DgnString::DgnString((DgnString *)v110);
    RecogController::maybeEstimateAndPreScoreActivePelsThisFrame((uint64_t)this, (BitArray *)v110, (uint64_t)&v112);
    v41 = *((unsigned int *)this + 10);
    if (!(_DWORD)v41)
      goto LABEL_112;
    v42 = 0;
    for (i = 0; i < v41; ++i)
    {
      v44 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * i);
      if (v44 && !*(_BYTE *)(*((_QWORD *)this + 50) + i))
      {
        Recognizer::doFrame1(v44);
        memset(v115, 0, 32);
        SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
        v45 = v115[1];
        v46 = vsubq_s64(v115[0], *a2);
        v47 = vsubq_s64(v115[1], a2[1]);
        *a2 = v115[0];
        a2[1] = v45;
        v48 = (int64x2_t *)(*((_QWORD *)this + 102) + v42);
        v49 = vaddq_s64(v47, v48[1]);
        *v48 = vaddq_s64(v46, *v48);
        v48[1] = v49;
        v41 = *((unsigned int *)this + 10);
      }
      v42 += 32;
    }
    if (!v41)
      goto LABEL_112;
    v50 = 0;
    for (j = 0; j < v41; ++j)
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 50) + j))
      {
        v52 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * j);
        if (v52)
        {
          Recognizer::doFrame2(v52, (uint64_t)&v112);
        }
        else
        {
          if (*(_BYTE *)(*((_QWORD *)this + 69) + j))
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4393, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v39, v40, (char)"Prefiltering in recognizeOneDoMainSearch(2)");
          FstCore::doFrame(*(unsigned int **)(*((_QWORD *)this + 6) + 8 * j), (uint64_t)&v112);
        }
        memset(v115, 0, 32);
        SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
        v53 = v115[1];
        v54 = vsubq_s64(v115[0], *a2);
        v55 = vsubq_s64(v115[1], a2[1]);
        *a2 = v115[0];
        a2[1] = v53;
        v56 = (int64x2_t *)(*((_QWORD *)this + 102) + v50);
        v57 = vaddq_s64(v55, v56[1]);
        *v56 = vaddq_s64(v54, *v56);
        v56[1] = v57;
        v41 = *((unsigned int *)this + 10);
      }
      v50 += 32;
    }
    if (v41)
    {
      v58 = 0;
      v59 = 0;
      v103 = -1;
      v60 = 20000;
      do
      {
        v61 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v59);
        if (v61 && !*(_BYTE *)(*((_QWORD *)this + 50) + v59))
        {
          if (*(_BYTE *)(*((_QWORD *)this + 69) + v59))
            Recognizer::doFrame3(v61, (uint64_t)this + 576);
          else
            Recognizer::doFrame3(v61, 0);
          memset(v115, 0, 32);
          SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
          v62 = v115[1];
          v63 = vsubq_s64(v115[0], *a2);
          v64 = vsubq_s64(v115[1], a2[1]);
          *a2 = v115[0];
          a2[1] = v62;
          v65 = (int64x2_t *)(*((_QWORD *)this + 102) + v58);
          v66 = vaddq_s64(v64, v65[1]);
          *v65 = vaddq_s64(v63, *v65);
          v65[1] = v66;
          v67 = *(_QWORD *)(v61 + 280);
          if (*(_DWORD *)(v67 + 240) < v60)
          {
            v103 = *(_WORD *)(v67 + 230);
            v60 = *(_DWORD *)(v67 + 240);
          }
        }
        ++v59;
        v68 = *((unsigned int *)this + 10);
        v58 += 32;
      }
      while (v59 < v68);
      if (*((_DWORD *)this + 10))
      {
        v69 = 0;
        v70 = (char *)this + 936;
        v102 = a3;
        v101 = v18;
        while (1)
        {
          if (!*(_BYTE *)(*((_QWORD *)this + 50) + v69))
          {
            v71 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v69);
            if (v71)
            {
              if (*(_DWORD *)(v71 + 2352))
                break;
            }
          }
LABEL_92:
          if (++v69 >= v68)
            goto LABEL_113;
        }
        v104 = v69;
        v72 = 0;
        v73 = 0;
        while (1)
        {
          v74 = (uint64_t *)(*(_QWORD *)(v71 + 2344) + v72);
          v75 = *v74;
          v76 = *((_DWORD *)v74 + 2);
          v77 = *((unsigned int *)v74 + 3);
          v78 = *((unsigned __int16 *)v74 + 8);
          v80 = *((unsigned int *)v74 + 5);
          v79 = *((unsigned int *)v74 + 6);
          FstActiveWord = 0;
          *(_QWORD *)v108 = v75;
          v109 = v76;
          if (!*((_DWORD *)this + 236))
            break;
          v81 = (*Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::findBucket((uint64_t)v70, (uint64_t)v108))[3];
          FstActiveWord = (ActiveWordEmbeddedFst *)v81;
          if (!v81)
          {
            v105 = v80;
            v106 = v77;
            v82 = v108[2];
            v76 = v109;
            goto LABEL_101;
          }
LABEL_110:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 32))(v81, v79);
          (*(void (**)(ActiveWordEmbeddedFst *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)FstActiveWord + 24))(FstActiveWord, v78, v77, v80);
          ++v73;
          v72 += 28;
          if (v73 >= *(unsigned int *)(v71 + 2352))
          {
            v68 = *((unsigned int *)this + 10);
            a3 = v102;
            v18 = v101;
            v69 = v104;
            goto LABEL_92;
          }
        }
        v105 = v80;
        v106 = v77;
        v82 = WORD2(v75);
LABEL_101:
        v115[0].i32[0] = (v82 << 25) | 0xFFFFF8;
        v115[0].i32[1] = 0x3FFF;
        v115[0].i32[2] = v76;
        *(uint64_t *)((char *)&v115[0].i64[1] + 4) = 0xFAFFFFFCFFFFFFFELL;
        v115[1].i32[1] = -83886084;
        v83 = *(_QWORD *)(v71 + 280);
        Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v83 + 303024, (uint64_t)v115);
        v85 = (uint64_t)v70;
        if (*Bucket)
        {
          FstActiveWord = *(ActiveWordEmbeddedFst **)(*Bucket + 40);
          if (FstActiveWord)
          {
LABEL_109:
            v70 = (char *)v85;
            Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::add(v85, (uint64_t *)v108, &FstActiveWord);
            v81 = (uint64_t)FstActiveWord;
            v80 = v105;
            v77 = v106;
            goto LABEL_110;
          }
        }
        else
        {
          FstActiveWord = 0;
        }
        v86 = (ModelMgr *)ModelMgr::smpModelMgr;
        EmbRecSpecId = ModelMgr::getEmbRecSpecId((ModelMgr *)ModelMgr::smpModelMgr, v108[2], v109);
        v88 = *(_WORD *)(ModelMgr::getEmbeddedRecSpec(v86, EmbRecSpecId) + 16);
        v89 = *((_DWORD *)this + 262);
        v90 = (*(uint64_t (**)(RecogController *))(*(_QWORD *)this + 200))(this);
        if (v89 == 1)
          v91 = 2;
        else
          v91 = 1;
        FstActiveWord = FstCore::makeFstActiveWord((uint64_t)v115, v83, (__int128 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v104) + 216), *((_WORD *)this + 5), v90, v88, *((PelScorer **)this + 31), *(_DWORD *)(v71 + 316), *(_DWORD *)(v71 + 352), v91);
        Active::addActiveWordFst(v83, v115, FstActiveWord);
        goto LABEL_109;
      }
LABEL_113:
      v92 = v103;
    }
    else
    {
LABEL_112:
      v92 = -1;
    }
    RecogController::maybeCleanupAfterEstimateAndPreScoreActivePels(this, (const BitArray *)v110);
    if (*((_QWORD *)this + 29))
    {
      if (*(_QWORD *)(*((_QWORD *)this + 31) + 96))
      {
        if (RecogController::accumulate((uint64_t)this, v92, v111))
        {
          v97 = *((_DWORD *)this + 80) + 1;
          *((_DWORD *)this + 80) = v97;
          v98 = *((_DWORD *)this + 83);
          if (v97 > v98)
          {
            memset(v115, 0, 32);
            v99 = *((_DWORD *)this + 84);
            v100 = 1.0;
            if (v97 < v99 + v98)
              v100 = (double)(v97 - v98) / (double)v99;
            *(_DWORD *)v108 = 0;
            ConstrainedTransAccMgr::computeTransform(*((ConstrainedTransAccMgr **)this + 64), 1, v100, (SnapTime *)v115, (unsigned int *)v108, v93, v94, v95, v96);
          }
        }
      }
    }
    ++*((_DWORD *)this + 78);
    if ((v18 & 1) == 0 || !*((_QWORD *)this + 53))
      *((_BYTE *)this + 290) = 1;
    ++*a3;
    BitArray::~BitArray((BitArray *)v110);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v111);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v112);
    return 0;
  }
  return 1;
}

void sub_2099CC4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t RecogController::maybeEstimateAndPreScoreActivePelsThisFrame(uint64_t result, BitArray *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  _OWORD v16[2];
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;

  if (*(_BYTE *)(result + 880))
  {
    v5 = result;
    v19 = 0u;
    v20 = 0u;
    SnapTime::recordTime((SnapTime *)&v19, 1, 0, 0, 0);
    BitArray::setSize(a2, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 248) + 16) + 144));
    if (*(_DWORD *)(v5 + 40))
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v12);
        if (v13)
          Active::estimateActivePelsThisFrame(*(Active **)(v13 + 280), a2);
        else
          FstCore::estimateActivePelsThisFrame(*(FstCore **)(*(_QWORD *)(v5 + 48) + 8 * v12), a2, v6, v7, v8, v9, v10, v11);
        ++v12;
      }
      while (v12 < *(unsigned int *)(v5 + 40));
    }
    v17 = 0u;
    v18 = 0u;
    SnapTime::recordTime((SnapTime *)&v17, 1, 0, 0, 0);
    v14 = vaddq_s64(vsubq_s64(v18, v20), *(int64x2_t *)(v5 + 736));
    *(int64x2_t *)(v5 + 720) = vaddq_s64(vsubq_s64(v17, v19), *(int64x2_t *)(v5 + 720));
    *(int64x2_t *)(v5 + 736) = v14;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v5 + 248) + 56))(*(_QWORD *)(v5 + 248), *(unsigned int *)(v5 + 312), 0, a3, *(_QWORD *)(v5 + 904) + 304, 0);
    (*(void (**)(_QWORD, BitArray *))(**(_QWORD **)(v5 + 248) + 112))(*(_QWORD *)(v5 + 248), a2);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 248) + 64))(*(_QWORD *)(v5 + 248), *(unsigned int *)(v5 + 312), *(_QWORD *)(v5 + 904) + 304);
    memset(v16, 0, sizeof(v16));
    SnapTime::recordTime((SnapTime *)v16, 1, 0, 0, 0);
    v15 = vaddq_s64(vsubq_s64(v18, v20), *(int64x2_t *)(v5 + 768));
    *(int64x2_t *)(v5 + 752) = vaddq_s64(vsubq_s64(v17, v19), *(int64x2_t *)(v5 + 752));
    *(int64x2_t *)(v5 + 768) = v15;
    return PelScorer::startRecordRequestedPels(*(PelScorer **)(v5 + 248));
  }
  return result;
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::add(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = (((unint64_t)*a2 >> 19) & 0x1FFFE000) + *((_DWORD *)a2 + 2);
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_DWORD *)(v11 + 20) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v11 + 12) = v13;
  *(_QWORD *)(v11 + 24) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v14 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  *v12 = v11;
  return result;
}

int64x2_t RecogController::maybeCleanupAfterEstimateAndPreScoreActivePels(RecogController *this, const BitArray *a2)
{
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  if (*((_BYTE *)this + 880))
  {
    v7 = 0u;
    v8 = 0u;
    SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
    PelScorer::startRecordRequestedPels(*((PelScorer **)this + 31));
    v5 = 0u;
    v6 = 0u;
    SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
    result = vaddq_s64(vsubq_s64(v5, v7), *((int64x2_t *)this + 47));
    v4 = vaddq_s64(vsubq_s64(v6, v8), *((int64x2_t *)this + 48));
    *((int64x2_t *)this + 47) = result;
    *((int64x2_t *)this + 48) = v4;
  }
  return result;
}

BOOL RecogController::accumulate(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  double v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  _BOOL8 result;
  unsigned int v27;
  double v28;
  _BYTE v29[56];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  *(_OWORD *)&v29[40] = 0u;
  v6 = PelStats::resetStats((PelStats *)v29);
  v7 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 208))(a1, v6);
  PelScorer::setupForUttAccumulate(v7, a3, (uint64_t)v29);
  v8 = *(unsigned int *)(*(_QWORD *)(v7 + 120) + 56);
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 152) + 4 * *(unsigned int *)(a1 + 312));
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) + 48)
                              + 216)
                  + 4 * (a2 >> 5)) & (1 << a2);
  v15 = *(_DWORD *)(a1 + 312);
  if (v15)
  {
    v16 = 18;
    if (v9 == 1)
    {
      v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 152) + 4 * (v15 - 1));
      if (v19 == 1)
        v16 = 15;
      else
        v16 = 18;
      if (v19 == 2)
        v16 = 12;
    }
    else if (v9 == 2)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 152) + 4 * (v15 - 1));
      if (v17 == 1)
        v18 = 6;
      else
        v18 = 18;
      if (v17 == 2)
        v16 = 3;
      else
        v16 = v18;
    }
  }
  else if (v9 == 1)
  {
    v16 = 9;
  }
  else
  {
    v16 = 0;
  }
  if (v14)
    v20 = 1;
  else
    v20 = 2;
  if (!(_DWORD)a2)
    v20 = 0;
  v21 = v16 + v20;
  v22 = *(_QWORD *)(a1 + 384);
  v23 = *(_DWORD *)(*(_QWORD *)(v22 + 16) + 4 * (v21 + 18 * *(_DWORD *)(a1 + 328)));
  *(_DWORD *)(a1 + 328) = v23;
  v24 = *(unsigned int *)(*(_QWORD *)(v22 + 32) + 4 * (v21 + 18 * v23));
  if ((_DWORD)v24 == -1)
    return 0;
  v25 = *(double *)(a1 + 376) * *(double *)(*(_QWORD *)(a1 + 344) + 8 * v24);
  if (v23)
  {
    result = ConstrainedTransAccMgr::adaptPel(*(_QWORD **)(a1 + 512), a2, v8, (uint64_t)a3, v10, v11, v12, v13, v25);
    if (!result)
      return result;
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 324) >= *(_DWORD *)(a1 + 340))
    return 0;
  result = ConstrainedTransAccMgr::adaptPel(*(_QWORD **)(a1 + 512), a2, v8, (uint64_t)a3, v10, v11, v12, v13, v25);
  if (!result)
    return result;
  ++*(_DWORD *)(a1 + 324);
LABEL_30:
  v27 = *(_DWORD *)(a1 + 360);
  if (v27 && !((*(_DWORD *)(a1 + 320) + 1) % v27))
  {
    v28 = *(double *)(a1 + 376);
    if (v28 >= 1000000.0)
    {
      ConstrainedTransAccMgr::downScaleAccum(*(_QWORD *)(a1 + 512), 1u, 1u, 1000.0);
      v28 = *(double *)(a1 + 376) / 1000.0;
    }
    *(double *)(a1 + 376) = v28 / *(double *)(a1 + 368);
  }
  return 1;
}

void RecogController::recognizeOneDoFrames(RecogController *this, MemChunkRegion *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  Utterance *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  MemChunkRegion *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Utterance *v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int64x2_t v85;
  __int128 v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  int64x2_t v97;
  __int128 v98;

  if (*((_DWORD *)this + 104))
  {
    if ((_DWORD)a2)
    {
      *((_BYTE *)this + 288) = 1;
      v9 = *((unsigned int *)this + 10);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *((_QWORD *)this + 50);
        do
        {
          if (!*(_BYTE *)(v11 + v10))
          {
            v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v10);
            if (!v12)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4673, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"bClientAbort in recognizeOneDoFrames");
            Recognizer::setSearchAbortRecognizerStats(v12, 5);
            v11 = *((_QWORD *)this + 50);
            *(_BYTE *)(v11 + v10) = 1;
            --*((_DWORD *)this + 104);
            v9 = *((unsigned int *)this + 10);
          }
          ++v10;
        }
        while (v10 < v9);
      }
      if (*((_BYTE *)this + 290))
        RecogController::restartPostSynchronousRecognition(this);
      if (*((_DWORD *)this + 232) == -1)
        RecogController::doAtEndOfRecognition(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = a3;
      v97 = 0u;
      v98 = 0u;
      v85 = 0u;
      v86 = 0u;
      SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
      v97 = v85;
      v98 = v86;
      v21 = (Utterance *)*((_QWORD *)this + 29);
      v20 = (_BYTE *)*((_QWORD *)this + 30);
      v96[0] = v21;
      v96[1] = v20;
      v96[2] = (char *)this + 292;
      v96[3] = (char *)this + 592;
      v96[4] = &v97;
      v96[5] = (char *)this + 624;
      if (v21 && !*v20)
      {
        ChannelMgr::maybeStartCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, v21, v14, v15, v16, v17, v18, v19);
        v20 = (_BYTE *)*((_QWORD *)this + 30);
      }
      v22 = *((_QWORD *)this + 56);
      v23 = (_BYTE *)*((_QWORD *)this + 60);
      v95[0] = "mainframetrans";
      v95[1] = v22;
      v95[2] = v23;
      v95[3] = (char *)this + 304;
      v95[4] = &v97;
      v95[5] = (char *)this + 688;
      if (v22 && !*v23)
      {
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 96))(v22, v20);
        v22 = *((_QWORD *)this + 56);
        v20 = (_BYTE *)*((_QWORD *)this + 30);
      }
      if (*((_QWORD *)this + 55) == v22)
        v24 = 0;
      else
        v24 = *((_QWORD *)this + 55);
      v25 = (_BYTE *)*((_QWORD *)this + 59);
      v94[0] = "prefframetrans";
      v94[1] = v24;
      v94[2] = v25;
      v94[3] = (char *)this + 300;
      v94[4] = &v97;
      v94[5] = (char *)this + 656;
      if (v24 && !*v25)
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 96))(v24, v20);
      v26 = *((_QWORD *)this + 57);
      v27 = *((_QWORD *)this + 62);
      v28 = (_BYTE *)*((_QWORD *)this + 63);
      v93[0] = "lookahead";
      v93[1] = v27;
      v93[2] = v28;
      v93[3] = (char *)this + 296;
      v93[4] = &v97;
      v93[5] = (char *)this + 784;
      if (v27 && !*v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, v26);
        v26 = *((_QWORD *)this + 57);
        v28 = (_BYTE *)*((_QWORD *)this + 63);
      }
      v29 = *((_QWORD *)this + 53);
      v30 = (_BYTE *)*((_QWORD *)this + 65);
      v92[0] = v29;
      v92[1] = v30;
      v92[2] = (char *)this + 308;
      v92[3] = (char *)this + 832;
      v92[4] = &v97;
      v92[5] = (char *)this + 784;
      if (v29 && !*v30)
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v29 + 128))(v29, v26, v28);
      v91 = 0;
      if (*((_DWORD *)this + 104))
      {
        v31 = v13 - 1;
        do
        {
          if (*a4)
            break;
          v32 = RecogController::recognizeOneDoMainSearch(this, &v97, &v91, v15, v16, v17, v18, v19);
          v33 = v32;
          *((_DWORD *)this + 98) = v32;
          if (!*((_DWORD *)this + 104))
            break;
          ProcessPrefilterer::ProcessPrefilterer(&v85, *((_QWORD *)this + 53), *((_QWORD *)this + 57), *((_BYTE **)this + 63), (*((_DWORD *)this + 78) + 1), v32 == 1, *((_BYTE *)this + 156), *((_BYTE **)this + 65), (_DWORD *)this + 77, (int64x2_t *)this + 52, &v97, (int64x2_t *)this + 49);
          v34 = v87;
          if (v87 <= v90)
            v35 = v90;
          else
            v35 = v87;
          if (v90 != -16)
            v34 = v35;
          if (v88 <= v34)
            v36 = v34;
          else
            v36 = v88;
          ProcessLookahead::ProcessLookahead(&v81, *((_QWORD *)this + 62), *((_QWORD *)this + 57), v36, v89 == 3, v33 == 1, *((unsigned __int8 *)this + 156), *((_BYTE **)this + 63), (_DWORD *)this + 74, &v97, (int64x2_t *)this + 49);
          v38 = v89 == 2;
          if (v87 <= v90)
            v39 = v90;
          else
            v39 = v87;
          if (v90 == -16)
            v40 = v87;
          else
            v40 = v39;
          if (v88 <= v40)
            v41 = v40;
          else
            v41 = v88;
          if (v89 == 3)
          {
            if (v81)
            {
              v42 = v84;
              if (*(_BYTE *)v82)
                v38 = 0;
              else
                v38 = *(_DWORD *)(v82 + 16) <= v84;
            }
            else
            {
              v38 = 0;
              v42 = v84;
            }
            if ((int)v42 <= (int)v83)
              v41 = v83;
            else
              v41 = v42;
          }
          ProcessFrameTransform::ProcessFrameTransform(&v78, v37, *((_QWORD *)this + 55), *((_QWORD *)this + 30), v41, v38, v33 == 1, *((_BYTE *)this + 156), *((_QWORD *)this + 59), (_DWORD *)this + 75, &v97, (int64x2_t *)this + 41);
          if (v33 == 2)
            v38 = 1;
          if (SDWORD1(v80) <= (int)v80)
            v43 = v80;
          else
            v43 = DWORD1(v80);
          if (v78)
            LODWORD(v43) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 56))(v78, v43);
          v44 = (*((_DWORD *)this + 78) + 1);
          if ((int)v43 > (int)v44)
          {
            v44 = SDWORD1(v80) <= (int)v80 ? v80 : DWORD1(v80);
            if (v78)
              v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 56))(v78, v44);
          }
          v45 = *((_DWORD *)this + 79);
          v46 = (int)v44 <= v45 + 1 ? (v45 + 1) : v44;
          ProcessFrameTransform::ProcessFrameTransform(&v75, v44, *((_QWORD *)this + 56), *((_QWORD *)this + 30), v46, v38, v33 == 2, *((_BYTE *)this + 156), *((_QWORD *)this + 60), (_DWORD *)this + 76, &v97, (int64x2_t *)this + 43);
          v47 = v78 && !*(_BYTE *)v79 && *(_DWORD *)(v79 + 16) <= SDWORD1(v80)
             || v75 && !*(_BYTE *)v76 && (unint64_t)(*(_DWORD *)(v76 + 16) <= SHIDWORD(v77));
          v48 = v33 == 1 ? v47 : 0;
          v49.i64[0] = v80;
          v49.i64[1] = v77;
          v50 = vmaxvq_s32(v49);
          v51 = v33 == 2 ? 1 : v48;
          ProcessChannel::ProcessChannel((ProcessChannel *)v74, v50, v47, v51, *((unsigned __int8 *)this + 156), *((Utterance **)this + 29), *((UttFeatureArraySynchronizedArray **)this + 30), (int *)this + 73, (int64x2_t *)this + 37, &v97, (int64x2_t *)this + 39);
          ProcessChannel::~ProcessChannel(v74, v52, v53, v54, v55, v56, v57, v58);
          ProcessFrameTransform::~ProcessFrameTransform((ProcessFrameTransform *)&v75);
          ProcessFrameTransform::~ProcessFrameTransform((ProcessFrameTransform *)&v78);
          ProcessLookahead::~ProcessLookahead((ProcessLookahead *)&v81);
          ProcessPrefilterer::~ProcessPrefilterer((ProcessPrefilterer *)&v85);
          if (!*((_DWORD *)this + 104))
            break;
        }
        while (v31 >= v91);
      }
      PrefiltererThreadInsurance::~PrefiltererThreadInsurance((PrefiltererThreadInsurance *)v92);
      LookaheadThreadInsurance::~LookaheadThreadInsurance((LookaheadThreadInsurance *)v93);
      FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)v94);
      FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)v95);
      ChannelThreadInsurance::~ChannelThreadInsurance((ChannelThreadInsurance *)v96, v59, v60, v61, v62, v63, v64, v65);
      if (!*((_DWORD *)this + 104))
      {
        if (*((_BYTE *)this + 290))
          RecogController::restartPostSynchronousRecognition(this);
        if (*((_DWORD *)this + 232) == -1)
          RecogController::doAtEndOfRecognition(this, v66, v67, v68, v69, v70, v71, v72);
      }
    }
  }
}

void sub_2099CD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  LookaheadThreadInsurance::~LookaheadThreadInsurance((LookaheadThreadInsurance *)&a51);
  FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)&a57);
  FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)(v57 - 224));
  ChannelThreadInsurance::~ChannelThreadInsurance((ChannelThreadInsurance *)(v57 - 176), v59, v60, v61, v62, v63, v64, v65);
  _Unwind_Resume(a1);
}

ConstrainedTransAccMgr *RecogController::doAtEndOfRecognition(RecogController *this, MemChunkRegion *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  Utterance *v10;
  ChannelMgr *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  PelScoreCache *v19;
  unsigned int *PelScoreCacheData;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  ConstrainedTransAccMgr *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  CWIDCrumbBank **v51;

  if (*((_DWORD *)this + 232) != -1)
    RecogController::setCallerThreadIdForChildren(this, -1);
  v9 = (_BYTE *)*((_QWORD *)this + 30);
  if (v9 && !*v9)
  {
    v10 = (Utterance *)*((_QWORD *)this + 29);
    if (*((_BYTE *)v10 + 416))
    {
      v11 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      do
      {
        ChannelMgr::collectAvailableDataForUtt(v11, v10, a3, a4, a5, a6, a7, a8);
        v10 = (Utterance *)*((_QWORD *)this + 29);
      }
      while (*((_BYTE *)v10 + 416));
      v9 = (_BYTE *)*((_QWORD *)this + 30);
    }
    UttFeatureArraySynchronizedArray::update((uint64_t)v9, v10);
  }
  if (*((_QWORD *)this + 54))
  {
    v12 = *(_DWORD *)(*((_QWORD *)this + 114) + 48) == 1 ? 2 : 1;
    if (Utterance::numCompleteRecogFrames(*((Utterance **)this + 29), v12) != *(_DWORD *)(*((_QWORD *)this + 54) + 16))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4886, (uint64_t)"recogctl/recogctl", 14, (uint64_t)"%s", a7, a8, (char)&errStr_recogctl_recogctl_E_PREFILTERRESULT_INCOMPATIBLE_WITH_UTT);
  }
  v13 = (_BYTE *)*((_QWORD *)this + 59);
  if (v13 && !*v13)
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 55) + 80))(*((_QWORD *)this + 55), (*(_DWORD *)(*((_QWORD *)this + 30) + 16) - 1));
  v14 = (_BYTE *)*((_QWORD *)this + 60);
  if (v14 && !*v14)
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 56) + 80))(*((_QWORD *)this + 56), (*(_DWORD *)(*((_QWORD *)this + 30) + 16) - 1));
  if (*((_DWORD *)this + 10))
  {
    for (i = 0; i < *((unsigned int *)this + 10); ++i)
    {
      if (*((_QWORD *)this + 30))
      {
        v16 = *((_QWORD *)this + 58);
        if (v16)
        {
          v17 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
          if (v17)
            goto LABEL_32;
          FstCore::setRecogEndTime(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * i), *(_DWORD *)(v16 + 16));
        }
        else
        {
          v16 = *((_QWORD *)this + 57);
          if (v16)
          {
            if (*(_QWORD *)(*((_QWORD *)this + 4) + 8 * i)
              || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4942, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Prefiltering in doAtEndOfRecognition"), (v16 = *((_QWORD *)this + 57)) != 0))
            {
              v17 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
LABEL_32:
              Recognizer::setRecogEndTime(v17, *(_DWORD *)(v16 + 16));
            }
          }
        }
      }
      v18 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
      if (v18)
        Recognizer::endTopRecPassSyncRecog(v18);
      else
        FstCore::endTopRecPassSyncRecog(*(FstCore **)(*((_QWORD *)this + 6) + 8 * i));
    }
  }
  if (*((_QWORD *)this + 113))
    *(_QWORD *)(*((_QWORD *)this + 113) + 1120) = MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(0, a2);
  if (*((_BYTE *)this + 8))
  {
    v19 = *(PelScoreCache **)(*((_QWORD *)this + 31) + 120);
    MrecInitModule_sdpres_sdapi();
    if (*((_BYTE *)this + 224))
    {
      PelScoreCacheData = PelScoreCache::makePelScoreCacheData(v19);
      (*(void (**)(RecogController *, unsigned int *))(*(_QWORD *)this + 224))(this, PelScoreCacheData);
      v21 = *((_QWORD *)this + 53);
      if (v21)
      {
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
        (*(void (**)(RecogController *, uint64_t))(*(_QWORD *)this + 216))(this, v22);
      }
    }
  }
  v23 = *((_QWORD *)this + 53);
  if (v23)
  {
    v24 = *((_QWORD *)this + 113);
    if (v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 80))(v23, v24 + 16, v24 + 192, v24 + 480, v24 + 656);
      v25 = *((_QWORD *)this + 113);
      v26 = *((_OWORD *)this + 53);
      *(_OWORD *)(v25 + 272) = *((_OWORD *)this + 52);
      *(_OWORD *)(v25 + 288) = v26;
      v27 = vsubq_s64(*((int64x2_t *)this + 50), *((int64x2_t *)this + 53));
      *(int64x2_t *)(v25 + 736) = vsubq_s64(*((int64x2_t *)this + 49), *((int64x2_t *)this + 52));
      *(int64x2_t *)(v25 + 752) = v27;
      v23 = *((_QWORD *)this + 53);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
  }
  v28 = *((_QWORD *)this + 62);
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    DgnDelete<SynchronizedArray<ScoreFixArray>>(*((_QWORD *)this + 63));
    *((_QWORD *)this + 63) = 0;
  }
  v29 = *((_QWORD *)this + 55);
  if (!v29 || v29 == *((_QWORD *)this + 56))
  {
    *((_QWORD *)this + 55) = 0;
    v33 = *((_QWORD *)this + 59);
    if (*((_QWORD *)this + 60) != v33)
      DgnDelete<UttFeatureArraySynchronizedArray>(v33);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
    v30 = (_QWORD *)*((_QWORD *)this + 55);
    if (v30)
    {
      (*(void (**)(_QWORD))*v30)(*((_QWORD *)this + 55));
      MemChunkFree(v30, 0);
    }
    *((_QWORD *)this + 55) = 0;
    v31 = *((_QWORD *)this + 29);
    v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 144))(*((_QWORD *)this + 53));
    Utterance::setTransformedFrames(v31, v32, *((_DWORD *)this + 122), *((_QWORD *)this + 59));
  }
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 57) = 0;
  v34 = *((_QWORD *)this + 56);
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
    v35 = (_QWORD *)*((_QWORD *)this + 56);
    if (v35)
    {
      (*(void (**)(_QWORD))*v35)(*((_QWORD *)this + 56));
      MemChunkFree(v35, 0);
    }
    *((_QWORD *)this + 56) = 0;
    Utterance::setTransformedFrames(*((_QWORD *)this + 29), *((_WORD *)this + 6), *((_DWORD *)this + 123), *((_QWORD *)this + 60));
    v36 = 0;
    *((_QWORD *)this + 60) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  else
  {
    v36 = *((_QWORD *)this + 60);
  }
  DgnDelete<UttFeatureArraySynchronizedArray>(v36);
  *((_QWORD *)this + 60) = 0;
  result = DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 64));
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 123) = 0;
  *((_QWORD *)this + 58) = 0;
  v40 = *((_QWORD *)this + 113);
  if (v40)
  {
    v41 = *((_QWORD *)this + 29);
    if (v41)
    {
      *(_DWORD *)(v40 + 976) = *(_DWORD *)(v41 + 8);
      *(_BYTE *)(v40 + 980) = *(_BYTE *)(v41 + 418);
      *(_OWORD *)(v40 + 984) = *(_OWORD *)(v41 + 24);
      *(_QWORD *)(v40 + 1000) = *(_QWORD *)(v41 + 80);
      *(_QWORD *)(v40 + 1008) = *(_QWORD *)(v41 + 88);
      *(_DWORD *)(v40 + 1016) = *(_DWORD *)(v41 + 96);
      *(_DWORD *)(v40 + 1020) = *(_DWORD *)(v41 + 344);
      v42 = *(_QWORD *)(v41 + 360);
      if (*(_OWORD *)(v41 + 352) == 0)
      {
        if (!*(_QWORD *)(v41 + 368) && !*(_QWORD *)(v41 + 376))
          goto LABEL_68;
        v42 = 0;
      }
      *(_QWORD *)(v40 + 1024) = *(_QWORD *)(v41 + 352);
      *(_QWORD *)(v40 + 1032) = v42;
      *(_OWORD *)(v40 + 1040) = *(_OWORD *)(v41 + 368);
      v43 = *(_OWORD *)(v41 + 400);
      *(_OWORD *)(v40 + 1056) = *(_OWORD *)(v41 + 384);
      *(_OWORD *)(v40 + 1072) = v43;
    }
LABEL_68:
    v44 = *((_OWORD *)this + 38);
    *(_OWORD *)(v40 + 1136) = *((_OWORD *)this + 37);
    *(_OWORD *)(v40 + 1152) = v44;
    v45 = *((_OWORD *)this + 40);
    *(_OWORD *)(v40 + 1168) = *((_OWORD *)this + 39);
    *(_OWORD *)(v40 + 1184) = v45;
    v46 = *((_OWORD *)this + 42);
    *(_OWORD *)(v40 + 1200) = *((_OWORD *)this + 41);
    *(_OWORD *)(v40 + 1216) = v46;
    v47 = *((_OWORD *)this + 44);
    *(_OWORD *)(v40 + 1232) = *((_OWORD *)this + 43);
    *(_OWORD *)(v40 + 1248) = v47;
    v48 = *((_OWORD *)this + 46);
    *(_OWORD *)(v40 + 1264) = *((_OWORD *)this + 45);
    *(_OWORD *)(v40 + 1280) = v48;
    v49 = *((_OWORD *)this + 48);
    *(_OWORD *)(v40 + 1296) = *((_OWORD *)this + 47);
    *(_OWORD *)(v40 + 1312) = v49;
  }
  if (*((_BYTE *)this + 544))
  {
    if (*((_DWORD *)this + 10))
    {
      v50 = 0;
      do
      {
        v51 = *(CWIDCrumbBank ***)(*((_QWORD *)this + 4) + 8 * v50);
        if (!v51)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 5111, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v38, v39, (char)"addCrumbsToPrefilterResult");
          v51 = *(CWIDCrumbBank ***)(*((_QWORD *)this + 4) + 8 * v50);
        }
        Recognizer::addCrumbsToPrefilterResult(v51, *((_BYTE *)this + 288), *((const PrefilterResult **)this + 67), *((_DWORD *)this + 137), *((PrefilterResult **)this + 66));
        ++v50;
      }
      while (v50 < *((unsigned int *)this + 10));
    }
    return (ConstrainedTransAccMgr *)PrefilterResult::setComplete(*((PrefilterResult **)this + 66));
  }
  return result;
}

uint64_t RecogController::finishRecognizeOne(uint64_t a1, MemChunkRegion *a2)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Recognizer *v8;
  void *RecognizerResults;
  void *v10;
  uint64_t *v11;
  int32x2_t *v12;
  NetMgr *v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t v18;
  int64x2_t *v19;
  int64x2_t v20;
  Recognizer *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  unsigned int v32;
  _OWORD *v33;
  __int128 v34;
  unsigned int v35;
  _OWORD *v36;
  __int128 v37;
  unsigned int v38;
  _OWORD *v39;
  __int128 v40;
  unsigned int v41;
  _OWORD *v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  unsigned int v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  unsigned int v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  unsigned int v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  _OWORD *v70;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  *(_BYTE *)(a1 + 897) = 1;
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 16;
    do
    {
      v8 = *(Recognizer **)(*(_QWORD *)(a1 + 32) + 8 * v6);
      if (v8)
        RecognizerResults = Recognizer::makeRecognizerResults(v8, (LatticeStats *)*(unsigned __int8 *)(a1 + 288), 1);
      else
        RecognizerResults = FstCore::makeRecognizerResults(*(FstCore **)(*(_QWORD *)(a1 + 48) + 8 * v6), (LatticeStats *)*(unsigned __int8 *)(a1 + 288));
      v10 = RecognizerResults;
      v11 = *(uint64_t **)(a1 + 904);
      if (v11)
      {
        v12 = *(int32x2_t **)(*(_QWORD *)(a1 + 32) + 8 * v6);
        if (v12)
        {
          v13 = (NetMgr *)(*(_QWORD *)&v12[35] + 16);
          v14 = *v11 + v5;
          LODWORD(v72[0]) = 0;
          Recognizer::getRecognizerStats(v12, v14, v14 + 176, v14 + 328, v14 + 752, v14 + 928, (int32x2_t *)(v14 + 1080), v72, (_DWORD *)(v14 + 1508), (_DWORD *)(v14 + 1512), (_DWORD *)(v14 + 1516), (_QWORD *)(v14 + 1520), (_QWORD *)(v14 + 1528), (_DWORD *)(v14 + 1536), (_DWORD *)(v14 + 1540), (_QWORD *)(v14 + 1544), v14 + 1552);
          *(_DWORD *)(v14 + 1504) = LODWORD(v72[0]) == 2;
          NetMgr::getNetMgrStats(v13, (NetStats *)(v14 + 360), (NetStats *)(v14 + 1112));
        }
        else
        {
          v15 = *v11;
          v14 = v15 + 2368 * v6;
          v16 = (int64x2_t *)(v15 + v5);
          LODWORD(v72[0]) = 0;
          FstCore::getRecognizerStats(*(int32x2_t **)(*(_QWORD *)(a1 + 48) + 8 * v6), v15 + v5, (LMStats *)(v15 + v5 + 176), v15 + v5 + 328, v15 + v5 + 752, (LMStats *)(v15 + v5 + 928), (int32x2_t *)(v15 + v5 + 1080), v72, (_DWORD *)(v15 + v5 + 1508), &v16[94].i32[2], &v16[94].i32[3], (int64x2_t *)v16[95].i64, &v16[95].i64[1], (int64x2_t *)v16[96].i32, &v16[96].i32[1], &v16[96].i64[1], (uint64_t)v16[97].i64);
          FstCore::getFstStats(*(FstCore **)(*(_QWORD *)(a1 + 48) + 8 * v6), (FstStats *)&v16[29], v16 + 76);
          v16[94].i32[0] = LODWORD(v72[0]) == 2;
        }
        v17 = (int64x2_t *)(*(_QWORD *)(a1 + 864) + v7);
        v18 = *v17;
        *(int64x2_t *)(v14 + 720) = v17[-1];
        *(int64x2_t *)(v14 + 736) = v18;
        v19 = (int64x2_t *)(*(_QWORD *)(a1 + 816) + v7);
        v20 = vsubq_s64(*v19, *v17);
        *(int64x2_t *)(v14 + 1472) = vsubq_s64(v19[-1], v17[-1]);
        *(int64x2_t *)(v14 + 1488) = v20;
      }
      v21 = *(Recognizer **)(*(_QWORD *)(a1 + 32) + 8 * v6);
      if (v21)
      {
        Recognizer::endTopRecSyncRecog(v21);
      }
      else
      {
        FstCore::endTopRecSyncRecog(*(FstCore **)(*(_QWORD *)(a1 + 48) + 8 * v6));
        RecogCtlMgr::releaseVirtMap(RecogCtlMgr::smpRecogCtlMgr, v22);
      }
      Latch<MemChunkRegion,LatchAdapter>::Latch(v72, (uint64_t)&gGlobalMemChunkRegion);
      v23 = *((_DWORD *)a2 + 2);
      if (v23 == *((_DWORD *)a2 + 3))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)a2, 1, 1);
        v23 = *((_DWORD *)a2 + 2);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v23) = v10;
      *((_DWORD *)a2 + 2) = v23 + 1;
      Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v72);
      ++v6;
      v3 = *(unsigned int *)(a1 + 40);
      v5 += 2368;
      v7 += 32;
    }
    while (v6 < v3);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 48))(*(_QWORD *)(a1 + 248));
    v24 = *(_QWORD *)(a1 + 448);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
    DgnDelete<UttFeatureArraySynchronizedArray>(*(_QWORD *)(a1 + 240));
    *(_QWORD *)(a1 + 240) = 0;
    LODWORD(v3) = *(_DWORD *)(a1 + 40);
  }
  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  if ((_DWORD)v3)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(_QWORD *)(v26 + 8 * v25);
      if (v27)
      {
        Recognizer::setConstraint(*(Constraint ***)(v26 + 8 * v25), 0);
        v28 = v84;
        if ((_DWORD)v84 == HIDWORD(v84))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v83, 1, 1);
          v28 = v84;
        }
        v29 = (_OWORD *)(v27 + 2024);
        v30 = (_OWORD *)(v83 + 32 * v28);
        v31 = v29[1];
        *v30 = *v29;
        v30[1] = v31;
        LODWORD(v84) = v28 + 1;
        v32 = v82;
        if ((_DWORD)v82 == HIDWORD(v82))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v81, 1, 1);
          v32 = v82;
        }
        v33 = (_OWORD *)(v81 + 32 * v32);
        v34 = v29[3];
        *v33 = v29[2];
        v33[1] = v34;
        LODWORD(v82) = v32 + 1;
        v35 = v80;
        if ((_DWORD)v80 == HIDWORD(v80))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v79, 1, 1);
          v35 = v80;
        }
        v36 = (_OWORD *)(v79 + 32 * v35);
        v37 = v29[11];
        *v36 = v29[10];
        v36[1] = v37;
        LODWORD(v80) = v35 + 1;
        v38 = v78;
        if ((_DWORD)v78 == HIDWORD(v78))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v77, 1, 1);
          v38 = v78;
        }
        v39 = (_OWORD *)(v77 + 32 * v38);
        v40 = v29[5];
        *v39 = v29[4];
        v39[1] = v40;
        LODWORD(v78) = v38 + 1;
        v41 = v76;
        if ((_DWORD)v76 == HIDWORD(v76))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v75, 1, 1);
          v41 = v76;
        }
        v42 = (_OWORD *)(v75 + 32 * v41);
        v43 = v29[7];
        *v42 = v29[6];
        v42[1] = v43;
        LODWORD(v76) = v41 + 1;
        v44 = v74;
        if ((_DWORD)v74 == HIDWORD(v74))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v73, 1, 1);
          v44 = v74;
        }
        v45 = v73;
        v46 = v44;
        v47 = v29[8];
        v48 = v29[9];
      }
      else
      {
        FstCore::setConstraint(*(Constraint ***)(*(_QWORD *)(a1 + 48) + 8 * v25), 0);
        v49 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        v50 = v84;
        v51 = v49;
        if ((_DWORD)v84 == HIDWORD(v84))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v83, 1, 1);
          v50 = v84;
          v51 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        }
        v52 = (_OWORD *)(v83 + 32 * v50);
        v53 = *(_OWORD *)(v49 + 512);
        *v52 = *(_OWORD *)(v49 + 496);
        v52[1] = v53;
        LODWORD(v84) = v50 + 1;
        v54 = v82;
        v55 = v51;
        if ((_DWORD)v82 == HIDWORD(v82))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v81, 1, 1);
          v54 = v82;
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        }
        v56 = (_OWORD *)(v81 + 32 * v54);
        v57 = *(_OWORD *)(v51 + 544);
        *v56 = *(_OWORD *)(v51 + 528);
        v56[1] = v57;
        LODWORD(v82) = v54 + 1;
        v58 = v80;
        v59 = v55;
        if ((_DWORD)v80 == HIDWORD(v80))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v79, 1, 1);
          v58 = v80;
          v59 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        }
        v60 = (_OWORD *)(v79 + 32 * v58);
        v61 = *(_OWORD *)(v55 + 672);
        *v60 = *(_OWORD *)(v55 + 656);
        v60[1] = v61;
        LODWORD(v80) = v58 + 1;
        v62 = v78;
        v63 = v59;
        if ((_DWORD)v78 == HIDWORD(v78))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v77, 1, 1);
          v62 = v78;
          v63 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        }
        v64 = (_OWORD *)(v77 + 32 * v62);
        v65 = *(_OWORD *)(v59 + 576);
        *v64 = *(_OWORD *)(v59 + 560);
        v64[1] = v65;
        LODWORD(v78) = v62 + 1;
        v66 = v76;
        v67 = v63;
        if ((_DWORD)v76 == HIDWORD(v76))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v75, 1, 1);
          v66 = v76;
          v67 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
        }
        v68 = (_OWORD *)(v75 + 32 * v66);
        v69 = *(_OWORD *)(v63 + 608);
        *v68 = *(_OWORD *)(v63 + 592);
        v68[1] = v69;
        LODWORD(v76) = v66 + 1;
        v44 = v74;
        if ((_DWORD)v74 == HIDWORD(v74))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v73, 1, 1);
          v44 = v74;
        }
        v45 = v73;
        v46 = v44;
        v47 = *(_OWORD *)(v67 + 624);
        v48 = *(_OWORD *)(v67 + 640);
      }
      v70 = (_OWORD *)(v45 + 32 * v46);
      *v70 = v47;
      v70[1] = v48;
      LODWORD(v74) = v44 + 1;
      ++v25;
    }
    while (v25 < *(unsigned int *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 904))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 904) + 1128) = MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(0, a2);
    memset(v72, 0, sizeof(v72));
    SnapTime::recordTime((SnapTime *)v72, 1, 1, 1, 1);
    RecogStats::initRecognitionPhaseTimes(*(_QWORD *)(a1 + 904), (int64x2_t *)(a1 + 160), (int64x2_t *)(a1 + 192), (uint64_t)&v83, (uint64_t)&v81, (uint64_t)&v79, (uint64_t)&v77, (uint64_t)&v75, (uint64_t)&v73, (uint64_t *)v72);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v73);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v75);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v79);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v81);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v83);
}

void sub_2099CDE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a26);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a28);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 136);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 104);
  _Unwind_Resume(a1);
}

void FstCore::getRecognizerStats(int32x2_t *a1, uint64_t a2, LMStats *this, uint64_t a4, uint64_t a5, LMStats *a6, int32x2_t *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _QWORD *a12, _QWORD *a13, _DWORD *a14, _DWORD *a15, _QWORD *a16, uint64_t a17)
{
  LMStats::resetStats(this);
  LMStats::resetStats(a6);
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  *a16 = 0;
  PelStats::operator=(a2, (uint64_t)&a1[32]);
  PelStats::operator=(a5, (uint64_t)&a1[10]);
  PelStats::operator-=(a5, (uint64_t)&a1[32]);
  SearchStats::operator=(a4, (uint64_t)&a1[58]);
  SearchStats::operator=((uint64_t)a7, (uint64_t)&a1[54]);
  a7[1].i32[0] = a1[59].i32[0];
  SearchStats::operator-=(a7, a1 + 58);
  a7[1].i32[0] = a1[55].i32[0];
  *a8 = a1[6].i32[0];
  LatticeStats::operator=(a17, (uint64_t)&a1[86]);
  *a14 = a1[137].i32[0];
  *a15 = a1[137].i32[1];
}

double FstCore::getFstStats(FstCore *this, FstStats *a2, int64x2_t *a3)
{
  int64x2_t *v5;
  double result;

  v5 = (int64x2_t *)((char *)this + 1376);
  FstStats::operator=((uint64_t)a2, (uint64_t)this + 1376);
  FstStats::operator=((uint64_t)a3, (uint64_t)this + 1120);
  *(_QWORD *)&result = FstStats::operator-=(a3, v5).u64[0];
  return result;
}

double Recognizer::getRecognizerStats(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _QWORD *a12, _QWORD *a13, _DWORD *a14, _DWORD *a15, _QWORD *a16, uint64_t a17)
{
  uint64_t v23;

  v23 = (uint64_t)&a1[155];
  PelStats::operator=(a2, (uint64_t)&a1[155]);
  LMStats::operator=(a3, (uint64_t)&a1[177]);
  SearchStats::operator=(a4, (uint64_t)&a1[196]);
  PelStats::operator=(a5, (uint64_t)&a1[110]);
  PelStats::operator-=(a5, v23);
  LMStats::operator=(a6, (uint64_t)&a1[132]);
  LMStats::operator-=(a6, (uint64_t)&a1[177]);
  SearchStats::operator=((uint64_t)a7, (uint64_t)&a1[151]);
  a7[1].i32[0] = a1[197].i32[0];
  SearchStats::operator-=(a7, a1 + 196);
  a7[1].i32[0] = a1[152].i32[0];
  *a8 = a1[43].i32[1];
  *a9 = a1[288].i32[1];
  *a10 = a1[289].i32[0];
  *a11 = a1[289].i32[1];
  *a12 = a1[290];
  *a13 = a1[291];
  *a14 = a1[292].i32[0];
  *a15 = a1[292].i32[1];
  *a16 = a1[201];
  return LatticeStats::operator=(a17, (uint64_t)&a1[202]);
}

int32x2_t NetMgr::getNetMgrStats(NetMgr *this, NetStats *a2, NetStats *a3)
{
  char *v5;

  v5 = (char *)this + 302680;
  NetStats::operator=((uint64_t)a2, (uint64_t)this + 302680);
  NetStats::operator=((uint64_t)a3, (uint64_t)this + 302576);
  return NetStats::operator-=((uint64_t)a3, (uint64_t)v5);
}

uint64_t RecogController::getReproMgr(RecogController *this)
{
  return *((_QWORD *)this + 111);
}

uint64_t RecogController::abortRecognizeOne(RecogController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  Recognizer *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  *((_BYTE *)this + 897) = 1;
  if (*((_DWORD *)this + 10))
  {
    v9 = 0;
    do
    {
      if (!*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 5360, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"abortRecognizeOne");
      v10 = (*(uint64_t (**)(RecogController *))(*(_QWORD *)this + 40))(this);
      v11 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * v9);
      if ((v10 & 1) == 0)
      {
        Recognizer::endTopRecPassSyncRecog((uint64_t)v11);
        v11 = *(Recognizer **)(*((_QWORD *)this + 4) + 8 * v9);
      }
      Recognizer::endTopRecSyncRecog(v11);
      Recognizer::setConstraint(*(Constraint ***)(*((_QWORD *)this + 4) + 8 * v9++), 0);
    }
    while (v9 < *((unsigned int *)this + 10));
  }
  if (*((_QWORD *)this + 29))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 31) + 48))(*((_QWORD *)this + 31));
    DgnDelete<UttFeatureArraySynchronizedArray>(*((_QWORD *)this + 30));
    *((_QWORD *)this + 30) = 0;
  }
  result = (*(uint64_t (**)(RecogController *))(*(_QWORD *)this + 40))(this);
  if ((result & 1) == 0)
  {
    v13 = *((_QWORD *)this + 53);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
    v14 = *((_QWORD *)this + 62);
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      DgnDelete<SynchronizedArray<ScoreFixArray>>(*((_QWORD *)this + 63));
      *((_QWORD *)this + 63) = 0;
    }
    v15 = *((_QWORD *)this + 55);
    if (!v15 || v15 == *((_QWORD *)this + 56))
    {
      *((_QWORD *)this + 55) = 0;
      v17 = *((_QWORD *)this + 59);
      if (*((_QWORD *)this + 60) == v17)
      {
LABEL_22:
        *((_QWORD *)this + 59) = 0;
        *((_DWORD *)this + 122) = 0;
        *((_QWORD *)this + 57) = 0;
        v18 = *((_QWORD *)this + 56);
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
          v19 = (_QWORD *)*((_QWORD *)this + 56);
          if (v19)
          {
            (*(void (**)(_QWORD))*v19)(*((_QWORD *)this + 56));
            MemChunkFree(v19, 0);
          }
          *((_QWORD *)this + 56) = 0;
        }
        DgnDelete<UttFeatureArraySynchronizedArray>(*((_QWORD *)this + 60));
        *((_QWORD *)this + 60) = 0;
        result = (uint64_t)DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 64));
        *((_QWORD *)this + 64) = 0;
        *((_DWORD *)this + 123) = 0;
        *((_QWORD *)this + 58) = 0;
        return result;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      v16 = (_QWORD *)*((_QWORD *)this + 55);
      if (v16)
      {
        (*(void (**)(_QWORD))*v16)(*((_QWORD *)this + 55));
        MemChunkFree(v16, 0);
      }
      *((_QWORD *)this + 55) = 0;
      v17 = *((_QWORD *)this + 59);
    }
    DgnDelete<UttFeatureArraySynchronizedArray>(v17);
    goto LABEL_22;
  }
  return result;
}

uint64_t RecogController::makePartialResult(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int Root;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  int64x2_t *v32;
  int64x2_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (*(_DWORD *)(this + 40))
  {
    v1 = this;
    v2 = 0;
    v37 = (_DWORD *)(this + 120);
    v34 = this + 136;
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)(v1 + 72) + 16 * v2 + 8) = 0;
      *(_DWORD *)(*(_QWORD *)(v1 + 88) + 16 * v2 + 8) = 0;
      if (*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v2))
        break;
      *(_DWORD *)(*(_QWORD *)(v1 + 104) + 4 * v2) = FstCore::makePartialResult(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v2), (uint64_t)v37, v34);
      v9 = *(_DWORD *)(v1 + 128);
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(v1 + 88) + 16 * v2;
          v13 = (_DWORD *)(v11 + 8);
          v12 = *(unsigned int *)(v11 + 8);
          if (v12 == *(_DWORD *)(v11 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(v1 + 88) + 16 * v2, 1, 1);
            v12 = *v13;
          }
          *(_DWORD *)(*(_QWORD *)v11 + 4 * v12) = 1;
          ++*v13;
          v9 = *(_DWORD *)(v1 + 128);
        }
      }
LABEL_20:
      v44 = 0;
      v45 = 0;
      v42 = 0;
      v43 = 0;
      v40 = 0;
      v41 = 0;
      if (v9)
      {
        v14 = 0;
        v35 = 0;
        v36 = 0;
        v15 = 88;
        while (1)
        {
          Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, *(unsigned int *)(*(_QWORD *)v37 + v15));
          if (Root >> 25 == 126)
            v17 = 127;
          else
            v17 = Root >> 25;
          v18 = *(_QWORD *)(v1 + 120) + v15;
          v19 = *(_QWORD *)(v18 - 72);
          v20 = *(_DWORD *)(v18 - 64);
          v21 = *(_QWORD *)(v1 + 72) + 16 * v2;
          v23 = (unsigned int *)(v21 + 8);
          v22 = *(_DWORD *)(v21 + 8);
          if (v22 == (unint64_t)*(unsigned int *)(v21 + 12))
          {
            DgnArray<RecogResultToken>::reallocElts(*(_QWORD *)(v1 + 72) + 16 * v2, 1, 1);
            v22 = *v23;
          }
          v24 = *(_QWORD *)v21 + 96 * v22;
          *(_DWORD *)v24 = Root >> 25 == 126;
          *(_WORD *)(v24 + 4) = v17;
          *(_DWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 12) = Root & 0xFFFFFF;
          *(_DWORD *)(v24 + 16) = 16777212;
          *(_QWORD *)(v24 + 20) = v19;
          *(_DWORD *)(v24 + 28) = v20;
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = 0;
          *(_QWORD *)(v24 + 48) = 0;
          *(_QWORD *)(v24 + 56) = 0xFFFFFFFF00000000;
          *(_QWORD *)(v24 + 64) = 0;
          *(_QWORD *)(v24 + 72) = 0;
          *(_BYTE *)(v24 + 80) = 0;
          *(_QWORD *)(v24 + 88) = 0;
          *(_DWORD *)(v24 + 84) = 0;
          ++*v23;
          v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16 * v2) + 4 * v14);
          if (v25 == 3)
            goto LABEL_36;
          if (v25 == 2)
            goto LABEL_33;
          if (v25 == 1)
            break;
LABEL_39:
          ++v14;
          v15 += 112;
          if (v14 >= *(unsigned int *)(v1 + 128))
            goto LABEL_42;
        }
        v26 = v41;
        if (v41 == (unint64_t)HIDWORD(v41))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v40, 1, 1);
          v26 = v41;
        }
        *(_DWORD *)(v40 + 4 * v26) = Root;
        LODWORD(v41) = v41 + 1;
        v35 += *(_DWORD *)(*(_QWORD *)v37 + v15 - 68) + *(_DWORD *)(*(_QWORD *)v37 + v15 - 64);
LABEL_33:
        v27 = v43;
        if (v43 == (unint64_t)HIDWORD(v43))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v42, 1, 1);
          v27 = v43;
        }
        *(_DWORD *)(v42 + 4 * v27) = Root;
        LODWORD(v43) = v43 + 1;
        LODWORD(v36) = *(_DWORD *)(*(_QWORD *)v37 + v15 - 68) + v36 + *(_DWORD *)(*(_QWORD *)v37 + v15 - 64);
LABEL_36:
        v28 = v45;
        if (v45 == (unint64_t)HIDWORD(v45))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v44, 1, 1);
          v28 = v45;
        }
        *(_DWORD *)(v44 + 4 * v28) = Root;
        LODWORD(v45) = v45 + 1;
        HIDWORD(v36) += *(_DWORD *)(*(_QWORD *)v37 + v15 - 68) + *(_DWORD *)(*(_QWORD *)v37 + v15 - 64);
        goto LABEL_39;
      }
      v36 = 0;
      v35 = 0;
LABEL_42:
      v29 = *(uint64_t **)(v1 + 904);
      if (v29)
      {
        v30 = *v29;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 160))(v1, v2);
        v38 = 0u;
        v39 = 0u;
        SnapTime::recordTime((SnapTime *)&v38, 1, 1, 1, 1);
        v32 = *(int64x2_t **)(v1 + 904);
        v33 = vsubq_s64(v39, v32[69]);
        v38 = vsubq_s64(v38, v32[68]);
        v39 = v33;
        PRStats::recordPartialResult(v30 + 2368 * v2 + 1960, (uint64_t)&v44, v31 * (unint64_t)HIDWORD(v36), v38.i64);
        PRStats::recordPartialResult(v30 + 2368 * v2 + 2096, (uint64_t)&v42, v31 * (unint64_t)v36, v38.i64);
        PRStats::recordPartialResult(v30 + 2368 * v2 + 2232, (uint64_t)&v40, v31 * (unint64_t)v35, v38.i64);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
      this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v44);
      if (++v2 >= (unint64_t)*(unsigned int *)(v1 + 40))
        return this;
    }
    v3 = *(_DWORD *)(v1 + 64);
    if (v3)
    {
      v4 = *(_QWORD *)(v1 + 520);
      if (v3 == 2)
      {
        v5 = *(_QWORD *)(v1 + 424);
        if (v5)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
          if (v6)
          {
            v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 424) + 184))(*(_QWORD *)(v1 + 424));
            v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 424) + 96))(*(_QWORD *)(v1 + 424));
LABEL_19:
            *(_DWORD *)(*(_QWORD *)(v1 + 104) + 4 * v2) = Recognizer::makePartialResult(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v2), v4, v6, v7, v8, v37, v34, *(_QWORD *)(v1 + 88) + 16 * v2);
            v9 = *(_DWORD *)(v1 + 128);
            goto LABEL_20;
          }
          v7 = 0;
LABEL_18:
          v8 = -16;
          goto LABEL_19;
        }
      }
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v4 = 0;
    }
    v6 = 0;
    goto LABEL_18;
  }
  return this;
}

void sub_2099CE8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void RecogControllerBase::makeRecogController(uint64_t a1, const RecogSpec *a2, uint64_t a3, PrefiltererSearchParamSet *a4, SearchCrossLayerParamSet *a5)
{
  uint64_t *v10;
  uint64_t *v11;

  if ((_DWORD)a1)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    ThreadedRecogController::ThreadedRecogController(v10, a1, a2, a3, a4, a5);
  }
  else
  {
    v11 = MemChunkAlloc(0x420uLL, 0);
    RecogController::RecogController((RecogController *)v11, a2, a3, a4, a5);
  }
}

uint64_t RecogControllerBase::maybeStartRecogController(RecogControllerBase *this, DgnEvent *a2)
{
  return 0;
}

uint64_t RecogController::getNumRecogLayers(RecogController *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t RecogController::calledStartRecognizeOne(RecogController *this)
{
  return *((unsigned __int8 *)this + 896);
}

uint64_t RecogController::calledFinishRecognizeOne(RecogController *this)
{
  return *((unsigned __int8 *)this + 897);
}

uint64_t RecogController::calledExtractPrefilterResult(RecogController *this)
{
  return *((unsigned __int8 *)this + 898);
}

uint64_t RecogController::getPartialResult(RecogController *this, unsigned int a2)
{
  return *((_QWORD *)this + 9) + 16 * a2;
}

uint64_t RecogController::getPartialTokenConfidences(RecogController *this, unsigned int a2)
{
  return *((_QWORD *)this + 11) + 16 * a2;
}

uint64_t RecogController::getPartialResultScore(RecogController *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 13) + 4 * a2);
}

uint64_t RecogController::getPartialResultMicrosecPerRecogFrame(RecogController *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int *v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2);
  if (v2)
    v3 = (unsigned int *)(v2 + 356);
  else
    v3 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) + 56);
  return *v3;
}

uint64_t RecogController::getContinuationInterval(RecogController *this)
{
  return *((unsigned int *)this + 38);
}

BOOL RecogController::isUsingPrefilterer(RecogController *this, const Prefilterer *a2)
{
  return *((_QWORD *)this + 53) == (_QWORD)a2;
}

uint64_t RecogController::getUser(RecogController *this)
{
  return *(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 40) + 8 * *((unsigned __int16 *)this + 6));
}

uint64_t RecogController::getOnlineCTPelScorer(RecogController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 31) + 96);
}

uint64_t RecogController::setPrefPelScoreCacheData(uint64_t this, PelScoreCacheData *a2)
{
  *(_QWORD *)(this + 256) = a2;
  return this;
}

uint64_t RecogController::setRecogPelScoreCacheData(uint64_t this, PelScoreCacheData *a2)
{
  *(_QWORD *)(this + 264) = a2;
  return this;
}

uint64_t RecogController::getPrefPelScores(RecogController *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t RecogController::getRecogPelScores(RecogController *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t RecogController::getRecogStats(RecogController *this)
{
  return *((_QWORD *)this + 113);
}

uint64_t RecogController::getPrefiltererSearchParamSet(RecogController *this)
{
  return *((_QWORD *)this + 114);
}

uint64_t RecogController::getSearchCrossLayerParamSet(RecogController *this)
{
  return *((_QWORD *)this + 115);
}

uint64_t RecogController::getSearchParamSet(RecogController *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 296);
}

uint64_t RecogController::isThreaded(RecogController *this)
{
  return 0;
}

void PRStats::~PRStats(PRStats *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnArray<PRStatsItem>::releaseAll((uint64_t)this);
}

_QWORD *DgnArray<PRStatsItem>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 96 * v2 - 48;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v3);
      v3 -= 96;
    }
    while (v3 != -48);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<RecogSpecLayer *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

RecogSpecLayer *DgnIOwnArray<RecogSpecLayer *>::destructAt(RecogSpecLayer *result, int a2, int a3)
{
  RecogSpecLayer *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(_QWORD *)v3 + 8 * v5));
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

unsigned int *DgnIOwnArray<RecogSpecLayer *>::copyArraySlice(unsigned int *result, _QWORD *a2, int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v7 = result;
  v8 = result[3];
  if (a4 > v8)
    result = (unsigned int *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)result, a4 - v8, 0);
  v9 = v7[2];
  if (v9 <= a4)
  {
    if (v9 < a4)
    {
      do
        *(_QWORD *)(*(_QWORD *)v7 + 8 * v9++) = 0;
      while (a4 != v9);
    }
  }
  else
  {
    result = (unsigned int *)DgnIOwnArray<RecogSpecLayer *>::destructAt((RecogSpecLayer *)v7, a4, v9 - a4);
  }
  v7[2] = a4;
  if (a4)
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = *(_QWORD *)(*a2 + 8 * (a3 + v10));
      ++v10;
    }
    while (a4 != v10);
  }
  return result;
}

_QWORD *DgnArray<RecogLayerStats>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<RecogLayerStats>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void DgnArray<RecogLayerStats>::destructAt(_QWORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PRStats *v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v5 = v3;
    v6 = a2;
    v7 = 2368 * v3 - 136;
    do
    {
      --v5;
      v8 = (PRStats *)(*a1 + v7);
      PRStats::~PRStats(v8);
      PRStats::~PRStats((PRStats *)((char *)v8 - 136));
      PRStats::~PRStats((PRStats *)((char *)v8 - 272));
      v7 -= 2368;
    }
    while (v5 > v6);
  }
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218A18;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 24;
  else
    v7 = 32;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2099CEE1C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(uint64_t a1)
{
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

_QWORD *DgnIOwnArray<FstCore *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<FstCore>(*(FstCore **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218A18;
  if (*(_DWORD *)(a1 + 8))
    Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

unint64_t DgnArray<RecogLayerStats>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 2368 * v6, 2368 * v5, 2368 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x940;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<SnapTime>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<PrefilterResultFrame>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = *a2;
  v12 = *(_QWORD *)v7;
  v13 = a4;
  v10 = v9;
  do
  {
    v14 = (__int128 *)(v11 + 32 * a3);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_OWORD *)(v12 + 32 * v10);
    *v17 = v15;
    v17[1] = v16;
    ++v10;
    ++a3;
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
  {
    v18 = a4 - (unint64_t)v10;
    v19 = 32 * v10;
    do
    {
      v20 = (_OWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0uLL;
      v20[1] = 0uLL;
      v19 += 32;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t **Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::findBucket(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t **result;
  uint64_t *v7;
  uint64_t **v8;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = ((*(_QWORD *)a2 >> 19) & 0x1FFFE000) + v2;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
    v5 = (-1640531527 * v3) >> -(char)v4;
  else
    v5 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v5);
  v7 = *result;
  if (*result)
  {
    do
    {
      v8 = (uint64_t **)v7;
      if (*((_DWORD *)v7 + 2) == v3
        && ((*(uint64_t *)((char *)v7 + 12) ^ *(_QWORD *)a2) & 0xFFFF00000000) == 0
        && *((_DWORD *)v7 + 5) == v2)
      {
        break;
      }
      v7 = (uint64_t *)*v7;
      result = v8;
    }
    while (*v8);
  }
  return result;
}

void MrecInitModule_arcgraph_fst(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugFstArcGraphIO)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstArcGraphIO", byte_209A7D5D4, byte_209A7D5D4, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugFstArcGraphIO = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstArcGraphIO);
  }
}

void ArcGraph::~ArcGraph(PicMgr **this)
{
  DgnDelete<PicMgr>(this[31]);
  this[31] = 0;
  DgnDelete<PhnMgr>(this[32]);
  this[32] = 0;
  if (*this)
    DgnSharedMemSet::unrefDSMEx((DSMSetData **)*this, *((unsigned int *)this + 2));
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 29));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 27));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 19));
  FileHistory::~FileHistory((FileHistory *)(this + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 7));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 5));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 3));
}

PhnMgr *DgnDelete<PhnMgr>(PhnMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    PhnMgr::~PhnMgr(result);
    return (PhnMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

void ArcGraph::printSize(ArcGraph *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  PicMgr *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  PhnMgr *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2029, (DgnString *)&v155);
  if (v156)
    v16 = (void *)v155;
  else
    v16 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7D5D4, a3, &unk_209A7D5D4, v16);
  DgnString::~DgnString((DgnString *)&v155);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7D5D4);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v152 = a3;
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2030, (DgnString *)&v155);
  if (v156)
    v28 = (void *)v155;
  else
    v28 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &unk_209A7D5D4, v23, v23, v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2031, (DgnString *)&v155);
  if (v156)
    v33 = (void *)v155;
  else
    v33 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, v22, &unk_209A7D5D4, v23, v23, v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  v34 = sizeObject((uint64_t)this + 16, 0);
  v35 = sizeObject((uint64_t)this + 16, 1);
  v36 = sizeObject((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2033, (DgnString *)&v155);
  if (v156)
    v41 = (void *)v155;
  else
    v41 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v22, &unk_209A7D5D4, v23, v23, v41, v34, v35, v36);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v34;
  *a5 += v35;
  *a6 += v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2035, (DgnString *)&v155);
  if (v156)
    v46 = (void *)v155;
  else
    v46 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v22, &unk_209A7D5D4, v23, v23, v46, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  v47 = sizeObject((uint64_t)this + 112, 0);
  v48 = sizeObject((uint64_t)this + 112, 1);
  v49 = sizeObject((uint64_t)this + 112, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2037, (DgnString *)&v155);
  if (v156)
    v54 = (void *)v155;
  else
    v54 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v22, &unk_209A7D5D4, v23, v23, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2038, (DgnString *)&v155);
  if (v156)
    v59 = (void *)v155;
  else
    v59 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v22, &unk_209A7D5D4, v23, v23, v59, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2040, (DgnString *)&v155);
  if (v156)
    v64 = (void *)v155;
  else
    v64 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_209A7D5D4, v23, v23, v64, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2042, (DgnString *)&v155);
  if (v156)
    v69 = (void *)v155;
  else
    v69 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v22, &unk_209A7D5D4, v23, v23, v69, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v70 = 12;
  else
    v70 = 16;
  v71 = *((unsigned int *)this + 40);
  v72 = *((_DWORD *)this + 41);
  if (v72 >= v71)
  {
    v73 = 0;
    if ((int)v71 > 0)
      v70 += 4 * (v71 - 1) + 4;
    v74 = v70 + 4 * (v72 - v71);
  }
  else
  {
    v73 = 4 * v71;
    v74 = v70;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2043, (DgnString *)&v155);
  if (v156)
    v79 = (void *)v155;
  else
    v79 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v22, &unk_209A7D5D4, v23, v23, v79, v74, v70, v73);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v74;
  *a5 += v70;
  *a6 += v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2044, (DgnString *)&v155);
  if (v156)
    v84 = (void *)v155;
  else
    v84 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v22, &unk_209A7D5D4, v23, v23, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2045, (DgnString *)&v155);
  if (v156)
    v89 = (void *)v155;
  else
    v89 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v22, &unk_209A7D5D4, v23, v23, v89, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2046, (DgnString *)&v155);
  if (v156)
    v94 = (void *)v155;
  else
    v94 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v22, &unk_209A7D5D4, v23, v23, v94, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2047, (DgnString *)&v155);
  if (v156)
    v99 = (void *)v155;
  else
    v99 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v22, &unk_209A7D5D4, v23, v23, v99, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2049, (DgnString *)&v155);
  if (v156)
    v104 = (void *)v155;
  else
    v104 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v22, &unk_209A7D5D4, v23, v23, v104, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2050, (DgnString *)&v155);
  if (v156)
    v109 = (void *)v155;
  else
    v109 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v22, &unk_209A7D5D4, v23, v23, v109, 26, 26, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 26;
  *a5 += 26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2052, (DgnString *)&v155);
  if (v156)
    v114 = (void *)v155;
  else
    v114 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v22, &unk_209A7D5D4, v23, v23, v114, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v115 = 12;
  else
    v115 = 16;
  v116 = *((unsigned int *)this + 56);
  v117 = *((_DWORD *)this + 57);
  if (v117 >= v116)
  {
    v118 = 0;
    if ((int)v116 > 0)
      v115 += 4 * (v116 - 1) + 4;
    v119 = v115 + 4 * (v117 - v116);
  }
  else
  {
    v118 = 4 * v116;
    v119 = v115;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2053, (DgnString *)&v155);
  if (v156)
    v124 = (void *)v155;
  else
    v124 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v22, &unk_209A7D5D4, v23, v23, v124, v119, v115, v118);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v119;
  *a5 += v115;
  *a6 += v118;
  v125 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 0);
  v126 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 1);
  v127 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2054, (DgnString *)&v155);
  if (v156)
    v132 = (void *)v155;
  else
    v132 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v22, &unk_209A7D5D4, v23, v23, v132, v125, v126, v127);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v125;
  *a5 += v126;
  *a6 += v127;
  v133 = (PicMgr *)*((_QWORD *)this + 31);
  if (v133)
  {
    v154 = 0;
    v155 = 0;
    v153 = 0;
    PicMgr::printSize(v133, 0xFFFFFFFFLL, v22, &v155, &v154, &v153);
    *a4 += v155;
    *a5 += v154;
    *a6 += v153;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v134 = 4;
  else
    v134 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2056, (DgnString *)&v155);
  if (v156)
    v139 = (void *)v155;
  else
    v139 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v22, &unk_209A7D5D4, v23, v23, v139, v134, v134, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v134;
  *a5 += v134;
  v140 = (PhnMgr *)*((_QWORD *)this + 32);
  if (v140)
  {
    v154 = 0;
    v155 = 0;
    v153 = 0;
    PhnMgr::printSize(v140, 0xFFFFFFFFLL, v22, &v155, &v154, &v153);
    *a4 += v155;
    *a5 += v154;
    *a6 += v153;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v141 = 4;
  else
    v141 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2058, (DgnString *)&v155);
  if (v156)
    v146 = (void *)v155;
  else
    v146 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v22, &unk_209A7D5D4, v23, v23, v146, v141, v141, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v141;
  *a5 += v141;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2059, (DgnString *)&v155);
  if (v156)
    v151 = (void *)v155;
  else
    v151 = &unk_209A7D5D4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v152, &unk_209A7D5D4, (35 - v152), (35 - v152), v151, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v155);
}

void sub_2099CFDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double ArcGraph::lexToCWIDAC@<D0>(ArcGraph *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  double result;

  *(_DWORD *)a9 = ArcGraph::lexToCWID(this, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a9 + 4) = 0x3FFF;
  result = NAN;
  *(_OWORD *)(a9 + 8) = xmmword_209A593D0;
  return result;
}

uint64_t ArcGraph::lexToCWID(ArcGraph *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v12 = *(_QWORD *)(VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 87), a3, a4, a5, a6, a7, a8)+ 48);
  if (*(_DWORD *)(v12 + 388) > a2 && *(_BYTE *)(*(_QWORD *)(v12 + 104) + a2))
    return *(_DWORD *)(*(_QWORD *)(v12 + 256) + 4 * a2) & 0xFFFFFF | (*((unsigned __int16 *)this + 87) << 25);
  result = 4244635645;
  if (a2 == 16777214)
    return 4244635646;
  if (a2 != 16777213)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2097, (uint64_t)"fst/arcgraph", 27, (uint64_t)&errStr_fst_arcgraph_E_INVALID_WORDID, v10, v11, a2);
    return 4211081215;
  }
  return result;
}

void ArcGraph::getNameAndHumanReadablePron(ArcGraph *this, unsigned int a2, DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  DgnString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  void *v20;
  int v21;
  _BYTE v22[16];
  void *v23;
  int v24;

  v12 = *(_QWORD *)(VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 87), (uint64_t)a3, a4, a5, a6, a7, a8)+ 48);
  if (*(_DWORD *)(v12 + 388) > a2 && *(_BYTE *)(*(_QWORD *)(v12 + 104) + a2))
  {
    DgnString::DgnString((DgnString *)&v23);
    WordList::getHumanReadablePron((WordList *)v12, a2, (DgnString *)&v23);
    DgnString::DgnString((DgnString *)v22, (const char *)(*(_QWORD *)(v12 + 224) + *(unsigned int *)(*(_QWORD *)(v12 + 200) + 4 * a2)));
    DgnString::DgnString((DgnString *)&v20);
    DgnTextFile::convertToDTFFormat((DgnTextFile *)v22, (const DgnString *)&v20, v13);
    if (v21)
      v17 = v20;
    else
      v17 = &unk_209A7D5D4;
    if (v24)
      v18 = v23;
    else
      v18 = &unk_209A7D5D4;
    DgnString::stringPrintf(a3, "%s(%s)", v14, v15, v16, v17, v18);
    DgnString::~DgnString((DgnString *)&v20);
    DgnString::~DgnString((DgnString *)v22);
    DgnString::~DgnString((DgnString *)&v23);
  }
  else
  {
    switch(a2)
    {
      case 0xFFFFF9u:
        v19 = "~SIL";
        goto LABEL_17;
      case 0xFFFFFAu:
        v19 = "<epsilon>";
        goto LABEL_17;
      case 0xFFFFFDu:
        v19 = "</s>";
        goto LABEL_17;
      case 0xFFFFFEu:
        v19 = "<s>";
LABEL_17:
        DgnString::operator=(a3, v19);
        break;
      default:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2238, (uint64_t)"fst/arcgraph", 26, (uint64_t)&errStr_fst_arcgraph_E_INVALID_WORDID_TEXT, v10, v11, a2);
        break;
    }
  }
}

void sub_2099D00B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  _Unwind_Resume(a1);
}

void ArcGraph::ensureHeaderValid(ArcGraph *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_BYTE *)this + 178))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2371, (uint64_t)"fst/arcgraph", 5, (uint64_t)"%.500s", a7, a8, (char)a2);
}

uint64_t ArcGraph::findBackoffState(uint64_t this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;

  v1 = *(_DWORD *)(this + 140);
  v2 = *(_QWORD *)(this + 152);
  v3 = *(_DWORD *)(v2 + 4 * (*(_DWORD *)(v2 + 4 * (*(_DWORD *)(this + 144) + 1)) + 1));
  LODWORD(this) = v3;
  do
  {
    v4 = v3 + 1;
    v5 = *(_DWORD *)(v2 + 4 * v3);
    v3 += 2;
    v6 = *(_DWORD *)(v2 + 4 * v4);
    if ((v5 & 0xFFFFF) != 0 || v1 > (int)v6)
    {
      this = this;
    }
    else
    {
      v3 = v6;
      this = v6;
    }
  }
  while ((v5 & 0x80000000) == 0);
  return this;
}

uint64_t GetWordId(unsigned int a1, const char *a2, const char *a3, const char *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = (char)a3;
  if (a1 == 126)
  {
    if (!a6 || strcmp(a2, "_START_CONTEXT"))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 62, (uint64_t)"voc/vocutil", 1, (uint64_t)"%.500s %.500s %.500s", a7, a8, v8);
    return 16777214;
  }
  else
  {
    if (a1 == 125)
    {
      if (!a5 || *a2)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 56, (uint64_t)"voc/vocutil", 1, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)a3);
      return 0xFFFFFFLL;
    }
    if (!*a2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 65, (uint64_t)"voc/vocutil", 2, (uint64_t)"%.500s %.500s", a7, a8, (char)a3);
    result = WordList::lookupWord(*(WordList **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a1) + 48), a2);
    if ((_DWORD)result == 0xFFFFFF)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 71, (uint64_t)"voc/vocutil", 5, (uint64_t)"%.500s %.500s %.500s", v12, v13, v8);
      return 0xFFFFFFLL;
    }
  }
  return result;
}

char *GetWordName(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordList *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 == 125)
    return &byte_209A88803;
  if (a1 == 126)
    return "_START_CONTEXT";
  v9 = *(WordList **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a1) + 48);
  v10 = *((_QWORD *)v9 + 32);
  v11 = *(unsigned int *)(v10 + 4 * a2);
  WordList::verifyVisible(v9, *(_DWORD *)(v10 + 4 * a2), a3, a4, a5, a6, a7, a8);
  return (char *)(*((_QWORD *)v9 + 28) + *(unsigned int *)(*((_QWORD *)v9 + 25) + 4 * v11));
}

void VerifyVocName(const char *__s, const char *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  if (__s)
  {
    if (*__s == 95)
    {
      v3 = strlen(__s);
      if (v3)
      {
        if (v3 == 1)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 109, (uint64_t)"voc/vocutil", 4, (uint64_t)"%.500s %.500s", v4, v5, (char)__s);
        }
        else
        {
          v6 = v3;
          for (i = 1; i != v6; ++i)
          {
            if (__s[i] - 58 <= 0xFFFFFFF5)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 113, (uint64_t)"voc/vocutil", 4, (uint64_t)"%.500s %.500s", v4, v5, (char)__s);
          }
        }
      }
    }
  }
}

_QWORD *GetStateName@<X0>(unsigned int a1@<W0>, unsigned int Parent@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, DgnString *a9@<X8>)
{
  StateMgr *v11;
  const char *Name;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;

  v11 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a1) + 56);
  v24 = 0;
  v25 = 0;
  while (Parent)
  {
    Name = (const char *)StateMgr::getName(v11, Parent, a3, a4, a5, a6, a7, a8);
    DgnString::DgnString((DgnString *)v23, Name);
    v13 = v25;
    if (v25 == (unint64_t)HIDWORD(v25))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
      v13 = v25;
    }
    DgnString::DgnString((DgnString *)(v24 + 16 * v13), (const DgnString *)v23);
    LODWORD(v25) = v25 + 1;
    DgnString::~DgnString((DgnString *)v23);
    Parent = StateMgr::getParent(v11, Parent, v14, v15, v16, v17, v18, v19);
  }
  v20 = v25;
  DgnString::DgnString(a9);
  if ((_DWORD)v20)
  {
    v21 = 0;
    do
    {
      if (v21)
        DgnString::operator+=(a9, ".");
      DgnString::operator+=(a9, v24 + 16 * (v20 - 1 + v21--));
    }
    while (-v20 != v21);
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v24);
}

void sub_2099D0588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

DgnString *GetRuleName@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, DgnString *a9@<X8>)
{
  RuleMgr *v12;
  unsigned int Parent;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *Name;

  v12 = *(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a1) + 64);
  Parent = RuleMgr::getParent(v12, a2, a3, a4, a5, a6, a7, a8);
  GetStateName(a1, Parent, v14, v15, v16, v17, v18, v19, a9);
  DgnString::operator+=(a9, ".");
  Name = (char *)RuleMgr::getName(v12, a2, v20, v21, v22, v23, v24, v25);
  return DgnString::operator+=(a9, Name);
}

void sub_2099D064C(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

const char *GetCollationName(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 65534)
    return "_IDENTITY";
  else
    return (const char *)CollMgr::getCollationName(*(CollMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a1) + 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t Lattice<PhonemeLatticeLC>::cmpInLink(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(unsigned __int16 *)(v3 + 24 * a2);
  v5 = *(unsigned __int16 *)(v3 + 24 * a3);
  v6 = v4 == v5;
  if (v4 > v5)
    v7 = 1;
  else
    v7 = 0xFFFFFFFFLL;
  if (v6)
  {
    v8 = *(_DWORD *)(v3 + 24 * a2 + 8);
    v9 = *(_DWORD *)(v3 + 24 * a3 + 8);
    if (v8 != v9)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v9 + 4))
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpOutLink(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(unsigned __int16 *)(v3 + 24 * a2);
  v5 = *(unsigned __int16 *)(v3 + 24 * a3);
  v6 = v4 == v5;
  if (v4 > v5)
    v7 = 1;
  else
    v7 = 0xFFFFFFFFLL;
  if (v6)
  {
    v8 = *(_DWORD *)(v3 + 24 * a2 + 12);
    v9 = *(_DWORD *)(v3 + 24 * a3 + 12);
    if (v8 != v9)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v9 + 4))
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t PhonemeLattice::SortInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<InLinkICmp1>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<InLinkICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v12);
      v25 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v11);
    result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpInLink(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpInLink(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<InLinkICmp1>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t PhonemeLattice::SortOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<OutLinkICmp1>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<OutLinkICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v12);
      v25 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v11);
    result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpOutLink(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpOutLink(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<OutLinkICmp1>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

char *PhonemeLattice::SortNodes(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeICmp1>(*(char **)a2, *(unsigned int *)(a2 + 8), 4, a1);
}

char *mrec_qsort_r<NodeICmp1>(char *result, unint64_t a2, int64_t a3, uint64_t a4)
{
  int64_t v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  char *v11;
  unsigned int *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  char v63;
  int v64;
  char *v65;
  unsigned int *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91;
  BOOL v92;
  int64_t v93;
  int64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  int64_t v98;
  char v99;
  char *v100;
  char *v101;
  char *v102;
  unsigned int *v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char *v111;
  unsigned int *v112;
  _DWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;

  v6 = -a3;
  v7 = a3 != 8;
  v8 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v9 = 2;
  else
    v9 = a3 != 8;
  if (a2 < 7)
  {
LABEL_130:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v100 = &result[a2 * a3];
      v101 = &result[a3];
      v102 = result;
      do
      {
        if (v101 > result)
        {
          v103 = (unsigned int *)v102;
          v104 = v101;
          do
          {
            v105 = v104;
            v104 = (_DWORD *)((char *)v104 + v6);
            if (*v104 == *v105
              || *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * *v104 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80)
                                                                                                + 24
                                                                                                * *v105
                                                                                                + 4))
            {
              break;
            }
            if (v9)
            {
              v106 = 0;
              v107 = (uint64_t)v103 + a3;
              if (v8)
              {
                do
                {
                  v108 = *(_QWORD *)(v107 + 8 * v106);
                  *(_QWORD *)(v107 + 8 * v106) = *(_QWORD *)&v103[2 * v106];
                  *(_QWORD *)&v103[2 * v106++] = v108;
                }
                while ((unint64_t)a3 >> 3 != v106);
              }
              else
              {
                do
                {
                  v109 = *(_BYTE *)(v107 + v106);
                  *(_BYTE *)(v107 + v106) = *((_BYTE *)v103 + v106);
                  *((_BYTE *)v103 + v106++) = v109;
                }
                while (a3 != v106);
              }
            }
            else
            {
              v110 = *(_QWORD *)v105;
              *(_QWORD *)v105 = *(_QWORD *)v104;
              *(_QWORD *)v104 = v110;
            }
            v103 = (unsigned int *)((char *)v103 + v6);
          }
          while (v104 > (_DWORD *)result);
        }
        v101 += a3;
        v102 += a3;
      }
      while (v101 < v100);
    }
    return result;
  }
  v10 = (unint64_t)a3 >> 3;
  while (2)
  {
    v11 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_59;
    v12 = (unsigned int *)&result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      v14 = result;
      goto LABEL_46;
    }
    v13 = (a2 >> 3) * a3;
    v14 = &result[v13];
    v15 = &result[2 * v13];
    v16 = *(_DWORD *)result;
    v17 = *(_DWORD *)&result[v13];
    if (*(_DWORD *)result == v17
      || (v18 = *(_QWORD *)(a4 + 80),
          v19 = *(_DWORD *)(v18 + 24 * v16 + 4),
          v20 = *(_DWORD *)(v18 + 24 * v17 + 4),
          v19 >= v20))
    {
      v22 = *(_DWORD *)v15;
      if (v17 == *(_DWORD *)v15
        || *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v17 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v22 + 4))
      {
        if (v16 == v22
          || (v23 = *(_QWORD *)(a4 + 80),
              v24 = *(_DWORD *)(v23 + 24 * v16 + 4),
              v25 = *(_DWORD *)(v23 + 24 * v22 + 4),
              v14 = result,
              v24 >= v25))
        {
          v14 = &result[2 * v13];
        }
      }
    }
    else
    {
      v21 = *(_DWORD *)v15;
      if (v17 == *(_DWORD *)v15 || v20 >= *(_DWORD *)(v18 + 24 * v21 + 4))
      {
        v14 = result;
        if (v16 != v21)
        {
          v14 = &result[2 * v13];
          if (v19 >= *(_DWORD *)(v18 + 24 * v21 + 4))
            v14 = result;
        }
      }
    }
    v26 = &v11[-v13];
    v27 = (unsigned int *)&v11[v13];
    v28 = *(_DWORD *)&v11[-v13];
    v29 = *(_DWORD *)v11;
    if (v28 == *(_DWORD *)v11
      || (v30 = *(_QWORD *)(a4 + 80),
          v31 = *(_DWORD *)(v30 + 24 * v28 + 4),
          v32 = *(_DWORD *)(v30 + 24 * v29 + 4),
          v31 >= v32))
    {
      v34 = *v27;
      if (v29 == *v27
        || *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v29 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v34 + 4))
      {
        if (v28 == v34
          || (v35 = *(_QWORD *)(a4 + 80),
              v36 = *(_DWORD *)(v35 + 24 * v28 + 4),
              v37 = *(_DWORD *)(v35 + 24 * v34 + 4),
              v11 = v26,
              v36 >= v37))
        {
          v11 = (char *)v27;
        }
      }
    }
    else
    {
      v33 = *v27;
      if (v29 == *v27 || v32 >= *(_DWORD *)(v30 + 24 * v33 + 4))
      {
        if (v28 == v33 || (v11 += v13, v31 >= *(_DWORD *)(v30 + 24 * v33 + 4)))
          v11 = v26;
      }
    }
    v38 = -(uint64_t)v13;
    v39 = (unsigned int *)((char *)v12 - 2 * v13);
    v40 = (unsigned int *)((char *)v12 + v38);
    v41 = *v39;
    v42 = *v40;
    if (*v39 != *v40)
    {
      v43 = *(_QWORD *)(a4 + 80);
      v44 = *(_DWORD *)(v43 + 24 * v41 + 4);
      v45 = *(_DWORD *)(v43 + 24 * v42 + 4);
      if (v44 < v45)
      {
        v46 = *v12;
        if (v42 == *v12 || v45 >= *(_DWORD *)(v43 + 24 * v46 + 4))
        {
          if (v41 != v46 && v44 < *(_DWORD *)(v43 + 24 * v46 + 4))
            goto LABEL_46;
LABEL_44:
          v12 = v39;
          goto LABEL_46;
        }
LABEL_45:
        v12 = v40;
        goto LABEL_46;
      }
    }
    v47 = *v12;
    if (v42 != *v12
      && *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v42 + 4) >= *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v47 + 4))
    {
      goto LABEL_45;
    }
    if (v41 != v47
      && *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v47 + 4))
    {
      goto LABEL_44;
    }
LABEL_46:
    v48 = *(unsigned int *)v14;
    v49 = *(unsigned int *)v11;
    if (v48 == v49)
    {
      v50 = *v12;
    }
    else
    {
      v51 = *(_QWORD *)(a4 + 80);
      v52 = *(_DWORD *)(v51 + 24 * v48 + 4);
      v53 = *(_DWORD *)(v51 + 24 * v49 + 4);
      v50 = *v12;
      if (v52 < v53)
      {
        if (v49 == v50 || v53 >= *(_DWORD *)(v51 + 24 * v50 + 4))
        {
          if (v48 == v50 || (v11 = (char *)v12, v52 >= *(_DWORD *)(v51 + 24 * v50 + 4)))
            v11 = v14;
        }
        goto LABEL_59;
      }
    }
    if (v49 == v50
      || *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v49 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80)
                                                                                      + 24 * v50
                                                                                      + 4))
    {
      if (v48 == v50
        || (v54 = *(_QWORD *)(a4 + 80),
            v55 = *(_DWORD *)(v54 + 24 * v48 + 4),
            v56 = *(_DWORD *)(v54 + 24 * v50 + 4),
            v11 = v14,
            v55 >= v56))
      {
        v11 = (char *)v12;
      }
    }
LABEL_59:
    if (v9)
    {
      if (v8)
      {
        v57 = result;
        v58 = (unint64_t)a3 >> 3;
        do
        {
          v59 = *(_QWORD *)v57;
          *(_QWORD *)v57 = *(_QWORD *)v11;
          v57 += 8;
          *(_QWORD *)v11 = v59;
          v11 += 8;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = a3;
        v62 = result;
        do
        {
          v63 = *v62;
          *v62++ = *v11;
          *v11++ = v63;
          --v61;
        }
        while (v61);
      }
    }
    else
    {
      v60 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v11;
      *(_QWORD *)v11 = v60;
    }
    v64 = 0;
    v65 = &result[a3];
    v66 = (unsigned int *)&result[(a2 - 1) * a3];
    v67 = (char *)v66;
    v68 = &result[a3];
    v69 = &result[a3];
    while (1)
    {
LABEL_68:
      if (v68 > v67)
        goto LABEL_81;
      if (*(_DWORD *)v68 != *(_DWORD *)result)
        break;
      if (v9)
      {
        v70 = 0;
        if (v8)
        {
          do
          {
            v71 = *(_QWORD *)&v69[8 * v70];
            *(_QWORD *)&v69[8 * v70] = *(_QWORD *)&v68[8 * v70];
            *(_QWORD *)&v68[8 * v70++] = v71;
          }
          while (v10 != v70);
        }
        else
        {
          do
          {
            v72 = v69[v70];
            v69[v70] = v68[v70];
            v68[v70++] = v72;
          }
          while (a3 != v70);
        }
      }
      else
      {
        v80 = *(_QWORD *)v69;
        *(_QWORD *)v69 = *(_QWORD *)v68;
        *(_QWORD *)v68 = v80;
      }
      v69 += a3;
      v64 = 1;
LABEL_98:
      v68 += a3;
    }
    if (*(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * *(unsigned int *)v68 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80)
                                                                                         + 24
                                                                                         * *(unsigned int *)result
                                                                                         + 4))
      goto LABEL_98;
LABEL_81:
    while (v68 <= v67)
    {
      if (*(_DWORD *)v67 == *(_DWORD *)result)
      {
        if (v9)
        {
          v74 = 0;
          if (v8)
          {
            do
            {
              v75 = *(_QWORD *)&v67[8 * v74];
              *(_QWORD *)&v67[8 * v74] = *(_QWORD *)&v66[2 * v74];
              *(_QWORD *)&v66[2 * v74++] = v75;
            }
            while (v10 != v74);
          }
          else
          {
            do
            {
              v76 = v67[v74];
              v67[v74] = *((_BYTE *)v66 + v74);
              *((_BYTE *)v66 + v74++) = v76;
            }
            while (a3 != v74);
          }
        }
        else
        {
          v73 = *(_QWORD *)v67;
          *(_QWORD *)v67 = *(_QWORD *)v66;
          *(_QWORD *)v66 = v73;
        }
        v66 = (unsigned int *)((char *)v66 + v6);
        v64 = 1;
      }
      else if (*(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * *(unsigned int *)v67 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80)
                                                                                                + 24
                                                                                                * *(unsigned int *)result
                                                                                                + 4))
      {
        if (v9)
        {
          v77 = 0;
          if (v8)
          {
            do
            {
              v78 = *(_QWORD *)&v68[8 * v77];
              *(_QWORD *)&v68[8 * v77] = *(_QWORD *)&v67[8 * v77];
              *(_QWORD *)&v67[8 * v77++] = v78;
            }
            while (v10 != v77);
          }
          else
          {
            do
            {
              v79 = v68[v77];
              v68[v77] = v67[v77];
              v67[v77++] = v79;
            }
            while (a3 != v77);
          }
        }
        else
        {
          v81 = *(_QWORD *)v68;
          *(_QWORD *)v68 = *(_QWORD *)v67;
          *(_QWORD *)v67 = v81;
        }
        v68 += a3;
        v67 += v6;
        v64 = 1;
        goto LABEL_68;
      }
      v67 += v6;
    }
    v82 = &result[a2 * a3];
    if (v64)
    {
      v83 = v68 - v69;
      if (v69 - result >= v68 - v69)
        v84 = v68 - v69;
      else
        v84 = v69 - result;
      if (v84)
      {
        if (v8)
        {
          v85 = &v68[-v84];
          v86 = v84 >> 3;
          v87 = result;
          do
          {
            v88 = *(_QWORD *)v87;
            *(_QWORD *)v87 = *(_QWORD *)v85;
            v87 += 8;
            *(_QWORD *)v85 = v88;
            v85 += 8;
            --v86;
          }
          while (v86);
        }
        else
        {
          v89 = -(uint64_t)v84;
          v90 = result;
          do
          {
            v91 = *v90;
            *v90++ = v68[v89];
            v68[v89] = v91;
            v92 = __CFADD__(v89++, 1);
          }
          while (!v92);
        }
      }
      v93 = (char *)v66 - v67;
      v94 = v82 - ((char *)v66 + a3);
      if ((char *)v66 - v67 < v94)
        v94 = (char *)v66 - v67;
      if (v94)
      {
        if (v8)
        {
          v95 = &v82[-v94];
          v96 = (unint64_t)v94 >> 3;
          do
          {
            v97 = *(_QWORD *)v68;
            *(_QWORD *)v68 = *(_QWORD *)v95;
            v68 += 8;
            *(_QWORD *)v95 = v97;
            v95 += 8;
            --v96;
          }
          while (v96);
        }
        else
        {
          v98 = -v94;
          do
          {
            v99 = *v68;
            *v68++ = v82[v98];
            v82[v98] = v99;
            v92 = __CFADD__(v98++, 1);
          }
          while (!v92);
        }
      }
      if (v83 > a3)
        result = (char *)mrec_qsort_r<NodeICmp1>();
      if (v93 > a3)
      {
        result = &v82[-v93];
        a2 = v93 / (unint64_t)a3;
        v8 = ((((_BYTE)v82 - v93) | a3) & 7) == 0;
        if (((((_BYTE)v82 - v93) | a3) & 7) != 0)
          v9 = 2;
        else
          v9 = v7;
        if (a2 < 7)
          goto LABEL_130;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v111 = result;
      do
      {
        if (v65 > result)
        {
          v112 = (unsigned int *)v111;
          v113 = v65;
          do
          {
            v114 = v113;
            v113 = (_DWORD *)((char *)v113 + v6);
            if (*v113 == *v114
              || *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * *v113 + 4) < *(_DWORD *)(*(_QWORD *)(a4 + 80)
                                                                                                + 24
                                                                                                * *v114
                                                                                                + 4))
            {
              break;
            }
            if (v9)
            {
              v115 = 0;
              v116 = (uint64_t)v112 + a3;
              if (v8)
              {
                do
                {
                  v117 = *(_QWORD *)(v116 + 8 * v115);
                  *(_QWORD *)(v116 + 8 * v115) = *(_QWORD *)&v112[2 * v115];
                  *(_QWORD *)&v112[2 * v115++] = v117;
                }
                while (v10 != v115);
              }
              else
              {
                do
                {
                  v118 = *(_BYTE *)(v116 + v115);
                  *(_BYTE *)(v116 + v115) = *((_BYTE *)v112 + v115);
                  *((_BYTE *)v112 + v115++) = v118;
                }
                while (a3 != v115);
              }
            }
            else
            {
              v119 = *(_QWORD *)v114;
              *(_QWORD *)v114 = *(_QWORD *)v113;
              *(_QWORD *)v113 = v119;
            }
            v112 = (unsigned int *)((char *)v112 + v6);
          }
          while (v113 > (_DWORD *)result);
        }
        v65 += a3;
        v111 += a3;
      }
      while (v65 < v82);
    }
    return result;
  }
}

char *PhonemeLattice::SortNodesCount(uint64_t a1, char **a2, unsigned int a3)
{
  return mrec_qsort_r<NodeICmp1>(*a2, a3, 4, a1);
}

uint64_t PhonemeLattice::SortNodesByInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByInLinksICmp1>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByInLinksICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v12);
      v25 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v11);
    result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<NodeByInLinksICmp1>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t PhonemeLattice::SortNodesByOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByOutLinksICmp1>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByOutLinksICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v12);
      v25 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v11);
    result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<NodeByOutLinksICmp1>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

void PhonemeLattice::printSize(PhonemeLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/phnlat.cpp", 152, (DgnString *)&v28);
  if (v29)
    v16 = v28;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  Lattice<PhonemeLatticeLC>::printSize((unsigned int *)this, 0xFFFFFFFFLL, (a3 + 1), &v28, &v27, &v26);
  *a4 += (unint64_t)v28;
  *a5 += v27;
  *a6 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/phnlat.cpp", 155, (DgnString *)&v28);
  if (v29)
    v25 = v28;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &byte_209A88803, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_2099D31DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Lattice<PhonemeLatticeLC>::printSize(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  int v150;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 898, (DgnString *)&v149);
  if (v150)
    v16 = v149;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v149);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v27 = v149;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v32 = v149;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, 4, 4, 0);
  v148 = a3;
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 12;
  else
    v33 = 16;
  v34 = a1[6];
  v35 = a1[7];
  if (v35 >= v34)
  {
    v36 = 0;
    if ((int)v34 > 0)
      v33 += 4 * (v34 - 1) + 4;
    v37 = v33 + 4 * (v35 - v34);
  }
  else
  {
    v36 = 4 * v34;
    v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v42 = v149;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &byte_209A88803, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  else
    v43 = 16;
  v44 = a1[10];
  v45 = a1[11];
  if (v45 >= v44)
  {
    v46 = 0;
    if ((int)v44 > 0)
      v43 += 4 * (v44 - 1) + 4;
    v47 = v43 + 4 * (v45 - v44);
  }
  else
  {
    v46 = 4 * v44;
    v47 = v43;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v52 = v149;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &byte_209A88803, v22, v22, v52, v47, v43, v46);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v47;
  *a5 += v43;
  *a6 += v46;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  else
    v53 = 16;
  v54 = a1[14];
  v55 = a1[15];
  if (v55 >= v54)
  {
    v56 = 0;
    if ((int)v54 > 0)
      v53 += 4 * (v54 - 1) + 4;
    v57 = v53 + 4 * (v55 - v54);
  }
  else
  {
    v56 = 4 * v54;
    v57 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v62 = v149;
  else
    v62 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &byte_209A88803, v22, v22, v62, v57, v53, v56);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v57;
  *a5 += v53;
  *a6 += v56;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 12;
  else
    v63 = 16;
  v64 = a1[18];
  v65 = a1[19];
  if (v65 >= v64)
  {
    v66 = 0;
    if ((int)v64 > 0)
      v63 += 4 * (v64 - 1) + 4;
    v67 = v63 + 4 * (v65 - v64);
  }
  else
  {
    v66 = 4 * v64;
    v67 = v63;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v72 = v149;
  else
    v72 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &byte_209A88803, v22, v22, v72, v67, v63, v66);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v67;
  *a5 += v63;
  *a6 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = a1[22];
  v75 = 24 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 24 * (a1[23] - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v82 = v149;
  else
    v82 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &byte_209A88803, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v77;
  *a5 += v76;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 12;
  else
    v83 = 16;
  v84 = a1[26];
  v85 = a1[27];
  if (v85 >= v84)
  {
    v86 = 0;
    if ((int)v84 > 0)
      v83 += 4 * (v84 - 1) + 4;
    v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    v86 = 4 * v84;
    v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v92 = v149;
  else
    v92 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &byte_209A88803, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 12;
  else
    v93 = 16;
  v94 = a1[30];
  v95 = a1[31];
  if (v95 >= v94)
  {
    v96 = 0;
    if ((int)v94 > 0)
      v93 += 4 * (v94 - 1) + 4;
    v97 = v93 + 4 * (v95 - v94);
  }
  else
  {
    v96 = 4 * v94;
    v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v102 = v149;
  else
    v102 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &byte_209A88803, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  v103 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v103 = 16;
  v104 = a1[34];
  v105 = 22 * v104;
  if (v104 <= 0)
    v105 = 0;
  v106 = v105 + v103;
  v107 = v105 + v103 + 22 * (a1[35] - v104);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v112 = v149;
  else
    v112 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &byte_209A88803, v22, v22, v112, v107, v106, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v107;
  *a5 += v106;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v113 = 12;
  else
    v113 = 16;
  v114 = a1[38];
  v115 = a1[39];
  if (v115 >= v114)
  {
    v116 = 0;
    if ((int)v114 > 0)
      v113 += 4 * (v114 - 1) + 4;
    v117 = v113 + 4 * (v115 - v114);
  }
  else
  {
    v116 = 4 * v114;
    v117 = v113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v122 = v149;
  else
    v122 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &byte_209A88803, v22, v22, v122, v117, v113, v116);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v117;
  *a5 += v113;
  *a6 += v116;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v123 = 12;
  else
    v123 = 16;
  v124 = a1[42];
  v125 = a1[43];
  if (v125 >= v124)
  {
    v126 = 0;
    if ((int)v124 > 0)
      v123 += 4 * (v124 - 1) + 4;
    v127 = v123 + 4 * (v125 - v124);
  }
  else
  {
    v126 = 4 * v124;
    v127 = v123;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v132 = v149;
  else
    v132 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &byte_209A88803, v22, v22, v132, v127, v123, v126);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v127;
  *a5 += v123;
  *a6 += v126;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v133 = 12;
  else
    v133 = 16;
  v134 = a1[46];
  v135 = a1[47];
  if (v135 >= v134)
  {
    v136 = 0;
    if ((int)v134 > 0)
      v133 += 4 * (v134 - 1) + 4;
    v137 = v133 + 4 * (v135 - v134);
  }
  else
  {
    v136 = 4 * v134;
    v137 = v133;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150)
    v142 = v149;
  else
    v142 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &byte_209A88803, v22, v22, v142, v137, v133, v136);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v137;
  *a5 += v133;
  *a6 += v136;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 908, (DgnString *)&v149);
  if (v150)
    v147 = v149;
  else
    v147 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v148, &byte_209A88803, (35 - v148), (35 - v148), v147, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v149);
}

void sub_2099D3BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PhonemeLattice::PhonemeLattice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int Node;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int PronSuccessorSeedCategory;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  unsigned int v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 188) = 0;
  *(_QWORD *)a1 = off_24C214A90;
  v3 = *(unsigned int *)(a2 + 8);
  Node = Lattice<WordLatticeLC>::createNode(a1);
  if ((_DWORD)v3)
  {
    v5 = Node;
    v6 = 0;
    v7 = (v3 - 1);
    v8 = -2;
    v22 = v3;
    v23 = v7;
    do
    {
      v9 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v6);
      v10 = **(_QWORD **)VocMgr::smpVocMgr;
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + ((v9 >> 22) & 0x3F8)) + 48);
      if (v6 >= v7)
      {
        PronSuccessorSeedCategory = *(unsigned __int8 *)(v11 + 417);
      }
      else
      {
        v12 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v6 + 4);
        PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(_QWORD *)(v10 + ((v12 >> 22) & 0x3F8)) + 48), v12 & 0xFFFFFF);
      }
      v27 = 0;
      v28 = 0;
      WordList::getWordFamilyCollatedSeedableProns(v11, v9 & 0xFFFFFF, v6 < v7, PronSuccessorSeedCategory, (uint64_t)&v27);
      v25 = v6;
      v14 = v28;
      if ((_DWORD)v28)
      {
        v15 = 0;
        v16 = -2;
        do
        {
          v17 = v27 + 16 * v15;
          v18 = *(unsigned int *)(v17 + 8);
          if ((_DWORD)v18)
          {
            for (i = 0; i != v18; ++i)
            {
              if (!(i | v15))
                v16 = Lattice<WordLatticeLC>::createNode(a1);
              if (i)
                v20 = v8;
              else
                v20 = v5;
              v8 = v16;
              if ((_DWORD)v18 - 1 != i)
                v8 = Lattice<WordLatticeLC>::createNode(a1);
              v26 = *(_WORD *)(*(_QWORD *)v17 + 2 * i);
              Lattice<PhonemeLatticeLC>::maybeCreateAndConnectLink((uint64_t *)a1, v20, v8, &v26, 1, 0);
            }
            v14 = v28;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      else
      {
        v16 = -2;
      }
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v27);
      v7 = v23;
      if (v16 != -2)
        v5 = v16;
      v6 = v25 + 1;
    }
    while (v25 + 1 != v22);
  }
  Lattice<PhonemeLatticeLC>::gc((_QWORD *)a1);
  Lattice<PhonemeLatticeLC>::topSortInternal(a1, 0);
  return a1;
}

void sub_2099D3E58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  Lattice<PhonemeLatticeLC>::~Lattice(v1);
  _Unwind_Resume(a1);
}

uint64_t Lattice<PhonemeLatticeLC>::maybeCreateAndConnectLink(uint64_t *a1, unsigned int a2, int a3, __int16 *a4, int a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int Link;
  unsigned int v12;
  uint64_t result;

  v9 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if ((_DWORD)v9 == -2)
  {
LABEL_6:
    Link = Lattice<PhonemeLatticeLC>::createLink((uint64_t)a1, a2, a3, a4);
    v12 = Link;
    if (a6)
      *a6 = *(_DWORD *)(a1[16] + 24 * Link + 4);
    if (a5)
    {
      Lattice<PhonemeLatticeLC>::connectInLink(a1, Link);
      Lattice<PhonemeLatticeLC>::connectOutLink(a1, v12);
    }
    else
    {
      Lattice<PhonemeLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<PhonemeLatticeLC>::connectOutLinkUnordered(a1, v12);
    }
    return 1;
  }
  else
  {
    v10 = a1[16];
    while (*(_DWORD *)(v10 + 24 * v9 + 12) != a3 || *a4 != *(_WORD *)(v10 + 24 * v9))
    {
      v9 = *(unsigned int *)(v10 + 24 * v9 + 20);
      if ((_DWORD)v9 == -2)
        goto LABEL_6;
    }
    result = 0;
    if (a6)
      *a6 = *(_DWORD *)(v10 + 24 * v9 + 4);
  }
  return result;
}

_QWORD *Lattice<PhonemeLatticeLC>::gc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  Lattice<PhonemeLatticeLC>::gcNonTerminal((unint64_t)a1);
  Lattice<PhonemeLatticeLC>::gcNonInitial((unint64_t)a1);
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    MemChunkFree(v2, 0);
    a1[22] = 0;
  }
  a1[23] = 0;
  result = (_QWORD *)a1[20];
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    a1[20] = 0;
  }
  a1[21] = 0;
  return result;
}

_QWORD *Lattice<PhonemeLatticeLC>::~Lattice(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C2191E8;
  v2 = (uint64_t)(a1 + 2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 20));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 18));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 16));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 12));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 4));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  return a1;
}

void PhonemeLattice::~PhonemeLattice(PhonemeLattice *this)
{
  Lattice<PhonemeLatticeLC>::~Lattice(this);
  JUMPOUT(0x20BD149A8);
}

unint64_t PhonemeLattice::getNextStartNodes@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = *(unsigned int *)(*(_QWORD *)(result + 80) + 24 * a2 + 20);
  if ((_DWORD)v5 != -2)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(result + 128);
    do
    {
      if (*(unsigned __int16 *)(v10 + 24 * v5) == *a3)
      {
        v11 = *(_DWORD *)(v10 + 24 * v5 + 12);
        if (v9 == *(_DWORD *)(a4 + 12))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
          v9 = *(_DWORD *)(a4 + 8);
          v8 = *(_QWORD *)a4;
          v10 = *(_QWORD *)(v7 + 128);
        }
        *(_DWORD *)(v8 + 4 * v9) = v11;
        v9 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v9;
      }
      v5 = *(unsigned int *)(v10 + 24 * v5 + 20);
    }
    while ((_DWORD)v5 != -2);
  }
  return result;
}

void sub_2099D415C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t PhonemeLattice::hasCommonProns(unint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t i;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int PronSuccessorSeedCategory;
  int *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  _BOOL8 v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  char v69;
  int v70;
  unint64_t v72;
  unsigned __int16 v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;

  v4 = a2;
  if (!*(_DWORD *)(a1 + 40))
  {
    if ((a3 & 1) == 0)
    {
      LODWORD(v50) = *((_DWORD *)a2 + 2);
      if ((_DWORD)v50)
      {
        v51 = 0;
        do
        {
          v52 = *v4;
          v53 = *(unsigned int *)(*v4 + 4 * v51);
          v54 = **(_QWORD **)VocMgr::smpVocMgr;
          v55 = *(_QWORD *)(*(_QWORD *)(v54 + ((v53 >> 22) & 0x3F8)) + 48);
          v56 = (v50 - 1);
          if (v51 >= v56)
          {
            PronSuccessorSeedCategory = *(unsigned __int8 *)(v55 + 417);
          }
          else
          {
            v57 = *(unsigned int *)(v52 + 4 * v51 + 4);
            PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(_QWORD *)(v54 + ((v57 >> 22) & 0x3F8)) + 48), v57 & 0xFFFFFF);
          }
          v88 = 0;
          v89 = 0;
          WordList::getWordFamilyCollatedSeedableProns(v55, v53 & 0xFFFFFF, v51 < v56, PronSuccessorSeedCategory, (uint64_t)&v88);
          v4 = a2;
          if ((_DWORD)v89)
          {
            if (v88[2])
            {
              v59 = v88 + 6;
              v60 = 1;
              do
              {
                v61 = v60;
                if (v89 == v60)
                  break;
                v62 = *v59;
                v59 += 4;
                ++v60;
              }
              while (v62);
              v63 = v61 < v89;
            }
            else
            {
              v63 = 1;
            }
          }
          else
          {
            v63 = 0;
          }
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v88);
          if (!v63)
            break;
          ++v51;
          v50 = *((unsigned int *)a2 + 2);
        }
        while (v51 < v50);
        return v63;
      }
    }
    return 1;
  }
  v6 = *(int **)(a1 + 32);
  if (a3 && *v6 == **(_DWORD **)(a1 + 48))
    return 1;
  v88 = 0;
  v89 = 0;
  v7 = *v6;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v88, 1, 1);
  v88[v89] = v7;
  LODWORD(v89) = v89 + 1;
  v86 = 0;
  v87 = 0;
  BitArray::BitArray((BitArray *)&v84, *(_DWORD *)(a1 + 24));
  BitArray::BitArray((BitArray *)&v82, *(_DWORD *)(a1 + 24));
  LODWORD(v8) = *((_DWORD *)v4 + 2);
  if ((_DWORD)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *v4;
      v11 = *(unsigned int *)(*v4 + 4 * v9);
      v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8)) + 48);
      v80 = 0;
      v81 = 0;
      if (!(_DWORD)v89)
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v80);
        goto LABEL_82;
      }
      v13 = (v8 - 1);
      if (v9 >= v13)
      {
        v16 = *(unsigned __int8 *)(v12 + 417);
      }
      else
      {
        v14 = v9;
        v15 = *(unsigned int *)(v10 + 4 * v9 + 4);
        v16 = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v15 >> 22) & 0x3F8)) + 48), v15 & 0xFFFFFF);
        v9 = v14;
      }
      v72 = v9;
      v78 = 0;
      v79 = 0;
      WordList::getWordFamilyCollatedSeedableProns(v12, v11 & 0xFFFFFF, v9 < v13, v16, (uint64_t)&v78);
      v17 = v79;
      if (!(_DWORD)v79)
        goto LABEL_51;
      v18 = 0;
      v69 = 0;
      do
      {
        v19 = v78 + 16 * v18;
        v20 = (_DWORD *)(v19 + 8);
        if (*(_DWORD *)(v19 + 8))
        {
          v21 = v89;
          if ((_DWORD)v89)
          {
            v22 = 0;
            do
            {
              v70 = v22;
              DgnPrimArray<int>::copyArraySlice((unint64_t)&v86, (uint64_t *)&v88, 0, v21);
              if (*v20)
              {
                v23 = 0;
                do
                {
                  v76 = 0;
                  v77 = 0;
                  BitArray::clearRange((BitArray *)&v84, 0, v85);
                  if ((_DWORD)v87)
                  {
                    v24 = 0;
                    do
                    {
                      v25 = *(_DWORD *)(v86 + 4 * v24);
                      v73 = *(_WORD *)(*(_QWORD *)v19 + 2 * v23);
                      PhonemeLattice::getNextStartNodes(a1, v25, &v73, (uint64_t)&v74);
                      v26 = v75;
                      if (v75)
                      {
                        for (i = 0; i < v26; ++i)
                        {
                          v28 = v74;
                          v29 = *(_DWORD *)(v74 + 4 * i);
                          v30 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 24 * v29);
                          v31 = v30 >> 5;
                          v32 = *(_DWORD *)(v84 + 4 * (v30 >> 5));
                          v33 = 1 << v30;
                          if ((v32 & v33) == 0)
                          {
                            if (a3 && v29 == **(_DWORD **)(a1 + 48))
                            {
                              DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
                              DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v76);
                              v49 = 1;
                              v4 = a2;
                              goto LABEL_53;
                            }
                            *(_DWORD *)(v84 + 4 * v31) = v32 | v33;
                            v34 = *(_DWORD *)(v28 + 4 * i);
                            v35 = v77;
                            if (v77 == (unint64_t)HIDWORD(v77))
                            {
                              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v76, 1, 1);
                              v35 = v77;
                            }
                            *(_DWORD *)(v76 + 4 * v35) = v34;
                            LODWORD(v77) = v77 + 1;
                            v26 = v75;
                          }
                        }
                      }
                      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
                      ++v24;
                    }
                    while (v24 < v87);
                  }
                  DgnPrimArray<int>::copyArraySlice((unint64_t)&v86, &v76, 0, v77);
                  v36 = v87;
                  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v76);
                  if (!v36)
                    break;
                  ++v23;
                }
                while (v23 < *(unsigned int *)(v19 + 8));
              }
              v37 = v85;
              if (v85)
              {
                v38 = 0;
                v39 = v82;
                do
                {
                  v40 = v38 >> 5;
                  v41 = 1 << v38;
                  if ((*(_DWORD *)(v39 + 4 * v40) & (1 << v38)) == 0 && (*(_DWORD *)(v84 + 4 * v40) & v41) != 0)
                  {
                    v42 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v38);
                    v43 = v81;
                    if (v81 == (unint64_t)HIDWORD(v81))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v80, 1, 1);
                      v43 = v81;
                      v39 = v82;
                    }
                    *(_DWORD *)(v80 + 4 * v43) = v42;
                    LODWORD(v81) = v81 + 1;
                    *(_DWORD *)(v39 + 4 * v40) |= v41;
                    v37 = v85;
                  }
                  ++v38;
                }
                while (v38 < v37);
              }
              v22 = v70 + 1;
              v21 = v89;
              v20 = (_DWORD *)(v19 + 8);
            }
            while (v70 + 1 < v89);
            v17 = v79;
          }
        }
        else
        {
          v69 = 1;
        }
        ++v18;
      }
      while (v18 < v17);
      if ((v69 & 1) != 0)
      {
        v44 = v81;
        v4 = a2;
        if ((v89 + v81) > HIDWORD(v89))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v88, (v89 + v81 - HIDWORD(v89)), 1);
          v44 = v81;
        }
        if (v44)
        {
          v45 = 0;
          v46 = v80;
          v47 = (uint64_t)v88;
          do
          {
            *(_DWORD *)(v47 + 4 * (v45 + v89)) = *(_DWORD *)(v46 + 4 * v45);
            ++v45;
            v48 = v81;
          }
          while (v45 < v81);
        }
        else
        {
          v48 = 0;
        }
        LODWORD(v89) = v89 + v48;
      }
      else
      {
LABEL_51:
        DgnPrimArray<int>::copyArraySlice((unint64_t)&v88, &v80, 0, v81);
        v4 = a2;
      }
      BitArray::clearRange((BitArray *)&v82, 0, v83);
      v49 = 0;
LABEL_53:
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v78);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v80);
      if ((v49 & 1) != 0)
        break;
      v9 = v72 + 1;
      v8 = *((unsigned int *)v4 + 2);
      if (v72 + 1 >= v8)
        goto LABEL_76;
    }
    v63 = 1;
  }
  else
  {
LABEL_76:
    v64 = v89;
    if ((_DWORD)v89)
    {
      v65 = v88;
      v66 = 0xFFFFFFFFLL;
      while (1)
      {
        v67 = *v65++;
        if (v67 == **(_DWORD **)(a1 + 48))
          break;
        --v66;
        if (!--v64)
          goto LABEL_82;
      }
      v63 = v66 != 0;
    }
    else
    {
LABEL_82:
      v63 = 0;
    }
  }
  BitArray::~BitArray((BitArray *)&v82);
  BitArray::~BitArray((BitArray *)&v84);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v86);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v88);
  return v63;
}

void sub_2099D4798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 - 104);
  _Unwind_Resume(a1);
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByInLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_DWORD *)(v5 + 24 * a2 + 8);
  v7 = *(_DWORD *)(v5 + 24 * a3 + 8);
  if (v6 == v7)
  {
    v8 = *(_DWORD *)(v5 + 24 * a2 + 16);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      v9 = (unsigned int *)(v5 + 24 * a3 + 16);
      while (1)
      {
        v10 = *v9;
        result = Lattice<PhonemeLatticeLC>::cmpInLink(a1, v8, *v9);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(a1 + 128);
        v12 = v11 + 24 * v8;
        v9 = (unsigned int *)(v11 + 24 * v10 + 16);
        v8 = *(_DWORD *)(v12 + 16);
        if (v8 == -2)
          return 0;
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByOutLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_DWORD *)(v5 + 24 * a2 + 12);
  v7 = *(_DWORD *)(v5 + 24 * a3 + 12);
  if (v6 == v7)
  {
    v8 = *(_DWORD *)(v5 + 24 * a2 + 20);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      v9 = (unsigned int *)(v5 + 24 * a3 + 20);
      while (1)
      {
        v10 = *v9;
        result = Lattice<PhonemeLatticeLC>::cmpOutLink(a1, v8, *v9);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(a1 + 128);
        v12 = v11 + 24 * v8;
        v9 = (unsigned int *)(v11 + 24 * v10 + 20);
        v8 = *(_DWORD *)(v12 + 20);
        if (v8 == -2)
          return 0;
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::createLink(uint64_t a1, int a2, int a3, __int16 *a4)
{
  __int16 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  v7 = *a4;
  v8 = *(_DWORD *)(a1 + 120);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 4 * v9);
    *(_DWORD *)(a1 + 120) = v9;
    v11 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 136);
    v12 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 140))
    {
      DgnArray<CWIDAC>::reallocElts(a1 + 128, 1, 1);
      v12 = *(_DWORD *)(a1 + 136);
    }
    v11 = *(_QWORD *)(a1 + 128);
    *(_WORD *)(v11 + 24 * v12) = -1;
    *(_DWORD *)(a1 + 136) = v12 + 1;
  }
  v13 = v11 + 24 * v10;
  *(_WORD *)v13 = v7;
  v14 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v13 + 4) = v14;
  *(_DWORD *)(v13 + 8) = a2;
  *(_DWORD *)(v13 + 12) = a3;
  *(_QWORD *)(v13 + 16) = 0x100000001;
  if (v14 == *(_DWORD *)(a1 + 108))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 96, 1, 1);
    v14 = *(_DWORD *)(a1 + 104);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v14) = v10;
  ++*(_DWORD *)(a1 + 104);
  return v10;
}

void Lattice<PhonemeLatticeLC>::connectInLink(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v4 = a1[16];
  v6 = *(_DWORD *)(v4 + 24 * a2 + 12);
  v7 = a1[10];
  v8 = v7 + 24 * v6;
  v11 = *(_DWORD *)(v8 + 16);
  v10 = (int *)(v8 + 16);
  v9 = v11;
  if (v11 == -2)
  {
    v12 = -2;
  }
  else
  {
    do
    {
      v13 = Lattice<PhonemeLatticeLC>::cmpInLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          v12 = *v10;
          v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 24 * a2 + 4), *(_DWORD *)(a1[16] + 24 * *v10 + 4), v14, v15, v16, v17, v18, v19);
      }
      v4 = a1[16];
      v20 = v4 + 24 * *v10;
      v21 = *(_DWORD *)(v20 + 16);
      v10 = (int *)(v20 + 16);
      v9 = v21;
    }
    while (v21 != -2);
    v12 = -2;
LABEL_9:
    v7 = a1[10];
  }
  *v10 = a2;
  *(_DWORD *)(v4 + 24 * a2 + 16) = v12;
  v22 = v7 + 24 * v6;
  v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + 8) = v23 + 1;
  if (!v23)
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 4, v6);
}

void Lattice<PhonemeLatticeLC>::connectOutLink(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v4 = a1[16];
  v6 = *(_DWORD *)(v4 + 24 * a2 + 8);
  v7 = a1[10];
  v8 = v7 + 24 * v6;
  v11 = *(_DWORD *)(v8 + 20);
  v10 = (int *)(v8 + 20);
  v9 = v11;
  if (v11 == -2)
  {
    v12 = -2;
  }
  else
  {
    do
    {
      v13 = Lattice<PhonemeLatticeLC>::cmpOutLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          v12 = *v10;
          v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 24 * a2 + 4), *(_DWORD *)(a1[16] + 24 * *v10 + 4), v14, v15, v16, v17, v18, v19);
      }
      v4 = a1[16];
      v20 = v4 + 24 * *v10;
      v21 = *(_DWORD *)(v20 + 20);
      v10 = (int *)(v20 + 20);
      v9 = v21;
    }
    while (v21 != -2);
    v12 = -2;
LABEL_9:
    v7 = a1[10];
  }
  *v10 = a2;
  *(_DWORD *)(v4 + 24 * a2 + 20) = v12;
  v22 = v7 + 24 * v6;
  v23 = *(_DWORD *)(v22 + 12);
  *(_DWORD *)(v22 + 12) = v23 + 1;
  if (!v23)
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 6, v6);
}

uint64_t *Lattice<PhonemeLatticeLC>::connectInLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result[16] + 24 * a2;
  v4 = *(_DWORD *)(v3 + 12);
  v5 = result[10] + 24 * v4;
  v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = a2;
  *(_DWORD *)(v3 + 16) = v6;
  v7 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v7 + 1;
  if (!v7)
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 4, v4);
  return result;
}

uint64_t *Lattice<PhonemeLatticeLC>::connectOutLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result[16] + 24 * a2;
  v4 = *(_DWORD *)(v3 + 8);
  v5 = result[10] + 24 * v4;
  v6 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v3 + 20) = v6;
  v7 = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v5 + 12) = v7 + 1;
  if (!v7)
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 6, v4);
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::gcNonTerminal(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Lattice<PhonemeLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 56))
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_DWORD *)(v9 + 4 * v8);
      v11 = *(_QWORD *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 8))
      {
        v12 = *(unsigned int *)(v11 + 24 * v10 + 16);
        if ((_DWORD)v12 != -2)
        {
          v13 = *(_QWORD *)(a1 + 128);
          v14 = *(_QWORD *)(a1 + 96);
          do
          {
            v15 = *(_DWORD *)(v13 + 24 * v12 + 8);
            v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              v17 = *(unsigned int *)(a1 + 24);
              *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            v18 = *(unsigned int *)(a1 + 104);
            v19 = v13 + 24 * v12;
            *(_DWORD *)(v19 + 4) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            v12 = *(unsigned int *)(v19 + 16);
          }
          while ((_DWORD)v12 != -2);
        }
      }
      else
      {
        v20 = *(unsigned int *)(a1 + 40);
        if (v20 == *(_DWORD *)(a1 + 44))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
          v20 = *(unsigned int *)(a1 + 40);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }
  return Lattice<PhonemeLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<PhonemeLatticeLC>::gcNonInitial(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Lattice<PhonemeLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 40));
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_DWORD *)(v9 + 4 * v8);
      v11 = *(_QWORD *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 12))
      {
        v12 = *(unsigned int *)(v11 + 24 * v10 + 20);
        if ((_DWORD)v12 != -2)
        {
          v13 = *(_QWORD *)(a1 + 128);
          v14 = *(_QWORD *)(a1 + 96);
          do
          {
            v15 = *(_DWORD *)(v13 + 24 * v12 + 12);
            v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              v17 = *(unsigned int *)(a1 + 24);
              *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            v18 = *(unsigned int *)(a1 + 104);
            v19 = v13 + 24 * v12;
            *(_DWORD *)(v19 + 4) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            v12 = *(unsigned int *)(v19 + 20);
          }
          while ((_DWORD)v12 != -2);
        }
      }
      else
      {
        v20 = *(unsigned int *)(a1 + 56);
        if (v20 == *(_DWORD *)(a1 + 60))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
          v20 = *(unsigned int *)(a1 + 56);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }
  return Lattice<PhonemeLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<PhonemeLatticeLC>::gcSetup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *(unsigned int *)(a1 + 40);
  if ((int)v2 >= 1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 80);
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    do
    {
      if (!*(_DWORD *)(v4 + 24 * *(unsigned int *)(v3 + 4 * (v2 - 1)) + 12))
      {
        LODWORD(v5) = v5 - 1;
        if (v5 > (int)v2 - 1)
        {
          v6 = (v2 - 1);
          do
          {
            *(_DWORD *)(v3 + 4 * v6) = *(_DWORD *)(v3 + 4 * v6 + 4);
            v5 = (*(_DWORD *)(a1 + 40) - 1);
            ++v6;
          }
          while (v6 < v5);
        }
        *(_DWORD *)(a1 + 40) = v5;
      }
      v7 = v2-- <= 1;
    }
    while (!v7);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 80);
    LODWORD(v11) = *(_DWORD *)(a1 + 56);
    do
    {
      if (!*(_DWORD *)(v10 + 24 * *(unsigned int *)(v9 + 4 * (v8 - 1)) + 8))
      {
        LODWORD(v11) = v11 - 1;
        if (v11 > (int)v8 - 1)
        {
          v12 = (v8 - 1);
          do
          {
            *(_DWORD *)(v9 + 4 * v12) = *(_DWORD *)(v9 + 4 * v12 + 4);
            v11 = (*(_DWORD *)(a1 + 56) - 1);
            ++v12;
          }
          while (v12 < v11);
        }
        *(_DWORD *)(a1 + 56) = v11;
      }
      v7 = v8-- <= 1;
    }
    while (!v7);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 176, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 24) = 0;
  v13 = *(unsigned int *)(a1 + 184);
  if ((int)v13 >= 1)
  {
    v14 = *(_QWORD *)(a1 + 176);
    v15 = *(_QWORD *)(a1 + 80);
    v16 = v13 + 1;
    do
      *(_DWORD *)(v15 + 24 * *(unsigned int *)(v14 + 4 * (v16-- - 2))) = -1;
    while (v16 > 1);
  }
  result = DgnPrimArray<int>::copyArraySlice(a1 + 160, (uint64_t *)(a1 + 96), 0, *(_DWORD *)(a1 + 104));
  *(_DWORD *)(a1 + 104) = 0;
  v18 = *(unsigned int *)(a1 + 168);
  if ((int)v18 >= 1)
  {
    v19 = *(_QWORD *)(a1 + 160);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = v18 + 1;
    do
      *(_DWORD *)(v20 + 24 * *(unsigned int *)(v19 + 4 * (v21-- - 2)) + 4) = -1;
    while (v21 > 1);
  }
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::gcCleanup(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = result;
  v2 = *(unsigned int *)(result + 168);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(v1 + 160) + 4 * (v3 - 2));
      if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 24 * v4 + 4) == -1)
        result = Lattice<PhonemeLatticeLC>::disconnectAndDestroyLink(v1, v4);
      --v3;
    }
    while (v3 > 1);
  }
  v5 = *(unsigned int *)(v1 + 184);
  if ((int)v5 >= 1)
  {
    v6 = v5 + 1;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v1 + 176) + 4 * (v6 - 2));
      v8 = *(_QWORD *)(v1 + 80);
      if (*(_DWORD *)(v8 + 24 * v7) == -1)
      {
        *(_QWORD *)(v8 + 24 * v7 + 16) = 0x100000001;
        result = Lattice<WordLatticeLC>::destroyNode(v1, v7);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectAndDestroyLink(unint64_t a1, unsigned int a2)
{
  Lattice<PhonemeLatticeLC>::disconnectInLink(a1, a2);
  Lattice<PhonemeLatticeLC>::disconnectOutLink(a1, a2);
  return Lattice<PhonemeLatticeLC>::destroyLinkNoDuplicateCheck(a1, a2);
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectInLink(unint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(result + 128);
  v4 = *(_DWORD *)(v3 + 24 * a2 + 12);
  v5 = *(_QWORD *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    v6 = result;
    v7 = v5 + 24 * v4;
    v10 = *(_DWORD *)(v7 + 16);
    v8 = (_DWORD *)(v7 + 16);
    v9 = v10;
    v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        v13 = v3 + 24 * v9;
        v14 = *(_DWORD *)(v13 + 16);
        v8 = (_DWORD *)(v13 + 16);
        v9 = v14;
        v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *v8 = *(_DWORD *)(v3 + 24 * a2 + 16);
      v16 = v5 + 24 * v4;
      v17 = *(_DWORD *)(v16 + 8) - 1;
      *(_DWORD *)(v16 + 8) = v17;
      if (!v17)
      {
        v18 = *(_DWORD *)(result + 40);
        if (v18 == *(_DWORD *)(result + 44))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(result + 32, 1, 1);
          v18 = *(_DWORD *)(v6 + 40);
          v3 = *(_QWORD *)(v6 + 128);
        }
        *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 40);
      }
    }
  }
  *(_DWORD *)(v3 + 24 * a2 + 12) = -2;
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectOutLink(unint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(result + 128);
  v4 = *(_DWORD *)(v3 + 24 * a2 + 8);
  v5 = *(_QWORD *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    v6 = result;
    v7 = v5 + 24 * v4;
    v10 = *(_DWORD *)(v7 + 20);
    v8 = (_DWORD *)(v7 + 20);
    v9 = v10;
    v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        v13 = v3 + 24 * v9;
        v14 = *(_DWORD *)(v13 + 20);
        v8 = (_DWORD *)(v13 + 20);
        v9 = v14;
        v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *v8 = *(_DWORD *)(v3 + 24 * a2 + 20);
      v16 = v5 + 24 * v4;
      v17 = *(_DWORD *)(v16 + 12) - 1;
      *(_DWORD *)(v16 + 12) = v17;
      if (!v17)
      {
        v18 = *(_DWORD *)(result + 56);
        if (v18 == *(_DWORD *)(result + 60))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(result + 48, 1, 1);
          v18 = *(_DWORD *)(v6 + 56);
          v3 = *(_QWORD *)(v6 + 128);
        }
        *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 56);
      }
    }
  }
  *(_DWORD *)(v3 + 24 * a2 + 8) = -2;
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::destroyLinkNoDuplicateCheck(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 128);
  v5 = *(unsigned int *)(v4 + 24 * a2 + 4);
  if ((_DWORD)v5 != -1)
  {
    v6 = *(_DWORD *)(result + 104) - 1;
    v7 = *(_QWORD *)(result + 96);
    v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 24 * v8 + 4) = v5;
    *(_DWORD *)(result + 104) = v6;
  }
  v9 = *(_DWORD *)(result + 120);
  if (v9 == *(_DWORD *)(result + 124))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result + 112, 1, 1);
    v9 = *(_DWORD *)(v3 + 120);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 112) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::topSortInternal(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned int *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  size_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  void *v73[2];
  _DWORD *v74;
  uint64_t v75;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = (_QWORD *)(a1 + 16);
  v74 = 0;
  v75 = 0;
  if ((_DWORD)v4)
  {
    v73[0] = 0;
    v6 = realloc_array(0, v73, 4 * v4, 0, 0, 1);
    v7 = v73[0];
    v74 = v73[0];
    v8 = *(_DWORD *)(a1 + 24);
    LODWORD(v75) = v4;
    HIDWORD(v75) = v6 >> 2;
    if (!v8)
    {
      v21 = 0;
      goto LABEL_36;
    }
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 80);
    do
    {
      v13 = *(_DWORD *)(v11 + 4 * v9);
      v14 = *(_DWORD *)(v12 + 24 * v13 + 8);
      if (!v14)
      {
        if (v9 == v10)
        {
          v14 = 0;
        }
        else
        {
          if ((a2 & 1) != 0)
            goto LABEL_66;
          v15 = *(_DWORD *)(v11 + 4 * v10);
          *(_DWORD *)(v11 + 4 * v9) = v15;
          *(_DWORD *)(v12 + 24 * v15) = v9;
          *(_DWORD *)(v11 + 4 * v10) = v13;
          *(_DWORD *)(v12 + 24 * v13) = v10;
          v14 = v7[v10];
          v7[v10] = 0;
        }
        v10 = (v10 + 1);
      }
      v7[v9++] = v14;
    }
    while (v9 < *(unsigned int *)(a1 + 24));
    if (v10 >= 2)
    {
      if ((a2 & 1) != 0)
      {
        v16 = (unsigned int *)(*v5 + 4);
        v17 = *(unsigned int *)*v5;
        v18 = v10 - 1;
        while (1)
        {
          v20 = *v16++;
          v19 = v20;
          if (v17 == v20
            || *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v17 + 4) >= *(_DWORD *)(*(_QWORD *)(a1 + 80)
                                                                             + 24 * v19
                                                                             + 4))
          {
            goto LABEL_66;
          }
          v17 = v19;
          if (!--v18)
            goto LABEL_19;
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, v10);
      if ((int)v10 >= 1)
      {
        v67 = *(_QWORD *)(a1 + 16);
        v68 = *(_QWORD *)(a1 + 80);
        v69 = v10;
        v70 = *(_QWORD *)(a1 + 32);
        do
        {
          v71 = v69-- > 1;
          *(_DWORD *)(v68 + 24 * *(unsigned int *)(v67 + 4 * v69)) = v69;
          *(_DWORD *)(v70 + 4 * v69) = *(_DWORD *)(v67 + 4 * v69);
        }
        while (v71);
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v75) = 0;
  }
LABEL_19:
  v21 = *(_DWORD *)(a1 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 80);
    do
    {
      v26 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v24 + 4 * v22) + 20);
      if ((_DWORD)v26 != -2)
      {
        v27 = *(_QWORD *)(a1 + 128);
        v28 = v74;
        do
        {
          v29 = *(unsigned int *)(v27 + 24 * v26 + 4);
          if (v23 != (_DWORD)v29)
          {
            if ((a2 & 1) != 0)
              goto LABEL_66;
            v30 = *(_QWORD *)(a1 + 96);
            v31 = *(_DWORD *)(v30 + 4 * v29);
            v32 = *(_DWORD *)(v30 + 4 * v23);
            *(_DWORD *)(v30 + 4 * v29) = v32;
            *(_DWORD *)(v27 + 24 * v32 + 4) = v29;
            *(_DWORD *)(v30 + 4 * v23) = v31;
            *(_DWORD *)(v27 + 24 * v31 + 4) = v23;
          }
          v33 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v27 + 24 * v26 + 12));
          v34 = v28[v33] - 1;
          v28[v33] = v34;
          if (!v34)
          {
            if ((_DWORD)v33 != (_DWORD)v10)
            {
              if ((a2 & 1) != 0)
                goto LABEL_66;
              v35 = *(_DWORD *)(v24 + 4 * v33);
              v36 = *(_DWORD *)(v24 + 4 * v10);
              *(_DWORD *)(v24 + 4 * v33) = v36;
              *(_DWORD *)(v25 + 24 * v36) = v33;
              *(_DWORD *)(v24 + 4 * v10) = v35;
              *(_DWORD *)(v25 + 24 * v35) = v10;
              v28[v33] = v28[v10];
              v28[v10] = 0;
            }
            LODWORD(v10) = v10 + 1;
          }
          v26 = *(unsigned int *)(v27 + 24 * v26 + 20);
          ++v23;
        }
        while ((_DWORD)v26 != -2);
        v21 = *(_DWORD *)(a1 + 24);
      }
      ++v22;
    }
    while (v22 < v21);
  }
LABEL_36:
  v37 = *(_DWORD *)(a1 + 56);
  if (v37 >= 2)
  {
    if ((a2 & 1) != 0)
    {
      v38 = v37 - 1;
      v39 = v21 - 2;
      while (1)
      {
        v40 = __OFSUB__(v38--, 1);
        if (v38 < 0 != v40)
          break;
        v41 = *(_DWORD *)(*v5 + 4 * v39);
        v42 = *(_DWORD *)(*v5 + 4 * (v39 + 1));
        if (v41 != v42)
        {
          --v39;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v42 + 4))
            continue;
        }
        goto LABEL_66;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a1 + 48);
      if ((int)(v37 - 1) < 0)
        goto LABEL_60;
      v43 = *(_QWORD *)(a1 + 16);
      v44 = *(_QWORD *)(a1 + 80);
      v45 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (v37 - 1));
      v46 = *(_DWORD *)(a1 + 24) - 1;
      do
      {
        v47 = *v45--;
        *(_DWORD *)(v43 + 4 * v46) = v47;
        *(_DWORD *)(v44 + 24 * v47) = v46--;
        --v37;
      }
      while (v37);
    }
  }
  if (a2)
  {
    v48 = *(_DWORD *)(a1 + 24);
    if (v48)
    {
      v49 = 0;
      v50 = *(unsigned int **)(a1 + 16);
      v51 = *(_QWORD *)(a1 + 80);
      v52 = 1;
      v53 = *(unsigned int *)(a1 + 24);
      do
      {
        v55 = *v50++;
        v54 = v55;
        v56 = *(_DWORD *)(v51 + 24 * v55 + 8);
        if ((v52 & 1) == 0 && !v56)
          goto LABEL_66;
        v57 = *(_DWORD *)(v51 + 24 * v54 + 12);
        if ((v49 & (v57 != 0)) != 0)
          goto LABEL_66;
        v49 |= v57 == 0;
        v52 &= v56 == 0;
      }
      while (--v53);
    }
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v73, v48);
    v58 = *(unsigned int *)(a1 + 24);
    if ((int)v58 >= 1)
      bzero(v73[0], v58);
    v59 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v59)
    {
      v60 = *(unsigned int **)(a1 + 96);
      v61 = *(_QWORD *)(a1 + 128);
      v62 = *(_QWORD *)(a1 + 80);
      v63 = v73[0];
      while (1)
      {
        v64 = *v60++;
        v65 = v61 + 24 * v64;
        v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 8))] = 1;
        if (v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 12))])
          break;
        if (!--v59)
          goto LABEL_59;
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
LABEL_66:
      v66 = 0;
      goto LABEL_67;
    }
LABEL_59:
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  }
LABEL_60:
  v66 = 1;
LABEL_67:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
  return v66;
}

void sub_2099D59D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MrecInitLibrarySet_throughGerm(void)
{
  MrecInitLibrarySet_throughUser();
  MrecInitLibrarySet_throughVoc();
  return MrecInitModule_sdpres_sdapi();
}

void TCliticsParamManager::TCliticsParamManager(TCliticsParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  TParam *v4;

  TLattProcParamManager::TLattProcParamManager(this, a2);
  *v3 = &unk_24C217118;
  v4 = (TParam *)(v3 + 62);
  TBoolParam::TBoolParam((uint64_t)(v3 + 62), (uint64_t)"D", (uint64_t)"L", 0, 0, (uint64_t)"1", (uint64_t)&unk_209A7D77C);
  TIntParam::TIntParam((TCliticsParamManager *)((char *)this + 744), (uint64_t)"C", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&unk_209A7D77C);
  TBoolParam::TBoolParam((uint64_t)this + 1096, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"1", (uint64_t)&unk_209A7D77C);
  TStringParam::TStringParam((char *)this + 1344, "C", "S", 256, &unk_209A7D77C, "1", &unk_209A7D77C);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 744));
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 1096));
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 1344));
}

void sub_2099D5B60(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  TBoolParam::~TBoolParam(v4);
  TParam::~TParam(v3);
  TBoolParam::~TBoolParam(v2);
  *v1 = &unk_24C217520;
  TParam::~TParam(v1 + 18);
  TParamManager::~TParamManager((TParamManager *)v1);
  _Unwind_Resume(a1);
}

_QWORD *TCliticsProc::TCliticsProc(_QWORD *a1, uint64_t a2, char a3, __int32 *a4)
{
  _QWORD *v8;
  const TLocaleInfo **v9;
  _QWORD *v10;
  uint64_t v11;
  TParam *v12;
  uint64_t ActiveConfigHandle;
  _QWORD *Registry;

  v8 = (_QWORD *)TLatticeProcessor::TLatticeProcessor((uint64_t)a1, a2, 0);
  *v8 = &off_24C214050;
  v9 = (const TLocaleInfo **)(v8 + 9);
  TRegExp::TRegExp(v8 + 9, a2 + 240);
  v10 = (_QWORD *)operator new();
  TCliticsParamManager::TCliticsParamManager((TCliticsParamManager *)v10, (TLocaleInfo *)(a1[2] + 240));
  a1[7] = v10;
  v11 = v10[17];
  v10[17] = 1;
  TBoolParam::set((TBoolParam *)(v10 + 137), a3);
  v12 = (TParam *)(a1[7] + 1344);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v12);
  TStringParam::set(v12, ActiveConfigHandle, a4);
  if (*a4)
  {
    TRegExp::add(v9, a4, 0);
    TRegExp::doneAdding((TRegExp *)v9);
  }
  a1[8] = 0;
  Registry = (_QWORD *)TRegisterable<TLatticeProcessor>::getRegistry();
  a1[1] = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, (uint64_t)a1);
  v10[17] = v11;
  return a1;
}

void sub_2099D5CC8(_Unwind_Exception *a1)
{
  TLatticeProcessor *v1;
  TRegExp *v2;
  uint64_t v3;

  MEMORY[0x20BD149A8](v3, 0x10F3C40A031EB00);
  TRegExp::~TRegExp(v2);
  TLatticeProcessor::~TLatticeProcessor(v1);
  _Unwind_Resume(a1);
}

void TCliticsProc::~TCliticsProc(TCliticsProc *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C214050;
  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  TRegExp::~TRegExp((TCliticsProc *)((char *)this + 72));
  TLatticeProcessor::~TLatticeProcessor(this);
}

{
  TCliticsProc::~TCliticsProc(this);
  JUMPOUT(0x20BD149A8);
}

void TCliticsProc::applyInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  TWord *Word;
  _QWORD *v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t ActiveConfigHandle;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t ***v80;
  uint64_t **v81;
  __int32 **v82;
  unsigned int *v83;
  uint64_t **v84;
  int *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *p_p;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v100;
  void *__p;
  __int128 v102;
  _BYTE v103[785];
  char v104;
  uint64_t v105;
  __int128 v106;
  _BYTE v107[1024];
  char v108;
  void *v109[3];
  _BYTE v110[40];
  void *v111[3];
  void *v112[3];
  void *v113[3];
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  int v120[3];

  v117 = 0;
  v118 = 0;
  v119 = 0;
  TFsa::topologicalSort((unint64_t *)(a3 + 24), &v117);
  v8 = v117;
  v7 = v118;
  v9 = (v118 - v117) >> 3;
  v100 = a3;
  v12 = a3 + 128;
  v11 = *(_QWORD *)(a3 + 128);
  v10 = *(_QWORD *)(v12 + 8);
  v114 = 0;
  v115 = 0;
  v116 = 0;
  std::vector<unsigned long>::vector(v113, v9 + 1);
  std::vector<unsigned long>::vector(v112, (v7 - v8) >> 3);
  std::vector<TWord const*>::vector(v111, (v10 - v11) >> 3);
  TAllocator::TAllocator((TAllocator *)v110, 2048);
  *a5 = 0;
  v105 = -1;
  std::vector<unsigned long>::vector(v109, (v7 - v8) >> 3, &v105);
  v97 = (v7 - v8) >> 3;
  if (v7 != v8)
  {
    v13 = 0;
    if (v9 <= 1)
      v14 = 1;
    else
      v14 = (v7 - v8) >> 3;
    v95 = v14;
    while (1)
    {
      v15 = *(_QWORD **)&v117[8 * v13];
      *((_QWORD *)v112[0] + *v15) = v13;
      v96 = v13;
      *((_QWORD *)v113[0] + v13) = (v115 - v114) >> 3;
      v16 = v15[2];
      if (v16)
        break;
LABEL_73:
      v13 = v96 + 1;
      if (v96 + 1 == v95)
        goto LABEL_74;
    }
    while (1)
    {
      v17 = *(_QWORD **)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *((_QWORD *)v112[0] + **(_QWORD **)(v16 + 24));
      if (**(_QWORD **)v16 != 2 || (v17[2] & 1) != 0)
      {
        v22 = 0;
        v23 = 2;
      }
      else
      {
        v20 = (__int32 *)v17[1];
        Word = (TWord *)TLexicon::findWord(*(_QWORD *)(a1 + 16), v20);
        v22 = Word;
        if (Word)
        {
          v23 = (*(_DWORD *)TWord::getOptionalTagBits(Word) >> 6) & 1;
        }
        else
        {
          v22 = TLexicon::addTempWord(*(_QWORD *)(a1 + 16), v20, 0, 0, 0);
          v23 = 0;
        }
      }
      *((_QWORD *)v111[0] + v18) = v22;
      v24 = (unint64_t *)((char *)v113[0] + 8 * v19);
      v25 = *v24;
      v26 = v24[1];
      v27 = *v24 == v26;
      if (*v24 < v26)
        break;
LABEL_50:
      v9 = v97;
      if (v27)
      {
        v45 = TAllocator::allocate((TAllocator *)v110, 24);
        v46 = v45;
        v47 = 8 * (v23 == 2);
        if (v23 == 1)
          v47 = 1;
        *v45 = 0;
        v45[1] = v18;
        v45[2] = v47;
        v48 = v115;
        if (v115 >= v116)
        {
          v50 = (v115 - v114) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v51 = (v116 - v114) >> 2;
          if (v51 <= v50 + 1)
            v51 = v50 + 1;
          if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v52);
          else
            v53 = 0;
          v54 = &v53[8 * v50];
          *(_QWORD *)v54 = v46;
          v49 = v54 + 8;
          v56 = v114;
          v55 = v115;
          if (v115 != v114)
          {
            do
            {
              v57 = *((_QWORD *)v55 - 1);
              v55 -= 8;
              *((_QWORD *)v54 - 1) = v57;
              v54 -= 8;
            }
            while (v55 != v56);
            v55 = v114;
          }
          v114 = v54;
          v115 = v49;
          v116 = &v53[8 * v52];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *(_QWORD *)v115 = v45;
          v49 = v48 + 8;
        }
        v115 = v49;
      }
      v16 = *(_QWORD *)(v16 + 32);
      if (!v16)
        goto LABEL_73;
    }
    if (v23 == 1)
      v28 = 1;
    else
      v28 = 8 * (v23 == 2);
    while (1)
    {
      v29 = *(_QWORD *)&v114[8 * v25];
      if ((*(_BYTE *)(v29 + 16) & 1) != 0)
        break;
      if (v23 == 1)
      {
        v30 = TAllocator::allocate((TAllocator *)v110, 24);
        *v30 = v29;
        v30[1] = v18;
        v30[2] = 2;
        v31 = v115;
        if (v115 >= v116)
        {
          v32 = (v115 - v114) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v33 = (v116 - v114) >> 2;
          if (v33 <= v32 + 1)
            v33 = v32 + 1;
          if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v34);
          else
            v35 = 0;
          v39 = &v35[8 * v32];
          *(_QWORD *)v39 = v30;
          v36 = v39 + 8;
          v43 = v114;
          v40 = v115;
          if (v115 != v114)
          {
            do
            {
              v44 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v39 - 1) = v44;
              v39 -= 8;
            }
            while (v40 != v43);
            goto LABEL_45;
          }
          goto LABEL_46;
        }
LABEL_28:
        *(_QWORD *)v31 = v30;
        v36 = v31 + 8;
        goto LABEL_48;
      }
      addTransitionToLattice(v100, (uint64_t)v111, v29, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a1 + 72, a4, (uint64_t)v109, a5);
      v27 = 1;
LABEL_49:
      if (++v25 == v26)
        goto LABEL_50;
    }
    v30 = TAllocator::allocate((TAllocator *)v110, 24);
    *v30 = v29;
    v30[1] = v18;
    v30[2] = v28;
    v31 = v115;
    if (v115 < v116)
      goto LABEL_28;
    v37 = (v115 - v114) >> 3;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v38 = (v116 - v114) >> 2;
    if (v38 <= v37 + 1)
      v38 = v37 + 1;
    if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v38;
    if (v34)
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v34);
    else
      v35 = 0;
    v39 = &v35[8 * v37];
    *(_QWORD *)v39 = v30;
    v36 = v39 + 8;
    v41 = v114;
    v40 = v115;
    if (v115 != v114)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v39 - 1) = v42;
        v39 -= 8;
      }
      while (v40 != v41);
LABEL_45:
      v40 = v114;
    }
LABEL_46:
    v114 = v39;
    v115 = v36;
    v116 = &v35[8 * v34];
    if (v40)
      operator delete(v40);
LABEL_48:
    v115 = v36;
    goto LABEL_49;
  }
LABEL_74:
  *((_QWORD *)v113[0] + v9) = (v115 - v114) >> 3;
  v59 = *(_QWORD **)(v100 + 200);
  v58 = *(_QWORD **)(v100 + 208);
  if (v59 != v58)
  {
    while (!*v59)
    {
      if (++v59 == v58)
        goto LABEL_89;
    }
  }
  if (v59 != v58)
  {
    do
    {
      v60 = (unint64_t *)((char *)v113[0] + 8 * *((_QWORD *)v112[0] + *(_QWORD *)*v59));
      v61 = *v60;
      v62 = v60[1];
      if (*v60 < v62)
      {
        do
        {
          v63 = *(_QWORD *)&v114[8 * v61];
          if ((*(_BYTE *)(v63 + 16) & 1) == 0)
            addTransitionToLattice(v100, (uint64_t)v111, v63, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a1 + 72, a4, (uint64_t)v109, a5);
          ++v61;
        }
        while (v62 != v61);
      }
      v64 = v59 + 1;
      while (v64 != v58)
      {
        if (*v64++)
        {
          v59 = v64 - 1;
          goto LABEL_88;
        }
      }
      v59 = v58;
LABEL_88:
      ;
    }
    while (v59 != *(_QWORD **)(v100 + 208));
  }
LABEL_89:
  if (!*a5)
    *a5 = 1;
  v66 = *(_QWORD *)(a1 + 56);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v66 + 496));
  v72 = v97;
  if (*(_BYTE *)(v66 + TParam::getValidConfig((TParam *)(v66 + 496), ActiveConfigHandle) + 648))
  {
    tknPrintf("=== START PRODUCTIONS ===\n", v68, v69, v70, v71);
    v77 = v114;
    if (v115 != v114)
    {
      v78 = 0;
      v79 = 0;
      do
      {
        if (v79 <= v72)
        {
          do
          {
            if (v78 != *((_QWORD *)v113[0] + v79))
              break;
            tknPrintf("Productions for State #%llu...\n", v73, v74, v75, v76, v79++);
          }
          while (v79 <= v72);
          v77 = v114;
        }
        v80 = *(uint64_t ****)&v77[8 * v78];
        v81 = v80[1];
        if (*((_QWORD *)v111[0] + (_QWORD)v81))
        {
          v105 = (uint64_t)v107;
          v106 = xmmword_209A57DD0;
          v108 = 1;
          v82 = (__int32 **)*((_QWORD *)v111[0] + (_QWORD)v81);
          if (v82)
          {
            TWord::getWrittenForm(v82, (uint64_t)&v105);
            v83 = (unsigned int *)**((_QWORD **)v111[0] + (_QWORD)v80[1]);
          }
          else
          {
            TBuffer<wchar_t>::assign((uint64_t)&v105, (int *)"(");
            if (*((_QWORD *)&v106 + 1) >= (unint64_t)v106)
            {
              if (v108)
              {
                LODWORD(__p) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), (int *)&__p, 1uLL);
                v83 = (unsigned int *)v105;
                --*((_QWORD *)&v106 + 1);
              }
              else
              {
                v83 = (unsigned int *)v105;
                if ((_QWORD)v106)
                  *(_DWORD *)(v105 + 4 * v106 - 4) = 0;
              }
            }
            else
            {
              v83 = (unsigned int *)v105;
              *(_DWORD *)(v105 + 4 * *((_QWORD *)&v106 + 1)) = 0;
            }
          }
          v84 = *v80;
          if (*v80)
          {
            __p = v103;
            v102 = xmmword_209A57DD0;
            v104 = 1;
            do
            {
              if (((_BYTE)v84[2] & 8) != 0)
              {
                v85 = (int *)"(";
                v86 = 9;
              }
              else
              {
                TWord::getWrittenForm(*((__int32 ***)v111[0] + (_QWORD)v84[1]), (uint64_t)&__p);
                if (*((_QWORD *)&v102 + 1) >= (unint64_t)v102)
                {
                  if (v104)
                  {
                    v120[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v102 + 1), v120, 1uLL);
                    v85 = (int *)__p;
                    --*((_QWORD *)&v102 + 1);
                  }
                  else
                  {
                    v85 = (int *)__p;
                    if ((_QWORD)v102)
                      *((_DWORD *)__p + v102 - 1) = 0;
                  }
                }
                else
                {
                  v85 = (int *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v102 + 1)) = 0;
                }
                v87 = 0;
                while (v85[v87++])
                  ;
                v86 = v87 - 1;
              }
              TBuffer<wchar_t>::insert((uint64_t)&v105, 0, v85, v86);
              v84 = (uint64_t **)*v84;
            }
            while (v84);
            if (*((_QWORD *)&v106 + 1) >= (unint64_t)v106)
            {
              if (v108)
              {
                v120[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), v120, 1uLL);
                v83 = (unsigned int *)v105;
                --*((_QWORD *)&v106 + 1);
              }
              else
              {
                v83 = (unsigned int *)v105;
                if ((_QWORD)v106)
                  *(_DWORD *)(v105 + 4 * v106 - 4) = 0;
              }
            }
            else
            {
              v83 = (unsigned int *)v105;
              *(_DWORD *)(v105 + 4 * *((_QWORD *)&v106 + 1)) = 0;
            }
            if (v104 && __p != v103 && __p)
              MEMORY[0x20BD149A8]();
          }
          v89 = (uint64_t)v80[2];
          loggableUnicode(v83, &__p);
          p_p = &__p;
          if (v102 < 0)
            p_p = __p;
          tknPrintf("Production #%llu (0x%llx): %s\n", v90, v91, v92, v93, v78, v89, p_p);
          v72 = v97;
          if (SHIBYTE(v102) < 0)
            operator delete(__p);
          if (v108 && (_BYTE *)v105 != v107 && v105)
            MEMORY[0x20BD149A8]();
        }
        else
        {
          tknPrintf("Production #%llu (0x%llx): (UNKNOWN)\n", v73, v74, v75, v76, v78, v80[2]);
        }
        ++v78;
        v77 = v114;
      }
      while (v78 < (v115 - v114) >> 3);
    }
    tknPrintf("=== END PRODUCTIONS ===\n", v73, v74, v75, v76);
  }
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
  TAllocator::clear((TAllocator *)v110);
  if (v111[0])
  {
    v111[1] = v111[0];
    operator delete(v111[0]);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
}

void sub_2099D6708(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  TAllocator::clear((TAllocator *)(v1 - 256));
  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(_QWORD *)(v1 - 184) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 168);
  if (v5)
  {
    *(_QWORD *)(v1 - 160) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 - 144);
  if (v6)
  {
    *(_QWORD *)(v1 - 136) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 - 120);
  if (v7)
  {
    *(_QWORD *)(v1 - 112) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void addTransitionToLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v17;
  _QWORD *v18;
  TParam *v19;
  _QWORD *v20;
  uint64_t v21;
  TParam *v22;
  uint64_t ActiveConfigHandle;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *Word;
  _QWORD *v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  BOOL v47;
  int *v48;
  __int32 *v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  __int32 *v87;
  __int128 v88;
  _BYTE v89[785];
  char v90;
  _BYTE *v91;
  __int128 v92;
  _BYTE v93[785];
  char v94;
  int *v95;
  __int128 v96;
  _BYTE v97[1024];
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unsigned int *v105;
  __int128 v106;
  _BYTE v107[1024];
  char v108;
  int v109[5];

  v9 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v79 = v15;
  v80 = v14;
  v84 = v16;
  if ((*(_BYTE *)(v10 + 16) & 0x10) == 0)
  {
    v17 = v13;
    v18 = v12;
    v19 = (TParam *)v11;
    v20 = (_QWORD *)v10;
    v21 = v9;
    v22 = (TParam *)(v11 + 1096);
    ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 1096));
    v77 = *((unsigned __int8 *)v22 + TParam::getValidConfig(v22, ActiveConfigHandle) + 152);
    v19 = (TParam *)((char *)v19 + 744);
    v24 = TParam::getActiveConfigHandle(v19);
    v85 = *((int *)v19 + TParam::getValidConfig(v19, v24) + 40);
    v78 = v18[2];
    v105 = (unsigned int *)v107;
    v106 = xmmword_209A57DD0;
    v108 = 1;
    v25 = v20[1];
    v26 = *(uint64_t ***)(*(_QWORD *)(v21 + 128) + 8 * v25);
    v27 = *v26[3];
    v81 = *v26[2];
    v82 = *v26;
    v83 = **v26;
    v28 = *((_DWORD *)*v26 + 4);
    v86 = (*v26)[3];
    v29 = (*v26)[4];
    v30 = v82[5];
    v31 = *((_OWORD *)v82 + 6);
    v101 = *((_OWORD *)v82 + 5);
    v102 = v31;
    v32 = *((_OWORD *)v82 + 8);
    v103 = *((_OWORD *)v82 + 7);
    v104 = v32;
    v33 = *((_OWORD *)v82 + 4);
    v99 = *((_OWORD *)v82 + 3);
    v100 = v33;
    v75 = v29;
    if ((v28 & 1) != 0)
      Word = 0;
    else
      Word = *(uint64_t **)(*v84 + 8 * v25);
    v35 = (_QWORD *)*v20;
    v76 = v20;
    if (*v20)
    {
      v74 = v18;
      v73 = v17;
      v36 = (v20[2] & 3) == 0;
      while (1)
      {
        v37 = v35;
        v38 = v35[1];
        v39 = *(uint64_t ***)(*(_QWORD *)(v21 + 128) + 8 * v38);
        v27 = *v39[3];
        v40 = *v39;
        v41 = *((_DWORD *)*v39 + 4);
        v86 = (*v39)[3];
        v30 += (*v39)[5];
        if (v36)
          goto LABEL_13;
        v42 = v37[2];
        if ((v42 & 8) != 0)
          break;
        if ((v42 & 3) == 0)
        {
          v45 = *v84;
          if (!v78)
            goto LABEL_32;
          TWord::getCategoryTag(*(_QWORD *)(v45 + 8 * v38), &v105);
          if (*((_QWORD *)&v106 + 1) >= (unint64_t)v106)
          {
            if (v108)
            {
              LODWORD(v95) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), (int *)&v95, 1uLL);
              v46 = v105;
              --*((_QWORD *)&v106 + 1);
            }
            else
            {
              v46 = v105;
              if ((_QWORD)v106)
                v105[(_QWORD)v106 - 1] = 0;
            }
          }
          else
          {
            v46 = v105;
            v105[*((_QWORD *)&v106 + 1)] = 0;
          }
          v47 = TRegExp::match(v74, v46, 0);
          v38 = v37[1];
          v45 = *v84;
          if (!v47)
          {
            v43 = 0;
            Word = *(uint64_t **)(v45 + 8 * v38);
          }
          else
          {
LABEL_32:
            v95 = (int *)v97;
            v96 = xmmword_209A57DD0;
            v98 = 1;
            TWord::getWrittenForm(*(__int32 ***)(v45 + 8 * v38), (uint64_t)&v95);
            v91 = v93;
            v92 = xmmword_209A57DD0;
            v94 = 1;
            TWord::getWrittenForm(*(__int32 ***)(*v84 + 8 * v20[1]), (uint64_t)&v91);
            v87 = (__int32 *)v89;
            v88 = xmmword_209A57DD0;
            v90 = 1;
            TBuffer<wchar_t>::operator=((uint64_t)&v87, (uint64_t)&v95);
            TBuffer<wchar_t>::operator+=((uint64_t)&v87, (uint64_t)&v91);
            if (!v77)
              goto LABEL_41;
            if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
            {
              if (v98)
              {
                v109[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v109, 1uLL);
                v48 = v95;
                --*((_QWORD *)&v96 + 1);
              }
              else
              {
                v48 = v95;
                if ((_QWORD)v96)
                  v95[(_QWORD)v96 - 1] = 0;
              }
            }
            else
            {
              v48 = v95;
              v95[*((_QWORD *)&v96 + 1)] = 0;
            }
            if ((respellRoot((uint64_t)&v87, v48) & 1) == 0)
            {
              v43 = 0;
              Word = *(uint64_t **)(*v84 + 8 * v37[1]);
            }
            else
            {
LABEL_41:
              if (*((_QWORD *)&v88 + 1) >= (unint64_t)v88)
              {
                if (v90)
                {
                  v109[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v87, *((unint64_t *)&v88 + 1), v109, 1uLL);
                  v49 = v87;
                  --*((_QWORD *)&v88 + 1);
                }
                else
                {
                  v49 = v87;
                  if ((_QWORD)v88)
                    v87[(_QWORD)v88 - 1] = 0;
                }
              }
              else
              {
                v49 = v87;
                v87[*((_QWORD *)&v88 + 1)] = 0;
              }
              Word = (uint64_t *)TLexicon::findWord(v80, v49);
              if (!Word)
              {
                if (*((_QWORD *)&v88 + 1) >= (unint64_t)v88)
                {
                  if (v90)
                  {
                    v109[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v87, *((unint64_t *)&v88 + 1), v109, 1uLL);
                    v50 = v87;
                    --*((_QWORD *)&v88 + 1);
                  }
                  else
                  {
                    v50 = v87;
                    if ((_QWORD)v88)
                      v87[(_QWORD)v88 - 1] = 0;
                  }
                }
                else
                {
                  v50 = v87;
                  v87[*((_QWORD *)&v88 + 1)] = 0;
                }
                Word = TLexicon::addTempWord(v80, v50, 0, 0, 0);
              }
              v51 = v85;
              v43 = v30 >= v85;
              if (v30 < v85)
                v51 = 0;
              v30 -= v51;
            }
            if (v90 && v87 != (__int32 *)v89 && v87)
              MEMORY[0x20BD149A8]();
            if (v94 && v91 != v93 && v91)
              MEMORY[0x20BD149A8]();
            if (v98 && v95 != (int *)v97 && v95)
              MEMORY[0x20BD149A8]();
          }
          goto LABEL_14;
        }
        v36 = 0;
        v43 = 0;
LABEL_15:
        if (*(_BYTE *)(v21 + 248))
        {
          if (v43)
            v44 = v85;
          else
            v44 = 0;
          TLatticeProcessor::combineMrecData((uint64_t)&v99, (uint64_t)(v40 + 6), v44);
        }
        v28 |= v41;
        v35 = (_QWORD *)*v37;
        v20 = v37;
        if (!*v37)
        {
          v17 = v73;
          goto LABEL_71;
        }
      }
      if (*v40 == 2)
      {
        v43 = 0;
        Word = *(uint64_t **)(*v84 + 8 * v38);
        v36 = 1;
        v82 = v40;
        v83 = 2;
        goto LABEL_15;
      }
      v82 = v40;
      v83 = *v40;
      Word = 0;
LABEL_13:
      v43 = 0;
LABEL_14:
      v36 = 1;
      goto LABEL_15;
    }
LABEL_71:
    v52 = *v79;
    if (*(_QWORD *)(*v79 + 8 * v27) == -1)
      *(_QWORD *)(v52 + 8 * v27) = (*a9)++;
    if (*(_QWORD *)(v52 + 8 * v81) == -1)
      *(_QWORD *)(v52 + 8 * v81) = (*a9)++;
    v53 = operator new();
    v54 = v53;
    *(_QWORD *)v53 = v83;
    *(_DWORD *)(v53 + 16) = v28;
    if (Word)
      v55 = *Word;
    else
      v55 = v82[1];
    *(_QWORD *)(v53 + 8) = v55;
    v56 = *v79;
    *(_QWORD *)(v53 + 24) = *(_QWORD *)(*v79 + 8 * v27);
    *(_QWORD *)(v53 + 32) = *(_QWORD *)(v56 + 8 * v81);
    *(_QWORD *)(v53 + 40) = v86;
    *(_QWORD *)(v53 + 48) = v75;
    *(_QWORD *)(v53 + 56) = v30;
    v57 = v100;
    *(_OWORD *)(v53 + 64) = v99;
    *(_OWORD *)(v53 + 80) = v57;
    v58 = v104;
    *(_OWORD *)(v53 + 128) = v103;
    *(_OWORD *)(v53 + 144) = v58;
    v59 = v102;
    *(_OWORD *)(v53 + 96) = v101;
    *(_OWORD *)(v53 + 112) = v59;
    v60 = (unint64_t)v17[2];
    v61 = (uint64_t *)v17[1];
    if ((unint64_t)v61 >= v60)
    {
      v63 = ((char *)v61 - (_BYTE *)*v17) >> 3;
      if ((unint64_t)(v63 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v64 = v60 - (_QWORD)*v17;
      v65 = v64 >> 2;
      if (v64 >> 2 <= (unint64_t)(v63 + 1))
        v65 = v63 + 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v17 + 2), v66);
      else
        v67 = 0;
      v68 = (uint64_t *)&v67[8 * v63];
      v69 = &v67[8 * v66];
      *v68 = v54;
      v62 = v68 + 1;
      v71 = (char *)*v17;
      v70 = (char *)v17[1];
      if (v70 != *v17)
      {
        do
        {
          v72 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v68 = v72;
        }
        while (v70 != v71);
        v70 = (char *)*v17;
      }
      *v17 = v68;
      v17[1] = v62;
      v17[2] = v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v61 = v53;
      v62 = v61 + 1;
    }
    v17[1] = v62;
    v76[2] |= 0x10uLL;
    if (v108 && v105 != (unsigned int *)v107)
    {
      if (v105)
        MEMORY[0x20BD149A8]();
    }
  }
}

void sub_2099D6FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if (LOBYTE(STACK[0x8E8]))
  {
    v19 = STACK[0x4D0];
    if (STACK[0x4D0] != a17)
    {
      if (v19)
        MEMORY[0x20BD149A8](v19, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xD08]))
  {
    v20 = STACK[0x8F0];
    if (STACK[0x8F0] != a18)
    {
      if (v20)
        MEMORY[0x20BD149A8](v20, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1190]))
  {
    v21 = STACK[0xD78];
    if (STACK[0xD78] != a11)
    {
      if (v21)
        MEMORY[0x20BD149A8](v21, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCliticsProc::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *exception;
  std::string *v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  void *__p[3];
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 136);
  *(_QWORD *)(v5 + 136) = a4;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 256) + 8) != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    tknPrintf("Error: The lattice lexicon handle does not match the lattice processor's lexicon handle.\n", a2, a3, a4, a5);
    std::string::basic_string[abi:ne180100]<0>(v21, &byte_209A88803);
    __p[0] = (void *)aPpx;
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
    }
    else
    {
      *(_OWORD *)&__p[1] = *(_OWORD *)v21;
      v24 = v22;
    }
    __p[0] = &unk_24C214BA0;
    if (v24 >= 0)
      v17 = (const char *)&__p[1];
    else
      v17 = (const char *)__p[1];
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/clitics/cliticsproc.cpp", 633, v15, v16);
    __p[0] = (void *)aPpx;
    if (SHIBYTE(v24) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    exception = (char *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)exception = aPpx;
    v19 = (std::string *)(exception + 8);
    if (SHIBYTE(__p[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *((void **)exception + 3) = __p[2];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *(_QWORD *)exception = &unk_24C214BA0;
  }
  memset(__p, 0, sizeof(__p));
  v21[0] = 0;
  TCliticsProc::applyInternal(a1, a2, a3, (uint64_t)__p, v21);
  v9 = (_QWORD *)operator new();
  TLattice::TLattice(v9, __p, ((char *)__p[1] - (char *)__p[0]) >> 3, (unint64_t)v21[0], 1, 1, *(_BYTE *)(a3 + 248), *(_QWORD *)(a3 + 16), *(_QWORD *)(a1 + 16));
  v10 = __p[0];
  v11 = __p[1];
  if (__p[1] == __p[0])
  {
    v10 = __p[1];
  }
  else
  {
    v12 = 0;
    do
    {
      if (v10[v12])
      {
        MEMORY[0x20BD149A8](v10[v12], 0x10D2C401D7F962ALL);
        v10 = __p[0];
        v11 = __p[1];
      }
      ++v12;
    }
    while (v12 < (v11 - (_BYTE *)v10) >> 3);
  }
  v13 = v9[1];
  if (v10)
  {
    __p[1] = v10;
    operator delete(v10);
  }
  *(_QWORD *)(v5 + 136) = v6;
  return v13;
}

void sub_2099D7338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      *(_QWORD *)(v27 + 136) = v28;
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TCliticsProc::apply(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t HeadClone;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  void *__p;
  _BYTE *v72;
  uint64_t v73;
  void *v74[3];
  void *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;

  v10 = *(_QWORD *)(a1 + 56);
  v66 = *(_QWORD *)(v10 + 136);
  v67 = v10;
  *(_QWORD *)(v10 + 136) = a5;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v78, a3);
  if (a3)
  {
    v11 = 0;
    v12 = v79;
    do
    {
      v13 = **(_QWORD **)(*a2 + 8 * v11);
      if (v12 >= v80)
      {
        v14 = (v12 - v78) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v15 = (v80 - v78) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v80 - v78) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v80, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v13;
        v12 = v18 + 8;
        v20 = v78;
        v19 = v79;
        if (v79 != v78)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = v78;
        }
        v78 = v18;
        v79 = v12;
        v80 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v12 = v13;
        v12 += 8;
      }
      v79 = v12;
      ++v11;
    }
    while (v11 != a3);
  }
  v75 = 0;
  v76 = 0;
  v22 = a4 - a3;
  v77 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve(&v75, a4 - a3);
  std::vector<TLatticeConstructionTransData>::vector(v74, a4 - a3);
  if (a4 != a3)
  {
    v23 = 0;
    do
    {
      v24 = (char *)v74[0] + 160 * v23;
      *(_QWORD *)v24 = 2;
      *((_DWORD *)v24 + 4) = 0;
      *((_QWORD *)v24 + 1) = **(_QWORD **)(*a2 + 8 * (v23 + a3));
      v25 = (char *)v74[0] + 160 * v23;
      v25[3] = v23;
      v25[5] = v23++;
      v25[4] = v23;
      v25[6] = v23;
      v25[7] = 1;
      v26 = v76;
      if (v76 >= v77)
      {
        v28 = (v76 - (_BYTE *)v75) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v29 = (v77 - (_BYTE *)v75) >> 2;
        if (v29 <= v28 + 1)
          v29 = v28 + 1;
        if ((unint64_t)(v77 - (_BYTE *)v75) >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v77, v30);
        else
          v31 = 0;
        v32 = &v31[8 * v28];
        *(_QWORD *)v32 = v25;
        v27 = v32 + 8;
        v34 = (char *)v75;
        v33 = v76;
        if (v76 != v75)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          v33 = (char *)v75;
        }
        v75 = v32;
        v76 = v27;
        v77 = &v31[8 * v30];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v76 = v25;
        v27 = v26 + 8;
      }
      v76 = v27;
    }
    while (v23 != v22);
  }
  v36 = (_QWORD *)operator new();
  TLattice::TLattice(v36, &v75, (v76 - (_BYTE *)v75) >> 3, ((v76 - (_BYTE *)v75) >> 3) + 1, 1, 1, 0, 0, *(_QWORD *)(a1 + 16));
  __p = 0;
  v72 = 0;
  v73 = 0;
  v69 = v36;
  v70 = 0;
  TCliticsProc::applyInternal(a1, v37, (uint64_t)v36, (uint64_t)&__p, &v70);
  v38 = __p;
  if (v72 != __p)
  {
    v39 = 0;
    do
    {
      HeadClone = TLexicon::findHeadClone(*(_QWORD *)(a1 + 16), *(__int32 **)(v38[v39] + 8));
      if (!HeadClone)
        HeadClone = (uint64_t)TLexicon::addTempWord(*(_QWORD *)(a1 + 16), *(int **)(*((_QWORD *)__p + v39) + 8), 0, 0, 0);
      v41 = *(_QWORD *)(*((_QWORD *)__p + v39) + 48) - *(_QWORD *)(*((_QWORD *)__p + v39) + 40);
      v43 = a6[1];
      v42 = (unint64_t)a6[2];
      if ((unint64_t)v43 >= v42)
      {
        v45 = ((char *)v43 - (char *)*a6) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v47 = v42 - (_QWORD)*a6;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a6 + 2), v48);
        else
          v49 = 0;
        v50 = (uint64_t *)&v49[16 * v45];
        *v50 = HeadClone;
        v50[1] = v41;
        v52 = (char *)*a6;
        v51 = (char *)a6[1];
        v53 = v50;
        if (v51 != (char *)*a6)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v51 - 1);
            v53 -= 2;
            v51 -= 16;
          }
          while (v51 != v52);
          v51 = (char *)*a6;
        }
        v44 = v50 + 2;
        *a6 = v53;
        a6[1] = v50 + 2;
        a6[2] = (uint64_t *)&v49[16 * v48];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v43 = HeadClone;
        v43[1] = v41;
        v44 = v43 + 2;
      }
      a6[1] = v44;
      v38 = __p;
      v54 = *((_QWORD *)__p + v39);
      if (v54)
      {
        MEMORY[0x20BD149A8](v54, 0x10D2C401D7F962ALL);
        v38 = __p;
      }
      ++v39;
    }
    while (v39 < (v72 - (_BYTE *)v38) >> 3);
  }
  if (a4 > a3)
  {
    v55 = *a6;
    if (*a6 == a6[1])
    {
      v56 = (unint64_t)a6[2];
      if ((unint64_t)v55 >= v56)
      {
        v58 = v56 - (_QWORD)v55;
        v59 = v58 >> 3;
        if ((unint64_t)(v58 >> 3) <= 1)
          v59 = 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
          v60 = 0xFFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a6 + 2), v60);
        v63 = &v61[2 * v62];
        *v61 = 0;
        v61[1] = v22;
        v57 = v61 + 2;
        v65 = (char *)*a6;
        v64 = (char *)a6[1];
        if (v64 != (char *)*a6)
        {
          do
          {
            *((_OWORD *)v61 - 1) = *((_OWORD *)v64 - 1);
            v61 -= 2;
            v64 -= 16;
          }
          while (v64 != v65);
          v64 = (char *)*a6;
        }
        *a6 = v61;
        a6[1] = v57;
        a6[2] = v63;
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v55 = 0;
        v55[1] = v22;
        v57 = v55 + 2;
      }
      a6[1] = v57;
    }
  }
  if (v69)
    (*(void (**)(_QWORD *))(*v69 + 8))(v69);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
  if (v75)
  {
    v76 = (char *)v75;
    operator delete(v75);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  *(_QWORD *)(v67 + 136) = v66;
}

void sub_2099D7990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  *(_QWORD *)(a11 + 136) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t TCliticsProc::save(TCliticsProc *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *p_p;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _QWORD *exception;
  std::string *v23;
  __int128 v24;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;
  _BYTE v28[24];
  uint64_t v29;
  void *v30;
  char v31;
  _BYTE v32[152];
  __int128 v33;
  uint64_t v34;
  _BYTE v35[16];
  unint64_t v36;

  v6 = *((_QWORD *)this + 2);
  v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0)
    v7 = *(const char **)v7;
  TOutputModel::TOutputModel((TOutputModel *)v35, a2, a3, v7, *((const TDataManager **)this + 8));
  if (v36 <= 1)
  {
    tknPrintf("Error: Unsupported model version for Clitics: %llu\n", v8, v9, v10, v11, v36);
    std::string::basic_string[abi:ne180100]<0>(&v33, &byte_209A88803);
    *(_QWORD *)v28 = aPpx;
    if (SHIBYTE(v34) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v28[8], (const std::string::value_type *)v33, *((std::string::size_type *)&v33 + 1));
    }
    else
    {
      *(_OWORD *)&v28[8] = v33;
      v29 = v34;
    }
    *(_QWORD *)v28 = &unk_24C214BA0;
    if (v29 >= 0)
      v21 = &v28[8];
    else
      v21 = *(const char **)&v28[8];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/clitics/cliticsproc.cpp", 738, v19, v20);
    *(_QWORD *)v28 = aPpx;
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)&v28[8]);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, &byte_209A88803);
    *exception = aPpx;
    v23 = (std::string *)(exception + 1);
    if ((v28[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v28, *(std::string::size_type *)&v28[8]);
    }
    else
    {
      v24 = *(_OWORD *)v28;
      exception[3] = *(_QWORD *)&v28[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    }
    *exception = &unk_24C214BA0;
  }
  v12 = (_QWORD *)MEMORY[0x24BEDB800];
  v13 = MEMORY[0x24BEDB848];
  if (a2)
  {
    TDataManager::setIntVar(a2, "CliticsVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
    TOutputStream::TOutputStream(&v33, v28, (uint64_t)"CliticsParam", *((_QWORD *)this + 2) + 240);
    TParamManager::save(*((_QWORD **)this + 7), (_QWORD **)&v33, 0);
    std::stringbuf::str();
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v15 = v27;
    else
      v15 = v26;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "CliticsParam", p_p, v15);
    if ((char)v27 < 0)
      operator delete(__p);
    *(_QWORD *)v28 = *v12;
    *(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 24)] = v12[3];
    *(_QWORD *)&v28[8] = v13 + 16;
    if (v31 < 0)
      operator delete(v30);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v32);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "CliticsVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
    TOutputStream::TOutputStream(&v33, v28, (uint64_t)"CliticsParam", *((_QWORD *)this + 2) + 240);
    TParamManager::save(*((_QWORD **)this + 7), (_QWORD **)&v33, 1);
    std::stringbuf::str();
    if ((v27 & 0x80u) == 0)
      v16 = &__p;
    else
      v16 = __p;
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "CliticsParam", v16, v17);
    if ((char)v27 < 0)
      operator delete(__p);
    *(_QWORD *)v28 = *v12;
    *(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 24)] = v12[3];
    *(_QWORD *)&v28[8] = v13 + 16;
    if (v31 < 0)
      operator delete(v30);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v32);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
}

void sub_2099D7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TCliticsProc::getParamManager(TCliticsProc *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t TCliticsProc::getType(TCliticsProc *this)
{
  return 5;
}

void TCliticsParamManager::~TCliticsParamManager(TCliticsParamManager *this)
{
  TCliticsParamManager::~TCliticsParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  void **v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &unk_24C217118;
  v2 = (void **)((char *)this + 1344);
  *((_QWORD *)this + 168) = &unk_24C214170;
  v6 = (void **)((char *)this + 2696);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 2672);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 2648);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  for (i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 2647) < 0)
      operator delete(*(void **)((char *)this + i + 2624));
  }
  TParam::~TParam(v2);
  v4 = 0;
  *((_QWORD *)this + 137) = off_24C2135E0;
  do
  {
    if (*((char *)this + v4 + 1343) < 0)
      operator delete(*(void **)((char *)this + v4 + 1320));
    v4 -= 24;
  }
  while (v4 != -48);
  TParam::~TParam((void **)this + 137);
  TParam::~TParam((void **)this + 93);
  v5 = 0;
  *((_QWORD *)this + 62) = off_24C2135E0;
  do
  {
    if (*((char *)this + v5 + 743) < 0)
      operator delete(*(void **)((char *)this + v5 + 720));
    v5 -= 24;
  }
  while (v5 != -48);
  TParam::~TParam((void **)this + 62);
  *(_QWORD *)this = &unk_24C217520;
  TParam::~TParam((void **)this + 18);
  TParamManager::~TParamManager(this);
}

uint64_t MrecInitLibrary_word(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_corpus_word();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wordlist_word();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughWord(void)
{
  MrecInitLibrarySet_throughPhoneme();
  return MrecInitLibrary_word();
}

void MrecInitModule_dfile_dfutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowDFileLoadInfo)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowDFileLoadInfo", (const char *)&unk_209A7DFD7, (const char *)&unk_209A7DFD7, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowDFileLoadInfo = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowDFileLoadInfo);
  }
}

void writeMrecHeader(DgnStream *a1, const char *a2, int a3, int a4, int a5)
{
  char *MrecName;
  char *MrecVersion;
  int v11;
  uint64_t Buffer;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[4];

  (*(void (**)(DgnStream *, const char *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, 8);
  v15[0] = a3;
  (*(void (**)(DgnStream *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 80))(a1, v15, 4);
  v15[0] = a4;
  (*(void (**)(DgnStream *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 80))(a1, v15, 4);
  DgnString::DgnString((DgnString *)v15);
  DgnString::preAllocate((unint64_t)v15, 256);
  MrecName = (char *)GetMrecName();
  DgnString::operator=((DgnString *)v15, MrecName);
  if (a5)
  {
    DgnString::operator+=((DgnString *)v15, " ");
    MrecVersion = (char *)GetMrecVersion();
    DgnString::operator+=((DgnString *)v15, MrecVersion);
  }
  v11 = v15[2];
  Buffer = DgnString::getBuffer((DgnString *)v15, 0x20u);
  v13 = Buffer;
  LODWORD(v14) = v11 - 1;
  if (!v11)
    LODWORD(v14) = 0;
  if (v14 >= 0x1F)
    v14 = 31;
  else
    v14 = v14;
  bzero((void *)(Buffer + v14), (32 - v14));
  (*(void (**)(DgnStream *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13, 32);
  DgnString::~DgnString((DgnString *)v15);
}

void sub_2099D820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

DgnStream *OpenAndWriteMrecHeader(uint64_t a1, unsigned int a2, int a3, const char *a4, int a5, int a6)
{
  uint64_t v11;
  char *SubFileExtensionString;
  DgnStream *v13;

  if (a3)
    v11 = 5;
  else
    v11 = 1;
  SubFileExtensionString = GetSubFileExtensionString(a2);
  v13 = (DgnStream *)(*(uint64_t (**)(uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, SubFileExtensionString, v11, 0);
  writeMrecHeader(v13, a4, a5, a6, a3 ^ 1);
  return v13;
}

uint64_t DFile::openSubFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char *SubFileExtensionString;

  SubFileExtensionString = GetSubFileExtensionString(a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, SubFileExtensionString, a3, a4);
}

void readMrecHeader(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char SubFileExtensionString;
  uint64_t v15;
  uint64_t v16;
  uint64_t Buffer;
  _DWORD v18[4];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v19, 8, 1);
  if (v19[0] != *a4)
  {
    if (*(_DWORD *)(a1 + 24))
      v13 = *(void **)(a1 + 16);
    else
      v13 = &unk_209A7DFD7;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 144, (uint64_t)"dfutil/dfile", 7, (uint64_t)"%.500s %.8s %.8s", v11, v12, (char)v13);
  }
  v18[0] = 0;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v18, 4, 1);
  *a5 = v18[0];
  v18[0] = 0;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v18, 4, 1);
  *a6 = v18[0];
  if (!*a5)
  {
    SubFileExtensionString = GetSubFileExtensionString(a3);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 150, (uint64_t)"dfutil/dfile", 8, (uint64_t)"%.500s %.500s", v15, v16, SubFileExtensionString);
  }
  DgnString::DgnString((DgnString *)v18);
  Buffer = DgnString::getBuffer((DgnString *)v18, 0x20u);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, Buffer, 32, 1);
  DgnString::~DgnString((DgnString *)v18);
}

void sub_2099D84BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t OpenAndReadMrecHeader(uint64_t a1, unsigned int a2, int a3, _QWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11;
  char *SubFileExtensionString;
  uint64_t v13;

  if (a3)
    v11 = 3;
  else
    v11 = 0;
  SubFileExtensionString = GetSubFileExtensionString(a2);
  v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, SubFileExtensionString, v11, 0);
  readMrecHeader(v13, a1, a2, a4, a5, a6);
  return v13;
}

void MrecHeaderCheckVersions(char *a1, const char *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  int v20;

  if (a5 < a3 || a5 == a3 && a6 < a4)
  {
    DgnString::DgnString((DgnString *)v17, "A component of ");
    operator+(a1, (uint64_t)v17, (uint64_t)v18);
    operator+(" could not be opened because it is in an obsolete format, intended for a version of MREC older than this one. Consider upgrading the file with MREC 1.19.200.13604. Details:", (uint64_t)v18, (uint64_t)&v19);
    if (v20)
      LOBYTE(v13) = v19;
    else
      v13 = &unk_209A7DFD7;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 210, (uint64_t)"dfutil/dfile", 9, (uint64_t)"%.500s %.500s %u %u %u %u", v11, v12, (char)v13);
    DgnString::~DgnString((DgnString *)&v19);
    DgnString::~DgnString((DgnString *)v18);
    DgnString::~DgnString((DgnString *)v17);
  }
  if (a5 > a3 || a5 == a3 && a6 > a4)
  {
    DgnString::DgnString((DgnString *)v17, "A component of ");
    operator+(a1, (uint64_t)v17, (uint64_t)v18);
    operator+(" could not be opened because it is in an unknown format, intended for a version of MREC newer than this one. Details:", (uint64_t)v18, (uint64_t)&v19);
    if (v20)
      LOBYTE(v16) = v19;
    else
      v16 = &unk_209A7DFD7;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 221, (uint64_t)"dfutil/dfile", 10, (uint64_t)"%.500s %.500s %u %u %u %u", v14, v15, (char)v16);
    DgnString::~DgnString((DgnString *)&v19);
    DgnString::~DgnString((DgnString *)v18);
    DgnString::~DgnString((DgnString *)v17);
  }
}

void sub_2099D8704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecHeaderCheckLatestVersionIfShared(DFile *a1, const char *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  void *v8;

  if ((a5 != a3 || a6 != a4) && *((_BYTE *)a1 + 72))
  {
    if (*((_DWORD *)a1 + 6))
      v8 = (void *)*((_QWORD *)a1 + 2);
    else
      v8 = &unk_209A7DFD7;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 240, (uint64_t)"dfutil/dfile", 11, (uint64_t)"%.500s %.500s %u %u %u %u", a7, a8, (char)v8);
  }
}

void DFileOwner::DFileOwner(DFileOwner *this)
{
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

uint64_t DFileOwner::closeDFile(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = this;
  if (*(_BYTE *)(this + 8))
  {
    this = DFile::removeFileAfterSaveException(this);
    *(_BYTE *)(v1 + 8) = 0;
  }
  v2 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    (*(void (**)(_QWORD))*v2)(*(_QWORD *)v1);
    this = MemChunkFree(v2, 0);
  }
  *(_QWORD *)v1 = 0;
  return this;
}

void DFileOwner::~DFileOwner(DFileOwner *this)
{
  DFileOwner::closeDFile((uint64_t)this);
}

uint64_t DFile::removeFileAfterSaveException(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result)
  {
    v1 = (_QWORD *)result;
    result = *(_QWORD *)result;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
      v2 = (_QWORD *)*v1;
      if (*v1)
      {
        (*(void (**)(_QWORD))*v2)(*v1);
        result = MemChunkFree(v2, 0);
      }
      *v1 = 0;
    }
  }
  return result;
}

uint64_t DFileOwner::setRemoveFileOnDestruction(uint64_t this, char a2)
{
  if (*(_QWORD *)this)
    *(_BYTE *)(this + 8) = a2;
  return this;
}

void DFile::DFile(DFile *this, const FileSpec *a2)
{
  DgnString *v4;
  DgnString *v5;

  *(_QWORD *)this = off_24C218CC8;
  v4 = (DFile *)((char *)this + 32);
  v5 = (DFile *)((char *)this + 16);
  FileSpec::FileSpec((DFile *)((char *)this + 16));
  DgnString::DgnString(v4);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  FileSpec::operator=(v5, a2);
  FileSpec::getNameOnly(a2, v4);
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 1) = 0;
}

void sub_2099D8944(_Unwind_Exception *a1)
{
  FileSpec *v1;

  FileSpec::~FileSpec(v1);
  _Unwind_Resume(a1);
}

uint64_t DFile::subFileExists(uint64_t a1, unsigned int a2)
{
  char *SubFileExtensionString;

  SubFileExtensionString = GetSubFileExtensionString(a2);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, SubFileExtensionString);
}

void DFile::~DFile(DFile *this)
{
  *(_QWORD *)this = off_24C218CC8;
  *((_QWORD *)this + 1) = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 56);
  DgnString::~DgnString((DFile *)((char *)this + 32));
  FileSpec::~FileSpec((DFile *)((char *)this + 16));
}

void DFile::printSize(DFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 353, (DgnString *)&v64);
  if (v65)
    v16 = (void *)v64;
  else
    v16 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7DFD7, a3, &unk_209A7DFD7, v16);
  DgnString::~DgnString((DgnString *)&v64);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7DFD7);
  v21 = FileSpec::sizeObject((uint64_t)this + 16);
  v22 = FileSpec::sizeObject((uint64_t)this + 16);
  v23 = FileSpec::sizeObject((uint64_t)this + 16);
  v24 = (a3 + 1);
  v63 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 354, (DgnString *)&v64);
  if (v65)
    v30 = (void *)v64;
  else
    v30 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A7DFD7, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 4;
  else
    v31 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 355, (DgnString *)&v64);
  if (v65)
    v36 = (void *)v64;
  else
    v36 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v24, &unk_209A7DFD7, v25, v25, v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v31;
  *a5 += v31;
  v37 = sizeObject((char *)this + 32);
  v38 = sizeObject((char *)this + 32);
  v39 = sizeObject((char *)this + 32);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 356, (DgnString *)&v64);
  if (v65)
    v44 = (void *)v64;
  else
    v44 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v24, &unk_209A7DFD7, v25, v25, v44, v37, v38, v39);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v37;
  *a5 += v38;
  *a6 += v39;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 357, (DgnString *)&v64);
  if (v65)
    v49 = (void *)v64;
  else
    v49 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v24, &unk_209A7DFD7, v25, v25, v49, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v64);
  ++*a4;
  ++*a5;
  v50 = (char *)this + 56;
  v51 = sizeObject<SubDirExtension>((uint64_t)this + 56, 0);
  v52 = sizeObject<SubDirExtension>((uint64_t)v50, 1);
  v64 = 0xFFFFFFFF00000000;
  sizeObject((uint64_t)&v64, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 359, (DgnString *)&v64);
  if (v65)
    v57 = (void *)v64;
  else
    v57 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v24, &unk_209A7DFD7, v25, v25, v57, v51, v52, 0);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v51;
  *a5 += v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 360, (DgnString *)&v64);
  if (v65)
    v62 = (void *)v64;
  else
    v62 = &unk_209A7DFD7;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v63, &unk_209A7DFD7, (35 - v63), (35 - v63), v62, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v64);
}

void sub_2099D8DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SubDirExtension>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v10 = 0xFFFFFFFF00000000;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 8 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t DFile::getCurrentSubDirComponents(DFile *this)
{
  return (uint64_t)this + 56;
}

void DFile::pushCurrentSubDirComponent(DFile *this, const SubDirExtension *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;

  v10 = *((_DWORD *)this + 16);
  if (v10 - 10 <= 0xFFFFFFF4)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 371, (uint64_t)"dfutil/dfile", 5, (uint64_t)"%d", a7, a8, 10);
    v10 = *((_DWORD *)this + 16);
  }
  if (v10 == *((_DWORD *)this + 17))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
    v10 = *((_DWORD *)this + 16);
  }
  *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v10) = *(_QWORD *)a2;
  ++*((_DWORD *)this + 16);
}

uint64_t DFile::popCurrentSubDirComponent(uint64_t this)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_DWORD *)(this + 64);
  v2 = (v1 - 1);
  if (!v1)
  {
    v3 = *(_QWORD **)(this + 56);
    v4 = v2;
    do
    {
      *v3++ = 0xFFFFFFFF00000000;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(this + 64) = v2;
  return this;
}

DgnString *DFile::makeSubFileName(uint64_t a1, char *a2, DgnString *this)
{
  uint64_t v6;
  unint64_t v7;

  DgnString::preAllocate((unint64_t)this, 96);
  if (*(_DWORD *)(a1 + 8))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      SubDirExtension::appendToString((DgnString *)(*(_QWORD *)a1 + v6), this);
      DgnString::operator+=(this, 47);
      ++v7;
      v6 += 8;
    }
    while (v7 < *(unsigned int *)(a1 + 8));
  }
  return DgnString::operator+=(this, a2);
}

uint64_t *DFile::openDFile(uint64_t a1, const FileSpec *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  RealDFile *v11;
  uint64_t v12;
  OsFile *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  OsFile *v19;
  int Bytes;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v27;
  char *v28;
  char *v29;
  ListDFile *v30;
  RealDFile *v31;
  char v33[32];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!FileSpec::isValid((char **)a1))
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 432, (uint64_t)"dfutil/dfile", 1, (uint64_t)"%s", v8, v9, (char)&unk_209A7DFD7);
  if ((_DWORD)a2 == 1)
  {
    v10 = MemChunkAlloc(0x1B8uLL, 0);
    v11 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(_QWORD *)a4 = v11;
    *(_BYTE *)(a4 + 8) = 1;
    v12 = 1;
LABEL_29:
    RealDFile::startUp((uint64_t)v11, (const FileSpec *)v12, a3, 1, 0, 0);
    return v10;
  }
  OsFile::openOsFile((const FileSpec *)a1, 0);
  if (!v13)
  {
    if (!(_DWORD)a2)
    {
      if (*(_DWORD *)(a1 + 8))
        v28 = *(char **)a1;
      else
        v28 = (char *)&unk_209A7DFD7;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 449, (uint64_t)"dfutil/dfile", 2, (uint64_t)"%.500s", v17, v18, (char)v28);
    }
    v10 = MemChunkAlloc(0x1B8uLL, 0);
    v11 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(_QWORD *)a4 = v11;
    *(_BYTE *)(a4 + 8) = (_DWORD)a2 != 0;
    v12 = (uint64_t)a2;
    goto LABEL_29;
  }
  v19 = v13;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  Bytes = OsFile::readBytes(v13, v33, 0x7Fu, v14, v15, v16, v17, v18);
  OsFile::~OsFile(v19);
  MemChunkFree(v21, 0);
  if (Bytes)
    v33[Bytes] = 0;
  if (*(_QWORD *)v33 == 0x46545845544E4744
    && *(_QWORD *)&v33[8] == 0x535245565F454C49
    && *(_QWORD *)&v33[11] == 0x4E4F49535245565FLL)
  {
    if ((_DWORD)a2)
    {
      if (*(_DWORD *)(a1 + 8))
        v29 = *(char **)a1;
      else
        v29 = (char *)&unk_209A7DFD7;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 476, (uint64_t)"dfutil/dfile", 4, (uint64_t)"%.500s", v22, v23, (char)v29);
    }
    v10 = MemChunkAlloc(0x98uLL, 0);
    ListDFile::ListDFile((ListDFile *)v10, (const FileSpec *)a1);
    *(_QWORD *)a4 = v30;
    *(_BYTE *)(a4 + 8) = 0;
    ListDFile::startUp(v30);
    goto LABEL_37;
  }
  if (*(_DWORD *)v33 == 1279870532 && *(_DWORD *)&v33[3] == 1981826380)
  {
    v10 = MemChunkAlloc(0x1B8uLL, 0);
    v31 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(_QWORD *)a4 = v31;
    *(_BYTE *)(a4 + 8) = (_DWORD)a2 != 0;
    RealDFile::startUp((uint64_t)v31, a2, a3, 1, 0, 0);
LABEL_37:
    (*(void (**)(uint64_t *))(*v10 + 72))(v10);
    return v10;
  }
  if (*(_DWORD *)(a1 + 8))
    v27 = *(char **)a1;
  else
    v27 = (char *)&unk_209A7DFD7;
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 495, (uint64_t)"dfutil/dfile", 3, (uint64_t)"%.500s", v22, v23, (char)v27);
  return 0;
}

unint64_t DFile::copyDFileState(DFile *this, const DFile *a2)
{
  return DgnArray<PitchInfo>::copyArraySlice((unint64_t)this + 56, (_QWORD *)a2 + 7, 0, *((_DWORD *)a2 + 16));
}

const char *DFile::getNameForSemanticType(DFile *this)
{
  if (this > 0xF)
    return "Internal Error";
  else
    return off_24C220708[(int)this];
}

_BYTE **DFile::cacheSubFileSizeInfo(_BYTE **this)
{
  _BYTE **v1;

  if (!*this[1])
  {
    v1 = this;
    this = (_BYTE **)(*((uint64_t (**)(_BYTE **))*this + 13))(this);
    *v1[1] = 1;
  }
  return this;
}

DFileProgressInfo *DFile::reportProgress(DFile *this, const char *a2, const char *a3)
{
  DFileProgressInfo *result;
  ProgressCallbackHandler *v5;

  result = (DFileProgressInfo *)*((_QWORD *)this + 1);
  if (result)
  {
    result = (DFileProgressInfo *)DFileProgressInfo::findSubFile(result, a2, a3);
    if ((_DWORD)result != -1)
    {
      v5 = result;
      result = (DFileProgressInfo *)*((_QWORD *)this + 1);
      if (!*(_BYTE *)(*((_QWORD *)result + 5) + v5))
        return (DFileProgressInfo *)DFileProgressInfo::recordFileAsReported((uint64_t)result, v5);
    }
  }
  return result;
}

unint64_t DFileProgressInfo::findSubFile(DFileProgressInfo *this, const char *a2, const char *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  DgnString *v8;

  if (!*((_DWORD *)this + 4))
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *((_QWORD *)this + 1) + v5;
    v8 = *(_DWORD *)(v7 + 8) ? *(DgnString **)v7 : (DgnString *)&unk_209A7DFD7;
    if (!DgnString::compareNoCase(v8, a2, a3))
      break;
    ++v6;
    v5 += 16;
    if (v6 >= *((unsigned int *)this + 4))
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t DFileProgressInfo::recordFileAsReported(uint64_t this, ProgressCallbackHandler *a2)
{
  if ((_DWORD)a2 != -1)
  {
    *(_BYTE *)(*(_QWORD *)(this + 40) + a2) = 1;
    *(_QWORD *)(this + 64) += *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * a2);
    ++*(_DWORD *)(this + 72);
    return ProgressCallbackHandler::addProgress(*(_QWORD *)(this + 80), a2);
  }
  return this;
}

void DFileProgressInfo::reset(DFileProgressInfo *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 10) = 0;
  v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((_QWORD *)this + 1) + v3));
      v3 -= 16;
    }
    while (v3 != -16);
  }
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
}

void DFileProgressInfo::DFileProgressInfo(DFileProgressInfo *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  DFileProgressInfo::reset(this);
}

DgnString *DFileProgressInfo::add(DFileProgressInfo *this, const DgnString *a2, uint64_t a3)
{
  unsigned int v6;
  DgnString *result;
  unsigned int v8;
  unsigned int v9;

  v6 = *((_DWORD *)this + 4);
  if (v6 == *((_DWORD *)this + 5))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, 1, 1);
    v6 = *((_DWORD *)this + 4);
  }
  result = DgnString::DgnString((DgnString *)(*((_QWORD *)this + 1) + 16 * v6), a2);
  ++*((_DWORD *)this + 4);
  v8 = *((_DWORD *)this + 8);
  if (v8 == *((_DWORD *)this + 9))
  {
    result = (DgnString *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 24, 1, 1);
    v8 = *((_DWORD *)this + 8);
  }
  *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v8) = a3;
  *((_DWORD *)this + 8) = v8 + 1;
  v9 = *((_DWORD *)this + 12);
  if (v9 == *((_DWORD *)this + 13))
  {
    result = (DgnString *)DgnPrimArray<char>::reallocElts((uint64_t)this + 40, 1, 1);
    v9 = *((_DWORD *)this + 12);
  }
  *(_BYTE *)(*((_QWORD *)this + 5) + v9) = 0;
  *((_DWORD *)this + 12) = v9 + 1;
  *((_QWORD *)this + 7) += a3;
  return result;
}

void DFileProgressInfo::resetReportedInfo(void **this)
{
  size_t v2;

  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
    bzero(this[5], v2);
  this[8] = 0;
  *((_DWORD *)this + 18) = 0;
}

uint64_t DFileProgressInfo::attachProgressHandler(DFileProgressInfo *this, ProgressCallbackHandler *a2, DFileProgressInfo *a3)
{
  *((_QWORD *)this + 10) = a2;
  return ProgressCallbackHandler::addDFileProgressInfoPtr((uint64_t)a2, this, a3);
}

uint64_t *VocMgr::startupVocMgr(uint64_t a1)
{
  uint64_t *result;

  result = MemChunkAlloc(8uLL, 0);
  *result = a1;
  VocMgr::smpVocMgr = (uint64_t)result;
  return result;
}

void VocMgr::printSize(VocMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 94, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 95, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 96, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_209A88803, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_2099D994C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t VocMgr::getVocOrThrow(VocMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)this + 8) <= a2 || (result = *(_QWORD *)(**(_QWORD **)this + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 102, (uint64_t)"voc/vocmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(**(_QWORD **)this + 8 * v10);
  }
  return result;
}

uint64_t *VocMgr::beginRuleStateRecursiveOperation(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned __int16 v3;

  v1 = *this;
  if (*(_DWORD *)(*this + 8) >= 2u)
  {
    v2 = this;
    v3 = 1;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v1 + 8 * v3))
      {
        MrecInitModule_sdpres_sdapi();
        this = (uint64_t *)MrecInitModule_sdpres_sdapi();
        v1 = *v2;
      }
      ++v3;
    }
    while (*(_DWORD *)(v1 + 8) > v3);
  }
  return this;
}

void VocMgr::endRuleStateRecursiveOperation(VocMgr *this)
{
  uint64_t v1;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) >= 2u)
  {
    v3 = 1;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)v1 + 8 * v3);
      if (v4)
      {
        RuleMgr::endRecursiveOperation(*(RuleMgr **)(v4 + 64));
        StateMgr::endRecursiveOperation(*(StateMgr **)(v4 + 56));
        v1 = *(_QWORD *)this;
      }
      ++v3;
    }
    while (*(_DWORD *)(v1 + 8) > v3);
  }
}

uint64_t TTagManager::getClosedTagSet(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;

  v8 = *(_QWORD *)(a2 + 24);
  result = (uint64_t)std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a3, (unint64_t *)&v8, &v8);
  for (i = *(_QWORD *)(a2 + 32); ; i = *(_QWORD *)(result + 32))
  {
    v8 = i;
    if (i == -1)
      break;
    std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a3, (unint64_t *)&v8, &v8);
    result = TTagManager::getTag(a1, v8);
  }
  return result;
}

uint64_t TBoolParam::get(TBoolParam *this)
{
  uint64_t ActiveConfigHandle;

  ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  return *((unsigned __int8 *)this + TParam::getValidConfig(this, ActiveConfigHandle) + 152);
}

void TFormatter::addCapBlocks(_QWORD *a1, TAllocator *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, unint64_t **a8, uint64_t *a9)
{
  unsigned int v12;
  unsigned int *v13;
  unsigned __int8 v14;
  int *WideNewLine;
  uint64_t v16;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  __int32 *v22;
  __int32 *v23;
  unint64_t v24;
  __int32 *v25;
  __int32 v26;
  unint64_t v27;
  uint64_t Tag;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  int v35;
  int v36;
  __int32 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int32 *v44;
  _BOOL4 v45;
  BOOL v46;
  __int32 v47;
  __int32 *v48;
  __int32 *v49;
  __int32 *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int32 *v66;
  __int32 *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  __int32 *v74;
  TLocaleInfo *v76;
  __int32 *v81;
  __int128 v82;
  _BYTE v83[785];
  char v84;
  __int32 *v85;
  __int128 v86;
  _BYTE v87[785];
  char v88;
  __int32 *v89;
  __int128 v90;
  _BYTE v91[1024];
  char v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  int v96[3];

  v94 = 0;
  v95 = 0;
  v93 = (uint64_t *)&v94;
  v89 = (__int32 *)v91;
  v90 = xmmword_209A57DD0;
  v92 = 1;
  v85 = (__int32 *)v87;
  v86 = xmmword_209A57DD0;
  v88 = 1;
  v12 = *a5;
  if (!*a5)
  {
    v21 = 0;
LABEL_27:
    v22 = v85;
    v85[v21] = 0;
    goto LABEL_28;
  }
  v13 = a5;
  do
  {
    if ((v14 & 1) == 0
    {
      v76 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v76);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v76;
    }
    if (v12 == 13 || v12 == 10)
    {
      if (*v13 == 13 && v13[1] == 10)
        ++v13;
      WideNewLine = (int *)TStringParam::get((TStringParam *)(a1[6] + 144));
      if (!*WideNewLine)
        WideNewLine = (int *)getWideNewLine();
      v16 = 0;
      while (WideNewLine[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), WideNewLine, v16 - 1);
      v18 = 0;
      while (WideNewLine[v18++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), WideNewLine, v18 - 1);
    }
    else if (*v13 == 223)
    {
      LODWORD(v81) = 223;
      TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), (int *)&v81, 1uLL);
      TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), (int *)"S", 2uLL);
    }
    else
    {
      LODWORD(v81) = *v13;
      TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), (int *)&v81, 1uLL);
      LODWORD(v81) = TLocaleInfo::toUpper(a1[4] + 240, *v13);
      TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), (int *)&v81, 1uLL);
    }
    v20 = v13[1];
    ++v13;
    v12 = v20;
  }
  while (v20);
  v21 = *((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1) < (unint64_t)v86)
    goto LABEL_27;
  if (v88)
  {
    LODWORD(v81) = 0;
    TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), (int *)&v81, 1uLL);
    v22 = v85;
    --*((_QWORD *)&v86 + 1);
  }
  else
  {
    v22 = v85;
    if ((_QWORD)v86)
      v85[(_QWORD)v86 - 1] = 0;
  }
LABEL_28:
  if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
  {
    if (v92)
    {
      LODWORD(v81) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), (int *)&v81, 1uLL);
      v23 = v89;
      --*((_QWORD *)&v90 + 1);
    }
    else
    {
      v23 = v89;
      if ((_QWORD)v90)
        v89[(_QWORD)v90 - 1] = 0;
    }
  }
  else
  {
    v23 = v89;
    v89[*((_QWORD *)&v90 + 1)] = 0;
  }
  if (!wcscmp(v22, v23))
  {
    Tag = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 144));
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
    v94 = 0;
    v95 = 0;
    v93 = (uint64_t *)&v94;
    v29 = *a8;
    v30 = a8[1];
    while (v29 != v30)
    {
      std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v93, &v94, v29, (uint64_t *)v29);
      ++v29;
    }
    TTagManager::getClosedTagSet(a1[17], Tag, &v93);
    v31 = operator new();
    if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
    {
      if (v92)
      {
        LODWORD(v81) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), (int *)&v81, 1uLL);
        v32 = v89;
        --*((_QWORD *)&v90 + 1);
      }
      else
      {
        v32 = v89;
        if ((_QWORD)v90)
          v89[(_QWORD)v90 - 1] = 0;
      }
    }
    else
    {
      v32 = v89;
      v89[*((_QWORD *)&v90 + 1)] = 0;
    }
    TBlock::TBlock(v31, v32, 0, 0);
    *(_QWORD *)(v31 + 8) = a6;
    *(_QWORD *)(v31 + 16) = a7;
    TFsa::newTrans(a2, a3, a4, v31);
  }
  else
  {
    v81 = (__int32 *)v83;
    v82 = xmmword_209A57DD0;
    v84 = 1;
    TBuffer<wchar_t>::operator=((uint64_t)&v81, (uint64_t)&v89);
    if (*((_QWORD *)&v82 + 1))
    {
      v24 = 0;
      v25 = v81;
      do
      {
        v26 = TLocaleInfo::toLower(a1[4] + 240, v25[v24]);
        v25 = v81;
        v81[v24++] = v26;
        v27 = *((_QWORD *)&v82 + 1);
      }
      while (v24 < *((_QWORD *)&v82 + 1));
    }
    else
    {
      v27 = 0;
    }
    if (v27 >= (unint64_t)v82)
    {
      if (v84)
      {
        v96[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v81, v27, v96, 1uLL);
        v33 = v81;
        --*((_QWORD *)&v82 + 1);
      }
      else
      {
        v33 = v81;
        if ((_QWORD)v82)
          v81[(_QWORD)v82 - 1] = 0;
      }
    }
    else
    {
      v33 = v81;
      v81[v27] = 0;
    }
    if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
    {
      if (v92)
      {
        v96[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v96, 1uLL);
        v34 = v89;
        --*((_QWORD *)&v90 + 1);
      }
      else
      {
        v34 = v89;
        if ((_QWORD)v90)
          v89[(_QWORD)v90 - 1] = 0;
      }
    }
    else
    {
      v34 = v89;
      v89[*((_QWORD *)&v90 + 1)] = 0;
    }
    v35 = wcscmp(v33, v34);
    v36 = TLocaleInfo::toUpper(a1[4] + 240, *v89);
    v37 = *v89;
    v38 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 136));
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
    v94 = 0;
    v95 = 0;
    v93 = (uint64_t *)&v94;
    v40 = *a8;
    v39 = a8[1];
    while (v40 != v39)
    {
      std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v93, &v94, v40, (uint64_t *)v40);
      ++v40;
    }
    TTagManager::getClosedTagSet(a1[17], v38, &v93);
    if (!v35)
    {
      v41 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 120));
      TTagManager::getClosedTagSet(a1[17], v41, &v93);
    }
    if (v36 == v37)
    {
      v42 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 128));
      TTagManager::getClosedTagSet(a1[17], v42, &v93);
    }
    v43 = operator new();
    if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
    {
      if (v92)
      {
        v96[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v96, 1uLL);
        v44 = v89;
        --*((_QWORD *)&v90 + 1);
      }
      else
      {
        v44 = v89;
        if ((_QWORD)v90)
          v89[(_QWORD)v90 - 1] = 0;
      }
    }
    else
    {
      v44 = v89;
      v89[*((_QWORD *)&v90 + 1)] = 0;
    }
    TBlock::TBlock(v43, v44, 0, 0);
    *(_QWORD *)(v43 + 8) = a6;
    *(_QWORD *)(v43 + 16) = a7;
    TFsa::newTrans(a2, a3, a4, v43);
    if (v36 == v37)
    {
      v45 = 0;
      v46 = 1;
    }
    else
    {
      v47 = TLocaleInfo::toUpper(a1[4] + 240, *v89);
      v48 = v89;
      *v89 = v47;
      if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
      {
        if (v92)
        {
          v96[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v96, 1uLL);
          v48 = v89;
          --*((_QWORD *)&v90 + 1);
        }
        else if ((_QWORD)v90)
        {
          v48[(_QWORD)v90 - 1] = 0;
        }
      }
      else
      {
        v48[*((_QWORD *)&v90 + 1)] = 0;
      }
      if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
      {
        if (v88)
        {
          v96[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v96, 1uLL);
          v49 = v85;
          --*((_QWORD *)&v86 + 1);
        }
        else
        {
          v49 = v85;
          if ((_QWORD)v86)
            v85[(_QWORD)v86 - 1] = 0;
        }
      }
      else
      {
        v49 = v85;
        v85[*((_QWORD *)&v86 + 1)] = 0;
      }
      v46 = wcscmp(v48, v49) != 0;
      v45 = v46;
    }
    if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
    {
      if (v88)
      {
        v96[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v96, 1uLL);
        v50 = v85;
        --*((_QWORD *)&v86 + 1);
      }
      else
      {
        v50 = v85;
        if ((_QWORD)v86)
          v85[(_QWORD)v86 - 1] = 0;
      }
    }
    else
    {
      v50 = v85;
      v85[*((_QWORD *)&v86 + 1)] = 0;
    }
    v51 = *a9;
    if (a9[1] == *a9)
    {
LABEL_102:
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
      v94 = 0;
      v95 = 0;
      v93 = (uint64_t *)&v94;
      v53 = *a8;
      v54 = a8[1];
      while (v53 != v54)
      {
        std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v93, &v94, v53, (uint64_t *)v53);
        ++v53;
      }
      v55 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 112));
      TTagManager::getClosedTagSet(a1[17], v55, &v93);
      if (!v46)
      {
        v56 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 128));
        TTagManager::getClosedTagSet(a1[17], v56, &v93);
      }
      v57 = operator new();
      if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
      {
        if (v88)
        {
          v96[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v96, 1uLL);
          v58 = v85;
          --*((_QWORD *)&v86 + 1);
        }
        else
        {
          v58 = v85;
          if ((_QWORD)v86)
            v85[(_QWORD)v86 - 1] = 0;
        }
      }
      else
      {
        v58 = v85;
        v85[*((_QWORD *)&v86 + 1)] = 0;
      }
      TBlock::TBlock(v57, v58, 0, 0);
      *(_QWORD *)(v57 + 8) = a6;
      *(_QWORD *)(v57 + 16) = a7;
      TFsa::newTrans(a2, a3, a4, v57);
    }
    else
    {
      v52 = 0;
      while (wcscmp(v50, *(const __int32 **)(v51 + 8 * v52)))
      {
        ++v52;
        v51 = *a9;
        if (v52 >= (a9[1] - *a9) >> 3)
          goto LABEL_102;
      }
    }
    if (v35)
    {
      if (*((_QWORD *)&v82 + 1) >= (unint64_t)v82)
      {
        if (v84)
        {
          v96[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v96, 1uLL);
          v59 = v81;
          --*((_QWORD *)&v82 + 1);
        }
        else
        {
          v59 = v81;
          if ((_QWORD)v82)
            v81[(_QWORD)v82 - 1] = 0;
        }
      }
      else
      {
        v59 = v81;
        v81[*((_QWORD *)&v82 + 1)] = 0;
      }
      v60 = *a9;
      if (a9[1] == *a9)
      {
LABEL_125:
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
        v94 = 0;
        v95 = 0;
        v93 = (uint64_t *)&v94;
        v62 = *a8;
        v63 = a8[1];
        while (v62 != v63)
        {
          std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v93, &v94, v62, (uint64_t *)v62);
          ++v62;
        }
        v64 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 120));
        TTagManager::getClosedTagSet(a1[17], v64, &v93);
        v65 = operator new();
        if (*((_QWORD *)&v82 + 1) >= (unint64_t)v82)
        {
          if (v84)
          {
            v96[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v96, 1uLL);
            v66 = v81;
            --*((_QWORD *)&v82 + 1);
          }
          else
          {
            v66 = v81;
            if ((_QWORD)v82)
              v81[(_QWORD)v82 - 1] = 0;
          }
        }
        else
        {
          v66 = v81;
          v81[*((_QWORD *)&v82 + 1)] = 0;
        }
        TBlock::TBlock(v65, v66, 0, 0);
        *(_QWORD *)(v65 + 8) = a6;
        *(_QWORD *)(v65 + 16) = a7;
        TFsa::newTrans(a2, a3, a4, v65);
      }
      else
      {
        v61 = 0;
        while (wcscmp(v59, *(const __int32 **)(v60 + 8 * v61)))
        {
          ++v61;
          v60 = *a9;
          if (v61 >= (a9[1] - *a9) >> 3)
            goto LABEL_125;
        }
      }
    }
    if (v45)
    {
      if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
      {
        if (v92)
        {
          v96[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v96, 1uLL);
          v67 = v89;
          --*((_QWORD *)&v90 + 1);
        }
        else
        {
          v67 = v89;
          if ((_QWORD)v90)
            v89[(_QWORD)v90 - 1] = 0;
        }
      }
      else
      {
        v67 = v89;
        v89[*((_QWORD *)&v90 + 1)] = 0;
      }
      v68 = *a9;
      if (a9[1] == *a9)
      {
LABEL_146:
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
        v94 = 0;
        v95 = 0;
        v93 = (uint64_t *)&v94;
        v70 = *a8;
        v71 = a8[1];
        while (v70 != v71)
        {
          std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v93, &v94, v70, (uint64_t *)v70);
          ++v70;
        }
        v72 = TTagManager::getTag(a1[17], *(_QWORD *)(a1[17] + 128));
        TTagManager::getClosedTagSet(a1[17], v72, &v93);
        v73 = operator new();
        if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
        {
          if (v92)
          {
            v96[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v96, 1uLL);
            v74 = v89;
            --*((_QWORD *)&v90 + 1);
          }
          else
          {
            v74 = v89;
            if ((_QWORD)v90)
              v89[(_QWORD)v90 - 1] = 0;
          }
        }
        else
        {
          v74 = v89;
          v89[*((_QWORD *)&v90 + 1)] = 0;
        }
        TBlock::TBlock(v73, v74, 0, 0);
        *(_QWORD *)(v73 + 8) = a6;
        *(_QWORD *)(v73 + 16) = a7;
        TFsa::newTrans(a2, a3, a4, v73);
      }
      else
      {
        v69 = 0;
        while (wcscmp(v67, *(const __int32 **)(v68 + 8 * v69)))
        {
          ++v69;
          v68 = *a9;
          if (v69 >= (a9[1] - *a9) >> 3)
            goto LABEL_146;
        }
      }
    }
    if (v84)
    {
      if (v81 != (__int32 *)v83 && v81 != 0)
        MEMORY[0x20BD149A8]();
    }
  }
  if (v88 && v85 != (__int32 *)v87 && v85)
    MEMORY[0x20BD149A8]();
  if (v92 && v89 != (__int32 *)v91 && v89)
    MEMORY[0x20BD149A8]();
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v93, v94);
}

void sub_2099DA880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  unint64_t v18;

  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x890]))
  {
    if (STACK[0x478] != a14 && STACK[0x478] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0xCB0]))
  {
    v18 = STACK[0x898];
    if (STACK[0x898] != a15)
    {
      if (v18)
        MEMORY[0x20BD149A8](v18, 0x1000C4052888210);
    }
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v15 - 120, *(_QWORD **)(v15 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFormatter::splitGrammarResult(uint64_t a1, __int32 *a2, std::vector<std::wstring> *this, uint64_t a4, char a5)
{
  uint64_t v5;
  const __int32 *v8;
  const __int32 *v9;
  const __int32 *v10;
  int *v11;
  int v12;
  __int32 *v13;
  __int32 *v14;
  std::wstring::value_type *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  __int32 *v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  std::wstring::value_type *v24;
  int *v25;
  __int32 *v26;
  __int32 *v27;
  __int32 *v28;
  uint64_t v29;
  __int32 *v30;
  __int32 *v31;
  __int32 *v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  __int32 *v40;
  __int32 *v41;
  uint64_t v42;
  std::vector<std::wstring> *v43;
  const __int32 *v44;
  const __int32 *v45;
  const __int32 *v46;
  __int32 *v47;
  std::vector<std::wstring> *v48;
  uint64_t Tag;
  std::vector<std::wstring> *v50;
  std::wstring *v51;
  std::vector<std::wstring>::pointer v52;
  __int128 v53;
  __int32 *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::wstring *v59;
  std::wstring *v60;
  __int128 v61;
  std::wstring *v62;
  int v63;
  std::wstring *v64;
  std::vector<std::wstring>::pointer v65;
  __int128 v66;
  __int32 *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::wstring *v72;
  std::wstring *v73;
  __int128 v74;
  std::wstring *v75;
  int v76;
  std::wstring *value;
  std::vector<std::wstring>::pointer end;
  __int128 v79;
  __int32 *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  std::wstring *v85;
  std::wstring *v86;
  __int128 v87;
  std::wstring *v88;
  int v89;
  std::wstring *v90;
  std::vector<std::wstring>::pointer v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  std::wstring *v97;
  std::wstring *v98;
  __int128 v99;
  std::wstring *v100;
  int v101;
  char v102;
  __int32 *v103;
  int *v104;
  uint64_t v105;
  __int32 *v106;
  __int32 *v107;
  __int32 *v108;
  int v109;
  int v110;
  uint64_t v111;
  __int32 *v112;
  std::wstring *v113;
  std::vector<std::wstring>::pointer v114;
  __int128 v115;
  __int32 *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::wstring *v121;
  std::wstring *v122;
  __int128 v123;
  std::wstring *v124;
  int v125;
  BOOL v126;
  __int32 *v127;
  const __int32 *v128;
  int *v129;
  __int32 *v130;
  __int32 *v131;
  __int32 *v132;
  __int32 *v133;
  __int32 *v134;
  uint64_t v135;
  __int32 *v136;
  __int32 *v137;
  __int32 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const __int32 *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  __int32 v150;
  __int32 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *p_v;
  std::wstring *v159;
  std::vector<std::wstring>::pointer v160;
  __int128 v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  std::wstring *v166;
  std::wstring *v167;
  __int128 v168;
  std::wstring *v169;
  int v170;
  int v171;
  int *v172;
  std::wstring *v173;
  std::vector<std::wstring>::pointer v174;
  __int128 v175;
  std::wstring *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  std::wstring *v181;
  std::wstring *v182;
  __int128 v183;
  int v184;
  unint64_t v185;
  int *v186;
  unint64_t v187;
  std::wstring *v188;
  uint64_t v189;
  uint64_t v191;
  __int32 *v193;
  std::__compressed_pair<std::wstring *> *p_end_cap;
  uint64_t v195;
  __int32 *v196;
  std::__compressed_pair<std::wstring *> *v198;
  void *__p[2];
  std::wstring::size_type v200;
  _BYTE *v201;
  __int128 v202;
  _BYTE v203[785];
  char v204;
  std::wstring::value_type *__s;
  __int128 v206;
  _BYTE v207[849];
  char v208;
  uint64_t *v209;
  _QWORD *v210;
  uint64_t v211;
  std::__split_buffer<std::wstring> __v;
  unsigned __int8 *v213;
  __int128 v214;
  _BYTE v215[256];
  char v216;
  uint64_t v217;

  v5 = a4;
  v217 = *MEMORY[0x24BDAC8D0];
  if ((a5 & 1) == 0)
    std::vector<TItnRule *>::resize(a4, 0);
  std::vector<std::wstring>::resize(this, 0);
  v211 = 0;
  v210 = 0;
  v209 = (uint64_t *)&v210;
  v213 = v215;
  v214 = xmmword_209A57DD0;
  v216 = 1;
  __s = (std::wstring::value_type *)v207;
  v206 = xmmword_209A57DD0;
  v208 = 1;
  v201 = v203;
  v202 = xmmword_209A57DD0;
  v204 = 1;
  v195 = v5;
  if (*a2)
  {
    v8 = dword_209A7E014;
    p_end_cap = &this->__end_cap_;
    v9 = (const __int32 *)&unk_209A7E02C;
    v10 = dword_209A7E034;
    v11 = a2;
    do
    {
      if (!wcsncmp(v11, v8, 5uLL))
      {
        v16 = v11 + 5;
        if (v11[5])
        {
          v17 = 1;
          while (1)
          {
            v18 = wcsstr(v16, v9);
            v19 = v18;
            if (!v18)
              break;
            v20 = wcsncmp(v18, v8, 5uLL);
            v21 = wcsncmp(v19, v10, 6uLL);
            if (v20)
              v22 = v17;
            else
              v22 = v17 + 1;
            v17 = v22 - (v21 == 0);
            v16 = v19 + 1;
            if (v19[1])
              v23 = v17 == 0;
            else
              v23 = 1;
            if (v23)
            {
              if (v17)
                goto LABEL_237;
              v14 = v19 + 6;
              TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v19 + 6 - v11);
              v5 = v195;
              if (!*((_QWORD *)&v206 + 1))
                goto LABEL_147;
              if (*((_QWORD *)&v214 + 1) && v213[*((_QWORD *)&v214 + 1) - 1] == 79)
              {
                if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
                {
                  if (v208)
                  {
                    LODWORD(__v.__first_) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                    v24 = __s;
                    --*((_QWORD *)&v206 + 1);
                  }
                  else
                  {
                    v24 = __s;
                    if ((_QWORD)v206)
                      __s[(_QWORD)v206 - 1] = 0;
                  }
                }
                else
                {
                  v24 = __s;
                  __s[*((_QWORD *)&v206 + 1)] = 0;
                }
                std::wstring::append(this->__end_ - 1, v24);
                goto LABEL_147;
              }
              if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
              {
                if (v208)
                {
                  LODWORD(__v.__first_) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                  v41 = __s;
                  --*((_QWORD *)&v206 + 1);
                }
                else
                {
                  v41 = __s;
                  if ((_QWORD)v206)
                    __s[(_QWORD)v206 - 1] = 0;
                }
              }
              else
              {
                v41 = __s;
                __s[*((_QWORD *)&v206 + 1)] = 0;
              }
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v41);
              end = this->__end_;
              value = this->__end_cap_.__value_;
              if (end >= value)
              {
                v80 = a2;
                v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
                v82 = v81 + 1;
                if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
                if (2 * v83 > v82)
                  v82 = 2 * v83;
                if (v83 >= 0x555555555555555)
                  v84 = 0xAAAAAAAAAAAAAAALL;
                else
                  v84 = v82;
                __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
                if (v84)
                  v85 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v84);
                else
                  v85 = 0;
                v86 = v85 + v81;
                __v.__first_ = v85;
                __v.__begin_ = v86;
                __v.__end_cap_.__value_ = &v85[v84];
                v87 = *(_OWORD *)__p;
                v86->__r_.__value_.__r.__words[2] = v200;
                *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
                __p[1] = 0;
                v200 = 0;
                __p[0] = 0;
                __v.__end_ = v86 + 1;
                std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
                v88 = this->__end_;
                std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
                v89 = SHIBYTE(v200);
                this->__end_ = v88;
                a2 = v80;
                if (v89 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v79 = *(_OWORD *)__p;
                end->__r_.__value_.__r.__words[2] = v200;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v79;
                this->__end_ = end + 1;
              }
              goto LABEL_123;
            }
          }
        }
        goto LABEL_237;
      }
      if (!wcsncmp(v11, dword_209A7E050, 7uLL))
      {
        v25 = v11 + 7;
        v26 = wcsstr(v11 + 7, (const __int32 *)" ");
        if (!v26)
          goto LABEL_237;
        TBuffer<wchar_t>::assign((uint64_t)&v201, dword_209A7E070);
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v25, v26 - v25);
        v27 = v26 + 1;
        v28 = wcsstr(v27, (const __int32 *)&unk_209A7E088);
        if (!v28)
          goto LABEL_237;
        LODWORD(__v.__first_) = 61;
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v27, v28 - v27);
        v29 = *(_QWORD *)(a1 + 136);
        if (*((_QWORD *)&v202 + 1) >= (unint64_t)v202)
        {
          if (v204)
          {
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
            --*((_QWORD *)&v202 + 1);
          }
          else if ((_QWORD)v202)
          {
            *(_DWORD *)&v201[4 * v202 - 4] = 0;
          }
        }
        else
        {
          *(_DWORD *)&v201[4 * *((_QWORD *)&v202 + 1)] = 0;
        }
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        if (v42 == -1)
          goto LABEL_237;
        v43 = this;
        v44 = v9;
        v45 = v8;
        v46 = v10;
        v47 = a2;
        v48 = v43;
        Tag = TTagManager::getTag(*(_QWORD *)(a1 + 136), v42);
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
        v211 = 0;
        v209 = (uint64_t *)&v210;
        v210 = 0;
        TTagManager::getClosedTagSet(*(_QWORD *)(a1 + 136), Tag, &v209);
        std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v5, *(char **)(v5 + 8), v209, &v210);
        v14 = v28 + 1;
        v50 = v48;
        a2 = v47;
        v10 = v46;
        v8 = v45;
        v9 = v44;
        this = v50;
      }
      else
      {
        if (!wcsncmp(v11, dword_209A7E090, 7uLL))
        {
          v30 = wcsstr(v11 + 7, (const __int32 *)&unk_209A7E088);
          if (!v30)
            goto LABEL_237;
          v31 = wcsstr(v11 + 7, v9);
          if (v31 && v31 < v30)
          {
            loggableUnicode((unsigned int *)a2, &__v);
            if (SHIBYTE(__v.__end_) >= 0)
              p_v = &__v;
            else
              p_v = __v.__first_;
            tknPrintf("Error: couldn't parse $Token() with embedded tags (%lld): '%s'. Ignored.\n", v152, v153, v154, v155, v11 - a2, p_v);
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            goto LABEL_237;
          }
          v14 = v30 + 1;
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v30 + 1 - v11);
          if (*((_QWORD *)&v206 + 1))
          {
            if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                v32 = __s;
                --*((_QWORD *)&v206 + 1);
              }
              else
              {
                v32 = __s;
                if ((_QWORD)v206)
                  __s[(_QWORD)v206 - 1] = 0;
              }
            }
            else
            {
              v32 = __s;
              __s[*((_QWORD *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v32);
            v65 = this->__end_;
            v64 = this->__end_cap_.__value_;
            if (v65 >= v64)
            {
              v67 = a2;
              v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)this->__begin_) >> 3);
              v69 = v68 + 1;
              if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)this->__begin_) >> 3);
              if (2 * v70 > v69)
                v69 = 2 * v70;
              if (v70 >= 0x555555555555555)
                v71 = 0xAAAAAAAAAAAAAAALL;
              else
                v71 = v69;
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
              if (v71)
                v72 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v71);
              else
                v72 = 0;
              v73 = v72 + v68;
              __v.__first_ = v72;
              __v.__begin_ = v73;
              __v.__end_cap_.__value_ = &v72[v71];
              v74 = *(_OWORD *)__p;
              v73->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
              __p[1] = 0;
              v200 = 0;
              __p[0] = 0;
              __v.__end_ = v73 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              v75 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v76 = SHIBYTE(v200);
              this->__end_ = v75;
              a2 = v67;
              if (v76 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v66 = *(_OWORD *)__p;
              v65->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
              this->__end_ = v65 + 1;
            }
            LOBYTE(__v.__first_) = 84;
            TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
          }
          goto LABEL_147;
        }
        v12 = wcsncmp(v11, v9, 1uLL);
        v13 = v11 + 1;
        if (v12)
        {
          v14 = wcsstr(v13, v9);
          if (!v14)
            v14 = &v11[wcslen(v11)];
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v14 - v11);
          if (*((_QWORD *)&v214 + 1) && v213[*((_QWORD *)&v214 + 1) - 1] == 79)
          {
            if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                v15 = __s;
                --*((_QWORD *)&v206 + 1);
              }
              else
              {
                v15 = __s;
                if ((_QWORD)v206)
                  __s[(_QWORD)v206 - 1] = 0;
              }
            }
            else
            {
              v15 = __s;
              __s[*((_QWORD *)&v206 + 1)] = 0;
            }
            std::wstring::append(this->__end_ - 1, v15);
          }
          else
          {
            if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                v33 = __s;
                --*((_QWORD *)&v206 + 1);
              }
              else
              {
                v33 = __s;
                if ((_QWORD)v206)
                  __s[(_QWORD)v206 - 1] = 0;
              }
            }
            else
            {
              v33 = __s;
              __s[*((_QWORD *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v33);
            v52 = this->__end_;
            v51 = this->__end_cap_.__value_;
            if (v52 >= v51)
            {
              v54 = a2;
              v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)this->__begin_) >> 3);
              v56 = v55 + 1;
              if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)this->__begin_) >> 3);
              if (2 * v57 > v56)
                v56 = 2 * v57;
              if (v57 >= 0x555555555555555)
                v58 = 0xAAAAAAAAAAAAAAALL;
              else
                v58 = v56;
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
              if (v58)
                v59 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v58);
              else
                v59 = 0;
              v60 = v59 + v55;
              __v.__first_ = v59;
              __v.__begin_ = v60;
              __v.__end_cap_.__value_ = &v59[v58];
              v61 = *(_OWORD *)__p;
              v60->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
              __p[1] = 0;
              v200 = 0;
              __p[0] = 0;
              __v.__end_ = v60 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              v62 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v63 = SHIBYTE(v200);
              this->__end_ = v62;
              a2 = v54;
              if (v63 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v53 = *(_OWORD *)__p;
              v52->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
              this->__end_ = v52 + 1;
            }
LABEL_123:
            LOBYTE(__v.__first_) = 79;
            TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
          }
LABEL_147:
          TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
          goto LABEL_148;
        }
        if (!*v13)
          goto LABEL_237;
        v193 = a2;
        v34 = 0;
        v35 = 1;
        do
        {
          v36 = wcsncmp(&v11[v34 + 1], v9, 1uLL);
          v37 = wcsncmp(&v11[v34 + 1], (const __int32 *)&unk_209A7E088, 1uLL);
          if (v36)
            v38 = v35;
          else
            v38 = v35 + 1;
          v35 = v38 - (v37 == 0);
          v39 = v11[v34 + 2];
          ++v34;
        }
        while (v39 && v35);
        if (v35)
          goto LABEL_237;
        TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, (v34 * 4 + 4) >> 2);
        a2 = v193;
        if (*((_QWORD *)&v206 + 1))
        {
          if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
          {
            if (v208)
            {
              LODWORD(__v.__first_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
              v40 = __s;
              --*((_QWORD *)&v206 + 1);
            }
            else
            {
              v40 = __s;
              if ((_QWORD)v206)
                __s[(_QWORD)v206 - 1] = 0;
            }
          }
          else
          {
            v40 = __s;
            __s[*((_QWORD *)&v206 + 1)] = 0;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v40);
          v91 = this->__end_;
          v90 = this->__end_cap_.__value_;
          if (v91 >= v90)
          {
            v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)this->__begin_) >> 3);
            v94 = v93 + 1;
            if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)this->__begin_) >> 3);
            if (2 * v95 > v94)
              v94 = 2 * v95;
            if (v95 >= 0x555555555555555)
              v96 = 0xAAAAAAAAAAAAAAALL;
            else
              v96 = v94;
            __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
            if (v96)
              v97 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v96);
            else
              v97 = 0;
            v98 = v97 + v93;
            __v.__first_ = v97;
            __v.__begin_ = v98;
            __v.__end_cap_.__value_ = &v97[v96];
            v99 = *(_OWORD *)__p;
            v98->__r_.__value_.__r.__words[2] = v200;
            *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
            __p[1] = 0;
            v200 = 0;
            __p[0] = 0;
            __v.__end_ = v98 + 1;
            std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
            v100 = this->__end_;
            std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
            v101 = SHIBYTE(v200);
            this->__end_ = v100;
            a2 = v193;
            if (v101 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v92 = *(_OWORD *)__p;
            v91->__r_.__value_.__r.__words[2] = v200;
            *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
            this->__end_ = v91 + 1;
          }
          LOBYTE(__v.__first_) = 78;
          TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
        }
        TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
        v14 = &v11[v34 + 1];
        v5 = v195;
      }
LABEL_148:
      v11 = v14;
    }
    while (*v14);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3) <= 1)
  {
    v103 = wcsstr(a2, dword_209A7E014);
    if (v103)
    {
      std::vector<std::wstring>::resize(this, 0);
      v104 = v103 + 5;
      if (v103[5])
      {
        v196 = v103;
        v198 = &this->__end_cap_;
        v105 = 1;
        v106 = v103 + 5;
        while (1)
        {
          v107 = wcsstr(v106, (const __int32 *)&unk_209A7E02C);
          v108 = v107;
          if (!v107)
            break;
          v109 = wcsncmp(v107, dword_209A7E014, 5uLL);
          v110 = wcsncmp(v108, dword_209A7E034, 6uLL);
          if (v109)
            v111 = v105;
          else
            v111 = v105 + 1;
          v105 = v111 - (v110 == 0);
          if (v105 == 1 && !wcsncmp(v108, dword_209A7E0B0, 5uLL))
          {
            TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
            TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v104, v108 - v104);
            if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                v112 = __s;
                --*((_QWORD *)&v206 + 1);
              }
              else
              {
                v112 = __s;
                if ((_QWORD)v206)
                  __s[(_QWORD)v206 - 1] = 0;
              }
            }
            else
            {
              v112 = __s;
              __s[*((_QWORD *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v112);
            v114 = this->__end_;
            v113 = this->__end_cap_.__value_;
            if (v114 >= v113)
            {
              v116 = a2;
              v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)this->__begin_) >> 3);
              v118 = v117 + 1;
              if (v117 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v119 = 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)this->__begin_) >> 3);
              if (2 * v119 > v118)
                v118 = 2 * v119;
              if (v119 >= 0x555555555555555)
                v120 = 0xAAAAAAAAAAAAAAALL;
              else
                v120 = v118;
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v120)
                v121 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v198, v120);
              else
                v121 = 0;
              v122 = v121 + v117;
              __v.__first_ = v121;
              __v.__begin_ = v122;
              __v.__end_cap_.__value_ = &v121[v120];
              v123 = *(_OWORD *)__p;
              v122->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
              __p[1] = 0;
              v200 = 0;
              __p[0] = 0;
              __v.__end_ = v122 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              v124 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v125 = SHIBYTE(v200);
              this->__end_ = v124;
              a2 = v116;
              if (v125 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v115 = *(_OWORD *)__p;
              v114->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
              this->__end_ = v114 + 1;
            }
            v104 = v108 + 5;
          }
          v106 = v108 + 1;
          if (v105)
            v126 = v108[1] == 0;
          else
            v126 = 1;
          if (v126)
          {
            if (v105)
              goto LABEL_237;
            TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
            TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v104, v108 - v104);
            if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                v127 = __s;
                --*((_QWORD *)&v206 + 1);
              }
              else
              {
                v127 = __s;
                if ((_QWORD)v206)
                  __s[(_QWORD)v206 - 1] = 0;
              }
            }
            else
            {
              v127 = __s;
              __s[*((_QWORD *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v127);
            v172 = a2;
            v174 = this->__end_;
            v173 = this->__end_cap_.__value_;
            if (v174 >= v173)
            {
              v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v174 - (char *)this->__begin_) >> 3);
              v178 = v177 + 1;
              if (v177 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v179 = 0xAAAAAAAAAAAAAAABLL * (((char *)v173 - (char *)this->__begin_) >> 3);
              if (2 * v179 > v178)
                v178 = 2 * v179;
              if (v179 >= 0x555555555555555)
                v180 = 0xAAAAAAAAAAAAAAALL;
              else
                v180 = v178;
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v180)
                v181 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v198, v180);
              else
                v181 = 0;
              v182 = v181 + v177;
              __v.__first_ = v181;
              __v.__begin_ = v182;
              __v.__end_cap_.__value_ = &v181[v180];
              v183 = *(_OWORD *)__p;
              v182->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
              __p[1] = 0;
              v200 = 0;
              __p[0] = 0;
              __v.__end_ = v182 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              v176 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v184 = SHIBYTE(v200);
              this->__end_ = v176;
              if (v184 < 0)
              {
                operator delete(__p[0]);
                v176 = this->__end_;
              }
            }
            else
            {
              v175 = *(_OWORD *)__p;
              v174->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v174->__r_.__value_.__l.__data_ = v175;
              v176 = v174 + 1;
              this->__end_ = v174 + 1;
            }
            if (v176 == this->__begin_)
            {
              v102 = 65;
            }
            else
            {
              v185 = 0;
              v186 = v172;
              v187 = v196 - v172;
              v102 = 65;
              do
              {
                TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
                TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v186, v187);
                v188 = &this->__begin_[v185];
                if (SHIBYTE(v188->__r_.__value_.__r.__words[2]) < 0)
                  v188 = (std::wstring *)v188->__r_.__value_.__r.__words[0];
                v189 = 0;
                while (v188->__r_.__value_.__s.__data_[v189++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)v188, v189 - 1);
                v191 = 6;
                while (v108[v191++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v108 + 6, v191 - 7);
                if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
                {
                  if (v208)
                  {
                    LODWORD(__v.__first_) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                    --*((_QWORD *)&v206 + 1);
                  }
                  else if ((_QWORD)v206)
                  {
                    __s[(_QWORD)v206 - 1] = 0;
                  }
                }
                else
                {
                  __s[*((_QWORD *)&v206 + 1)] = 0;
                }
                MEMORY[0x20BD147A4](&this->__begin_[v185++]);
              }
              while (v185 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3));
            }
            goto LABEL_238;
          }
        }
      }
      goto LABEL_237;
    }
    TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
    if (*a2)
    {
      v128 = (const __int32 *)" ";
      do
      {
        if (!wcsncmp(a2, dword_209A7E050, 7uLL))
        {
          v131 = a2 + 7;
          v132 = wcsstr(v131, v128);
          if (!v132)
            goto LABEL_237;
          TBuffer<wchar_t>::assign((uint64_t)&v201, dword_209A7E070);
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v131, v132 - v131);
          v133 = v132 + 1;
          v134 = wcsstr(v133, (const __int32 *)&unk_209A7E088);
          if (!v134)
            goto LABEL_237;
          LODWORD(__v.__first_) = 61;
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v133, v134 - v133);
          v135 = *(_QWORD *)(a1 + 136);
          if (*((_QWORD *)&v202 + 1) >= (unint64_t)v202)
          {
            if (v204)
            {
              LODWORD(__v.__first_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
              --*((_QWORD *)&v202 + 1);
            }
            else if ((_QWORD)v202)
            {
              *(_DWORD *)&v201[4 * v202 - 4] = 0;
            }
          }
          else
          {
            *(_DWORD *)&v201[4 * *((_QWORD *)&v202 + 1)] = 0;
          }
          v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
          if (v140 == -1)
            goto LABEL_237;
          v141 = TTagManager::getTag(*(_QWORD *)(a1 + 136), v140);
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
          v211 = 0;
          v209 = (uint64_t *)&v210;
          v210 = 0;
          TTagManager::getClosedTagSet(*(_QWORD *)(a1 + 136), v141, &v209);
          std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v5, *(char **)(v5 + 8), v209, &v210);
          a2 = v134 + 1;
        }
        else if (!wcsncmp(a2, dword_209A7E090, 7uLL))
        {
          if (*v213 != 84)
            goto LABEL_150;
          v136 = wcsstr(a2 + 8, (const __int32 *)&unk_209A7E088);
          v137 = v136;
          if (!v136)
            goto LABEL_237;
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), a2 + 7, v136 - (a2 + 7));
          a2 = v137 + 1;
        }
        else
        {
          if (!wcsncmp(a2, dword_209A7E014, 5uLL))
          {
            if (*v213 == 84)
              v102 = 0;
            else
              v102 = 83;
            goto LABEL_238;
          }
          v129 = a2 + 1;
          if (!wcsncmp(a2, (const __int32 *)&unk_209A7E02C, 1uLL))
          {
            v138 = wcsstr(a2 + 1, v128);
            TBuffer<wchar_t>::resize((uint64_t)&v201, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v201, 0, v129, v138 - v129);
            v139 = *(_QWORD *)(a1 + 136);
            if (*((_QWORD *)&v202 + 1) >= (unint64_t)v202)
            {
              if (v204)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
                --*((_QWORD *)&v202 + 1);
              }
              else if ((_QWORD)v202)
              {
                *(_DWORD *)&v201[4 * v202 - 4] = 0;
              }
            }
            else
            {
              *(_DWORD *)&v201[4 * *((_QWORD *)&v202 + 1)] = 0;
            }
            v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 16))(v139);
            if (v142 == -1)
              goto LABEL_237;
            v143 = TTagManager::getTag(*(_QWORD *)(a1 + 136), v142);
            std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
            v211 = 0;
            v209 = (uint64_t *)&v210;
            v210 = 0;
            TTagManager::getClosedTagSet(*(_QWORD *)(a1 + 136), v143, &v209);
            std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v195, *(char **)(v195 + 8), v209, &v210);
            if (!*v138)
              goto LABEL_237;
            v144 = v128;
            v145 = 0;
            v146 = 1;
            do
            {
              v147 = wcsncmp(&v138[v145], (const __int32 *)&unk_209A7E02C, 1uLL);
              v148 = wcsncmp(&v138[v145], (const __int32 *)&unk_209A7E088, 1uLL);
              if (v147)
                v149 = v146;
              else
                v149 = v146 + 1;
              v146 = v149 - (v148 == 0);
              v150 = v138[++v145];
            }
            while (v150 && v146);
            if (v146)
              goto LABEL_237;
            TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v138 + 1, ((v145 * 4 - 4) >> 2) - 1);
            v128 = v144;
            a2 = &v138[v145];
            v5 = v195;
          }
          else
          {
            v130 = wcsstr(a2 + 1, (const __int32 *)&unk_209A7E02C);
            if (!v130)
              v130 = &a2[wcslen(a2)];
            TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), a2, v130 - a2);
            a2 = v130;
          }
        }
      }
      while (*a2);
    }
    if (*((_QWORD *)&v206 + 1))
    {
      std::vector<std::wstring>::resize(this, 0);
      if (*((_QWORD *)&v206 + 1) >= (unint64_t)v206)
      {
        if (v208)
        {
          LODWORD(__v.__first_) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
          v151 = __s;
          --*((_QWORD *)&v206 + 1);
        }
        else
        {
          v151 = __s;
          if ((_QWORD)v206)
            __s[(_QWORD)v206 - 1] = 0;
        }
      }
      else
      {
        v151 = __s;
        __s[*((_QWORD *)&v206 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v151);
      v159 = this->__end_cap_.__value_;
      v160 = this->__end_;
      if (v160 >= v159)
      {
        v162 = 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (char *)this->__begin_) >> 3);
        v163 = v162 + 1;
        if (v162 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v164 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (char *)this->__begin_) >> 3);
        if (2 * v164 > v163)
          v163 = 2 * v164;
        if (v164 >= 0x555555555555555)
          v165 = 0xAAAAAAAAAAAAAAALL;
        else
          v165 = v163;
        __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
        if (v165)
          v166 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&this->__end_cap_, v165);
        else
          v166 = 0;
        v167 = v166 + v162;
        __v.__first_ = v166;
        __v.__begin_ = v167;
        __v.__end_cap_.__value_ = &v166[v165];
        v168 = *(_OWORD *)__p;
        v167->__r_.__value_.__r.__words[2] = v200;
        *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
        __p[1] = 0;
        v200 = 0;
        __p[0] = 0;
        __v.__end_ = v167 + 1;
        std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
        v169 = this->__end_;
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
        v170 = SHIBYTE(v200);
        this->__end_ = v169;
        if (v170 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v161 = *(_OWORD *)__p;
        v160->__r_.__value_.__r.__words[2] = v200;
        *(_OWORD *)&v160->__r_.__value_.__l.__data_ = v161;
        this->__end_ = v160 + 1;
      }
      v171 = *v213;
      if (v171 == 84)
      {
        v102 = 84;
      }
      else if (v171 == 78)
      {
        v102 = 78;
      }
      else
      {
        v102 = 66;
      }
    }
    else
    {
LABEL_237:
      v102 = 0;
    }
  }
  else
  {
LABEL_150:
    v102 = 83;
  }
LABEL_238:
  if (v204)
  {
    if (v201 != v203 && v201 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (v208 && __s != (std::wstring::value_type *)v207 && __s)
    MEMORY[0x20BD149A8]();
  if (v216 && v213 != v215 && v213)
    MEMORY[0x20BD149A8]();
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
  return v102;
}

void sub_2099DC2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  unint64_t v28;
  unint64_t v29;

  std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&STACK[0x8C8]);
  if (a25 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x488]))
  {
    if (a26 != a14 && a26 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    v28 = STACK[0x490];
    if (STACK[0x490] != a15)
    {
      if (v28)
        MEMORY[0x20BD149A8](v28, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xA08]))
  {
    v29 = STACK[0x8F0];
    if (STACK[0x8F0] != a16)
    {
      if (v29)
        MEMORY[0x20BD149A8](v29, 0x1000C4077774924);
    }
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x8B0], (_QWORD *)STACK[0x8B8]);
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::resize(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __sz)
{
  std::vector<std::wstring>::pointer end;
  std::vector<std::wstring>::size_type v4;
  BOOL v5;
  std::vector<std::wstring>::size_type v6;
  std::wstring *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::wstring>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

char *std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<TPItnTagHandle_fake **>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(a1, a2, a3, a4, v4);
}

uint64_t TBuffer<wchar_t>::assign(uint64_t a1, int *a2, unint64_t a3)
{
  TBuffer<wchar_t>::resize(a1, 0);
  return TBuffer<wchar_t>::insert(a1, 0, a2, a3);
}

void TFormatter::addGrammarBlocks(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  TParam *v9;
  uint64_t ActiveConfigHandle;
  TParam *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int32 **v34;
  __int32 *v35;
  unint64_t *v36;
  unint64_t *v37;
  int v38;
  int v39;
  std::vector<std::wstring>::pointer begin;
  __int32 *p_p;
  uint64_t v42;
  uint64_t v43;
  std::vector<std::wstring>::pointer data;
  std::vector<std::wstring>::pointer v45;
  __int32 **HeadClone;
  std::vector<std::wstring>::pointer v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  std::vector<std::wstring>::pointer v60;
  unint64_t v61;
  std::wstring *v62;
  std::wstring::size_type size;
  std::wstring::size_type v64;
  uint64_t v65;
  __int32 *v66;
  uint64_t v67;
  std::wstring *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  std::vector<std::wstring>::pointer v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  std::wstring *v87;
  std::wstring::size_type v88;
  std::wstring::size_type v89;
  uint64_t v90;
  __int32 *v91;
  uint64_t v92;
  std::wstring *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *__p;
  _QWORD *v114;
  uint64_t v115;
  void *v116[3];
  void *v117;
  unint64_t *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  char *v122;
  std::vector<std::wstring> v123;
  _BYTE v124[40];
  char *v125;
  _BYTE *v126;
  uint64_t v127;

  if (*(_QWORD *)(a1 + 112))
  {
    v9 = (TParam *)(*(_QWORD *)(a1 + 48) + 3792);
    ActiveConfigHandle = TParam::getActiveConfigHandle(v9);
    if (!*((_BYTE *)v9 + TParam::getValidConfig(v9, ActiveConfigHandle) + 152))
    {
      v11 = (TParam *)(*(_QWORD *)(a1 + 48) + 1872);
      v12 = TParam::getActiveConfigHandle(v11);
      v13 = *((int *)v11 + TParam::getValidConfig(v11, v12) + 40);
      v15 = *a2;
      v14 = a2[1];
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v16 = TFormatter::stateToParamConfig((TFormatter *)a1, (const TItnControlState *)(v15 + 112 * a3 + 40));
      if (0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 4) >= (unint64_t)(v13 + a3))
        v17 = v13 + a3;
      else
        v17 = 0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 4);
      TGrammarManager2::search(*(_QWORD **)(a1 + 112), a2, a3, v17, v16, (uint64_t *)&v125);
      TAllocator::TAllocator((TAllocator *)v124, 2048);
      memset(&v123, 0, sizeof(v123));
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      memset(v116, 0, sizeof(v116));
      v18 = v125;
      if (v126 != v125)
      {
        v19 = 0;
        v110 = (uint64_t)(*((_QWORD *)a5 + 7) - *((_QWORD *)a5 + 6)) >> 3;
        while (1)
        {
          v20 = &v18[56 * v19];
          v21 = *((_QWORD *)v20 + 3);
          v112 = *((_QWORD *)v20 + 2) + a3 - *((_QWORD *)v20 + 4);
          v109 = (unsigned int *)*((_QWORD *)v20 + 1);
          v22 = TFsa::newTrans(a5, a4, *(_QWORD *)(*((_QWORD *)a5 + 6) + 8 * v112), (uint64_t)v109);
          v23 = v22;
          v108 = v19;
          v24 = v121;
          if (v121 >= v122)
          {
            v26 = (v121 - (_BYTE *)v120) >> 3;
            if ((unint64_t)(v26 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v27 = (v122 - (_BYTE *)v120) >> 2;
            if (v27 <= v26 + 1)
              v27 = v26 + 1;
            if ((unint64_t)(v122 - (_BYTE *)v120) >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v122, v28);
            else
              v29 = 0;
            v30 = &v29[8 * v26];
            *(_QWORD *)v30 = v23;
            v25 = v30 + 8;
            v32 = (char *)v120;
            v31 = v121;
            if (v121 != v120)
            {
              do
              {
                v33 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v30 - 1) = v33;
                v30 -= 8;
              }
              while (v31 != v32);
              v31 = (char *)v120;
            }
            v120 = v30;
            v121 = v25;
            v122 = &v29[8 * v28];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v121 = v22;
            v25 = v24 + 8;
          }
          v121 = v25;
          if (v120 != v25)
            break;
LABEL_142:
          v19 = v108 + 1;
          v18 = v125;
          if (v108 + 1 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v126 - v125) >> 3)))
            goto LABEL_143;
        }
        v111 = v21 + a3;
        while (1)
        {
          v34 = (__int32 **)*((_QWORD *)v25 - 1);
          v121 = v25 - 8;
          v35 = *v34;
          v37 = (unint64_t *)v34[2];
          v36 = (unint64_t *)v34[3];
          TFsa::deleteTrans(a5, v34);
          v38 = TFormatter::splitGrammarResult(a1, v35, &v123, (uint64_t)&v117, 0);
          LOBYTE(v39) = v38;
          if (v38 == 78)
          {
            do
            {
              begin = v123.__begin_;
              if (SHIBYTE(v123.__begin_->__r_.__value_.__r.__words[2]) < 0)
                begin = (std::vector<std::wstring>::pointer)v123.__begin_->__r_.__value_.__l.__data_;
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, (__int32 *)begin);
              if (v115 >= 0)
                p_p = (__int32 *)&__p;
              else
                p_p = (__int32 *)__p;
              v39 = TFormatter::splitGrammarResult(a1, p_p, &v123, (uint64_t)&v117, 1);
              if (SHIBYTE(v115) < 0)
                operator delete(__p);
            }
            while (v39 == 78);
          }
          v42 = *v36 >= v110 ? -1 : v111;
          v43 = *v37 >= v110 ? -1 : v112;
          if (v39 > 0x52u)
            break;
          if (v39 == 65)
          {
            v54 = (unint64_t *)v117;
            v53 = v118;
            if (v117 == v118)
            {
              v55 = v36;
            }
            else
            {
              if (v123.__begin_ == v123.__end_)
              {
                v55 = v37;
              }
              else
              {
                v55 = TFsa::newState(a5, 0);
                v54 = (unint64_t *)v117;
                v53 = v118;
              }
              v114 = 0;
              v115 = 0;
              __p = &v114;
              while (v54 != v53)
              {
                std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>((uint64_t **)&__p, &v114, v54, (uint64_t *)v54);
                ++v54;
              }
              v59 = operator new();
              TBlock::TBlock(v59, &dword_209A7DFFC, 0, 0);
              *(_QWORD *)(v59 + 8) = v42;
              *(_QWORD *)(v59 + 16) = v42;
              TFsa::newTrans(a5, (uint64_t)v36, (uint64_t)v55, v59);
              std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&__p, v114);
            }
            v60 = v123.__begin_;
            if (v123.__end_ != v123.__begin_)
            {
              v61 = 0;
              do
              {
                v62 = &v60[v61];
                if (SHIBYTE(v62->__r_.__value_.__r.__words[2]) < 0)
                  size = v62->__r_.__value_.__l.__size_;
                else
                  size = HIBYTE(v62->__r_.__value_.__r.__words[2]);
                v64 = size + 1;
                if (v64 >> 62)
                  v65 = -1;
                else
                  v65 = 4 * v64;
                v66 = (__int32 *)TAllocator::allocate((TAllocator *)v124, v65);
                v67 = (uint64_t)v66;
                v68 = &v123.__begin_[v61];
                if (SHIBYTE(v68->__r_.__value_.__r.__words[2]) < 0)
                  v68 = (std::wstring *)v68->__r_.__value_.__r.__words[0];
                wcscpy(v66, (const __int32 *)v68);
                v69 = TFsa::newTrans(a5, (uint64_t)v55, (uint64_t)v37, v67);
                v70 = v69;
                v71 = v121;
                if (v121 >= v122)
                {
                  v73 = (v121 - (_BYTE *)v120) >> 3;
                  if ((unint64_t)(v73 + 1) >> 61)
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  v74 = (v122 - (_BYTE *)v120) >> 2;
                  if (v74 <= v73 + 1)
                    v74 = v73 + 1;
                  if ((unint64_t)(v122 - (_BYTE *)v120) >= 0x7FFFFFFFFFFFFFF8)
                    v75 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v75 = v74;
                  if (v75)
                    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v122, v75);
                  else
                    v76 = 0;
                  v77 = &v76[8 * v73];
                  *(_QWORD *)v77 = v70;
                  v72 = v77 + 8;
                  v79 = (char *)v120;
                  v78 = v121;
                  if (v121 != v120)
                  {
                    do
                    {
                      v80 = *((_QWORD *)v78 - 1);
                      v78 -= 8;
                      *((_QWORD *)v77 - 1) = v80;
                      v77 -= 8;
                    }
                    while (v78 != v79);
                    v78 = (char *)v120;
                  }
                  v120 = v77;
                  v121 = v72;
                  v122 = &v76[8 * v75];
                  if (v78)
                    operator delete(v78);
                }
                else
                {
                  *(_QWORD *)v121 = v69;
                  v72 = v71 + 8;
                }
                v121 = v72;
                ++v61;
                v60 = v123.__begin_;
              }
              while (v61 < 0xAAAAAAAAAAAAAAABLL * (((char *)v123.__end_ - (char *)v123.__begin_) >> 3));
            }
            goto LABEL_141;
          }
          if (v39 != 66)
            goto LABEL_56;
          data = v123.__begin_;
          if (SHIBYTE(v123.__begin_->__r_.__value_.__r.__words[2]) < 0)
            data = (std::vector<std::wstring>::pointer)v123.__begin_->__r_.__value_.__l.__data_;
          TFormatter::addCapBlocks((_QWORD *)a1, a5, (uint64_t)v36, (uint64_t)v37, (unsigned int *)data, v42, v43, (unint64_t **)&v117, (uint64_t *)v116);
LABEL_141:
          v25 = v121;
          if (v120 == v121)
            goto LABEL_142;
        }
        if (v39 == 83)
        {
          v114 = 0;
          v115 = 0;
          __p = &v114;
          v57 = (unint64_t *)v117;
          v56 = v118;
          if (v117 == v118)
          {
            v58 = v36;
          }
          else
          {
            if (v123.__begin_ == v123.__end_)
            {
              v58 = v37;
            }
            else
            {
              v58 = TFsa::newState(a5, 0);
              v57 = (unint64_t *)v117;
              v56 = v118;
            }
            while (v57 != v56)
            {
              std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>((uint64_t **)&__p, &v114, v57, (uint64_t *)v57);
              ++v57;
            }
            v81 = operator new();
            TBlock::TBlock(v81, &dword_209A7DFFC, 0, 0);
            *(_QWORD *)(v81 + 8) = v42;
            *(_QWORD *)(v81 + 16) = v42;
            TFsa::newTrans(a5, (uint64_t)v36, (uint64_t)v58, v81);
          }
          v82 = v123.__begin_;
          if (v123.__end_ != v123.__begin_)
          {
            v83 = 0;
            v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v123.__end_ - (char *)v123.__begin_) >> 3);
            do
            {
              v85 = v83 + 1;
              v86 = v37;
              if (v83 + 1 != v84)
              {
                v86 = TFsa::newState(a5, 0);
                v82 = v123.__begin_;
              }
              v87 = &v82[v83];
              if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
                v88 = v87->__r_.__value_.__l.__size_;
              else
                v88 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
              v89 = v88 + 1;
              if (v89 >> 62)
                v90 = -1;
              else
                v90 = 4 * v89;
              v91 = (__int32 *)TAllocator::allocate((TAllocator *)v124, v90);
              v92 = (uint64_t)v91;
              v93 = &v123.__begin_[v83];
              if (SHIBYTE(v93->__r_.__value_.__r.__words[2]) < 0)
                v93 = (std::wstring *)v93->__r_.__value_.__r.__words[0];
              wcscpy(v91, (const __int32 *)v93);
              v94 = TFsa::newTrans(a5, (uint64_t)v58, (uint64_t)v86, v92);
              v95 = v94;
              v96 = v121;
              if (v121 >= v122)
              {
                v98 = (v121 - (_BYTE *)v120) >> 3;
                if ((unint64_t)(v98 + 1) >> 61)
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                v99 = (v122 - (_BYTE *)v120) >> 2;
                if (v99 <= v98 + 1)
                  v99 = v98 + 1;
                if ((unint64_t)(v122 - (_BYTE *)v120) >= 0x7FFFFFFFFFFFFFF8)
                  v100 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v100 = v99;
                if (v100)
                  v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v122, v100);
                else
                  v101 = 0;
                v102 = &v101[8 * v98];
                *(_QWORD *)v102 = v95;
                v97 = v102 + 8;
                v104 = (char *)v120;
                v103 = v121;
                if (v121 != v120)
                {
                  do
                  {
                    v105 = *((_QWORD *)v103 - 1);
                    v103 -= 8;
                    *((_QWORD *)v102 - 1) = v105;
                    v102 -= 8;
                  }
                  while (v103 != v104);
                  v103 = (char *)v120;
                }
                v120 = v102;
                v121 = v97;
                v122 = &v101[8 * v100];
                if (v103)
                  operator delete(v103);
              }
              else
              {
                *(_QWORD *)v121 = v94;
                v97 = v96 + 8;
              }
              v121 = v97;
              v58 = v37;
              if (v86 != v37)
              {
                if (v117 == v118)
                {
                  v58 = v86;
                }
                else
                {
                  v58 = TFsa::newState(a5, 0);
                  v106 = operator new();
                  TBlock::TBlock(v106, &dword_209A7DFFC, 0, 0);
                  *(_QWORD *)(v106 + 8) = v42;
                  *(_QWORD *)(v106 + 16) = v42;
                  TFsa::newTrans(a5, (uint64_t)v86, (uint64_t)v58, v106);
                }
              }
              v82 = v123.__begin_;
              v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v123.__end_ - (char *)v123.__begin_) >> 3);
              v83 = v85;
            }
            while (v85 < v84);
          }
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&__p, v114);
          goto LABEL_141;
        }
        if (v39 == 84)
        {
          v45 = v123.__begin_;
          if (SHIBYTE(v123.__begin_->__r_.__value_.__r.__words[2]) < 0)
            v45 = (std::vector<std::wstring>::pointer)v123.__begin_->__r_.__value_.__l.__data_;
          HeadClone = (__int32 **)TLexicon::findHeadClone(*(_QWORD *)(a1 + 32), (__int32 *)v45);
          if (!HeadClone)
          {
            v47 = v123.__begin_;
            if (SHIBYTE(v123.__begin_->__r_.__value_.__r.__words[2]) < 0)
              v47 = (std::vector<std::wstring>::pointer)v123.__begin_->__r_.__value_.__l.__data_;
            HeadClone = (__int32 **)TLexicon::addTempWord(*(_QWORD *)(a1 + 32), (int *)v47, 0, 0, 0);
          }
          TFormatter::addWordBlocks(a1, HeadClone, (uint64_t)v36, (uint64_t)v37, a5, v42, v43, (char **)&v117);
          goto LABEL_141;
        }
LABEL_56:
        loggableUnicode(v109, &__p);
        if (v115 >= 0)
          v52 = &__p;
        else
          v52 = __p;
        tknPrintf("Error: couldn't parse '%s' spanning [%llu,%llu). Ignored.\n", v48, v49, v50, v51, v52, v111, v112);
        if (SHIBYTE(v115) < 0)
          operator delete(__p);
        TFormatter::addCapBlocks((_QWORD *)a1, a5, (uint64_t)v36, (uint64_t)v37, &dword_209A7DFFC, v42, v43, (unint64_t **)&v117, (uint64_t *)v116);
        goto LABEL_141;
      }
LABEL_143:
      TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 112));
      if (v116[0])
        operator delete(v116[0]);
      if (v117)
      {
        v118 = (unint64_t *)v117;
        operator delete(v117);
      }
      if (v120)
      {
        v121 = (char *)v120;
        operator delete(v120);
      }
      v120 = &v123;
      std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
      TAllocator::clear((TAllocator *)v124);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
    }
  }
}

void sub_2099DCFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  a33 = (void *)(v34 - 176);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  TAllocator::clear((TAllocator *)(v34 - 152));
  v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(_QWORD *)(v34 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void TFormatter::addWordBlocks(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t a4, TAllocator *a5, uint64_t a6, uint64_t a7, char **a8)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  const __int32 **v28;
  char *v29;
  char *v30;
  const __int32 *v31;
  __int32 *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __int32 **v39;
  char *v40;
  char *v41;
  char *v42;
  __int32 *v43;
  char v44;
  unint64_t i;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  __int32 *v50;
  void *__p;
  char *v53;
  char *v54;
  _BYTE *v55;
  __int128 v56;
  _BYTE v57[1809];
  char v58;
  __int32 *v59;
  __int128 v60;
  _BYTE v61[1024];
  char v62;
  unint64_t *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  uint64_t v68;
  int v69[3];

  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v59 = (__int32 *)v61;
  v60 = xmmword_209A57DD0;
  v62 = 1;
  TWord::getWrittenForm(a2, (uint64_t)&v59);
  v55 = v57;
  v56 = xmmword_209A57DD0;
  v58 = 1;
  (*(void (**)(_QWORD, __int32 *, _QWORD, _BYTE **))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), *a2, 0, &v55);
  __p = 0;
  v53 = 0;
  v54 = 0;
  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_85;
  v15 = 0;
  do
  {
    v16 = *(_QWORD *)&v55[8 * v15];
    if (v16)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
      if (v16 <= (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) - v17) >> 3)
        v16 = *(_QWORD *)(v17 + 8 * v16 - 8);
      else
        v16 = 0;
    }
    if (!*(_BYTE *)(v16 + 145)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(v16 + 24)
      && *(_QWORD *)(v16 + 56) == *(_QWORD *)(v16 + 48))
    {
      v19 = (const __int32 *)(v16 + 120);
      if (*(char *)(v16 + 143) < 0)
        v19 = *(const __int32 **)v19;
      if (*v19)
      {
        if (*((_QWORD *)&v60 + 1) >= (unint64_t)v60)
        {
          if (v62)
          {
            v69[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), v69, 1uLL);
            v20 = v59;
            --*((_QWORD *)&v60 + 1);
          }
          else
          {
            v20 = v59;
            if ((_QWORD)v60)
              v59[(_QWORD)v60 - 1] = 0;
          }
        }
        else
        {
          v20 = v59;
          v59[*((_QWORD *)&v60 + 1)] = 0;
        }
        if (!wcscasecmp(v20, v19))
        {
          if (*((_QWORD *)&v60 + 1) >= (unint64_t)v60)
          {
            if (v62)
            {
              v69[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), v69, 1uLL);
              v21 = v59;
              --*((_QWORD *)&v60 + 1);
            }
            else
            {
              v21 = v59;
              if ((_QWORD)v60)
                v59[(_QWORD)v60 - 1] = 0;
            }
          }
          else
          {
            v21 = v59;
            v59[*((_QWORD *)&v60 + 1)] = 0;
          }
          if (wcscmp(v21, v19))
          {
            v22 = v53;
            if (v53 >= v54)
            {
              v24 = (v53 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v24 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v25 = (v54 - (_BYTE *)__p) >> 2;
              if (v25 <= v24 + 1)
                v25 = v24 + 1;
              if ((unint64_t)(v54 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v25;
              if (v26)
                v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v54, v26);
              else
                v27 = 0;
              v28 = (const __int32 **)&v27[8 * v24];
              *v28 = v19;
              v23 = (char *)(v28 + 1);
              v30 = (char *)__p;
              v29 = v53;
              if (v53 != __p)
              {
                do
                {
                  v31 = (const __int32 *)*((_QWORD *)v29 - 1);
                  v29 -= 8;
                  *--v28 = v31;
                }
                while (v29 != v30);
                v29 = (char *)__p;
              }
              __p = v28;
              v53 = v23;
              v54 = &v27[8 * v26];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_QWORD *)v53 = v19;
              v23 = v22 + 8;
            }
            v53 = v23;
          }
        }
      }
    }
    ++v15;
    v18 = *((_QWORD *)&v56 + 1);
  }
  while (v15 < *((_QWORD *)&v56 + 1));
  if (__p != v53)
  {
    if (*((_QWORD *)&v60 + 1) >= (unint64_t)v60)
    {
      if (v62)
      {
        v69[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), v69, 1uLL);
        v32 = v59;
        --*((_QWORD *)&v60 + 1);
      }
      else
      {
        v32 = v59;
        if ((_QWORD)v60)
          v59[(_QWORD)v60 - 1] = 0;
      }
    }
    else
    {
      v32 = v59;
      v59[*((_QWORD *)&v60 + 1)] = 0;
    }
    v33 = v53;
    if (v53 >= v54)
    {
      v35 = (v53 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v36 = (v54 - (_BYTE *)__p) >> 2;
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if ((unint64_t)(v54 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v54, v37);
      else
        v38 = 0;
      v39 = (__int32 **)&v38[8 * v35];
      v40 = &v38[8 * v37];
      *v39 = v32;
      v34 = (char *)(v39 + 1);
      v42 = (char *)__p;
      v41 = v53;
      if (v53 != __p)
      {
        do
        {
          v43 = (__int32 *)*((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v39 = v43;
        }
        while (v41 != v42);
        v41 = (char *)__p;
      }
      __p = v39;
      v53 = v34;
      v54 = v40;
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v53 = v32;
      v34 = v33 + 8;
    }
    v53 = v34;
    v18 = *((_QWORD *)&v56 + 1);
  }
  if (!v18)
    goto LABEL_85;
  v44 = 0;
  for (i = 0; i < v18; ++i)
  {
    v46 = *(_QWORD *)&v55[8 * i];
    if (v46
      && (v47 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32), v46 <= (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) - v47) >> 3))
    {
      v48 = *(_QWORD *)(v47 + 8 * v46 - 8);
    }
    else
    {
      v48 = 0;
    }
    if (!*(_BYTE *)(v48 + 145))
    {
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v63, (uint64_t)v64, *(char **)(v48 + 96), *(char **)(v48 + 104), (uint64_t)(*(_QWORD *)(v48 + 104) - *(_QWORD *)(v48 + 96)) >> 3);
      if (&v66 != (unint64_t **)(v48 + 72))
        std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>((char *)&v66, *(char **)(v48 + 72), *(_QWORD *)(v48 + 80), (uint64_t)(*(_QWORD *)(v48 + 80) - *(_QWORD *)(v48 + 72)) >> 3);
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v66, (uint64_t)v67, *a8, a8[1], (a8[1] - *a8) >> 3);
      v49 = (unsigned int *)(v48 + 120);
      if (*(char *)(v48 + 143) < 0)
        v49 = *(unsigned int **)v49;
      TFormatter::addCapBlocks((_QWORD *)a1, a5, a3, a4, v49, a6, a7, &v66, (uint64_t *)&__p);
      v44 = 1;
      v18 = *((_QWORD *)&v56 + 1);
    }
  }
  if (v18 && ((*v59 != 0) & v44) != 1)
  {
    if ((v44 & 1) == 0)
    {
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v63, (uint64_t)v64, *a8, a8[1], (a8[1] - *a8) >> 3);
      TFormatter::addCapBlocks((_QWORD *)a1, a5, a3, a4, &dword_209A7DFFC, a6, a7, &v63, (uint64_t *)&__p);
    }
  }
  else
  {
LABEL_85:
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v63, (uint64_t)v64, *a8, a8[1], (a8[1] - *a8) >> 3);
    if (*((_QWORD *)&v60 + 1) >= (unint64_t)v60)
    {
      if (v62)
      {
        v69[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), v69, 1uLL);
        v50 = v59;
        --*((_QWORD *)&v60 + 1);
      }
      else
      {
        v50 = v59;
        if ((_QWORD)v60)
          v59[(_QWORD)v60 - 1] = 0;
      }
    }
    else
    {
      v50 = v59;
      v59[*((_QWORD *)&v60 + 1)] = 0;
    }
    TFormatter::addCapBlocks((_QWORD *)a1, a5, a3, a4, (unsigned int *)v50, a6, a7, &v63, (uint64_t *)&__p);
  }
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v58 && v55 != v57 && v55)
    MEMORY[0x20BD149A8]();
  if (v62 && v59 != (__int32 *)v61 && v59)
    MEMORY[0x20BD149A8]();
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
}

void sub_2099DD75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  unint64_t v21;
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);
  if (LOBYTE(STACK[0x868]) && a19 != a12 && a19)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0xC88]))
  {
    v21 = STACK[0x870];
    if (STACK[0x870] != a11)
    {
      if (v21)
        MEMORY[0x20BD149A8](v21, 0x1000C4052888210);
    }
  }
  v22 = *(void **)(v19 - 144);
  if (v22)
  {
    *(_QWORD *)(v19 - 136) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v19 - 120);
  if (v23)
  {
    *(_QWORD *)(v19 - 112) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::constructGraph(TFormatter *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t **this)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t ActiveConfigHandle;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22[3];
  void *__p;
  void *v24;
  uint64_t v25;

  if (a2[1] - *a2 != -112)
  {
    v8 = 0;
    do
    {
      TFsa::newState((TAllocator *)this, 0);
      ++v8;
    }
    while (v8 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) + 1);
  }
  TFsa::addExtremity((uint64_t)this, *this[6], 0);
  TFsa::addExtremity((uint64_t)this, this[6][0xDB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4)], 1u);
  __p = 0;
  v24 = 0;
  v25 = 0;
  memset(v22, 0, sizeof(v22));
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &this[6][v10];
      v12 = *v11;
      v13 = v11[1];
      std::vector<TItnRule *>::resize((uint64_t)&__p, 0);
      v14 = v10 + 1;
      if (*(_BYTE *)(*a2 + v9 + 33))
      {
        TFormatter::addCapBlocks(a1, (TAllocator *)this, v12, v13, &dword_209A7DFFC, v10, v10 + 1, (unint64_t **)&__p, v22);
      }
      else
      {
        TFormatter::addGrammarBlocks((uint64_t)a1, a2, v10, v12, (TAllocator *)this);
        TFormatter::addWordBlocks((uint64_t)a1, *(__int32 ***)(*a2 + v9 + 16), v12, v13, (TAllocator *)this, v10, v10 + 1, (char **)&__p);
      }
      v9 += 112;
      ++v10;
    }
    while (v14 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  }
  v15 = *((_QWORD *)a1 + 6);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 19248));
  if (*(_BYTE *)(v15 + TParam::getValidConfig((TParam *)(v15 + 19248), ActiveConfigHandle) + 19400))
    TFormatter::logFsa(a1, (const TFsa *)this, v17, v18, v19);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  return a3;
}

void sub_2099DDA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TFormatter::logFsa(TFormatter *this, const TFsa *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v6;
  _QWORD **v7;
  uint64_t *i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t Tag;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  _QWORD *v36;
  void *__p[2];
  char v41;
  unsigned int *v42;
  __int128 v43;
  _BYTE v44[1024];
  char v45;
  int v46[3];

  v42 = (unsigned int *)v44;
  v43 = xmmword_209A57DD0;
  v45 = 1;
  v6 = (_QWORD **)*((_QWORD *)a2 + 6);
  v7 = (_QWORD **)*((_QWORD *)a2 + 7);
  if (v6 != v7)
  {
    while (!*v6)
    {
      if (++v6 == v7)
        goto LABEL_40;
    }
  }
  if (v6 == v7)
    goto LABEL_40;
  do
  {
    tknPrintf("GRAPH: state=%llu, starting=%d, accepting=%d\n", (uint64_t)a2, a3, a4, a5, **v6, (*v6)[4] != -1, (*v6)[5] != -1);
    for (i = (uint64_t *)(*v6)[3]; i; i = (uint64_t *)i[5])
    {
      v9 = *i;
      TBuffer<wchar_t>::resize((uint64_t)&v42, 0);
      v10 = (_QWORD *)(v9 + 48);
      if (*(char *)(v9 + 71) < 0)
        v10 = (_QWORD *)*v10;
      slashEscape((uint64_t)v10, (uint64_t)&v42);
      v11 = i[1];
      v12 = *(_QWORD *)i[2];
      if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
      {
        if (v45)
        {
          v46[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), v46, 1uLL);
          v13 = v42;
          --*((_QWORD *)&v43 + 1);
        }
        else
        {
          v13 = v42;
          if ((_QWORD)v43)
            v42[(_QWORD)v43 - 1] = 0;
        }
      }
      else
      {
        v13 = v42;
        v42[*((_QWORD *)&v43 + 1)] = 0;
      }
      loggableUnicode(v13, __p);
      if (v41 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      tknPrintf("GRAPH:   trans=%llu, to_state=%llu, text='%s'\n", v14, v15, v16, v17, v11, v12, v18);
      if (v41 < 0)
        operator delete(__p[0]);
      tknPrintf("GRAPH:     tags:\n", v19, v20, v21, v22);
      v23 = *(_QWORD *)(v9 + 120);
      if (*(_QWORD *)(v9 + 128) != v23)
      {
        v24 = 0;
        do
        {
          v25 = *(_QWORD *)(v23 + 8 * v24);
          Tag = TTagManager::getTag(*((_QWORD *)this + 17), v25);
          if (Tag)
          {
            if (*(char *)(Tag + 23) < 0)
              Tag = *(_QWORD *)Tag;
            loggableUnicode((unsigned int *)Tag, __p);
            if (v41 >= 0)
              v35 = __p;
            else
              v35 = (void **)__p[0];
            tknPrintf("GRAPH:       <%s>\n", v31, v32, v33, v34, v35);
            if (v41 < 0)
              operator delete(__p[0]);
          }
          else
          {
            tknPrintf("GRAPH:       <%llu>\n", v27, v28, v29, v30, v25);
          }
          ++v24;
          v23 = *(_QWORD *)(v9 + 120);
        }
        while (v24 < (*(_QWORD *)(v9 + 128) - v23) >> 3);
      }
    }
    v36 = v6 + 1;
    while (v36 != v7)
    {
      if (*v36++)
      {
        v6 = (_QWORD **)(v36 - 1);
        goto LABEL_38;
      }
    }
    v6 = v7;
LABEL_38:
    ;
  }
  while (v6 != *((_QWORD ***)a2 + 7));
  if (v45)
  {
LABEL_40:
    if (v42 != (unsigned int *)v44 && v42 != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2099DDD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (LOBYTE(STACK[0x458]))
  {
    if (a17 != a12 && a17 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::collectTags(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, TAllocator *a6, void **a7, uint64_t **a8)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *i;
  uint64_t v12;
  const __int32 **v13;
  const __int32 *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  const __int32 *v18;
  const __int32 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  const __int32 *v27;
  const __int32 *v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  void **v43;
  char *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned __int8 v52;
  TLocaleInfo *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t **v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t Tag;
  _QWORD *v77;
  const __int32 *v78;
  int v79;
  unsigned __int8 v80;
  unint64_t v82;
  int v83;
  unsigned __int8 v84;
  BOOL v85;
  TLocaleInfo *v86;
  unint64_t v87;
  unint64_t v88;
  const __int32 *v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  __int32 *v95;
  __int32 *v96;
  uint64_t **v97;
  uint64_t v98;
  const __int32 *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  TLocaleInfo *v119;
  char v120;
  char v122;
  unint64_t v125;
  size_t v128;
  BOOL v129;
  unint64_t v131;
  TLocaleInfo *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v141;
  char *v142;
  char *v143;
  _QWORD v144[2];

  v142 = 0;
  v143 = 0;
  v144[0] = 0;
  v9 = *(_QWORD **)(a2 + 152);
  v10 = *(_QWORD **)(a2 + 160);
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10)
        goto LABEL_219;
    }
  }
  if (v9 == v10)
  {
LABEL_219:
    v120 = 0;
  }
  else
  {
    v134 = *(_QWORD **)(a2 + 160);
    do
    {
      v138 = v9;
      for (i = *(_QWORD **)(*v9 + 24); i; i = (_QWORD *)i[5])
      {
        v12 = *i;
        v13 = (const __int32 **)(*i + 48);
        v14 = (const __int32 *)v13;
        if (*(char *)(*i + 71) < 0)
          v14 = *v13;
        v15 = wcslen(v14);
        v17 = *(_QWORD *)(a3 + 8);
        v16 = *(_QWORD *)(a3 + 16);
        if (v16 >= v17)
        {
          if (*(_BYTE *)(a3 + 1048))
          {
            LODWORD(v141) = 0;
            TBuffer<wchar_t>::insert(a3, v16, (int *)&v141, 1uLL);
            --*(_QWORD *)(a3 + 16);
            v18 = *(const __int32 **)a3;
          }
          else
          {
            v18 = *(const __int32 **)a3;
            if (v17)
              v18[v17 - 1] = 0;
          }
        }
        else
        {
          v18 = *(const __int32 **)a3;
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v16) = 0;
        }
        v19 = (const __int32 *)v13;
        if (*(char *)(v12 + 71) < 0)
          v19 = *v13;
        v20 = 0;
        if (wcsncmp(v18, v19, v15))
        {
          v21 = 1;
          do
          {
            v22 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v20);
            if ((v23 & 1) == 0
            {
              v132 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v132);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v132;
            }
            if (v22 <= 8202)
            {
              if (v22 != 32 && v22 != 160)
                goto LABEL_59;
            }
            else
            {
              v24 = v22 == 8203 || v22 == 65279;
              if (!v24 && v22 != 12288)
                goto LABEL_59;
            }
            v26 = *(_QWORD *)(a3 + 8);
            v25 = *(_QWORD *)(a3 + 16);
            if (v25 >= v26)
            {
              if (*(_BYTE *)(a3 + 1048))
              {
                LODWORD(v141) = 0;
                TBuffer<wchar_t>::insert(a3, v25, (int *)&v141, 1uLL);
                --*(_QWORD *)(a3 + 16);
                v27 = *(const __int32 **)a3;
              }
              else
              {
                v27 = *(const __int32 **)a3;
                if (v26)
                  v27[v26 - 1] = 0;
              }
            }
            else
            {
              v27 = *(const __int32 **)a3;
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = 0;
            }
            v28 = (const __int32 *)v13;
            if (*(char *)(v12 + 71) < 0)
              v28 = *v13;
            v29 = wcsncmp(&v27[v21++], v28, v15);
            ++v20;
          }
          while (v29);
        }
        v30 = TAllocator::allocate(a6, 40);
        v31 = v30;
        *v30 = 0;
        v30[1] = i;
        v30[2] = 0;
        v30[3] = v20 + v15;
        *((_BYTE *)v30 + 32) = 0;
        v32 = v143;
        if ((unint64_t)v143 >= v144[0])
        {
          v34 = (v143 - v142) >> 3;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v35 = (uint64_t)(v144[0] - (_QWORD)v142) >> 2;
          if (v35 <= v34 + 1)
            v35 = v34 + 1;
          if (v144[0] - (_QWORD)v142 >= 0x7FFFFFFFFFFFFFF8uLL)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v144, v36);
          else
            v37 = 0;
          v38 = &v37[8 * v34];
          *(_QWORD *)v38 = v31;
          v33 = v38 + 8;
          v40 = v142;
          v39 = v143;
          if (v143 != v142)
          {
            do
            {
              v41 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *((_QWORD *)v38 - 1) = v41;
              v38 -= 8;
            }
            while (v39 != v40);
            v39 = v142;
          }
          v142 = v38;
          v143 = v33;
          v144[0] = &v37[8 * v36];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v143 = v30;
          v33 = v32 + 8;
        }
        v143 = v33;
LABEL_59:
        ;
      }
      v42 = v138 + 1;
      v43 = a7;
      while (v42 != v134)
      {
        if (*v42++)
        {
          v9 = v42 - 1;
          goto LABEL_65;
        }
      }
      v9 = v134;
LABEL_65:
      ;
    }
    while (v9 != *(_QWORD **)(a2 + 160));
    v45 = v142;
    if (v143 != v142)
    {
      v122 = 0;
      v46 = 0;
      v133 = a3;
      while (1)
      {
        v47 = *(uint64_t **)&v45[8 * v46];
        v48 = *(_QWORD *)(v47[1] + 16);
        v137 = v47;
        if (*(_QWORD *)(v48 + 40) == -1)
          goto LABEL_127;
        v49 = v47[3];
        v50 = *(_QWORD *)(a3 + 16);
        if (v49 >= v50)
          goto LABEL_86;
        while (1)
        {
          v51 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v49);
          if ((v52 & 1) == 0
          {
            v54 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v54);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v54;
            a3 = v133;
            v47 = v137;
          }
          if (v51 > 8202)
            break;
          if (v51 != 32 && v51 != 160)
            goto LABEL_84;
LABEL_80:
          ++v49;
          v50 = *(_QWORD *)(a3 + 16);
          if (v49 >= v50)
            goto LABEL_85;
        }
        if (v51 == 8203)
          goto LABEL_80;
        if (v51 == 12288 || v51 == 65279)
          goto LABEL_80;
LABEL_84:
        v50 = *(_QWORD *)(a3 + 16);
LABEL_85:
        v43 = a7;
LABEL_86:
        if (v49 == v50)
        {
          v56 = v43[1];
          v55 = (unint64_t)v43[2];
          if ((unint64_t)v56 >= v55)
          {
            v58 = ((char *)v56 - (_BYTE *)*v43) >> 3;
            if ((unint64_t)(v58 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v59 = v55 - (_QWORD)*v43;
            v60 = v59 >> 2;
            if (v59 >> 2 <= (unint64_t)(v58 + 1))
              v60 = v58 + 1;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            if (v61)
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a7 + 2), v61);
            else
              v62 = 0;
            v63 = &v62[8 * v58];
            *(_QWORD *)v63 = v47;
            v57 = v63 + 8;
            v65 = (char *)*v43;
            v64 = (char *)v43[1];
            if (v64 != *v43)
            {
              do
              {
                v66 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v63 - 1) = v66;
                v63 -= 8;
              }
              while (v64 != v65);
              v64 = (char *)*v43;
            }
            *v43 = v63;
            v43[1] = v57;
            v43[2] = &v62[8 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v56 = v47;
            v57 = v56 + 1;
          }
          v43[1] = v57;
          if (v47)
          {
            v67 = a4;
            v68 = a4;
            v69 = (uint64_t **)v47;
            do
            {
              v70 = (unint64_t)v69[2];
              v71 = v70 < v68 || v70 >= a5;
              if (!v71 || v70 < v68 && (unint64_t)v69[3] >= v68)
              {
                if (v70 < v67 && (unint64_t)v69[3] >= v67)
                  v68 = (unint64_t)v69[2];
                v72 = *v69[1];
                v73 = *(_QWORD *)(v72 + 120);
                if (*(_QWORD *)(v72 + 128) != v73)
                {
                  v74 = 0;
                  do
                  {
                    v141 = 0;
                    v75 = *(_QWORD *)(v73 + 8 * v74);
                    v141 = v75;
                    if (!*((_BYTE *)v47 + 32))
                      goto LABEL_122;
                    Tag = TTagManager::getTag(*(_QWORD *)(a1 + 136), v75);
                    if (!Tag)
                      goto LABEL_122;
                    if (*(char *)(Tag + 23) < 0)
                      Tag = *(_QWORD *)Tag;
                    if (wcsncmp((const __int32 *)Tag, dword_209A7E0C8, 6uLL))
LABEL_122:
                      std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a8, (unint64_t *)&v141, &v141);
                    ++v74;
                    v73 = *(_QWORD *)(v72 + 120);
                  }
                  while (v74 < (*(_QWORD *)(v72 + 128) - v73) >> 3);
                }
                v67 = a4;
              }
              v69 = (uint64_t **)*v69;
            }
            while (v69);
          }
          v122 = 1;
        }
LABEL_127:
        v77 = *(_QWORD **)(v48 + 24);
        if (v77)
        {
          v125 = v46;
          do
          {
            v131 = v47[3];
            v78 = (const __int32 *)(*v77 + 48);
            v139 = *v77;
            v135 = v77;
            if (*(char *)(*v77 + 71) < 0)
            {
              v128 = wcslen(*(const __int32 **)v78);
              v79 = **(_DWORD **)v78;
              if (!v79)
                goto LABEL_158;
            }
            else
            {
              v128 = wcslen(v78);
              v79 = *v78;
              if (!*v78)
                goto LABEL_158;
            }
            if ((v80 & 1) == 0
            {
              v119 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v119);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v119;
              a3 = v133;
              v47 = v137;
            }
            if (v79 <= 8202)
            {
              if (v79 != 32 && v79 != 160)
                goto LABEL_143;
            }
            else if (v79 != 8203 && v79 != 12288 && v79 != 65279)
            {
LABEL_143:
              v82 = v131;
              if (v131 < *(_QWORD *)(a3 + 16))
              {
                do
                {
                  v131 = v82;
                  v83 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v82);
                  if ((v84 & 1) == 0
                  {
                    v86 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v86);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v86;
                    a3 = v133;
                    v77 = v135;
                    v47 = v137;
                  }
                  if (v83 <= 8202)
                  {
                    if (v83 != 32 && v83 != 160)
                      goto LABEL_158;
                  }
                  else
                  {
                    v85 = v83 == 8203 || v83 == 65279;
                    if (!v85 && v83 != 12288)
                      goto LABEL_158;
                  }
                  v82 = v131 + 1;
                }
                while (v131 + 1 < *(_QWORD *)(a3 + 16));
                ++v131;
              }
            }
LABEL_158:
            v88 = *(_QWORD *)(a3 + 8);
            v87 = *(_QWORD *)(a3 + 16);
            if (v87 >= v88)
            {
              if (*(_BYTE *)(a3 + 1048))
              {
                LODWORD(v141) = 0;
                TBuffer<wchar_t>::insert(a3, v87, (int *)&v141, 1uLL);
                --*(_QWORD *)(a3 + 16);
                v89 = *(const __int32 **)a3;
              }
              else
              {
                v89 = *(const __int32 **)a3;
                if (v88)
                  v89[v88 - 1] = 0;
              }
            }
            else
            {
              v89 = *(const __int32 **)a3;
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v87) = 0;
            }
            if (*(char *)(v139 + 71) < 0)
              v78 = *(const __int32 **)v78;
            if (!wcsncmp(&v89[v131], v78, v128))
            {
              v90 = *((_BYTE *)v47 + 32) != 0;
              v91 = *(_QWORD *)(v139 + 120);
              if (*(_QWORD *)(v139 + 128) == v91)
                goto LABEL_194;
              v129 = *((_BYTE *)v47 + 32) != 0;
              v92 = 0;
              v93 = 0;
              do
              {
                v94 = TTagManager::getTag(*(_QWORD *)(a1 + 136), *(_QWORD *)(v91 + 8 * v92));
                v95 = (__int32 *)v94;
                if (v94)
                {
                  if (*(char *)(v94 + 23) < 0)
                    v95 = *(__int32 **)v94;
                  if (!wcsncmp(v95, dword_209A7E070, 5uLL))
                  {
                    v96 = wcschr(v95, 61);
                    v97 = (uint64_t **)v137;
                    if (v137)
                    {
                      v98 = v96 - v95;
                      v99 = v96 + 1;
                      v100 = v93;
                      do
                      {
                        v101 = *v97[1];
                        v102 = *(_QWORD *)(v101 + 120);
                        if (*(_QWORD *)(v101 + 128) == v102)
                        {
LABEL_187:
                          if ((v100 & 1) != 0)
                          {
                            v93 = 1;
                            break;
                          }
                        }
                        else
                        {
                          v103 = 0;
                          while (1)
                          {
                            v104 = TTagManager::getTag(*(_QWORD *)(a1 + 136), *(_QWORD *)(v102 + 8 * v103));
                            v105 = v104;
                            if (v104)
                            {
                              if (*(char *)(v104 + 23) < 0)
                                v104 = *(_QWORD *)v104;
                              if (!wcsncmp((const __int32 *)v104, v95, v98 + 1))
                              {
                                if (*(char *)(v105 + 23) < 0)
                                  v105 = *(_QWORD *)v105;
                                if (wcscmp((const __int32 *)(v105 + 4 * v98 + 4), v99))
                                  break;
                              }
                            }
                            ++v103;
                            v102 = *(_QWORD *)(v101 + 120);
                            if (v103 >= (*(_QWORD *)(v101 + 128) - v102) >> 3)
                              goto LABEL_187;
                          }
                          v129 = 1;
                          v93 = 1;
                          if ((v95[5] == 83) | v100 & 1)
                            break;
                        }
                        v100 = 0;
                        v93 = 0;
                        v97 = (uint64_t **)*v97;
                      }
                      while (v97);
                    }
                  }
                }
                ++v92;
                v47 = v137;
                v91 = *(_QWORD *)(v139 + 120);
                a3 = v133;
                v77 = v135;
              }
              while (v92 < (*(_QWORD *)(v139 + 128) - v91) >> 3);
              v46 = v125;
              v90 = v129;
              if ((v93 & 1) == 0)
              {
LABEL_194:
                v106 = TAllocator::allocate(a6, 40);
                v107 = v106;
                v108 = v47[3];
                *v106 = v47;
                v106[1] = v77;
                v106[2] = v108;
                v106[3] = v131 + v128;
                *((_BYTE *)v106 + 32) = v90;
                v109 = v143;
                if ((unint64_t)v143 >= v144[0])
                {
                  v111 = (v143 - v142) >> 3;
                  if ((unint64_t)(v111 + 1) >> 61)
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  v112 = (uint64_t)(v144[0] - (_QWORD)v142) >> 2;
                  if (v112 <= v111 + 1)
                    v112 = v111 + 1;
                  if (v144[0] - (_QWORD)v142 >= 0x7FFFFFFFFFFFFFF8uLL)
                    v113 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v113 = v112;
                  if (v113)
                    v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v144, v113);
                  else
                    v114 = 0;
                  v115 = &v114[8 * v111];
                  *(_QWORD *)v115 = v107;
                  v110 = v115 + 8;
                  v117 = v142;
                  v116 = v143;
                  if (v143 != v142)
                  {
                    do
                    {
                      v118 = *((_QWORD *)v116 - 1);
                      v116 -= 8;
                      *((_QWORD *)v115 - 1) = v118;
                      v115 -= 8;
                    }
                    while (v116 != v117);
                    v116 = v142;
                  }
                  v142 = v115;
                  v143 = v110;
                  v144[0] = &v114[8 * v113];
                  if (v116)
                    operator delete(v116);
                }
                else
                {
                  *(_QWORD *)v143 = v106;
                  v110 = v109 + 8;
                }
                v143 = v110;
              }
            }
            v77 = (_QWORD *)v77[5];
          }
          while (v77);
        }
        ++v46;
        v45 = v142;
        v43 = a7;
        if (v46 >= (v143 - v142) >> 3)
        {
          if (v142)
            goto LABEL_217;
          goto LABEL_218;
        }
      }
    }
    v122 = 0;
    if (v142)
    {
LABEL_217:
      v143 = v45;
      operator delete(v45);
    }
LABEL_218:
    v120 = v122;
  }
  return v120 & 1;
}

void sub_2099DE8DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void TFormatter::replace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  TFormatter *v13;
  char v14;
  uint64_t v15;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  uint64_t v18;
  _QWORD *Result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t i;
  size_t v44;
  size_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  size_t v55;
  unint64_t v56;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t **v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char v85;
  int v86;
  unint64_t v87;
  size_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  size_t v93;
  int v94;
  int v95;
  unsigned __int8 v96;
  BOOL v97;
  TLocaleInfo *v98;
  int v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  TLocaleInfo *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD **v134;
  _QWORD *v135;
  _QWORD **v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t Tag;
  uint64_t v140;
  __int32 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  __int32 *j;
  __int32 *v150;
  __int32 v151;
  size_t v152;
  uint64_t *v153;
  size_t v154;
  uint64_t v155;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  _QWORD **v165;
  _QWORD *v166;
  _QWORD **v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  __int32 *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void **v177;
  uint64_t *v178;
  uint64_t *v179;
  _QWORD *v180;
  unint64_t v181;
  __int32 *v182;
  uint64_t v183;
  const __int32 *v184;
  _QWORD *v185;
  uint64_t v186;
  const __int32 *v187;
  uint64_t v188;
  const void *v189;
  unsigned int *v190;
  const void *v191;
  TBoolParam *v192;
  int v193;
  int v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  TBoolParam *v202;
  unint64_t v203;
  unsigned int *v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  unint64_t v208;
  unsigned __int8 *v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  _QWORD *v235;
  unint64_t v236;
  _QWORD **v237;
  _QWORD *v238;
  _QWORD **v239;
  unint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void **v251;
  uint64_t *v252;
  uint64_t *v253;
  unsigned int *v254;
  __int32 *v255;
  __int32 *v256;
  uint64_t *v257;
  size_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  const __int32 *v269;
  const void **v270;
  uint64_t v271;
  const __int32 *v272;
  int *v273;
  uint64_t v274;
  uint64_t v275;
  const void *v276;
  TBoolParam *v277;
  int v278;
  int v279;
  _QWORD *v280;
  unint64_t v281;
  _QWORD **v282;
  _QWORD *v283;
  _QWORD **v284;
  unint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD **v289;
  _QWORD *v290;
  _QWORD **v291;
  unint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  TBoolParam *v301;
  unsigned int *v302;
  unint64_t v303;
  unsigned int v304;
  unsigned int v305;
  unint64_t v306;
  unsigned __int8 *v307;
  int v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  int *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void **v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void **v323;
  unsigned int *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void **v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  int *v334;
  __int32 *k;
  uint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  _QWORD **v339;
  _QWORD *v340;
  _QWORD **v341;
  unint64_t v342;
  _QWORD *v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t *v348;
  uint64_t v349;
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unsigned __int8 *__s;
  uint64_t v369;
  void *v370[2];
  char v371;
  __int32 *v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  void *v376;
  _BYTE *v377;
  uint64_t v378;
  _BYTE *v379;
  __int128 v380;
  _BYTE v381[1809];
  char v382;
  _BYTE *v383;
  __int128 v384;
  _BYTE v385[1024];
  char v386;
  _BYTE *v387;
  __int128 v388;
  _BYTE v389[1024];
  char v390;
  int *v391;
  __int128 v392;
  _BYTE v393[1024];
  char v394;
  _BYTE *v395;
  __int128 v396;
  _BYTE v397[1024];
  char v398;
  const __int32 *v399;
  __int128 v400;
  _BYTE v401[1024];
  char v402;
  void *v403;
  char *v404;
  char *v405;
  void *v406;
  char *v407;
  char *v408;
  void *v409;
  void *v410;
  uint64_t v411;
  void *v412;
  void *v413;
  uint64_t v414;
  _BYTE v415[40];
  uint64_t *v416;
  _QWORD *v417[2];
  uint64_t *v418;
  _QWORD *v419[2];
  uint64_t *v420[13];
  uint64_t v421;
  uint64_t v422;
  void *v423;
  _BYTE *v424;
  uint64_t v425;
  void *__p;
  char *v427;
  char *v428;
  _BYTE *v429;
  __int128 v430;
  _BYTE v431[1024];
  char v432;
  unsigned int *v433;
  __int128 v434;
  _BYTE v435[1024];
  char v436;
  _BYTE *v437;
  __int128 v438;
  _BYTE v439[256];
  char v440;
  _BYTE *v441;
  __int128 v442;
  _BYTE v443[256];
  char v444;
  uint64_t v445;

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = v6;
  __s = v9;
  v369 = v8;
  v365 = v10;
  v366 = v11;
  v367 = v12;
  v13 = (TFormatter *)v5;
  v445 = *MEMORY[0x24BDAC8D0];
  v433 = (unsigned int *)v435;
  v434 = xmmword_209A57DD0;
  v436 = 1;
  if ((v14 & 8) == 0)
    goto LABEL_2;
  v15 = *(_QWORD *)(v5 + 48);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 5768));
  ValidConfig = TParam::getValidConfig((TParam *)(v15 + 5768), ActiveConfigHandle);
  if (!v369 || !*(_BYTE *)(v15 + ValidConfig + 5920) || !*__s || v369 + v366 <= v366)
    goto LABEL_2;
  v18 = 0;
  while (1)
  {
    Result = (_QWORD *)TResultManager::getResult(*((_QWORD *)v13 + 16), *(_QWORD *)(v367 + 8 * v366 + 8 * v18));
    if (Result[3] || Result[5] != Result[4])
      break;
    if (v369 == ++v18)
      goto LABEL_2;
  }
  if ((TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, __s, (uint64_t)&v433) & 1) != 0)
    goto LABEL_2;
  v363 = v7;
  v429 = v431;
  v430 = xmmword_209A57DD0;
  v432 = 1;
  v441 = v443;
  v442 = xmmword_209A57DD0;
  v444 = 1;
  v427 = 0;
  __p = 0;
  v428 = 0;
  v379 = 0;
  std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&__p, &v379);
  v20 = v366;
  do
  {
    v21 = TResultManager::getResult(*((_QWORD *)v13 + 16), *(_QWORD *)(v367 + 8 * v20));
    v22 = *(_QWORD *)(v21 + 104);
    if (*(_QWORD *)(v21 + 112) != v22)
    {
      v23 = 0;
      v24 = v427;
      do
      {
        v25 = *(_QWORD *)(v22 + 8 * v23) + *((_QWORD *)v24 - 1);
        if (v24 >= v428)
        {
          v27 = (char *)__p;
          v28 = (v24 - (_BYTE *)__p) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v30 = v428 - (_BYTE *)__p;
          if ((v428 - (_BYTE *)__p) >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v428, v31);
            v24 = v427;
            v27 = (char *)__p;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[8 * v28];
          *(_QWORD *)v33 = v25;
          v26 = v33 + 8;
          while (v24 != v27)
          {
            v34 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v33 - 1) = v34;
            v33 -= 8;
          }
          __p = v33;
          v427 = v26;
          v428 = &v32[8 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v24 = v25;
          v26 = v24 + 8;
        }
        v427 = v26;
        v23 += 2;
        v22 = *(_QWORD *)(v21 + 104);
        v24 = v26;
      }
      while (v23 < (*(_QWORD *)(v21 + 112) - v22) >> 3);
    }
    v35 = 0;
    v36 = *(char **)(v21 + 16);
    while (v36[v35++])
      ;
    TBuffer<char>::insert((uint64_t)&v441, *((unint64_t *)&v442 + 1), v36, v35 - 1);
    TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, *(unsigned __int8 **)(v21 + 16), (uint64_t)&v429);
    ++v20;
  }
  while (v20 != v369 + v366);
  v38 = (char *)__s;
  v39 = 0;
  if (*((_QWORD *)&v442 + 1))
  {
    v40 = 0;
    v41 = 0;
    v42 = (v427 - (_BYTE *)__p) >> 3;
    v7 = v363;
    while (1)
    {
      if (v40 < v42)
      {
        for (i = *((_QWORD *)__p + v40); i <= v39; i = *((_QWORD *)__p + ++v40))
        {
          v41 = i;
          if (v42 - 1 == v40)
          {
            v40 = (v427 - (_BYTE *)__p) >> 3;
            break;
          }
        }
      }
      if (__s[v39] != v441[v39])
        break;
      if (++v39 == *((_QWORD *)&v442 + 1))
      {
        v44 = strlen((const char *)__s);
        goto LABEL_54;
      }
    }
  }
  else
  {
    v41 = 0;
    v40 = 0;
    v7 = v363;
  }
  v45 = strlen((const char *)__s);
  v44 = v45;
  if (v39 == *((_QWORD *)&v442 + 1))
  {
LABEL_54:
    if (!__s[*((_QWORD *)&v442 + 1)])
    {
      if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
        tknPrintString("No text differences; can't generate hints\n");
      **(_QWORD **)v7 = -1;
      *(_QWORD *)(*(_QWORD *)v7 + 8) = TResultManager::merge(*((_QWORD **)v13 + 16), (_QWORD *)(v367 + 8 * v366), v369);
      *(_QWORD *)(*(_QWORD *)v7 + 16) = -1;
      v86 = 1;
      goto LABEL_604;
    }
    if (v40 < (v427 - (_BYTE *)__p) >> 3)
    {
      v46 = *((_QWORD *)__p + v40);
      if (v46 <= *((_QWORD *)&v442 + 1))
      {
        v47 = (unint64_t *)((char *)__p + 8 * v40 + 8);
        v48 = ~v40 + ((v427 - (_BYTE *)__p) >> 3);
        do
        {
          v41 = v46;
          if (!v48)
            break;
          v49 = *v47++;
          v46 = v49;
          --v48;
        }
        while (v49 <= *((_QWORD *)&v442 + 1));
      }
    }
  }
  else if (*((_QWORD *)&v442 + 1) && v45)
  {
    v50 = 0;
    v51 = (v427 - (_BYTE *)__p) >> 3;
    v52 = *((_QWORD *)&v442 + 1);
    v53 = *((_QWORD *)&v442 + 1);
    v54 = v45;
    do
    {
      v55 = v54;
      v56 = v53;
      --v54;
      if (--v53 <= v41 || v54 <= v41)
        break;
      if (v50 < v51)
      {
        v58 = *((_QWORD *)__p + v51 + ~v50);
        if (v58 > v53)
        {
          v59 = (unint64_t *)((char *)__p + ((v427 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF8) + -8 * v50 - 16);
          while (1)
          {
            v52 = v58;
            if (v51 - 1 == v50)
              break;
            v60 = *v59--;
            v58 = v60;
            ++v50;
            if (v60 <= v53)
              goto LABEL_76;
          }
          v50 = (v427 - (_BYTE *)__p) >> 3;
        }
      }
LABEL_76:
      ;
    }
    while (__s[v54] == v441[v53]);
    v61 = v55 - v56 + v52;
    goto LABEL_79;
  }
  v52 = *((_QWORD *)&v442 + 1);
  v61 = v44;
  do
  {
LABEL_79:
    v62 = v41;
    if (!v41)
      break;
    --v41;
  }
  while (__s[v62 - 1] == 32);
  if (v61 < v44)
  {
    while (__s[v61] == 32)
    {
      if (v44 == ++v61)
      {
        v61 = v44;
        break;
      }
    }
  }
  if (v52 < *((_QWORD *)&v442 + 1))
  {
    while (v441[v52] == 32)
    {
      if (*((_QWORD *)&v442 + 1) == ++v52)
      {
        v52 = *((_QWORD *)&v442 + 1);
        break;
      }
    }
  }
  if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
  {
    v63 = TBuffer<char>::c_str((uint64_t)&v441);
    tknPrintf("REPLACEMENT OLD TEXT (%llu,%llu): <%s>\n", v64, v65, v66, v67, v62, v52, v63);
    tknPrintf("REPLACEMENT NEW TEXT (%llu,%llu): <%s>\n", v68, v69, v70, v71, v62, v61, __s);
  }
  v424 = 0;
  v423 = 0;
  v425 = 0;
  TFsa::TFsa((TFsa *)v420);
  v72 = (uint64_t *)(v367 + 8 * v366);
  v359 = (unint64_t)&v72[v369];
  v360 = v72;
  TFormatter::addWords((uint64_t)v13, v72, v359, 0, &v423);
  TFormatter::constructGraph(v13, (uint64_t *)&v423, 0, -1227133513 * ((v424 - (_BYTE *)v423) >> 4), v420);
  v419[1] = 0;
  v419[0] = 0;
  v418 = (uint64_t *)v419;
  v417[1] = 0;
  v417[0] = 0;
  v416 = (uint64_t *)v417;
  TAllocator::TAllocator((TAllocator *)v415, 2048);
  v413 = 0;
  v412 = 0;
  v414 = 0;
  v410 = 0;
  v409 = 0;
  v411 = 0;
  if (!TFormatter::collectTags((uint64_t)v13, (uint64_t)v420, (uint64_t)&v433, v62, v61, (TAllocator *)v415, &v409, &v416)|| !TFormatter::collectTags((uint64_t)v13, (uint64_t)v420, (uint64_t)&v429, v62, v52, (TAllocator *)v415, &v412, &v418))
  {
    v85 = 0;
    goto LABEL_579;
  }
  **(_QWORD **)v7 = -1;
  v357 = v62;
  v358 = v61;
  *(_QWORD *)(*(_QWORD *)v7 + 8) = TResultManager::merge(*((_QWORD **)v13 + 16), v360, v369);
  *(_QWORD *)(*(_QWORD *)v7 + 16) = -1;
  v407 = 0;
  v406 = 0;
  v408 = 0;
  v73 = *(uint64_t ***)v409;
  if (*(_QWORD *)v409)
  {
    v74 = 0;
    do
    {
      v75 = *v73[1];
      if (v74 >= v408)
      {
        v76 = (v74 - (_BYTE *)v406) >> 3;
        if ((unint64_t)(v76 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v77 = (v408 - (_BYTE *)v406) >> 2;
        if (v77 <= v76 + 1)
          v77 = v76 + 1;
        if ((unint64_t)(v408 - (_BYTE *)v406) >= 0x7FFFFFFFFFFFFFF8)
          v78 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v78 = v77;
        if (v78)
          v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v408, v78);
        else
          v79 = 0;
        v80 = &v79[8 * v76];
        *(_QWORD *)v80 = v75;
        v74 = v80 + 8;
        v81 = v407;
        v82 = (char *)v406;
        if (v407 == v406)
        {
          v38 = (char *)__s;
        }
        else
        {
          v38 = (char *)__s;
          do
          {
            v83 = *((_QWORD *)v81 - 1);
            v81 -= 8;
            *((_QWORD *)v80 - 1) = v83;
            v80 -= 8;
          }
          while (v81 != v82);
          v81 = (char *)v406;
        }
        v406 = v80;
        v407 = v74;
        v408 = &v79[8 * v78];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *(_QWORD *)v74 = v75;
        v74 += 8;
        v38 = (char *)__s;
      }
      v407 = v74;
      v73 = (uint64_t **)*v73;
    }
    while (v73);
    v84 = (char *)v406;
  }
  else
  {
    v84 = 0;
    v74 = 0;
  }
  v404 = 0;
  v403 = 0;
  v405 = 0;
  v437 = v439;
  v438 = xmmword_209A57DD0;
  v440 = 1;
  if (v74 == v84)
  {
    v109 = 0;
    goto LABEL_206;
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v362 = 0;
  v90 = (v74 - v84) >> 3;
  while (1)
  {
    v379 = 0;
    v91 = *(_QWORD *)&v84[8 * v90 + 8 * ~v87];
    TBuffer<char>::resize((uint64_t)&v437, 0);
    v92 = (unsigned int *)(v91 + 48);
    if (*(char *)(v91 + 71) < 0)
      v92 = *(unsigned int **)v92;
    TLocaleInfo::unicodeToMultiByte(*((_QWORD *)v13 + 4) + 240, v92, (uint64_t)&v437);
    if (!*((_QWORD *)&v438 + 1))
    {
      v101 = *(_QWORD *)(v91 + 8);
      if (v101 == -1)
        v101 = v362;
      if (*(_QWORD *)(v91 + 16) != -1)
      {
        v102 = v101;
        v103 = v88 - v89;
        v104 = v404;
        v105 = v405;
        if (v404 >= v405)
        {
          v110 = (char *)v403;
          v111 = (v404 - (_BYTE *)v403) >> 3;
          v112 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v113 = v405 - (_BYTE *)v403;
          if ((v405 - (_BYTE *)v403) >> 2 > v112)
            v112 = v113 >> 2;
          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
            v114 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v114 = v112;
          if (v114)
          {
            v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v405, v114);
            v104 = v404;
            v110 = (char *)v403;
          }
          else
          {
            v115 = 0;
          }
          v116 = &v115[8 * v111];
          *(_QWORD *)v116 = v103;
          v106 = v116 + 8;
          while (v104 != v110)
          {
            v117 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *((_QWORD *)v116 - 1) = v117;
            v116 -= 8;
          }
          v105 = &v115[8 * v114];
          v403 = v116;
          v404 = v106;
          v405 = v105;
          if (v110)
          {
            operator delete(v110);
            v105 = v405;
          }
        }
        else
        {
          *(_QWORD *)v404 = v103;
          v106 = v104 + 8;
        }
        v404 = v106;
        v118 = *(_QWORD *)(v91 + 16) - v102;
        if (v106 >= v105)
        {
          v120 = (char *)v403;
          v121 = (v106 - (_BYTE *)v403) >> 3;
          v122 = v121 + 1;
          if ((unint64_t)(v121 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v123 = v105 - (_BYTE *)v403;
          if (v123 >> 2 > v122)
            v122 = v123 >> 2;
          if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
            v124 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v124 = v122;
          if (v124)
          {
            v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v405, v124);
            v106 = v404;
            v120 = (char *)v403;
          }
          else
          {
            v125 = 0;
          }
          v126 = &v125[8 * v121];
          *(_QWORD *)v126 = v118;
          v119 = v126 + 8;
          if (v106 == v120)
          {
            v38 = (char *)__s;
          }
          else
          {
            v38 = (char *)__s;
            do
            {
              v127 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *((_QWORD *)v126 - 1) = v127;
              v126 -= 8;
            }
            while (v106 != v120);
          }
          v403 = v126;
          v404 = v119;
          v405 = &v125[8 * v124];
          if (v120)
            operator delete(v120);
        }
        else
        {
          *(_QWORD *)v106 = v118;
          v119 = v106 + 8;
          v38 = (char *)__s;
        }
        v404 = v119;
        v101 = *(_QWORD *)(v91 + 16);
        v89 = v88;
      }
      v362 = v101;
      v109 = v89;
      goto LABEL_200;
    }
    v361 = v87;
    v93 = v89;
    LODWORD(v395) = 0;
    v94 = TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, (unsigned __int8 *)&v38[v88], &v395);
    while (*v437 != v38[v88])
    {
      v95 = (int)v395;
      if ((v96 & 1) == 0
      {
        v98 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v98);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v98;
      }
      if (v95 <= 8202)
      {
        if (v95 != 32 && v95 != 160)
          break;
      }
      else
      {
        v97 = v95 == 8203 || v95 == 65279;
        if (!v97 && v95 != 12288)
          break;
      }
      if (v88 < v44)
        v379 += v94;
      v88 += v94;
      v38 = (char *)__s;
      v94 = TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, &__s[v88], &v395);
    }
    v38 = (char *)__s;
    TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, &__s[v93], &v395);
    if (v379)
    {
      v99 = (int)v395;
      if ((v100 & 1) == 0
      {
        v128 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v128);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v128;
        v38 = (char *)__s;
      }
      if (v99 <= 8202)
      {
        if (v99 == 32 || v99 == 160)
        {
LABEL_156:
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v379);
          v399 = 0;
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v399);
          v93 = v88;
        }
      }
      else if (v99 == 8203 || v99 == 65279 || v99 == 12288)
      {
        goto LABEL_156;
      }
    }
    if (v88 >= v44)
      break;
    if (*(_QWORD *)(v91 + 8) == -1)
      v107 = v362;
    else
      v107 = *(_QWORD *)(v91 + 8);
    v88 += *((_QWORD *)&v438 + 1);
    v108 = *(_QWORD *)(v91 + 16);
    if (v108 == -1)
    {
      v108 = v107;
      v109 = v93;
    }
    else
    {
      v109 = v88;
      if (v88 <= v44)
      {
        v399 = (const __int32 *)(v88 - v93);
        std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v399);
        v399 = (const __int32 *)(*(_QWORD *)(v91 + 16) - v107);
        std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v399);
        v108 = *(_QWORD *)(v91 + 16);
        v109 = v88;
      }
    }
    v362 = v108;
    v89 = v109;
    v87 = v361;
LABEL_200:
    ++v87;
    v84 = (char *)v406;
    v90 = (v407 - (_BYTE *)v406) >> 3;
    if (v87 >= v90)
      goto LABEL_206;
  }
  v109 = v93;
LABEL_206:
  v7 = v363;
  if (v44 > v109)
  {
    v379 = (_BYTE *)(v44 - v109);
    std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v379);
    v379 = 0;
    std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v403, &v379);
  }
  TResultManager::setResultText(*((_QWORD *)v13 + 16), *(_QWORD *)(*(_QWORD *)v363 + 8), v38, (uint64_t)&v403);
  v129 = *((_QWORD *)v13 + 16);
  v130 = *(_QWORD *)(*(_QWORD *)v363 + 8);
  *(_QWORD *)(v129 + 88) = -1;
  std::vector<THint>::resize((uint64_t *)(v129 + 64), 0);
  *(_QWORD *)(v129 + 88) = v130;
  v399 = (const __int32 *)v401;
  v400 = xmmword_209A57DD0;
  v402 = 1;
  v395 = v397;
  v396 = xmmword_209A57DD0;
  v398 = 1;
  v391 = (int *)v393;
  v392 = xmmword_209A57DD0;
  v394 = 1;
  v387 = v389;
  v388 = xmmword_209A57DD0;
  v390 = 1;
  v383 = v385;
  v384 = xmmword_209A57DD0;
  v386 = 1;
  v378 = 0;
  v379 = v381;
  v380 = xmmword_209A57DD0;
  v382 = 1;
  v376 = 0;
  v377 = 0;
  v373 = 0;
  v374 = 0;
  v375 = 0;
  v131 = v416;
  if (v416 != (uint64_t *)v417)
  {
    do
    {
      v132 = v419[0];
      v133 = v131[4];
      if (!v419[0])
        goto LABEL_622;
      v134 = v419;
      do
      {
        v135 = v132;
        v136 = v134;
        v137 = v132[4];
        v138 = v132 + 1;
        if (v137 >= v133)
        {
          v138 = v135;
          v134 = (_QWORD **)v135;
        }
        v132 = (_QWORD *)*v138;
      }
      while (v132);
      if (v134 == v419)
        goto LABEL_622;
      if (v137 < v133)
        v135 = v136;
      if (v133 < v135[4])
      {
LABEL_622:
        Tag = TTagManager::getTag(*((_QWORD *)v13 + 17), v133);
        v140 = Tag;
        if (Tag)
        {
          v372 = 0;
          if (*(char *)(Tag + 23) < 0)
            v141 = *(__int32 **)Tag;
          else
            v141 = (__int32 *)Tag;
          v372 = v141;
          v142 = *((_QWORD *)v13 + 6);
          v143 = TParam::getActiveConfigHandle((TParam *)(v142 + 19248));
          if (*(_BYTE *)(v142 + TParam::getValidConfig((TParam *)(v142 + 19248), v143) + 19400))
          {
            loggableUnicode((unsigned int *)v372, v370);
            v148 = v370;
            if (v371 < 0)
              v148 = (void **)v370[0];
            tknPrintf("NEW TAG: <%s>\n", v144, v145, v146, v147, v148);
            if (v371 < 0)
              operator delete(v370[0]);
          }
          if (!wcsncmp(v372, dword_209A7E070, 5uLL))
          {
            if (v372[5] != 66 || (v152 = wcslen(v372), v153 = v416, v416 == (uint64_t *)v417))
            {
LABEL_249:
              std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100](&v376, &v372);
            }
            else
            {
              v154 = v152 - 1;
              while (1)
              {
                v155 = TTagManager::getTag(*((_QWORD *)v13 + 17), v153[4]);
                if (v155 && v155 != v140)
                {
                  if (*(char *)(v155 + 23) < 0)
                    v155 = *(_QWORD *)v155;
                  if (!wcsncmp((const __int32 *)v155, v372, v154))
                    break;
                }
                v157 = (uint64_t *)v153[1];
                if (v157)
                {
                  do
                  {
                    v158 = v157;
                    v157 = (uint64_t *)*v157;
                  }
                  while (v157);
                }
                else
                {
                  do
                  {
                    v158 = (uint64_t *)v153[2];
                    v97 = *v158 == (_QWORD)v153;
                    v153 = v158;
                  }
                  while (!v97);
                }
                v153 = v158;
                if (v158 == (uint64_t *)v417)
                  goto LABEL_249;
              }
            }
          }
          else if (!wcsncmp(v372, dword_209A7E0E4, 4uLL))
          {
            for (j = wcschr(v372 + 4, 61); j; j = wcschr(v150, 61))
            {
              v151 = j[1];
              v150 = j + 1;
              if (v151 == 29)
              {
                std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100]((void **)&v373, &v372);
                break;
              }
            }
          }
          v7 = v363;
        }
      }
      v159 = (uint64_t *)v131[1];
      if (v159)
      {
        do
        {
          v160 = v159;
          v159 = (uint64_t *)*v159;
        }
        while (v159);
      }
      else
      {
        do
        {
          v160 = (uint64_t *)v131[2];
          v97 = *v160 == (_QWORD)v131;
          v131 = v160;
        }
        while (!v97);
      }
      v131 = v160;
    }
    while (v160 != (uint64_t *)v417);
    if (v376 != v377)
    {
      v161 = v416;
      if (v416 != (uint64_t *)v417)
      {
        if ((unint64_t)((v377 - (_BYTE *)v376) >> 3) <= 1)
          v162 = 1;
        else
          v162 = (v377 - (_BYTE *)v376) >> 3;
        do
        {
          v163 = v419[0];
          if (v419[0])
          {
            v164 = v161[4];
            v165 = v419;
            do
            {
              v166 = v163;
              v167 = v165;
              v168 = v163[4];
              v169 = v163 + 1;
              if (v168 >= v164)
              {
                v169 = v166;
                v165 = (_QWORD **)v166;
              }
              v163 = (_QWORD *)*v169;
            }
            while (v163);
            if (v165 != v419)
            {
              if (v168 < v164)
                v166 = v167;
              if (v164 >= v166[4])
              {
                v170 = TTagManager::getTag(*((_QWORD *)v13 + 17), v164);
                if (v170)
                {
                  v372 = 0;
                  if (*(char *)(v170 + 23) < 0)
                    v170 = *(_QWORD *)v170;
                  v372 = (__int32 *)v170;
                  if (wcsncmp((const __int32 *)v170, dword_209A7E0F8, 6uLL))
                    break;
                  v171 = wcschr(v372 + 6, 61);
                  v172 = 0;
                  while (wcsncmp(*((const __int32 **)v376 + v172), v372, v171 - v372 + 1))
                  {
                    if (v162 == ++v172)
                      goto LABEL_286;
                  }
                  std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100](&v376, &v372);
                  if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
                  {
                    loggableUnicode((unsigned int *)v372, v370);
                    v177 = v371 >= 0 ? v370 : (void **)v370[0];
                    tknPrintf("NEW TAG (OVERLAP): <%s>\n", v173, v174, v175, v176, v177);
                    if (v371 < 0)
                      operator delete(v370[0]);
                  }
                }
              }
            }
          }
LABEL_286:
          v178 = (uint64_t *)v161[1];
          if (v178)
          {
            do
            {
              v179 = v178;
              v178 = (uint64_t *)*v178;
            }
            while (v178);
          }
          else
          {
            do
            {
              v179 = (uint64_t *)v161[2];
              v97 = *v179 == (_QWORD)v161;
              v161 = v179;
            }
            while (!v97);
          }
          v161 = v179;
        }
        while (v179 != (uint64_t *)v417);
      }
      v180 = v376;
      v7 = v363;
      if (v377 != v376)
      {
        v181 = 0;
        do
        {
          v364 = v180[v181];
          v182 = wcschr((__int32 *)(v364 + 24), 61);
          TBuffer<wchar_t>::resize((uint64_t)&v399, 0);
          TBuffer<wchar_t>::insert((uint64_t)&v399, 0, (int *)(v364 + 24), ((uint64_t)v182 - v364 - 24) >> 2);
          v183 = *((_QWORD *)v13 + 6);
          if (*((_QWORD *)&v400 + 1) >= (unint64_t)v400)
          {
            if (v402)
            {
              LODWORD(v370[0]) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v399, *((unint64_t *)&v400 + 1), (int *)v370, 1uLL);
              v184 = v399;
              --*((_QWORD *)&v400 + 1);
            }
            else
            {
              v184 = v399;
              if ((_QWORD)v400)
                v399[v400 - 1] = 0;
            }
          }
          else
          {
            v184 = v399;
            v399[*((_QWORD *)&v400 + 1)] = 0;
          }
          v185 = (_QWORD *)TParamManager::nameToParam(v183, v184);
          if (!v185)
          {
            v186 = *(_QWORD *)(*((_QWORD *)v13 + 4) + 336);
            if (*((_QWORD *)&v400 + 1) >= (unint64_t)v400)
            {
              if (v402)
              {
                LODWORD(v370[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v399, *((unint64_t *)&v400 + 1), (int *)v370, 1uLL);
                v187 = v399;
                --*((_QWORD *)&v400 + 1);
              }
              else
              {
                v187 = v399;
                if ((_QWORD)v400)
                  v399[v400 - 1] = 0;
              }
            }
            else
            {
              v187 = v399;
              v399[*((_QWORD *)&v400 + 1)] = 0;
            }
            v185 = (_QWORD *)TParamManager::nameToParam(v186, v187);
          }
          if (TParam::flagsSet((uint64_t)v185, 1))
          {
            TBuffer<wchar_t>::assign((uint64_t)&v395, v182 + 1);
            (*(void (**)(_QWORD *, _QWORD, _BYTE **))(*v185 + 16))(v185, *(_QWORD *)(*((_QWORD *)v13 + 6) + 136), &v387);
            v188 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 136);
            if (*((_QWORD *)&v396 + 1) >= (unint64_t)v396)
            {
              if (v398)
              {
                LODWORD(v370[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v395, *((unint64_t *)&v396 + 1), (int *)v370, 1uLL);
                --*((_QWORD *)&v396 + 1);
              }
              else if ((_QWORD)v396)
              {
                *(_DWORD *)&v395[4 * v396 - 4] = 0;
              }
            }
            else
            {
              *(_DWORD *)&v395[4 * *((_QWORD *)&v396 + 1)] = 0;
            }
            (*(void (**)(_QWORD *, uint64_t))(*v185 + 32))(v185, v188);
            v189 = (const void *)v185[18];
            if (v189)
            {
              v190 = (unsigned int *)(v364 + 24);
              v191 = (const void *)v185[18];
              v193 = TBoolParam::get(v192);
              if ((v193 & 1) == 0)
                TBoolParam::set(v192, 1);
              v194 = v193 ^ 1;
            }
            else
            {
              v191 = 0;
              v190 = (unsigned int *)(v364 + 24);
              v194 = 0;
            }
            TBuffer<TPItnRuleHandle_fake **>::resize((uint64_t)&v379, 0);
            (*(void (**)(TFormatter *, uint64_t, uint64_t *, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _BYTE **))(*(_QWORD *)v13 + 120))(v13, v367, v360, v359, v367 + 8 * v365, 0, 0, 0, &v379);
            if (*((_QWORD *)&v380 + 1) < 2uLL)
            {
              v197 = *(_QWORD *)v379;
            }
            else
            {
              v195 = (_QWORD *)*((_QWORD *)v13 + 16);
              v196 = (_QWORD *)TBuffer<TPItnResultHandle_fake **>::data((uint64_t)&v379);
              v197 = TResultManager::merge(v195, v196, *((uint64_t *)&v380 + 1));
              if (*((_QWORD *)&v380 + 1))
              {
                v198 = 0;
                do
                  TResultManager::destroy(*((TResult **)v13 + 16), *(_QWORD *)&v379[8 * v198++]);
                while (v198 < *((_QWORD *)&v380 + 1));
              }
            }
            v199 = v197;
            v200 = *(_QWORD *)(TResultManager::getResult(*((_QWORD *)v13 + 16), v197) + 16);
            v201 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 136);
            if (*((_QWORD *)&v388 + 1) >= (unint64_t)v388)
            {
              if (v390)
              {
                LODWORD(v370[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v387, *((unint64_t *)&v388 + 1), (int *)v370, 1uLL);
                --*((_QWORD *)&v388 + 1);
              }
              else if ((_QWORD)v388)
              {
                *(_DWORD *)&v387[4 * v388 - 4] = 0;
              }
            }
            else
            {
              *(_DWORD *)&v387[4 * *((_QWORD *)&v388 + 1)] = 0;
            }
            (*(void (**)(_QWORD *, uint64_t))(*v185 + 32))(v185, v201);
            if (v194)
            {
              if (v191)
              else
                v202 = 0;
              TBoolParam::set(v202, 0);
            }
            v203 = *((_QWORD *)&v434 + 1);
            if (*((_QWORD *)&v434 + 1) >= (unint64_t)v434)
            {
              v205 = v190;
              if (v436)
              {
                LODWORD(v370[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v433, *((unint64_t *)&v434 + 1), (int *)v370, 1uLL);
                v204 = v433;
                v203 = --*((_QWORD *)&v434 + 1);
              }
              else
              {
                v204 = v433;
                if ((_QWORD)v434)
                  v433[(_QWORD)v434 - 1] = 0;
              }
            }
            else
            {
              v204 = v433;
              v433[*((_QWORD *)&v434 + 1)] = 0;
              v205 = v190;
            }
            v206 = *v204;
            while (v206 == 32)
            {
              v207 = v204[1];
              ++v204;
              v206 = v207;
              --v203;
            }
            do
            {
              v208 = v203;
              if (!v203)
                break;
              --v203;
            }
            while (v204[v208 - 1] == 32);
            v209 = (unsigned __int8 *)(v200 - 1);
            do
              v210 = *++v209;
            while (v210 == 32);
            TBuffer<wchar_t>::resize((uint64_t)&v391, 0);
            TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, v209, (uint64_t)&v391);
            v211 = *((_QWORD *)&v392 + 1);
            do
            {
              v212 = v211;
              if (!v211)
                break;
              --v211;
            }
            while (v391[v212 - 1] == 32);
            TBuffer<wchar_t>::resize((uint64_t)&v391, v212);
            v213 = *((_QWORD *)v13 + 4);
            if (*((_QWORD *)&v392 + 1) >= (unint64_t)v392)
            {
              if (v394)
              {
                LODWORD(v370[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v391, *((unint64_t *)&v392 + 1), (int *)v370, 1uLL);
                v214 = v391;
                --*((_QWORD *)&v392 + 1);
              }
              else
              {
                v214 = v391;
                if ((_QWORD)v392)
                  v391[(_QWORD)v392 - 1] = 0;
              }
            }
            else
            {
              v214 = v391;
              v391[*((_QWORD *)&v392 + 1)] = 0;
            }
            if (TLocaleInfo::unicodeStringCompare(v213 + 240, v204, v214, 0, v208))
            {
              if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
              {
                loggableUnicode(v205, v370);
                v219 = v370;
                if (v371 < 0)
                  v219 = (void **)v370[0];
                tknPrintf("Rejecting hint for %s\n", v215, v216, v217, v218, v219);
                if (v371 < 0)
                  operator delete(v370[0]);
                loggableUnicode(v204, v370);
                v224 = v370;
                if (v371 < 0)
                  v224 = (void **)v370[0];
                tknPrintf("Expected hint result: <%s>\n", v220, v221, v222, v223, v224);
                if (v371 < 0)
                  operator delete(v370[0]);
                v225 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v391);
                loggableUnicode(v225, v370);
                v230 = v370;
                if (v371 < 0)
                  v230 = (void **)v370[0];
                tknPrintf("Actual hint result: <%s>\n", v226, v227, v228, v229, v230);
                if (v371 < 0)
                  operator delete(v370[0]);
              }
              TResultManager::destroy(*((TResult **)v13 + 16), v199);
            }
            else
            {
              TResultManager::destroy(*((TResult **)v13 + 16), v199);
              v231 = *((_QWORD *)v13 + 16);
              if (*(_DWORD *)(v364 + 20) == 66)
                v232 = 1;
              else
                v232 = 2;
              v233 = TBuffer<wchar_t>::c_str((uint64_t)&v399);
              TBuffer<wchar_t>::c_str((uint64_t)&v395);
              TResultManager::createHint(v231, v357, v358, v232, v233);
            }
          }
          ++v181;
          v180 = v376;
        }
        while (v181 < (v377 - (_BYTE *)v376) >> 3);
      }
    }
  }
  v234 = v418;
  if (v418 != (uint64_t *)v419)
  {
    do
    {
      v235 = v417[0];
      v236 = v234[4];
      if (!v417[0])
        goto LABEL_623;
      v237 = v417;
      do
      {
        v238 = v235;
        v239 = v237;
        v240 = v235[4];
        v241 = v235 + 1;
        if (v240 >= v236)
        {
          v241 = v238;
          v237 = (_QWORD **)v238;
        }
        v235 = (_QWORD *)*v241;
      }
      while (v235);
      if (v237 == v417)
        goto LABEL_623;
      if (v240 < v236)
        v238 = v239;
      if (v236 < v238[4])
      {
LABEL_623:
        v242 = TTagManager::getTag(*((_QWORD *)v13 + 17), v236);
        v243 = v242;
        if (v242)
        {
          if (*(char *)(v242 + 23) < 0)
            v244 = *(unsigned int **)v242;
          else
            v244 = (unsigned int *)v242;
          v245 = *((_QWORD *)v13 + 6);
          v246 = TParam::getActiveConfigHandle((TParam *)(v245 + 19248));
          if (*(_BYTE *)(v245 + TParam::getValidConfig((TParam *)(v245 + 19248), v246) + 19400))
          {
            loggableUnicode(v244, v370);
            v251 = v370;
            if (v371 < 0)
              v251 = (void **)v370[0];
            tknPrintf("OLD TAG: <%s>\n", v247, v248, v249, v250, v251);
            if (v371 < 0)
              operator delete(v370[0]);
          }
          if (!wcsncmp((const __int32 *)v244, dword_209A7E0C8, 6uLL))
          {
            v254 = v244 + 6;
            v255 = wcschr((__int32 *)v244 + 6, 61);
            v256 = v255;
            v257 = v416;
            if (v416 == (uint64_t *)v417)
              goto LABEL_418;
            v258 = (((char *)v255 - (char *)v244) >> 2) + 1;
            while (1)
            {
              v259 = TTagManager::getTag(*((_QWORD *)v13 + 17), v257[4]);
              if (v259)
              {
                if (*(char *)(v259 + 23) < 0)
                  v259 = *(_QWORD *)v259;
                if (!wcsncmp((const __int32 *)v259, (const __int32 *)v244, v258))
                  break;
              }
              v260 = (uint64_t *)v257[1];
              if (v260)
              {
                do
                {
                  v261 = v260;
                  v260 = (uint64_t *)*v260;
                }
                while (v260);
              }
              else
              {
                do
                {
                  v261 = (uint64_t *)v257[2];
                  v97 = *v261 == (_QWORD)v257;
                  v257 = v261;
                }
                while (!v97);
              }
              v257 = v261;
              if (v261 == (uint64_t *)v417)
                goto LABEL_418;
            }
            v280 = v419[0];
            if (v419[0])
            {
              v281 = v257[4];
              v282 = v419;
              do
              {
                v283 = v280;
                v284 = v282;
                v285 = v280[4];
                v286 = v280 + 1;
                if (v285 >= v281)
                {
                  v286 = v283;
                  v282 = (_QWORD **)v283;
                }
                v280 = (_QWORD *)*v286;
              }
              while (v280);
              if (v282 != v419)
              {
                if (v285 < v281)
                  v283 = v284;
                if (v281 >= v283[4])
                {
LABEL_418:
                  v262 = v418;
                  v263 = ((char *)v256 - (char *)v244) >> 2;
                  if (v418 == (uint64_t *)v419)
                    goto LABEL_432;
                  while (1)
                  {
                    v264 = TTagManager::getTag(*((_QWORD *)v13 + 17), v262[4]);
                    if (v264 && v264 != v243)
                    {
                      if (*(char *)(v264 + 23) < 0)
                        v264 = *(_QWORD *)v264;
                      if (!wcsncmp((const __int32 *)v264, (const __int32 *)v244, v263 + 1))
                        break;
                    }
                    v266 = (uint64_t *)v262[1];
                    if (v266)
                    {
                      do
                      {
                        v267 = v266;
                        v266 = (uint64_t *)*v266;
                      }
                      while (v266);
                    }
                    else
                    {
                      do
                      {
                        v267 = (uint64_t *)v262[2];
                        v97 = *v267 == (_QWORD)v262;
                        v262 = v267;
                      }
                      while (!v97);
                    }
                    v262 = v267;
                    if (v267 == (uint64_t *)v419)
                      goto LABEL_432;
                  }
                  v287 = v417[0];
                  if (v417[0])
                  {
                    v288 = v262[4];
                    v289 = v417;
                    do
                    {
                      v290 = v287;
                      v291 = v289;
                      v292 = v287[4];
                      v293 = v287 + 1;
                      if (v292 >= v288)
                      {
                        v293 = v290;
                        v289 = (_QWORD **)v290;
                      }
                      v287 = (_QWORD *)*v293;
                    }
                    while (v287);
                    if (v289 != v417)
                    {
                      if (v292 < v288)
                        v290 = v291;
                      if (v288 >= v290[4])
                      {
LABEL_432:
                        TBuffer<wchar_t>::assign((uint64_t)&v399, (int *)v244 + 6, v263 - 6);
                        v268 = *((_QWORD *)v13 + 6);
                        v269 = (const __int32 *)TBuffer<wchar_t>::c_str((uint64_t)&v399);
                        v270 = (const void **)TParamManager::nameToParam(v268, v269);
                        if (!v270)
                        {
                          v271 = *(_QWORD *)(*((_QWORD *)v13 + 4) + 336);
                          v272 = (const __int32 *)TBuffer<wchar_t>::c_str((uint64_t)&v399);
                          v270 = (const void **)TParamManager::nameToParam(v271, v272);
                        }
                        if (TParam::flagsSet((uint64_t)v270, 1))
                        {
                          if (v256[1] == 48)
                            v273 = (int *)&unk_209A7E114;
                          else
                            v273 = (int *)&unk_209A7E11C;
                          TBuffer<wchar_t>::assign((uint64_t)&v395, v273);
                          (*((void (**)(const void **, _QWORD, _BYTE **))*v270 + 2))(v270, *(_QWORD *)(*((_QWORD *)v13 + 6) + 136), &v387);
                          v274 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 136);
                          v275 = TBuffer<wchar_t>::c_str((uint64_t)&v395);
                          (*((void (**)(const void **, uint64_t, uint64_t))*v270 + 4))(v270, v274, v275);
                          v276 = v270[18];
                          if (v276)
                          {
                            v278 = TBoolParam::get(v277);
                            if ((v278 & 1) == 0)
                              TBoolParam::set(v277, 1);
                            v279 = v278 ^ 1;
                          }
                          else
                          {
                            v279 = 0;
                          }
                          TBuffer<TPItnRuleHandle_fake **>::resize((uint64_t)&v379, 0);
                          (*(void (**)(TFormatter *, uint64_t, uint64_t *, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _BYTE **))(*(_QWORD *)v13 + 120))(v13, v367, v360, v359, v367 + 8 * v365, 0, 0, 0, &v379);
                          if (*((_QWORD *)&v380 + 1) < 2uLL)
                          {
                            v296 = *(_QWORD *)v379;
                          }
                          else
                          {
                            v294 = (_QWORD *)*((_QWORD *)v13 + 16);
                            v295 = (_QWORD *)TBuffer<TPItnResultHandle_fake **>::data((uint64_t)&v379);
                            v296 = TResultManager::merge(v294, v295, *((uint64_t *)&v380 + 1));
                            if (*((_QWORD *)&v380 + 1))
                            {
                              v297 = 0;
                              do
                                TResultManager::destroy(*((TResult **)v13 + 16), *(_QWORD *)&v379[8 * v297++]);
                              while (v297 < *((_QWORD *)&v380 + 1));
                            }
                          }
                          v298 = *(_QWORD *)(TResultManager::getResult(*((_QWORD *)v13 + 16), v296) + 16);
                          v299 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 136);
                          v300 = TBuffer<wchar_t>::c_str((uint64_t)&v387);
                          (*((void (**)(const void **, uint64_t, uint64_t))*v270 + 4))(v270, v299, v300);
                          if (v279)
                          {
                            if (v276)
                            else
                              v301 = 0;
                            TBoolParam::set(v301, 0);
                          }
                          v302 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v433);
                          v303 = *((_QWORD *)&v434 + 1);
                          v304 = *v302;
                          while (v304 == 32)
                          {
                            v305 = v302[1];
                            ++v302;
                            v304 = v305;
                            --v303;
                          }
                          do
                          {
                            v306 = v303;
                            if (!v303)
                              break;
                            --v303;
                          }
                          while (v302[v306 - 1] == 32);
                          v307 = (unsigned __int8 *)(v298 - 1);
                          do
                            v308 = *++v307;
                          while (v308 == 32);
                          TBuffer<wchar_t>::resize((uint64_t)&v391, 0);
                          TLocaleInfo::multiByteToUnicode(*((_QWORD *)v13 + 4) + 240, v307, (uint64_t)&v391);
                          v309 = v296;
                          v310 = *((_QWORD *)&v392 + 1);
                          do
                          {
                            v311 = v310;
                            if (!v310)
                              break;
                            --v310;
                          }
                          while (v391[v311 - 1] == 32);
                          TBuffer<wchar_t>::resize((uint64_t)&v391, v311);
                          v312 = *((_QWORD *)v13 + 4);
                          v313 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v391);
                          if (TLocaleInfo::unicodeStringCompare(v312 + 240, v302, v313, 0, v306))
                          {
                            if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
                            {
                              loggableUnicode(v254, v370);
                              v318 = v370;
                              if (v371 < 0)
                                v318 = (void **)v370[0];
                              tknPrintf("Rejecting hint for %s\n", v314, v315, v316, v317, v318);
                              if (v371 < 0)
                                operator delete(v370[0]);
                              loggableUnicode(v302, v370);
                              v323 = v370;
                              if (v371 < 0)
                                v323 = (void **)v370[0];
                              tknPrintf("Expected hint result: <%s>\n", v319, v320, v321, v322, v323);
                              if (v371 < 0)
                                operator delete(v370[0]);
                              v324 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v391);
                              loggableUnicode(v324, v370);
                              v329 = v370;
                              if (v371 < 0)
                                v329 = (void **)v370[0];
                              tknPrintf("Actual hint result: <%s>\n", v325, v326, v327, v328, v329);
                              if (v371 < 0)
                                operator delete(v370[0]);
                            }
                            TResultManager::destroy(*((TResult **)v13 + 16), v309);
                          }
                          else
                          {
                            TResultManager::destroy(*((TResult **)v13 + 16), v309);
                            v330 = *((_QWORD *)v13 + 16);
                            v331 = TBuffer<wchar_t>::c_str((uint64_t)&v399);
                            TBuffer<wchar_t>::c_str((uint64_t)&v395);
                            TResultManager::createHint(v330, v357, v358, 1, v331);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v252 = (uint64_t *)v234[1];
      if (v252)
      {
        do
        {
          v253 = v252;
          v252 = (uint64_t *)*v252;
        }
        while (v252);
      }
      else
      {
        do
        {
          v253 = (uint64_t *)v234[2];
          v97 = *v253 == (_QWORD)v234;
          v234 = v253;
        }
        while (!v97);
      }
      v234 = v253;
    }
    while (v253 != (uint64_t *)v419);
  }
  v332 = v374;
  if (v374 != v373)
  {
    v333 = 0;
    v332 = v373;
    do
    {
      v334 = (int *)v332[v333];
      for (k = wcschr(v334 + 4, 61); k[1] != 29; k = wcschr(k + 1, 61))
        ;
      TBuffer<wchar_t>::resize((uint64_t)&v383, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v383, 0, v334, k - v334);
      v336 = *((_QWORD *)v13 + 17);
      if (*((_QWORD *)&v384 + 1) >= (unint64_t)v384)
      {
        if (v386)
        {
          LODWORD(v370[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v383, *((unint64_t *)&v384 + 1), (int *)v370, 1uLL);
          --*((_QWORD *)&v384 + 1);
        }
        else if ((_QWORD)v384)
        {
          *(_DWORD *)&v383[4 * v384 - 4] = 0;
        }
      }
      else
      {
        *(_DWORD *)&v383[4 * *((_QWORD *)&v384 + 1)] = 0;
      }
      v337 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v336 + 16))(v336);
      v338 = v419[0];
      if (v419[0])
      {
        v339 = v419;
        do
        {
          v340 = v338;
          v341 = v339;
          v342 = v338[4];
          v343 = v338 + 1;
          if (v342 >= v337)
          {
            v343 = v340;
            v339 = (_QWORD **)v340;
          }
          v338 = (_QWORD *)*v343;
        }
        while (v338);
        if (v339 != v419)
        {
          if (v342 < v337)
            v340 = v341;
          if (v337 >= v340[4])
          {
            v344 = v416;
            if (v416 == (uint64_t *)v417)
            {
LABEL_534:
              v349 = *((_QWORD *)v13 + 16);
              if (*((_QWORD *)&v384 + 1) >= (unint64_t)v384)
              {
                if (v386)
                {
                  LODWORD(v370[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v383, *((unint64_t *)&v384 + 1), (int *)v370, 1uLL);
                  v350 = v383;
                  --*((_QWORD *)&v384 + 1);
                }
                else
                {
                  v350 = v383;
                  if ((_QWORD)v384)
                    *(_DWORD *)&v383[4 * v384 - 4] = 0;
                }
              }
              else
              {
                v350 = v383;
                *(_DWORD *)&v383[4 * *((_QWORD *)&v384 + 1)] = 0;
              }
              TResultManager::createHint(v349, v357, v358, 3, (uint64_t)(v350 + 16));
            }
            else
            {
              while (1)
              {
                v345 = TTagManager::getTag(*((_QWORD *)v13 + 17), v344[4]);
                v346 = v345;
                if (v345)
                {
                  if (*(char *)(v345 + 23) < 0)
                    v345 = *(_QWORD *)v345;
                  if (!wcsncmp((const __int32 *)v345, v334, k - v334 + 2))
                  {
                    if (*(char *)(v346 + 23) < 0)
                      v346 = *(_QWORD *)v346;
                    if (wcscmp((const __int32 *)(v346 + 4 * (k - v334 + 2)), k + 2))
                      break;
                  }
                }
                v347 = (uint64_t *)v344[1];
                if (v347)
                {
                  do
                  {
                    v348 = v347;
                    v347 = (uint64_t *)*v347;
                  }
                  while (v347);
                }
                else
                {
                  do
                  {
                    v348 = (uint64_t *)v344[2];
                    v97 = *v348 == (_QWORD)v344;
                    v344 = v348;
                  }
                  while (!v97);
                }
                v344 = v348;
                if (v348 == (uint64_t *)v417)
                  goto LABEL_534;
              }
            }
          }
        }
      }
      ++v333;
      v332 = v373;
      v7 = v363;
    }
    while (v333 < v374 - v373);
  }
  if (v332)
  {
    v374 = v332;
    operator delete(v332);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v382 && v379 != v381 && v379)
    MEMORY[0x20BD149A8]();
  if (v386 && v383 != v385 && v383)
    MEMORY[0x20BD149A8]();
  if (v390 && v387 != v389 && v387)
    MEMORY[0x20BD149A8]();
  if (v394 && v391 != (int *)v393 && v391)
    MEMORY[0x20BD149A8]();
  if (v398 && v395 != v397 && v395)
    MEMORY[0x20BD149A8]();
  if (v402 && v399 != (const __int32 *)v401 && v399)
    MEMORY[0x20BD149A8]();
  if (v440 && v437 != v439 && v437)
    MEMORY[0x20BD149A8]();
  if (v403)
  {
    v404 = (char *)v403;
    operator delete(v403);
  }
  if (v406)
  {
    v407 = (char *)v406;
    operator delete(v406);
  }
  v85 = 1;
LABEL_579:
  v351 = v422;
  v352 = v421;
  if (v422 != v421)
  {
    v353 = 0;
    do
    {
      v354 = *(uint64_t **)(v352 + 8 * v353);
      if (v354)
      {
        v355 = *v354;
        if (*v354)
        {
          v356 = *(void **)(v355 + 120);
          if (v356)
          {
            *(_QWORD *)(v355 + 128) = v356;
            operator delete(v356);
          }
          if (*(char *)(v355 + 119) < 0)
            operator delete(*(void **)(v355 + 96));
          if (*(char *)(v355 + 95) < 0)
            operator delete(*(void **)(v355 + 72));
          if (*(char *)(v355 + 71) < 0)
            operator delete(*(void **)(v355 + 48));
          MEMORY[0x20BD149A8](v355, 0x10F2C405D5B575ELL);
          v351 = v422;
          v352 = v421;
        }
      }
      ++v353;
    }
    while (v353 < (v351 - v352) >> 3);
  }
  if ((v85 & 1) != 0)
  {
    if (TBoolParam::get((TBoolParam *)(*((_QWORD *)v13 + 6) + 19248)))
      tknPrintString("Detected formatting-only change\n");
    v86 = 1;
  }
  else
  {
    v86 = 0;
  }
  if (v409)
  {
    v410 = v409;
    operator delete(v409);
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  TAllocator::clear((TAllocator *)v415);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v416, v417[0]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v418, v419[0]);
  TFsa::~TFsa((TFsa *)v420);
  if (v423)
  {
    v424 = v423;
    operator delete(v423);
  }
LABEL_604:
  if (__p)
  {
    v427 = (char *)__p;
    operator delete(__p);
  }
  if (v444 && v441 != v443 && v441)
    MEMORY[0x20BD149A8]();
  if (v432 && v429 != v431 && v429)
    MEMORY[0x20BD149A8]();
  if (!v86)
LABEL_2:
    TResultManager::replace(*((char ***)v13 + 16), v367, v365, v366, v369, (char *)__s, v7);
  if (v436 && v433 != (unsigned int *)v435)
  {
    if (v433)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2099E1154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;

  MEMORY[0x20BD149A8](v25, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x2918]))
  {
    if (STACK[0x2800] != a17 && STACK[0x2800] != 0)
      MEMORY[0x20BD149A8]();
  }
  v28 = (void *)STACK[0x1DF8];
  if (STACK[0x1DF8])
  {
    STACK[0x1E00] = (unint64_t)v28;
    operator delete(v28);
  }
  v29 = (void *)STACK[0x1E10];
  if (STACK[0x1E10])
  {
    STACK[0x1E18] = (unint64_t)v29;
    operator delete(v29);
  }
  v30 = (void *)STACK[0x1E28];
  if (STACK[0x1E28])
  {
    STACK[0x1E30] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x1E40];
  if (STACK[0x1E40])
  {
    STACK[0x1E48] = (unint64_t)v31;
    operator delete(v31);
  }
  TAllocator::clear((TAllocator *)&STACK[0x1E58]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x1E80], (_QWORD *)STACK[0x1E88]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x1E98], (_QWORD *)STACK[0x1EA0]);
  TFsa::~TFsa((TFsa *)&STACK[0x1EB0]);
  v32 = (void *)STACK[0x1F90];
  if (STACK[0x1F90])
  {
    STACK[0x1F98] = (unint64_t)v32;
    operator delete(v32);
  }
  v33 = (void *)STACK[0x1FA8];
  if (STACK[0x1FA8])
  {
    STACK[0x1FB0] = (unint64_t)v33;
    operator delete(v33);
  }
  if (LOBYTE(STACK[0x2A38]))
  {
    v34 = STACK[0x2920];
    if (STACK[0x2920] != a21)
    {
      if (v34)
        MEMORY[0x20BD149A8](v34, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x23D8]))
  {
    v35 = STACK[0x1FC0];
    if (STACK[0x1FC0] != a22)
    {
      if (v35)
        MEMORY[0x20BD149A8](v35, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x27F8]))
  {
    if (STACK[0x23E0] != a25 && STACK[0x23E0] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void std::vector<THint>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<THint>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::allocator<THint>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<THint>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 104 * ((104 * a2 - 104) / 0x68) + 104;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[104 * v8];
    v18 = &v12[104 * v11];
    v14 = 104 * ((104 * a2 - 104) / 0x68) + 104;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<THint>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<THint>::~__split_buffer(&v15);
  }
}

void sub_2099E1900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<THint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD **std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

void std::vector<std::wstring>::__append(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *v5;
  std::wstring *value;
  std::wstring *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::wstring> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::wstring *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
    if (v11)
      v12 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
  }
}

void sub_2099E1AF0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

char *std::vector<TPItnTagHandle_fake **>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      __p = a3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>((_QWORD **)&__p, a5);
      v20 = *(char **)(a1 + 8);
      v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        __p = v7;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>((_QWORD **)&__p, v21 >> 3);
        std::vector<TPItnTagHandle_fake **>::__construct_at_end<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(a1, __p, a4);
        if (v21 < 1)
          return v5;
        v20 = *(char **)(a1 + 8);
      }
      v22 = &v5[8 * a5];
      v23 = &v20[-8 * a5];
      v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        v24 = v20;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v20 != v22)
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,TPItnTagHandle_fake ***,0>(v7, __p, v5);
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v15 = (a2 - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v36 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v9, v17);
      else
        v18 = 0;
      v26 = &v18[8 * v15];
      __p = v18;
      v33 = v26;
      v35 = &v18[8 * v17];
      v27 = &v26[8 * a5];
      do
      {
        *(_QWORD *)v26 = v7[4];
        v26 += 8;
        v28 = (_QWORD *)v7[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v7[2];
            v30 = *v29 == (_QWORD)v7;
            v7 = v29;
          }
          while (!v30);
        }
        v7 = v29;
      }
      while (v26 != v27);
      v34 = v27;
      v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33)
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_2099E1D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TPItnTagHandle_fake **>::__construct_at_end<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = a2[4];
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,TPItnTagHandle_fake ***,0>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      v3 = (_QWORD *)result[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)result[2];
          v5 = *v4 == (_QWORD)result;
          result = v4;
        }
        while (!v5);
      }
      ++a3;
      result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

void MrecInitModule_ddump_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDiagnosticShowFloatsAsHex)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticShowFloatsAsHex", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticShowFloatsAsHex = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowFloatsAsHex);
  }
}

uint64_t SDState_GetHandle(unint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ModelMgr *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  StateMgr *v21;
  unsigned int Handle;
  uint64_t v23;
  _BYTE v25[152];

  v6 = SdapiInsurance::SdapiInsurance(v25, "SDState_GetHandle", 1, 1, 298);
  if (v25[97])
  {
    if (!a2)
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    v25[151] = 0;
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s', <SDh %lld>)\n", v7, v8, v9, v10, "SDState_GetHandle", a1, a2, a3);
    v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v8, v9, v10, v11, v12, v13);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v8, v9, v10, v11, v12, v13);
    v21 = *(StateMgr **)(ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v8, v9, v10, v11, v12, v13) + 56);
    if (a3 == -1)
    {
      a3 = 0;
    }
    else
    {
      if (HIDWORD(a3))
        throwBadSdapiArgument("SDhState", a3, v15, v16, v17, v18, v19, v20);
      if ((a3 + 1) <= 1)
        throwBadSdapiArgument("SDhState", a3, v15, v16, v17, v18, v19, v20);
    }
    Handle = StateMgr::getHandle(v21, a2, a3, v16, v17, v18, v19, v20);
    if (Handle)
      v23 = Handle;
    else
      v23 = -1;
  }
  else
  {
    v23 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v25);
  return v23;
}

void sub_2099E2020()
{
  __cxa_end_catch();
  JUMPOUT(0x2099E202CLL);
}

uint64_t SDState_GetAllowedWordCollations(unint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  StateMgr *v23;
  uint64_t Colls;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[144];

  SdapiInsurance::SdapiInsurance(v29, "SDState_GetAllowedWordCollations", 1, 1, 311);
  if (v29[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v15 = a3;
      else
        v15 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDState_GetAllowedWordCollations", a1, a2, v15, a4);
    }
    if (!a3 && a4)
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    v23 = *(StateMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 56);
    if (HIDWORD(a2))
      throwBadSdapiArgument("SDhState", a2, v17, v18, v19, v20, v21, v22);
    if ((a2 + 1) <= 1)
      throwBadSdapiArgument("SDhState", a2, v17, v18, v19, v20, v21, v22);
    Colls = StateMgr::getColls(v23, a2, 1, v18, v19, v20, v21, v22);
    v25 = *(unsigned int *)(Colls + 8);
    if (a4)
    {
      v26 = 0;
      do
      {
        if (v25 == v26)
          break;
        v27 = *(unsigned __int16 *)(*(_QWORD *)Colls + 2 * v26);
        if ((unsigned __int16)(v27 + 1) >= 2u)
        {
          if ((_DWORD)v27 == 65534)
            v27 = -2;
        }
        else
        {
          v27 = -1;
        }
        *(_QWORD *)(a3 + 8 * v26++) = v27;
      }
      while (a4 != v26);
    }
  }
  else
  {
    v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v29);
  return v25;
}

void sub_2099E2244()
{
  __cxa_end_catch();
  JUMPOUT(0x2099E2250);
}

uLong computeCRC32(uLong crc, const unsigned __int8 *a2, uInt a3)
{
  return crc32(crc, a2, a3);
}

uLong computeCRC32(unsigned int a1, const unsigned __int16 *a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uLong v8;
  Bytef *buf;
  uInt len;

  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&buf, 2 * a3);
  if (a3)
  {
    v6 = 0;
    do
    {
      v7 = a2[v6];
      buf[(v6 * 2)] = v7;
      buf[(v6 * 2 + 1)] = HIBYTE(v7);
      ++v6;
    }
    while (a3 != v6);
  }
  v8 = crc32(a1, buf, len);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  return v8;
}

void sub_2099E230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uLong computeCRC32(unsigned int a1, const unsigned int *a2, unsigned int a3)
{
  unint64_t v6;
  unsigned int v7;
  uLong v8;
  Bytef *buf;
  uInt len;

  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&buf, 4 * a3);
  if (a3)
  {
    v6 = 0;
    do
    {
      v7 = a2[v6 / 4];
      buf[v6] = v7;
      v7 >>= 8;
      buf[(v6 + 1)] = v7;
      buf[(v6 + 2)] = v7;
      buf[(v6 + 3)] = v7;
      v6 += 4;
    }
    while (4 * a3 != v6);
  }
  v8 = crc32(a1, buf, len);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  return v8;
}

void sub_2099E23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t LMStats::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 == 3)
    v4 = 0;
  else
    v4 = 56;
  v5 = SnapTime::sizeObject(a1 + 56, a2) + v4;
  v6 = SnapTime::sizeObject(a1 + 88, a2);
  return v5 + v6 + SnapTime::sizeObject(a1 + 120, a2);
}

double LMStats::resetStats(LMStats *this)
{
  double result;

  *((_QWORD *)this + 18) = 0;
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

__n128 LMStats::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v2;
  v3 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v3;
  result = *(__n128 *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 136) = v5;
  return result;
}

int64x2_t LMStats::operator-=(uint64_t a1, uint64_t a2)
{
  int32x4_t v2;
  int64x2_t result;

  v2 = *(int32x4_t *)(a1 + 16);
  *(int32x4_t *)a1 = vsubq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  *(int32x4_t *)(a1 + 16) = vsubq_s32(v2, *(int32x4_t *)(a2 + 16));
  *(int32x4_t *)(a1 + 32) = vsubq_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a2 + 32));
  *(int32x2_t *)(a1 + 48) = vsub_s32(*(int32x2_t *)(a1 + 48), *(int32x2_t *)(a2 + 48));
  *(int64x2_t *)(a1 + 56) = vsubq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)(a1 + 72) = vsubq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a2 + 72));
  *(int64x2_t *)(a1 + 88) = vsubq_s64(*(int64x2_t *)(a1 + 88), *(int64x2_t *)(a2 + 88));
  *(int64x2_t *)(a1 + 104) = vsubq_s64(*(int64x2_t *)(a1 + 104), *(int64x2_t *)(a2 + 104));
  *(int64x2_t *)(a1 + 120) = vsubq_s64(*(int64x2_t *)(a1 + 120), *(int64x2_t *)(a2 + 120));
  result = vsubq_s64(*(int64x2_t *)(a1 + 136), *(int64x2_t *)(a2 + 136));
  *(int64x2_t *)(a1 + 136) = result;
  return result;
}

void LanguageModel::LanguageModel(LanguageModel *this, int a2, const WordList *a3)
{
  *(_QWORD *)this = off_24C2145F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = a2;
}

void LanguageModel::~LanguageModel(RecentBuffer **this)
{
  _QWORD *v1;

  *this = (RecentBuffer *)off_24C2145F0;
  v1 = this + 1;
  DgnDelete<RecentBuffer>(this[1]);
  *v1 = 0;
  v1[1] = 0;
}

BOOL LanguageModel::hasRecentBuffer(LanguageModel *this)
{
  return *((_QWORD *)this + 1) != 0;
}

uint64_t LanguageModel::getRecentBufferLength(LanguageModel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(unsigned int *)(v1 + 40);
  else
    return 0;
}

WordLanguageModel ***LanguageModel::addToRecent(WordLanguageModel ***result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  WordLanguageModel ***v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;

  if (result[1])
  {
    LODWORD(v3) = a3;
    v5 = result;
    if (((unsigned int (*)(WordLanguageModel ***, uint64_t))(*result)[14])(result, a3))
      v3 = v3;
    else
      v3 = 0xFFFFFFLL;
    v10 = 0;
    v11 = 0;
    v6 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v6)
    {
      v12 = 0;
      HIDWORD(v11) = realloc_array(0, &v12, 4 * v6, 0, 0, 1) >> 2;
      v10 = v12;
      if (*((_DWORD *)a2 + 2))
      {
        v7 = 0;
        do
        {
          if (((unsigned int (*)(WordLanguageModel ***, _QWORD))(*v5)[14])(v5, *(unsigned int *)(*a2 + 4 * v7)))
          {
            v8 = *a2;
            v10[v11] = *(_DWORD *)(*a2 + 4 * v7);
            v9 = v11 + 1;
            LODWORD(v11) = v11 + 1;
          }
          else
          {
            v10[v11] = 0xFFFFFF;
            v9 = v11 + 1;
            LODWORD(v11) = v11 + 1;
            v8 = *a2;
          }
          if (*(_DWORD *)(v8 + 4 * v7) == 16777213)
          {
            RecentBuffer::addToRecent(v5[1], (uint64_t)&v10, v3);
            v9 = 0;
            LODWORD(v11) = 0;
            v3 = 16777214;
          }
          ++v7;
        }
        while (v7 < *((unsigned int *)a2 + 2));
        if (v9)
          RecentBuffer::addToRecent(v5[1], (uint64_t)&v10, v3);
      }
    }
    return (WordLanguageModel ***)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
  }
  return result;
}

void sub_2099E2750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void LanguageModel::clearRecent(LanguageModel *this)
{
  RecentBuffer *v1;

  v1 = (RecentBuffer *)*((_QWORD *)this + 1);
  if (v1)
    RecentBuffer::clearRecent(v1);
}

void LanguageModel::getDefaultRestrictRange(LanguageModel *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 0xFFFFFF;
  *a3 = 0xFFFFFF;
}

uint64_t LanguageModel::languageScoreFinish(LanguageModel *this, uint64_t a2, uint64_t RecentScore, LMScoreDetails *a4, int a5, unsigned int a6, LMContextData *a7)
{
  BOOL v8;

  if (*((_QWORD *)this + 1))
    v8 = a5 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if ((*(unsigned int (**)(LanguageModel *))(*(_QWORD *)this + 112))(this))
      RecentScore = RecentBuffer::getRecentScore(*((RecentBuffer **)this + 1), a2, RecentScore, a7);
    if (a4)
      *(_WORD *)(*(_QWORD *)a4 + 2 * a6) = RecentScore;
  }
  return RecentScore;
}

uint64_t LanguageModel::languageScoreFinishForSearch(RecentBuffer **this, uint64_t a2, uint64_t a3, const LMContextData *a4)
{
  if (this[1] && (*((unsigned int (**)(RecentBuffer **))*this + 14))(this))
    return RecentBuffer::getRecentScore(this[1], a2, a3, a4);
  else
    return a3;
}

void LanguageModel::startBuildingTopicLM(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 303, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"startBuildingTopicLM");
}

void LanguageModel::addBuildTopicLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 312, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"addBuildTopicLMTrigrams");
}

void LanguageModel::endBuildingTopicLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 322, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"endBuildingTopicLM");
}

void LanguageModel::abortBuildingTopicLM(LanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 328, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"abortBuildingTopicLM");
}

uint64_t LanguageModel::isBuildingTopicLM(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getBuildExternalTopicLmSlot(LanguageModel *this)
{
  return 0xFFFFLL;
}

uint64_t LanguageModel::setContext(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ***v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;

  if (*(_QWORD *)(result + 8))
  {
    v9 = (uint64_t ***)result;
    v10 = *(unsigned int *)(a2 + 8);
    v15 = 0;
    v16 = 0;
    if ((_DWORD)v10)
    {
      v17 = 0;
      v11 = realloc_array(0, &v17, 4 * v10, 0, 0, 1);
      v15 = v17;
      v12 = *(_DWORD *)(a2 + 8);
      LODWORD(v16) = v10;
      HIDWORD(v16) = v11 >> 2;
      if (v12)
      {
        v13 = 0;
        do
        {
          if (((unsigned int (*)(uint64_t ***, _QWORD))(*v9)[14])(v9, *(unsigned int *)(*(_QWORD *)a2 + 4 * v13)))
          {
            v14 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v13);
          }
          else
          {
            v14 = 0xFFFFFF;
          }
          v15[v13++] = v14;
        }
        while (v13 < *(unsigned int *)(a2 + 8));
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    RecentBuffer::setContext(v9[1], (uint64_t)&v15, a4, a6);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  }
  return result;
}

void sub_2099E2AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void LanguageModel::unsetContext(LanguageModel *this, LMContextData *a2)
{
  RecentBuffer *v2;

  v2 = (RecentBuffer *)*((_QWORD *)this + 1);
  if (v2)
    RecentBuffer::unsetContext(v2, a2);
}

void LanguageModel::setWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 410, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setWeights");
}

uint64_t LanguageModel::getNumDispatchComponents(LanguageModel *this)
{
  return 0;
}

void LanguageModel::setDispatchPrefiltererPerWordPenalty(LanguageModel *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 423, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setDispatchPrefiltererPerWordPenalty");
}

uint64_t LanguageModel::getDispatchPrefiltererPerWordPenalty(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 430, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getDispatchPrefiltererPerWordPenalty");
  return 0;
}

uint64_t LanguageModel::getNumInterpolatedLms(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::setInterpolatedLmWeights()
{
  return 0;
}

uint64_t LanguageModel::getInterpolatedLmWeights(LanguageModel *this, unsigned int *a2)
{
  return 0;
}

void LanguageModel::getActiveTopicLmSlots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 460, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getActiveTopicLmSlots");
}

void LanguageModel::setTopicLmSlotWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 468, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setTopicLmSlotWeights");
}

uint64_t LanguageModel::hasWeights(LanguageModel *this)
{
  return 0;
}

void LanguageModel::getWeightsData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 483, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getWeightsData");
}

void LanguageModel::cleanupWeightsData(LanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 489, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"cleanupWeightsData");
}

uint64_t LanguageModel::makeNewWeights(LanguageModel *this, const DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 495, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"makeNewWeights");
  return 0xFFFFLL;
}

void LanguageModel::deleteWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 502, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"deleteWeights");
}

void LanguageModel::applyWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 508, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"applyWeights");
}

uint64_t LanguageModel::getValidWeightsIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 514, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getValidWeightsIds");
  return 0;
}

uint64_t LanguageModel::getWeightsId(LanguageModel *this, const DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 522, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getWeightsId");
  return 0xFFFFLL;
}

uint64_t LanguageModel::getWeightsName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 529, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getWeightsName");
  return 0;
}

uint64_t LanguageModel::isFactoryWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 536, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"isFactoryWeights");
  return 1;
}

void LanguageModel::checkWeightsId(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 543, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"checkWeightsId");
}

uint64_t LanguageModel::getNumLoadedBigramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getNumLoadedTrigramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getNumLoadedQuadgramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getValidTopicLmSlots(uint64_t a1, uint64_t a2)
{
  if (a2)
    *(_DWORD *)(a2 + 8) = 0;
  return 0;
}

uint64_t LanguageModel::getTopicLmSlotId(LanguageModel *this, const DgnString *a2)
{
  return 0xFFFFLL;
}

void LanguageModel::setTopicLmSlotName(LanguageModel *this, unsigned int a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 587, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setTopicLmSlotName");
}

uint64_t LanguageModel::getTopicLmSlotName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 594, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getTopicLmSlotName");
  return 0;
}

uint64_t LanguageModel::hasTopicLM(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 601, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"hasTopicLM");
  return 0;
}

void LanguageModel::deleteTopicLMs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 609, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"deleteTopicLM");
}

uint64_t LanguageModel::getValidFactoryCorrectiveLms(uint64_t a1, uint64_t a2)
{
  if (a2)
    *(_DWORD *)(a2 + 8) = 0;
  return 0;
}

uint64_t LanguageModel::getFactoryCorrectiveLmId(LanguageModel *this, const DgnString *a2)
{
  return 0xFFFFLL;
}

uint64_t LanguageModel::getFactoryCorrectiveLmName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 634, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getFactoryCorrectiveLmName");
  return 0;
}

void LanguageModel::setFactoryCorrectiveLmName(LanguageModel *this, unsigned int a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 643, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setFactoryCorrectiveLmName");
}

void LanguageModel::getActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 651, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getActiveFactoryCorrectiveLms");
}

void LanguageModel::setActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 659, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"setActiveFactoryCorrectiveLms");
}

uint64_t LanguageModel::hasAnyQuadgrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::tri1HasTrigrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::quad1quad2HasQuadgrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::mayWordBeIgnoredInContext(LanguageModel *this)
{
  return 0;
}

void LanguageModel::printSize(LanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  RecentBuffer *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 694, (DgnString *)&v57);
  if (v58)
    v16 = (void *)v57;
  else
    v16 = &unk_209A7E12B;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7E12B, a3, &unk_209A7E12B, v16);
  DgnString::~DgnString((DgnString *)&v57);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7E12B);
  v21 = (RecentBuffer *)*((_QWORD *)this + 1);
  if (v21)
  {
    v56 = 0;
    v57 = 0;
    v22 = (a3 + 1);
    v55 = 0;
    RecentBuffer::printSize(v21, 0xFFFFFFFFLL, v22, &v57, &v56, &v55);
    *a4 += v57;
    *a5 += v56;
    *a6 += v55;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 696, (DgnString *)&v57);
  if (v58)
    v28 = (void *)v57;
  else
    v28 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &unk_209A7E12B, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += v23;
  *a5 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 697, (DgnString *)&v57);
  if (v58)
    v34 = (void *)v57;
  else
    v34 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v22, &unk_209A7E12B, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += v29;
  *a5 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 699, (DgnString *)&v57);
  if (v58)
    v39 = (void *)v57;
  else
    v39 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v22, &unk_209A7E12B, (34 - a3), (34 - a3), v39, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v57);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 701, (DgnString *)&v57);
  if (v58)
    v44 = (void *)v57;
  else
    v44 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v22, &unk_209A7E12B, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 703, (DgnString *)&v57);
  if (v58)
    v49 = (void *)v57;
  else
    v49 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v22, &unk_209A7E12B, (34 - a3), (34 - a3), v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 704, (DgnString *)&v57);
  if (v58)
    v54 = (void *)v57;
  else
    v54 = &unk_209A7E12B;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, a3, &unk_209A7E12B, (35 - a3), (35 - a3), v54, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v57);
}

void sub_2099E3644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t LanguageModel::saveVocAndSvc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a4, 0, a6);
}

uint64_t LanguageModel::getTotalPreloadableBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::computeTotalPreloadableBytes(LanguageModel *this)
{
  return 0;
}

void LanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  RecentBuffer *v19;

  if ((DFile::subFileExists((uint64_t)a3, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x49u))
  {
    if (a1)
    {
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 806, (uint64_t)"lm/lm", 7, (uint64_t)"%s", v16, v17, (char)&errStr_lm_lm_E_RECENT_WITHOUT_LM);
      }
    }
    v18 = MemChunkAlloc(0x218uLL, 0);
    v19 = RecentBuffer::RecentBuffer((RecentBuffer *)v18, *(_DWORD *)(a1 + 32), *(const WordList **)(a1 + 16), a2, (LanguageModel *)a1);
    *(_QWORD *)(a1 + 8) = v19;
    RecentBuffer::loadRecentBuffer(v19, a3, a4, a6, a11);
  }
}

uint64_t LanguageModel::getLMWithLegacyPath(LanguageModel *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 822, (uint64_t)"lm/lm", 1, (uint64_t)"%.500s", a7, a8, (char)"getLMWithLegacyPath");
  return 0;
}

uint64_t *LanguageModel::CreateAndLoadLanguageModel(LanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, unsigned int a6, char a7, unsigned int a8, unsigned int a9, unsigned int a10, const WordList *a11, BOOL a12, unsigned int a13, unsigned int a14, __int16 a15, BOOL *a16, BOOL *a17, double *a18)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;
  char v30;

  v30 = (char)a5;
  if (DFile::subFileExists((uint64_t)this, 0x6Du))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 852, (uint64_t)"lm/lm", 4, (uint64_t)"%s", v19, v20, (char)&errStr_lm_lm_E_CANT_LOAD_WORDDUMMY);
  if ((DFile::subFileExists((uint64_t)this, 0x73u) & 1) != 0 || (DFile::subFileExists((uint64_t)this, 0x6Fu) & 1) != 0)
    v21 = 1;
  else
    v21 = DFile::subFileExists((uint64_t)this, 0x70u);
  v22 = v21 + DFile::subFileExists((uint64_t)this, 0x29u);
  if (v22 + DFile::subFileExists((uint64_t)this, 0x28u) >= 2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 858, (uint64_t)"lm/lm", 3, (uint64_t)"%s", v23, v24, (char)&errStr_lm_lm_E_MULTIPLE_SPEC_SUBFILES);
  if ((DFile::subFileExists((uint64_t)this, 0x73u) & 1) != 0
    || (DFile::subFileExists((uint64_t)this, 0x6Fu) & 1) != 0
    || DFile::subFileExists((uint64_t)this, 0x70u))
  {
    v25 = MemChunkAlloc(0x728uLL, 0);
    WordLanguageModel::WordLanguageModel((WordLanguageModel *)v25, a9, a11);
  }
  else if ((DFile::subFileExists((uint64_t)this, 0x29u) & 1) != 0
         || DFile::subFileExists((uint64_t)this, 0x28u))
  {
    v25 = MemChunkAlloc(0x2D0uLL, 0);
    MultiLanguageModel::MultiLanguageModel((MultiLanguageModel *)v25, a9, a11);
  }
  else
  {
    if ((a7 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 876, (uint64_t)"lm/lm", 5, (uint64_t)"%s", v27, v28, (char)&errStr_lm_lm_E_MISSING_LM);
    v25 = MemChunkAlloc(0x28uLL, 0);
    DummyLanguageModel::DummyLanguageModel((DummyLanguageModel *)v25, a9, a11);
  }
  *((_DWORD *)v25 + 7) = *(_DWORD *)(DFile::getCurrentSubDirComponents(this) + 8);
  *((_BYTE *)v25 + 24) = v30;
  (*(void (**)(uint64_t *, LanguageModel *, DFile *, DFile *, DFileChecksums *, _QWORD, _QWORD, BOOL, unint64_t, __int16, BOOL *, BOOL *, double *))(*v25 + 24))(v25, this, a2, a3, a4, a6, a8, a12, __PAIR64__(a14, a13), a15, a16, a17, a18);
  return v25;
}

void MrecInitModule_generr_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;

  if (!gParDiagnosticCrashOnAssert)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticCrashOnAssert", &byte_209A88803, &byte_209A88803, 1, SetShadowDiagnosticCrashOnAssert, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticCrashOnAssert = (uint64_t)v1;
    gShadowDiagnosticCrashOnAssert = 1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnAssert);
  }
  if (!gParDiagnosticCrashOnError)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticCrashOnError", &byte_209A88803, &byte_209A88803, 0, SetShadowDiagnosticCrashOnError, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticCrashOnError = (uint64_t)v3;
    gShadowDiagnosticCrashOnError = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnError);
  }
  if (!gParDiagnosticCrashOnWarning)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticCrashOnWarning", &byte_209A88803, &byte_209A88803, 0, SetShadowDiagnosticCrashOnWarning, 0);
    *v5 = &unk_24C214CE8;
    gParDiagnosticCrashOnWarning = (uint64_t)v5;
    gShadowDiagnosticCrashOnWarning = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnWarning);
  }
  if (!gParDiagnosticAbortOnAssert)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticAbortOnAssert", &byte_209A88803, &byte_209A88803, 1, SetShadowDiagnosticAbortOnAssert, 0);
    *v7 = &unk_24C214CE8;
    gParDiagnosticAbortOnAssert = (uint64_t)v7;
    gShadowDiagnosticAbortOnAssert = 1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticAbortOnAssert);
  }
  if (!gParDiagnosticSkipTheseAsserts)
  {
    v8 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v8, "DiagnosticSkipTheseAsserts", &byte_209A88803, &byte_209A88803, &byte_209A88803, (void (*)(void))SetSkipAsserts, 0);
    *v9 = &unk_24C215D48;
    gParDiagnosticSkipTheseAsserts = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSkipTheseAsserts);
  }
}

void errWarnInternal(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, ...)
{
  const char *v5;
  const char *v6;
  pid_t v7;
  char *v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  DgnBuffer *Buffer;
  unsigned int v13;
  unsigned int v14;
  DgnBuffer *v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  const char *v19;
  _BYTE v20[8192];
  int v21;
  char v22;
  char *v23;
  int v24;
  uint64_t v25;
  va_list va;

  va_start(va, a5);
  MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v25 = *MEMORY[0x24BDAC8D0];
  if (!sbSkipWarnings)
  {
    v6 = v5;
    if (gShadowDiagnosticCrashOnWarning)
    {
      v7 = getpid();
      kill(v7, 5);
    }
    ++sNumWarnBPCalls;
    DgnString::DgnString((DgnString *)&v23);
    v20[0] = 0;
    v21 = 0x2000;
    v22 = 0;
    MessageFormatPrefix((DgnThreadMgr *)v20, 1, 0, -1);
    if (v24)
      v8 = v23;
    else
      v8 = &byte_209A88803;
    if (v22)
      v9 = v8;
    else
      v9 = v20;
    v10 = strlen(v9);
    if (v6)
    {
      v11 = v10;
      Buffer = DgnBuffer::getBuffer((DgnBuffer *)v20, 0);
      v13 = v21 - v11;
      v14 = vsnprintf((char *)Buffer + v11, v21 - v11, v6, va);
      if ((v14 & 0x80000000) != 0 || v14 >= v13)
      {
        do
        {
          do
          {
            v15 = DgnBuffer::getBuffer((DgnBuffer *)v20, 1);
            v16 = v21 - v11;
            v17 = vsnprintf((char *)v15 + v11, v21 - v11, v6, va);
          }
          while ((v17 & 0x80000000) != 0);
        }
        while (v17 >= v16);
      }
    }
    DgnBuffer::appendString((DgnBuffer *)v20, "\n");
    if (v24)
      v18 = v23;
    else
      v18 = &byte_209A88803;
    if (v22)
      v19 = v18;
    else
      v19 = v20;
    xprintStringFancy(v19, 1, 1, 0, 0);
    DgnString::~DgnString((DgnString *)&v23);
  }
}

void sub_2099E3F00(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void errThrowInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  const char *v10;
  const char *v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  pid_t v21;
  const char *v22;
  char *Buffer;
  size_t i;
  int v25;
  _QWORD *exception;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  struct type_info *v31;
  uint64_t *v32;
  char *v33;
  const char *v34;
  _BYTE v35[8192];
  unsigned int __size;
  char __size_4;
  char *v38;
  int v39;
  uint64_t v40;

  v9 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v9;
  v40 = *MEMORY[0x24BDAC8D0];
  if (gShadowDiagnosticCrashOnError | gbDiagnosticCrashOnErrorDueToProfilingClient)
  {
    v21 = getpid();
    kill(v21, 5);
  }
  ++sNumErrBPCalls;
  v22 = v35;
  DgnString::DgnString((DgnString *)&v38);
  v35[0] = 0;
  __size = 0x2000;
  __size_4 = 0;
  if (v11)
  {
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v35, 0);
    for (i = __size; ; i = __size)
    {
      v25 = vsnprintf(Buffer, i, v11, &a9);
      if ((v25 & 0x80000000) == 0 && v25 < i)
        break;
      Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v35, 1);
    }
    if (__size_4)
    {
      if (v39)
        v22 = v38;
      else
        v22 = &byte_209A88803;
    }
    else
    {
      v22 = v35;
    }
  }
  strcpy(sgLastErrorString, v22);
  if (!sbSkipErrThrows && v20 != 2)
  {
    if (v20 == 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      v27 = MemChunkAlloc(0x50uLL, 0);
      if (v39)
        v28 = v38;
      else
        v28 = &byte_209A88803;
      if (__size_4)
        v29 = v28;
      else
        v29 = v35;
      DgnFileIOException::DgnFileIOException((DgnFileIOException *)v27, -1, v19, v17, v15, v13, v29);
      *exception = v30;
    }
    else
    {
      exception = __cxa_allocate_exception(8uLL);
      v32 = MemChunkAlloc(0x50uLL, 0);
      if (v39)
        v33 = v38;
      else
        v33 = &byte_209A88803;
      if (__size_4)
        v34 = v33;
      else
        v34 = v35;
      *exception = DgnException::DgnException((DgnException *)v32, 0xFFFFFFFF, v19, v17, v15, v13, v34);
    }
    __cxa_throw(exception, v31, 0);
  }
  DgnString::~DgnString((DgnString *)&v38);
}

void sub_2099E41A8(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t crashIntoDebugger()
{
  pid_t v0;

  v0 = getpid();
  return kill(v0, 5);
}

uint64_t errCopyAndThrowException(uint64_t result, uint64_t a2)
{
  BOOL v2;
  _QWORD *exception;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  struct type_info *v14;

  if (sbSkipErrThrows)
    v2 = 1;
  else
    v2 = (_DWORD)result == 2;
  if (!v2)
  {
    if ((_DWORD)result == 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      v5 = MemChunkAlloc(0x50uLL, 0);
      if (*(_DWORD *)(a2 + 16))
        v6 = *(char **)(a2 + 8);
      else
        v6 = &byte_209A88803;
      if (*(_DWORD *)(a2 + 40))
        v9 = *(char **)(a2 + 32);
      else
        v9 = &byte_209A88803;
      if (*(_DWORD *)(a2 + 64))
        v11 = *(char **)(a2 + 56);
      else
        v11 = &byte_209A88803;
      DgnFileIOException::DgnFileIOException((DgnFileIOException *)v5, *(_DWORD *)(a2 + 72), v6, *(_DWORD *)(a2 + 24), v9, *(_DWORD *)(a2 + 48), v11);
      *exception = v13;
    }
    else
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = MemChunkAlloc(0x50uLL, 0);
      if (*(_DWORD *)(a2 + 16))
        v8 = *(const char **)(a2 + 8);
      else
        v8 = &byte_209A88803;
      if (*(_DWORD *)(a2 + 40))
        v10 = *(const char **)(a2 + 32);
      else
        v10 = &byte_209A88803;
      if (*(_DWORD *)(a2 + 64))
        v12 = *(const char **)(a2 + 56);
      else
        v12 = &byte_209A88803;
      *exception = DgnException::DgnException((DgnException *)v7, *(_DWORD *)(a2 + 72), v8, *(_DWORD *)(a2 + 24), v10, *(_DWORD *)(a2 + 48), v12);
    }
    __cxa_throw(exception, v14, 0);
  }
  return result;
}

void sub_2099E4348(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ThrowMemoryException(uint64_t a1)
{
  pid_t v2;
  _QWORD *exception;

  if (gShadowDiagnosticCrashOnError | gbDiagnosticCrashOnErrorDueToProfilingClient)
  {
    v2 = getpid();
    kill(v2, 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = a1;
}

void ThrowNewFailure(uint64_t a1, uint64_t a2)
{
  snprintf(ThrowNewFailure(DgnMemoryException *,unsigned long)::buffer, 0x190uLL, "Memory allocation (%llu bytes) failed: throwing memory exception.\n", a2);
  xprintString(ThrowNewFailure(DgnMemoryException *,unsigned long)::buffer);
  MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
  ThrowMemoryException(a1);
}

void ThrowExternalNewFailure(uint64_t a1, uint64_t a2)
{
  snprintf(ThrowExternalNewFailure(DgnMemoryException *,unsigned long)::buffer, 0x190uLL, "External memory allocation (%llu bytes) failed: throwing memory exception.\n", a2);
  xprintString(ThrowExternalNewFailure(DgnMemoryException *,unsigned long)::buffer);
  MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
  ThrowMemoryException(a1);
}

uint64_t haveTerminatedSuccessfully(void)
{
  return sbHaveTerminatedSuccessfully;
}

uint64_t setDllTerminatedSuccessfullyOrNotInUse(uint64_t result)
{
  char v1;

  sbDllTerminatedSuccessfullyOrNotInUse = result;
  if (sbExeTerminatedSuccessfullyOrNotInUse)
    v1 = result;
  else
    v1 = 0;
  sbHaveTerminatedSuccessfully = v1;
  return result;
}

void SetShadowDiagnosticCrashOnAssert(void)
{
  gShadowDiagnosticCrashOnAssert = *(_BYTE *)(gParDiagnosticCrashOnAssert + 41);
}

void SetShadowDiagnosticCrashOnError(void)
{
  gShadowDiagnosticCrashOnError = *(_BYTE *)(gParDiagnosticCrashOnError + 41);
}

void SetShadowDiagnosticCrashOnWarning(void)
{
  gShadowDiagnosticCrashOnWarning = *(_BYTE *)(gParDiagnosticCrashOnWarning + 41);
}

void SetShadowDiagnosticAbortOnAssert(void)
{
  gShadowDiagnosticAbortOnAssert = *(_BYTE *)(gParDiagnosticAbortOnAssert + 41);
}

void MrecInitModule_realdf_dfutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugDFile)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugDFile", (const char *)&unk_209A7E1FC, (const char *)&unk_209A7E1FC, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugDFile = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugDFile);
  }
  if (!gParDebugShowDFileStatsOnDestruction)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowDFileStatsOnDestruction", (const char *)&unk_209A7E1FC, (const char *)&unk_209A7E1FC, 0, SetShadowDebugShowDFileStatsOnDestruction, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowDFileStatsOnDestruction = (uint64_t)v3;
    gShadowDebugShowDFileStatsOnDestruction = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowDFileStatsOnDestruction);
  }
  if (!gParDiagnosticDFileSimulateAddBlockFailure)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticDFileSimulateAddBlockFailure", (const char *)&unk_209A7E1FC, (const char *)&unk_209A7E1FC, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDiagnosticDFileSimulateAddBlockFailure = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticDFileSimulateAddBlockFailure);
  }
  if (!gParDiagnosticDFileSimulateOpenFailure)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticDFileSimulateOpenFailure", (const char *)&unk_209A7E1FC, (const char *)&unk_209A7E1FC, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDiagnosticDFileSimulateOpenFailure = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticDFileSimulateOpenFailure);
  }
}

uint64_t *mrecZlibAlloc(uint64_t a1, int a2, int a3)
{
  return MemChunkAlloc((a3 * a2), 0);
}

uint64_t mrecZlibFree(int a1, _QWORD *a2)
{
  uint64_t result;

  if (a2)
    return MemChunkFree(a2, 0);
  return result;
}

uint64_t RealDFileSubFileStream::RealDFileSubFileStream(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, int a6, __int16 a7, unsigned int a8, int a9, char a10, unint64_t a11)
{
  const char *v17;
  _QWORD *v18;
  DgnString *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int i;
  unsigned __int8 v53;
  uInt v54;
  int v55;
  int v56;
  unsigned int v57;
  Bytef *next_out;
  _BOOL4 v59;
  uInt v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  char v75;
  int v76;
  uint64_t v77;
  uLong total_out;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  _QWORD *v108;
  unsigned __int8 v109;
  Bytef *buf;
  uint64_t v111;
  unsigned __int8 v112;
  char v113;
  unsigned __int8 v114;
  char *v115;
  unsigned int v116[2];
  z_stream strm;
  void *v118[3];

  v118[1] = *(void **)MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 8))
    v17 = *(const char **)a3;
  else
    v17 = (const char *)&unk_209A7E1FC;
  v18 = (_QWORD *)DgnStream::DgnStream(a1, a2, v17);
  *v18 = &off_24C217608;
  DgnString::DgnString((DgnString *)(v18 + 6));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 8) == 1;
  *(_BYTE *)(a1 + 76) = 0;
  v108 = (_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 40) = a4;
  DgnString::operator=(v19, a5);
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  *(_QWORD *)(a1 + 80) = a8;
  *(_DWORD *)(a1 + 88) = a9;
  *(_BYTE *)(a1 + 92) = a10;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  if ((a6 - 3) > 1 || !a10)
    goto LABEL_112;
  if (HIDWORD(a11))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 630, (uint64_t)"dfutil/realdf", 51, (uint64_t)"%.500s %.500s", v20, v21, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + ((_BYTE)a7 << 7));
  *(_DWORD *)(a1 + 112) = a11;
  v22 = a11 / 0x500000;
  v105 = a11 % 0x500000;
  v106 = a11 / 0x500000;
  if (a11 >= 0x500000)
    v23 = 5242880;
  else
    v23 = a11 % 0x500000;
  v24 = v22 + 1;
  v25 = *(_DWORD *)(a1 + 108);
  if (v25 <= v22)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v108, v24 - v25, 0);
  v26 = *(unsigned int *)(a1 + 104);
  if (v26 <= v24)
  {
    v28 = (uint64_t *)(a1 + 96);
    if (v26 <= v106)
    {
      v30 = ((a11 * (unsigned __int128)0x33333333334uLL) >> 64) - v26 + 1;
      v31 = 16 * v26;
      do
      {
        v32 = (_QWORD *)(*v108 + v31);
        *v32 = 0;
        v32[1] = 0;
        v31 += 16;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    v27 = (int)v26;
    v28 = (uint64_t *)(a1 + 96);
    if ((int)v26 > (int)v24)
    {
      v29 = 16 * (int)v26 - 16;
      do
      {
        --v27;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v108 + v29);
        v29 -= 16;
      }
      while (v27 > v24);
    }
  }
  *(_DWORD *)(a1 + 104) = v24;
  if (a11 >= 0x500000)
  {
    v33 = 0;
    if (v106 <= 1)
      v34 = 1;
    else
      v34 = a11 / 0x500000;
    v35 = 16 * v34;
    v28 = (uint64_t *)(a1 + 96);
    do
    {
      v36 = *v28 + v33;
      if (*(_DWORD *)(v36 + 12) >> 20 <= 4u)
      {
        strm.next_in = 0;
        *(_DWORD *)(v36 + 12) = realloc_array(*(_QWORD **)v36, (void **)&strm.next_in, 0x500000uLL, *(unsigned int *)(v36 + 8), *(unsigned int *)(v36 + 8), 1);
        *(_QWORD *)v36 = strm.next_in;
      }
      v33 += 16;
      v28 = (uint64_t *)(a1 + 96);
    }
    while (v35 != v33);
  }
  v37 = *v28;
  v38 = *v28 + 16 * v106;
  if (*(_DWORD *)(v38 + 12) < v105)
  {
    strm.next_in = 0;
    v39 = *(unsigned int *)(v37 + 16 * v106 + 8);
    *(_DWORD *)(v38 + 12) = realloc_array(*(_QWORD **)v38, (void **)&strm.next_in, v105, v39, v39, 1);
    *(_QWORD *)v38 = strm.next_in;
  }
  strm.next_in = 0;
  strm.avail_in = 0;
  strm.next_out = 0;
  strm.avail_out = 0;
  strm.zalloc = (alloc_func)mrecZlibAlloc;
  strm.zfree = (free_func)mrecZlibFree;
  strm.opaque = 0;
  v40 = crc32(0, 0, 0);
  v115 = 0;
  *(_QWORD *)v116 = 0;
  buf = 0;
  v41 = realloc_array(0, (void **)&buf, 0x4000uLL, 0, 0, 1);
  v115 = (char *)buf;
  v116[0] = 0x4000;
  v116[1] = v41;
  strm.next_in = buf;
  inflateInit2_(&strm, -15, "1.2.12", 112);
  strm.avail_out = 0x4000;
  v114 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  if (v114 != 31)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 672, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v42, v43, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  if (v114 != 139)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 676, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v44, v45, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  v113 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, &v113, 1u, 1);
  if (v113 != 8)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 682, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v46, v47, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  v112 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v112, 1u, 1);
  if (v112 > 0x1Fu)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 688, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v48, v49, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  v50 = 6;
  do
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    --v50;
  }
  while (v50);
  if ((v112 & 4) != 0)
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    v51 = (char)v114;
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    for (i = v51 + ((char)v114 << 8); i; --i)
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  }
  v53 = v112;
  if ((v112 & 8) != 0)
  {
    do
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    while (v114);
    v53 = v112;
  }
  if ((v53 & 0x10) != 0)
  {
    do
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    while (v114);
    v53 = v112;
  }
  if ((v53 & 2) != 0)
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  }
  buf = 0;
  v111 = 0;
  v118[0] = 0;
  v54 = 0x4000;
  v55 = realloc_array(0, v118, 0x4000uLL, 0, 0, 1);
  v56 = 0;
  v57 = 0;
  buf = (Bytef *)v118[0];
  LODWORD(v111) = 0x4000;
  HIDWORD(v111) = v55;
  while (2)
  {
    next_out = buf;
    strm.next_out = buf;
    strm.avail_out = v54;
    if (!v54)
      goto LABEL_79;
    while (1)
    {
      if (strm.avail_in)
      {
        v59 = 0;
      }
      else
      {
        if (v116[0])
          v60 = RealDFileSubFileStream::basicRead((RealDFileSubFileStream *)a1, v115, v116[0]);
        else
          v60 = 0;
        strm.avail_in = v60;
        v59 = v60 == 0;
        strm.next_in = (Bytef *)v115;
      }
      v61 = inflate(&strm, 0);
      v56 = v61;
      if (!v61)
        goto LABEL_63;
      if (v61 == 1)
        break;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 804, (uint64_t)"dfutil/realdf", 39, (uint64_t)"%.500s %.500s %d", v62, v63, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
LABEL_63:
      if (v59)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 807, (uint64_t)"dfutil/realdf", 40, (uint64_t)"%.500s %.500s", v62, v63, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
      if (!strm.avail_out)
        goto LABEL_79;
    }
    v64 = v57;
    v65 = v23;
    v70 = crc32(v40, next_out, LODWORD(strm.next_out) - (int)next_out);
    v71 = 0;
    next_out = strm.next_out;
    v72 = 1;
    do
    {
      v73 = 0;
      v74 = 0;
      v75 = v72;
      *((_DWORD *)v118 + v71) = 0;
      do
      {
        v109 = 0;
        if (strm.avail_in)
        {
          --strm.avail_in;
          v76 = *strm.next_in++;
        }
        else
        {
          RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v109, 1u, 1);
          v76 = v109;
        }
        v74 += v76 << v73;
        *((_DWORD *)v118 + v71) = v74;
        v73 += 8;
      }
      while (v73 != 32);
      v72 = 0;
      v71 = 1;
    }
    while ((v75 & 1) != 0);
    v77 = HIDWORD(v118[0]);
    v40 = v70;
    v23 = v65;
    v57 = v64;
    if (LODWORD(v118[0]) != v70)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 792, (uint64_t)"dfutil/realdf", 37, (uint64_t)"%.500s %.500s %u %u", v68, v69, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
    total_out = strm.total_out;
    if (strm.total_out != v77)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 797, (uint64_t)"dfutil/realdf", 38, (uint64_t)"%.500s %.500s %llu %u", v68, v69, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
      total_out = strm.total_out;
    }
    RealDFile::verifyCompressionInfo(*(RealDFile **)(a1 + 40), *(unsigned __int16 *)(a1 + 68), total_out, v70, v66, v67, v68, v69);
    v56 = 1;
LABEL_79:
    v79 = crc32(v40, next_out, LODWORD(strm.next_out) - (int)next_out);
    v80 = v111 - strm.avail_out;
    if ((_DWORD)v111 != strm.avail_out)
    {
      v107 = v79;
      v81 = v80 - v23;
      if (v80 <= v23)
      {
        v93 = v23;
        v81 = v111 - strm.avail_out;
        v91 = 0;
      }
      else
      {
        v82 = v57;
        v83 = *v108 + 16 * v57;
        v84 = (_DWORD *)(v83 + 8);
        v85 = *(unsigned int *)(v83 + 8);
        v86 = *(_DWORD *)(v83 + 8) + v23;
        v87 = *(_DWORD *)(v83 + 12);
        if (v86 > v87)
        {
          DgnPrimArray<char>::reallocElts(v83, v86 - v87, 1);
          v86 = *v84 + v23;
        }
        *v84 = v86;
        memcpy((void *)(*(_QWORD *)v83 + v85), buf, v23);
        v88 = v82;
        v89 = v82 + 1 >= v106;
        v90 = v82 + 1 == v106;
        v91 = v23;
        v92 = v89 ? v23 : 5242880;
        v93 = v90 ? a11 % 0x500000 : v92;
        v57 = v90 ? a11 / 0x500000 : v88 + 1;
      }
      v94 = v57;
      v95 = *v108 + 16 * v57;
      v97 = (_DWORD *)(v95 + 8);
      v96 = *(unsigned int *)(v95 + 8);
      v98 = v96 + v81;
      v99 = *(_DWORD *)(v95 + 12);
      if (v96 + v81 > v99)
      {
        DgnPrimArray<char>::reallocElts(v95, (_DWORD)v96 + v81 - v99, 1);
        v98 = *v97 + v81;
      }
      *v97 = v98;
      memcpy((void *)(*(_QWORD *)v95 + v96), &buf[v91], v81);
      v100 = v94 + 1 >= v106 ? 0 : 5242880;
      if (v94 + 1 == v106)
      {
        v100 = a11 % 0x500000;
        v101 = a11 / 0x500000;
      }
      else
      {
        v101 = v94 + 1;
      }
      v23 = v93 == v81 ? v100 : v93 - v81;
      v57 = v93 == v81 ? v101 : v94;
      v40 = v107;
      if (v56 != 1)
      {
        v54 = v111;
        continue;
      }
    }
    break;
  }
  if (inflateEnd(&strm))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 872, (uint64_t)"dfutil/realdf", 39, (uint64_t)"%.500s %.500s %d", v102, v103, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v115);
LABEL_112:
  if (*(_DWORD *)(a1 + 8) == 2)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_2099E525C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, DgnString *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  DgnStream *v22;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a22);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a17);
  DgnString::~DgnString(a13);
  DgnStream::~DgnStream(v22);
  _Unwind_Resume(a1);
}

size_t RealDFileSubFileStream::basicReadWithMode(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  if (!a3)
    return 0;
  v7 = RealDFileSubFileStream::basicRead((RealDFileSubFileStream *)a1, a2, a3);
  v10 = v7;
  if (a4 == 1 && (_DWORD)v7 != a3)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1451, (uint64_t)"dfutil/realdf", 19, (uint64_t)"%.500s %.500s %u %u", v8, v9, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  return v10;
}

void RealDFile::verifyCompressionInfo(RealDFile *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unint64_t v11;

  v10 = a2;
  v11 = *((_QWORD *)this + 19) + ((unint64_t)a2 << 7);
  if (*(_QWORD *)(v11 + 112) != a3)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4671, (uint64_t)"dfutil/realdf", 42, (uint64_t)"%.500s %.500s %llu %llu", a7, a8, v11);
  if (*(_DWORD *)(v11 + 120) != a4)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4676, (uint64_t)"dfutil/realdf", 41, (uint64_t)"%.500s %.500s %u %u", a7, a8, *((_BYTE *)this + 152) + (v10 << 7));
}

void RealDFileSubFileStream::~RealDFileSubFileStream(RealDFileSubFileStream *this, uint64_t a2, const char *a3)
{
  DFile *v4;
  unsigned int v5;
  int v6;
  Bytef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uInt avail_out;
  int v22;
  unsigned int v24;
  int v26;
  unsigned int v27;
  unsigned int total_in;
  int v29;
  uint64_t v30;
  uLong v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  Bytef *v38;
  int v39;
  int v40;
  z_stream strm;
  char __str[8];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24C217608;
  v4 = (DFile *)*((_QWORD *)this + 5);
  if (v4)
  {
    if (*((_BYTE *)this + 92) && *((_DWORD *)this + 16) == 5)
    {
      strm.next_in = 0;
      strm.avail_in = 0;
      strm.next_out = 0;
      strm.avail_out = 0;
      strm.zalloc = (alloc_func)mrecZlibAlloc;
      strm.zfree = (free_func)mrecZlibFree;
      strm.opaque = 0;
      v5 = crc32(0, 0, 0);
      deflateInit2_(&strm, 1, 8, -15, 9, 0, "1.2.12", 112);
      *(_QWORD *)__str = 0;
      v6 = realloc_array(0, (void **)__str, 0x4000uLL, 0, 0, 1);
      v7 = *(Bytef **)__str;
      v39 = 0x4000;
      v40 = v6;
      strm.next_out = *(Bytef **)__str;
      strm.avail_out = 0x4000;
      v38 = *(Bytef **)__str;
      snprintf(__str, 0xBuLL, "%c%c%c%c%c%c%c%c%c%c", 31, 139, 8, 0, 0, 0, 0, 0, 4, 3);
      RealDFileSubFileStream::basicWrite(this, __str, 10, v8, v9, v10, v11, v12);
      if (*((_DWORD *)this + 26))
      {
        v18 = 0;
        do
        {
          v19 = *((_QWORD *)this + 12) + 16 * v18;
          strm.next_in = *(Bytef **)v19;
          strm.avail_in = *(_DWORD *)(v19 + 8);
          v5 = crc32(v5, strm.next_in, strm.avail_in);
          while (strm.avail_in)
          {
            if (!strm.avail_out)
            {
              RealDFileSubFileStream::basicWrite(this, (const char *)v7, 0x4000, v13, v14, v15, v16, v17);
              strm.next_out = v7;
              strm.avail_out = 0x4000;
            }
            if (deflate(&strm, 0))
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 971, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v16, v17, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
          }
          ++v18;
        }
        while (v18 < *((unsigned int *)this + 26));
      }
      v20 = 0;
      while (1)
      {
        avail_out = strm.avail_out;
        if (strm.avail_out != 0x4000)
        {
          RealDFileSubFileStream::basicWrite(this, (const char *)v7, 0x4000 - strm.avail_out, v13, v14, v15, v16, v17);
          strm.next_out = v7;
          strm.avail_out = 0x4000;
        }
        if (v20)
          break;
        v22 = deflate(&strm, 4);
        if (v22 == -5 && avail_out == 0x4000)
          v24 = 0;
        else
          v24 = v22;
        v20 = v24 == 1 || strm.avail_out != 0;
        if (v24 >= 2)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1009, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v16, v17, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
      }
      v26 = 4;
      v27 = v5;
      do
      {
        __str[0] = v27;
        RealDFileSubFileStream::basicWrite(this, __str, 1, v13, v14, v15, v16, v17);
        v27 >>= 8;
        --v26;
      }
      while (v26);
      total_in = strm.total_in;
      v29 = 4;
      do
      {
        __str[0] = total_in;
        RealDFileSubFileStream::basicWrite(this, __str, 1, v13, v14, v15, v16, v17);
        total_in >>= 8;
        --v29;
      }
      while (v29);
      v30 = *((_QWORD *)this + 5);
      v31 = strm.total_in;
      v32 = *(_QWORD *)(v30 + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
      *(_WORD *)(v32 + 124) = 257;
      *(_QWORD *)(v32 + 112) = v31;
      *(_DWORD *)(v32 + 120) = v5;
      *(_BYTE *)(v30 + 296) = 1;
      if (deflateEnd(&strm) >= 2)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1023, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v33, v34, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
      v35 = *((unsigned int *)this + 26);
      if ((int)v35 >= 1)
      {
        v36 = 16 * v35 - 16;
        do
        {
          DgnPrimArray<unsigned int>::~DgnPrimArray(*((_QWORD *)this + 12) + v36);
          v36 -= 16;
        }
        while (v36 != -16);
      }
      *((_DWORD *)this + 26) = 0;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
      v4 = (DFile *)*((_QWORD *)this + 5);
    }
    if (*((_DWORD *)this + 14))
      v37 = (const char *)*((_QWORD *)this + 6);
    else
      v37 = (const char *)&unk_209A7E1FC;
    DFile::reportProgress(v4, v37, a3);
    *((_QWORD *)this + 5) = 0;
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 96);
  DgnString::~DgnString((RealDFileSubFileStream *)((char *)this + 48));
  DgnStream::~DgnStream(this);
}

{
  RealDFileSubFileStream::~RealDFileSubFileStream(this, a2, a3);
  JUMPOUT(0x20BD149A8);
}

void sub_2099E5940(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RealDFileSubFileStream::basicWrite(RealDFileSubFileStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int16 *v32;
  int v33;
  unsigned int v34;

  if (!(_DWORD)a3)
    return;
  v10 = *((unsigned int *)this + 22);
  v11 = *((_QWORD *)this + 10);
  v12 = *((_QWORD *)this + 5);
  if (4096 - (v11 & 0xFFF) >= a3)
    v13 = a3;
  else
    v13 = 4096 - (v11 & 0xFFF);
  v14 = *((_QWORD *)this + 10) & 0xFFFLL | ((*(unsigned int *)(v12 + 216) + v10) << 12);
  v15 = *(_QWORD *)(v12 + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
  v16 = (int *)(v15 + 104);
  v17 = (unsigned int *)(v15 + 108);
  v34 = a3;
  v18 = a3;
  while (1)
  {
    if (v18 <= v13)
    {
      v21 = 0;
    }
    else
    {
      v19 = *((_QWORD *)this + 5);
      v20 = *((unsigned __int16 *)this + 34);
      if ((_DWORD)v10 == *v16)
      {
        v21 = RealDFile::addBlock((RealDFile *)v19, v20, a3, a4, a5, a6, a7, a8);
        *v17 = 0;
      }
      else
      {
        v21 = v10 + 1;
        v22 = *(_DWORD *)(v19 + 144);
        if (v22 > (int)v10 + 1)
        {
          v23 = (unsigned __int16 *)(*(_QWORD *)(v19 + 136) + 2 * v21);
          while (1)
          {
            v24 = *v23++;
            if (v24 == (_DWORD)v20)
              break;
            if (v22 == ++v21)
            {
              v21 = *(_DWORD *)(v19 + 144);
              break;
            }
          }
        }
      }
    }
    v25 = v10 + 1;
    if (v18 == v13 || v21 != v25)
      break;
LABEL_19:
    if (v18 - v13 >= 0x1000)
      v13 += 4096;
    else
      v13 = v18;
    LODWORD(v10) = v21;
  }
  RealDFile::doWriteToCache(*((RealDFile **)this + 5), v14, a2, v13);
  v18 -= v13;
  if (v18)
  {
    a2 += v13;
    v14 = (*(unsigned int *)(*((_QWORD *)this + 5) + 216) + (unint64_t)v21) << 12;
    v13 = 0;
    goto LABEL_19;
  }
  v26 = *((_QWORD *)this + 10) + v34;
  *((_QWORD *)this + 10) = v26;
  v27 = *v16;
  v28 = v26 & 0xFFF;
  if ((v26 & 0xFFF) == 0)
  {
    v29 = *((_QWORD *)this + 5);
    v30 = *((unsigned __int16 *)this + 34);
    if ((_DWORD)v10 == v27)
    {
      LODWORD(v10) = RealDFile::addBlock((RealDFile *)v29, v30, a3, a4, a5, a6, a7, a8);
      *v17 = 0;
      v27 = *v16;
    }
    else
    {
      v31 = *(_DWORD *)(v29 + 144);
      if (v31 <= v25)
      {
        LODWORD(v10) = v10 + 1;
      }
      else
      {
        LODWORD(v10) = v10 + 1;
        v32 = (unsigned __int16 *)(*(_QWORD *)(v29 + 136) + 2 * v25);
        while (1)
        {
          v33 = *v32++;
          if (v33 == (_DWORD)v30)
            break;
          LODWORD(v10) = v10 + 1;
          if (v31 == (_DWORD)v10)
          {
            LODWORD(v10) = *(_DWORD *)(v29 + 144);
            break;
          }
        }
      }
    }
  }
  if ((_DWORD)v10 == v27 && *v17 < v28)
  {
    *v17 = v28;
    *(_BYTE *)(*((_QWORD *)this + 5) + 296) = 1;
  }
  *((_DWORD *)this + 22) = v10;
}

void RealDFileSubFileStream::printSize(RealDFileSubFileStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1044, (DgnString *)&v98);
  if ((_DWORD)v99)
    v16 = (void *)v98;
  else
    v16 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7E1FC, a3, &unk_209A7E1FC, v16);
  DgnString::~DgnString((DgnString *)&v98);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7E1FC);
  v97 = 0;
  v98 = 0;
  v21 = (a3 + 1);
  v96 = 0;
  DgnStream::printSize(this, 0xFFFFFFFFLL, v21, &v98, &v97, &v96);
  *a4 += v98;
  *a5 += v97;
  *a6 += v96;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v22 = 4;
  else
    v22 = 8;
  v95 = a3;
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1046, (DgnString *)&v98);
  if ((_DWORD)v99)
    v28 = (void *)v98;
  else
    v28 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v21, &unk_209A7E1FC, v23, v23, v28, v22, v22, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v22;
  *a5 += v22;
  v29 = sizeObject((char *)this + 48);
  v30 = sizeObject((char *)this + 48);
  v31 = sizeObject((char *)this + 48);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1048, (DgnString *)&v98);
  if ((_DWORD)v99)
    v36 = (void *)v98;
  else
    v36 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &unk_209A7E1FC, v23, v23, v36, v29, v30, v31);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v29;
  *a5 += v30;
  *a6 += v31;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1050, (DgnString *)&v98);
  if ((_DWORD)v99)
    v41 = (void *)v98;
  else
    v41 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &unk_209A7E1FC, v23, v23, v41, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1051, (DgnString *)&v98);
  if ((_DWORD)v99)
    v46 = (void *)v98;
  else
    v46 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v21, &unk_209A7E1FC, v23, v23, v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1052, (DgnString *)&v98);
  if ((_DWORD)v99)
    v51 = (void *)v98;
  else
    v51 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_209A7E1FC, v23, v23, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v98);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1054, (DgnString *)&v98);
  if ((_DWORD)v99)
    v56 = (void *)v98;
  else
    v56 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_209A7E1FC, v23, v23, v56, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1056, (DgnString *)&v98);
  if ((_DWORD)v99)
    v61 = (void *)v98;
  else
    v61 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v21, &unk_209A7E1FC, v23, v23, v61, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1057, (DgnString *)&v98);
  if ((_DWORD)v99)
    v66 = (void *)v98;
  else
    v66 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_209A7E1FC, v23, v23, v66, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v98);
  ++*a4;
  ++*a5;
  v67 = (char *)this + 96;
  v68 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 96, 0);
  v69 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)v67, 1);
  v98 = 0;
  v99 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v98);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1059, (DgnString *)&v98);
  if ((_DWORD)v99)
    v74 = (void *)v98;
  else
    v74 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_209A7E1FC, v23, v23, v74, v68, v69, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v68;
  *a5 += v69;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1061, (DgnString *)&v98);
  if ((_DWORD)v99)
    v79 = (void *)v98;
  else
    v79 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v21, &unk_209A7E1FC, v23, v23, v79, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1063, (DgnString *)&v98);
  if ((_DWORD)v99)
    v84 = (void *)v98;
  else
    v84 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_209A7E1FC, v23, v23, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1065, (DgnString *)&v98);
  if ((_DWORD)v99)
    v89 = (void *)v98;
  else
    v89 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_209A7E1FC, v23, v23, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1067, (DgnString *)&v98);
  if ((_DWORD)v99)
    v94 = (void *)v98;
  else
    v94 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v95, &unk_209A7E1FC, (35 - v95), (35 - v95), v94, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v98);
}

void sub_2099E6278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RealDFileSubFileStream::seekFromBeg(RealDFileSubFileStream *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v18;
  unsigned int v19;

  if (*((_BYTE *)this + 92))
  {
    if (*((unsigned int *)this + 28) < a2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1082, (uint64_t)"dfutil/realdf", 34, (uint64_t)"%.500s %.500s", a7, a8, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
    *((_DWORD *)this + 29) = a2;
  }
  else
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
    if (*(unsigned int *)(v10 + 108) + ((unint64_t)(*(_DWORD *)(v10 + 96) - 1) << 12) < a2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1095, (uint64_t)"dfutil/realdf", 50, (uint64_t)"%.500s %.500s %llu %llu", a7, a8, v10);
    v11 = *((_DWORD *)this + 22);
    v12 = (a2 >> 12) - (*((_QWORD *)this + 10) >> 12);
    if (v12 < 1)
    {
      if (v12 < 0)
      {
        v18 = *((_QWORD *)this + 5);
        v19 = *(_DWORD *)(v18 + 144);
        do
        {
          if (v19 <= --v11)
            v11 = v19 - 1;
          for (; v11 != -1; --v11)
          {
            if (*(unsigned __int16 *)(*(_QWORD *)(v18 + 136) + 2 * v11) == *((unsigned __int16 *)this + 34))
              break;
          }
        }
        while (!__CFADD__(v12++, 1));
      }
    }
    else
    {
      v13 = *((_QWORD *)this + 5);
      v14 = *(_DWORD *)(v13 + 144);
      do
      {
        if (v14 > ++v11)
        {
          v15 = (unsigned __int16 *)(*(_QWORD *)(v13 + 136) + 2 * v11);
          while (1)
          {
            v16 = *v15++;
            if (v16 == *((unsigned __int16 *)this + 34))
              break;
            if (v14 == ++v11)
            {
              v11 = *(_DWORD *)(v13 + 144);
              break;
            }
          }
        }
      }
      while (v12-- > 1);
    }
    *((_DWORD *)this + 22) = v11;
    *((_QWORD *)this + 10) = a2;
  }
  *((_BYTE *)this + 76) = 0;
}

uint64_t RealDFileSubFileStream::seekToEnd(uint64_t this)
{
  unint64_t v1;

  if (*(_BYTE *)(this + 92))
  {
    *(_DWORD *)(this + 116) = *(_DWORD *)(this + 112);
    *(_BYTE *)(this + 76) = 0;
  }
  else
  {
    v1 = *(_QWORD *)(*(_QWORD *)(this + 40) + 152) + ((unint64_t)*(unsigned __int16 *)(this + 68) << 7);
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)this + 24))(this, *(unsigned int *)(v1 + 108) + ((unint64_t)(*(_DWORD *)(v1 + 96) - 1) << 12));
  }
  return this;
}

uint64_t RealDFileSubFileStream::tell(RealDFileSubFileStream *this)
{
  if (*((_BYTE *)this + 92))
    return *((unsigned int *)this + 29);
  else
    return *((_QWORD *)this + 10);
}

unint64_t RealDFileSubFileStream::tell32(RealDFileSubFileStream *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(_QWORD *)this + 40))(this);
  if (HIDWORD(v3))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1154, (uint64_t)"dfutil/realdf", 59, (uint64_t)"%s", v1, v2, (char)&unk_209A7E1FC);
  return v3;
}

uint64_t RealDFileSubFileStream::eof(RealDFileSubFileStream *this)
{
  return *((unsigned __int8 *)this + 76);
}

uint64_t RealDFileSubFileStream::peekForChar(RealDFileSubFileStream *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *((_BYTE *)this + 76);
  v3 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(_QWORD *)this + 40))(this);
  v6 = 0;
  if ((*(unsigned int (**)(RealDFileSubFileStream *, char *, uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, &v6, 1, 0))
  {
    v4 = v6;
    (*(void (**)(RealDFileSubFileStream *, uint64_t))(*(_QWORD *)this + 24))(this, v3);
  }
  else
  {
    v4 = 0xFFFFFFFFLL;
  }
  *((_BYTE *)this + 76) = v2;
  return v4;
}

uint64_t RealDFileSubFileStream::basicCompressedRead(RealDFileSubFileStream *this, char *__dst, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;

  v3 = *((_DWORD *)this + 29);
  v4 = *((_DWORD *)this + 28) - v3;
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v8 = v3 / 0x500000uLL;
    v9 = *((_QWORD *)this + 12) + 16 * v8;
    v10 = v3 % 0x500000;
    v11 = *(_DWORD *)(v9 + 8) - v10;
    v12 = v5 >= v11 ? v11 : v5;
    memcpy(__dst, (const void *)(*(_QWORD *)v9 + v10), v12);
    *((_DWORD *)this + 29) += v12;
    v13 = v5 - v12;
    if ((_DWORD)v5 != (_DWORD)v12)
    {
      v14 = v12 + v10;
      v15 = v11 - v12;
      do
      {
        if (!v15 || v14 >= *(_DWORD *)(v9 + 8))
        {
          v14 = 0;
          LODWORD(v8) = v8 + 1;
          v9 = *((_QWORD *)this + 12) + 16 * v8;
          v15 = *(_DWORD *)(v9 + 8);
        }
        if (v13 >= v15)
          v16 = v15;
        else
          v16 = v13;
        memcpy(&__dst[v12], (const void *)(*(_QWORD *)v9 + v14), v16);
        LODWORD(v12) = v16 + v12;
        *((_DWORD *)this + 29) += v16;
        v15 -= v16;
        v14 += v16;
        v13 -= v16;
      }
      while (v13);
    }
  }
  return v5;
}

size_t RealDFileSubFileStream::readWithMode(RealDFileSubFileStream *this, char *a2, unsigned int a3, int a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  if (*((_BYTE *)this + 92))
    v7 = RealDFileSubFileStream::basicCompressedRead(this, a2, a3);
  else
    v7 = RealDFileSubFileStream::basicRead(this, a2, a3);
  v10 = v7;
  if (v7 < a3)
  {
    *((_BYTE *)this + 76) = 1;
    if (a4 == 1)
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1276, (uint64_t)"dfutil/realdf", 19, (uint64_t)"%.500s %.500s %u %u", v8, v9, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
  }
  return v10;
}

void RealDFileSubFileStream::throwUnexpectedEof(RealDFileSubFileStream *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1288, (uint64_t)"dfutil/realdf", 19, (uint64_t)"%.500s %.500s %u %u", a7, a8, *(_QWORD *)(*((_QWORD *)this + 5) + 152) + (*((_BYTE *)this + 68) << 7));
}

void RealDFileSubFileStream::writeBytes(RealDFileSubFileStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  size_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  size_t v65;
  int v66;
  void *v67;

  if (!(_DWORD)a3)
    return;
  if (!*((_DWORD *)this + 18))
  {
    v11 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(_QWORD *)this + 40))(this);
    (*(void (**)(RealDFileSubFileStream *, uint64_t))(*(_QWORD *)this + 24))(this, v11);
    *((_DWORD *)this + 18) = 1;
  }
  if (!*((_BYTE *)this + 92))
  {
    RealDFileSubFileStream::basicWrite(this, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v12 = *((unsigned int *)this + 29);
  if ((v12 + (unint64_t)a3) >> 32)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1317, (uint64_t)"dfutil/realdf", 51, (uint64_t)"%.500s %.500s", a7, a8, *(_BYTE *)(*((_QWORD *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
    LODWORD(v12) = *((_DWORD *)this + 29);
  }
  v13 = v12 + a3;
  v14 = *((_DWORD *)this + 28);
  v15 = v12 + a3 - v14;
  if ((int)v12 + (int)a3 > v14)
  {
    v16 = 5242880 * (v14 / 0x500000) - v14 + 5242880;
    v17 = (uint64_t *)((char *)this + 96);
    v18 = *((_DWORD *)this + 26);
    v19 = v15 - v16;
    if (v15 >= v16)
    {
      v21 = v18 - 1;
      v22 = *v17 + 16 * v21;
      v23 = *(_DWORD *)(v22 + 8);
      v24 = *(_DWORD *)(v22 + 12);
      v25 = (_DWORD *)(v22 + 8);
      v26 = v23 + v16;
      if (v26 > v24)
      {
        DgnPrimArray<char>::reallocElts(*v17 + 16 * v21, v26 - v24, 1);
        v26 = *v25 + v16;
        v18 = *((_DWORD *)this + 26);
      }
      *v25 = v26;
      v27 = v19 / 0x500000;
      v28 = v19 / 0x500000 + 1;
      v29 = v18 + v28;
      v30 = *((_DWORD *)this + 27);
      v31 = v18;
      if (v18 + v28 > v30)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, v18 + v28 - v30, 1);
        v31 = *((_DWORD *)this + 26);
        v29 = v31 + v28;
      }
      v66 = v13;
      if (v31 <= v29)
      {
        if (v31 < v29)
        {
          v34 = v29 - (unint64_t)v31;
          v35 = 16 * v31;
          do
          {
            v36 = (_QWORD *)(*v17 + v35);
            *v36 = 0;
            v36[1] = 0;
            v35 += 16;
            --v34;
          }
          while (v34);
        }
      }
      else if ((int)v31 > (int)v29)
      {
        v32 = (int)v31;
        v33 = 16 * (int)v31 - 16;
        do
        {
          --v32;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*v17 + v33);
          v33 -= 16;
        }
        while (v32 > (int)v29);
      }
      v37 = v19 % 0x500000;
      *((_DWORD *)this + 26) = v29;
      v38 = v18 + v27;
      if (v18 < v38)
      {
        v39 = 16 * v18;
        do
        {
          v40 = *v17 + v39;
          if (*(_DWORD *)(v40 + 12) >> 20 <= 4u)
          {
            v67 = 0;
            *(_DWORD *)(v40 + 12) = realloc_array(*(_QWORD **)v40, &v67, 0x500000uLL, *(unsigned int *)(v40 + 8), *(unsigned int *)(v40 + 8), 1);
            *(_QWORD *)v40 = v67;
          }
          *(_DWORD *)(v40 + 8) = 5242880;
          v39 += 16;
          --v27;
        }
        while (v27);
      }
      v41 = *v17;
      v42 = v41 + 16 * v38;
      v44 = *(_DWORD *)(v42 + 12);
      v43 = (_DWORD *)(v42 + 12);
      if (v44 < v37)
      {
        v45 = v41 + 16 * v38;
        v67 = 0;
        *v43 = realloc_array(*(_QWORD **)v45, &v67, v37, *(unsigned int *)(v45 + 8), *(unsigned int *)(v45 + 8), 1);
        *(_QWORD *)v45 = v67;
      }
      *(_DWORD *)(v41 + 16 * v38 + 8) = v37;
      v13 = v66;
      goto LABEL_40;
    }
    if (v18)
    {
LABEL_37:
      v49 = v18 - 1;
      v50 = *v17;
      v51 = *v17 + 16 * v49;
      v52 = *(_DWORD *)(v51 + 8);
      v53 = *(_DWORD *)(v51 + 12);
      v54 = (unsigned int *)(v51 + 8);
      v55 = v52 + v15;
      if (v55 > v53)
      {
        DgnPrimArray<char>::reallocElts(v50 + 16 * v49, v55 - v53, 1);
        v55 = *v54 + v15;
      }
      *v54 = v55;
LABEL_40:
      *((_DWORD *)this + 28) = v13;
      LODWORD(v12) = *((_DWORD *)this + 29);
      goto LABEL_41;
    }
    v18 = 1;
    if (*((_DWORD *)this + 27))
    {
      v20 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
      v20 = *((unsigned int *)this + 26);
      v18 = v20 + 1;
      if ((_DWORD)v20 == -1)
      {
LABEL_36:
        *((_DWORD *)this + 26) = v18;
        goto LABEL_37;
      }
    }
    v46 = v18 - v20;
    v47 = 16 * v20;
    do
    {
      v48 = (_QWORD *)(*v17 + v47);
      *v48 = 0;
      v48[1] = 0;
      v47 += 16;
      --v46;
    }
    while (v46);
    goto LABEL_36;
  }
LABEL_41:
  v56 = v12 / 0x500000uLL;
  v57 = v12 % 0x500000;
  v58 = *((_QWORD *)this + 12) + 16 * v56;
  v59 = *(_DWORD *)(v58 + 8) - v57;
  if (a3 >= v59)
    v60 = v59;
  else
    v60 = a3;
  memcpy((void *)(*(_QWORD *)v58 + v57), a2, v60);
  *((_DWORD *)this + 29) += v60;
  v61 = a3 - v60;
  if ((_DWORD)a3 != (_DWORD)v60)
  {
    v62 = v60 + v57;
    v63 = v59 - v60;
    v64 = (unsigned int *)(v58 + 8);
    do
    {
      if (!v63 || v62 >= *v64)
      {
        v62 = 0;
        LODWORD(v56) = v56 + 1;
        v58 = *((_QWORD *)this + 12) + 16 * v56;
        v63 = *(_DWORD *)(v58 + 8);
      }
      if (v61 >= v63)
        v65 = v63;
      else
        v65 = v61;
      v64 = (unsigned int *)(v58 + 8);
      memcpy((void *)(*(_QWORD *)v58 + v62), &a2[v60], v65);
      LODWORD(v60) = v65 + v60;
      *((_DWORD *)this + 29) += v65;
      v63 -= v65;
      v62 += v65;
      v61 -= v65;
    }
    while (v61);
  }
}

void RealDFileSubFileStream::flush(RealDFile **this)
{
  RealDFile::flushDFile(this[5]);
}

void RealDFile::flushDFile(RealDFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)this + 108))
  {
    OsFile::seekFromBegGrowWithZeros(*((OsFile **)this + 10), *((_QWORD *)this + 53));
    if (*((_WORD *)this + 46))
      EncryptBuffer(*((unsigned __int8 **)this + 51), *((_DWORD *)this + 108), *((unsigned __int16 *)this + 46), v2, v3, v4, v5, v6);
    OsFile::writeBytes(*((OsFile **)this + 10), *((const char **)this + 51), *((unsigned int *)this + 108));
    *((_DWORD *)this + 108) = 0;
  }
}

uint64_t RealDFileSubFileStream::beginCachedReadGroup(RealDFileSubFileStream *this, int a2, int a3, char a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 *v12;
  int v13;

  result = (*(uint64_t (**)(RealDFileSubFileStream *))(*(_QWORD *)this + 40))(this);
  if ((a4 & 1) != 0 || (result & 0xFFF) == 0)
  {
    *((_DWORD *)this + 30) = *((_DWORD *)this + 22);
    v9 = *((_QWORD *)this + 5);
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *((_DWORD *)this + 22) + 1;
    v11 = *(_DWORD *)(v9 + 144);
    if (v11 > v10)
    {
      v12 = (unsigned __int16 *)(*(_QWORD *)(v9 + 136) + 2 * v10);
      while (1)
      {
        v13 = *v12++;
        if (v13 == *((unsigned __int16 *)this + 34))
          break;
        if (v11 == ++v10)
        {
          v10 = *(_DWORD *)(v9 + 144);
          break;
        }
      }
    }
    *((_DWORD *)this + 30) = v10;
  }
  *(_DWORD *)(v9 + 376) = a2;
  *(_DWORD *)(v9 + 380) = a3;
  *(_BYTE *)(v9 + 384) = a4;
  return result;
}

void RealDFileSubFileStream::endCachedReadGroup(RealDFileSubFileStream *this, unsigned int a2)
{
  RealDFile::endCachedReadGroup(*((RealDFile **)this + 5), *((unsigned __int16 *)this + 34), *((_DWORD *)this + 30), *((_DWORD *)this + 22), a2);
  *((_DWORD *)this + 30) = -1;
}

double RealDFile::endCachedReadGroup(RealDFile *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;

  if (a3 < a4)
  {
    v8 = a3;
    v10 = *((_DWORD *)this + 54);
    do
    {
      v11 = v8 + v10;
      if (v11 >= *((_DWORD *)this + 86))
        break;
      v12 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v11);
      if (v12)
      {
        v13 = *((_DWORD *)this + 90);
        if (v13 == *((_DWORD *)this + 91))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 352, 1, 1);
          v13 = *((_DWORD *)this + 90);
        }
        *(_QWORD *)(*((_QWORD *)this + 44) + 8 * v13) = v12;
        *((_DWORD *)this + 90) = v13 + 1;
        *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v11) = 0;
        v14 = *((_DWORD *)this + 93) - 1;
        *((_DWORD *)this + 93) = v14;
        if (!v14)
        {
          *((_DWORD *)this + 92) = 0;
          if (a5)
            goto LABEL_17;
          goto LABEL_25;
        }
        if (*((_DWORD *)this + 92) == (_DWORD)v11)
          *((_DWORD *)this + 92) = v11 + 1;
      }
      ++v8;
      v15 = *((_DWORD *)this + 36);
      if (v15 > v8)
      {
        v16 = (unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * v8);
        while (1)
        {
          v17 = *v16++;
          if (v17 == a2)
            break;
          if (v15 == ++v8)
          {
            v8 = *((_DWORD *)this + 36);
            break;
          }
        }
      }
    }
    while (v8 < a4);
  }
  if (a5)
  {
LABEL_17:
    if (*((_DWORD *)this + 93) >= a5)
    {
      v18 = *((unsigned int *)this + 86);
      if ((int)v18 >= 1)
      {
        v19 = 8 * v18 - 8;
        do
        {
          DgnDelete<DgnPrimFixArray<char>>(*(_QWORD *)(*((_QWORD *)this + 42) + v19));
          *(_QWORD *)(*((_QWORD *)this + 42) + v19) = 0;
          v19 -= 8;
        }
        while (v19 != -8);
      }
      *((_DWORD *)this + 86) = 0;
      v20 = *((unsigned int *)this + 90);
      if ((int)v20 >= 1)
      {
        v21 = 8 * v20 - 8;
        do
        {
          DgnDelete<DgnPrimFixArray<char>>(*(_QWORD *)(*((_QWORD *)this + 44) + v21));
          *(_QWORD *)(*((_QWORD *)this + 44) + v21) = 0;
          v21 -= 8;
        }
        while (v21 != -8);
      }
      *((_DWORD *)this + 90) = 0;
      *((_QWORD *)this + 46) = 0;
    }
  }
LABEL_25:
  *(_QWORD *)&result = 0x1800000003;
  *((_QWORD *)this + 47) = 0x1800000003;
  *((_BYTE *)this + 384) = 1;
  return result;
}

uint64_t RealDFile::addBlock(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 *v17;
  void *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;

  v8 = a2;
  v10 = *((_QWORD *)this + 19);
  v11 = a2;
  v12 = v10 + ((unint64_t)a2 << 7);
  v14 = *(_DWORD *)(v12 + 104);
  v13 = (_DWORD *)(v12 + 104);
  v15 = (v14 + 1);
  v16 = *((_DWORD *)this + 36);
  if (v16 > v15)
  {
    v17 = (unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * v15);
    while (*v17++)
    {
      v15 = (v15 + 1);
      if (v16 == (_DWORD)v15)
      {
        v15 = *((unsigned int *)this + 36);
        break;
      }
    }
  }
  if (*(_BYTE *)(gParDiagnosticDFileSimulateAddBlockFailure + 41))
  {
    if (*((_DWORD *)this + 6))
      v19 = (void *)*((_QWORD *)this + 2);
    else
      v19 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4464, (uint64_t)"dfutil/realdf", 5, (uint64_t)"%.500s", a7, a8, (char)v19);
    v16 = *((_DWORD *)this + 36);
  }
  if ((_DWORD)v15 == v16)
    v15 = RealDFile::addBlockSpace(this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this + 24) <= (int)v15)
    *((_DWORD *)this + 24) = v15 + 1;
  *(_WORD *)(*((_QWORD *)this + 17) + 2 * v15) = v8;
  *v13 = v15;
  v20 = v10 + (v11 << 7);
  v22 = *(_DWORD *)(v20 + 100);
  v21 = (_DWORD *)(v20 + 100);
  if (v22 == -1)
    *v21 = v15;
  ++*(_DWORD *)(v10 + (v11 << 7) + 96);
  *((_BYTE *)this + 296) = 1;
  return v15;
}

void RealDFile::doWriteToCache(RealDFile *this, unint64_t a2, const char *a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (a4)
  {
    v4 = a4;
    v6 = a2;
    if (*((_BYTE *)this + 332))
    {
      (*(void (**)(RealDFile *, _QWORD))(*(_QWORD *)this + 64))(this, *((unsigned __int8 *)this + 385));
    }
    else
    {
      v22 = *((unsigned int *)this + 82);
      if ((_DWORD)v22)
      {
        v23 = *((_QWORD *)this + 40);
        if (v23 <= a2)
          v24 = a2;
        else
          v24 = *((_QWORD *)this + 40);
        v25 = v23 + v22;
        if (v25 >= a2 + a4)
          v25 = a2 + a4;
        if (v25 > v24)
          *((_DWORD *)this + 82) = 0;
      }
    }
    v8 = *((unsigned int *)this + 108);
    if ((_DWORD)v8
      && ((v9 = *((_QWORD *)this + 53), v9 <= v6) && v9 + v8 >= v6
       || (RealDFile::flushDFile(this), LODWORD(v8) = *((_DWORD *)this + 108), (_DWORD)v8)))
    {
      v10 = *((_QWORD *)this + 53);
    }
    else
    {
      LODWORD(v8) = 0;
      *((_QWORD *)this + 53) = v6;
      v10 = v6;
    }
    v11 = v6 - v10;
    v12 = *((_DWORD *)this + 104) - (v6 - v10);
    if (v12 >= v4)
      v13 = v4;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = v13;
      v15 = a3;
      v16 = v11;
      do
      {
        v17 = *v15++;
        *(_BYTE *)(*((_QWORD *)this + 51) + v16++) = v17;
        --v14;
      }
      while (v14);
      LODWORD(v8) = *((_DWORD *)this + 108);
    }
    v18 = v13 + v11;
    if (v8 < v18)
      *((_DWORD *)this + 108) = v18;
    if (v12 < v4)
    {
      do
      {
        RealDFile::flushDFile(this);
        a3 += v13;
        v4 -= v13;
        v19 = *((_DWORD *)this + 104);
        if (v4 >= v19)
          v20 = v19;
        else
          v20 = v4;
        if ((_DWORD)v20)
        {
          for (i = 0; i != v20; ++i)
            *(_BYTE *)(*((_QWORD *)this + 51) + i) = a3[i];
        }
        v6 += v13;
        *((_QWORD *)this + 53) = v6;
        *((_DWORD *)this + 108) = v20;
        LODWORD(v13) = v20;
      }
      while (v4 > v19);
    }
  }
}

ssize_t RealDFile::doReadFromCache(RealDFile *this, unint64_t a2, char *a3, ssize_t a4, int a5)
{
  ssize_t v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v30;
  unsigned int v31;
  size_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  OsFile *v40;
  unsigned int Bytes;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = a4;
  v10 = *((unsigned int *)this + 108);
  v11 = a2 + a4;
  if ((_DWORD)v10)
  {
    v12 = *((_QWORD *)this + 53);
    if (v12 <= a2)
      v13 = a2;
    else
      v13 = *((_QWORD *)this + 53);
    v14 = v12 + v10;
    if (v14 >= v11)
      v14 = a2 + a4;
    if (v14 > v13)
      RealDFile::flushDFile(this);
  }
  if (*((_DWORD *)this + 78) >= v6)
  {
    v25 = *((_QWORD *)this + 40);
    if (v25 <= a2)
      v26 = a2;
    else
      v26 = *((_QWORD *)this + 40);
    v27 = v25 + *((unsigned int *)this + 82);
    if (v27 >= v11)
      v27 = v11;
    if (v27 <= v26)
      v28 = 0;
    else
      v28 = (v27 - v26);
    if (v11 > v26 + v28 && v25 > a2)
      v30 = 0;
    else
      v30 = v28;
    if ((_DWORD)v30)
      memcpy(&a3[(v26 - a2)], (const void *)(*((_QWORD *)this + 38) + (v26 - v25)), v30);
    v31 = v6 - v30;
    if ((_DWORD)v6 != (_DWORD)v30)
    {
      if (v25 <= a2)
        v32 = v30;
      else
        v32 = 0;
      v33 = &a3[v32];
      v34 = v32 + a2;
      OsFile::seekFromBeg(*((OsFile **)this + 10), v32 + a2);
      v40 = (OsFile *)*((_QWORD *)this + 10);
      if (a5)
      {
        Bytes = OsFile::readBytes(v40, *((char **)this + 38), *((_DWORD *)this + 78), v35, v36, v37, v38, v39);
        *((_DWORD *)this + 82) = Bytes;
        if (Bytes >= v31)
          v47 = v31;
        else
          v47 = Bytes;
        DecryptBuffer(*((unsigned __int8 **)this + 38), Bytes, *((unsigned __int16 *)this + 46), v42, v43, v44, v45, v46);
        *((_QWORD *)this + 40) = v34;
        memcpy(v33, *((const void **)this + 38), v47);
      }
      else
      {
        LODWORD(v47) = OsFile::readBytes(v40, v33, v31, v35, v36, v37, v38, v39);
        DecryptBuffer((unsigned __int8 *)v33, v47, *((unsigned __int16 *)this + 46), v48, v49, v50, v51, v52);
      }
      return (v47 + v30);
    }
  }
  else
  {
    OsFile::seekFromBeg(*((OsFile **)this + 10), a2);
    v6 = OsFile::readBytes(*((OsFile **)this + 10), a3, v6, v15, v16, v17, v18, v19);
    DecryptBuffer((unsigned __int8 *)a3, v6, *((unsigned __int16 *)this + 46), v20, v21, v22, v23, v24);
  }
  return v6;
}

void RealDFile::RealDFile(RealDFile *this, const FileSpec *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  MrecTime *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;

  DFile::DFile(this, a2);
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  v4 = v3 + 152;
  *(_OWORD *)(v3 + 200) = 0u;
  v5 = v3 + 200;
  *(_QWORD *)v3 = &off_24C219CC0;
  *(_OWORD *)(v3 + 120) = 0u;
  v6 = (MrecTime *)(v3 + 220);
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  MrecTime::MrecTime((MrecTime *)(v3 + 220));
  MrecTime::MrecTime((RealDFile *)((char *)this + 244));
  DgnString::DgnString((RealDFile *)((char *)this + 272));
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 46) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 54) = 9;
  *((_QWORD *)this + 36) = 0x100000001;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 10) = 0;
  MrecTime::MrecTime(v6);
  MrecTime::MrecTime((RealDFile *)((char *)this + 244));
  v7 = *((_DWORD *)this + 40);
  if (v7 == *((_DWORD *)this + 41))
  {
    DgnArray<RealDFileDirEntry>::reallocElts(v4, 1, 1);
    v7 = *((_DWORD *)this + 40);
  }
  v8 = *((_QWORD *)this + 19) + ((unint64_t)v7 << 7);
  *(_OWORD *)(v8 + 110) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_WORD *)(v8 + 126) = -8454;
  ++*((_DWORD *)this + 40);
  v9 = *((_DWORD *)this + 52);
  if (v9 == *((_DWORD *)this + 53))
  {
    DgnPrimArray<char>::reallocElts(v5, 1, 1);
    v9 = *((_DWORD *)this + 52);
  }
  *(_BYTE *)(*((_QWORD *)this + 25) + v9) = 0;
  *((_DWORD *)this + 52) = v9 + 1;
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 82) = 0;
  *((_BYTE *)this + 332) = 0;
  *((_OWORD *)this + 23) = xmmword_209A7E150;
  *((_WORD *)this + 192) = 257;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_BYTE *)this + 297) = 0;
}

void sub_2099E75B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  DFile *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  DgnString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(v17);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(a12);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a11);
  DgnString::~DgnString(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 168);
  DgnIArray<Utterance *>::~DgnIArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13);
  DFile::~DFile(v12);
  _Unwind_Resume(a1);
}

uint64_t *RealDFile::createReadOnlyClone(RealDFile *this)
{
  uint64_t *v2;
  void **v3;
  DFile *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = MemChunkAlloc(0x1B8uLL, 0);
  v3 = (void **)((char *)this + 16);
  RealDFile::RealDFile((RealDFile *)v2, (RealDFile *)((char *)this + 16));
  DFile::copyDFileState(v4, this);
  if (*(_BYTE *)(gParDiagnosticDFileSimulateOpenFailure + 41))
  {
    if (*((_DWORD *)this + 6))
      v7 = *v3;
    else
      v7 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1792, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v5, v6, (char)v7);
  }
  OsFile::openOsFile((RealDFile *)((char *)this + 16), 0);
  v2[10] = v10;
  if (!*((_QWORD *)this + 10))
  {
    if (*((_DWORD *)this + 6))
      v11 = *v3;
    else
      v11 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1794, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v8, v9, (char)v11);
  }
  *((_BYTE *)v2 + 332) = 1;
  *((_WORD *)v2 + 44) = *((_WORD *)this + 44);
  *(_DWORD *)((char *)v2 + 90) = *(_DWORD *)((char *)this + 90);
  *((_DWORD *)v2 + 24) = *((_DWORD *)this + 24);
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 13), (uint64_t *)this + 13, 0, *((_DWORD *)this + 28));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 15), (uint64_t *)this + 15, 0, *((_DWORD *)this + 32));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(v2 + 17), (uint64_t *)this + 17, 0, *((_DWORD *)this + 36));
  DgnArray<RealDFileDirEntry>::copyArraySlice((unint64_t)(v2 + 19), (_QWORD *)this + 19, 0, *((_DWORD *)this + 40));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 21), (uint64_t *)this + 21, 0, *((_DWORD *)this + 44));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 23), (uint64_t *)this + 23, 0, *((_DWORD *)this + 48));
  DgnPrimArray<BOOL>::copyArraySlice((unint64_t)(v2 + 25), (uint64_t *)this + 25, 0, *((_DWORD *)this + 52));
  *((_DWORD *)v2 + 54) = *((_DWORD *)this + 54);
  MrecTime::operator=((uint64_t)v2 + 220, (uint64_t)this + 220);
  MrecTime::operator=((uint64_t)v2 + 244, (uint64_t)this + 244);
  DgnString::operator=((DgnString *)(v2 + 34), (RealDFile *)((char *)this + 272));
  v2[36] = *((_QWORD *)this + 36);
  *((_WORD *)v2 + 148) = *((_WORD *)this + 148);
  return v2;
}

void RealDFile::~RealDFile(OsFile **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  _DWORD *v23;
  BOOL v24;
  unsigned int v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  off_t v39;
  void *v40;
  int v41;
  int v42;
  void *v43;

  *this = (OsFile *)&off_24C219CC0;
  if (this[10])
  {
    if (!*((_BYTE *)this + 48))
    {
      RealDFile::flushDFile((RealDFile *)this);
      RealDFile::addRemainingDirEntryBlocks((uint64_t)this, v2, v3, v4, v5, v6, v7, v8);
      RealDFile::addRemainingBlockUsageBlocks((uint64_t)this, v9, v10, v11, v12, v13, v14, v15);
      RealDFile::shrinkInternalUsage((RealDFile *)this);
    }
    if (*((_BYTE *)this + 296))
      RealDFile::writeHeader((RealDFile *)this);
    *((_DWORD *)this + 82) = 0;
    if (!*((_BYTE *)this + 48))
    {
      v43 = 0;
      v16 = realloc_array(0, &v43, 0x1000uLL, 0, 0, 1);
      v17 = (const char *)v43;
      v40 = v43;
      v41 = 4096;
      v42 = v16;
      bzero(v43, 0x1000uLL);
      v18 = *((_DWORD *)this + 40);
      if (v18 < 2)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v19 = 0;
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = v21;
          v23 = (_DWORD *)((char *)this[19] + 128 * (unint64_t)v21);
          if (v23[24])
            v24 = v23[25] == -1;
          else
            v24 = 1;
          if (!v24)
          {
            v27 = v23[27];
            v26 = v23 + 27;
            v25 = v27;
            v28 = *(v26 - 1);
            OsFile::seekFromBeg(this[10], v27 + ((*((unsigned int *)this + 54) + v28) << 12));
            OsFile::writeBytes(this[10], v17, (4096 - *v26));
            if (v28 >= v19)
              v20 = v25;
            if (v28 > v19)
              v19 = v28;
            v18 = *((_DWORD *)this + 40);
          }
          v21 = v22 + 1;
        }
        while (v18 > (unsigned __int16)(v22 + 1));
      }
      v29 = *((unsigned int *)this + 32);
      if ((_DWORD)v29)
      {
        v30 = 0;
        while (*((_DWORD *)this[15] + v30) != -1)
        {
          if (v29 == ++v30)
          {
            LODWORD(v30) = *((_DWORD *)this + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v30) = 0;
      }
      v31 = *((unsigned int *)this + 28);
      if ((_DWORD)v31)
      {
        v32 = 0;
        while (*((_DWORD *)this[13] + v32) != -1)
        {
          if (v31 == ++v32)
          {
            LODWORD(v32) = *((_DWORD *)this + 28);
            break;
          }
        }
      }
      else
      {
        LODWORD(v32) = 0;
      }
      if ((_DWORD)v30)
      {
        v33 = *((_DWORD *)this[15] + (v30 - 1));
        if (v33 > v19)
        {
          v20 = 4096;
          v19 = v33;
        }
      }
      if ((_DWORD)v32 && *((_DWORD *)this[13] + (v32 - 1)) > v19)
        v20 = 4096;
      v34 = *((unsigned int *)this + 54);
      v35 = *((_DWORD *)this + 24);
      if (v35)
        v36 = ((unint64_t)(v35 - 1) << 12) + v20;
      else
        v36 = 0;
      OsFile::seekToEnd(this[10]);
      v37 = OsFile::tell(this[10]);
      v38 = v37;
      v39 = v36 + (v34 << 12);
      if (v37 != v39)
      {
        OsFile::seekFromBeg(this[10], v39);
        OsFile::writeBytes(this[10], v17, (v38 - v39));
      }
      OsFile::seekFromBeg(this[10], 32);
      LODWORD(v43) = -307429618;
      OsFile::writeBytes(this[10], (const char *)&v43, 4uLL);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    }
    DgnDelete<OsFile>(this[10]);
    this[10] = 0;
  }
  *((_BYTE *)this + 297) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 51));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 49));
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)(this + 44));
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)(this + 42));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 38));
  DgnString::~DgnString((DgnString *)(this + 34));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 25));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 23));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 21));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 15));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 13));
  DFile::~DFile((DFile *)this);
}

{
  RealDFile::~RealDFile(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t RealDFile::addRemainingDirEntryBlocks(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;

  v8 = this;
  if (*(_DWORD *)(this + 176))
  {
    v9 = 0;
    this = 0;
    do
    {
      v10 = *(_DWORD *)(v8 + 144);
      if (v10 > this)
      {
        v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 136) + 2 * this);
        while (*v11++)
        {
          this = (this + 1);
          if (v10 == (_DWORD)this)
            goto LABEL_9;
        }
      }
      if ((_DWORD)this == v10)
LABEL_9:
        this = RealDFile::addBlockSpace((RealDFile *)v8, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(*(_QWORD *)(v8 + 104) + 4 * *(unsigned int *)(*(_QWORD *)(v8 + 168) + 4 * v9)) = this;
      *(_WORD *)(*(_QWORD *)(v8 + 136) + 2 * this) = -2;
      if (*(_DWORD *)(v8 + 96) < (this + 1))
        *(_DWORD *)(v8 + 96) = this + 1;
      ++v9;
    }
    while (v9 < *(unsigned int *)(v8 + 176));
  }
  *(_DWORD *)(v8 + 176) = 0;
  return this;
}

uint64_t RealDFile::addRemainingBlockUsageBlocks(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;

  v8 = this;
  if (*(_DWORD *)(this + 192))
  {
    v9 = 0;
    this = 0;
    do
    {
      v10 = *(_DWORD *)(v8 + 144);
      if (v10 > this)
      {
        v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 136) + 2 * this);
        while (*v11++)
        {
          this = (this + 1);
          if (v10 == (_DWORD)this)
            goto LABEL_9;
        }
      }
      if ((_DWORD)this == v10)
LABEL_9:
        this = RealDFile::addBlockSpace((RealDFile *)v8, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(*(_QWORD *)(v8 + 120) + 4 * *(unsigned int *)(*(_QWORD *)(v8 + 184) + 4 * v9)) = this;
      *(_WORD *)(*(_QWORD *)(v8 + 136) + 2 * this) = -1;
      if (*(_DWORD *)(v8 + 96) < (this + 1))
        *(_DWORD *)(v8 + 96) = this + 1;
      ++v9;
    }
    while (v9 < *(unsigned int *)(v8 + 192));
  }
  *(_DWORD *)(v8 + 192) = 0;
  return this;
}

void RealDFile::shrinkInternalUsage(RealDFile *this)
{
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;

  v2 = (uint64_t *)((char *)this + 136);
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = *((unsigned int *)this + 36);
    if ((_DWORD)v5)
    {
      v6 = v5 - 1;
      v7 = *((_DWORD *)this + 36);
      while (v6 != -1)
      {
        v8 = *(unsigned __int16 *)(*v2 + 2 * v6--);
        --v7;
        if (v8)
          goto LABEL_8;
      }
      v7 = -1;
LABEL_8:
      v9 = (v7 + 2046) / 0x7FEu;
      v10 = 2046 * v9;
      if (2046 * v9 < v5)
      {
        v11 = *((_DWORD *)this + 32);
        if (v11 > v9)
        {
          v12 = (_DWORD *)(*((_QWORD *)this + 15) + 4 * (v11 - 1));
          do
          {
            v13 = *v12;
            if ((_DWORD)v13 != -1)
            {
              *(_WORD *)(*v2 + 2 * v13) = 0;
              *v12 = -1;
            }
            --v12;
            --v11;
          }
          while (v9 < v11);
        }
        v14 = *((_DWORD *)this + 37);
        if (v10 > v14)
          DgnPrimArray<short>::reallocElts((uint64_t)v2, v10 - v14, 0);
        *((_DWORD *)this + 36) = v10;
        *((_BYTE *)this + 296) = 1;
      }
    }
    v15 = *((unsigned int *)this + 32);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = 0;
      v17 = 0;
      v18 = *((_QWORD *)this + 15);
      do
      {
        v19 = *(unsigned int *)(v18 + 4 * v17);
        if ((_DWORD)v19 == -1)
          break;
        v20 = *((_DWORD *)this + 36);
        v21 = v20 - v16;
        if (v20 <= v16)
          break;
        v22 = *v2;
        v16 = v16;
        while (*(_WORD *)(v22 + 2 * v16))
        {
          ++v16;
          if (!--v21)
            goto LABEL_28;
        }
        if (v19 > v16)
        {
          *(_WORD *)(v22 + 2 * v16) = *(_WORD *)(v22 + 2 * v19);
          *(_WORD *)(v22 + 2 * v19) = 0;
          *(_DWORD *)(v18 + 4 * v17) = v16;
          *((_BYTE *)this + 296) = 1;
          v15 = *((unsigned int *)this + 32);
        }
        ++v17;
      }
      while (v17 < v15);
    }
LABEL_28:
    v23 = *((unsigned int *)this + 28);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 0;
      v26 = *((_QWORD *)this + 13);
      do
      {
        v27 = *(unsigned int *)(v26 + 4 * v25);
        if ((_DWORD)v27 == -1)
          break;
        v28 = *((unsigned int *)this + 36);
        if (v24 < v28)
        {
          while (*(_WORD *)(*v2 + 2 * v24))
          {
            if (v28 == ++v24)
            {
              v24 = *((unsigned int *)this + 36);
              goto LABEL_36;
            }
          }
          v24 = v24;
        }
LABEL_36:
        if (v24 >= *((unsigned int *)this + 40))
          break;
        if (v24 < v27)
        {
          v29 = *((_QWORD *)this + 17);
          *(_WORD *)(v29 + 2 * v24) = *(_WORD *)(v29 + 2 * v27);
          *(_WORD *)(v29 + 2 * v27) = 0;
          *(_DWORD *)(v26 + 4 * v25) = v24;
          *((_BYTE *)this + 296) = 1;
          v23 = *((unsigned int *)this + 28);
        }
        ++v25;
      }
      while (v25 < v23);
    }
    v3 = 0;
  }
  while ((v4 & 1) != 0);
  v30 = *((unsigned int *)this + 36);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      if (*(_WORD *)(*v2 + 2 * v31))
        v32 = v31;
      ++v31;
    }
    while (v30 != v31);
    v33 = v32 + 1;
  }
  else
  {
    v33 = 1;
  }
  if (v33 < *((_DWORD *)this + 24))
  {
    *((_DWORD *)this + 24) = v33;
    OsFile::shrinkSize(*((OsFile **)this + 10), (*((unsigned int *)this + 54) + (unint64_t)v33) << 12);
    *((_BYTE *)this + 296) = 1;
  }
}

void RealDFile::writeHeader(RealDFile *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t Buffer;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  RealDFile *v46;
  uint64_t v47;
  char v48;
  unsigned int *v49;
  void *v50[3];

  v50[2] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int16 *)this + 46);
  *((_WORD *)this + 46) = 0;
  OsFile::seekFromBeg(*((OsFile **)this + 10), 0);
  v46 = this;
  v47 = 0;
  v48 = 1;
  v50[0] = 0;
  v45 = realloc_array(0, v50, 0x600uLL, 0, 0, 1);
  v43 = (char *)v50[0];
  v44 = 1536;
  bzero(v50[0], 0x600uLL);
  snprintf((char *)v50, 0x10uLL, "DFILE v%u", *((unsigned __int16 *)this + 44));
  v3 = strlen((const char *)v50);
  if (v3 <= 0xF)
    bzero((char *)v50 + v3, 16 - v3);
  RealDFile::doWriteToCache(this, 0, (const char *)v50, 0x10u);
  LOWORD(v41) = *((_WORD *)this + 44);
  RealDFile::doWriteToCache(this, 0x10uLL, (const char *)&v41, 2u);
  LOWORD(v41) = *((_WORD *)this + 45);
  RealDFile::doWriteToCache(this, 0x12uLL, (const char *)&v41, 2u);
  LOWORD(v41) = v2;
  RealDFile::doWriteToCache(this, 0x14uLL, (const char *)&v41, 2u);
  v47 = 22;
  LOWORD(v41) = -2;
  RealDFile::doWriteToCache(this, 0x16uLL, (const char *)&v41, 2u);
  LODWORD(v41) = 4096;
  RealDFile::doWriteToCache(this, 0x18uLL, (const char *)&v41, 4u);
  LODWORD(v41) = *((_DWORD *)this + 24);
  RealDFile::doWriteToCache(this, 0x1CuLL, (const char *)&v41, 4u);
  LODWORD(v41) = -758187298;
  RealDFile::doWriteToCache(this, 0x20uLL, (const char *)&v41, 4u);
  v47 = 36;
  LODWORD(v41) = *((_DWORD *)this + 72);
  RealDFile::doWriteToCache(this, 0x24uLL, (const char *)&v41, 4u);
  MrecTime::setToCurrentLocalTime((RealDFile *)((char *)this + 244));
  v41 = 0;
  v42 = 0;
  v49 = 0;
  v4 = realloc_array(0, (void **)&v49, 0x18uLL, 0, 0, 1);
  v41 = (char *)v49;
  LODWORD(v42) = 6;
  HIDWORD(v42) = v4 >> 2;
  MrecTime::packLittleEndMrecTime((unsigned int *)this + 55, v49);
  if ((_DWORD)v42)
  {
    v5 = (4 * v42);
    RealDFile::doWriteToCache(this, 0x28uLL, v41, 4 * v42);
    v6 = v5 + 40;
    v47 = v6;
  }
  else
  {
    v6 = 40;
  }
  MrecTime::packLittleEndMrecTime((unsigned int *)this + 61, (unsigned int *)v41);
  if ((_DWORD)v42)
  {
    v7 = 4 * v42;
    RealDFile::doWriteToCache(this, v6, v41, 4 * v42);
    v6 += v7;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  if (v6 != 88)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v8, v9, v6);
  RealDFile::doWriteToCache(this, v6, v43, 0xA8u);
  v47 = v6 + 168;
  if (v6 != 88)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v10, v11, v6 - 88);
  DgnString::DgnString((DgnString *)&v41);
  DgnString::preAllocate((unint64_t)&v41, 256);
  GetFullMrecDescription((DgnString *)&v41);
  v12 = v42;
  Buffer = DgnString::getBuffer((DgnString *)&v41, 0x100u);
  v14 = (unsigned __int8 *)Buffer;
  LODWORD(v15) = v12 - 1;
  if (!v12)
    LODWORD(v15) = 0;
  if (v15 >= 0xFF)
    v15 = 255;
  else
    v15 = v15;
  bzero((void *)(Buffer + v15), (256 - v15));
  EncryptBuffer(v14, 0x100u, v2, v16, v17, v18, v19, v20);
  RealDFile::doWriteToCache(this, v6 + 168, (const char *)v14, 0x100u);
  DgnString::~DgnString((DgnString *)&v41);
  if (v6 != 88)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v21, v22, v6 - 88);
  RealDFile::doWriteToCache(this, v6 + 424, v43, 0x600u);
  v25 = v6 + 1960;
  v47 = v25;
  if (v25 != 2048)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v23, v24, v25);
  v49 = 0;
  v26 = realloc_array(0, (void **)&v49, 0x83F8uLL, 0, 0, 1);
  v27 = 0;
  v28 = v49;
  v41 = (char *)v49;
  LODWORD(v42) = 8446;
  HIDWORD(v42) = v26 >> 2;
  do
    v28[v27] = -1;
  while (v27++ < 0x20FD);
  v30 = *((_DWORD *)this + 28);
  if (!v30
    || (v31 = 4 * v30,
        RealDFile::doWriteToCache(this, v25, *((const char **)this + 13), 4 * v30),
        v25 += v31,
        v30 = *((_DWORD *)this + 28),
        v30 != 256))
  {
    v34 = 1024 - 4 * v30;
    RealDFile::doWriteToCache(this, v25, v41, v34);
    v25 += v34;
    v47 = v25;
  }
  if (v25 != 3072)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v32, v33, v25);
  LODWORD(v49) = -307429602;
  RealDFile::doWriteToCache(this, v25, (const char *)&v49, 4u);
  v35 = v25 + 4;
  v36 = *((_DWORD *)this + 32);
  if (!v36
    || (v37 = 4 * v36,
        RealDFile::doWriteToCache(this, v35, *((const char **)this + 15), 4 * v36),
        v35 += v37,
        v36 = *((_DWORD *)this + 32),
        v36 != 8446))
  {
    v38 = 33784 - 4 * v36;
    RealDFile::doWriteToCache(this, v35, v41, v38);
    v35 += v38;
  }
  LODWORD(v49) = -307429602;
  RealDFile::doWriteToCache(this, v35, (const char *)&v49, 4u);
  v47 = v35 + 4;
  if (v35 != 36860)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v39, v40, v35 + 4);
  RealDFile::writeDirEntries((uint64_t)this, (uint64_t)&v46);
  RealDFile::writeBlockUsage((uint64_t)this, (uint64_t)&v46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  RealDFile::flushDFile(this);
  *((_WORD *)this + 46) = v2;
  *((_BYTE *)this + 296) = 0;
}

void sub_2099E8598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void RealDFile::printSize(RealDFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t fixed;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  int v274;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2048, (DgnString *)&v273);
  if (v274)
    v16 = (void *)v273;
  else
    v16 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7E1FC, a3, &unk_209A7E1FC, v16);
  DgnString::~DgnString((DgnString *)&v273);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7E1FC);
  v272 = 0;
  v273 = 0;
  v21 = (a3 + 1);
  v271 = 0;
  DFile::printSize(this, 0xFFFFFFFFLL, v21, &v273, &v272, &v271);
  *a4 += v273;
  *a5 += v272;
  *a6 += v271;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v22 = 4;
  else
    v22 = 8;
  v23 = *((_QWORD *)this + 10);
  if (v23)
  {
    v24 = OsFile::sizeObject(v23, 0) + v22;
    v25 = *((_QWORD *)this + 10);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v22 = 4;
    else
      v22 = 8;
    if (v25 && (v22 += OsFile::sizeObject(v25, 1), (v26 = *((_QWORD *)this + 10)) != 0))
      v27 = OsFile::sizeObject(v26, 3);
    else
      v27 = 0;
  }
  else
  {
    v27 = 0;
    v24 = v22;
  }
  v270 = a3;
  v28 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2050, (DgnString *)&v273);
  if (v274)
    v33 = (void *)v273;
  else
    v33 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, v21, &unk_209A7E1FC, v28, v28, v33, v24, v22, v27);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v24;
  *a5 += v22;
  *a6 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v38 = (void *)v273;
  else
    v38 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v21, &unk_209A7E1FC, v28, v28, v38, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v43 = (void *)v273;
  else
    v43 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &unk_209A7E1FC, v28, v28, v43, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v48 = (void *)v273;
  else
    v48 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_209A7E1FC, v28, v28, v48, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v53 = (void *)v273;
  else
    v53 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_209A7E1FC, v28, v28, v53, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v54 = 12;
  else
    v54 = 16;
  v55 = *((unsigned int *)this + 28);
  v56 = *((_DWORD *)this + 29);
  if (v56 >= v55)
  {
    v57 = 0;
    if ((int)v55 > 0)
      v54 += 4 * (v55 - 1) + 4;
    v58 = v54 + 4 * (v56 - v55);
  }
  else
  {
    v57 = 4 * v55;
    v58 = v54;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v63 = (void *)v273;
  else
    v63 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_209A7E1FC, v28, v28, v63, v58, v54, v57);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v58;
  *a5 += v54;
  *a6 += v57;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 12;
  else
    v64 = 16;
  v65 = *((unsigned int *)this + 32);
  v66 = *((_DWORD *)this + 33);
  if (v66 >= v65)
  {
    v67 = 0;
    if ((int)v65 > 0)
      v64 += 4 * (v65 - 1) + 4;
    v68 = v64 + 4 * (v66 - v65);
  }
  else
  {
    v67 = 4 * v65;
    v68 = v64;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v73 = (void *)v273;
  else
    v73 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_209A7E1FC, v28, v28, v73, v68, v64, v67);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v68;
  *a5 += v64;
  *a6 += v67;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v74 = 12;
  else
    v74 = 16;
  v75 = *((unsigned int *)this + 36);
  v76 = *((_DWORD *)this + 37);
  if (v76 >= v75)
  {
    v77 = 0;
    if ((int)v75 > 0)
      v74 = (v74 | 2) + 2 * (v75 - 1);
    v78 = v74 + 2 * (v76 - v75);
  }
  else
  {
    v77 = 2 * v75;
    v78 = v74;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v83 = (void *)v273;
  else
    v83 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_209A7E1FC, v28, v28, v83, v78, v74, v77);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v78;
  *a5 += v74;
  *a6 += v77;
  v84 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v84 = 16;
  v85 = *((unsigned int *)this + 40);
  v86 = v85 << 7;
  if ((int)v85 <= 0)
    v86 = 0;
  v87 = v86 | v84;
  v88 = (v86 | v84) + ((unint64_t)(*((_DWORD *)this + 41) - v85) << 7);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v93 = (void *)v273;
  else
    v93 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_209A7E1FC, v28, v28, v93, v88, v87, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v88;
  *a5 += v87;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v94 = 12;
  else
    v94 = 16;
  v95 = *((unsigned int *)this + 44);
  v96 = *((_DWORD *)this + 45);
  if (v96 >= v95)
  {
    v97 = 0;
    if ((int)v95 > 0)
      v94 += 4 * (v95 - 1) + 4;
    v98 = v94 + 4 * (v96 - v95);
  }
  else
  {
    v97 = 4 * v95;
    v98 = v94;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v103 = (void *)v273;
  else
    v103 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_209A7E1FC, v28, v28, v103, v98, v94, v97);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v98;
  *a5 += v94;
  *a6 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v104 = 12;
  else
    v104 = 16;
  v105 = *((unsigned int *)this + 48);
  v106 = *((_DWORD *)this + 49);
  if (v106 >= v105)
  {
    v107 = 0;
    if ((int)v105 > 0)
      v104 += 4 * (v105 - 1) + 4;
    v108 = v104 + 4 * (v106 - v105);
  }
  else
  {
    v107 = 4 * v105;
    v108 = v104;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v113 = (void *)v273;
  else
    v113 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v21, &unk_209A7E1FC, v28, v28, v113, v108, v104, v107);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v108;
  *a5 += v104;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v114 = 12;
  else
    v114 = 16;
  v115 = *((_DWORD *)this + 52);
  v116 = *((_DWORD *)this + 53);
  v117 = v116 >= v115;
  v118 = v116 - v115;
  if (v117)
  {
    v120 = v115 & ~(v115 >> 31);
    v115 = 0;
    v119 = v114 + v120;
    v114 += v120 + v118;
  }
  else
  {
    v119 = v114;
  }
  v121 = v115;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v126 = (void *)v273;
  else
    v126 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &unk_209A7E1FC, v28, v28, v126, v114, v119, v121);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v114;
  *a5 += v119;
  *a6 += v121;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v131 = (void *)v273;
  else
    v131 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v21, &unk_209A7E1FC, v28, v28, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v136 = (void *)v273;
  else
    v136 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v21, &unk_209A7E1FC, v28, v28, v136, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 24;
  *a5 += 24;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v141 = (void *)v273;
  else
    v141 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &unk_209A7E1FC, v28, v28, v141, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 24;
  *a5 += 24;
  v142 = sizeObject((char *)this + 272);
  v143 = sizeObject((char *)this + 272);
  v144 = sizeObject((char *)this + 272);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v149 = (void *)v273;
  else
    v149 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_209A7E1FC, v28, v28, v149, v142, v143, v144);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v142;
  *a5 += v143;
  *a6 += v144;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v154 = (void *)v273;
  else
    v154 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v21, &unk_209A7E1FC, v28, v28, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v159 = (void *)v273;
  else
    v159 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v21, &unk_209A7E1FC, v28, v28, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v164 = (void *)v273;
  else
    v164 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_209A7E1FC, v28, v28, v164, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v169 = (void *)v273;
  else
    v169 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v21, &unk_209A7E1FC, v28, v28, v169, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  v170 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v170 = 12;
  v171 = v170 + (*((_DWORD *)this + 78) & ~(*((int *)this + 78) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v176 = (void *)v273;
  else
    v176 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v21, &unk_209A7E1FC, v28, v28, v176, v171, v171, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v171;
  *a5 += v171;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v181 = (void *)v273;
  else
    v181 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v21, &unk_209A7E1FC, v28, v28, v181, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v186 = (void *)v273;
  else
    v186 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v21, &unk_209A7E1FC, v28, v28, v186, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v191 = (void *)v273;
  else
    v191 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v21, &unk_209A7E1FC, v28, v28, v191, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  fixed = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 336, 0);
  v193 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 336, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v198 = (void *)v273;
  else
    v198 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v21, &unk_209A7E1FC, v28, v28, v198, fixed, v193, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += fixed;
  *a5 += v193;
  v199 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 352, 0);
  v200 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 352, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v205 = (void *)v273;
  else
    v205 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v201, v202, v203, v204, v21, &unk_209A7E1FC, v28, v28, v205, v199, v200, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v199;
  *a5 += v200;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v210 = (void *)v273;
  else
    v210 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v206, v207, v208, v209, v21, &unk_209A7E1FC, v28, v28, v210, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v215 = (void *)v273;
  else
    v215 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v211, v212, v213, v214, v21, &unk_209A7E1FC, v28, v28, v215, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v220 = (void *)v273;
  else
    v220 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v216, v217, v218, v219, v21, &unk_209A7E1FC, v28, v28, v220, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v225 = (void *)v273;
  else
    v225 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v21, &unk_209A7E1FC, v28, v28, v225, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v230 = (void *)v273;
  else
    v230 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_209A7E1FC, v28, v28, v230, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v235 = (void *)v273;
  else
    v235 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v21, &unk_209A7E1FC, v28, v28, v235, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v236 = 12;
  else
    v236 = 16;
  v237 = *((_DWORD *)this + 100);
  v238 = *((_DWORD *)this + 101);
  v117 = v238 >= v237;
  v239 = v238 - v237;
  if (v117)
  {
    v241 = v237 & ~(v237 >> 31);
    v237 = 0;
    v240 = v236 + v241;
    v236 += v241 + v239;
  }
  else
  {
    v240 = v236;
  }
  v242 = v237;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v247 = (void *)v273;
  else
    v247 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v243, v244, v245, v246, v21, &unk_209A7E1FC, v28, v28, v247, v236, v240, v242);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v236;
  *a5 += v240;
  *a6 += v242;
  v248 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v248 = 12;
  v249 = v248 + (*((_DWORD *)this + 104) & ~(*((int *)this + 104) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v254 = (void *)v273;
  else
    v254 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_209A7E1FC, v28, v28, v254, v249, v249, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v249;
  *a5 += v249;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v259 = (void *)v273;
  else
    v259 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v255, v256, v257, v258, v21, &unk_209A7E1FC, v28, v28, v259, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274)
    v264 = (void *)v273;
  else
    v264 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_209A7E1FC, v28, v28, v264, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2060, (DgnString *)&v273);
  if (v274)
    v269 = (void *)v273;
  else
    v269 = &unk_209A7E1FC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v265, v266, v267, v268, v270, &unk_209A7E1FC, (35 - v270), (35 - v270), v269, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v273);
}

void sub_2099E99A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimFixArray<char> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 8;
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 12;
  else
    result = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 12;
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v6 = 8;
      v7 = v5 + 1;
      v8 = v6 + v2;
      do
      {
        v9 = v2;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          v9 = v2;
          if (v10)
            v9 = v8 + (*(_DWORD *)(v10 + 8) & ~(*(int *)(v10 + 8) >> 31));
        }
        result += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = (*(_DWORD *)(a1 + 12) - v5);
      v12 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v12 = 3;
      result += v11 << v12;
    }
  }
  return result;
}

_QWORD *RealDFile::startUp(uint64_t a1, const FileSpec *a2, int a3, int a4, _DWORD *a5, DgnString *a6)
{
  int v10;
  const FileSpec *v12;
  const FileSpec *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  OsFile *v18;
  OsFile *v19;
  void *v20;
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  int DFileVersion;
  void *v25;
  void *v26;
  void *v27;
  OsFile *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  off_t FileSize;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *result;

  v10 = (int)a2;
  v12 = (const FileSpec *)(a1 + 16);
  if (!OsFile::fileExists((OsFile **)(a1 + 16), a2))
  {
    if (*(_DWORD *)(a1 + 312))
    {
      if (v10)
        goto LABEL_8;
      goto LABEL_31;
    }
LABEL_30:
    *(_QWORD *)(a1 + 304) = MemChunkAlloc(0x9000uLL, 0);
    *(_DWORD *)(a1 + 312) = 36864;
    if (v10)
      goto LABEL_8;
LABEL_31:
    v23 = 0;
    *(_BYTE *)(a1 + 48) = 1;
    v21 = (_BYTE *)(a1 + 48);
    *(_DWORD *)(a1 + 288) = a3;
    v22 = (_BYTE *)(a1 + 297);
    *(_BYTE *)(a1 + 297) = 0;
    goto LABEL_40;
  }
  if (v10 == 1)
  {
    OsFile::openOsFile(v12, 1);
    v19 = v18;
    if (!v18)
    {
      if (*(_DWORD *)(a1 + 24))
        v20 = *(void **)v12;
      else
        v20 = &unk_209A7E1FC;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2078, (uint64_t)"dfutil/realdf", 13, (uint64_t)"%.500s", v16, v17, (char)v20);
    }
    DgnDelete<OsFile>(v19);
    if (!*(_DWORD *)(a1 + 312))
    {
      *(_QWORD *)(a1 + 304) = MemChunkAlloc(0x9000uLL, 0);
      *(_DWORD *)(a1 + 312) = 36864;
    }
    if (!*(_DWORD *)(a1 + 416))
    {
      *(_QWORD *)(a1 + 408) = MemChunkAlloc(0x9000uLL, 0);
      *(_DWORD *)(a1 + 416) = 36864;
    }
    *(_BYTE *)(a1 + 48) = 0;
    v21 = (_BYTE *)(a1 + 48);
    *(_DWORD *)(a1 + 288) = a3;
    v22 = (_BYTE *)(a1 + 297);
    *(_BYTE *)(a1 + 297) = 0;
LABEL_39:
    v23 = 2;
    goto LABEL_40;
  }
  DFileVersion = RealDFile::getDFileVersion(v12, v13);
  if ((DFileVersion - 1) > 4)
  {
    if ((DFileVersion - 9) > 0xFFFFFFFC)
      goto LABEL_27;
  }
  else
  {
    if (*(_DWORD *)(a1 + 24))
      v25 = *(void **)v12;
    else
      v25 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2094, (uint64_t)"dfutil/realdf", 14, (uint64_t)"%.500s %d %d", v14, v15, (char)v25);
  }
  if (*(_DWORD *)(a1 + 24))
    v26 = *(void **)v12;
  else
    v26 = &unk_209A7E1FC;
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2097, (uint64_t)"dfutil/realdf", 18, (uint64_t)"%.500s", v14, v15, (char)v26);
LABEL_27:
  if (!*(_DWORD *)(a1 + 312))
    goto LABEL_30;
  if (!v10)
    goto LABEL_31;
LABEL_8:
  if (!*(_DWORD *)(a1 + 416))
  {
    *(_QWORD *)(a1 + 408) = MemChunkAlloc(0x9000uLL, 0);
    *(_DWORD *)(a1 + 416) = 36864;
  }
  *(_BYTE *)(a1 + 48) = 0;
  v21 = (_BYTE *)(a1 + 48);
  *(_DWORD *)(a1 + 288) = a3;
  v22 = (_BYTE *)(a1 + 297);
  *(_BYTE *)(a1 + 297) = 0;
  switch(v10)
  {
    case 1:
      goto LABEL_39;
    case 3:
      v23 = 4;
      break;
    case 2:
      v23 = 3;
      break;
    default:
      v23 = 0;
      break;
  }
LABEL_40:
  if (*(_BYTE *)(gParDiagnosticDFileSimulateOpenFailure + 41))
  {
    if (*(_DWORD *)(a1 + 24))
      v27 = *(void **)v12;
    else
      v27 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2148, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v14, v15, (char)v27);
  }
  OsFile::openOsFile(v12, v23);
  *(_QWORD *)(a1 + 80) = v28;
  if (!v28)
  {
    if (*(_DWORD *)(a1 + 24))
      v31 = *(void **)v12;
    else
      v31 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2150, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v29, v30, (char)v31);
    v28 = *(OsFile **)(a1 + 80);
  }
  FileSize = OsFile::getFileSize(v28);
  if (FileSize)
  {
    v35 = FileSize;
    RealDFile::readHeader(a1, a4, a5, a6);
    v38 = *(_DWORD *)(a1 + 96);
    if (v38)
    {
      v39 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 2 * (v38 - 1));
      if ((v39 - 1) <= 0xFFFC
        && (v35 & 0xFFF) != 0
        && ((v35 - (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a1 + 152) + (v39 << 7) + 108)) & 0xFFF) != 0)
      {
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2207, (uint64_t)"dfutil/realdf", 12, (uint64_t)"%llu %.500s %u %llu", v36, v37, v35);
      }
    }
  }
  else
  {
    if (*v21)
    {
      if (*(_DWORD *)(a1 + 24))
        v40 = *(void **)v12;
      else
        v40 = &unk_209A7E1FC;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2158, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v33, v34, (char)v40);
    }
    *(_DWORD *)(a1 + 88) = 8;
    *(_WORD *)(a1 + 92) = 2;
    MrecTime::setToCurrentLocalTime((MrecTime *)(a1 + 220));
    RealDFile::writeHeader((RealDFile *)a1);
  }
  *(_DWORD *)(a1 + 328) = 0;
  v41 = *(_QWORD **)(a1 + 304);
  if (v41)
  {
    MemChunkFree(v41, 0);
    *(_QWORD *)(a1 + 304) = 0;
  }
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 332) = 1;
  *(_DWORD *)(a1 + 432) = 0;
  result = *(_QWORD **)(a1 + 408);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)(a1 + 408) = 0;
  }
  *(_DWORD *)(a1 + 416) = 0;
  if (!*(_BYTE *)(a1 + 48))
  {
    result = MemChunkAlloc(0x7000uLL, 0);
    *(_QWORD *)(a1 + 408) = result;
    *(_DWORD *)(a1 + 416) = 28672;
  }
  *v22 = 1;
  return result;
}

uint64_t RealDFile::getDFileVersion(RealDFile *this, const FileSpec *a2)
{
  OsFile *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OsFile *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v24;
  char v25[2];
  char v26[8];
  uint64_t v27;
  char v28[130];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  OsFile::openOsFile(this, 0);
  if (!v2)
    return 0xFFFFFFFFLL;
  v8 = v2;
  if (OsFile::readBytes(v2, v28, 0x82u, v3, v4, v5, v6, v7) != 130)
  {
    OsFile::~OsFile(v8);
    MemChunkFree(v24, 0);
    return 0xFFFFFFFFLL;
  }
  OsFile::seekFromBeg(v8, 0);
  *(_QWORD *)v26 = 0;
  v27 = 0;
  OsFile::readBytes(v8, v26, 0x10u, v9, v10, v11, v12, v13);
  HIBYTE(v27) = 0;
  OsFile::readBytes(v8, v25, 2u, v14, v15, v16, v17, v18);
  v19 = (__int16)(v25[1] << 8) | v25[0];
  OsFile::~OsFile(v8);
  MemChunkFree(v20, 0);
  if (v19 >= 0 && *(_DWORD *)&v26[3] == 1981826380 && *(_DWORD *)v26 == 1279870532)
    return v19;
  else
    return 0xFFFFFFFFLL;
}

uint64_t RealDFile::readHeader(uint64_t a1, int a2, _DWORD *a3, DgnString *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  int v34;
  const char *MrecVersionNumberString;
  DFile *v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  ssize_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char **v45;
  char *Buffer;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  char *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  RealDFile *v103;
  uint64_t v104;
  uint64_t v105;
  char **v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unint64_t v127;
  _DWORD *v128;
  unsigned int v129;
  _BOOL4 v130;
  uint64_t v131;
  int v132;
  void *v133;
  char v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  unsigned int v151;
  int i;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  DFile *v163;
  unsigned int v164[2];
  RealDFile *v165;
  uint64_t v166;
  char v167;
  char v168[8];
  unsigned __int8 v169;
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v165 = (RealDFile *)a1;
  v167 = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0, v168, 16, 1);
  v170 = 0;
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x10uLL, (char *)&v163, 2, 1);
  v166 = 18;
  v10 = (unsigned __int16)v163;
  *(_WORD *)(a1 + 88) = (_WORD)v163;
  v11 = v10;
  if ((v10 - 6) >= 3)
  {
    if (*(_DWORD *)(a1 + 24))
      v12 = *(void **)(a1 + 16);
    else
      v12 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2999, (uint64_t)"dfutil/realdf", 22, (uint64_t)"%.500s %u", v8, v9, (char)v12);
    v11 = *(unsigned __int16 *)(a1 + 88);
  }
  switch(v11)
  {
    case 8:
      v13 = *(_QWORD *)v168;
      v14 = 0x387620454C494644;
      goto LABEL_12;
    case 7:
      v13 = *(_QWORD *)v168;
      v14 = 0x377620454C494644;
LABEL_12:
      if (!(v13 ^ v14 | v169))
        goto LABEL_17;
      break;
    case 6:
      v13 = *(_QWORD *)v168;
      v14 = 0x367620454C494644;
      goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 24))
    v15 = *(void **)(a1 + 16);
  else
    v15 = &unk_209A7E1FC;
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3009, (uint64_t)"dfutil/realdf", 23, (uint64_t)"%.500s %u %.500s", v8, v9, (char)v15);
LABEL_17:
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x12uLL, (char *)&v163, 2, 1);
  v18 = (unsigned __int16)v163;
  *(_WORD *)(a1 + 90) = (_WORD)v163;
  v19 = *(unsigned __int16 *)(a1 + 88);
  if (v19 == 6 && v18 || (v19 == 8 || v19 == 7) && v18)
  {
    if (*(_DWORD *)(a1 + 24))
      v20 = *(void **)(a1 + 16);
    else
      v20 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3016, (uint64_t)"dfutil/realdf", 21, (uint64_t)"%.500s %u %u", v16, v17, (char)v20);
  }
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x14uLL, (char *)&v163, 2, 1);
  v21 = (unsigned __int16)v163;
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x16uLL, (char *)&v163, 2, 1);
  v166 = 24;
  v24 = (char)v163;
  if ((unsigned __int16)v163 != 65534)
  {
    if ((unsigned __int16)v163 == 65279)
    {
      if (*(_DWORD *)(a1 + 24))
        v25 = *(void **)(a1 + 16);
      else
        v25 = &unk_209A7E1FC;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3022, (uint64_t)"dfutil/realdf", 49, (uint64_t)"%.500s", v22, v23, (char)v25);
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3024, (uint64_t)"dfutil/realdf", 6, (uint64_t)"0x%04x %.500s", v22, v23, v24);
  }
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x18uLL, (char *)&v163, 4, 1);
  v26 = (int)v163;
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x1CuLL, (char *)&v163, 4, 1);
  *(_DWORD *)(a1 + 96) = (_DWORD)v163;
  *(_DWORD *)(a1 + 216) = 9;
  if (v26 != 4096)
  {
    if (*(_DWORD *)(a1 + 24))
      v29 = *(void **)(a1 + 16);
    else
      v29 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3030, (uint64_t)"dfutil/realdf", 24, (uint64_t)"%.500s %u", v27, v28, (char)v29);
  }
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x20uLL, (char *)&v163, 4, 1);
  v166 = 36;
  if ((_DWORD)v163 != -307429618)
  {
    if ((_DWORD)v163 == -758187298)
    {
      if (*(_DWORD *)(a1 + 24))
        v32 = *(void **)(a1 + 16);
      else
        v32 = &unk_209A7E1FC;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3039, (uint64_t)"dfutil/realdf", 1, (uint64_t)"%.500s", v30, v31, (char)v32);
    }
    if (*(_DWORD *)(a1 + 24))
      v33 = *(void **)(a1 + 16);
    else
      v33 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3044, (uint64_t)"dfutil/realdf", 2, (uint64_t)"%.500s 0x%x 0x%x", v30, v31, (char)v33);
  }
  if (a3)
    *a3 = 0;
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x24uLL, (char *)&v163, 4, 1);
  v34 = 0;
  MrecVersionNumberString = 0;
  v36 = (DFile *)v163;
  *(_DWORD *)(a1 + 292) = (_DWORD)v163;
  v37 = *(_DWORD *)(a1 + 288);
  if (v37 >= 2 && v36 >= 2)
  {
    if (v37 == (_DWORD)v36)
    {
      if (a3)
        *a3 = 1;
      v34 = 0;
      MrecVersionNumberString = 0;
      switch((int)v36)
      {
        case 2:
        case 3:
        case 4:
          v34 = 0;
          MrecVersionNumberString = "1.19.000.13381";
          break;
        case 5:
        case 6:
          v34 = 0;
          MrecVersionNumberString = "1.18.000.12608";
          break;
        case 8:
        case 11:
          MrecVersionNumberString = GetMrecVersionNumberString();
          v34 = 1;
          break;
        case 9:
        case 10:
          v34 = 0;
          MrecVersionNumberString = "1.19.000.13553";
          break;
        case 13:
          v34 = 0;
          MrecVersionNumberString = "1.22.000.14058";
          break;
        case 14:
          v34 = 0;
          MrecVersionNumberString = "1.22.100.14536";
          break;
        case 15:
          v34 = 0;
          MrecVersionNumberString = "1.23.000.14829";
          break;
        case 16:
          v34 = 0;
          MrecVersionNumberString = "1.24.000.15247";
          break;
        case 17:
          v34 = 0;
          MrecVersionNumberString = "1.24.000.15347";
          break;
        default:
          break;
      }
    }
    else
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24))
          v38 = *(void **)(a1 + 16);
        else
          v38 = &unk_209A7E1FC;
        DFile::getNameForSemanticType(v36);
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 288));
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3069, (uint64_t)"dfutil/realdf", 52, (uint64_t)"%.500s %u %.500s %u %.500s", v39, v40, (char)v38);
      }
      MrecVersionNumberString = 0;
      v34 = 0;
      if (a3)
        *a3 = 4;
    }
  }
  v163 = 0;
  *(_QWORD *)v164 = 0;
  v161 = 0;
  v164[1] = realloc_array(0, (void **)&v161, 0x18uLL, 0, 0, 1) >> 2;
  v163 = (DFile *)v161;
  v164[0] = 6;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x28uLL, v161, 24, 1);
  MrecTime::unpackLittleEndMrecTime((_DWORD *)(a1 + 220), (const unsigned int *)v163);
  if (v164[0])
  {
    v41 = 4 * v164[0];
    RealDFile::doReadFromCache((RealDFile *)a1, 0x40uLL, (char *)v163, v41, 1);
    v42 = v41 + 64;
    v166 = v42;
  }
  else
  {
    v42 = 64;
  }
  MrecTime::unpackLittleEndMrecTime((_DWORD *)(a1 + 244), (const unsigned int *)v163);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  if (v42 != 88)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v43, v44, v42);
  v163 = 0;
  *(_QWORD *)v164 = 0;
  v161 = 0;
  v164[1] = realloc_array(0, (void **)&v161, 0x800uLL, 0, 0, 1);
  v163 = (DFile *)v161;
  v164[0] = 2048;
  RealDFile::doReadFromCache((RealDFile *)a1, v42, v161, 168, 1);
  v45 = (const char **)(a1 + 272);
  Buffer = (char *)DgnString::getBuffer((DgnString *)(a1 + 272), 0x100u);
  RealDFile::doReadFromCache((RealDFile *)a1, v42 + 168, Buffer, 256, 1);
  v47 = (unsigned __int8 *)DgnString::getBuffer((DgnString *)(a1 + 272), 0x100u);
  DecryptBuffer(v47, 0x100u, v21, v48, v49, v50, v51, v52);
  RealDFile::doReadFromCache((RealDFile *)a1, v42 + 424, (char *)v163, 1536, 1);
  v56 = v42 + 1960;
  v166 = v56;
  if (MrecVersionNumberString)
  {
    v57 = *(unsigned __int16 *)(a1 + 88);
    if (v57 == 6)
      v58 = "MREC Version ";
    else
      v58 = "MREC v";
    if (*(_DWORD *)(a1 + 280))
      v59 = *v45;
    else
      v59 = (const char *)&unk_209A7E1FC;
    if (!DgnString::isPrefixNoCase((DgnString *)v58, v59, v53))
    {
      if (*(_DWORD *)(a1 + 24))
        v62 = *(void **)(a1 + 16);
      else
        v62 = &unk_209A7E1FC;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3222, (uint64_t)"dfutil/realdf", 53, (uint64_t)"%.500s %u %.500s", v60, v61, (char)v62);
    }
    if (*(_DWORD *)(a1 + 280))
      v63 = *v45;
    else
      v63 = (const char *)&unk_209A7E1FC;
    v64 = 6;
    if (v57 == 6)
      v64 = 13;
    v65 = &v63[v64];
    v66 = v63[v64];
    if (v66)
    {
      v67 = 0;
      do
      {
        if ((v66 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v66 + 60) & 0x4000) != 0)
          break;
        v66 = v65[++v67];
      }
      while (v65[v67]);
    }
    else
    {
      v67 = 0;
    }
    DgnString::DgnString((DgnString *)&v161, v65, v67);
    if (a4)
      DgnString::operator=(a4, (DgnString *)&v161);
    if (v162)
      v74 = v161;
    else
      v74 = (char *)&unk_209A7E1FC;
    if ((InternalCompareMrecVersions(v74, "1.19.110.00000", v68, v69, v70, v71, v72, v73) & 0x80000000) == 0)
    {
      v81 = v162 ? v161 : (const char *)&unk_209A7E1FC;
      if ((int)InternalCompareMrecVersions(v81, "1.19.110.99999", v75, v76, v77, v78, v79, v80) <= 0
        && (InternalCompareMrecVersions(MrecVersionNumberString, "1.19.000.13299", v75, v76, v77, v78, v79, v80) & 0x80000000) == 0
        && (int)InternalCompareMrecVersions(MrecVersionNumberString, "1.19.000.99999", v75, v76, v77, v78, v79, v80) <= 0)
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 24))
            v84 = *(void **)(a1 + 16);
          else
            v84 = &unk_209A7E1FC;
          DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3261, (uint64_t)"dfutil/realdf", 61, (uint64_t)"%.500s %u %.500s %.500s %.500s", v159, v160, (char)v84);
        }
        if (a3)
          *a3 = 2;
      }
    }
    if (v162)
      v82 = v161;
    else
      v82 = (char *)&unk_209A7E1FC;
    if ((InternalCompareMrecVersions(v82, MrecVersionNumberString, v75, v76, v77, v78, v79, v80) & 0x80000000) != 0)
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24))
          v83 = *(void **)(a1 + 16);
        else
          v83 = &unk_209A7E1FC;
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3277, (uint64_t)"dfutil/realdf", 54, (uint64_t)"%.500s %u %.500s %.500s %.500s", v85, v86, (char)v83);
      }
      if (a3)
        *a3 = 2;
    }
    v93 = GetMrecVersionNumberString();
    if (v34)
    {
      v94 = v162 ? v161 : (const char *)&unk_209A7E1FC;
      if ((int)InternalCompareMrecVersions(v94, v93, v87, v88, v89, v90, v91, v92) >= 1)
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 24))
            v95 = *(void **)(a1 + 16);
          else
            v95 = &unk_209A7E1FC;
          DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3294, (uint64_t)"dfutil/realdf", 55, (uint64_t)"%.500s %u %.500s %.500s %.500s", v96, v97, (char)v95);
        }
        if (a3)
          *a3 = 3;
      }
    }
    if (v162)
      v98 = v161;
    else
      v98 = (char *)&unk_209A7E1FC;
    if ((int)InternalCompareMrecForkVersions(v98, v93, v87, v88, v89, v90, v91, v92) >= 1)
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24))
          v99 = *(void **)(a1 + 16);
        else
          v99 = &unk_209A7E1FC;
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3309, (uint64_t)"dfutil/realdf", 55, (uint64_t)"%.500s %u %.500s %.500s %.500s", v100, v101, (char)v99);
      }
      if (a3)
        *a3 = 3;
    }
    DgnString::~DgnString((DgnString *)&v161);
    v56 = v166;
  }
  if (v56 != 2048)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v54, v55, v56);
  v102 = *(_DWORD *)(a1 + 116);
  if (v102 <= 0xFF)
    DgnPrimArray<unsigned int>::reallocElts(a1 + 104, 256 - v102, 0);
  *(_DWORD *)(a1 + 112) = 256;
  v103 = v165;
  RealDFile::doReadFromCache(v165, v56, *(char **)(a1 + 104), 1024, 1);
  v166 = v56 + 1024;
  if (v56 != 2048)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v104, v105, v56);
  v106 = (char **)(a1 + 120);
  v107 = *(_DWORD *)(a1 + 132);
  if (v107 <= 0x20FD)
    DgnPrimArray<unsigned int>::reallocElts(a1 + 120, 8446 - v107, 0);
  *(_DWORD *)(a1 + 128) = 8446;
  LODWORD(v161) = 0;
  RealDFile::doReadFromCache(v103, v56 + 1024, (char *)&v161, 4, 1);
  if ((_DWORD)v161 != -307429602)
  {
    if (*(_DWORD *)(a1 + 24))
      v110 = *(void **)(a1 + 16);
    else
      v110 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3357, (uint64_t)"dfutil/realdf", 3, (uint64_t)"%.500s 0x%x 0x%x", v108, v109, (char)v110);
  }
  v111 = v56 + 1028;
  v112 = *(_DWORD *)(a1 + 128);
  if (v112)
  {
    v113 = 4 * v112;
    RealDFile::doReadFromCache(v103, v111, *v106, (4 * v112), 1);
    v111 += v113;
  }
  LODWORD(v161) = 0;
  RealDFile::doReadFromCache(v103, v111, (char *)&v161, 4, 1);
  v166 = v111 + 4;
  if ((_DWORD)v161 != -307429602)
  {
    if (*(_DWORD *)(a1 + 24))
      v116 = *(void **)(a1 + 16);
    else
      v116 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3371, (uint64_t)"dfutil/realdf", 3, (uint64_t)"%.500s 0x%x 0x%x", v114, v115, (char)v116);
  }
  if (v111 != 36860)
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v114, v115, v111 + 4);
  v117 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v117)
  {
    v118 = 0;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v118) != -1)
    {
      if (v117 == ++v118)
        goto LABEL_171;
    }
    LODWORD(v117) = v118;
LABEL_171:
    v119 = *(_DWORD *)(a1 + 116);
    if (v117 > v119)
      DgnPrimArray<unsigned int>::reallocElts(a1 + 104, v117 - v119, 0);
  }
  *(_DWORD *)(a1 + 112) = v117;
  DgnPrimArray<unsigned int>::compact(a1 + 104);
  v120 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v120)
  {
    v121 = 0;
    while (*(_DWORD *)&(*v106)[4 * v121] != -1)
    {
      if (v120 == ++v121)
        goto LABEL_179;
    }
    LODWORD(v120) = v121;
LABEL_179:
    v122 = *(_DWORD *)(a1 + 132);
    if (v120 > v122)
      DgnPrimArray<unsigned int>::reallocElts(a1 + 120, v120 - v122, 0);
  }
  *(_DWORD *)(a1 + 128) = v120;
  DgnPrimArray<unsigned int>::compact(a1 + 120);
  if (!(_DWORD)v117)
  {
LABEL_188:
    v130 = 0;
    LODWORD(v127) = -1;
    if (!(_DWORD)v120)
      goto LABEL_194;
    goto LABEL_191;
  }
  v125 = *(unsigned int **)(a1 + 104);
  v126 = *(_DWORD *)(a1 + 96);
  if (*v125 < v126)
  {
    v127 = 0;
    v128 = v125 + 1;
    while (v117 - 1 != v127)
    {
      v129 = v128[v127++];
      if (v129 >= v126)
      {
        v130 = v127 < v117;
        if ((_DWORD)v120)
          goto LABEL_191;
        goto LABEL_194;
      }
    }
    goto LABEL_188;
  }
  LODWORD(v127) = 0;
  v130 = 1;
  if (!(_DWORD)v120)
  {
LABEL_194:
    v132 = -1;
    goto LABEL_196;
  }
LABEL_191:
  v131 = 0;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v131) < *(_DWORD *)(a1 + 96))
  {
    if ((_DWORD)v120 == (_DWORD)++v131)
      goto LABEL_194;
  }
  v130 = 1;
  v132 = v131;
LABEL_196:
  if ((_DWORD)v127 != -1 && v130)
  {
    if (*(_DWORD *)(a1 + 24))
      v133 = *(void **)(a1 + 16);
    else
      v133 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3428, (uint64_t)"dfutil/realdf", 7, (uint64_t)"%.500s %.500s %u %u %u", v123, v124, (char)v133);
  }
  v134 = !v130;
  if (v132 == -1)
    v134 = 1;
  if ((v134 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 24))
      v135 = *(void **)(a1 + 16);
    else
      v135 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3435, (uint64_t)"dfutil/realdf", 7, (uint64_t)"%.500s %.500s %u %u %u", v123, v124, (char)v135);
  }
  RealDFile::readDirEntries(a1, (uint64_t)&v165);
  RealDFile::readBlockUsage(a1, (uint64_t)&v165, v136, v137, v138, v139, v140, v141);
  *(_WORD *)(a1 + 92) = v21;
  if (*(_DWORD *)(a1 + 160) >= 2u)
  {
    v144 = 1;
    do
    {
      v145 = v144;
      v146 = *(_QWORD *)(a1 + 152) + ((unint64_t)v144 << 7);
      if (*(_DWORD *)(v146 + 96))
      {
        v147 = *(unsigned int *)(v146 + 100);
        if (v147 >= *(_DWORD *)(a1 + 96))
        {
          if (*(_DWORD *)(a1 + 24))
            v148 = *(void **)(a1 + 16);
          else
            v148 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3463, (uint64_t)"dfutil/realdf", 27, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v148);
        }
        if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 2 * v147) != (_DWORD)v145)
        {
          if (*(_DWORD *)(a1 + 24))
            v149 = *(void **)(a1 + 16);
          else
            v149 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3472, (uint64_t)"dfutil/realdf", 31, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v149);
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 152) + (v145 << 7) + 104) > *(_DWORD *)(a1 + 96))
        {
          if (*(_DWORD *)(a1 + 24))
            v150 = *(void **)(a1 + 16);
          else
            v150 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3479, (uint64_t)"dfutil/realdf", 28, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v150);
        }
        if ((_DWORD)v147 == -1)
        {
          LODWORD(v147) = -1;
          i = 1;
        }
        else
        {
          v151 = *(_DWORD *)(a1 + 144);
          for (i = 1; ; ++i)
          {
            v153 = v147 + 1;
            if (v151 > (int)v147 + 1)
            {
              v154 = v147;
              while (*(unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 2 + 2 * v154) != (_DWORD)v145)
              {
                if (v151 - 1 == (_DWORD)++v154)
                  goto LABEL_238;
              }
              v153 = v154 + 1;
            }
            if (v153 >= v151)
              break;
            LODWORD(v147) = v153;
          }
        }
LABEL_238:
        v155 = *(_QWORD *)(a1 + 152);
        if (i != *(_DWORD *)(v155 + (v145 << 7) + 96))
        {
          if (*(_DWORD *)(a1 + 24))
            v156 = *(void **)(a1 + 16);
          else
            v156 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3497, (uint64_t)"dfutil/realdf", 29, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v156);
          v155 = *(_QWORD *)(a1 + 152);
        }
        if ((_DWORD)v147 != *(_DWORD *)(v155 + (v145 << 7) + 104))
        {
          if (*(_DWORD *)(a1 + 24))
            v157 = *(void **)(a1 + 16);
          else
            v157 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3503, (uint64_t)"dfutil/realdf", 30, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v157);
        }
      }
      v144 = v145 + 1;
    }
    while (*(_DWORD *)(a1 + 160) > (unsigned __int16)(v145 + 1));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
}

void sub_2099EB424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::subFileExistsByExplicitExtension(RealDFile *this, char *a2)
{
  const char *v4;
  uint64_t SubFile;
  const char *v7;
  int v8;

  DgnString::DgnString((DgnString *)&v7);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v7);
  if (v8)
    v4 = v7;
  else
    v4 = (const char *)&unk_209A7E1FC;
  SubFile = RealDFile::findSubFile(this, v4, 0);
  DgnString::~DgnString((DgnString *)&v7);
  return SubFile;
}

void sub_2099EB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::findSubFile(RealDFile *this, const char *a2, char *a3)
{
  unsigned __int16 v6;

  if (*((_DWORD *)this + 40) < 2u)
    return 0;
  v6 = 1;
  while (DgnString::compareNoCase((DgnString *)(*((_QWORD *)this + 19) + ((unint64_t)v6 << 7)), a2, a3))
  {
    if (*((_DWORD *)this + 40) <= ++v6)
      return 0;
  }
  if (a3)
    *(_WORD *)a3 = v6;
  return 1;
}

uint64_t *RealDFile::openSubFileByExplicitExtension(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  void *v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned __int16 v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  char v57;
  int v58;
  const char *v59;
  uint64_t *v60;
  uint64_t *v61;
  char *v62;
  _BYTE v64[22];
  unsigned __int16 v65;
  char *v66;
  unsigned int v67;

  DgnString::DgnString((DgnString *)&v66);
  DFile::makeSubFileName(a1 + 56, a2, (DgnString *)&v66);
  if (v67 <= 1)
  {
    if (*(_DWORD *)(a1 + 24))
      v12 = *(void **)(a1 + 16);
    else
      v12 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2262, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", v10, v11, (char)v12);
  }
  if ((a3 > 6 || ((1 << a3) & 0x59) == 0) && *(_BYTE *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 24))
      v29 = *(void **)(a1 + 16);
    else
      v29 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2269, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v10, v11, (char)v29);
  }
  v13 = v67;
  if ((a3 & 0xFFFFFFFB) == 1)
  {
    if (v67)
      v14 = v66;
    else
      v14 = (const char *)&unk_209A7E1FC;
    RealDFile::deleteSubFile((RealDFile *)a1, v14, v6, v7, v8, v9, v10, v11);
    v13 = v67;
  }
  v65 = 0;
  if (v13)
    v15 = v66;
  else
    v15 = (const char *)&unk_209A7E1FC;
  if ((RealDFile::findSubFile((RealDFile *)a1, v15, (char *)&v65) & 1) != 0)
  {
    v23 = v65;
    v24 = *(_QWORD *)(a1 + 152);
    v25 = v24 + ((unint64_t)v65 << 7);
    v26 = *(_DWORD *)(v25 + 100);
    v27 = *(unsigned __int8 *)(v25 + 124);
    if (v27 >= 2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2358, (uint64_t)"dfutil/realdf", 44, (uint64_t)"%u %.500s %.500s", v21, v22, v27);
      v23 = v65;
      v24 = *(_QWORD *)(a1 + 152);
    }
    v30 = *(unsigned __int8 *)(v24 + (v23 << 7) + 125);
    if (v30 >= 2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2366, (uint64_t)"dfutil/realdf", 45, (uint64_t)"%u %.500s %.500s", v21, v22, v30);
      v23 = v65;
      v24 = *(_QWORD *)(a1 + 152);
    }
    v31 = v24 + (v23 << 7);
    v32 = *(unsigned __int8 *)(v31 + 124);
    v33 = *(_BYTE *)(v31 + 124) != 0;
    v34 = *(unsigned __int8 *)(v31 + 125);
    if (v32)
    {
      if (v34 != 1)
      {
        v35 = 2374;
LABEL_40:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", v35, (uint64_t)"dfutil/realdf", 45, (uint64_t)"%u %.500s %.500s", v21, v22, v34);
      }
    }
    else if (v34)
    {
      v35 = 2384;
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + ((unint64_t)v65 << 7) + 112);
    goto LABEL_64;
  }
  if (a3 <= 6 && ((1 << a3) & 0x59) != 0)
  {
    if (v67)
      LOBYTE(v28) = (_BYTE)v66;
    else
      v28 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2289, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v21, v22, (char)v28);
  }
  if (*(unsigned __int16 *)(a1 + 88) < 8u)
  {
    if (v67 < 0x21)
      goto LABEL_42;
    goto LABEL_32;
  }
  if (v67 > 0x60)
LABEL_32:
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2296, (uint64_t)"dfutil/realdf", 10, (uint64_t)"%.500s %.500s", v21, v22, (char)v66);
LABEL_42:
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 24))
      v37 = *(void **)(a1 + 16);
    else
      v37 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2300, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v21, v22, (char)v37);
  }
  v38 = *(_DWORD *)(a1 + 160);
  v39 = 1;
  v65 = 1;
  if (v38 >= 2)
  {
    v40 = *(_QWORD *)(a1 + 152);
    if (*(_BYTE *)(v40 + 128))
    {
      v39 = 1;
      do
      {
        v65 = ++v39;
        v41 = v39;
      }
      while (v38 > v39 && *(_BYTE *)(v40 + ((unint64_t)v39 << 7)));
      goto LABEL_55;
    }
    v39 = 1;
  }
  v41 = 1;
LABEL_55:
  if (v38 == v41)
  {
    RealDFile::addDirEntrySpace((RealDFile *)a1, v16, v17, v18, v19, v20, v21, v22);
    v39 = v65;
  }
  if (v67)
    v42 = v66;
  else
    v42 = (const char *)&unk_209A7E1FC;
  strcpy((char *)(*(_QWORD *)(a1 + 152) + ((unint64_t)v39 << 7)), v42);
  v43 = v65;
  v44 = *(_QWORD *)(a1 + 152);
  v51 = strlen((const char *)(v44 + ((unint64_t)v65 << 7)));
  if (v51 <= 0x5F)
  {
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 152) + ((unint64_t)v65 << 7) + v51++) = 0;
    while (v51 != 96);
    v43 = v65;
    v44 = *(_QWORD *)(a1 + 152);
  }
  v52 = v44 + (v43 << 7);
  *(_DWORD *)(v52 + 104) = -1;
  *(_QWORD *)(v52 + 96) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v52 + 116) = 0;
  *(_QWORD *)(v52 + 108) = 0;
  *(_DWORD *)(v52 + 124) = -554041344;
  *(_BYTE *)(a1 + 296) = 1;
  v26 = RealDFile::addBlock((RealDFile *)a1, v65, v45, v46, v47, v48, v49, v50);
  v33 = 0;
  v36 = 0;
LABEL_64:
  v53 = v65;
  v54 = *(_QWORD *)(a1 + 200);
  if (a3 != 3)
  {
    v56 = 0;
    v57 = 1;
    *(_BYTE *)(v54 + v65) = 1;
    switch(a3)
    {
      case 0u:
      case 2u:
        if (v33)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2401, (uint64_t)"dfutil/realdf", 43, (uint64_t)"%u %.500s %.500s", v21, v22, a3);
        v56 = 0;
        goto LABEL_76;
      case 4u:
        goto LABEL_75;
      case 5u:
        goto LABEL_80;
      default:
        goto LABEL_76;
    }
  }
  if (*(_BYTE *)(v54 + v65))
  {
    if (v67)
      LOBYTE(v55) = (_BYTE)v66;
    else
      v55 = &unk_209A7E1FC;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2391, (uint64_t)"dfutil/realdf", 48, (uint64_t)"%.500s %.500s", v21, v22, (char)v55);
    v53 = v65;
    v54 = *(_QWORD *)(a1 + 200);
  }
  *(_BYTE *)(v54 + v53) = 1;
LABEL_75:
  v56 = v33;
LABEL_76:
  if (a3 == 1)
  {
    v57 = v56;
LABEL_80:
    v58 = 1;
    v56 = v57;
  }
  else if (a3 == 2)
  {
    v58 = 2;
  }
  else
  {
    v58 = 0;
  }
  if (v67)
    v59 = v66;
  else
    v59 = (const char *)&unk_209A7E1FC;
  FileSpec::FileSpec((FileSpec *)v64, v59);
  v60 = MemChunkAlloc(0x80uLL, 0);
  v61 = v60;
  if (v67)
    v62 = v66;
  else
    v62 = (char *)&unk_209A7E1FC;
  RealDFileSubFileStream::RealDFileSubFileStream((uint64_t)v60, v58, (uint64_t)v64, a1, v62, a3, v65, 0, v26, v56, v36);
  FileSpec::~FileSpec((FileSpec *)v64);
  DgnString::~DgnString((DgnString *)&v66);
  return v61;
}

void sub_2099EBC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::deleteSubFile(RealDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  uint64_t result;
  unsigned __int16 v13;

  if (!*a2)
  {
    if (*((_DWORD *)this + 6))
      v10 = (void *)*((_QWORD *)this + 2);
    else
      v10 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4424, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  if (*((_BYTE *)this + 48))
  {
    if (*((_DWORD *)this + 6))
      v11 = (void *)*((_QWORD *)this + 2);
    else
      v11 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4425, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", a7, a8, (char)v11);
  }
  v13 = 0;
  result = RealDFile::findSubFile(this, a2, (char *)&v13);
  if ((_DWORD)result)
  {
    do
      result = RealDFile::freeBlock(this, v13);
    while ((_DWORD)result != -1);
    *(_BYTE *)(*((_QWORD *)this + 19) + ((unint64_t)v13 << 7)) = 0;
    *((_BYTE *)this + 296) = 1;
  }
  return result;
}

void RealDFile::addDirEntrySpace(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;

  v9 = *((unsigned int *)this + 36);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (*(_WORD *)(*((_QWORD *)this + 17) + 2 * v10))
    {
      if (v9 == ++v10)
        goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 == (_DWORD)v9)
LABEL_8:
    RealDFile::addBlockSpace(this, a2, a3, a4, a5, a6, a7, a8);
  v11 = (_QWORD *)((char *)this + 104);
  v12 = *((unsigned int *)this + 28);
  if ((_DWORD)v12)
  {
    v13 = 0;
    while (*(_DWORD *)(*v11 + 4 * v13) != -1)
    {
      if (v12 == ++v13)
      {
        LODWORD(v13) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v13 <= 0xFF && (_DWORD)v13 == (_DWORD)v12)
  {
    if ((_DWORD)v12 == *((_DWORD *)this + 29))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v11, 1, 1);
      LODWORD(v12) = *((_DWORD *)this + 28);
    }
    *(_DWORD *)(*((_QWORD *)this + 13) + 4 * v12) = -1;
    LODWORD(v12) = *((_DWORD *)this + 28) + 1;
    *((_DWORD *)this + 28) = v12;
  }
  if ((_DWORD)v13 == (_DWORD)v12)
  {
    if (*((_DWORD *)this + 6))
      v14 = (void *)*((_QWORD *)this + 2);
    else
      v14 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4334, (uint64_t)"dfutil/realdf", 4, (uint64_t)"%.500s", a7, a8, (char)v14);
  }
  v15 = (_QWORD *)((char *)this + 152);
  v16 = *((_DWORD *)this + 40);
  v17 = *((_DWORD *)this + 41);
  if (*((unsigned __int16 *)this + 44) < 8u)
  {
    v24 = v16 + 64;
    if (v24 > v17)
    {
      DgnArray<RealDFileDirEntry>::reallocElts((uint64_t)this + 152, v24 - v17, 0);
      v16 = *((_DWORD *)this + 40);
    }
    if (v16 < v24)
    {
      v25 = v24 - v16;
      v26 = (unint64_t)v16 << 7;
      do
      {
        v27 = *v15 + v26;
        *(_OWORD *)(v27 + 110) = 0uLL;
        *(_OWORD *)(v27 + 80) = 0uLL;
        *(_OWORD *)(v27 + 96) = 0uLL;
        *(_OWORD *)(v27 + 48) = 0uLL;
        *(_OWORD *)(v27 + 64) = 0uLL;
        *(_OWORD *)(v27 + 16) = 0uLL;
        *(_OWORD *)(v27 + 32) = 0uLL;
        *(_OWORD *)v27 = 0uLL;
        *(_WORD *)(v27 + 126) = -8454;
        v26 += 128;
        --v25;
      }
      while (v25);
    }
    *((_DWORD *)this + 40) = v24;
    v28 = *((_DWORD *)this + 52);
    v29 = 64;
    do
    {
      if (v28 == *((_DWORD *)this + 53))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 200, 1, 1);
        v28 = *((_DWORD *)this + 52);
      }
      *(_BYTE *)(*((_QWORD *)this + 25) + v28++) = 0;
      *((_DWORD *)this + 52) = v28;
      --v29;
    }
    while (v29);
  }
  else
  {
    v18 = v16 + 32;
    if (v18 > v17)
    {
      DgnArray<RealDFileDirEntry>::reallocElts((uint64_t)this + 152, v18 - v17, 0);
      v16 = *((_DWORD *)this + 40);
    }
    if (v16 < v18)
    {
      v19 = (unint64_t)v16 << 7;
      v20 = v18 - v16;
      do
      {
        v21 = *v15 + v19;
        *(_OWORD *)(v21 + 110) = 0uLL;
        *(_OWORD *)(v21 + 80) = 0uLL;
        *(_OWORD *)(v21 + 96) = 0uLL;
        *(_OWORD *)(v21 + 48) = 0uLL;
        *(_OWORD *)(v21 + 64) = 0uLL;
        *(_OWORD *)(v21 + 16) = 0uLL;
        *(_OWORD *)(v21 + 32) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *(_WORD *)(v21 + 126) = -8454;
        v19 += 128;
        --v20;
      }
      while (v20);
    }
    *((_DWORD *)this + 40) = v18;
    v22 = *((_DWORD *)this + 52);
    v23 = 32;
    do
    {
      if (v22 == *((_DWORD *)this + 53))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 200, 1, 1);
        v22 = *((_DWORD *)this + 52);
      }
      *(_BYTE *)(*((_QWORD *)this + 25) + v22++) = 0;
      *((_DWORD *)this + 52) = v22;
      --v23;
    }
    while (v23);
  }
  v30 = *((_DWORD *)this + 44);
  if (v30 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 168, 1, 1);
    v30 = *((_DWORD *)this + 44);
  }
  *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v30) = v13;
  ++*((_DWORD *)this + 44);
  *(_DWORD *)(*((_QWORD *)this + 13) + 4 * v13) = -2;
}

void RealDFile::removeSubFileByExplicitExtension(RealDFile *this, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;

  DgnString::DgnString((DgnString *)&v11);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v11);
  if (v12)
    v10 = v11;
  else
    v10 = (const char *)&unk_209A7E1FC;
  RealDFile::deleteSubFile(this, v10, v4, v5, v6, v7, v8, v9);
  DgnString::~DgnString((DgnString *)&v11);
}

void sub_2099EC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void RealDFile::renameSubFileByExplicitExtension(RealDFile *this, char *a2, char *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  _BYTE *v27;
  unint64_t v28;
  unsigned __int16 v29;
  void *v30;
  int v31;
  const char *v32;
  int v33;

  if (!*a2)
  {
    if (*((_DWORD *)this + 6))
      v12 = (void *)*((_QWORD *)this + 2);
    else
      v12 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2487, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v12);
  }
  if (*((_BYTE *)this + 48))
  {
    if (*((_DWORD *)this + 6))
      v13 = (void *)*((_QWORD *)this + 2);
    else
      v13 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2489, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", a7, a8, (char)v13);
  }
  if (!*a3)
  {
    if (*((_DWORD *)this + 6))
      v14 = (void *)*((_QWORD *)this + 2);
    else
      v14 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2491, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v14);
  }
  DgnString::DgnString((DgnString *)&v32);
  DgnString::DgnString((DgnString *)&v30);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v32);
  DFile::makeSubFileName((uint64_t)this + 56, a3, (DgnString *)&v30);
  v29 = 0;
  if (v33)
    v15 = v32;
  else
    v15 = (const char *)&unk_209A7E1FC;
  if ((RealDFile::findSubFile(this, v15, (char *)&v29) & 1) == 0)
  {
    if (v33)
      LOBYTE(v18) = (_BYTE)v32;
    else
      v18 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2504, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v16, v17, (char)v18);
  }
  if (v31)
    v19 = v30;
  else
    v19 = &unk_209A7E1FC;
  if ((*(unsigned int (**)(RealDFile *, void *))(*(_QWORD *)this + 24))(this, v19))
  {
    if ((a4 & 1) == 0)
    {
      if (v31)
        LOBYTE(v22) = (_BYTE)v30;
      else
        v22 = &unk_209A7E1FC;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2509, (uint64_t)"dfutil/realdf", 56, (uint64_t)"%.500s", v20, v21, (char)v22);
    }
    if (v31)
      v23 = v30;
    else
      v23 = &unk_209A7E1FC;
    (*(void (**)(RealDFile *, void *))(*(_QWORD *)this + 40))(this, v23);
  }
  v24 = v29;
  v25 = (char *)(*((_QWORD *)this + 19) + ((unint64_t)v29 << 7));
  if (v31)
    v26 = (const char *)v30;
  else
    v26 = (const char *)&unk_209A7E1FC;
  if (*((unsigned __int16 *)this + 44) < 8u)
  {
    strncpy(v25, v26, 0x1FuLL);
    v27 = (_BYTE *)(*((_QWORD *)this + 19) + (v24 << 7) + 31);
  }
  else
  {
    strncpy(v25, v26, 0x5FuLL);
    v27 = (_BYTE *)(*((_QWORD *)this + 19) + (v24 << 7) + 95);
  }
  *v27 = 0;
  v28 = strlen((const char *)(*((_QWORD *)this + 19) + ((unint64_t)v29 << 7)));
  if (v28 <= 0x5F)
  {
    do
      *(_BYTE *)(*((_QWORD *)this + 19) + ((unint64_t)v29 << 7) + v28++) = 0;
    while (v28 != 96);
  }
  *((_BYTE *)this + 296) = 1;
  DgnString::~DgnString((DgnString *)&v30);
  DgnString::~DgnString((DgnString *)&v32);
}

void sub_2099EC3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t RealDFile::getSubFileSizeByExplicitExtension(RealDFile *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 v18;
  const char *v19;
  int v20;

  if (!*a2)
  {
    if (*((_DWORD *)this + 6))
      v10 = (void *)*((_QWORD *)this + 2);
    else
      v10 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2545, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  DgnString::DgnString((DgnString *)&v19);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v19);
  v18 = 0;
  if (v20)
    v11 = v19;
  else
    v11 = (const char *)&unk_209A7E1FC;
  if ((RealDFile::findSubFile(this, v11, (char *)&v18) & 1) == 0)
  {
    if (v20)
      LOBYTE(v14) = (_BYTE)v19;
    else
      v14 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2553, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v12, v13, (char)v14);
  }
  v15 = *((_QWORD *)this + 19) + ((unint64_t)v18 << 7);
  v16 = *(unsigned int *)(v15 + 108) + ((unint64_t)(*(_DWORD *)(v15 + 96) - 1) << 12);
  DgnString::~DgnString((DgnString *)&v19);
  return v16;
}

void sub_2099EC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

OsFile *RealDFile::deleteFileAndCleanUp(RealDFile *this, std::error_code *a2)
{
  OsFile *result;

  result = (OsFile *)*((_QWORD *)this + 10);
  if (result)
  {
    OsFile::deleteFileAndCleanUp(result, a2);
    result = DgnDelete<OsFile>(*((OsFile **)this + 10));
    *((_QWORD *)this + 10) = 0;
  }
  *((_WORD *)this + 148) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 82) = 0;
  return result;
}

_QWORD *RealDFile::clearBigReadCache(RealDFile *this, char a2)
{
  _QWORD *result;

  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)this + 336);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)this + 352);
  *((_QWORD *)this + 46) = 0;
  result = (_QWORD *)*((_QWORD *)this + 49);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 49) = 0;
  }
  *((_QWORD *)this + 50) = 0;
  *((_BYTE *)this + 385) = a2;
  return result;
}

_QWORD *DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnPrimFixArray<char>>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void RealDFile::verifyHaveOpenedAllSubFiles(RealDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int16 v10;
  uint64_t v11;
  _BYTE *v12;

  v8 = *((_DWORD *)this + 40);
  if (v8 >= 2)
  {
    v10 = 1;
    do
    {
      v11 = v10;
      v12 = (_BYTE *)(*((_QWORD *)this + 19) + ((unint64_t)v10 << 7));
      if (*v12)
      {
        if (!*(_BYTE *)(*((_QWORD *)this + 25) + v11))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2617, (uint64_t)"dfutil/realdf", 46, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)v12);
          v8 = *((_DWORD *)this + 40);
        }
      }
      v10 = v11 + 1;
    }
    while (v8 > (unsigned __int16)(v11 + 1));
  }
}

void RealDFile::verifyHaveOpenedAllSubFiles(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int16 v11;
  uint64_t v12;
  _BYTE *v13;

  v8 = *(_DWORD *)(a1 + 160);
  if (v8 >= 2)
  {
    v11 = 1;
    do
    {
      v12 = v11;
      if (*(_BYTE *)(*a3 + v11))
      {
        v13 = (_BYTE *)(*(_QWORD *)(a1 + 152) + ((unint64_t)v11 << 7));
        if (*v13)
        {
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 200) + v12))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2636, (uint64_t)"dfutil/realdf", 46, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)v13);
            v8 = *(_DWORD *)(a1 + 160);
          }
        }
      }
      v11 = v12 + 1;
    }
    while (v8 > (unsigned __int16)(v12 + 1));
  }
}

uint64_t RealDFile::addBlockSpace(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;

  v9 = (_QWORD *)((char *)this + 120);
  v10 = *((unsigned int *)this + 32);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (*(_DWORD *)(*v9 + 4 * v11) != -1)
    {
      if (v10 == ++v11)
      {
        LODWORD(v11) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v12 = (_QWORD *)((char *)this + 136);
  v14 = *((unsigned int *)this + 36);
  v13 = *((_DWORD *)this + 37);
  v15 = v14 + 2046;
  if ((int)v14 + 2046 > v13)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, (_DWORD)v14 + 2046 - v13, 0);
  *((_DWORD *)this + 36) = v15;
  if (v14 <= 0xFFFFF801)
  {
    if (v15 <= (int)v14 + 1)
      v16 = v14 + 1;
    else
      v16 = v14 + 2046;
    bzero((void *)(*v12 + 2 * v14), 2 * (v16 + ~(_DWORD)v14) + 2);
  }
  if ((_DWORD)v11 == *((_DWORD *)this + 32))
  {
    v17 = v11;
    if (v11 >= 0x20FE)
    {
      if (*((_DWORD *)this + 6))
        v18 = (void *)*((_QWORD *)this + 2);
      else
        v18 = &unk_209A7E1FC;
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4385, (uint64_t)"dfutil/realdf", 5, (uint64_t)"%.500s", a7, a8, (char)v18);
      v17 = *((_DWORD *)this + 32);
    }
    if (v17 == *((_DWORD *)this + 33))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v9, 1, 1);
      v17 = *((_DWORD *)this + 32);
    }
    *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v17) = -1;
    ++*((_DWORD *)this + 32);
  }
  v19 = *((_DWORD *)this + 48);
  if (v19 == *((_DWORD *)this + 49))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 184, 1, 1);
    v19 = *((_DWORD *)this + 48);
  }
  *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v19) = v11;
  ++*((_DWORD *)this + 48);
  *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v11) = -2;
  return v14;
}

void RealDFile::readDirEntries(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  RealDFile *v15;
  unint64_t v16;
  unint64_t v17;
  RealDFile *v18;
  unint64_t v19;
  RealDFile *v20;
  unint64_t v21;
  RealDFile *v22;
  unint64_t v23;
  RealDFile *v24;
  unint64_t v25;
  RealDFile *v26;
  unint64_t v27;
  RealDFile *v28;
  unint64_t v29;
  RealDFile *v30;
  unint64_t v31;
  RealDFile *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  char v46[8];
  char v47[16];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[30];
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a1 + 88);
  v5 = v4 > 7;
  if (v4 <= 7)
    v6 = 64;
  else
    v6 = 32;
  v44 = v6;
  v7 = a1 + 152;
  v8 = *(_DWORD *)(a1 + 112);
  if (v5)
    v9 = 5;
  else
    v9 = 6;
  v10 = (v8 << v9) | 1;
  v11 = *(_DWORD *)(a1 + 164);
  if (v10 > v11)
  {
    DgnArray<RealDFileDirEntry>::reallocElts(a1 + 152, v10 - v11, 0);
    v8 = *(_DWORD *)(a1 + 112);
  }
  if (v8)
  {
    v12 = 0;
    v13 = 0uLL;
    do
    {
      v45 = v12;
      *(_QWORD *)(a2 + 8) = (*(unsigned int *)(a1 + 216)
                           + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * v12)) << 12;
      v14 = v44;
      do
      {
        *(_OWORD *)&v53[14] = v13;
        v52 = v13;
        *(_OWORD *)v53 = v13;
        v50 = v13;
        v51 = v13;
        v48 = v13;
        v49 = v13;
        *(_OWORD *)v47 = v13;
        v54 = -8454;
        v15 = *(RealDFile **)a2;
        v16 = *(_QWORD *)(a2 + 8);
        if (*(unsigned __int16 *)(a1 + 88) < 8u)
        {
          RealDFile::doReadFromCache(v15, v16, v47, 32, 1);
          v17 = *(_QWORD *)(a2 + 8) + 32;
          *(_QWORD *)(a2 + 8) = v17;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          v52 = 0u;
        }
        else
        {
          RealDFile::doReadFromCache(v15, v16, v47, 96, 1);
          v17 = *(_QWORD *)(a2 + 8) + 96;
          *(_QWORD *)(a2 + 8) = v17;
        }
        *(_DWORD *)v46 = 0;
        RealDFile::doReadFromCache(*(RealDFile **)a2, v17, v46, 4, 1);
        v18 = *(RealDFile **)a2;
        v19 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v19;
        *(_DWORD *)v53 = *(_DWORD *)v46;
        *(_DWORD *)v46 = 0;
        RealDFile::doReadFromCache(v18, v19, v46, 4, 1);
        v20 = *(RealDFile **)a2;
        v21 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v21;
        *(_DWORD *)&v53[4] = *(_DWORD *)v46;
        *(_DWORD *)v46 = 0;
        RealDFile::doReadFromCache(v20, v21, v46, 4, 1);
        v22 = *(RealDFile **)a2;
        v23 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v23;
        *(_DWORD *)&v53[8] = *(_DWORD *)v46;
        *(_DWORD *)v46 = 0;
        RealDFile::doReadFromCache(v22, v23, v46, 4, 1);
        v24 = *(RealDFile **)a2;
        v25 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v25;
        *(_DWORD *)&v53[12] = *(_DWORD *)v46;
        *(_QWORD *)v46 = 0;
        RealDFile::doReadFromCache(v24, v25, v46, 8, 1);
        v26 = *(RealDFile **)a2;
        v27 = *(_QWORD *)(a2 + 8) + 8;
        *(_QWORD *)(a2 + 8) = v27;
        *(_QWORD *)&v53[16] = *(_QWORD *)v46;
        *(_DWORD *)v46 = 0;
        RealDFile::doReadFromCache(v26, v27, v46, 4, 1);
        v28 = *(RealDFile **)a2;
        v29 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v29;
        *(_DWORD *)&v53[24] = *(_DWORD *)v46;
        v46[0] = 0;
        RealDFile::doReadFromCache(v28, v29, v46, 1, 1);
        v30 = *(RealDFile **)a2;
        v31 = *(_QWORD *)(a2 + 8) + 1;
        *(_QWORD *)(a2 + 8) = v31;
        v53[28] = v46[0];
        v46[0] = 0;
        RealDFile::doReadFromCache(v30, v31, v46, 1, 1);
        v32 = *(RealDFile **)a2;
        v33 = *(_QWORD *)(a2 + 8) + 1;
        *(_QWORD *)(a2 + 8) = v33;
        v53[29] = v46[0];
        *(_WORD *)v46 = 0;
        RealDFile::doReadFromCache(v32, v33, v46, 2, 1);
        *(_QWORD *)(a2 + 8) += 2;
        v54 = *(_WORD *)v46;
        if (*(unsigned __int16 *)v46 != 57082)
        {
          if (*(_DWORD *)(a1 + 24))
            v36 = *(void **)(a1 + 16);
          else
            v36 = &unk_209A7E1FC;
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3565, (uint64_t)"dfutil/realdf", 57, (uint64_t)"%.500s 0x%x 0x%x", v34, v35, (char)v36);
        }
        v37 = *(unsigned int *)(a1 + 160);
        if (v37 == *(_DWORD *)(a1 + 164))
        {
          DgnArray<RealDFileDirEntry>::reallocElts(v7, 1, 1);
          v37 = *(unsigned int *)(a1 + 160);
        }
        v38 = *(_QWORD *)(a1 + 152) + (v37 << 7);
        v39 = v49;
        v40 = v50;
        v41 = v51;
        *(_OWORD *)(v38 + 80) = v52;
        v42 = v48;
        *(_OWORD *)v38 = *(_OWORD *)v47;
        *(_OWORD *)(v38 + 16) = v42;
        *(_OWORD *)(v38 + 48) = v40;
        *(_OWORD *)(v38 + 64) = v41;
        *(_OWORD *)(v38 + 32) = v39;
        *(_BYTE *)(v38 + 95) = 0;
        *(_OWORD *)(v38 + 96) = *(_OWORD *)v53;
        *(_QWORD *)(v38 + 112) = *(_QWORD *)&v53[16];
        *(_DWORD *)(v38 + 120) = *(_DWORD *)&v53[24];
        *(_BYTE *)(v38 + 124) = v53[28];
        *(_BYTE *)(v38 + 125) = v53[29];
        *(_WORD *)(v38 + 126) = v54;
        ++*(_DWORD *)(a1 + 160);
        v43 = *(_DWORD *)(a1 + 208);
        if (v43 == *(_DWORD *)(a1 + 212))
        {
          DgnPrimArray<char>::reallocElts(a1 + 200, 1, 1);
          v43 = *(_DWORD *)(a1 + 208);
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 200) + v43) = 0;
        *(_DWORD *)(a1 + 208) = v43 + 1;
        --v14;
        v13 = 0uLL;
      }
      while (v14);
      v12 = v45 + 1;
    }
    while (v45 + 1 < (unint64_t)*(unsigned int *)(a1 + 112));
  }
}

void RealDFile::readBlockUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  RealDFile *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  char v20[4];

  v10 = *(_DWORD *)(a1 + 128);
  v11 = 2046 * v10;
  v12 = *(_DWORD *)(a1 + 148);
  if (2046 * v10 > v12)
  {
    DgnPrimArray<short>::reallocElts(a1 + 136, v11 - v12, 0);
    v10 = *(_DWORD *)(a1 + 128);
  }
  *(_DWORD *)(a1 + 144) = v11;
  if (v10)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 120) + 4 * v14)) << 12;
      *(_QWORD *)(a2 + 8) = v15;
      RealDFile::doReadFromCache(*(RealDFile **)a2, v15, (char *)(*(_QWORD *)(a1 + 136) + 2 * (v13 & 0xFFFFFFFE)), 4092, 1);
      v16 = *(RealDFile **)a2;
      v17 = *(_QWORD *)(a2 + 8) + 4092;
      *(_QWORD *)(a2 + 8) = v17;
      *(_DWORD *)v20 = 0;
      RealDFile::doReadFromCache(v16, v17, v20, 4, 1);
      *(_QWORD *)(a2 + 8) += 4;
      if (*(_DWORD *)v20 != -307429586)
      {
        if (*(_DWORD *)(a1 + 24))
          v18 = *(void **)(a1 + 16);
        else
          v18 = &unk_209A7E1FC;
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3611, (uint64_t)"dfutil/realdf", 58, (uint64_t)"%.500s 0x%x 0x%x", a7, a8, (char)v18);
      }
      ++v14;
      v13 += 2046;
    }
    while (v14 < *(unsigned int *)(a1 + 128));
    v11 = *(_DWORD *)(a1 + 144);
  }
  if (*(_DWORD *)(a1 + 96) > v11)
  {
    if (*(_DWORD *)(a1 + 24))
      v19 = *(void **)(a1 + 16);
    else
      v19 = &unk_209A7E1FC;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3616, (uint64_t)"dfutil/realdf", 47, (uint64_t)"%.500s %u %u", a7, a8, (char)v19);
  }
}

void RealDFile::writeDirEntries(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  RealDFile *v16;
  unint64_t v17;
  RealDFile *v18;
  unint64_t v19;
  RealDFile *v20;
  unint64_t v21;
  RealDFile *v22;
  unint64_t v23;
  RealDFile *v24;
  unint64_t v25;
  RealDFile *v26;
  unint64_t v27;
  RealDFile *v28;
  unint64_t v29;
  RealDFile *v30;
  unint64_t v31;
  RealDFile *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41[8];

  v2 = *(unsigned __int16 *)(a1 + 88);
  if (v2 > 7)
    v3 = 5;
  else
    v3 = 6;
  v39 = v3;
  v38 = (*(_DWORD *)(a1 + 160) - 1) >> v3;
  if ((_DWORD)v38)
  {
    v6 = 0;
    if (v2 <= 7)
      v7 = 64;
    else
      v7 = 32;
    do
    {
      v8 = 0;
      v9 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * v6)) << 12;
      *(_QWORD *)(a2 + 8) = v9;
      v40 = v6;
      v10 = ((_DWORD)v6 << v39) + 1;
      do
      {
        v11 = *(_QWORD *)(a1 + 152);
        v12 = v11 + ((unint64_t)(v10 + v8) << 7);
        v13 = *(unsigned __int16 *)(a1 + 88);
        if (v13 <= 7)
          v14 = 32;
        else
          v14 = 96;
        if (v13 <= 7)
          v15 = 32;
        else
          v15 = 96;
        RealDFile::doWriteToCache(*(RealDFile **)a2, *(_QWORD *)(a2 + 8), (const char *)(v11 + ((unint64_t)(v10 + v8) << 7)), v14);
        v16 = *(RealDFile **)a2;
        v17 = *(_QWORD *)(a2 + 8) + v15;
        *(_QWORD *)(a2 + 8) = v17;
        *(_DWORD *)v41 = *(_DWORD *)(v12 + 96);
        RealDFile::doWriteToCache(v16, v17, v41, 4u);
        v18 = *(RealDFile **)a2;
        v19 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v19;
        *(_DWORD *)v41 = *(_DWORD *)(v12 + 100);
        RealDFile::doWriteToCache(v18, v19, v41, 4u);
        v20 = *(RealDFile **)a2;
        v21 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v21;
        *(_DWORD *)v41 = *(_DWORD *)(v12 + 104);
        RealDFile::doWriteToCache(v20, v21, v41, 4u);
        v22 = *(RealDFile **)a2;
        v23 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v23;
        *(_DWORD *)v41 = *(_DWORD *)(v12 + 108);
        RealDFile::doWriteToCache(v22, v23, v41, 4u);
        v24 = *(RealDFile **)a2;
        v25 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v25;
        *(_QWORD *)v41 = *(_QWORD *)(v12 + 112);
        RealDFile::doWriteToCache(v24, v25, v41, 8u);
        v26 = *(RealDFile **)a2;
        v27 = *(_QWORD *)(a2 + 8) + 8;
        *(_QWORD *)(a2 + 8) = v27;
        *(_DWORD *)v41 = *(_DWORD *)(v12 + 120);
        RealDFile::doWriteToCache(v26, v27, v41, 4u);
        v28 = *(RealDFile **)a2;
        v29 = *(_QWORD *)(a2 + 8) + 4;
        *(_QWORD *)(a2 + 8) = v29;
        v41[0] = *(_BYTE *)(v12 + 124);
        RealDFile::doWriteToCache(v28, v29, v41, 1u);
        v30 = *(RealDFile **)a2;
        v31 = *(_QWORD *)(a2 + 8) + 1;
        *(_QWORD *)(a2 + 8) = v31;
        v41[0] = *(_BYTE *)(v12 + 125);
        RealDFile::doWriteToCache(v30, v31, v41, 1u);
        v32 = *(RealDFile **)a2;
        v33 = *(_QWORD *)(a2 + 8) + 1;
        *(_QWORD *)(a2 + 8) = v33;
        *(_WORD *)v41 = *(_WORD *)(v12 + 126);
        RealDFile::doWriteToCache(v32, v33, v41, 2u);
        v36 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v36;
        ++v8;
        v37 = 6;
        if (*(unsigned __int16 *)(a1 + 88) > 7u)
          v37 = 7;
        if (v36 != (v8 << v37) + v9)
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v34, v35, v36);
      }
      while (v7 != v8);
      v6 = v40 + 1;
    }
    while (v40 + 1 != v38);
  }
}

void RealDFile::writeBlockUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  RealDFile *v9;
  unint64_t v10;
  char v11[4];

  v2 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v2)
  {
    v5 = 0;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v5) != -1)
    {
      if (v2 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 128);
        break;
      }
    }
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v8 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 120) + 4 * v6)) << 12;
        *(_QWORD *)(a2 + 8) = v8;
        RealDFile::doWriteToCache(*(RealDFile **)a2, v8, (const char *)(*(_QWORD *)(a1 + 136) + 2 * (2046 * v6)), 0xFFCu);
        v9 = *(RealDFile **)a2;
        v10 = *(_QWORD *)(a2 + 8) + 4092;
        *(_QWORD *)(a2 + 8) = v10;
        *(_DWORD *)v11 = -307429586;
        RealDFile::doWriteToCache(v9, v10, v11, 4u);
        *(_QWORD *)(a2 + 8) += 4;
        ++v6;
      }
      while (v6 != v7);
    }
  }
}

unint64_t RealDFile::clearPreviousBigReadCache(unint64_t this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v2 = *(_DWORD *)(this + 368);
  if (v2 < a2)
  {
    v4 = this;
    v5 = this + 352;
    while (v2 < *(_DWORD *)(v4 + 344))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 336) + 8 * v2);
      if (v6)
      {
        v7 = *(_DWORD *)(v4 + 360);
        if (v7 == *(_DWORD *)(v4 + 364))
        {
          this = DgnPrimArray<unsigned long long>::reallocElts(v5, 1, 1);
          v7 = *(_DWORD *)(v4 + 360);
          v8 = *(unsigned int *)(v4 + 368);
          v2 = *(_DWORD *)(v4 + 368);
        }
        else
        {
          v8 = v2;
        }
        *(_QWORD *)(*(_QWORD *)(v4 + 352) + 8 * v7) = v6;
        *(_DWORD *)(v4 + 360) = v7 + 1;
        *(_QWORD *)(*(_QWORD *)(v4 + 336) + 8 * v8) = 0;
        v9 = *(_DWORD *)(v4 + 372) - 1;
        *(_DWORD *)(v4 + 372) = v9;
        if (!v9)
        {
          *(_DWORD *)(v4 + 368) = 0;
          return this;
        }
      }
      *(_DWORD *)(v4 + 368) = ++v2;
      if (v2 >= a2)
        return this;
    }
  }
  return this;
}

void RealDFile::fillBigCache(RealDFile *this, unsigned int a2)
{
  int v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;

  v2 = a2;
  v4 = *((_DWORD *)this + 95) * *((_DWORD *)this + 94);
  if (*((_BYTE *)this + 385))
    RealDFile::clearPreviousBigReadCache((unint64_t)this, a2);
  if (*((_BYTE *)this + 384))
    v5 = 0;
  else
    v5 = v4 >> 1;
  v6 = v4 + ~v5;
  v7 = (_QWORD *)((char *)this + 336);
  if (v5)
    v8 = v2 < 1;
  else
    v8 = 1;
  v9 = v2;
  if (!v8)
  {
    v10 = v2;
    v11 = (v4 >> 1) - 1;
    while (v10 > *((int *)this + 86) || !*(_QWORD *)(*v7 + 8 * (v10 - 1)))
    {
      v9 = v10 - 1;
      if (v11-- != 0)
      {
        v8 = v10-- <= 1;
        if (!v8)
          continue;
      }
      goto LABEL_19;
    }
    v9 = v10;
  }
LABEL_19:
  v13 = *((_DWORD *)this + 95);
  if (v9 % v13)
    v14 = v6 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = v6;
    v16 = v9;
LABEL_32:
    v6 = v15;
    if (!v15)
    {
LABEL_33:
      v18 = v2;
      goto LABEL_43;
    }
  }
  else
  {
    while (1)
    {
      v16 = v9 - 1;
      if ((signed int)v9 <= *((_DWORD *)this + 86))
      {
        if (*(_QWORD *)(*v7 + 8 * v16))
          break;
      }
      v15 = v6 - 1;
      if (v16 % v13)
        v17 = v6 == 1;
      else
        v17 = 1;
      --v9;
      --v6;
      if (v17)
        goto LABEL_32;
    }
    v16 = v9;
  }
  v19 = v6 + v2;
  if (v2 <= *((_DWORD *)this + 54) + *((_DWORD *)this + 24) - 1)
    v18 = *((_DWORD *)this + 54) + *((_DWORD *)this + 24) - 1;
  else
    v18 = v2;
  while (v18 != v2)
  {
    if (v2 + 1 < *((_DWORD *)this + 86) && *(_QWORD *)(*v7 + 8 * (v2 + 1)))
      goto LABEL_33;
    ++v2;
    if (!--v6)
    {
      v18 = v19;
      break;
    }
  }
LABEL_43:
  if (*((_DWORD *)this + 101) < v4 << 12)
  {
    v42 = 0;
    *((_DWORD *)this + 101) = realloc_array(*((_QWORD **)this + 49), &v42, v4 << 12, *((unsigned int *)this + 100), *((unsigned int *)this + 100), 1);
    *((_QWORD *)this + 49) = v42;
  }
  *((_DWORD *)this + 100) = v4 << 12;
  OsFile::seekFromBeg(*((OsFile **)this + 10), (uint64_t)(int)v16 << 12);
  v20 = (v18 + 1);
  if (OsFile::readBytes(*((OsFile **)this + 10), *((char **)this + 49), (v20 - v16) << 12, v21, v22, v23, v24, v25) != ((_DWORD)v20 - v16) << 12)
  {
    v31 = *((_QWORD *)this + 10);
    if (*(_DWORD *)(v31 + 8))
      v32 = *(void **)v31;
    else
      v32 = &unk_209A7E1FC;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4176, (uint64_t)"dfutil/realdf", 60, (uint64_t)"%.500s %llu %llu", v29, v30, (char)v32);
  }
  DecryptBuffer(*((unsigned __int8 **)this + 49), ((_DWORD)v20 - v16) << 12, *((unsigned __int16 *)this + 46), v26, v27, v28, v29, v30);
  LODWORD(v33) = *((_DWORD *)this + 86);
  if ((int)v33 <= v18)
  {
    v34 = *((_DWORD *)this + 87);
    if (v20 > v34)
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 336, v20 - v34, 1);
      LODWORD(v33) = *((_DWORD *)this + 86);
    }
    if (v33 <= v20)
    {
      if (v33 < v20)
      {
        v33 = v33;
        do
          *(_QWORD *)(*v7 + 8 * v33++) = 0;
        while (v20 != v33);
      }
    }
    else
    {
      DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt((uint64_t)this + 336, v18 + 1, v33 - v20);
    }
    *((_DWORD *)this + 86) = v20;
  }
  if (!*((_DWORD *)this + 93) || *((_DWORD *)this + 92) > (signed int)v16)
    *((_DWORD *)this + 92) = v16;
  if ((int)v16 <= v18)
  {
    v35 = 0;
    v36 = v18 + 1;
    do
    {
      v37 = *((_DWORD *)this + 90);
      if (v37)
      {
        v38 = v37 - 1;
        v39 = v16;
        *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v16) = *(_QWORD *)(*((_QWORD *)this + 44)
                                                                    + 8 * (v37 - 1));
        *(_QWORD *)(*((_QWORD *)this + 44) + 8 * (v37 - 1)) = 0;
        DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt((uint64_t)this + 352, v37 - 1, 1);
        *((_DWORD *)this + 90) = v38;
      }
      else
      {
        v40 = MemChunkAlloc(0x10uLL, 0);
        *((_DWORD *)v40 + 2) = 0;
        *v40 = 0;
        *v40 = (uint64_t)MemChunkAlloc(0x1000uLL, 0);
        *((_DWORD *)v40 + 2) = 4096;
        v39 = v16;
        *(_QWORD *)(*v7 + 8 * v16) = v40;
      }
      ++*((_DWORD *)this + 93);
      v41 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v39);
      memcpy(*(void **)v41, (const void *)(*((_QWORD *)this + 49) + v35), *(unsigned int *)(v41 + 8));
      v35 += 4096;
      ++v16;
    }
    while (v36 != v16);
  }
}

uint64_t RealDFile::freeBlock(RealDFile *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;

  v2 = *((_QWORD *)this + 19);
  v3 = a2;
  v4 = v2 + ((unint64_t)a2 << 7);
  v7 = *(_DWORD *)(v4 + 104);
  v5 = (_DWORD *)(v4 + 104);
  v6 = v7;
  if (v7 == -1)
    return 0xFFFFFFFFLL;
  v9 = *((_QWORD *)this + 17);
  *(_WORD *)(v9 + 2 * v6) = 0;
  if (*((_DWORD *)this + 24) == (_DWORD)v6 + 1)
  {
    for (; (_DWORD)v6; LODWORD(v6) = v6 - 1)
    {
      if (*(_WORD *)(v9 + 2 * v6))
        break;
    }
    v10 = (v6 + 1);
    OsFile::shrinkSize(*((OsFile **)this + 10), (*((unsigned int *)this + 54) + v10) << 12);
    if (*((_DWORD *)this + 24) > v10)
      *((_DWORD *)this + 24) = v10;
  }
  v11 = *((_DWORD *)this + 36);
  if (v11 <= v6)
    result = v11 - 1;
  else
    result = v6;
  if ((_DWORD)result == -1)
  {
LABEL_14:
    *(_QWORD *)(v2 + (v3 << 7) + 100) = -1;
    result = 0xFFFFFFFFLL;
  }
  else
  {
    while (*(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * result) != (_DWORD)v3)
    {
      result = (result - 1);
      if ((_DWORD)result == -1)
        goto LABEL_14;
    }
    *v5 = result;
  }
  --*(_DWORD *)(v2 + (v3 << 7) + 96);
  *((_BYTE *)this + 296) = 1;
  return result;
}

void RealDFile::fillSubFileSizeInfo(RealDFile *this)
{
  unsigned int v1;
  unsigned __int16 i;
  const char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;

  v1 = *((_DWORD *)this + 40);
  if (v1 >= 2)
  {
    for (i = 1; i < v1; ++i)
    {
      v4 = (const char *)(*((_QWORD *)this + 19) + ((unint64_t)i << 7));
      if (*v4)
      {
        DgnString::DgnString((DgnString *)&v7, v4);
        if (v8)
          v5 = v7;
        else
          v5 = &unk_209A7E1FC;
        v6 = (*(uint64_t (**)(RealDFile *, void *))(*(_QWORD *)this + 48))(this, v5);
        DFileProgressInfo::add(*((DFileProgressInfo **)this + 1), (const DgnString *)&v7, v6);
        DgnString::~DgnString((DgnString *)&v7);
        v1 = *((_DWORD *)this + 40);
      }
    }
  }
}

void sub_2099ED8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void RealDFile::fillSubFileSizeInfo(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned __int16 v5;
  unsigned __int16 v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;

  v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 2)
  {
    v5 = 1;
    do
    {
      v6 = v5;
      if (*(_BYTE *)(*a2 + v5))
      {
        DgnString::DgnString((DgnString *)&v9, (const char *)(*(_QWORD *)(a1 + 152) + ((unint64_t)v5 << 7)));
        if (v10)
          v7 = v9;
        else
          v7 = &unk_209A7E1FC;
        v8 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 48))(a1, v7);
        DFileProgressInfo::add(*(DFileProgressInfo **)(a1 + 8), (const DgnString *)&v9, v8);
        DgnString::~DgnString((DgnString *)&v9);
        v2 = *(_DWORD *)(a1 + 160);
      }
      v5 = v6 + 1;
    }
    while (v2 > (unsigned __int16)(v6 + 1));
  }
}

void sub_2099ED9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::attachProgressInfo(uint64_t this, DFileProgressInfo *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

void SetShadowDebugShowDFileStatsOnDestruction(void)
{
  gShadowDebugShowDFileStatsOnDestruction = *(_BYTE *)(gParDebugShowDFileStatsOnDestruction + 41);
}

unint64_t DgnArray<RealDFileDirEntry>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, (unint64_t)v6 << 7, v5 << 7, v5 << 7, 1);
  *(_DWORD *)(a1 + 12) = result >> 7;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<RealDFileDirEntry>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<RealDFileDirEntry>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    v12 = *a2 + ((unint64_t)a3 << 7);
    v13 = *(_QWORD *)v7 + ((unint64_t)v10 << 7);
    v15 = *(_OWORD *)(v12 + 32);
    v14 = *(_OWORD *)(v12 + 48);
    v16 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
    v17 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v12;
    *(_OWORD *)(v13 + 16) = v17;
    *(_OWORD *)(v13 + 48) = v14;
    *(_OWORD *)(v13 + 64) = v16;
    *(_OWORD *)(v13 + 32) = v15;
    *(_BYTE *)(v13 + 95) = 0;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
    *(_QWORD *)(v13 + 112) = *(_QWORD *)(v12 + 112);
    *(_DWORD *)(v13 + 120) = *(_DWORD *)(v12 + 120);
    *(_BYTE *)(v13 + 124) = *(_BYTE *)(v12 + 124);
    *(_BYTE *)(v13 + 125) = *(_BYTE *)(v12 + 125);
    *(_WORD *)(v13 + 126) = *(_WORD *)(v12 + 126);
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v18 = a4 - (unint64_t)v10;
    v19 = (unint64_t)v10 << 7;
    do
    {
      v20 = *(_QWORD *)v7 + v19;
      *(_OWORD *)(v20 + 110) = 0uLL;
      *(_OWORD *)(v20 + 80) = 0uLL;
      *(_OWORD *)(v20 + 96) = 0uLL;
      *(_OWORD *)(v20 + 48) = 0uLL;
      *(_OWORD *)(v20 + 64) = 0uLL;
      *(_OWORD *)(v20 + 16) = 0uLL;
      *(_OWORD *)(v20 + 32) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *(_WORD *)(v20 + 126) = -8454;
      v19 += 128;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = (_QWORD *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<DgnPrimFixArray<char>>(*(_QWORD *)(*v3 + 8 * v5));
      *(_QWORD *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnDelete<DgnPrimFixArray<char>>(uint64_t result)
{
  _QWORD *fixed;

  if (result)
  {
    fixed = (_QWORD *)DgnPrimFixArray<double>::~DgnPrimFixArray(result);
    return MemChunkFree(fixed, 0);
  }
  return result;
}

uint64_t BaseSyncNet::BaseSyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _QWORD *v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t, int, int, int, int, uint64_t, int, int, _DWORD *, _DWORD *);
  BOOL v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, int, int, _DWORD *, _DWORD *);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, int, int, _DWORD *, _DWORD *);

  v11 = (_QWORD *)AcousticNet::AcousticNet(a1, a2, a3, a4, a5, a6, a7, a9);
  v11[27] = 0;
  *v11 = off_24C213948;
  v11[28] = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  NodeNetNode::NodeNetNode((NodeNetNode *)(v11 + 29), 0);
  *(_BYTE *)(a1 + 114) = a8;
  *(_BYTE *)(a1 + 282) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 20000;
  v12 = *(_DWORD *)(a1 + 48);
  if (v12)
  {
    if (v12 == 1)
    {
      v18 = Sequence::scoreOneSkip;
      v14 = a8 == 0;
      if (a8)
        v18 = Sequence::scoreOneSkipNBest;
      v15 = Sequence::scoreOneSkipDeadSeq;
      *(_QWORD *)(a1 + 200) = v18;
      *(_QWORD *)(a1 + 208) = 0;
      v16 = Sequence::scoreOneSkipDeadSeqNBest;
    }
    else
    {
      if (v12 != 2)
      {
        *(_OWORD *)(a1 + 200) = 0u;
        *(_OWORD *)(a1 + 184) = 0u;
        return a1;
      }
      v13 = Sequence::scoreMultiSkip;
      v14 = a8 == 0;
      if (a8)
        v13 = Sequence::scoreMultiSkipNBest;
      v15 = Sequence::scoreMultiSkipDeadSeq;
      *(_QWORD *)(a1 + 200) = v13;
      *(_QWORD *)(a1 + 208) = 0;
      v16 = Sequence::scoreMultiSkipDeadSeqNBest;
    }
  }
  else
  {
    v17 = Sequence::scoreNoSkip;
    v14 = a8 == 0;
    if (a8)
      v17 = Sequence::scoreNoSkipNBest;
    v15 = Sequence::scoreNoSkipDeadSeq;
    *(_QWORD *)(a1 + 200) = v17;
    *(_QWORD *)(a1 + 208) = 0;
    v16 = Sequence::scoreNoSkipDeadSeqNBest;
  }
  if (v14)
    v16 = v15;
  *(_QWORD *)(a1 + 184) = v16;
  *(_QWORD *)(a1 + 192) = 0;
  return a1;
}

void sub_2099EDD2C(_Unwind_Exception *a1)
{
  AcousticNet *v1;
  uint64_t v2;

  DgnIArray<Utterance *>::~DgnIArray(v2);
  AcousticNet::~AcousticNet(v1);
  _Unwind_Resume(a1);
}

void BaseSyncNet::~BaseSyncNet(BaseSyncNet *this, Sequence *a2)
{
  _QWORD *v3;
  unint64_t v4;

  *(_QWORD *)this = off_24C213948;
  v3 = (_QWORD *)((char *)this + 216);
  if (*((_DWORD *)this + 56))
  {
    v4 = 0;
    do
      Sequence::deleteSequence(*(Sequence **)(*v3 + 8 * v4++), a2);
    while (v4 < *((unsigned int *)this + 56));
  }
  NodeNetNode::~NodeNetNode((BaseSyncNet *)((char *)this + 232));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  AcousticNet::~AcousticNet(this);
}

void Sequence::deleteSequence(Sequence *this, Sequence *a2)
{
  _QWORD *v2;

  PredStruct::~PredStruct(this);
  if (v2)
    MemChunkFree(v2, 0);
}

uint64_t BaseSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t active;

  v4 = HmmNet::sizeObject((unsigned int *)a1, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if ((_DWORD)a2 == 3)
    v5 = 0;
  v6 = 12;
  if ((_DWORD)a2 == 3)
    v6 = 0;
  v7 = v6 + v4 + v5;
  if ((_DWORD)a2 == 3)
  {
    v8 = 0;
  }
  else
  {
    v8 = 4;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v7 += 8;
    else
      v7 += 32;
  }
  active = sizeObject<ActiveWord *>(a1 + 216, a2);
  return (((_DWORD)a2 != 3) | (2 * ((_DWORD)a2 != 3)) | v8)
       + (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 232) + 16))(a1 + 232, a2)
       + v7
       + active;
}

uint64_t BaseSyncNet::getBestScore(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t BestScore;
  uint64_t v8;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 224);
  if ((int)v4 < 1)
  {
    v6 = 20000;
  }
  else
  {
    v5 = v4 + 1;
    v6 = 20000;
    do
    {
      v10 = 0;
      BestScore = Sequence::getBestScore(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * (v5 - 2)), &v10);
      if ((int)BestScore < (int)v6)
      {
        *a2 = v10;
        v6 = BestScore;
      }
      --v5;
    }
    while (v5 > 1);
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v8 = *(__int16 *)(a1 + 250);
    if ((int)v6 > (int)v8)
    {
      *a2 = a1 + 240;
      return v8;
    }
  }
  return v6;
}

uint64_t BaseSyncNet::updateBestNodeScore(BaseSyncNet *this)
{
  uint64_t result;
  int v3;

  result = *((unsigned int *)this + 71);
  if (*((_BYTE *)this + 280))
  {
    v3 = *((__int16 *)this + 125);
    if ((int)result >= v3)
      return v3;
    else
      return result;
  }
  return result;
}

uint64_t BaseSyncNet::addArc(BaseSyncNet *this, const Node *a2, Node *a3)
{
  char *v3;

  if ((BaseSyncNet *)((char *)this + 240) == a3)
    v3 = (char *)this + 264;
  else
    v3 = (char *)a3 - 16;
  return PredStruct::addPred((uint64_t)v3, (uint64_t)a2);
}

uint64_t SyncNet::attachInPort(SyncNet *this, unsigned int a2, Node *a3)
{
  return PredStruct::addPred((uint64_t)a3 - 16, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2));
}

uint64_t BaseSyncNet::unpackSequence(_QWORD *a1, unsigned __int16 *a2, int a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  unsigned __int16 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v34;

  v8 = a2;
  v10 = a1[1];
  v11 = *(_QWORD *)(v10 + 16);
  v12 = a3;
  if (a3 < 1)
  {
    v13 = 0;
  }
  else
  {
    LODWORD(v13) = 0;
    v14 = a2 + 2;
    v15 = a3;
    do
    {
      v16 = *v14;
      v14 += 6;
      v13 = v13 + *(unsigned __int8 *)(*(_QWORD *)(v11 + 16) + v16);
      --v15;
    }
    while (v15);
  }
  v17 = *(_DWORD *)(v10 + 4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 336))(a1, v13, a6);
  v19 = result;
  v20 = a1[1];
  v21 = (_DWORD *)(v20 + 302832);
  v22 = *(_DWORD *)(v20 + 302836);
  if (v13 <= v22)
  {
    *v21 = v13;
    v23 = a5;
    v24 = a4;
    if (!(_DWORD)v13)
      goto LABEL_12;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(v20 + 302824, v13 - v22, 0);
    *v21 = v13;
    v23 = a5;
    v24 = a4;
  }
  v25 = 0;
  v26 = v13 - 1;
  if (v17 == 1)
    v26 = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a1[1] + 302824) + 8 * v25++) = v19 + 24 * v26 + 12;
    v26 += v17;
  }
  while (v13 != v25);
LABEL_12:
  v34 = 0;
  v27 = a1[1];
  if (a3 < 1)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v28 = *(uint64_t **)(v27 + 302824);
    do
    {
      result = (uint64_t)PicMgr::getNodeDataPtrs((unsigned __int16 *)v11, v28, *(_QWORD **)(a1[1] + 32), v8, (_DWORD *)&v34 + 1, &v34);
      v28 += *(unsigned __int8 *)(*(_QWORD *)(v11 + 16) + v8[2]);
      v8 += 6;
      --v12;
    }
    while (v12);
    v27 = a1[1];
    v29 = v34;
    v30 = HIDWORD(v34);
  }
  v31 = v27 + 302664;
  v32 = *(_DWORD *)(v31 + 4);
  *(_DWORD *)v31 += a3;
  *(_DWORD *)(v31 + 4) = v32 + v30;
  *(_QWORD *)(v31 + 8) += v29;
  *v24 = v19;
  *v23 = v19 + 24 * v13 - 24;
  return result;
}

uint64_t BaseSyncNet::unpackEndSilence(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = ((uint64_t (*)(uint64_t **, uint64_t, _QWORD))(*this)[42])(this, 1, 0);
  v3 = v2;
  *(_QWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 20) = 0;
  v4 = this[9];
  if (*((_DWORD *)this + 13))
    *v4 = v2;
  else
    PredStruct::addPred(*v4 + 16, v2);
  this[18] = (uint64_t *)v3;
  return v3;
}

uint64_t BaseSyncNet::unpackOneFromPicNodes(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;

  v9 = a3;
  v12 = a1[1];
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_DWORD *)(v12 + 4);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 336))(a1, a3, a7);
  v16 = a1[1];
  v17 = (unsigned int *)(v16 + 302832);
  v18 = *(_DWORD *)(v16 + 302836);
  if (v9 <= v18)
  {
    *v17 = v9;
    if (!v9)
    {
      v21 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v16 + 302824, v9 - v18, 0);
    *v17 = v9;
  }
  v19 = 0;
  v20 = v9 - 1;
  if (v14 == 1)
    v20 = 0;
  v21 = v9;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a1[1] + 302824) + 8 * v19++) = v15 + 24 * v20 + 12;
    v20 += v14;
  }
  while (v9 != v19);
LABEL_10:
  result = PicMgr::getNodeDataPtrsFromPicNodes(v13, *(uint64_t **)(a1[1] + 302824), *(_QWORD **)(a1[1] + 32), a2, v9);
  *a5 = v15;
  *a6 = v15 + 24 * v21 - 24;
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode2(uint64_t this, uint64_t a2, int a3)
{
  if (*(_BYTE *)(this + 280))
  {
    *(_DWORD *)(this + 152) = *(__int16 *)(this + 250) <= a3;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 320))(this, *(unsigned __int8 *)(this + 113), a2);
  }
  else
  {
    *(_DWORD *)(this + 152) = 0;
  }
  return this;
}

void SyncNet::~SyncNet(SyncNet *this)
{
  PredStruct *v2;
  _QWORD *v3;
  _QWORD *v4;
  Sequence *v5;

  *(_QWORD *)this = &off_24C2193B0;
  v2 = (PredStruct *)*((_QWORD *)this + 40);
  if (v2)
  {
    PredStruct::~PredStruct(v2);
    MemChunkFree(v3, 0);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 36);
  if (v4)
    MemChunkFree(v4, 0);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  BaseSyncNet::~BaseSyncNet(this, v5);
}

{
  SyncNet::~SyncNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t SyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = BaseSyncNet::sizeObject(a1, a2);
  v5 = gShadowDiagnosticShowIdealizedObjectSizes;
  active = sizeObject<ActiveWord *>(a1 + 304, v2);
  v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 8;
  if (v2 == 3)
    v8 = 0;
  else
    v8 = v7;
  if (v2 != 2)
  {
    v9 = *(_QWORD *)(a1 + 320);
    if (v9)
      v8 += sizeObject(v9, v2);
  }
  if (v5)
    v10 = 8;
  else
    v10 = 16;
  v11 = sizeObject(a1 + 328, v2);
  if (v2 == 3)
    v12 = 0;
  else
    v12 = v10;
  return v4 + 2 * (v2 != 3) + active + v8 + v12 + v11 + ((2 * (v2 != 3)) | (8 * (v2 != 3)));
}

uint64_t SyncNet::getBestScore(uint64_t a1, _QWORD *a2)
{
  uint64_t BestScore;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  BestScore = BaseSyncNet::getBestScore(a1, a2);
  if (*(_DWORD *)(a1 + 312))
  {
    v5 = 0;
    do
    {
      v10 = 0;
      v6 = Sequence::getBestScore(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v5), &v10);
      if ((int)v6 < (int)BestScore)
      {
        *a2 = v10;
        BestScore = v6;
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 312));
  }
  v7 = *(_QWORD *)(a1 + 320);
  if (v7)
  {
    v10 = 0;
    v8 = Sequence::getBestScore(v7, &v10);
    if ((int)v8 < (int)BestScore)
    {
      *a2 = v10;
      return v8;
    }
  }
  return BestScore;
}

uint64_t SyncNet::updateBestNodeScore(SyncNet *this)
{
  signed int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 71);
  if (*((_BYTE *)this + 280) && v1 >= *((__int16 *)this + 125))
    v1 = *((__int16 *)this + 125);
  if (*((_DWORD *)this + 88) < v1)
    v1 = *((_DWORD *)this + 88);
  v2 = *((_DWORD *)this + 89);
  if ((int)v2 >= v1)
    return v1;
  else
    return v2;
}

uint64_t SyncNet::scoreNetInternal(int32x2_t *this, int a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  __int32 v8;
  _BOOL4 v9;
  _BYTE *v10;
  _BYTE *v11;
  BOOL v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, _BOOL8, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, unsigned int *, __int32 *);
  uint64_t *v23;
  _QWORD *v24;
  uint64_t (*v25)(_QWORD *, uint64_t, _BOOL8, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, unsigned int *, __int32 *);
  __int32 v26;
  int32x2_t v27;
  int32x2_t v28;
  int v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t (*v32)(_QWORD *, uint64_t, _BOOL8, uint64_t, _QWORD, _QWORD);
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  int32x2_t v37;
  unsigned __int16 v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(_QWORD *);
  __int32 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int32 v56;
  int v57;
  uint64_t result;
  _BYTE *v59;
  uint64_t v60;
  int32x2_t *v61;
  uint64_t (*v62)(_QWORD *);
  unsigned int v63;
  __int32 v66;
  unsigned int v67;
  uint64_t v68;

  v6 = a3;
  v8 = this[13].i32[0];
  v66 = this[19].i32[0];
  v67 = 0;
  if (v8)
  {
    v61 = this + 44;
    v9 = this[44].i32[0] <= (int)a3;
    v10 = (char *)&this[45] + 2;
    this[45].i8[2] = v9;
    v11 = (char *)&this[45] + 3;
    this[45].i8[3] = this[44].i32[1] <= (int)a3;
    this[44] = vdup_n_s32(0x4E20u);
    v12 = this[35].i32[1] <= (int)a3;
  }
  else
  {
    v9 = 0;
    v12 = 0;
    v10 = (char *)&this[45] + 2;
    this[45].i16[1] = 0;
    v61 = this + 44;
    v11 = (char *)&this[45] + 3;
    this[44] = vdup_n_s32(0x4E20u);
  }
  this[35].i8[2] = v12;
  v13 = 20000;
  this[35].i32[1] = 20000;
  v63 = a3;
  if (this[39].i32[0])
  {
    v13 = BaseSyncNet::scoreIntSilNode1<true>((uint64_t)this, v9, this[14].u8[2], a3, a4, a5, a6, &v67);
    v14 = (uint64_t **)this[38];
    v15 = **v14;
    if (v8)
      v16 = *(__int16 *)(v15 + 8) <= (int)v6;
    else
      v16 = 0;
    v17 = this[39].u32[0];
    if (*v10 || v16)
    {
      if (*v10)
      {
        v22 = (uint64_t (*)(_QWORD *, uint64_t, _BOOL8, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, unsigned int *, __int32 *))this[25];
        v21 = (uint64_t)this[26];
        *(_DWORD *)(*(_QWORD *)&this[1] + 302648) += v17;
      }
      else
      {
        v22 = (uint64_t (*)(_QWORD *, uint64_t, _BOOL8, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, unsigned int *, __int32 *))this[23];
        v21 = (uint64_t)this[24];
        *(_DWORD *)(*(_QWORD *)&this[1] + 302652) += v17;
      }
      v59 = v11;
      if ((_DWORD)v17)
      {
        do
        {
          v23 = *v14;
          v24 = (uint64_t *)((char *)*v14 + (v21 >> 1));
          v25 = v22;
          if ((v21 & 1) != 0)
            v25 = *(uint64_t (**)(_QWORD *, uint64_t, _BOOL8, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, unsigned int *, __int32 *))(*v24 + v22);
          v26 = v25(v24, v15, v16, v63, a4, a5, *(_QWORD *)&this[1], this[14].u32[1], 0, &v67, &v66);
          if (v26 < this[44].i32[0])
            v61->i32[0] = v26;
          if (v13 >= SLOWORD(v23[3 * *((unsigned __int16 *)v23 + 5)]))
            v13 = SLOWORD(v23[3 * *((unsigned __int16 *)v23 + 5)]);
          ++v14;
          --v17;
        }
        while (v17);
      }
      this[35].i8[1] = 1;
      v6 = v63;
      v11 = v59;
    }
    else if (this[35].i8[1])
    {
      this[35].i8[1] = 0;
      v18 = this[10].u32[0];
      if ((int)v18 >= 2)
      {
        v19 = this[9];
        v20 = v18 + 1;
        do
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v19 + 8 * (v20-- - 2)) + 8) = 20000;
        while (v20 > 2);
      }
    }
  }
  this[13].i16[2] = v13;
  v27 = this[1];
  if (v13 < *(__int16 *)(*(_QWORD *)&v27 + 246))
    *(_WORD *)(*(_QWORD *)&v27 + 246) = v13;
  v28 = this[40];
  v29 = this[35].u8[2];
  if (v28)
  {
    v30 = **(_QWORD **)&v28;
    if (this[35].i8[2])
      v31 = *(__int16 *)(v30 + 8) <= (int)v6;
    else
      v31 = 0;
    if (*v11 || v31)
    {
      if (*v11)
      {
        v32 = (uint64_t (*)(_QWORD *, uint64_t, _BOOL8, uint64_t, _QWORD, _QWORD))this[25];
        v33 = (uint64_t)this[26];
        ++*(_DWORD *)(*(_QWORD *)&v27 + 302640);
      }
      else
      {
        v32 = (uint64_t (*)(_QWORD *, uint64_t, _BOOL8, uint64_t, _QWORD, _QWORD))this[23];
        v33 = (uint64_t)this[24];
        ++*(_DWORD *)(*(_QWORD *)&v27 + 302644);
      }
      v34 = (_QWORD *)(*(_QWORD *)&v28 + (v33 >> 1));
      if ((v33 & 1) != 0)
        v32 = *(uint64_t (**)(_QWORD *, uint64_t, _BOOL8, uint64_t, _QWORD, _QWORD))(*v34 + v32);
      this[44].i32[1] = v32(v34, v30, v31, v6, a4, a5);
      v29 = this[35].u8[2];
    }
    else
    {
      *(_WORD *)(*(_QWORD *)&v28 + 24 * (*(unsigned __int16 *)(*(_QWORD *)&v28 + 10) - 1) + 24) = 20000;
    }
  }
  v35 = this[28].u32[0];
  v36 = (uint64_t *)this[27];
  if (v29)
  {
    v60 = (uint64_t)this[26];
    v62 = (uint64_t (*)(_QWORD *))this[25];
    v37 = this[1];
    v38 = -25048;
  }
  else
  {
    v37 = this[1];
    if (!this[14].i8[0])
      goto LABEL_63;
    v60 = (uint64_t)this[24];
    v62 = (uint64_t (*)(_QWORD *))this[23];
    v38 = -25044;
  }
  *(_DWORD *)(*(_QWORD *)&v37 + (v38 | 0x40000u)) += v35;
  if ((_DWORD)v35)
  {
    v39 = 0;
    v40 = 0xFFFFFFFFLL;
    v41 = 20000;
    while (1)
    {
      v42 = *v36;
      v43 = (_QWORD *)(*v36 + (v60 >> 1));
      v44 = v62;
      if ((v60 & 1) != 0)
        v44 = *(uint64_t (**)(_QWORD *))(*v43 + v62);
      v45 = v44(v43);
      if (v45 < this[35].i32[1])
        this[35].i32[1] = v45;
      v46 = v42 + 24 * (*(unsigned __int16 *)(v42 + 10) - 1);
      v47 = *(__int16 *)(v46 + 24);
      v48 = v47 - v41;
      if ((int)v47 - (int)v41 < 0)
      {
        if (!this[14].i8[2])
        {
          v41 = *(__int16 *)(v46 + 24);
          v39 = (_DWORD *)(v46 + 16);
          goto LABEL_60;
        }
        v48 = v41 - v47;
        v49 = (_DWORD *)(v46 + 16);
        v50 = *(unsigned int *)(v46 + 20);
      }
      else
      {
        v49 = v39;
        v47 = v41;
        v50 = v40;
        v39 = (_DWORD *)(v46 + 16);
        LODWORD(v40) = *(_DWORD *)(v46 + 20);
        if (!this[14].i8[2])
          goto LABEL_59;
      }
      if (v48 + (int)v47 > a4)
      {
LABEL_59:
        v41 = v47;
        v39 = v49;
        v40 = v50;
        goto LABEL_60;
      }
      v51 = *(_QWORD *)&this[1] + 302936;
      v52 = *v39;
      v68 = 0;
      v53 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v51, &v68);
      v54 = v68;
      *(_DWORD *)(v68 + 4) = v50;
      *(_DWORD *)(v54 + 8) = v40;
      *(_DWORD *)v54 = v52;
      *(_WORD *)(v54 + 12) = v48;
      v41 = v47;
      v39 = v49;
      v40 = v53;
LABEL_60:
      ++v36;
      if (!--v35)
      {
        v37 = this[1];
        goto LABEL_64;
      }
    }
  }
LABEL_63:
  v39 = 0;
  LODWORD(v40) = -1;
  LODWORD(v41) = 20000;
LABEL_64:
  v55 = *(_QWORD *)&v37 + 302584;
  ++*(_DWORD *)v55;
  *(_QWORD *)(v55 + 24) += v67;
  if ((int)v41 <= a4)
  {
    this[42].i16[0] = v41 + ((unsigned __int32)this[42].i32[1] >> 8);
    v56 = *v39;
    if (this[14].i8[2])
    {
      this[41].i32[0] = v56;
      this[41].i32[1] = v40;
    }
    else
    {
      v57 = v39[1];
      this[41].i32[0] = v56;
      this[41].i32[1] = v57 + this[43].i16[1];
    }
  }
  else
  {
    this[42].i32[0] = 1310740000;
  }
  this[13].i32[0] = v66;
  result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 328))(this);
  this[13].i16[3] = result;
  return result;
}

uint64_t SyncNet::thresholdNetInternal(SyncNet *this, uint64_t a2, int a3)
{
  int v5;

  if (*((_BYTE *)this + 280))
  {
    *((_DWORD *)this + 38) = *((__int16 *)this + 125) <= a3;
    (*(void (**)(SyncNet *, _QWORD, uint64_t))(*(_QWORD *)this + 320))(this, *((unsigned __int8 *)this + 113), a2);
  }
  else
  {
    *((_DWORD *)this + 38) = 0;
  }
  if (*((__int16 *)this + 55) <= a3)
  {
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *((_WORD *)this + 55) = 20000;
  }
  *((_DWORD *)this + 26) = v5;
  return SyncNet::maybeDoCallback((uint64_t)this, a3);
}

uint64_t SyncNet::maybeDoCallback(uint64_t this, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(this + 176);
  if (v2 == 3)
  {
    v3 = *(__int16 *)(this + 336);
  }
  else
  {
    if (v2 != 2)
      return this;
    v3 = *(__int16 *)(*(_QWORD *)(this + 320)
                    + 24 * (*(unsigned __int16 *)(*(_QWORD *)(this + 320) + 10) - 1)
                    + 24);
  }
  if (v3 <= a2)
    return (*(uint64_t (**)(_QWORD))(this + 160))(*(_QWORD *)(this + 168));
  return this;
}

uint64_t SyncNet::calcNumActiveNodes(SyncNet *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 88) <= a2)
  {
    v5 = *((unsigned int *)this + 78);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 38);
      do
      {
        v7 = *v6++;
        v4 = Sequence::calcNumActiveNodes(v7, a2) + v4;
        --v5;
      }
      while (v5);
    }
  }
  if (*((_DWORD *)this + 89) <= a2)
    v4 = Sequence::calcNumActiveNodes(*((_QWORD *)this + 40), a2) + v4;
  if (*((_DWORD *)this + 71) <= a2)
  {
    v8 = *((unsigned int *)this + 56);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 27);
      do
      {
        v10 = *v9++;
        v4 = Sequence::calcNumActiveNodes(v10, a2) + v4;
        --v8;
      }
      while (v8);
    }
  }
  return v4;
}

uint64_t SyncNet::addEpsilonNode(SyncNet *this)
{
  if (*((_BYTE *)this + 360))
  {
    *((_BYTE *)this + 361) = 1;
    return *((_QWORD *)this + 1) + 302796;
  }
  else
  {
    *((_BYTE *)this + 360) = 1;
    return (uint64_t)this + 328;
  }
}

_QWORD *SyncNet::addArc(_QWORD *this, const Node *a2, Node *a3)
{
  const Node *v3;
  uint64_t v4;
  char *v5;

  if (this + 41 != (_QWORD *)a3)
  {
    v3 = (const Node *)(this[1] + 302796);
    if (v3 != a3)
    {
      if (v3 == a2)
      {
        v4 = this[40];
        if (v4)
          a2 = (const Node *)(v4 + 24 * (*(unsigned __int16 *)(v4 + 10) - 1) + 16);
        else
          a2 = (const Node *)(this + 41);
      }
      if (this + 30 == (_QWORD *)a3)
        v5 = (char *)(this + 33);
      else
        v5 = (char *)a3 - 16;
      return (_QWORD *)PredStruct::addPred((uint64_t)v5, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t *SyncNet::addNodesSequential(uint64_t a1, Sequence *this, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (a3)
  {
    if (a3 == 1)
    {
      v5 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)v5 = 0;
      *(_WORD *)(v5 + 8) = 0;
      *(_WORD *)(v5 + 10) = (_WORD)this;
      if ((_DWORD)this)
      {
        v6 = v5 + 24;
        v7 = this;
        do
        {
          *(_QWORD *)(v6 - 8) = 0x100000001;
          *(_DWORD *)v6 = 1310740000;
          *(_QWORD *)(v6 + 4) = 0;
          *(_DWORD *)(v6 + 12) = -65536;
          v6 += 24;
          --v7;
        }
        while (v7);
        v8 = 24 * this + 16;
      }
      else
      {
        v8 = 16;
      }
      v12 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 296) += v8;
      v13 = *(unsigned int *)(a1 + 312);
      *(_QWORD *)(v12 + 8 * v13) = v5;
      *(_DWORD *)(a1 + 312) = v13 + 1;
      return (uint64_t *)(v5 + 16);
    }
    else
    {
      v10 = Sequence::newSequence(this);
      v11 = v10;
      v9 = v10 + 2;
      if (a3 == 3)
      {
        v14 = *(_DWORD *)(a1 + 224);
        if (v14 == *(_DWORD *)(a1 + 228))
        {
          DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 1);
          v14 = *(_DWORD *)(a1 + 224);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v14) = v11;
        *(_DWORD *)(a1 + 224) = v14 + 1;
      }
      else if (a3 == 2)
      {
        *(_QWORD *)(a1 + 320) = v10;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)(a1 + 240);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return v9;
}

uint64_t *SyncNet::preallocEndSequences(SyncNet *this, unsigned int a2, unsigned int a3)
{
  uint64_t *result;
  unsigned int v6;

  result = MemChunkAlloc((24 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 16) + a2) + 16) * a3, 0);
  *((_QWORD *)this + 36) = result;
  *((_QWORD *)this + 37) = result;
  v6 = *((_DWORD *)this + 79);
  if (a3 > v6)
    return (uint64_t *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 304, a3 - v6, 0);
  return result;
}

uint64_t SyncNet::estimateActivePelsThisFrame(SyncNet *this, BitArray *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;

  result = BaseSyncNet::estimateActivePelsThisFrame(this, a2);
  if (*((_BYTE *)this + 360))
  {
    v5 = *((unsigned __int16 *)this + 175);
    if ((_DWORD)v5 != 0xFFFF)
      *(_DWORD *)(*(_QWORD *)a2 + ((v5 >> 3) & 0x1FFC)) |= 1 << v5;
  }
  v6 = *((unsigned int *)this + 78);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 38);
    do
    {
      v9 = *(_QWORD *)(v8 + 8 * v7);
      if (*(_WORD *)(v9 + 10))
      {
        v10 = 0;
        v11 = *(_QWORD *)a2;
        v12 = (unsigned __int16 *)(v9 + 38);
        do
        {
          v13 = *v12;
          v12 += 12;
          v14 = ((unint64_t)v13 >> 3) & 0x1FFC;
          result = *(unsigned int *)(v11 + v14);
          *(_DWORD *)(v11 + v14) = (1 << v13) | result;
          ++v10;
        }
        while (v10 < *(unsigned __int16 *)(v9 + 10));
      }
      ++v7;
    }
    while (v7 != v6);
  }
  v15 = *((_QWORD *)this + 40);
  if (v15 && *(_WORD *)(v15 + 10))
  {
    v16 = 0;
    v17 = *(_QWORD *)a2;
    v18 = (unsigned __int16 *)(v15 + 38);
    do
    {
      v19 = *v18;
      v18 += 12;
      *(_DWORD *)(v17 + (((unint64_t)v19 >> 3) & 0x1FFC)) |= 1 << v19;
      ++v16;
    }
    while (v16 < *(unsigned __int16 *)(v15 + 10));
  }
  return result;
}

uint64_t BaseSyncNet::estimateActivePelsThisFrame(BaseSyncNet *this, BitArray *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unint64_t v13;

  result = AcousticNet::estimateActivePelsThisFrame((uint64_t)this, a2);
  if (*((_BYTE *)this + 280))
    *(_DWORD *)(*(_QWORD *)a2 + (((unint64_t)*((unsigned __int16 *)this + 131) >> 3) & 0x1FFC)) |= 1 << *((_WORD *)this + 131);
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 27);
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if (*(_WORD *)(v8 + 10))
      {
        v9 = 0;
        v10 = *(_QWORD *)a2;
        v11 = (unsigned __int16 *)(v8 + 38);
        do
        {
          v12 = *v11;
          v11 += 12;
          v13 = ((unint64_t)v12 >> 3) & 0x1FFC;
          result = *(unsigned int *)(v10 + v13);
          *(_DWORD *)(v10 + v13) = (1 << v12) | result;
          ++v9;
        }
        while (v9 < *(unsigned __int16 *)(v8 + 10));
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void Lookahead::~Lookahead(Lookahead *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104);
  DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::releaseAll((uint64_t)this + 88);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16);
  DgnArray<DgnArray<PositionClu>>::releaseAll((uint64_t)this);
}

void Lookahead::printSize(Lookahead *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 149, (DgnString *)&v121);
  if ((_DWORD)v122)
    v16 = v121;
  else
    v16 = byte_209A7E540;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_209A7E540, a3, byte_209A7E540, v16);
  DgnString::~DgnString((DgnString *)&v121);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_209A7E540);
  v21 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 0);
  v22 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 1);
  v23 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 3);
  v24 = (a3 + 1);
  v120 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 150, (DgnString *)&v121);
  if ((_DWORD)v122)
    v30 = v121;
  else
    v30 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, byte_209A7E540, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 16, 0);
  v32 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 16, 1);
  v121 = 0;
  v122 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v121);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 151, (DgnString *)&v121);
  if ((_DWORD)v122)
    v37 = v121;
  else
    v37 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v24, byte_209A7E540, v25, v25, v37, v31, v32, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v31;
  *a5 += v32;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 153, (DgnString *)&v121);
  if ((_DWORD)v122)
    v42 = v121;
  else
    v42 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v24, byte_209A7E540, v25, v25, v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 154, (DgnString *)&v121);
  if ((_DWORD)v122)
    v47 = v121;
  else
    v47 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v24, byte_209A7E540, v25, v25, v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 155, (DgnString *)&v121);
  if ((_DWORD)v122)
    v52 = v121;
  else
    v52 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v24, byte_209A7E540, v25, v25, v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 156, (DgnString *)&v121);
  if ((_DWORD)v122)
    v57 = v121;
  else
    v57 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v24, byte_209A7E540, v25, v25, v57, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 4;
  else
    v58 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 157, (DgnString *)&v121);
  if ((_DWORD)v122)
    v63 = v121;
  else
    v63 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, byte_209A7E540, v25, v25, v63, v58, v58, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v58;
  *a5 += v58;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 4;
  else
    v64 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 158, (DgnString *)&v121);
  if ((_DWORD)v122)
    v69 = v121;
  else
    v69 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v24, byte_209A7E540, v25, v25, v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v64;
  *a5 += v64;
  v70 = CombineTable::sizeObject((uint64_t)this + 72, 0);
  v71 = CombineTable::sizeObject((uint64_t)this + 72, 1);
  v72 = CombineTable::sizeObject((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 160, (DgnString *)&v121);
  if ((_DWORD)v122)
    v77 = v121;
  else
    v77 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v24, byte_209A7E540, v25, v25, v77, v70, v71, v72);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v70;
  *a5 += v71;
  *a6 += v72;
  v78 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 0);
  v79 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 1);
  v80 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 162, (DgnString *)&v121);
  if ((_DWORD)v122)
    v85 = v121;
  else
    v85 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v24, byte_209A7E540, v25, v25, v85, v78, v79, v80);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v78;
  *a5 += v79;
  *a6 += v80;
  v86 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v86 = 12;
  v87 = *((unsigned int *)this + 28);
  if ((int)v87 <= 0)
    v88 = 0;
  else
    v88 = 4 * v87;
  v89 = v88 + v86;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 164, (DgnString *)&v121);
  if ((_DWORD)v122)
    v94 = v121;
  else
    v94 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v24, byte_209A7E540, v25, v25, v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v89;
  *a5 += v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v95 = 12;
  else
    v95 = 16;
  v96 = *((unsigned int *)this + 32);
  v97 = *((_DWORD *)this + 33);
  if (v97 >= v96)
  {
    v98 = 0;
    if ((int)v96 > 0)
      v95 += 4 * (v96 - 1) + 4;
    v99 = v95 + 4 * (v97 - v96);
  }
  else
  {
    v98 = 4 * v96;
    v99 = v95;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 165, (DgnString *)&v121);
  if ((_DWORD)v122)
    v104 = v121;
  else
    v104 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v24, byte_209A7E540, v25, v25, v104, v99, v95, v98);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v99;
  *a5 += v95;
  *a6 += v98;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v105 = 12;
  else
    v105 = 16;
  v106 = *((unsigned int *)this + 36);
  v107 = *((_DWORD *)this + 37);
  if (v107 >= v106)
  {
    v108 = 0;
    if ((int)v106 > 0)
      v105 += 4 * (v106 - 1) + 4;
    v109 = v105 + 4 * (v107 - v106);
  }
  else
  {
    v108 = 4 * v106;
    v109 = v105;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 166, (DgnString *)&v121);
  if ((_DWORD)v122)
    v114 = v121;
  else
    v114 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v24, byte_209A7E540, v25, v25, v114, v109, v105, v108);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v109;
  *a5 += v105;
  *a6 += v108;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 167, (DgnString *)&v121);
  if ((_DWORD)v122)
    v119 = v121;
  else
    v119 = byte_209A7E540;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, byte_209A7E540, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v121);
}

void sub_2099EF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<PositionClu>>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  int v11;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v10);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v5 += sizeObject<ScoreFixArray>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnArray<DgnVector>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_2099EFA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnVector>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<DgnPrimArray<unsigned char>>>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v9[0] = 0;
  v9[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v10);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimArray<unsigned char>>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_2099EFB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Lookahead::saveLookaheadBinary(Lookahead *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CurrentSubDirComponents;
  unsigned int v14;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x3Fu, a4, "MRPLB!? ", 24, 5);
  v14 = 0;
  writeObject((uint64_t)v7, (int *)this + 10, &v14);
  writeObject((uint64_t)v7, (int *)this + 11, &v14);
  writeObject((uint64_t)v7, (int *)this + 12, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 120, &v14);
  writeObject(v7, (const double *)this + 4, &v14, v8, v9, v10, v11, v12);
  writeObject<DgnPrimArray<unsigned char>>((uint64_t)v7, (uint64_t)this + 16, &v14);
  writeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)v7, (uint64_t)this + 88, &v14);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 104, &v14);
  writeObjectChecksum((uint64_t)v7, (int *)&v14);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x3Fu, v14);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t writeObject<DgnArray<DgnPrimArray<unsigned char>>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<DgnPrimArray<unsigned char>>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void Lookahead::saveLookaheadText(Lookahead *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t i;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36[2];
  uint64_t v37;
  uint64_t v38;
  void *v39[35];
  void *v40;

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v39);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v39, (uint64_t)a2, 0x41u, a3);
  v37 = 0;
  v38 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v39, sPLT_Versions, (uint64_t)&v37, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v39, "PrefiltererLookaheadText", (_QWORD *)(v37 + 8 * (v38 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "SmoothWindowFrames", *((unsigned int *)this + 32));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "ModelDimension", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "NumberOfPhonemes", *((unsigned int *)this + 11));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "NumberOfMixtureComponents", *((unsigned int *)this + 12));
  DgnArray<DgnString>::DgnArray(v36, 6);
  v40 = 0;
  v11 = realloc_array(0, &v40, 0x18uLL, 0, 0, 1);
  v33 = v40;
  v34 = 6;
  v35 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v36, "TableName");
  *v33 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v36 + 16), "Phoneme");
  v33[1] = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v36 + 32), "UnsVal1");
  v33[2] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v36 + 48), "UnsVal2");
  v33[3] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v36 + 64), "UnsVal3");
  v33[4] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v36 + 80), "UnsVal4");
  v33[5] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v39, (uint64_t)&v33, (uint64_t)v36);
  if (*((_DWORD *)this + 32))
  {
    v12 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "FrameWeight");
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, byte_209A7E540);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v12);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v12));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, 0);
      DgnTextFileWriter::writeNextLine(v39);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 32));
  }
  v13 = *((unsigned int *)this + 28);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(unsigned int *)(*((_QWORD *)this + 13) + 4 * v14);
      if ((_DWORD)v16 != -1)
      {
        v17 = *(unsigned int *)(*((_QWORD *)this + 11) + 16 * v16 + 8);
        if ((_DWORD)v17)
        {
          v32 = v14;
          v18 = 0;
          LODWORD(v19) = *((_DWORD *)this + 10);
          do
          {
            if ((_DWORD)v19)
            {
              v20 = 0;
              for (i = 0; i < v19; ++i)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "PDF");
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, byte_209A7E540);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v15);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, i);
                v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16 * v16) + 16 * v18);
                v23 = *(unsigned __int8 *)(v22 + v20 + 1);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, *(unsigned __int8 *)(v22 + v20));
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, v23);
                DgnTextFileWriter::writeNextLine(v39);
                v19 = *((unsigned int *)this + 10);
                v20 += 2;
              }
            }
            ++v15;
            ++v18;
          }
          while (v18 != v17);
          v13 = *((unsigned int *)this + 28);
          v14 = v32;
        }
      }
      ++v14;
    }
    while (v14 < v13);
    if (v13)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = *(unsigned int *)(*((_QWORD *)this + 13) + 4 * v24);
        if ((_DWORD)v27 != -1)
        {
          v28 = *(unsigned int *)(*((_QWORD *)this + 11) + 16 * v27 + 8);
          if ((_DWORD)v28)
          {
            for (j = 0; j != v28; ++j)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "Pel");
              v30 = *(_QWORD *)(*((_QWORD *)this + 8) + 8) + 16 * (unsigned __int16)v24;
              if (*(_DWORD *)(v30 + 8))
                v31 = *(char **)v30;
              else
                v31 = byte_209A7E540;
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, v31);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v25);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, v26 + j);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16 * v27) + j));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, 0);
              DgnTextFileWriter::writeNextLine(v39);
            }
            v13 = *((unsigned int *)this + 28);
            v26 += j;
          }
          ++v25;
        }
        ++v24;
      }
      while (v24 < v13);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnArray<DgnString>::releaseAll((uint64_t)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v37);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v39);
}

void sub_2099F01D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void Lookahead::saveLookahead(Lookahead *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
    Lookahead::saveLookaheadText(this, a2, a5);
  else
    Lookahead::saveLookaheadBinary(this, a2, a3, a5);
}

uint64_t Lookahead::scoreOneForLookahead(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  int v20;
  uint64_t k;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD v27[4];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)a1 + 16 * a3;
  v4 = (unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 16 * a3);
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 56);
  memset(v27, 0, sizeof(v27));
  v7 = *(_DWORD *)(a1 + 40);
  if (v7)
  {
    v8 = *a2;
    v9 = v27;
    v10 = *(unsigned int *)(a1 + 40);
    do
    {
      v11 = *v8++;
      *v9++ = v6 + 2 * v11;
      --v10;
    }
    while (v10);
    v12 = (uint64_t)*v4;
    v13 = **v4;
    v14 = *(_QWORD **)v3;
    v15 = v7 - 1;
    if (v7 - 1 < 0)
    {
      v7 = 0;
      v16 = 0;
    }
    else
    {
      v16 = 0;
      for (i = (v7 - 1); i != -1; --i)
        v16 += *(__int16 *)(*((_QWORD *)v27 + i) + 2 * *(unsigned __int16 *)(*v14 + 2 * i));
      v7 = 1;
    }
  }
  else
  {
    v16 = 0;
    v12 = (uint64_t)*v4;
    v13 = **v4;
    v14 = *(_QWORD **)v3;
    v15 = -1;
  }
  v18 = (v16 + v13);
  if (v5 >= 2)
  {
    for (j = 1; j != v5; ++j)
    {
      v20 = 0;
      if (v7)
      {
        for (k = v15; k != -1; --k)
          v20 += *(__int16 *)(*((_QWORD *)v27 + k) + 2 * *(unsigned __int16 *)(v14[2 * j] + 2 * k));
      }
      v22 = v20 + *(unsigned __int8 *)(v12 + j);
      v24 = v22 - v18;
      v23 = v22 - (int)v18 < 0;
      if (v22 >= (int)v18)
        v18 = v18;
      else
        v18 = v22;
      if (v23)
        v25 = -v24;
      else
        v25 = v24;
      if (v25 < *(_DWORD *)(a1 + 80))
        v18 = (v18 - *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v25));
    }
  }
  return v18;
}

_QWORD *DgnArray<DgnArray<PositionClu>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<PositionClu>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnArray<PositionClu>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnVector>::releaseAll(*v3 + i);
  }
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

void TCondition::TCondition(TCondition *this, unsigned int **a2, unint64_t a3, TLexicon *a4)
{
  int v7;
  unsigned int *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  TLocaleInfo *v12;
  const char *v13;
  _QWORD *exception;
  std::string *v15;
  __int128 v16;
  void *v17[2];
  uint64_t v18;
  _BYTE __p[24];
  uint64_t v20;

  TCondition::setEnum(this, (const TFileObject *)a2, a3);
  *((_QWORD *)this + 4) = a4;
  *(_QWORD *)this = 0;
  v7 = *((_DWORD *)this + 3);
  if (v7 == 7)
  {
    if (TFileObject::verify((TFileObject *)a2, 0, 0))
    {
      std::string::basic_string[abi:ne180100]<0>(v17, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v18) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v17;
        v20 = v18;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v20 >= 0)
        v13 = &__p[8];
      else
        v13 = *(const char **)&__p[8];
      conditionalAssert(v13, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 120, v10, v11);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v20) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v15 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v16 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      *exception = &unk_24C214BA0;
    }
    __p[0] = 0;
    v8 = a2[3];
    if ((v9 & 1) == 0)
    {
      {
        v12 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v12);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v12;
      }
    }
    *(_QWORD *)this = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, __p);
  }
  else
  {
    *((_QWORD *)this + 3) = buildRegExp((const TFileObject *)a2, a4, v7 == 2);
  }
}

void sub_2099F0728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x20BD149A8](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCondition::setEnum(TCondition *this, const TFileObject *a2, unint64_t a3)
{
  uint64_t v6;
  const __int32 *v7;
  uint64_t v8;
  const __int32 *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const __int32 *v17;
  uint64_t result;
  uint64_t v19;
  const __int32 *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _QWORD *v37;
  std::string *v38;
  const char *v39;
  _QWORD *exception;
  std::string *v41;
  __int128 v42;
  __int128 v43;
  void *v44[2];
  uint64_t v45;
  _BYTE __p[24];
  uint64_t v47;

  v6 = 0;
  v7 = (const __int32 *)*((_QWORD *)a2 + 1);
  if (a3 > 1)
    v8 = 8;
  else
    v8 = 9;
  *((_QWORD *)this + 1) = 0x900000004;
  while (1)
  {
    v9 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszSource + v6);
    v10 = wcslen(v9);
    if (!wcsncmp(v7, v9, v10))
      break;
    if (v8 == ++v6)
      goto LABEL_12;
  }
  *((_DWORD *)this + 3) = v6;
  if (a3 <= 1 && (_DWORD)v6 == 8)
    tknPrintf("Warning: Pron conditions are no longer supported in munge-map rules!\n", v11, v12, v13, v14);
  v7 += wcslen(v9);
LABEL_12:
  v15 = *((_DWORD *)this + 3);
  if (v15 >= 2 && v15 != 7)
  {
    if (v15 == 9)
    {
      loggableFileObject((uint64_t *)a2);
      if (__p[23] >= 0)
        v33 = __p;
      else
        v33 = *(_BYTE **)__p;
      tknPrintf("Error: %sInvalid attribute\n", v29, v30, v31, v32, v33);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(v44, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v45) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v44;
        v47 = v45;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v47 >= 0)
        v39 = &__p[8];
      else
        v39 = *(const char **)&__p[8];
      conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 177, v34, v35);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v47) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v45) < 0)
        operator delete(v44[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v41 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v43 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v43;
      }
      *exception = &unk_24C214BA0;
    }
    v19 = 0;
    v7 += 2 * (wcsncmp(v7, dword_209A7E6A0, 2uLL) == 0);
    while (1)
    {
      v20 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszTokenPos + v19);
      v21 = wcslen(v20);
      if (!wcsncmp(v7, v20, v21))
        break;
      if (++v19 == 5)
        goto LABEL_17;
    }
    *((_DWORD *)this + 2) = v19;
    v7 += wcslen(v20);
  }
LABEL_17:
  v17 = &v7[2 * (wcsncmp(v7, dword_209A7E764, 2uLL) == 0)];
  *((_BYTE *)this + 16) = 0;
  result = wcsncmp(v17, dword_209A7E770, 3uLL);
  if (!(_DWORD)result)
  {
    v17 += 3;
    *((_BYTE *)this + 16) = 1;
  }
  if (*v17)
  {
    loggableFileObject((uint64_t *)a2);
    if (__p[23] >= 0)
      v26 = __p;
    else
      v26 = *(_BYTE **)__p;
    tknPrintf("Error: %sInvalid attribute\n", v22, v23, v24, v25, v26);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(v44, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v45) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v44;
      v47 = v45;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v47 >= 0)
      v36 = &__p[8];
    else
      v36 = *(const char **)&__p[8];
    conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 223, v27, v28);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v37 = aPpx;
    v38 = (std::string *)(v37 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v42 = *(_OWORD *)__p;
      v37[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v42;
    }
    *v37 = &unk_24C214BA0;
  }
  return result;
}

void sub_2099F0C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TCondition::~TCondition(TCondition *this)
{
  TRegExp *v1;

  v1 = (TRegExp *)*((_QWORD *)this + 3);
  if (v1)
  {
    TRegExp::~TRegExp(v1);
    MEMORY[0x20BD149A8]();
  }
}

void TCondition::getSource(uint64_t a1, uint64_t a2, int *a3, int *a4, _QWORD *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v18;
  int v20;
  unsigned __int8 *v22;
  uint64_t v23;

  TBuffer<wchar_t>::resize((uint64_t)a5, 0);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      v10 = 0;
      v11 = a5[2];
      while (a3[v10++])
        ;
      v13 = v10 - 1;
      v14 = (uint64_t)a5;
      v15 = a3;
      goto LABEL_8;
    case 1:
      v16 = 0;
      v11 = a5[2];
      while (a4[v16++])
        ;
      v13 = v16 - 1;
      v14 = (uint64_t)a5;
      v15 = a4;
LABEL_8:
      TBuffer<wchar_t>::insert(v14, v11, v15, v13);
      return;
    case 2:
      v18 = *(_DWORD *)(a2 + 48);
      if (v18 != 2 && v18 != 5)
        TWord::getTokenName(*(__int32 ***)(a2 + 56), (uint64_t)a5);
      return;
    case 3:
      v20 = *(_DWORD *)(a2 + 48);
      if (v20 != 2 && v20 != 5)
        goto LABEL_24;
      return;
    case 4:
      TWord::getCategoryTag(*(_QWORD *)(a2 + 56), a5);
      return;
    case 5:
      v22 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 16) + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
        if (v23)
          TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 32) + 240, v22, v23 - (_QWORD)v22, (uint64_t)a5);
      }
      return;
    case 6:
      if (*(_DWORD *)(a2 + 48) == 5)
LABEL_24:
        TWord::getWrittenForm(*(__int32 ***)(a2 + 56), (uint64_t)a5);
      break;
    default:
      return;
  }
}

uint64_t TCondition::test(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  if (*(_DWORD *)(a1 + 12) == 7)
  {
    LOBYTE(v5) = rand() < 0x7FFFFFFFLL * *(_QWORD *)a1 / 0x64uLL;
    return v5 & 1;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  collectEdge(a2, *(_DWORD *)(a1 + 8), &v19);
  v8 = v19;
  v9 = v20;
  if (v20 == v19)
  {
    LOBYTE(v5) = 0;
    v8 = v20;
    if (!v20)
      return v5 & 1;
    goto LABEL_21;
  }
  v10 = 0;
  v5 = 0;
  do
  {
    v11 = v8[v10];
    if (*(_DWORD *)(v11 + 48) != 3)
    {
      v15 = (unsigned int *)v17;
      v16 = xmmword_209A57DD0;
      v18 = 1;
      TCondition::getSource(a1, v11, a3, a4, &v15);
      if (*((_QWORD *)&v16 + 1))
      {
        v12 = *(_QWORD **)(a1 + 24);
        if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
        {
          if (v18)
          {
            v22 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v22, 1uLL);
            v13 = v15;
            --*((_QWORD *)&v16 + 1);
          }
          else
          {
            v13 = v15;
            if ((_QWORD)v16)
              v15[(_QWORD)v16 - 1] = 0;
          }
        }
        else
        {
          v13 = v15;
          v15[*((_QWORD *)&v16 + 1)] = 0;
        }
        v5 |= TRegExp::match(v12, v13, 0) ^ (*(_BYTE *)(a1 + 16) != 0);
      }
      if (v18 && v15 != (unsigned int *)v17 && v15)
        MEMORY[0x20BD149A8]();
      v8 = v19;
      v9 = v20;
    }
    ++v10;
  }
  while (v10 < v9 - v8);
  if (v8)
  {
LABEL_21:
    v20 = v8;
    operator delete(v8);
  }
  return v5 & 1;
}

void sub_2099F107C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void collectEdge(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t OutEdge;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;

  switch(a2)
  {
    case 0:
      v5 = TVertex::getInEdge(*(_QWORD *)(a1 + 16));
      if (!v5)
        return;
      v6 = v5;
LABEL_4:
      collectEdge(v6, 1, a3);
      while (1)
      {
        v6 = *(_QWORD *)v6;
        if (!v6)
          return;
        if (!*(_BYTE *)(v6 + 32))
          goto LABEL_4;
      }
    case 1:
      v7 = TVertex::getInEdge(*(_QWORD *)(a1 + 16));
      if (!v7)
        return;
      v8 = v7;
      v9 = a3 + 2;
      v10 = (uint64_t *)a3[1];
LABEL_10:
      if ((unint64_t)v10 < *v9)
      {
        *v10++ = v8;
        goto LABEL_26;
      }
      v11 = ((uint64_t)v10 - *a3) >> 3;
      if (!((unint64_t)(v11 + 1) >> 61))
      {
        v12 = *v9 - *a3;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v11];
        *v16 = v8;
        v10 = v16 + 1;
        v18 = (char *)*a3;
        v17 = (char *)a3[1];
        if (v17 != (char *)*a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*a3;
        }
        *a3 = v16;
        a3[1] = v10;
        a3[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
LABEL_26:
        a3[1] = v10;
        while (1)
        {
          v8 = *(_QWORD *)v8;
          if (!v8)
            return;
          if (!*(_BYTE *)(v8 + 32))
            goto LABEL_10;
        }
      }
      goto LABEL_76;
    case 2:
      OutEdge = TVertex::getOutEdge(*(_QWORD *)(a1 + 24));
      if (!OutEdge)
        return;
      v21 = OutEdge;
      v22 = a3 + 2;
      v23 = (uint64_t *)a3[1];
LABEL_32:
      if ((unint64_t)v23 < *v22)
      {
        *v23++ = v21;
        goto LABEL_48;
      }
      v24 = ((uint64_t)v23 - *a3) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        goto LABEL_76;
      v25 = *v22 - *a3;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v27);
      else
        v28 = 0;
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v21;
      v23 = v29 + 1;
      v31 = (char *)*a3;
      v30 = (char *)a3[1];
      if (v30 != (char *)*a3)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v29 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a3;
      }
      *a3 = v29;
      a3[1] = v23;
      a3[2] = &v28[8 * v27];
      if (v30)
        operator delete(v30);
LABEL_48:
      a3[1] = v23;
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8);
        if (!v21)
          return;
        if (!*(_BYTE *)(v21 + 32))
          goto LABEL_32;
      }
    case 3:
      v33 = TVertex::getOutEdge(*(_QWORD *)(a1 + 24));
      if (!v33)
        return;
      v34 = v33;
LABEL_54:
      collectEdge(v34, 2, a3);
      while (1)
      {
        v34 = *(_QWORD *)(v34 + 8);
        if (!v34)
          return;
        if (!*(_BYTE *)(v34 + 32))
          goto LABEL_54;
      }
    case 4:
      v35 = a3[2];
      v36 = (_QWORD *)a3[1];
      if ((unint64_t)v36 >= v35)
      {
        v38 = ((uint64_t)v36 - *a3) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
LABEL_76:
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v39 = v35 - *a3;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v41);
        else
          v42 = 0;
        v43 = &v42[8 * v38];
        v44 = &v42[8 * v41];
        *(_QWORD *)v43 = a1;
        v37 = v43 + 8;
        v46 = (char *)*a3;
        v45 = (char *)a3[1];
        if (v45 != (char *)*a3)
        {
          do
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v43 - 1) = v47;
            v43 -= 8;
          }
          while (v45 != v46);
          v45 = (char *)*a3;
        }
        *a3 = v43;
        a3[1] = v37;
        a3[2] = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v36 = a1;
        v37 = v36 + 1;
      }
      a3[1] = v37;
      return;
    default:
      return;
  }
}

void TRule::TRule(TRule *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4, unint64_t a5)
{
  uint64_t i;
  TCondition *v11;
  unint64_t v12;
  TCondition **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  TCondition **v20;
  char *v21;
  char *v22;
  TCondition *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *exception;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  _QWORD *v43;
  std::string *v44;
  __int128 v45;
  uint64_t *v46;
  void *v47[2];
  uint64_t v48;
  _BYTE __p[24];
  uint64_t v50;

  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)this, 0xAuLL);
  v46 = (uint64_t *)a2;
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_209A7E780))
    {
      if (*((_QWORD *)this + 3))
      {
        loggableFileObject((uint64_t *)i);
        v28 = __p;
        if (__p[23] < 0)
          v28 = *(_BYTE **)__p;
        tknPrintf("Error: %sRedefinition\n", v24, v25, v26, v27, v28);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v47, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v48) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v47[0], (std::string::size_type)v47[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v47;
          v50 = v48;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v50 >= 0)
          v31 = &__p[8];
        else
          v31 = *(const char **)&__p[8];
        conditionalAssert(v31, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 417, v29, v30);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v50) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v48) < 0)
          operator delete(v47[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v33 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v34 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        }
        *exception = &unk_24C214BA0;
      }
      *((_QWORD *)this + 3) = buildReplaceObject((const TFileObject *)i, a3, a4);
      *((_BYTE *)this + 32) = 1;
    }
    else
    {
      v11 = (TCondition *)operator new();
      TCondition::TCondition(v11, (unsigned int **)i, a5, a3);
      v13 = (TCondition **)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((uint64_t)v13 - *(_QWORD *)this) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v16 = v12 - *(_QWORD *)this;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 16, v18);
        else
          v19 = 0;
        v20 = (TCondition **)&v19[8 * v15];
        *v20 = v11;
        v14 = v20 + 1;
        v22 = *(char **)this;
        v21 = (char *)*((_QWORD *)this + 1);
        if (v21 != *(char **)this)
        {
          do
          {
            v23 = (TCondition *)*((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *(char **)this;
        }
        *(_QWORD *)this = v20;
        *((_QWORD *)this + 1) = v14;
        *((_QWORD *)this + 2) = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      *((_QWORD *)this + 1) = v14;
    }
  }
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    loggableFileObject(v46);
    if (__p[23] >= 0)
      v39 = __p;
    else
      v39 = *(_BYTE **)__p;
    tknPrintf("Error: %sRule is missing a condition\n", v35, v36, v37, v38, v39);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(v47, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v48) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v47[0], (std::string::size_type)v47[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v47;
      v50 = v48;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v50 >= 0)
      v42 = &__p[8];
    else
      v42 = *(const char **)&__p[8];
    conditionalAssert(v42, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 440, v40, v41);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v50) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    v43 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v43 = aPpx;
    v44 = (std::string *)(v43 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v45 = *(_OWORD *)__p;
      v43[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
    }
    *v43 = &unk_24C214BA0;
  }
}

void sub_2099F1AD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,void *a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  TRule *v31;
  int v32;
  void *v33;

  if (v32 == 1)
  {
    __cxa_begin_catch(v33);
    TRule::freeMemory(v31);
    __cxa_rethrow();
  }
  JUMPOUT(0x2099F1BD8);
}

void sub_2099F1BC4()
{
  uint64_t v0;
  void *v1;
  _Unwind_Exception *v2;

  __cxa_end_catch();
  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(v2);
}

TFileObject *buildReplaceObject(const TFileObject *a1, TLexicon *a2, TAllocator *a3)
{
  const TFileObject *v6;
  TFileObject *v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *exception;
  std::string *v13;
  __int128 v14;
  void *v15[2];
  uint64_t v16;
  _BYTE __p[24];
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;

  v19 = &unk_209A7E7F0;
  v20 = xmmword_209A57DB0;
  v21 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v19, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v16) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v15;
      v18 = v16;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v18 >= 0)
      v11 = &__p[8];
    else
      v11 = *(const char **)&__p[8];
    conditionalAssert(v11, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 383, v9, v10);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v18) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v13 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    *exception = &unk_24C214BA0;
  }
  v6 = (const TFileObject *)*((_QWORD *)a1 + 3);
  if (!v6)
    return 0;
  v7 = 0;
  do
  {
    v7 = compileAlt(v6, v7, a2, a3);
    v6 = (const TFileObject *)*((_QWORD *)v6 + 2);
  }
  while (v6);
  return v7;
}

void sub_2099F1DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t *TRule::freeMemory(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;

  v2 = *this;
  v1 = this[1];
  if (v1 != *this)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TCondition::~TCondition((TCondition *)this);
        this = (uint64_t *)MEMORY[0x20BD149A8]();
        v2 = *v3;
        v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TRule::~TRule(TRule *this)
{
  void *v2;

  TRule::freeMemory((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TRule::test(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t result;

  v4 = *a1;
  if (a1[1] == *a1)
    return 1;
  v9 = 0;
  do
  {
    result = TCondition::test(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
    if ((result & 1) == 0)
      break;
    ++v9;
    v4 = *a1;
  }
  while (v9 < (a1[1] - *a1) >> 3);
  return result;
}

void TGroup::TGroup(TGroup *this, const TFileObject *a2, const TLocaleInfo **a3, uint64_t a4, TLexicon *a5, TAllocator *a6, unint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int32 *v16;
  int v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _BYTE *v24;
  int v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  _BYTE *v32;
  __int32 *v33;
  TRule *v34;
  unint64_t v35;
  TRule **v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  TRule **v45;
  char *v46;
  char *v47;
  TRule *v48;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  _QWORD *v52;
  std::string *v53;
  std::string *v54;
  _QWORD *v55;
  std::string *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  _QWORD *exception;
  std::string *v63;
  __int128 v64;
  TAllocator *v65;
  std::string v67;
  const std::string::value_type *v68;
  std::string v69;
  _BYTE __p[24];
  _QWORD v71[128];
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  std::string __sz;
  const std::string::value_type *v78;
  std::string v79;
  _BYTE v80[24];
  uint64_t v81;
  int v82;
  __int32 *v83;
  __int128 v84;
  uint64_t v85;
  __int32 *v86;
  __int128 v87;
  uint64_t v88;
  __int32 *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)this, 0xAuLL);
  v84 = xmmword_209A57D60;
  v83 = dword_209A7E7A0;
  v87 = xmmword_209A57DB0;
  v85 = -1;
  v86 = dword_209A7E7BC;
  v90 = xmmword_209A57D80;
  v88 = -1;
  v89 = dword_209A7E780;
  v91 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v83, 3uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v80, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if ((v80[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v80, *(std::string::size_type *)&v80[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v80;
      v71[0] = *(_QWORD *)&v80[16];
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v71[0] >= 0)
      v61 = &__p[8];
    else
      v61 = *(const char **)&__p[8];
    conditionalAssert(v61, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 586, v59, v60);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v71[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if ((v80[23] & 0x80000000) != 0)
      operator delete(*(void **)v80);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v63 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v64 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
    }
    *exception = &unk_24C214BA0;
  }
  v13 = *((_QWORD *)a2 + 3);
  if (v13)
  {
    v65 = a6;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v13 + 8), dword_209A7E7A0))
      {
        if (!wcscmp(*(const __int32 **)(v13 + 8), dword_209A7E7BC))
        {
          v34 = (TRule *)operator new();
          TRule::TRule(v34, (const TFileObject *)v13, a5, a6, a7);
          v36 = (TRule **)*((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          if ((unint64_t)v36 >= v35)
          {
            v40 = ((uint64_t)v36 - *(_QWORD *)this) >> 3;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v41 = v35 - *(_QWORD *)this;
            v42 = v41 >> 2;
            if (v41 >> 2 <= (unint64_t)(v40 + 1))
              v42 = v40 + 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 16, v43);
            else
              v44 = 0;
            v45 = (TRule **)&v44[8 * v40];
            *v45 = v34;
            v37 = v45 + 1;
            v47 = *(char **)this;
            v46 = (char *)*((_QWORD *)this + 1);
            if (v46 != *(char **)this)
            {
              do
              {
                v48 = (TRule *)*((_QWORD *)v46 - 1);
                v46 -= 8;
                *--v45 = v48;
              }
              while (v46 != v47);
              v46 = *(char **)this;
            }
            *(_QWORD *)this = v45;
            *((_QWORD *)this + 1) = v37;
            *((_QWORD *)this + 2) = &v44[8 * v43];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v36 = v34;
            v37 = v36 + 1;
          }
          *((_QWORD *)this + 1) = v37;
        }
        else if (!wcscmp(*(const __int32 **)(v13 + 8), dword_209A7E780))
        {
          *((_QWORD *)this + 3) = buildReplaceObject((const TFileObject *)v13, a5, a6);
          *((_BYTE *)this + 32) = 1;
        }
        goto LABEL_66;
      }
      *(int64x2_t *)&v80[8] = vdupq_n_s64(1uLL);
      *(_QWORD *)v80 = &unk_209A7E7F0;
      v81 = -1;
      if (TFileObject::verify(v13, (uint64_t)v80, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(&__sz, &byte_209A88803);
        v78 = aPpx;
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v79, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v79 = __sz;
        v78 = (const std::string::value_type *)&unk_24C214BA0;
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v79;
        else
          v51 = (std::string *)v79.__r_.__value_.__r.__words[0];
        conditionalAssert((const char *)v51, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 517, v49, v50);
        v78 = aPpx;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
        v52 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v52 = aPpx;
        v53 = (std::string *)(v52 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v57 = *(_OWORD *)__p;
          v52[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v57;
        }
        *v52 = &unk_24C214BA0;
      }
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
        break;
LABEL_66:
      v13 = *(_QWORD *)(v13 + 16);
      if (!v13)
        return;
    }
    v15 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v14, 1, 0) & 1) == 0)
      {
        v16 = *(__int32 **)(v14 + 24);
        if (*(_DWORD *)(v14 + 40) == 2)
        {
          TRegExp::add(a3, v16, a4);
          goto LABEL_15;
        }
        if (!TLexicon::checkName((uint64_t)a5, v16, 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(_BYTE *)(getPropCheckTokenExistence() + 8)
            && !TLexicon::findHeadClone((uint64_t)a5, *(__int32 **)(v14 + 24)))
          {
            loggableFileObject((uint64_t *)v14);
            v25 = v74;
            v26 = (void **)v73;
            loggableUnicode(*(unsigned int **)(v14 + 24), __p);
            v31 = &v73;
            if (v25 < 0)
              v31 = v26;
            v32 = __p;
            if (__p[23] < 0)
              v32 = *(_BYTE **)__p;
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v27, v28, v29, v30, v31, v32);
            a6 = v65;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (v74 < 0)
              operator delete(v73);
          }
          *(_QWORD *)__p = v71;
          *(_OWORD *)&__p[8] = xmmword_209A57DD0;
          v72 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v14 + 24), (uint64_t)__p, 0, 3);
          if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
          {
            if (v72)
            {
              v82 = 0;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], &v82, 1uLL);
              v33 = *(__int32 **)__p;
              --*(_QWORD *)&__p[16];
            }
            else
            {
              v33 = *(__int32 **)__p;
              if (*(_QWORD *)&__p[8])
                *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
            }
          }
          else
          {
            v33 = *(__int32 **)__p;
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
          }
          TRegExp::add(a3, v33, a4);
          if (v72 && *(_QWORD **)__p != v71 && *(_QWORD *)__p)
            MEMORY[0x20BD149A8]();
          goto LABEL_15;
        }
        loggableFileObject((uint64_t *)v14);
        v17 = v76;
        v18 = (void **)v75;
        loggableUnicode(*(unsigned int **)(v14 + 24), __p);
        v23 = &v75;
        if (v17 < 0)
          v23 = v18;
        v24 = __p;
        if (__p[23] < 0)
          v24 = *(_BYTE **)__p;
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v19, v20, v21, v22, v23, v24);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v76 < 0)
          operator delete(v75);
      }
      v15 = 1;
LABEL_15:
      v14 = *(_QWORD *)(v14 + 16);
      if (!v14)
      {
        if ((v15 & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v67, &byte_209A88803);
          v68 = aPpx;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v69, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
          else
            v69 = v67;
          v68 = (const std::string::value_type *)&unk_24C214BA0;
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v69;
          else
            v54 = (std::string *)v69.__r_.__value_.__r.__words[0];
          conditionalAssert((const char *)v54, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 564, v38, v39);
          v68 = aPpx;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          v55 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *v55 = aPpx;
          v56 = (std::string *)(v55 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            v58 = *(_OWORD *)__p;
            v55[3] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v58;
          }
          *v55 = &unk_24C214BA0;
        }
        goto LABEL_66;
      }
    }
  }
}

void sub_2099F2B80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,void *a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  TGroup *v43;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TGroup::freeMemory(v43);
    __cxa_rethrow();
  }
  JUMPOUT(0x2099F2C98);
}

void sub_2099F2C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_2099F2C90()
{
  __cxa_end_catch();
  JUMPOUT(0x2099F2C98);
}

uint64_t *TGroup::freeMemory(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;

  v2 = *this;
  v1 = this[1];
  if (v1 != *this)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TRule::~TRule((TRule *)this);
        this = (uint64_t *)MEMORY[0x20BD149A8]();
        v2 = *v3;
        v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TGroup::~TGroup(TGroup *this)
{
  void *v2;

  TGroup::freeMemory((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TGroup::munge(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;

  v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_5:
    v10 = (uint64_t)(a1 + 3);
  }
  else
  {
    v9 = 0;
    while ((TRule::test(*(uint64_t **)(v5 + 8 * v9), a2, a3, a4) & 1) == 0)
    {
      ++v9;
      v5 = *a1;
      if (v9 >= (a1[1] - *a1) >> 3)
        goto LABEL_5;
    }
    v10 = *(_QWORD *)(*a1 + 8 * v9) + 24;
  }
  return *(_QWORD *)v10;
}

void TMungeMapManager::TMungeMapManager(TMungeMapManager *this, TInputStream *a2, TLexicon *a3)
{
  _QWORD *v6;
  char **v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  TGroup *v12;
  unint64_t v13;
  TGroup **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  TGroup **v21;
  char *v22;
  char *v23;
  TGroup *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *exception;
  std::string *v31;
  const char *v32;
  _QWORD *v33;
  std::string *v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;
  _BYTE v41[24];
  uint64_t v42;
  _BYTE __p[24];
  uint64_t v44;

  TAllocator::TAllocator(this, 2048);
  v6[5] = 0;
  v6[6] = 0;
  v7 = (char **)(v6 + 5);
  v6[7] = 0;
  v6[8] = a3;
  v8 = (_QWORD *)operator new();
  TRegExp::TRegExp(v8, *((_QWORD *)this + 8) + 240);
  *((_QWORD *)this + 9) = v8;
  if (TInputStream::verifyHeader((uint64_t)a2, "TknMunge", (uint64_t)&pTknMungeVersion, 2))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if ((v41[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v41, *(std::string::size_type *)&v41[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v41;
      v44 = *(_QWORD *)&v41[16];
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v44 >= 0)
      v29 = &__p[8];
    else
      v29 = *(const char **)&__p[8];
    conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 669, v25, v26);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v44) < 0)
      operator delete(*(void **)&__p[8]);
    if ((v41[23] & 0x80000000) != 0)
      operator delete(*(void **)v41);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v31 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v35 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v35;
    }
    *exception = &unk_24C214BA0;
  }
  v9 = *((_QWORD *)a2 + 12);
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
  v10 = *(_QWORD *)__p;
  *(_QWORD *)v41 = dword_209A7E7D0;
  *(_OWORD *)&v41[8] = xmmword_209A57DB0;
  v42 = -1;
  if (TFileObject::verify(*(uint64_t *)__p, (uint64_t)v41, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v37, &byte_209A88803);
    *(_QWORD *)v39 = aPpx;
    if (SHIBYTE(v38) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v39[8], (const std::string::value_type *)v37[0], (std::string::size_type)v37[1]);
    }
    else
    {
      *(_OWORD *)&v39[8] = *(_OWORD *)v37;
      v40 = v38;
    }
    *(_QWORD *)v39 = &unk_24C214BA0;
    if (v40 >= 0)
      v32 = &v39[8];
    else
      v32 = *(const char **)&v39[8];
    conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 686, v27, v28);
    *(_QWORD *)v39 = aPpx;
    if (SHIBYTE(v40) < 0)
      operator delete(*(void **)&v39[8]);
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    v33 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v39, &byte_209A88803);
    *v33 = aPpx;
    v34 = (std::string *)(v33 + 1);
    if ((v39[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v39, *(std::string::size_type *)&v39[8]);
    }
    else
    {
      v36 = *(_OWORD *)v39;
      v33[3] = *(_QWORD *)&v39[16];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
    }
    *v33 = &unk_24C214BA0;
  }
  for (i = *(_QWORD *)(v10 + 24); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_209A7E7D0))
    {
      v12 = (TGroup *)operator new();
      TGroup::TGroup(v12, (const TFileObject *)i, *((const TLocaleInfo ***)this + 9), (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3, *((TLexicon **)this + 8), this, v9);
      v14 = (TGroup **)*((_QWORD *)this + 6);
      v13 = *((_QWORD *)this + 7);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - *v7) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*v7;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 56, v19);
        else
          v20 = 0;
        v21 = (TGroup **)&v20[8 * v16];
        *v21 = v12;
        v15 = v21 + 1;
        v23 = (char *)*((_QWORD *)this + 5);
        v22 = (char *)*((_QWORD *)this + 6);
        if (v22 != v23)
        {
          do
          {
            v24 = (TGroup *)*((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = *v7;
        }
        *((_QWORD *)this + 5) = v21;
        *((_QWORD *)this + 6) = v15;
        *((_QWORD *)this + 7) = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v12;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 6) = v15;
    }
  }
  TRegExp::doneAdding(*((TRegExp **)this + 9));
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
}

void sub_2099F33E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v43);
  JUMPOUT(0x2099F350CLL);
}

void sub_2099F3504()
{
  JUMPOUT(0x2099F350CLL);
}

void sub_2099F352C(_Unwind_Exception *a1)
{
  TAllocator *v1;
  void **v2;
  uint64_t v3;
  void *v5;

  MEMORY[0x20BD149A8](v3, 0x60C40CE5A77A8);
  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 6) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void sub_2099F3554()
{
  __cxa_end_catch();
  JUMPOUT(0x2099F355CLL);
}

TRegExp *TMungeMapManager::freeMemory(TMungeMapManager *this)
{
  TRegExp *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = (TRegExp *)*((_QWORD *)this + 9);
  if (result)
  {
    TRegExp::~TRegExp(result);
    result = (TRegExp *)MEMORY[0x20BD149A8]();
  }
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      result = *(TRegExp **)(v4 + 8 * v5);
      if (result)
      {
        TGroup::~TGroup(result);
        result = (TRegExp *)MEMORY[0x20BD149A8]();
        v4 = *((_QWORD *)this + 5);
        v3 = *((_QWORD *)this + 6);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  return result;
}

void TMungeMapManager::~TMungeMapManager(TMungeMapManager *this)
{
  void *v2;

  TMungeMapManager::freeMemory(this);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  TAllocator::clear(this);
}

void TMungeMapManager::mungeWithGroups(uint64_t a1, TVertex *this, TGraph *a3, int *a4, int *a5, TSegmenter *a6, unint64_t a7, unint64_t a8)
{
  char *v13;
  uint64_t PreviousSegment;
  uint64_t OutEdge;
  uint64_t (*v17)(__int128 *, __int128 *);
  unint64_t v18;
  unsigned int v20;
  BOOL v21;
  int v22;
  _QWORD *v24;
  unsigned int *v25;
  __n128 v26;
  char *v27;
  uint64_t Segment;
  _QWORD *v29;
  unint64_t v30;
  uint64_t *v31;
  int *v32;
  int *v33;
  char v34;
  const __int32 **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v41)(__int128 *, __int128 *);
  TVertex *v42;
  BOOL (*v45)(uint64_t, uint64_t);
  __int128 v46;
  uint64_t v47;
  char v48;
  unsigned int *v49;
  __int128 v50;
  _BYTE v51[809];
  char v52;
  void *__p;
  __int128 *v54;
  uint64_t v55;
  int *v56;
  __int128 v57;
  _BYTE v58[1024];
  char v59;
  int v60[3];

  v56 = (int *)v58;
  v57 = xmmword_209A57DD0;
  v59 = 1;
  v13 = (char *)*((_QWORD *)this + 2);
  if (v13)
  {
    PreviousSegment = TSegmenter::getPreviousSegment(a6, v13);
    if (PreviousSegment)
    {
      if (*(_DWORD *)(PreviousSegment + 24) == 5)
        goto LABEL_6;
      a4 = *(int **)PreviousSegment;
    }
    TBuffer<wchar_t>::assign((uint64_t)&v56, a4);
  }
LABEL_6:
  v54 = 0;
  __p = 0;
  v55 = 0;
  v49 = (unsigned int *)v51;
  v50 = xmmword_209A57DD0;
  v52 = 1;
  OutEdge = TVertex::getOutEdge((uint64_t)this);
  if (OutEdge)
  {
    v17 = (uint64_t (*)(__int128 *, __int128 *))&v47;
LABEL_8:
    v18 = *(_QWORD *)(OutEdge + 40);
    if (v18 >= a7 && v18 < a8)
    {
      v20 = *(_DWORD *)(OutEdge + 48);
      v21 = v20 > 5;
      v22 = (1 << v20) & 0x2C;
      if (v21 || v22 == 0)
      {
        TWord::getTokenName(*(__int32 ***)(OutEdge + 56), (uint64_t)&v49);
        std::vector<TRegExpMatch>::resize((uint64_t)&__p, 0);
        v24 = *(_QWORD **)(a1 + 72);
        if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
        {
          if (v52)
          {
            LODWORD(v45) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)&v45, 1uLL);
            v25 = v49;
            --*((_QWORD *)&v50 + 1);
          }
          else
          {
            v25 = v49;
            if ((_QWORD)v50)
              v49[(_QWORD)v50 - 1] = 0;
          }
        }
        else
        {
          v25 = v49;
          v49[*((_QWORD *)&v50 + 1)] = 0;
        }
        TRegExp::match(v24, v25, 0, (uint64_t)&__p);
        if (__p != v54)
        {
          v45 = sortMatch;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>((uint64_t)__p, v54, (uint64_t (**)(__int128 *, __int128 *))&v45, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3)), 1, v26);
          v45 = (BOOL (*)(uint64_t, uint64_t))v17;
          v46 = xmmword_209A57DD0;
          v48 = 1;
          v27 = *(char **)(*(_QWORD *)(OutEdge + 24) + 24);
          v41 = v17;
          if (v27)
          {
            if (*v27)
            {
              Segment = TSegmenter::getSegment(a6, v27);
              if (*(_DWORD *)(Segment + 24) != 5)
                TBuffer<wchar_t>::assign((uint64_t)&v45, *(int **)Segment);
            }
            else
            {
              TBuffer<wchar_t>::assign((uint64_t)&v45, a5);
            }
          }
          v29 = __p;
          if (v54 == __p)
            goto LABEL_68;
          v30 = 0;
          v42 = *(TVertex **)(OutEdge + 24);
          while (1)
          {
            v31 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 8 * v29[3 * v30 + 2]);
            if (*((_QWORD *)&v57 + 1) >= (unint64_t)v57)
            {
              if (v59)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v56, *((unint64_t *)&v57 + 1), v60, 1uLL);
                v32 = v56;
                --*((_QWORD *)&v57 + 1);
              }
              else
              {
                v32 = v56;
                if ((_QWORD)v57)
                  v56[(_QWORD)v57 - 1] = 0;
              }
            }
            else
            {
              v32 = v56;
              v56[*((_QWORD *)&v57 + 1)] = 0;
            }
            if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v60, 1uLL);
                v33 = (int *)v45;
                --*((_QWORD *)&v46 + 1);
              }
              else
              {
                v33 = (int *)v45;
                if ((_QWORD)v46)
                  *((_DWORD *)v45 + v46 - 1) = 0;
              }
            }
            else
            {
              v33 = (int *)v45;
              *((_DWORD *)v45 + *((_QWORD *)&v46 + 1)) = 0;
            }
            v35 = (const __int32 **)TGroup::munge(v31, OutEdge, v32, v33);
            if (v35)
              break;
            if ((v34 & 1) != 0)
            {
              v36 = TVertex::getOutEdge((uint64_t)this);
              if (v36)
              {
                v37 = 0;
LABEL_49:
                if (*(_DWORD *)(v36 + 48) != 5)
                  ++v37;
                while (1)
                {
                  v36 = *(_QWORD *)(v36 + 8);
                  if (!v36)
                    break;
                  if (!*(_BYTE *)(v36 + 32))
                    goto LABEL_49;
                }
                if (v37 >= 2)
                {
                  v38 = TVertex::getInEdge((uint64_t)v42);
                  if (v38)
                  {
                    v39 = 0;
LABEL_57:
                    if (*(_DWORD *)(v38 + 48) != 5)
                      ++v39;
                    while (1)
                    {
                      v38 = *(_QWORD *)v38;
                      if (!v38)
                        break;
                      if (!*(_BYTE *)(v38 + 32))
                        goto LABEL_57;
                    }
                    if (v39 >= 2)
                    {
                      TGraph::deleteEdge((uint64_t)a3, OutEdge);
LABEL_68:
                      v17 = v41;
                      if (v48 && (char *)v45 != (char *)v41 && v45)
                        MEMORY[0x20BD149A8]();
                      goto LABEL_16;
                    }
                  }
                }
              }
            }
            ++v30;
            v29 = __p;
            if (v30 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3))
              goto LABEL_68;
          }
          if ((v34 & 1) != 0)
            TGraph::deleteEdge((uint64_t)a3, OutEdge);
          addSequence(v35, this, v42, a3, *(TLexicon **)(a1 + 64), 0, 0, 0);
          goto LABEL_68;
        }
      }
    }
LABEL_16:
    while (1)
    {
      OutEdge = *(_QWORD *)(OutEdge + 8);
      if (!OutEdge)
        break;
      if (!*(_BYTE *)(OutEdge + 32))
        goto LABEL_8;
    }
  }
  if (v52)
  {
    if (v49 != (unsigned int *)v51 && v49 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (__p)
  {
    v54 = (__int128 *)__p;
    operator delete(__p);
  }
  if (v59 && v56 != (int *)v58)
  {
    if (v56)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2099F3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  unint64_t v23;

  if (LOBYTE(STACK[0x460]) && a18 != a10 && a18)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x880]))
  {
    v21 = STACK[0x468];
    if (STACK[0x468] != v19)
    {
      if (v21)
        MEMORY[0x20BD149A8](v21, 0x1000C4052888210);
    }
  }
  v22 = (void *)STACK[0x888];
  if (STACK[0x888])
  {
    STACK[0x890] = (unint64_t)v22;
    operator delete(v22);
  }
  if (LOBYTE(STACK[0xCB8]))
  {
    v23 = STACK[0x8A0];
    if (STACK[0x8A0] != v18)
    {
      if (v23)
        MEMORY[0x20BD149A8](v23, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sortMatch(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

void TMungeMapManager::munge(uint64_t a1, TGraph *a2, int *a3, int *a4, TSegmenter *a5, unint64_t a6)
{
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  TVertex *v17;

  if (*a3)
    v6 = a3;
  else
    v6 = (int *)&unk_209A7E7E8;
  if (*a4)
    v7 = a4;
  else
    v7 = (int *)&unk_209A7E7E8;
  v8 = *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10);
  if (v8)
  {
    v13 = 0;
    v14 = (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3;
    v15 = v8 >> 3;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    do
    {
      v17 = *(TVertex **)(*((_QWORD *)a2 + 10) + 8 * v13);
      if (!*((_BYTE *)v17 + 32))
        TMungeMapManager::mungeWithGroups(a1, v17, a2, v6, v7, a5, a6, v14);
      ++v13;
    }
    while (v16 != v13);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

void TGrammarManager::TGrammarManager(TGrammarManager *this, TInputStream *a2, const TTagManager *a3, TLexicon *a4, TItnParamManager *a5)
{
  char *v10;
  TGrammarCompiler *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Tag;
  int *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  const __int32 *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  _QWORD *exception;
  std::string *v51;
  __int128 v52;
  TInputStream *v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  _BYTE __p[24];
  _QWORD v58[225];
  char v59;
  _BYTE __s[24];
  _BYTE v61[1024];
  char v62;

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = &unk_24C218D48;
  *((_QWORD *)this + 2) = &unk_24C218D48;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 8) = -1;
  v10 = (char *)this + 64;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 4) = a4;
  v11 = (TGrammarCompiler *)operator new();
  TGrammarCompiler::TGrammarCompiler(v11, (const TLocaleInfo *)(*((_QWORD *)this + 4) + 240));
  *((_QWORD *)this + 5) = v11;
  v12 = operator new();
  TParser::TParser(v12, *(_QWORD *)(*((_QWORD *)this + 5) + 56));
  *((_QWORD *)this + 9) = 4;
  *((_QWORD *)this + 6) = v12;
  if (!*((_BYTE *)a2 + 8))
  {
    TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 5));
    return;
  }
  v53 = a2;
  if (TInputStream::verifyHeader((uint64_t)a2, "ItnGrammar", (uint64_t)pItnGrammarVersion, 4))
  {
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)__s;
      v58[0] = *(_QWORD *)&__s[16];
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v58[0] >= 0)
      v49 = &__p[8];
    else
      v49 = *(const char **)&__p[8];
    conditionalAssert(v49, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/grammarmgr.cpp", 322, v47, v48);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v58[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if ((__s[23] & 0x80000000) != 0)
      operator delete(*(void **)__s);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v51 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v52 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
    }
    *exception = &unk_24C214BA0;
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 12);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E800, (uint64_t)callBackGetLength, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E828, (uint64_t)callBackFind, 2, 2, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E83C, (uint64_t)callBackCopy, 2, 3, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E850, (uint64_t)callBackFormat, 1, -1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E86C, (uint64_t)callBackThousandSeparator, 3, 4, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E8C0, (uint64_t)callBackDigitToRoman, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E8F4, (uint64_t)callBackRomanToDigit, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E928, (uint64_t)callBackToken, 1, 1, (uint64_t)a4, (uint64_t)this + 72);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E940, (uint64_t)callBackGetCategoryTag, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E95C, (uint64_t)callBackGetWrittenForm, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E98C, (uint64_t)callBackAllCaps, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E9AC, (uint64_t)callBackNoCaps, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E9C8, (uint64_t)callBackCapitalize, 1, 1, (uint64_t)a4, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 5), (uint64_t)&unk_209A7E9D8, (uint64_t)callBackRemoveDiacritics, 1, 1, (uint64_t)a4, 0);
  *(_QWORD *)__s = v61;
  *(_OWORD *)&__s[8] = xmmword_209A57DD0;
  v62 = 1;
  *(_QWORD *)__p = v58;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v59 = 1;
  (*(void (**)(const TTagManager *, _BYTE *))(*(_QWORD *)a3 + 24))(a3, __p);
  if (*(_QWORD *)&__p[16])
  {
    v13 = 0;
    do
    {
      Tag = TTagManager::getTag((uint64_t)a3, *(_QWORD *)(*(_QWORD *)__p + 8 * v13));
      TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A7EA1C);
      v15 = (int *)Tag;
      if (*(char *)(Tag + 23) < 0)
        v15 = *(int **)Tag;
      v16 = 0;
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v15, v16 - 1);
      v18 = (_QWORD *)*((_QWORD *)this + 5);
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v62)
        {
          LODWORD(v54[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v54, 1uLL);
          v19 = *(_QWORD *)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v19 = *(_QWORD *)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v19 = *(_QWORD *)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      TGrammarCompiler::registerFunction(v18, v19, (uint64_t)callBackTag, 1, 1, Tag, 0);
      ++v13;
    }
    while (v13 < *(_QWORD *)&__p[16]);
  }
  TParamManager::begin((uint64_t)a5, v54);
  while (1)
  {
    TParamManager::end((uint64_t)a5, &v56);
    v20 = (_QWORD *)v54[0];
    if (v54[0] == v56)
      break;
    v21 = *(_QWORD *)(v54[0] + 40);
    if (v21 && (v22 = v21 - 1, v23 = *((_QWORD *)a5 + 3), v22 < (*((_QWORD *)a5 + 4) - v23) >> 3))
      v24 = *(_QWORD *)(v23 + 8 * v22);
    else
      v24 = 0;
    if (*(char *)(v24 + 111) < 0)
    {
      if (*(_QWORD *)(v24 + 96))
        goto LABEL_37;
    }
    else if (*(_BYTE *)(v24 + 111))
    {
      goto LABEL_37;
    }
    TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A7EA2C);
    v25 = (int *)(v24 + 16);
    if (*(char *)(v24 + 39) < 0)
      v25 = *(int **)v25;
    v26 = 0;
    while (v25[v26++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v25, v26 - 1);
    v28 = (_QWORD *)*((_QWORD *)this + 5);
    if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
    {
      if (v62)
      {
        LODWORD(v56) = 0;
        TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)&v56, 1uLL);
        v29 = *(_QWORD *)__s;
        --*(_QWORD *)&__s[16];
      }
      else
      {
        v29 = *(_QWORD *)__s;
        if (*(_QWORD *)&__s[8])
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
      }
    }
    else
    {
      v29 = *(_QWORD *)__s;
      *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
    }
    TGrammarCompiler::registerFunction(v28, v29, (uint64_t)callBackParam, 0, 0, v24, (uint64_t)v10);
    v20 = (_QWORD *)v54[0];
LABEL_37:
    v30 = (_QWORD *)v20[1];
    if (v30)
    {
      do
      {
        v31 = v30;
        v30 = (_QWORD *)*v30;
      }
      while (v30);
    }
    else
    {
      do
      {
        v31 = (_QWORD *)v20[2];
        v32 = *v31 == (_QWORD)v20;
        v20 = v31;
      }
      while (!v32);
    }
    v54[0] = v31;
  }
  v33 = *((_QWORD *)a4 + 42);
  TParamManager::begin(v33, v54);
  while (1)
  {
    TParamManager::end(v33, &v56);
    if (v54[0] == v56)
      break;
    v34 = *(_QWORD *)(v54[0] + 40);
    if (v34 && (v35 = v34 - 1, v36 = *(_QWORD *)(v33 + 24), v35 < (*(_QWORD *)(v33 + 32) - v36) >> 3))
      v37 = *(_QWORD *)(v36 + 8 * v35);
    else
      v37 = 0;
    v38 = (int *)(v37 + 16);
    v39 = (const __int32 *)(v37 + 16);
    if (*(char *)(v37 + 39) < 0)
      v39 = *(const __int32 **)v38;
    TParamManager::find((uint64_t)a5, v39, &v56);
    TParamManager::end((uint64_t)a5, &v55);
    if (v56 == v55)
    {
      TBuffer<wchar_t>::assign((uint64_t)__s, dword_209A7EA2C);
      if (*(char *)(v37 + 39) < 0)
        v38 = *(int **)v38;
      v40 = 0;
      while (v38[v40++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v38, v40 - 1);
      v42 = (_QWORD *)*((_QWORD *)this + 5);
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v62)
        {
          LODWORD(v56) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)&v56, 1uLL);
          v43 = *(_QWORD *)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v43 = *(_QWORD *)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v43 = *(_QWORD *)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      TGrammarCompiler::registerFunction(v42, v43, (uint64_t)callBackParam, 0, 0, v37, 0);
    }
    v44 = (_QWORD *)v54[0];
    v45 = *(_QWORD **)(v54[0] + 8);
    if (v45)
    {
      do
      {
        v46 = v45;
        v45 = (_QWORD *)*v45;
      }
      while (v45);
    }
    else
    {
      do
      {
        v46 = (_QWORD *)v44[2];
        v32 = *v46 == (_QWORD)v44;
        v44 = v46;
      }
      while (!v32);
    }
    v54[0] = v46;
  }
  v54[0] = &unk_24C2149D0;
  v54[1] = a4;
  TGrammarCompiler::registerRules(*((_QWORD *)this + 5), v53, (uint64_t)v54);
  TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 5));
  if (v59 && *(_QWORD **)__p != v58 && *(_QWORD *)__p)
    MEMORY[0x20BD149A8]();
  if (v62 && *(_BYTE **)__s != v61 && *(_QWORD *)__s)
    MEMORY[0x20BD149A8]();
}

void sub_2099F4BCC()
{
  __break(1u);
}

void sub_2099F4D48()
{
  __cxa_end_catch();
  JUMPOUT(0x2099F4D50);
}

void sub_2099F51D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackToken(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, TAllocator *a5)
{
  __int32 *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void *__p;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  int v27;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v10 = *(__int32 **)(a1 + 8);
  v11 = wcslen(v10);
  if (v11)
  {
    v12 = v11;
    if (TLexicon::checkName(a3, v10, *a4 > 3uLL, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
      if (v24 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      tknPrintf("Warning: $Token('%s') : The formatter grammar constructed an invalid token.\n", v13, v14, v15, v16, p_p);
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
      return 0;
    }
    if ((v12 + 9) >> 62)
      v18 = -1;
    else
      v18 = 4 * (v12 + 9);
    __p = TAllocator::allocate(a5, v18);
    v23 = v12 + 9;
    v24 = 0;
    v26 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&__p, dword_209A7EA94);
    v19 = 0;
    v20 = *(int **)(a1 + 8);
    while (v20[v19++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, v24, v20, v19 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, v24, (int *)&unk_209A7EAB4, 1uLL);
    if (v24 < v23)
    {
      *((_DWORD *)__p + v24) = 0;
LABEL_23:
      if (v26 && __p != &v25 && __p)
        MEMORY[0x20BD149A8]();
      return 1;
    }
    if (v26)
    {
      v27 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v24--, &v27, 1uLL);
      goto LABEL_23;
    }
    if (v23)
    {
      *((_DWORD *)__p + v23 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_2099F5464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2099F5674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    callBackSync(va);
  _Unwind_Resume(a1);
}

void TWideChartSeeder::makeTerminals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, TAllocator *a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int32 *v17;
  unint64_t v18;
  uint64_t v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t v22;
  __int32 *v23;
  __int32 *v24;
  _QWORD *ClientData;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int32 *v50;
  __int128 v51;
  _BYTE v52[785];
  char v53;
  __int32 *v54;
  __int128 v55;
  _BYTE v56[1024];
  char v57;
  __int128 i;
  __int128 v59;
  uint64_t v60;
  __int32 *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16) + a2;
  if (v6 < *(_QWORD *)(a1 + 24))
  {
    v8 = **(_QWORD **)(a1 + 8);
    if (v6 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v8) >> 4)
      && (!a2 || !*(_BYTE *)(v8 + 112 * v6 + 32)))
    {
      v54 = (__int32 *)v56;
      v55 = xmmword_209A57DD0;
      v57 = 1;
      TWord::getTokenName(*(__int32 ***)(v8 + 112 * v6 + 16), (uint64_t)&v54);
      v15 = *(char **)a3;
      v14 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a1 + 32);
      if (*((_QWORD *)&v55 + 1) >= (unint64_t)v55)
      {
        if (v57)
        {
          LODWORD(v50) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
          v17 = v54;
          --*((_QWORD *)&v55 + 1);
        }
        else
        {
          v17 = v54;
          if ((_QWORD)v55)
            v54[(_QWORD)v55 - 1] = 0;
        }
      }
      else
      {
        v17 = v54;
        v54[*((_QWORD *)&v55 + 1)] = 0;
      }
      TGrammar::getTerminals(v16, (unsigned int *)v17, (char **)a3);
      v18 = (v14 - (uint64_t)v15) >> 3;
      if (v18 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
      {
        if ((unint64_t)(*((_QWORD *)&v55 + 1) + 1) >> 62)
          v19 = -1;
        else
          v19 = 4 * (*((_QWORD *)&v55 + 1) + 1);
        v20 = (__int32 *)TAllocator::allocate(a6, v19);
        if (*((_QWORD *)&v55 + 1) >= (unint64_t)v55)
        {
          if (v57)
          {
            LODWORD(v50) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
            v21 = v54;
            --*((_QWORD *)&v55 + 1);
          }
          else
          {
            v21 = v54;
            if ((_QWORD)v55)
              v54[(_QWORD)v55 - 1] = 0;
          }
        }
        else
        {
          v21 = v54;
          v54[*((_QWORD *)&v55 + 1)] = 0;
        }
        wcscpy(v20, v21);
        v50 = (__int32 *)v52;
        v51 = xmmword_209A57DD0;
        v53 = 1;
        TWord::getOptionalTagBits(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 112 * (*(_QWORD *)(a1 + 16) + a2) + 16), (uint64_t)&v50);
        if ((unint64_t)(*((_QWORD *)&v51 + 1) + 1) >> 62)
          v22 = -1;
        else
          v22 = 4 * (*((_QWORD *)&v51 + 1) + 1);
        v23 = (__int32 *)TAllocator::allocate(a6, v22);
        if (*((_QWORD *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v53)
          {
            LODWORD(v59) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), (int *)&v59, 1uLL);
            v24 = v50;
            --*((_QWORD *)&v51 + 1);
          }
          else
          {
            v24 = v50;
            if ((_QWORD)v51)
              v50[(_QWORD)v51 - 1] = 0;
          }
        }
        else
        {
          v24 = v50;
          v50[*((_QWORD *)&v51 + 1)] = 0;
        }
        wcscpy(v23, v24);
        *(_QWORD *)&v59 = 1;
        *((_QWORD *)&v59 + 1) = v20;
        v60 = 1;
        v61 = v23;
        for (i = xmmword_24C2208B8; v18 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3; ++v18)
        {
          ClientData = TGrammarCompiler::makeClientData((uint64_t *)&i, &v59, 2, a6);
          v26 = ClientData;
          v28 = a5[1];
          v27 = (unint64_t)a5[2];
          if ((unint64_t)v28 >= v27)
          {
            v30 = ((char *)v28 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v31 = v27 - (_QWORD)*a5;
            v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1))
              v32 = v30 + 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v33);
            else
              v34 = 0;
            v35 = &v34[8 * v30];
            *(_QWORD *)v35 = v26;
            v29 = v35 + 8;
            v37 = (char *)*a5;
            v36 = (char *)a5[1];
            if (v36 != *a5)
            {
              do
              {
                v38 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v35 - 1) = v38;
                v35 -= 8;
              }
              while (v36 != v37);
              v36 = (char *)*a5;
            }
            *a5 = v35;
            a5[1] = v29;
            a5[2] = &v34[8 * v33];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v28 = ClientData;
            v29 = v28 + 1;
          }
          a5[1] = v29;
          v40 = *(_QWORD **)(a4 + 8);
          v39 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v40 >= v39)
          {
            v42 = *(_QWORD **)a4;
            v43 = ((uint64_t)v40 - *(_QWORD *)a4) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a4 + 16, v46);
              v42 = *(_QWORD **)a4;
              v40 = *(_QWORD **)(a4 + 8);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(_QWORD *)v48 = 1;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              v49 = *--v40;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(_QWORD *)a4 = v48;
            *(_QWORD *)(a4 + 8) = v41;
            *(_QWORD *)(a4 + 16) = &v47[8 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v40 = 1;
            v41 = v40 + 1;
          }
          *(_QWORD *)(a4 + 8) = v41;
        }
        if (v53 && v50 != (__int32 *)v52 && v50)
          MEMORY[0x20BD149A8]();
      }
      if (v57 && v54 != (__int32 *)v56)
      {
        if (v54)
          MEMORY[0x20BD149A8]();
      }
    }
  }
}

void sub_2099F5BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v17;

  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a10 && a15 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x868]))
  {
    v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17)
        MEMORY[0x20BD149A8](v17, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager::getLMScore(uint64_t a1, __int32 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  TWord *HeadClone;
  uint64_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int *v31;
  int v32;
  __int32 *v36;
  __int128 v37;
  _BYTE v38[1024];
  char v39;
  int v40[50];
  uint64_t WordSpec;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  if (a4)
  {
    v10 = a4 - 1;
    if (a4 == 1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16)) == -1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
    {
      if (TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
      {
        v9 = 0;
      }
      else
      {
        WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
        v42 = v13;
        v9 = 1;
      }
    }
    else
    {
      WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16));
      v42 = v11;
      v43 = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
      v44 = v12;
      v9 = 2;
    }
  }
  v36 = (__int32 *)v38;
  v37 = xmmword_209A57DD0;
  v39 = 1;
  if (*a2)
  {
    v14 = &WordSpec + 2 * v9 + 1;
    while (!wcsncmp(a2, dword_209A7EA94, 7uLL))
    {
      v15 = a2 + 7;
      v16 = wcsstr(a2 + 7, (const __int32 *)&unk_209A7EAB4);
      TBuffer<wchar_t>::resize((uint64_t)&v36, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v36, 0, v15, v16 - v15);
      v17 = *(_QWORD *)(a1 + 32);
      if (*((_QWORD *)&v37 + 1) >= (unint64_t)v37)
      {
        if (v39)
        {
          v40[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v40, 1uLL);
          v18 = v36;
          --*((_QWORD *)&v37 + 1);
        }
        else
        {
          v18 = v36;
          if ((_QWORD)v37)
            v36[(_QWORD)v37 - 1] = 0;
        }
      }
      else
      {
        v18 = v36;
        v36[*((_QWORD *)&v37 + 1)] = 0;
      }
      HeadClone = (TWord *)TLexicon::findHeadClone(v17, v18);
      if (!HeadClone)
        break;
      ++v9;
      *(v14 - 1) = TWord::getWordSpec(HeadClone);
      *v14 = v20;
      v21 = v16[1];
      a2 = v16 + 1;
      v14 += 2;
      if (!v21)
        goto LABEL_20;
    }
    v30 = 0;
  }
  else
  {
LABEL_20:
    v22 = a5 + a4;
    v23 = *a3;
    if (a5 + a4 < (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)))
    {
      v24 = 112 * v22 + 16;
      v25 = &WordSpec + 2 * v9 + 1;
      v26 = v22 + 1;
      v27 = 1;
      do
      {
        if (TWord::getWordSpec(*(TWord **)(v23 + v24)) == -1)
          break;
        *(v25 - 1) = TWord::getWordSpec(*(TWord **)(*a3 + v24));
        *v25 = v28;
        v23 = *a3;
        v29 = (v26 < 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)) & v27;
        ++v9;
        v24 += 112;
        v25 += 2;
        ++v26;
        v27 = 0;
      }
      while ((v29 & 1) != 0);
    }
    SDLm_LmScore(0, 0, 0, 0, 0, &WordSpec, v9, (uint64_t)v40, v9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    v30 = 0;
    if (v9)
    {
      v31 = v40;
      do
      {
        v32 = *v31++;
        v30 = (v32 + v30);
        --v9;
      }
      while (v9);
    }
  }
  if (v39)
  {
    if (v36 != (__int32 *)v38 && v36 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v30;
}

void sub_2099F5FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (LOBYTE(STACK[0x470]))
  {
    if (a20 != v20 && a20 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TGrammarManager::search(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  TParam *v10;
  uint64_t ActiveConfigHandle;
  char v12;
  _BYTE *v13;
  TParam *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *AllProductions;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  unint64_t v26;
  __int32 *v27;
  unsigned __int8 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *p_p;
  double v35;
  __int32 *v36;
  unint64_t v37;
  unint64_t AttributeValue;
  unsigned int *v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned __int8 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned __int8 v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int LMScore;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  TLocaleInfo *v86;
  TLocaleInfo *v87;
  TLocaleInfo *v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  __int128 *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v107;
  int v109;
  void *v110[2];
  char v111;
  void *__p;
  uint64_t v113;
  char v114;
  void *v115;
  char v116;
  _BYTE v117[159];
  BOOL v118;
  _BYTE v119[40];
  _QWORD v120[6];

  v8 = (uint64_t)a1;
  a1[8] = a5;
  v9 = *(_QWORD *)(a1[5] + 56);
  v120[0] = &off_24C215890;
  v120[1] = a2;
  v120[2] = a3;
  v120[3] = a4;
  v120[4] = v9;
  v10 = (TParam *)(a1[7] + 18256);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  v12 = *((_BYTE *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 152);
  v13 = *(_BYTE **)(v8 + 48);
  v13[8] = v12;
  (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 16))(v13);
  v14 = (TParam *)(*(_QWORD *)(v8 + 56) + 4040);
  v15 = TParam::getActiveConfigHandle(v14);
  v16 = *((int *)v14 + TParam::getValidConfig(v14, v15) + 40);
  v17 = *(_QWORD *)(v8 + 48);
  v18 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 24) = v16;
  (*(void (**)(void))(v18 + 16))();
  AllProductions = (_QWORD *)TParser::getAllProductions(*(_QWORD **)(v8 + 48), (uint64_t)v120);
  TAllocator::TAllocator((TAllocator *)v119, 2048);
  if (AllProductions)
  {
    v109 = 0;
    v107 = v8;
    v26 = 0x253DF2000uLL;
    while (1)
    {
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A7EABC, (TAllocator *)v119, 0) > 1)goto LABEL_60;
      v27 = (__int32 *)v20;
      if (*(_DWORD *)v20)
      {
        LOBYTE(v110[0]) = 0;
        if ((v28 & 1) == 0
        {
          v86 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v86);
          v26 = 0x253DF2000uLL;
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v86;
        }
        v29 = TLocaleInfo::stringToFloat(*(_QWORD *)(v26 + 1744), v27, (BOOL *)v110);
        if (LOBYTE(v110[0]))
        {
          loggableUnicode((unsigned int *)v27, &__p);
          p_p = &__p;
          if (v114 < 0)
            p_p = __p;
          tknPrintf("Error: 'priority' was '%s'. Expected a double-precision value.\n", v30, v31, v32, v33, p_p);
          goto LABEL_10;
        }
        v35 = v29;
      }
      else
      {
        v35 = 0.0;
      }
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A7EAE0, (TAllocator *)v119, 0) > 1)goto LABEL_60;
      v36 = (__int32 *)v20;
      if (!*(_DWORD *)v20)
      {
        tknPrintString("Error: 'result' was ''. Ignored production.\n");
        goto LABEL_60;
      }
      v37 = AllProductions[2];
      LOBYTE(v110[0]) = 0;
      AttributeValue = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A7EAFC, (TAllocator *)v119, v110);
      v40 = 0;
      if (!LOBYTE(v110[0]) || AttributeValue > 1)
        goto LABEL_25;
      v41 = v39;
      v118 = 0;
      if ((v42 & 1) == 0
      {
        v87 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v87);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v87;
      }
      v43 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v41, &v118);
      if (!v118)
      {
        v40 = v43;
        if (v37 <= v43)
        {
          loggableUnicode(v41, &__p);
          v74 = &__p;
          if (v114 < 0)
            v74 = __p;
          tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value in the range [0,%lld).\n", v70, v71, v72, v73, v74, v37);
          v75 = v114;
          goto LABEL_59;
        }
LABEL_25:
        LOBYTE(v110[0]) = 0;
        v49 = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_209A7EB2C, (TAllocator *)v119, v110);
        v51 = 0;
        if (!LOBYTE(v110[0]) || v49 > 1)
        {
LABEL_34:
          LMScore = TGrammarManager::getLMScore(v8, v36, a2, v40 + a3, v37 - (v40 + v51));
          v61 = LMScore;
          v62 = v109;
          if (v109 <= LMScore)
            v62 = LMScore;
          v109 = v62;
          v63 = a6[1];
          v64 = a6[2];
          if (v63 >= v64)
          {
            v66 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v63 - *a6) >> 3);
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) > 0x492492492492492)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v68 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v64 - *a6) >> 3);
            if (2 * v68 > v67)
              v67 = 2 * v68;
            if (v68 >= 0x249249249249249)
              v20 = 0x492492492492492;
            else
              v20 = v67;
            if (v20)
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>((uint64_t)(a6 + 2), v20);
            else
              v69 = 0;
            v76 = &v69[56 * v66];
            *(_QWORD *)v76 = AllProductions;
            *((_QWORD *)v76 + 1) = v36;
            *((_QWORD *)v76 + 2) = v37;
            *((_QWORD *)v76 + 3) = v40;
            *((_QWORD *)v76 + 4) = v51;
            *((double *)v76 + 5) = v35;
            *((_DWORD *)v76 + 12) = v61;
            v78 = (char *)*a6;
            v77 = (char *)a6[1];
            v79 = v76;
            v26 = 0x253DF2000;
            if (v77 != (char *)*a6)
            {
              do
              {
                v24 = *(__n128 *)(v77 - 56);
                v25 = *(_OWORD *)(v77 - 40);
                v80 = *(_OWORD *)(v77 - 24);
                *((_DWORD *)v79 - 2) = *((_DWORD *)v77 - 2);
                *(_OWORD *)(v79 - 24) = v80;
                *(_OWORD *)(v79 - 40) = v25;
                *(__n128 *)(v79 - 56) = v24;
                v79 -= 56;
                v77 -= 56;
              }
              while (v77 != v78);
              v77 = (char *)*a6;
            }
            v65 = v76 + 56;
            *a6 = (uint64_t)v79;
            a6[1] = (uint64_t)(v76 + 56);
            a6[2] = (uint64_t)&v69[56 * v20];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_QWORD *)v63 = AllProductions;
            *(_QWORD *)(v63 + 8) = v36;
            *(_QWORD *)(v63 + 16) = v37;
            *(_QWORD *)(v63 + 24) = v40;
            *(_QWORD *)(v63 + 32) = v51;
            *(double *)(v63 + 40) = v35;
            v65 = (char *)(v63 + 56);
            *(_DWORD *)(v63 + 48) = LMScore;
            v26 = 0x253DF2000;
          }
          a6[1] = (uint64_t)v65;
          v8 = v107;
          goto LABEL_60;
        }
        v52 = v50;
        v118 = 0;
        if ((v53 & 1) == 0
        {
          v88 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v88);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v88;
        }
        v54 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v52, &v118);
        if (!v118)
        {
          if (v40 < v54)
          {
            v51 = v37 - v54;
            if (v37 >= v54)
              goto LABEL_34;
          }
          loggableUnicode(v52, &__p);
          v85 = &__p;
          if (v114 < 0)
            v85 = __p;
          tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value in the range (%lld,%lld).\n", v81, v82, v83, v84, v85, v40, v37);
          v75 = v114;
LABEL_59:
          v26 = 0x253DF2000;
          if ((v75 & 0x80000000) == 0)
            goto LABEL_60;
LABEL_11:
          operator delete(__p);
          goto LABEL_60;
        }
        loggableUnicode(v52, &__p);
        v59 = &__p;
        if (v114 < 0)
          v59 = __p;
        tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value.\n", v55, v56, v57, v58, v59);
        v26 = 0x253DF2000;
        goto LABEL_10;
      }
      loggableUnicode(v41, &__p);
      v48 = &__p;
      if (v114 < 0)
        v48 = __p;
      tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value.\n", v44, v45, v46, v47, v48);
      v26 = 0x253DF2000;
LABEL_10:
      if (v114 < 0)
        goto LABEL_11;
LABEL_60:
      AllProductions = (_QWORD *)*AllProductions;
      if (!AllProductions)
        goto LABEL_69;
    }
  }
  v109 = 0;
LABEL_69:
  v89 = MEMORY[0x24BEDB800];
  v90 = MEMORY[0x24BEDB848];
  if (*(_BYTE *)(v8 + 24))
  {
    tknPrintf("Parse chart at index %llu:\n", v20, v21, v22, v23, a3);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    TParser::logChart(*(uint64_t **)(v8 + 48), &__p);
    std::stringbuf::str();
    if (v111 >= 0)
      v91 = v110;
    else
      v91 = (void **)v110[0];
    tknPrintString((const char *)v91);
    if (v111 < 0)
      operator delete(v110[0]);
    __p = *(void **)v89;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v89 + 24);
    v113 = v90 + 16;
    if (v116 < 0)
      operator delete(v115);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v117);
  }
  v92 = *a6;
  v93 = (__int128 *)a6[1];
  if ((__int128 *)*a6 != v93)
  {
    v94 = ((uint64_t)v93 - v92) / 56;
    v24.n128_f64[0] = (double)(v109 + 1);
    v95 = v94 <= 1 ? 1 : ((uint64_t)v93 - v92) / 56;
    v96 = v92 + 40;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v96 + 8);
      *(double *)&v25 = *(double *)v96 + (double)(unint64_t)v25 / v24.n128_f64[0];
      *(_QWORD *)v96 = v25;
      v96 += 56;
      --v95;
    }
    while (v95);
    __p = sortResult;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*,false>(v92, v93, (uint64_t (**)(__int128 *, __int128 *))&__p, 126 - 2 * __clz(v94), 1, v24);
    if (*(_BYTE *)(v8 + 8))
    {
      tknPrintString("Parse tree for word sequence:");
      if (*(_QWORD *)(*a6 + 16))
      {
        v97 = 0;
        v98 = 112 * a3 + 16;
        do
        {
          tknPrintString(" ");
          loggableUnicode(**(unsigned int ***)(*a2 + v98), &__p);
          if (v114 >= 0)
            v99 = (const char *)&__p;
          else
            v99 = (const char *)__p;
          tknPrintString(v99);
          if (v114 < 0)
            operator delete(__p);
          ++v97;
          v98 += 112;
        }
        while (v97 < *(_QWORD *)(*a6 + 16));
      }
      tknPrintString("\n");
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v101 = *a6;
      v100 = a6[1];
      if (v100 != *a6)
      {
        v102 = 0;
        v103 = 0;
        do
        {
          v104 = v101 + v102;
          if (*(_QWORD *)(v101 + 16) != *(_QWORD *)(v101 + v102 + 16)
            || *(double *)(v101 + 40) != *(double *)(v104 + 40))
          {
            break;
          }
          if (*(_QWORD *)(v101 + 24) == *(_QWORD *)(v101 + v102 + 24)
            && *(_QWORD *)(v101 + 32) == *(_QWORD *)(v101 + v102 + 32))
          {
            TParser::logTree(*(_QWORD *)(v8 + 48), *(_QWORD **)v104, &__p);
            std::stringbuf::str();
            if (v111 >= 0)
              v105 = v110;
            else
              v105 = (void **)v110[0];
            tknPrintString((const char *)v105);
            if (v111 < 0)
              operator delete(v110[0]);
            v101 = *a6;
            v100 = a6[1];
          }
          ++v103;
          v102 += 56;
        }
        while (v103 < 0x6DB6DB6DB6DB6DB7 * ((v100 - v101) >> 3));
      }
      __p = *(void **)v89;
      *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v89 + 24);
      v113 = v90 + 16;
      if (v116 < 0)
        operator delete(v115);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v117);
    }
  }
  return TAllocator::clear((TAllocator *)v119);
}

void sub_2099F69FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  MEMORY[0x20BD149A8](v28, 0x1070C40ADD13FEBLL);
  TAllocator::clear((TAllocator *)(v29 - 184));
  _Unwind_Resume(a1);
}

void TWideChartSeeder::~TWideChartSeeder(TWideChartSeeder *this)
{
  JUMPOUT(0x20BD149A8);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (__int128 *)(a2 - 56);
      if (!(*a3)((__int128 *)(a2 - 56), (__int128 *)a1))
        return 1;
      v10 = *(_OWORD *)(a1 + 16);
      v9 = *(_OWORD *)(a1 + 32);
      v11 = *(_OWORD *)a1;
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_OWORD *)(a2 - 40);
      v13 = *(_OWORD *)(a2 - 24);
      v15 = *v8;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      *(_DWORD *)(a2 - 8) = v12;
      *v8 = v11;
      *(_OWORD *)(a2 - 40) = v10;
      result = 1;
      *(_OWORD *)(a2 - 24) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a1 + 168, (__int128 *)(a2 - 56), a3);
      return 1;
    default:
      v16 = (__int128 *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), a3);
      v17 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v17, v16))
    {
      v20 = *(_OWORD *)(v17 + 16);
      v26 = *(_OWORD *)v17;
      v27 = v20;
      v28 = *(_OWORD *)(v17 + 32);
      v29 = *(_QWORD *)(v17 + 48);
      v21 = v18;
      while (1)
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)(a1 + v21 + 144);
        *(_DWORD *)(v22 + 216) = *(_DWORD *)(a1 + v21 + 160);
        if (v21 == -112)
          break;
        v21 -= 56;
        if (((*a3)(&v26, (__int128 *)(v22 + 56)) & 1) == 0)
        {
          v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      v25 = v27;
      *(_OWORD *)v24 = v26;
      *(_OWORD *)(v24 + 16) = v25;
      *(_OWORD *)(v24 + 32) = v28;
      *(_DWORD *)(v24 + 48) = v29;
      if (++v19 == 8)
        return v17 + 56 == a2;
    }
    v16 = (__int128 *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2)
      return 1;
  }
}

unint64_t *TLmScore::TLmScore(unint64_t *a1, unint64_t a2)
{
  _BYTE v4[88];
  unsigned int v5;

  a1[4] = 0;
  *a1 = a2;
  SDVoc_GetInfo(a2, (uint64_t)v4);
  a1[2] = v5;
  a1[3] = operator new[]();
  a1[1] = SDWord_New(*a1, "_NOT_IN_VOCAB_");
  a1[4] = TLmScore::getClass((TLmScore *)a1, "_NOT_IN_VOCAB_");
  return a1;
}

uint64_t TLmScore::getClass(TLmScore *this, const char *a2)
{
  unint64_t Handle;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  Handle = SDWord_GetHandle(*(_QWORD *)this, a2);
  if (Handle == -1)
    return *((_QWORD *)this + 4);
  SDWord_GetTagBits(*(_QWORD *)this, Handle, 1uLL, *((void **)this + 3), (unint64_t)(*((_QWORD *)this + 2) + 7) >> 3);
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return 0;
  v5 = 0;
  result = 0;
  do
  {
    result |= ((uint64_t)(*(unsigned __int8 *)(*((_QWORD *)this + 3) + (v5 >> 3)) >> (v5 & 7) << 63) >> 63) & (1 << v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void TLmScore::~TLmScore(TLmScore *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x20BD149A8](v2, 0x1000C4077774924);
  if (*(_QWORD *)this != -1)
  {
    SDWord_DeleteList(*(_QWORD *)this, (uint64_t)this + 8, 1u);
    SDVoc_Delete(*(_QWORD *)this);
  }
}

double TLmScore::getLmScore(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t Handle;
  unint64_t *v12;
  uint64_t v13;
  int v15;
  uint64_t v16[2];
  uint64_t v17[100];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *a1;
  if (a2[1] == *a2)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (const char *)(v5 + v8);
      if (*(char *)(v5 + v8 + 23) < 0)
        v10 = *(const char **)v10;
      Handle = SDWord_GetHandle(v6, v10);
      if (Handle == -1)
        Handle = a1[1];
      v6 = *a1;
      v12 = (unint64_t *)&v17[2 * v9++];
      *v12 = *a1;
      v12[1] = Handle;
      v5 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  v13 = SDWord_GetHandle(v6, a3);
  if (v13 == -1)
    v13 = a1[1];
  v16[0] = *a1;
  v16[1] = v13;
  v15 = 0;
  SDLm_LmScore(0, 0, 0, v17, v9, v16, 1u, (uint64_t)&v15, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return (double)v15;
}

double TLmScore::getLmScore(TLmScore *this, const char *a2)
{
  uint64_t Handle;
  int v5;
  uint64_t v6[2];

  Handle = SDWord_GetHandle(*(_QWORD *)this, a2);
  if (Handle == -1)
    Handle = *((_QWORD *)this + 1);
  v6[0] = *(_QWORD *)this;
  v6[1] = Handle;
  v5 = 0;
  SDLm_LmScore(0, 0, 0, 0, 0, v6, 1u, (uint64_t)&v5, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return (double)v5;
}

void TCompounderParamManager::TCompounderParamManager(TCompounderParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  TParam *v4;

  TLattProcParamManager::TLattProcParamManager(this, a2);
  *v3 = &unk_24C2179C0;
  v4 = (TParam *)(v3 + 62);
  TBoolParam::TBoolParam((uint64_t)(v3 + 62), (uint64_t)&unk_209A7EBA0, (uint64_t)&unk_209A7EBE0, 0, 0, (uint64_t)&unk_209A7EC80, (uint64_t)&unk_209A7ECB8);
  TBoolParam::TBoolParam((uint64_t)this + 744, (uint64_t)&unk_209A7ECBC, (uint64_t)&unk_209A7ED04, 0, 0, (uint64_t)&unk_209A7EC80, (uint64_t)&unk_209A7ECB8);
  TBoolParam::TBoolParam((uint64_t)this + 992, (uint64_t)&unk_209A7EE18, (uint64_t)&unk_209A7EE64, 0, 0, (uint64_t)&unk_209A7EFE4, (uint64_t)&unk_209A7ECB8);
  TBoolParam::TBoolParam((uint64_t)this + 1240, (uint64_t)&unk_209A7F024, (uint64_t)&unk_209A7F080, 0, 0, (uint64_t)&unk_209A7F1D8, (uint64_t)&unk_209A7ECB8);
  TIntParam::TIntParam((TCompounderParamManager *)((char *)this + 1488), (uint64_t)&unk_209A7F218, (uint64_t)&unk_209A7F284, 0, -1, 10000, -1, (uint64_t)&unk_209A7F8E0, (uint64_t)&unk_209A7ECB8);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 744));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 992));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 1240));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 1488));
}

void sub_2099F7690(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  TBoolParam::~TBoolParam(v5);
  TBoolParam::~TBoolParam(v4);
  TBoolParam::~TBoolParam(v3);
  TBoolParam::~TBoolParam(v2);
  *v1 = &unk_24C217520;
  TParam::~TParam(v1 + 18);
  TParamManager::~TParamManager((TParamManager *)v1);
  _Unwind_Resume(a1);
}

void TCompounder::TCompounder(TCompounder *this, TInputStream *a2, char *a3, TLexicon *a4)
{
  uint64_t v8;
  TCompounderParamManager *v9;
  uint64_t v10;

  v8 = TLatticeProcessor::TLatticeProcessor((uint64_t)this, (uint64_t)a4, 0);
  *(_QWORD *)v8 = &off_24C213BD0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 248) = v8 + 256;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 272) = v8 + 280;
  *(_QWORD *)(v8 + 280) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(v8 + 408) = 0;
  *(_QWORD *)(v8 + 288) = 0;
  *(_QWORD *)(v8 + 296) = 0;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_QWORD *)(v8 + 304) = 3;
  *(_QWORD *)(v8 + 312) = 0x3FE0000000000000;
  *(_QWORD *)(v8 + 368) = 0;
  *(_QWORD *)(v8 + 376) = 0;
  v9 = (TCompounderParamManager *)operator new();
  TCompounderParamManager::TCompounderParamManager(v9, (TLexicon *)((char *)a4 + 240));
  *((_QWORD *)this + 45) = v9;
  v10 = *((_QWORD *)v9 + 17);
  *((_QWORD *)v9 + 17) = 1;
  TCompounder::initFugenSEndings(this);
  if (*((_BYTE *)a2 + 8))
    TCompounder::loadModel((uint64_t)this, a2, a3);
  *((_QWORD *)v9 + 17) = v10;
}

void sub_2099F7830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  TLatticeProcessor *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  char **v6;
  char **v7;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD149A8](v4, 0x10F3C407200CA0FLL);
  v9 = (void *)*((_QWORD *)v2 + 49);
  if (v9)
  {
    *((_QWORD *)v2 + 50) = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)v2 + 272, *v7);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(v3, *v6);
  v10 = *v5;
  if (*v5)
  {
    *((_QWORD *)v2 + 9) = v10;
    operator delete(v10);
  }
  TLatticeProcessor::~TLatticeProcessor(v2);
  _Unwind_Resume(a1);
}

void TCompounder::initFugenSEndings(TCompounder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 40) = 14;
  v2 = (uint64_t *)((char *)this + 328);
  std::vector<std::wstring>::resize((std::vector<std::wstring> *)((char *)this + 328), 0xEuLL);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, dword_209A7FEF4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v14, dword_209A7FF00);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v15, dword_209A7FF10);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v16, dword_209A7FF24);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v17, dword_209A7FF34);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v18, dword_209A7FF44);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_209A7FF58);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v20, dword_209A7FF6C);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v21, dword_209A7FF84);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v22, dword_209A7FFA0);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v23, dword_209A7FFB8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v24, dword_209A7FFC8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v25, dword_209A7FFD4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v26, dword_209A7FFE4);
  if (*((_QWORD *)this + 40))
  {
    v3 = 0;
    v4 = *v2;
    do
    {
      std::wstring::operator=((std::wstring *)(v4 + 24 * v3), (const std::wstring *)&v13[24 * v3]);
      v4 = *v2;
      v5 = *v2 + 24 * v3;
      if (*(char *)(v5 + 23) < 0)
      {
        v5 = *(_QWORD *)v5;
        v6 = *(_QWORD *)(*v2 + 24 * v3 + 8);
      }
      else
      {
        v6 = *(unsigned __int8 *)(v5 + 23);
      }
      v7 = (_DWORD *)(v5 + 4 * v6 - 4);
      if (v6)
        v8 = (unint64_t)v7 > v5;
      else
        v8 = 0;
      if (v8)
      {
        v9 = v5 + 4;
        do
        {
          v10 = *(_DWORD *)(v9 - 4);
          *(_DWORD *)(v9 - 4) = *v7;
          *v7-- = v10;
          v11 = v9 >= (unint64_t)v7;
          v9 += 4;
        }
        while (!v11);
      }
      ++v3;
    }
    while (v3 < *((_QWORD *)this + 40));
  }
  v12 = 336;
  do
  {
    if ((char)v13[v12 - 1] < 0)
      operator delete(*(void **)&v13[v12 - 24]);
    v12 -= 24;
  }
  while (v12);
}

void sub_2099F7B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t TCompounder::loadModel(uint64_t this, TInputStream *a2, char *a3)
{
  uint64_t v4;
  int *v5;
  int *NextToken;
  const __int32 *v7;
  const __int32 *v8;
  const __int32 *v9;
  int v10;
  unsigned int v11;
  int v12;
  const __int32 *v13;
  const __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unsigned int *v20;
  unsigned __int8 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  __int32 *v33;
  unsigned __int8 v34;
  double v35;
  double v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t i;
  uint64_t *v43;
  int v44;
  const __int32 *v45;
  const __int32 *v46;
  size_t v47;
  size_t v48;
  const __int32 *v49;
  uint64_t v50;
  __int32 *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  __int32 *v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  FileSpec *v76;
  unint64_t v77;
  unint64_t *v78;
  __int32 *v79;
  unsigned int AllowedWordCollations;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int32 *v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  TLocaleInfo *v99;
  TLocaleInfo *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unsigned int *v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unsigned int *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  char *v198;
  std::string *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void **v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void **v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  char *v234;
  std::string *v235;
  const char *v236;
  char *v237;
  std::string *v238;
  const char *v239;
  char *v240;
  std::string *v241;
  const char *v242;
  char *v243;
  std::string *v244;
  char *v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void **v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  char *v258;
  std::string *v259;
  const char *v260;
  char *v261;
  std::string *v262;
  __int128 v263;
  const char *v264;
  char *v265;
  std::string *v266;
  const char *v267;
  char *v268;
  std::string *v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  const char *v274;
  _QWORD *exception;
  std::string *v276;
  const char *v277;
  char *v278;
  std::string *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  const char *v284;
  char *v285;
  std::string *v286;
  const char *v287;
  char *v288;
  std::string *v289;
  const char *v290;
  char *v291;
  std::string *v292;
  const char *v293;
  char *v294;
  std::string *v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  char **v304;
  uint64_t **v305;
  void *v306[2];
  void *v307;
  BOOL v308;
  _BYTE v309[24];
  _BYTE v310[777];
  char v311;
  _BYTE __s[24];
  _QWORD v313[128];
  char v314;
  void *__p[4];
  __int128 v316;
  __int128 v317;
  __int128 v318;
  FileSpec *v319;
  __int128 v320;
  _BYTE v321[17];
  char v322;
  FileSpec *v323;
  __int128 v324;
  _BYTE v325[256];
  char v326;
  uint64_t v327;

  v327 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 8))
    return this;
  v4 = this;
  if (TInputStream::verifyHeader((uint64_t)a2, "FeatureConfig", (uint64_t)&pFeatureConfigVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v309, &byte_209A88803);
    *(_QWORD *)__s = aPpx;
    if ((v309[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__s[8], *(const std::string::value_type **)v309, *(std::string::size_type *)&v309[8]);
    }
    else
    {
      *(_OWORD *)&__s[8] = *(_OWORD *)v309;
      v313[0] = *(_QWORD *)&v309[16];
    }
    *(_QWORD *)__s = &unk_24C214BA0;
    if (v313[0] >= 0)
      v274 = &__s[8];
    else
      v274 = *(const char **)&__s[8];
    conditionalAssert(v274, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2477, v255, v256);
    *(_QWORD *)__s = aPpx;
    if (SHIBYTE(v313[0]) < 0)
      operator delete(*(void **)&__s[8]);
    if ((v309[23] & 0x80000000) != 0)
      operator delete(*(void **)v309);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *exception = aPpx;
    v276 = (std::string *)(exception + 1);
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v276, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      v296 = *(_OWORD *)__s;
      exception[3] = *(_QWORD *)&__s[16];
      *(_OWORD *)&v276->__r_.__value_.__l.__data_ = v296;
    }
    *exception = &unk_24C214BA0;
  }
  *(_QWORD *)__s = v313;
  *(_OWORD *)&__s[8] = xmmword_209A57DD0;
  v314 = 1;
  *(_QWORD *)v309 = v310;
  *(_OWORD *)&v309[8] = xmmword_209A57DD0;
  v311 = 1;
  v323 = (FileSpec *)v325;
  v324 = xmmword_209A57DD0;
  v326 = 1;
  v319 = (FileSpec *)v321;
  v320 = xmmword_209A57DD0;
  v322 = 1;
  v308 = 0;
  MEMORY[0x20BD147A4]((char *)a2 + 128, &unk_209A7F9A8);
  v304 = (char **)(v4 + 64);
  v305 = (uint64_t **)(v4 + 248);
  v302 = v4 + 80;
  while (1)
  {
    this = TInputStream::getNextLine((uint64_t)a2, (uint64_t)v309);
    if ((this & 1) == 0)
      break;
    if (*(_QWORD *)&v309[16] >= *(_QWORD *)&v309[8])
    {
      if (v311)
      {
        LODWORD(__p[0]) = 0;
        TBuffer<wchar_t>::insert((uint64_t)v309, *(unint64_t *)&v309[16], (int *)__p, 1uLL);
        v5 = *(int **)v309;
        --*(_QWORD *)&v309[16];
      }
      else
      {
        v5 = *(int **)v309;
        if (*(_QWORD *)&v309[8])
          *(_DWORD *)(*(_QWORD *)v309 + 4 * *(_QWORD *)&v309[8] - 4) = 0;
      }
    }
    else
    {
      v5 = *(int **)v309;
      *(_DWORD *)(*(_QWORD *)v309 + 4 * *(_QWORD *)&v309[16]) = 0;
    }
    NextToken = getNextToken(v5, (uint64_t)__s, dword_209A7F9B4);
    if (NextToken)
    {
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v314)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          v7 = *(const __int32 **)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v7 = *(const __int32 **)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v7 = *(const __int32 **)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      if (!wcscmp(v7, dword_209A7F9C0))
      {
        if (*((_QWORD *)a2 + 12) >= 3uLL)
        {
          if (*((char *)a2 + 39) >= 0)
            v182 = (char *)a2 + 16;
          else
            v182 = (char *)*((_QWORD *)a2 + 2);
          v183 = *((_QWORD *)a2 + 8);
          v184 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v184, __p);
          if (SHIBYTE(__p[2]) >= 0)
            v189 = __p;
          else
            v189 = (void **)__p[0];
          tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  This was renamed to 'wordsucc' in version 3.\n", v185, v186, v187, v188, v182, v183, v189, *((_QWORD *)a2 + 12));
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(v307) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
          }
          else
          {
            *(_OWORD *)&__p[1] = *(_OWORD *)v306;
            __p[3] = v307;
          }
          __p[0] = &unk_24C214BA0;
          if (SHIBYTE(__p[3]) >= 0)
            v277 = (const char *)&__p[1];
          else
            v277 = (const char *)__p[1];
          conditionalAssert(v277, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2501, v190, v191);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(__p[3]) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(v307) < 0)
            operator delete(v306[0]);
          v278 = (char *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v278 = aPpx;
          v279 = (std::string *)(v278 + 8);
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v279, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v297 = *(_OWORD *)__p;
            *((void **)v278 + 3) = __p[2];
            *(_OWORD *)&v279->__r_.__value_.__l.__data_ = v297;
          }
          *(_QWORD *)v278 = &unk_24C214BA0;
        }
LABEL_55:
        v10 = 0;
        v11 = 2;
        v12 = 1;
        goto LABEL_56;
      }
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v314)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          v8 = *(const __int32 **)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v8 = *(const __int32 **)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v8 = *(const __int32 **)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      if (wcscmp(v8, dword_209A7F9D4))
      {
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v314)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            v9 = *(const __int32 **)__s;
            --*(_QWORD *)&__s[16];
          }
          else
          {
            v9 = *(const __int32 **)__s;
            if (*(_QWORD *)&__s[8])
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
          }
        }
        else
        {
          v9 = *(const __int32 **)__s;
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
        }
        if (!wcscmp(v9, dword_209A7F9EC))
        {
          if (*((_QWORD *)a2 + 12) <= 1uLL)
          {
            if (*((char *)a2 + 39) >= 0)
              v223 = (char *)a2 + 16;
            else
              v223 = (char *)*((_QWORD *)a2 + 2);
            v224 = *((_QWORD *)a2 + 8);
            v225 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
            loggableUnicode(v225, __p);
            if (SHIBYTE(__p[2]) >= 0)
              v230 = __p;
            else
              v230 = (void **)__p[0];
            tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 2 or higher.\n", v226, v227, v228, v229, v223, v224, v230, *((_QWORD *)a2 + 12));
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
            __p[0] = (void *)aPpx;
            if (SHIBYTE(v307) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
            }
            else
            {
              *(_OWORD *)&__p[1] = *(_OWORD *)v306;
              __p[3] = v307;
            }
            __p[0] = &unk_24C214BA0;
            if (SHIBYTE(__p[3]) >= 0)
              v290 = (const char *)&__p[1];
            else
              v290 = (const char *)__p[1];
            conditionalAssert(v290, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2519, v231, v232);
            __p[0] = (void *)aPpx;
            if (SHIBYTE(__p[3]) < 0)
              operator delete(__p[1]);
            if (SHIBYTE(v307) < 0)
              operator delete(v306[0]);
            v291 = (char *)__cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v291 = aPpx;
            v292 = (std::string *)(v291 + 8);
            if (SHIBYTE(__p[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v292, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              v300 = *(_OWORD *)__p;
              *((void **)v291 + 3) = __p[2];
              *(_OWORD *)&v292->__r_.__value_.__l.__data_ = v300;
            }
            *(_QWORD *)v291 = &unk_24C214BA0;
          }
          v10 = 1;
          v12 = 3;
          v11 = 1;
          goto LABEL_56;
        }
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v314)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            v13 = *(const __int32 **)__s;
            --*(_QWORD *)&__s[16];
          }
          else
          {
            v13 = *(const __int32 **)__s;
            if (*(_QWORD *)&__s[8])
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
          }
        }
        else
        {
          v13 = *(const __int32 **)__s;
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
        }
        if (!wcscmp(v13, dword_209A7FA0C))
        {
          if (*((_QWORD *)a2 + 12) <= 2uLL)
          {
            if (*((char *)a2 + 39) >= 0)
              v245 = (char *)a2 + 16;
            else
              v245 = (char *)*((_QWORD *)a2 + 2);
            v246 = *((_QWORD *)a2 + 8);
            v247 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
            loggableUnicode(v247, __p);
            if (SHIBYTE(__p[2]) >= 0)
              v252 = __p;
            else
              v252 = (void **)__p[0];
            tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 3 or higher.\n", v248, v249, v250, v251, v245, v246, v252, *((_QWORD *)a2 + 12));
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
            __p[0] = (void *)aPpx;
            if (SHIBYTE(v307) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
            }
            else
            {
              *(_OWORD *)&__p[1] = *(_OWORD *)v306;
              __p[3] = v307;
            }
            __p[0] = &unk_24C214BA0;
            if (SHIBYTE(__p[3]) >= 0)
              v293 = (const char *)&__p[1];
            else
              v293 = (const char *)__p[1];
            conditionalAssert(v293, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2532, v253, v254);
            __p[0] = (void *)aPpx;
            if (SHIBYTE(__p[3]) < 0)
              operator delete(__p[1]);
            if (SHIBYTE(v307) < 0)
              operator delete(v306[0]);
            v294 = (char *)__cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v294 = aPpx;
            v295 = (std::string *)(v294 + 8);
            if (SHIBYTE(__p[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v295, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              v301 = *(_OWORD *)__p;
              *((void **)v294 + 3) = __p[2];
              *(_OWORD *)&v295->__r_.__value_.__l.__data_ = v301;
            }
            *(_QWORD *)v294 = &unk_24C214BA0;
          }
          v10 = 0;
          v12 = 0;
          v11 = 2;
          goto LABEL_56;
        }
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v314)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            v14 = *(const __int32 **)__s;
            --*(_QWORD *)&__s[16];
          }
          else
          {
            v14 = *(const __int32 **)__s;
            if (*(_QWORD *)&__s[8])
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
          }
        }
        else
        {
          v14 = *(const __int32 **)__s;
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
        }
        if (wcscmp(v14, dword_209A7FA30))
        {
          v202 = (char *)*((_QWORD *)a2 + 2);
          v201 = (char *)a2 + 16;
          v200 = v202;
          if (v201[23] >= 0)
            v203 = v201;
          else
            v203 = v200;
          v204 = *((_QWORD *)v201 + 6);
          v205 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v205, __p);
          if (SHIBYTE(__p[2]) >= 0)
            v210 = __p;
          else
            v210 = (void **)__p[0];
          tknPrintf("Error: %s (%llu) : Unsupported feature name '%s'\n", v206, v207, v208, v209, v203, v204, v210);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(v307) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
          }
          else
          {
            *(_OWORD *)&__p[1] = *(_OWORD *)v306;
            __p[3] = v307;
          }
          __p[0] = &unk_24C214BA0;
          if (SHIBYTE(__p[3]) >= 0)
            v284 = (const char *)&__p[1];
          else
            v284 = (const char *)__p[1];
          conditionalAssert(v284, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2555, v211, v212);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(__p[3]) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(v307) < 0)
            operator delete(v306[0]);
          v285 = (char *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v285 = aPpx;
          v286 = (std::string *)(v285 + 8);
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v286, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v298 = *(_OWORD *)__p;
            *((void **)v285 + 3) = __p[2];
            *(_OWORD *)&v286->__r_.__value_.__l.__data_ = v298;
          }
          *(_QWORD *)v285 = &unk_24C214BA0;
        }
        if (*((_QWORD *)a2 + 12) <= 2uLL)
        {
          if (*((char *)a2 + 39) >= 0)
            v213 = (char *)a2 + 16;
          else
            v213 = (char *)*((_QWORD *)a2 + 2);
          v214 = *((_QWORD *)a2 + 8);
          v215 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v215, __p);
          if (SHIBYTE(__p[2]) >= 0)
            v220 = __p;
          else
            v220 = (void **)__p[0];
          tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 3 or higher.\n", v216, v217, v218, v219, v213, v214, v220, *((_QWORD *)a2 + 12));
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(v307) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
          }
          else
          {
            *(_OWORD *)&__p[1] = *(_OWORD *)v306;
            __p[3] = v307;
          }
          __p[0] = &unk_24C214BA0;
          if (SHIBYTE(__p[3]) >= 0)
            v287 = (const char *)&__p[1];
          else
            v287 = (const char *)__p[1];
          conditionalAssert(v287, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2545, v221, v222);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(__p[3]) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(v307) < 0)
            operator delete(v306[0]);
          v288 = (char *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v288 = aPpx;
          v289 = (std::string *)(v288 + 8);
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v289, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v299 = *(_OWORD *)__p;
            *((void **)v288 + 3) = __p[2];
            *(_OWORD *)&v289->__r_.__value_.__l.__data_ = v299;
          }
          *(_QWORD *)v288 = &unk_24C214BA0;
        }
        goto LABEL_55;
      }
      v10 = 0;
      v11 = 4;
      v12 = 2;
LABEL_56:
      v19 = getNextToken(NextToken, (uint64_t)__s, dword_209A7F9B4);
      if (!v19)
      {
        v143 = (char *)*((_QWORD *)a2 + 2);
        v142 = (char *)a2 + 16;
        v141 = v143;
        if (v142[23] >= 0)
          v141 = v142;
        tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v15, v16, v17, v18, v141, *((_QWORD *)v142 + 6));
        std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(v307) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
        }
        else
        {
          *(_OWORD *)&__p[1] = *(_OWORD *)v306;
          __p[3] = v307;
        }
        __p[0] = &unk_24C214BA0;
        if (SHIBYTE(__p[3]) >= 0)
          v233 = (const char *)&__p[1];
        else
          v233 = (const char *)__p[1];
        conditionalAssert(v233, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2563, v144, v145);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(v307) < 0)
          operator delete(v306[0]);
        v234 = (char *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v234 = aPpx;
        v235 = (std::string *)(v234 + 8);
        if (SHIBYTE(__p[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v235, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v270 = *(_OWORD *)__p;
          *((void **)v234 + 3) = __p[2];
          *(_OWORD *)&v235->__r_.__value_.__l.__data_ = v270;
        }
        *(_QWORD *)v234 = &unk_24C214BA0;
      }
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v314)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          v20 = *(unsigned int **)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v20 = *(unsigned int **)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v20 = *(unsigned int **)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      if ((v21 & 1) == 0
      {
        v99 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v99);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v99;
      }
      v22 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v20, &v308);
      if (v308)
      {
        v171 = (char *)*((_QWORD *)a2 + 2);
        v170 = (char *)a2 + 16;
        v169 = v171;
        if (v170[23] >= 0)
          v172 = v170;
        else
          v172 = v169;
        v173 = *((_QWORD *)v170 + 6);
        v174 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
        loggableUnicode(v174, __p);
        if (SHIBYTE(__p[2]) >= 0)
          v179 = __p;
        else
          v179 = (void **)__p[0];
        tknPrintf("Error: %s (%llu) : Invalid Ngram order. Was '%s'. Expected an integer value in range [1,%llu].\n", v175, v176, v177, v178, v172, v173, v179, v11);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(v307) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
        }
        else
        {
          *(_OWORD *)&__p[1] = *(_OWORD *)v306;
          __p[3] = v307;
        }
        __p[0] = &unk_24C214BA0;
        if (SHIBYTE(__p[3]) >= 0)
          v267 = (const char *)&__p[1];
        else
          v267 = (const char *)__p[1];
        conditionalAssert(v267, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2572, v180, v181);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(v307) < 0)
          operator delete(v306[0]);
        v268 = (char *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v268 = aPpx;
        v269 = (std::string *)(v268 + 8);
        if (SHIBYTE(__p[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v269, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v283 = *(_OWORD *)__p;
          *((void **)v268 + 3) = __p[2];
          *(_OWORD *)&v269->__r_.__value_.__l.__data_ = v283;
        }
        *(_QWORD *)v268 = &unk_24C214BA0;
      }
      v27 = v22;
      if (v22 - 1 >= v11)
      {
        v166 = (char *)*((_QWORD *)a2 + 2);
        v165 = (char *)a2 + 16;
        v164 = v166;
        if (v165[23] >= 0)
          v164 = v165;
        tknPrintf("Error: %s (%llu) : Bad Ngram order. Was %llu. Expected an integer value in the range [1,%llu].\n", v23, v24, v25, v26, v164, *((_QWORD *)v165 + 6), v22, v11);
        std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(v307) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
        }
        else
        {
          *(_OWORD *)&__p[1] = *(_OWORD *)v306;
          __p[3] = v307;
        }
        __p[0] = &unk_24C214BA0;
        if (SHIBYTE(__p[3]) >= 0)
          v239 = (const char *)&__p[1];
        else
          v239 = (const char *)__p[1];
        conditionalAssert(v239, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2580, v167, v168);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(v307) < 0)
          operator delete(v306[0]);
        v240 = (char *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v240 = aPpx;
        v241 = (std::string *)(v240 + 8);
        if (SHIBYTE(__p[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v241, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v272 = *(_OWORD *)__p;
          *((void **)v240 + 3) = __p[2];
          *(_OWORD *)&v241->__r_.__value_.__l.__data_ = v272;
        }
        *(_QWORD *)v240 = &unk_24C214BA0;
      }
      v32 = getNextToken(v19, (uint64_t)__s, dword_209A7F9B4);
      if (!v32)
      {
        v148 = (char *)*((_QWORD *)a2 + 2);
        v147 = (char *)a2 + 16;
        v146 = v148;
        if (v147[23] >= 0)
          v146 = v147;
        tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v28, v29, v30, v31, v146, *((_QWORD *)v147 + 6));
        std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(v307) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
        }
        else
        {
          *(_OWORD *)&__p[1] = *(_OWORD *)v306;
          __p[3] = v307;
        }
        __p[0] = &unk_24C214BA0;
        if (SHIBYTE(__p[3]) >= 0)
          v236 = (const char *)&__p[1];
        else
          v236 = (const char *)__p[1];
        conditionalAssert(v236, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2588, v149, v150);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(v307) < 0)
          operator delete(v306[0]);
        v237 = (char *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v237 = aPpx;
        v238 = (std::string *)(v237 + 8);
        if (SHIBYTE(__p[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v238, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v271 = *(_OWORD *)__p;
          *((void **)v237 + 3) = __p[2];
          *(_OWORD *)&v238->__r_.__value_.__l.__data_ = v271;
        }
        *(_QWORD *)v237 = &unk_24C214BA0;
      }
      if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
      {
        if (v314)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          v33 = *(__int32 **)__s;
          --*(_QWORD *)&__s[16];
        }
        else
        {
          v33 = *(__int32 **)__s;
          if (*(_QWORD *)&__s[8])
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
        }
      }
      else
      {
        v33 = *(__int32 **)__s;
        *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
      }
      if ((v34 & 1) == 0
      {
        v100 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v100);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v100;
      }
      v35 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v33, &v308);
      if (v308)
      {
        v153 = (char *)*((_QWORD *)a2 + 2);
        v152 = (char *)a2 + 16;
        v151 = v153;
        if (v152[23] >= 0)
          v154 = v152;
        else
          v154 = v151;
        v155 = *((_QWORD *)v152 + 6);
        v156 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
        loggableUnicode(v156, __p);
        if (SHIBYTE(__p[2]) >= 0)
          v161 = __p;
        else
          v161 = (void **)__p[0];
        tknPrintf("Error: %s (%llu) : Invalid weight. Was '%s'. Expected a numerical decimal value.\n", v157, v158, v159, v160, v154, v155, v161);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(v307) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
        }
        else
        {
          *(_OWORD *)&__p[1] = *(_OWORD *)v306;
          __p[3] = v307;
        }
        __p[0] = &unk_24C214BA0;
        if (SHIBYTE(__p[3]) >= 0)
          v264 = (const char *)&__p[1];
        else
          v264 = (const char *)__p[1];
        conditionalAssert(v264, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2597, v162, v163);
        __p[0] = (void *)aPpx;
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(v307) < 0)
          operator delete(v306[0]);
        v265 = (char *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v265 = aPpx;
        v266 = (std::string *)(v265 + 8);
        if (SHIBYTE(__p[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v266, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v282 = *(_OWORD *)__p;
          *((void **)v265 + 3) = __p[2];
          *(_OWORD *)&v266->__r_.__value_.__l.__data_ = v282;
        }
        *(_QWORD *)v265 = &unk_24C214BA0;
      }
      v36 = v35;
      if (v35 != 0.0)
      {
        if (!getNextToken(v32, (uint64_t)__s, dword_209A7F9B4))
        {
          v194 = (char *)*((_QWORD *)a2 + 2);
          v193 = (char *)a2 + 16;
          v192 = v194;
          if (v193[23] >= 0)
            v192 = v193;
          tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v37, v38, v39, v40, v192, *((_QWORD *)v193 + 6));
          std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(v307) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
          }
          else
          {
            *(_OWORD *)&__p[1] = *(_OWORD *)v306;
            __p[3] = v307;
          }
          __p[0] = &unk_24C214BA0;
          if (SHIBYTE(__p[3]) >= 0)
            v260 = (const char *)&__p[1];
          else
            v260 = (const char *)__p[1];
          conditionalAssert(v260, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2609, v195, v196);
          __p[0] = (void *)aPpx;
          if (SHIBYTE(__p[3]) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(v307) < 0)
            operator delete(v306[0]);
          v261 = (char *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v261 = aPpx;
          v262 = (std::string *)(v261 + 8);
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v262, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v281 = *(_OWORD *)__p;
            *((void **)v261 + 3) = __p[2];
            *(_OWORD *)&v262->__r_.__value_.__l.__data_ = v281;
          }
          *(_QWORD *)v261 = &unk_24C214BA0;
        }
        v41 = *(_QWORD *)(v4 + 64);
        if (*(_QWORD *)(v4 + 72) != v41)
        {
          for (i = 0; i < (*(_QWORD *)(v4 + 72) - v41) >> 3; ++i)
          {
            v43 = *(uint64_t **)(v41 + 8 * i);
            v44 = *((_DWORD *)v43 + 11);
            if (v44 == 3)
            {
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v314)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                  v45 = *(const __int32 **)__s;
                  --*(_QWORD *)&__s[16];
                }
                else
                {
                  v45 = *(const __int32 **)__s;
                  if (*(_QWORD *)&__s[8])
                    *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                v45 = *(const __int32 **)__s;
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              v47 = wcslen(v45);
              v38 = v47;
              if (*((char *)v43 + 23) < 0)
              {
                if (v47 == v43[1])
                {
                  if (v47 == -1)
LABEL_282:
                    std::wstring::__throw_out_of_range[abi:ne180100]();
                  v43 = (uint64_t *)*v43;
                  if (!v47)
                  {
LABEL_256:
                    v111 = (char *)*((_QWORD *)a2 + 2);
                    v110 = (char *)a2 + 16;
                    v109 = v111;
                    if (v110[23] >= 0)
                      v112 = v110;
                    else
                      v112 = v109;
                    v113 = *((_QWORD *)v110 + 6);
                    v114 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
                    loggableUnicode(v114, __p);
                    if (SHIBYTE(__p[2]) >= 0)
                      v119 = __p;
                    else
                      v119 = (void **)__p[0];
                    tknPrintf("Error: %s (%llu) : Binding feature already defined for '%s'.\n", v115, v116, v117, v118, v112, v113, v119);
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
                    __p[0] = (void *)aPpx;
                    if (SHIBYTE(v307) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
                    }
                    else
                    {
                      *(_OWORD *)&__p[1] = *(_OWORD *)v306;
                      __p[3] = v307;
                    }
                    __p[0] = &unk_24C214BA0;
                    if (SHIBYTE(__p[3]) >= 0)
                      v242 = (const char *)&__p[1];
                    else
                      v242 = (const char *)__p[1];
                    conditionalAssert(v242, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2624, v120, v121);
                    __p[0] = (void *)aPpx;
                    if (SHIBYTE(__p[3]) < 0)
                      operator delete(__p[1]);
                    if (SHIBYTE(v307) < 0)
                      operator delete(v306[0]);
                    v243 = (char *)__cxa_allocate_exception(0x20uLL);
                    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                    *(_QWORD *)v243 = aPpx;
                    v244 = (std::string *)(v243 + 8);
                    if (SHIBYTE(__p[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external(v244, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                    }
                    else
                    {
                      v273 = *(_OWORD *)__p;
                      *((void **)v243 + 3) = __p[2];
                      *(_OWORD *)&v244->__r_.__value_.__l.__data_ = v273;
                    }
                    *(_QWORD *)v243 = &unk_24C214BA0;
                  }
                  goto LABEL_100;
                }
              }
              else if (v47 == *((unsigned __int8 *)v43 + 23))
              {
                if (v47 == -1)
                  goto LABEL_282;
                if (!v47)
                  goto LABEL_256;
LABEL_100:
                if (!wmemcmp((const __int32 *)v43, v45, v47))
                  goto LABEL_256;
              }
            }
            else if (v44 == v12)
            {
              if (*((_DWORD *)v43 + 10) == v27)
              {
                v138 = (char *)*((_QWORD *)a2 + 2);
                v137 = (char *)a2 + 16;
                v136 = v138;
                if (v137[23] >= 0)
                  v136 = v137;
                tknPrintf("Error: %s (%llu) : Feature already defined for Ngram order %llu.\n", v37, v38, v39, v40, v136, *((_QWORD *)v137 + 6), v27);
                std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
                __p[0] = (void *)aPpx;
                if (SHIBYTE(v307) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
                }
                else
                {
                  *(_OWORD *)&__p[1] = *(_OWORD *)v306;
                  __p[3] = v307;
                }
                __p[0] = &unk_24C214BA0;
                if (SHIBYTE(__p[3]) >= 0)
                  v197 = (const char *)&__p[1];
                else
                  v197 = (const char *)__p[1];
                conditionalAssert(v197, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2635, v139, v140);
                __p[0] = (void *)aPpx;
                if (SHIBYTE(__p[3]) < 0)
                  operator delete(__p[1]);
                if (SHIBYTE(v307) < 0)
                  operator delete(v306[0]);
                v198 = (char *)__cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                *(_QWORD *)v198 = aPpx;
                v199 = (std::string *)(v198 + 8);
                if (SHIBYTE(__p[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v199, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  v263 = *(_OWORD *)__p;
                  *((void **)v198 + 3) = __p[2];
                  *(_OWORD *)&v199->__r_.__value_.__l.__data_ = v263;
                }
                *(_QWORD *)v198 = &unk_24C214BA0;
              }
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v314)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                  v46 = *(const __int32 **)__s;
                  --*(_QWORD *)&__s[16];
                }
                else
                {
                  v46 = *(const __int32 **)__s;
                  if (*(_QWORD *)&__s[8])
                    *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                v46 = *(const __int32 **)__s;
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              v48 = wcslen(v46);
              v38 = v48;
              if (*((char *)v43 + 23) < 0)
              {
                if (v48 != v43[1])
                  goto LABEL_266;
                if (v48 == -1)
LABEL_283:
                  std::wstring::__throw_out_of_range[abi:ne180100]();
                v49 = (const __int32 *)*v43;
                if (v38)
                {
LABEL_112:
                  if (wmemcmp(v49, v46, v38))
                  {
LABEL_266:
                    v124 = (char *)*((_QWORD *)a2 + 2);
                    v123 = (char *)a2 + 16;
                    v122 = v124;
                    if (v123[23] >= 0)
                      v125 = v123;
                    else
                      v125 = v122;
                    v126 = *((_QWORD *)v123 + 6);
                    v127 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
                    v128 = __p;
                    loggableUnicode(v127, __p);
                    if (SHIBYTE(__p[2]) < 0)
                      v128 = (void **)__p[0];
                    if (*((char *)v43 + 23) < 0)
                      v43 = (uint64_t *)*v43;
                    loggableUnicode((unsigned int *)v43, v306);
                    if (SHIBYTE(v307) >= 0)
                      v133 = v306;
                    else
                      v133 = (void **)v306[0];
                    tknPrintf("Error: %s (%llu) : Model %s specified for feature that is already associated with model %s.\n", v129, v130, v131, v132, v125, v126, v128, v133);
                    if (SHIBYTE(v307) < 0)
                      operator delete(v306[0]);
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    std::string::basic_string[abi:ne180100]<0>(v306, &byte_209A88803);
                    __p[0] = (void *)aPpx;
                    if (SHIBYTE(v307) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v306[0], (std::string::size_type)v306[1]);
                    }
                    else
                    {
                      *(_OWORD *)&__p[1] = *(_OWORD *)v306;
                      __p[3] = v307;
                    }
                    __p[0] = &unk_24C214BA0;
                    if (SHIBYTE(__p[3]) >= 0)
                      v257 = (const char *)&__p[1];
                    else
                      v257 = (const char *)__p[1];
                    conditionalAssert(v257, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2643, v134, v135);
                    __p[0] = (void *)aPpx;
                    if (SHIBYTE(__p[3]) < 0)
                      operator delete(__p[1]);
                    if (SHIBYTE(v307) < 0)
                      operator delete(v306[0]);
                    v258 = (char *)__cxa_allocate_exception(0x20uLL);
                    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                    *(_QWORD *)v258 = aPpx;
                    v259 = (std::string *)(v258 + 8);
                    if (SHIBYTE(__p[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external(v259, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                    }
                    else
                    {
                      v280 = *(_OWORD *)__p;
                      *((void **)v258 + 3) = __p[2];
                      *(_OWORD *)&v259->__r_.__value_.__l.__data_ = v280;
                    }
                    *(_QWORD *)v258 = &unk_24C214BA0;
                  }
                }
              }
              else
              {
                if (v48 != *((unsigned __int8 *)v43 + 23))
                  goto LABEL_266;
                v49 = (const __int32 *)v43;
                if (v38 == -1)
                  goto LABEL_283;
                if (v38)
                  goto LABEL_112;
              }
            }
            v41 = *(_QWORD *)(v4 + 64);
          }
        }
        v50 = operator new();
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v314)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            --*(_QWORD *)&__s[16];
          }
          else if (*(_QWORD *)&__s[8])
          {
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
        }
        TCRFModel::TCRFModel(v50, v12, v27, v36);
        if (v10)
        {
          if (*(_BYTE *)(getPropCheckTokenExistence() + 8))
          {
            v51 = (__int32 *)v50;
            if (*(char *)(v50 + 23) < 0)
              v51 = *(__int32 **)v50;
            if (!TLexicon::findHeadClone(*(_QWORD *)(v4 + 16), v51))
            {
              v52 = (unsigned int *)v50;
              if (*(char *)(v50 + 23) < 0)
                v52 = *(unsigned int **)v50;
              loggableUnicode(v52, __p);
              v57 = __p;
              if (SHIBYTE(__p[2]) < 0)
                v57 = (void **)__p[0];
              tknPrintf("Warning: Binding token '%s' isn't lexicalized.\n", v53, v54, v55, v56, v57);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
            }
          }
          v59 = *(uint64_t **)(v4 + 72);
          v58 = *(_QWORD *)(v4 + 80);
          if ((unint64_t)v59 < v58)
            goto LABEL_211;
          v60 = ((char *)v59 - *v304) >> 3;
          if ((unint64_t)(v60 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v61 = v58 - (_QWORD)*v304;
          v62 = v61 >> 2;
          if (v61 >> 2 <= (unint64_t)(v60 + 1))
            v62 = v60 + 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          if (v63)
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v302, v63);
          else
            v64 = 0;
          v69 = (uint64_t *)&v64[8 * v60];
          *v69 = v50;
          v70 = v69 + 1;
          v72 = *(char **)(v4 + 64);
          v71 = *(char **)(v4 + 72);
          if (v71 != v72)
          {
            do
            {
              v73 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *--v69 = v73;
            }
            while (v71 != v72);
LABEL_223:
            v71 = *v304;
          }
        }
        else
        {
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v314)
            {
              LODWORD(v306[0]) = 0;
              TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v306, 1uLL);
              v65 = *(__int32 **)__s;
              --*(_QWORD *)&__s[16];
            }
            else
            {
              v65 = *(__int32 **)__s;
              if (*(_QWORD *)&__s[8])
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
            }
          }
          else
          {
            v65 = *(__int32 **)__s;
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v65);
          v66 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)v305, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if ((_QWORD *)(v4 + 256) == v66)
          {
            TBuffer<char>::assign((uint64_t)&v323, a3);
            LOBYTE(__p[0]) = getDirSep();
            TBuffer<char>::insert((uint64_t)&v323, *((unint64_t *)&v324 + 1), (char *)__p, 1uLL);
            v67 = *(_QWORD *)(v4 + 16);
            if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
            {
              if (v314)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                v68 = *(unsigned int **)__s;
                --*(_QWORD *)&__s[16];
              }
              else
              {
                v68 = *(unsigned int **)__s;
                if (*(_QWORD *)&__s[8])
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
              }
            }
            else
            {
              v68 = *(unsigned int **)__s;
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
            }
            TLocaleInfo::unicodeToMultiByte(v67 + 240, v68, (uint64_t)&v323);
            TBuffer<char>::insert((uint64_t)&v323, *((unint64_t *)&v324 + 1), ".svc", 4uLL);
            TBuffer<char>::assign((uint64_t)&v319, a3);
            LOBYTE(__p[0]) = getDirSep();
            TBuffer<char>::insert((uint64_t)&v319, *((unint64_t *)&v320 + 1), (char *)__p, 1uLL);
            v74 = *(_QWORD *)(v4 + 16);
            if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
            {
              if (v314)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                v75 = *(unsigned int **)__s;
                --*(_QWORD *)&__s[16];
              }
              else
              {
                v75 = *(unsigned int **)__s;
                if (*(_QWORD *)&__s[8])
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
              }
            }
            else
            {
              v75 = *(unsigned int **)__s;
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
            }
            TLocaleInfo::unicodeToMultiByte(v74 + 240, v75, (uint64_t)&v319);
            TBuffer<char>::insert((uint64_t)&v319, *((unint64_t *)&v320 + 1), ".voc", 4uLL);
            if (*((_QWORD *)&v320 + 1) >= (unint64_t)v320)
            {
              if (v322)
              {
                LOBYTE(__p[0]) = 0;
                TBuffer<char>::insert((uint64_t)&v319, *((unint64_t *)&v320 + 1), (char *)__p, 1uLL);
                --*((_QWORD *)&v320 + 1);
              }
              else if ((_QWORD)v320)
              {
                *((_BYTE *)v319 + v320 - 1) = 0;
              }
            }
            else
            {
              *((_BYTE *)v319 + *((_QWORD *)&v320 + 1)) = 0;
            }
            v76 = v319;
            if (*((_QWORD *)&v324 + 1) >= (unint64_t)v324)
            {
              if (v326)
              {
                LOBYTE(__p[0]) = 0;
                TBuffer<char>::insert((uint64_t)&v323, *((unint64_t *)&v324 + 1), (char *)__p, 1uLL);
                --*((_QWORD *)&v324 + 1);
              }
              else if ((_QWORD)v324)
              {
                *((_BYTE *)v323 + v324 - 1) = 0;
              }
            }
            else
            {
              *((_BYTE *)v323 + *((_QWORD *)&v324 + 1)) = 0;
            }
            v77 = SDVoc_New(v76, v323, 0, 0, (FileSpec *)&byte_209A88803, 0, 0, 0, 0);
            v78 = (unint64_t *)operator new();
            TLmScore::TLmScore(v78, v77);
            if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
            {
              if (v314)
              {
                LODWORD(v306[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v306, 1uLL);
                v79 = *(__int32 **)__s;
                --*(_QWORD *)&__s[16];
              }
              else
              {
                v79 = *(__int32 **)__s;
                if (*(_QWORD *)&__s[8])
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
              }
            }
            else
            {
              v79 = *(__int32 **)__s;
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v79);
            v306[0] = __p;
            std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(v305, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v306)[7] = (uint64_t)v78;
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            v317 = 0u;
            v318 = 0u;
            v316 = 0u;
            memset(__p, 0, sizeof(__p));
            AllowedWordCollations = SDVoc_GetAllowedWordCollations(v77, (uint64_t)__p, 0xAu);
            if (AllowedWordCollations)
            {
              v84 = AllowedWordCollations;
              v85 = __p;
              while (*v85 != (void *)-2)
              {
                ++v85;
                if (!--v84)
                  goto LABEL_189;
              }
            }
            else
            {
LABEL_189:
              v86 = *((_QWORD *)&v320 + 1);
              if (*((_QWORD *)&v320 + 1) >= (unint64_t)v320)
              {
                if (v322)
                {
                  LOBYTE(v306[0]) = 0;
                  TBuffer<char>::insert((uint64_t)&v319, *((unint64_t *)&v320 + 1), (char *)v306, 1uLL);
                  --*((_QWORD *)&v320 + 1);
                }
                else if ((_QWORD)v320)
                {
                  *((_BYTE *)v319 + v320 - 1) = 0;
                }
              }
              else
              {
                *((_BYTE *)v319 + *((_QWORD *)&v320 + 1)) = 0;
              }
              tknPrintf("Warning: Identity table not allowed in voc %s.\n", v86, v81, v82, v83, v319);
              tknPrintf("Info: Allowing identity table\n", v87, v88, v89, v90);
              v306[0] = (void *)-2;
              SDVoc_SetAllowedWordCollations(v77, (uint64_t)v306, 1u);
            }
          }
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v314)
            {
              LODWORD(v306[0]) = 0;
              TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v306, 1uLL);
              v91 = *(__int32 **)__s;
              --*(_QWORD *)&__s[16];
            }
            else
            {
              v91 = *(__int32 **)__s;
              if (*(_QWORD *)&__s[8])
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
            }
          }
          else
          {
            v91 = *(__int32 **)__s;
            *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v91);
          v306[0] = __p;
          *(_QWORD *)(v50 + 32) = std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(v305, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v306)[7];
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v92 = *(_DWORD *)(v50 + 44);
          if (v92 > 1)
          {
            if (v92 == 2 && v27 >= 2)
            {
              __p[0] = **(void ***)(v50 + 32);
              std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>((uint64_t **)(v4 + 32), (unint64_t *)__p, (uint64_t *)__p);
            }
          }
          else if (!*(_QWORD *)(v4 + 352))
          {
            *(_QWORD *)(v4 + 352) = *(_QWORD *)(v50 + 32);
          }
          v59 = *(uint64_t **)(v4 + 72);
          v93 = *(_QWORD *)(v4 + 80);
          if ((unint64_t)v59 < v93)
          {
LABEL_211:
            *v59 = v50;
            v70 = v59 + 1;
            goto LABEL_226;
          }
          v94 = ((char *)v59 - *v304) >> 3;
          if ((unint64_t)(v94 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v95 = v93 - (_QWORD)*v304;
          v96 = v95 >> 2;
          if (v95 >> 2 <= (unint64_t)(v94 + 1))
            v96 = v94 + 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v96;
          if (v63)
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v302, v63);
          else
            v64 = 0;
          v69 = (uint64_t *)&v64[8 * v94];
          *v69 = v50;
          v70 = v69 + 1;
          v97 = *(char **)(v4 + 64);
          v71 = *(char **)(v4 + 72);
          if (v71 != v97)
          {
            do
            {
              v98 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *--v69 = v98;
            }
            while (v71 != v97);
            goto LABEL_223;
          }
        }
        *(_QWORD *)(v4 + 64) = v69;
        *(_QWORD *)(v4 + 72) = v70;
        *(_QWORD *)(v4 + 80) = &v64[8 * v63];
        if (v71)
          operator delete(v71);
LABEL_226:
        *(_QWORD *)(v4 + 72) = v70;
      }
    }
  }
  v101 = *(char **)(v4 + 64);
  v102 = *(char **)(v4 + 72);
  v103 = v102 - v101;
  if (v102 == v101)
  {
    v108 = 0xFFFFFFFFLL;
  }
  else
  {
    v104 = 0;
    v105 = v103 >> 3;
    if (v105 <= 1)
      v105 = 1;
    do
    {
      v106 = *(_QWORD *)v101;
      v101 += 8;
      v107 = *(_DWORD *)(v106 + 40);
      if (v107 > v104)
        v104 = v107;
      --v105;
    }
    while (v105);
    v108 = v104 - 1;
  }
  *(_QWORD *)(v4 + 304) = v108;
  if (v322)
  {
    this = (uint64_t)v319;
    if (v319 != (FileSpec *)v321)
    {
      if (v319)
        this = MEMORY[0x20BD149A8]();
    }
  }
  if (v326)
  {
    this = (uint64_t)v323;
    if (v323 != (FileSpec *)v325)
    {
      if (v323)
        this = MEMORY[0x20BD149A8]();
    }
  }
  if (v311)
  {
    this = *(_QWORD *)v309;
    if (*(_BYTE **)v309 != v310)
    {
      if (*(_QWORD *)v309)
        this = MEMORY[0x20BD149A8]();
    }
  }
  if (v314)
  {
    this = *(_QWORD *)__s;
    if (*(_QWORD **)__s != v313)
    {
      if (*(_QWORD *)__s)
        return MEMORY[0x20BD149A8]();
    }
  }
  return this;
}

void sub_2099FA210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;
  unint64_t v31;
  unint64_t v32;

  MEMORY[0x20BD149A8](v28, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xA50]))
  {
    if (STACK[0x938] != a14 && STACK[0x938] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0xB70]))
  {
    v31 = STACK[0xA58];
    if (STACK[0xA58] != a15)
    {
      if (v31)
        MEMORY[0x20BD149A8](v31, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x4B0]) && a28 != a16 && a28)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x8D0]))
  {
    v32 = STACK[0x4B8];
    if (STACK[0x4B8] != a17)
    {
      if (v32)
        MEMORY[0x20BD149A8](v32, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TCompounder::loadOptionalLists(TCompounder *this, TInputStream *a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  char *v10;
  const __int32 *v11;
  __int32 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  TRegExp *v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  TRegExp *v31;
  TRegExp *v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  void **v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void **v48;
  __int32 *v49;
  const TLocaleInfo **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  _QWORD *exception;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  _QWORD *v73;
  std::string *v74;
  const char *v75;
  _QWORD *v76;
  std::string *v77;
  __int128 v78;
  const char *v79;
  _QWORD *v80;
  std::string *v81;
  __int128 v82;
  __int128 v83;
  const char *v84;
  _QWORD *v85;
  std::string *v86;
  __int128 v87;
  __int128 v88;
  TCompounder *v89;
  char *v90;
  uint64_t **v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  TRegExp *v95;
  _BYTE v96[24];
  uint64_t v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  _BYTE __p[24];
  _QWORD v103[2];
  __int128 v104;
  uint64_t v105;
  __int32 *v106;
  __int128 v107;
  uint64_t v108;
  __int32 *v109;
  __int128 v110;
  uint64_t v111;
  __int32 *v112;
  __int128 v113;
  uint64_t v114;
  __int32 *v115;
  __int128 v116;
  uint64_t v117;
  __int32 *v118;
  __int128 v119;
  uint64_t v120;
  __int32 *v121;
  int64x2_t v122;
  uint64_t v123;
  __int32 *v124;
  uint64_t v125;
  __int128 v126;
  __int32 *v127;
  uint64_t v128;
  __int128 v129;
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "WordFlag", (uint64_t)&pWordFlagVersion, 4))
    {
      std::string::basic_string[abi:ne180100]<0>(v98, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v99) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v98[0], (std::string::size_type)v98[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v98;
        v103[0] = v99;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v103[0] >= 0)
        v67 = &__p[8];
      else
        v67 = *(const char **)&__p[8];
      conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2834, v56, v57);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v103[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v99) < 0)
        operator delete(v98[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v69 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v78 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v78;
      }
      *exception = &unk_24C214BA0;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v98, a2);
    v4 = *((_QWORD *)a2 + 12);
    *((_QWORD *)this + 48) = v4;
    v5 = v98[0];
    if (v4 > 2)
    {
      if (*((_DWORD *)v98[0] + 10))
      {
        loggableFileObject((uint64_t *)v98[0]);
        if (__p[23] >= 0)
          v64 = __p;
        else
          v64 = *(_BYTE **)__p;
        tknPrintf("Error: %sBad attribute declaration, expected an object\n", v60, v61, v62, v63, v64);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v96, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if ((v96[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v96;
          v103[0] = *(_QWORD *)&v96[16];
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v103[0] >= 0)
          v79 = &__p[8];
        else
          v79 = *(const char **)&__p[8];
        conditionalAssert(v79, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2866, v65, v66);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v103[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if ((v96[23] & 0x80000000) != 0)
          operator delete(*(void **)v96);
        v80 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v80 = aPpx;
        v81 = (std::string *)(v80 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v87 = *(_OWORD *)__p;
          v80[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v87;
        }
        *v80 = &unk_24C214BA0;
      }
    }
    else
    {
      *(_OWORD *)&__p[8] = xmmword_209A57D80;
      *(_QWORD *)__p = dword_209A7FA54;
      v103[0] = -1;
      v103[1] = dword_209A7FA68;
      v104 = xmmword_209A57D80;
      v105 = -1;
      v106 = dword_209A7FA8C;
      v107 = xmmword_209A57D80;
      v108 = -1;
      v109 = dword_209A7FAA8;
      v110 = xmmword_209A57D80;
      v111 = -1;
      v112 = dword_209A7FB18;
      v113 = xmmword_209A57D80;
      v114 = -1;
      v115 = dword_209A7FB88;
      v116 = xmmword_209A57D80;
      v117 = -1;
      v118 = dword_209A7FC08;
      v119 = xmmword_209A57D80;
      v120 = 1;
      v121 = dword_209A7FC20;
      v122 = vdupq_n_s64(2uLL);
      v123 = -1;
      v124 = dword_209A7FC48;
      v125 = 2;
      v126 = xmmword_209A7EB90;
      v127 = dword_209A7FC84;
      v128 = 2;
      v129 = xmmword_209A7EB90;
      if (TFileObject::verify((uint64_t)v98[0], (uint64_t)__p, 0xAuLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v100, &byte_209A88803);
        *(_QWORD *)v96 = aPpx;
        if (SHIBYTE(v101) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v96[8], (const std::string::value_type *)v100[0], (std::string::size_type)v100[1]);
        }
        else
        {
          *(_OWORD *)&v96[8] = *(_OWORD *)v100;
          v97 = v101;
        }
        *(_QWORD *)v96 = &unk_24C214BA0;
        if (v97 >= 0)
          v75 = &v96[8];
        else
          v75 = *(const char **)&v96[8];
        conditionalAssert(v75, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2861, v6, v7);
        *(_QWORD *)v96 = aPpx;
        if (SHIBYTE(v97) < 0)
          operator delete(*(void **)&v96[8]);
        if (SHIBYTE(v101) < 0)
          operator delete(v100[0]);
        v76 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v96, &byte_209A88803);
        *v76 = aPpx;
        v77 = (std::string *)(v76 + 1);
        if ((v96[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
        }
        else
        {
          v83 = *(_OWORD *)v96;
          v76[3] = *(_QWORD *)&v96[16];
          *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v83;
        }
        *v76 = &unk_24C214BA0;
      }
    }
    v8 = (uint64_t *)*((_QWORD *)v5 + 3);
    if (v8)
    {
      v93 = 0;
      v9 = (uint64_t **)((char *)this + 272);
      v10 = (char *)this + 280;
      v89 = this;
      v90 = (char *)this + 280;
      v91 = (uint64_t **)((char *)this + 272);
      while (1)
      {
        v11 = (const __int32 *)v8[1];
        if (!wcscmp(v11, dword_209A7FC08))
          v12 = dword_209A7FC20;
        else
          v12 = (__int32 *)v11;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v12);
        v13 = (char *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)v9, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v10 != v13)
        {
          loggableFileObject(v8);
          v18 = __p;
          if (__p[23] < 0)
            v18 = *(_BYTE **)__p;
          tknPrintf("Error: %sRedefinition\n", v14, v15, v16, v17, v18);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v93 = 1;
          goto LABEL_21;
        }
        v19 = *((_QWORD *)this + 2);
        v20 = *((_QWORD *)this + 48);
        *(_QWORD *)__p = v103;
        *(_OWORD *)&__p[8] = xmmword_209A57DD0;
        v130 = 1;
        v21 = v8[3];
        if (!v21)
        {
          v22 = 0;
          v95 = 0;
          v10 = v90;
          v9 = v91;
          goto LABEL_98;
        }
        v22 = 0;
        v94 = v19;
        v95 = 0;
        v23 = 0;
        v92 = v19 + 240;
        do
        {
          v24 = wcscmp(*(const __int32 **)(v21 + 8), (const __int32 *)"T");
          v25 = v24;
          if (v20 <= 2 && !v24)
          {
            loggableFileObject((uint64_t *)v21);
            v30 = v96;
            if (v96[23] < 0)
              v30 = *(_BYTE **)v96;
            tknPrintf("Error: %sTag attribute not supported in version %lld.  Must be version 3 or higher.\n", v26, v27, v28, v29, v30, v20);
LABEL_30:
            if ((v96[23] & 0x80000000) != 0)
              operator delete(*(void **)v96);
LABEL_33:
            v23 = 1;
            goto LABEL_34;
          }
          if ((TFileObject::verify((TFileObject *)v21, 1, 0) & 1) != 0)
            goto LABEL_33;
          if (*(_DWORD *)(v21 + 40) == 2)
          {
            if (v25)
            {
              if (v22)
              {
                v31 = v22;
                v32 = v22;
              }
              else
              {
                v31 = (TRegExp *)operator new();
                TRegExp::TRegExp(v31, v92);
                v32 = v31;
              }
            }
            else
            {
              v32 = v95;
              if (v95)
              {
                v31 = v22;
              }
              else
              {
                v32 = (TRegExp *)operator new();
                TRegExp::TRegExp(v32, v92);
                v31 = v22;
                v95 = v32;
              }
            }
            v22 = v31;
            TRegExp::add((const TLocaleInfo **)v32, *(__int32 **)(v21 + 24), 0);
          }
          else
          {
            if (TLexicon::checkName(v94, *(int **)(v21 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              loggableFileObject((uint64_t *)v21);
              v33 = v96[23];
              v34 = *(_BYTE **)v96;
              loggableUnicode(*(unsigned int **)(v21 + 24), v100);
              v39 = v96;
              if (v33 < 0)
                v39 = v34;
              v40 = v100;
              if (v101 < 0)
                v40 = (void **)v100[0];
              tknPrintf("Error: %s'%s' is an invalid token name.\n", v35, v36, v37, v38, v39, v40);
              if (SHIBYTE(v101) < 0)
                operator delete(v100[0]);
              goto LABEL_30;
            }
            if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v94, *(__int32 **)(v21 + 24)))
            {
              loggableFileObject((uint64_t *)v21);
              v41 = v96[23];
              v42 = *(_BYTE **)v96;
              loggableUnicode(*(unsigned int **)(v21 + 24), v100);
              v47 = v96;
              if (v41 < 0)
                v47 = v42;
              v48 = v100;
              if (v101 < 0)
                v48 = (void **)v100[0];
              tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v43, v44, v45, v46, v47, v48);
              if (SHIBYTE(v101) < 0)
                operator delete(v100[0]);
              if ((v96[23] & 0x80000000) != 0)
                operator delete(*(void **)v96);
            }
            TBuffer<wchar_t>::resize((uint64_t)__p, 0);
            TRegExp::stringToRegExp(*(_QWORD *)(v21 + 24), (uint64_t)__p, 0, 3);
            if (v25)
            {
              if (!v22)
              {
                v22 = (TRegExp *)operator new();
                TRegExp::TRegExp(v22, v92);
              }
              if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
              {
                if (v130)
                {
                  *(_DWORD *)v96 = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v96, 1uLL);
                  v49 = *(__int32 **)__p;
                  --*(_QWORD *)&__p[16];
                }
                else
                {
                  v49 = *(__int32 **)__p;
                  if (*(_QWORD *)&__p[8])
                    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
                }
              }
              else
              {
                v49 = *(__int32 **)__p;
                *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
              }
              v50 = (const TLocaleInfo **)v22;
            }
            else
            {
              if (!v95)
              {
                v95 = (TRegExp *)operator new();
                TRegExp::TRegExp(v95, v92);
              }
              if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
              {
                if (v130)
                {
                  *(_DWORD *)v96 = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v96, 1uLL);
                  v49 = *(__int32 **)__p;
                  --*(_QWORD *)&__p[16];
                }
                else
                {
                  v49 = *(__int32 **)__p;
                  if (*(_QWORD *)&__p[8])
                    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
                }
              }
              else
              {
                v49 = *(__int32 **)__p;
                *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
              }
              v50 = (const TLocaleInfo **)v95;
            }
            TRegExp::add(v50, v49, 0);
          }
LABEL_34:
          v21 = *(_QWORD *)(v21 + 16);
        }
        while (v21);
        if ((v23 & 1) != 0)
        {
          v10 = v90;
          v9 = v91;
          if (v22)
          {
            TRegExp::~TRegExp(v22);
            MEMORY[0x20BD149A8]();
          }
          if (v95)
          {
            TRegExp::~TRegExp(v95);
            MEMORY[0x20BD149A8]();
          }
          v22 = 0;
          goto LABEL_93;
        }
        v10 = v90;
        v9 = v91;
        if (v22)
          TRegExp::doneAdding(v22);
        if (v95)
          TRegExp::doneAdding(v95);
        else
LABEL_93:
          v95 = 0;
        if (v130 && *(_QWORD **)__p != v103 && *(_QWORD *)__p)
        {
          MEMORY[0x20BD149A8]();
          if ((v23 & 1) == 0)
            goto LABEL_98;
LABEL_112:
          v93 = 1;
          this = v89;
        }
        else
        {
          if ((v23 & 1) != 0)
            goto LABEL_112;
LABEL_98:
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v12);
          *(_QWORD *)v96 = __p;
          v51 = std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(v9, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v96);
          v51[7] = (uint64_t)v22;
          v51[8] = (uint64_t)v95;
          this = v89;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (!wcscmp(v12, dword_209A7FA54))
          {
            *((_QWORD *)v89 + 11) = v22;
            *((_QWORD *)v89 + 12) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FA68))
          {
            *((_QWORD *)v89 + 13) = v22;
            *((_QWORD *)v89 + 14) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FC20))
          {
            *((_QWORD *)v89 + 15) = v22;
            *((_QWORD *)v89 + 16) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FC48))
          {
            *((_QWORD *)v89 + 17) = v22;
            *((_QWORD *)v89 + 18) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FC84))
          {
            *((_QWORD *)v89 + 19) = v22;
            *((_QWORD *)v89 + 20) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FCBC))
          {
            if (*((_QWORD *)v89 + 48) <= 3uLL)
            {
              tknPrintf("Error: BadMiddlePieces is not supported prior to CompounderWordFlag version 4.\n", v52, v53, v54, v55);
              std::string::basic_string[abi:ne180100]<0>(v96, &byte_209A88803);
              *(_QWORD *)__p = aPpx;
              if ((v96[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
              }
              else
              {
                *(_OWORD *)&__p[8] = *(_OWORD *)v96;
                v103[0] = *(_QWORD *)&v96[16];
              }
              *(_QWORD *)__p = &unk_24C214BA0;
              if (v103[0] >= 0)
                v84 = &__p[8];
              else
                v84 = *(const char **)&__p[8];
              conditionalAssert(v84, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2920, v70, v71);
              *(_QWORD *)__p = aPpx;
              if (SHIBYTE(v103[0]) < 0)
                operator delete(*(void **)&__p[8]);
              if ((v96[23] & 0x80000000) != 0)
                operator delete(*(void **)v96);
              v85 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *v85 = aPpx;
              v86 = (std::string *)(v85 + 1);
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                v88 = *(_OWORD *)__p;
                v85[3] = *(_QWORD *)&__p[16];
                *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v88;
              }
              *v85 = &unk_24C214BA0;
            }
            *((_QWORD *)v89 + 21) = v22;
            *((_QWORD *)v89 + 22) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FA8C))
          {
            *((_QWORD *)v89 + 23) = v22;
            *((_QWORD *)v89 + 24) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FAA8))
          {
            *((_QWORD *)v89 + 25) = v22;
            *((_QWORD *)v89 + 26) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FB18))
          {
            *((_QWORD *)v89 + 27) = v22;
            *((_QWORD *)v89 + 28) = v95;
          }
          else if (!wcscmp(v12, dword_209A7FB88))
          {
            *((_QWORD *)v89 + 29) = v22;
            *((_QWORD *)v89 + 30) = v95;
          }
        }
LABEL_21:
        v8 = (uint64_t *)v8[2];
        if (!v8)
        {
          if ((v93 & 1) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v96, &byte_209A88803);
            *(_QWORD *)__p = aPpx;
            if ((v96[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v96;
              v103[0] = *(_QWORD *)&v96[16];
            }
            *(_QWORD *)__p = &unk_24C214BA0;
            if (v103[0] >= 0)
              v72 = &__p[8];
            else
              v72 = *(const char **)&__p[8];
            conditionalAssert(v72, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2942, v58, v59);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v103[0]) < 0)
              operator delete(*(void **)&__p[8]);
            if ((v96[23] & 0x80000000) != 0)
              operator delete(*(void **)v96);
            v73 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *v73 = aPpx;
            v74 = (std::string *)(v73 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              v82 = *(_OWORD *)__p;
              v73[3] = *(_QWORD *)&__p[16];
              *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v82;
            }
            *v73 = &unk_24C214BA0;
          }
          break;
        }
      }
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v98);
  }
}

void sub_2099FB5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,void *a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,void *a52,int a53,__int16 a54,char a55,char a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  if (v65)
  {
    if (v64 != v62 && v64 != 0)
      MEMORY[0x20BD149A8]();
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v63);
  _Unwind_Resume(a1);
}

void TCompounder::loadRules(TCompounder *this, TInputStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void **v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void **v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  void **v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  _QWORD *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  const char *v67;
  _QWORD *exception;
  std::string *v69;
  const char *v70;
  _QWORD *v71;
  std::string *v72;
  __int128 v73;
  __int128 v74;
  _OWORD *v75;
  char **v76;
  _BYTE __p[24];
  uint64_t v78;
  void *v79[2];
  uint64_t v80;
  _BYTE v81[24];
  _QWORD v82[128];
  char v83;
  uint64_t v84[10];
  std::string::value_type *__s[5];
  __int128 v86;
  uint64_t v87;
  __int32 *v88;
  __int128 v89;
  uint64_t v90;
  __int32 *v91;
  __int128 v92;
  uint64_t v93;
  __int32 *v94;
  __int128 v95;
  uint64_t v96;
  __int32 *v97;
  __int128 v98;
  uint64_t v99;
  __int32 *v100;
  __int128 v101;
  uint64_t v102;
  void *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 8))
    return;
  if (TInputStream::verifyHeader((uint64_t)a2, "Rules", (uint64_t)&pRulesVersion, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)v81 = aPpx;
    if (SHIBYTE(__s[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v81[8], __s[0], (std::string::size_type)__s[1]);
    }
    else
    {
      *(_OWORD *)&v81[8] = *(_OWORD *)__s;
      v82[0] = __s[2];
    }
    *(_QWORD *)v81 = &unk_24C214BA0;
    if (v82[0] >= 0)
      v67 = &v81[8];
    else
      v67 = *(const char **)&v81[8];
    conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2951, v62, v63);
    *(_QWORD *)v81 = aPpx;
    if (SHIBYTE(v82[0]) < 0)
      operator delete(*(void **)&v81[8]);
    if (SHIBYTE(__s[2]) < 0)
      operator delete(__s[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v81, &byte_209A88803);
    *exception = aPpx;
    v69 = (std::string *)(exception + 1);
    if ((v81[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v81, *(std::string::size_type *)&v81[8]);
    }
    else
    {
      v73 = *(_OWORD *)v81;
      exception[3] = *(_QWORD *)&v81[16];
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v73;
    }
    *exception = &unk_24C214BA0;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v84, a2);
  v4 = v84[0];
  v104 = xmmword_209A57DB0;
  v103 = &unk_209A7FCFC;
  v105 = -1;
  if (TFileObject::verify(v84[0], (uint64_t)&v103, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)v81 = aPpx;
    if (SHIBYTE(__s[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v81[8], __s[0], (std::string::size_type)__s[1]);
    }
    else
    {
      *(_OWORD *)&v81[8] = *(_OWORD *)__s;
      v82[0] = __s[2];
    }
    *(_QWORD *)v81 = &unk_24C214BA0;
    if (v82[0] >= 0)
      v70 = &v81[8];
    else
      v70 = *(const char **)&v81[8];
    conditionalAssert(v70, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2964, v64, v65);
    *(_QWORD *)v81 = aPpx;
    if (SHIBYTE(v82[0]) < 0)
      operator delete(*(void **)&v81[8]);
    if (SHIBYTE(__s[2]) < 0)
      operator delete(__s[0]);
    v71 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v81, &byte_209A88803);
    *v71 = aPpx;
    v72 = (std::string *)(v71 + 1);
    if ((v81[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)v81, *(std::string::size_type *)&v81[8]);
    }
    else
    {
      v74 = *(_OWORD *)v81;
      v71[3] = *(_QWORD *)&v81[16];
      *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v74;
    }
    *v71 = &unk_24C214BA0;
  }
  *(_OWORD *)&__s[1] = xmmword_209A57D80;
  __s[0] = (std::string::value_type *)dword_209A7FD10;
  __s[3] = (std::string::value_type *)-1;
  v86 = xmmword_209A57D80;
  __s[4] = (std::string::value_type *)dword_209A7FD40;
  v87 = -1;
  v89 = xmmword_209A57D80;
  v88 = dword_209A7FD74;
  v90 = -1;
  v92 = xmmword_209A57D80;
  v91 = dword_209A7FDA4;
  v93 = -1;
  v95 = xmmword_209A57D80;
  v94 = dword_209A7FDD8;
  v96 = -1;
  v98 = xmmword_209A57D80;
  v97 = dword_209A7FDF0;
  v99 = -1;
  v101 = xmmword_209A57D80;
  v100 = dword_209A7FE04;
  v102 = -1;
  *(_QWORD *)v81 = v82;
  *(_OWORD *)&v81[8] = xmmword_209A57DD0;
  v83 = 1;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_94;
  v6 = 0;
  v7 = (char *)this + 280;
  v76 = (char **)((char *)this + 392);
  do
  {
    while ((TFileObject::verify(v5, (uint64_t)__s, 7uLL, 1) & 1) != 0)
    {
      v5 = *(_QWORD *)(v5 + 16);
      v6 = 1;
      if (!v5)
        goto LABEL_99;
    }
    v8 = (_OWORD *)operator new();
    v9 = v8;
    v8[2] = 0u;
    v8[3] = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    v10 = *(_QWORD *)(v5 + 24);
    if (v10)
    {
      v75 = v8 + 2;
      do
      {
        if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FD10))
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, *(__int32 **)(v10 + 24));
          v19 = (char *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)this + 272, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (v7 == v19)
          {
            loggableFileObject((uint64_t *)v10);
            v22 = __p[23];
            v23 = *(_BYTE **)__p;
            loggableUnicode(*(unsigned int **)(v10 + 24), v79);
            v28 = __p;
            if (v22 < 0)
              v28 = v23;
            v29 = v79;
            if (v80 < 0)
              v29 = (void **)v79[0];
            tknPrintf("Error: %sLeftContext contains unknown group name '%s'\n", v24, v25, v26, v27, v28, v29);
            goto LABEL_46;
          }
          *v9 = *(_OWORD *)(v19 + 56);
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FD40))
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, *(__int32 **)(v10 + 24));
          v20 = (char *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)this + 272, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (v7 == v20)
          {
            loggableFileObject((uint64_t *)v10);
            v30 = __p[23];
            v31 = *(_BYTE **)__p;
            loggableUnicode(*(unsigned int **)(v10 + 24), v79);
            v36 = __p;
            if (v30 < 0)
              v36 = v31;
            v37 = v79;
            if (v80 < 0)
              v37 = (void **)v79[0];
            tknPrintf("Error: %sRightContext contains unknown group name '%s'\n", v32, v33, v34, v35, v36, v37);
LABEL_46:
            if (SHIBYTE(v80) < 0)
              operator delete(v79[0]);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v6 = 1;
            goto LABEL_60;
          }
          v9[1] = *(_OWORD *)(v20 + 56);
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FD74))
        {
          if (**(_DWORD **)(v10 + 24) == 49)
          {
            v21 = *((_QWORD *)v9 + 7) | 4;
LABEL_59:
            *((_QWORD *)v9 + 7) = v21;
          }
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FDA4))
        {
          if (**(_DWORD **)(v10 + 24) == 49)
          {
            v21 = *((_QWORD *)v9 + 7) | 8;
            goto LABEL_59;
          }
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FDD8))
        {
          v38 = **(_DWORD **)(v10 + 24);
          if (v38 == 48)
          {
            v21 = *((_QWORD *)v9 + 7) | 0x10;
            goto LABEL_59;
          }
          if (v38 == 49)
          {
            v21 = *((_QWORD *)v9 + 7) | 1;
            goto LABEL_59;
          }
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FDF0))
        {
          v39 = **(_DWORD **)(v10 + 24);
          if (v39 == 48)
          {
            v21 = *((_QWORD *)v9 + 7) | 0x20;
            goto LABEL_59;
          }
          if (v39 == 49)
          {
            v21 = *((_QWORD *)v9 + 7) | 2;
            goto LABEL_59;
          }
        }
        else if (!wcscmp(*(const __int32 **)(v10 + 8), dword_209A7FE04))
        {
          if (!TLexicon::checkName(*((_QWORD *)this + 2), *(int **)(v10 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            if (*(_BYTE *)(getPropCheckTokenExistence() + 8)
              && !TLexicon::findHeadClone(*((_QWORD *)this + 2), *(__int32 **)(v10 + 24)))
            {
              loggableUnicode(*(unsigned int **)(v10 + 24), __p);
              v44 = __p;
              if (__p[23] < 0)
                v44 = *(_BYTE **)__p;
              tknPrintf("Warning: Binding token '%s' isn't lexicalized.\n", v40, v41, v42, v43, v44);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            TLexicon::getWrittenForm(*((_QWORD *)this + 2), *(__int32 **)(v10 + 24), (uint64_t)v81);
            if (*(_QWORD *)&v81[16] >= *(_QWORD *)&v81[8])
            {
              if (v83)
              {
                *(_DWORD *)__p = 0;
                TBuffer<wchar_t>::insert((uint64_t)v81, *(unint64_t *)&v81[16], (int *)__p, 1uLL);
                --*(_QWORD *)&v81[16];
              }
              else if (*(_QWORD *)&v81[8])
              {
                *(_DWORD *)(*(_QWORD *)v81 + 4 * *(_QWORD *)&v81[8] - 4) = 0;
              }
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v81 + 4 * *(_QWORD *)&v81[16]) = 0;
            }
            MEMORY[0x20BD147A4](v75);
            goto LABEL_60;
          }
          loggableFileObject((uint64_t *)v10);
          v11 = __p[23];
          v12 = *(_BYTE **)__p;
          loggableUnicode(*(unsigned int **)(v10 + 24), v79);
          v17 = __p;
          if (v11 < 0)
            v17 = v12;
          v18 = v79;
          if (v80 < 0)
            v18 = (void **)v79[0];
          tknPrintf("Error: %s'%s' is an invalid token name.\n", v13, v14, v15, v16, v17, v18);
          goto LABEL_46;
        }
LABEL_60:
        v10 = *(_QWORD *)(v10 + 16);
      }
      while (v10);
    }
    v46 = (_QWORD *)*((_QWORD *)this + 50);
    v45 = *((_QWORD *)this + 51);
    if ((unint64_t)v46 >= v45)
    {
      v48 = ((char *)v46 - *v76) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v49 = v45 - (_QWORD)*v76;
      v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1))
        v50 = v48 + 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 408, v51);
      else
        v52 = 0;
      v53 = &v52[8 * v48];
      *(_QWORD *)v53 = v9;
      v47 = v53 + 8;
      v55 = (char *)*((_QWORD *)this + 49);
      v54 = (char *)*((_QWORD *)this + 50);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *((_QWORD *)v53 - 1) = v56;
          v53 -= 8;
        }
        while (v54 != v55);
        v54 = *v76;
      }
      *((_QWORD *)this + 49) = v53;
      *((_QWORD *)this + 50) = v47;
      *((_QWORD *)this + 51) = &v52[8 * v51];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v46 = v9;
      v47 = v46 + 1;
    }
    *((_QWORD *)this + 50) = v47;
    v5 = *(_QWORD *)(v5 + 16);
  }
  while (v5);
  if ((v6 & 1) != 0)
  {
LABEL_99:
    std::string::basic_string[abi:ne180100]<0>(v79, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v80) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v79[0], (std::string::size_type)v79[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v79;
      v78 = v80;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v78 >= 0)
      v59 = &__p[8];
    else
      v59 = *(const char **)&__p[8];
    conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 3070, v57, v58);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v78) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v80) < 0)
      operator delete(v79[0]);
    v60 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v60 = aPpx;
    v61 = (std::string *)(v60 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v66 = *(_OWORD *)__p;
      v60[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v66;
    }
    *v60 = &unk_24C214BA0;
  }
  if (v83)
  {
LABEL_94:
    if (*(_QWORD **)v81 != v82 && *(_QWORD *)v81)
      MEMORY[0x20BD149A8]();
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v84);
}

void sub_2099FC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&STACK[0x490]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t TCompounder::freeMemory(TCompounder *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  TRegExp *v8;
  TRegExp *v9;
  char *v10;
  char *v11;
  BOOL v12;
  TDataSaver *v13;
  uint64_t v14;
  uint64_t result;

  v3 = *((_QWORD *)this + 49);
  v2 = *((_QWORD *)this + 50);
  if (v2 == v3)
  {
    v3 = *((_QWORD *)this + 50);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        if (*(char *)(v5 + 55) < 0)
          operator delete(*(void **)(v5 + 32));
        MEMORY[0x20BD149A8](v5, 0x1072C406F7C4BA3);
        v3 = *((_QWORD *)this + 49);
        v2 = *((_QWORD *)this + 50);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *((_QWORD *)this + 50) = v3;
  v6 = (char *)*((_QWORD *)this + 34);
  v7 = (char *)this + 280;
  if (v6 != (char *)this + 280)
  {
    do
    {
      v8 = (TRegExp *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        TRegExp::~TRegExp(v8);
        MEMORY[0x20BD149A8]();
      }
      v9 = (TRegExp *)*((_QWORD *)v6 + 8);
      if (v9)
      {
        TRegExp::~TRegExp(v9);
        MEMORY[0x20BD149A8]();
      }
      v10 = (char *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v6 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 272, *((char **)this + 35));
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = v7;
  v13 = (TDataSaver *)*((_QWORD *)this + 46);
  if (v13)
  {
    TDataSaver::~TDataSaver(v13);
    MEMORY[0x20BD149A8]();
  }
  v14 = *((_QWORD *)this + 45);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = *((_QWORD *)this + 47);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void TCompounder::~TCompounder(TCompounder *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  TLmScore *v8;
  char *v9;
  char *v10;
  BOOL v11;
  void *v12;
  void *v13;
  void **v14;

  *(_QWORD *)this = &off_24C213BD0;
  v3 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x20BD149A8](v5, 0x1072C406A9B7475);
        v3 = *((_QWORD *)this + 8);
        v2 = *((_QWORD *)this + 9);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = (char *)*((_QWORD *)this + 31);
  v7 = (char *)this + 256;
  if (v6 != (char *)this + 256)
  {
    do
    {
      v8 = (TLmScore *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        TLmScore::~TLmScore(v8);
        MEMORY[0x20BD149A8]();
      }
      v9 = (char *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 248, *((char **)this + 32));
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = v7;
  TCompounder::freeMemory(this);
  v12 = (void *)*((_QWORD *)this + 49);
  if (v12)
  {
    *((_QWORD *)this + 50) = v12;
    operator delete(v12);
  }
  v14 = (void **)((char *)this + 328);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 272, *((char **)this + 35));
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 248, *((char **)this + 32));
  v13 = (void *)*((_QWORD *)this + 8);
  if (v13)
  {
    *((_QWORD *)this + 9) = v13;
    operator delete(v13);
  }
  TLatticeProcessor::~TLatticeProcessor(this);
}

{
  TCompounder::~TCompounder(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t TCompounder::save(TCompounder *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6;
  const char *v7;
  void *p_p;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  _BYTE v25[152];
  _BYTE v26[16];
  unint64_t v27;
  _QWORD *v28[4];

  v28[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 2);
  v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0)
    v7 = *(const char **)v7;
  TOutputModel::TOutputModel((TOutputModel *)v26, a2, a3, v7, *((const TDataManager **)this + 47));
  if (a2)
  {
    TDataManager::setIntVar(a2, "CompounderVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
    TOutputStream::TOutputStream(v28, &v20, (uint64_t)"CompounderParam", *((_QWORD *)this + 2) + 240);
    TParamManager::save(*((_QWORD **)this + 45), v28, 0);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "CompounderParam", p_p, v9);
    if ((char)v19 < 0)
      operator delete(__p);
    if (v27 == 1)
    {
      v10 = (_QWORD *)*((_QWORD *)this + 46);
      if (v10)
        TDataSaver::save(v10, a2);
    }
    v20 = (void *)*MEMORY[0x24BEDB800];
    *(void **)((char *)&v20 + *((_QWORD *)v20 - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
    v21 = MEMORY[0x24BEDB848] + 16;
    if (v24 < 0)
      operator delete(v23);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v25);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "CompounderVersion");
    if (v27 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
      TOutputStream::TOutputStream(v28, &v20, (uint64_t)"CompounderParam", *((_QWORD *)this + 2) + 240);
      TParamManager::save(*((_QWORD **)this + 45), v28, 1);
      std::stringbuf::str();
      if ((v19 & 0x80u) == 0)
        v11 = &__p;
      else
        v11 = __p;
      if ((v19 & 0x80u) == 0)
        v12 = v19;
      else
        v12 = v18;
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "CompounderParam", v11, v12);
      if ((char)v19 < 0)
        operator delete(__p);
      v13 = (_QWORD *)*((_QWORD *)this + 46);
      if (v13)
        TDataSaver::save(v13, a3);
      v20 = (void *)*MEMORY[0x24BEDB800];
      *(void **)((char *)&v20 + *((_QWORD *)v20 - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
      v21 = MEMORY[0x24BEDB848] + 16;
      if (v24 < 0)
        operator delete(v23);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v25);
    }
    if (!*((_QWORD *)this + 46))
    {
      v14 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v28[0] = "CompounderFeatureConfig";
      v28[1] = "CompounderWordFlag";
      v28[2] = "CompounderRules";
      do
      {
        v15 = v28[v14];
        if ((*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47), v15, 0, 0))
        {
          TDataManager::getStringVar(*((_QWORD *)this + 47), (uint64_t)v15, (uint64_t)&v20);
        }
        ++v14;
      }
      while (v14 != 3);
      if (SHIBYTE(v22) < 0)
        operator delete(v20);
    }
  }
  result = *((_QWORD *)this + 47);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_2099FCB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundGerman(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  TCompounder *SpokenForm;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int32 **v20;
  signed int **v21;
  __int32 **v22;
  int BindingLetter;
  BOOL v24;
  int **v25;
  TCompounder *v26;
  BOOL v27;
  _BOOL4 Capitalization;
  uint64_t v29;
  __int32 v30;
  int *v31;
  uint64_t v32;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  unint64_t v38;
  int v39;
  unsigned __int8 v40;
  BOOL v41;
  unint64_t v42;
  TLocaleInfo *v43;
  uint64_t v44;
  __int32 *v45;
  uint64_t Word;
  uint64_t v47;
  int *v48;
  _QWORD *v50;
  TCompounder *v51;
  _BYTE *v52;
  __int128 v53;
  _BYTE v54[785];
  char v55;
  int *v56;
  __int128 v57;
  _BYTE v58[785];
  char v59;
  _BYTE *v60;
  __int128 v61;
  _BYTE v62[1024];
  char v63;
  _BYTE *v64;
  __int128 v65;
  _BYTE v66[1024];
  char v67;
  __int32 *v68;
  __int128 v69;
  _BYTE v70[1024];
  char v71;
  int v72[3];

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = v6;
  v9 = v8;
  v50 = v10;
  v51 = (TCompounder *)v5;
  v12 = v11;
  v68 = (__int32 *)v70;
  v69 = xmmword_209A57DD0;
  v71 = 1;
  v13 = 16 * v8;
  TWord::getWrittenForm(*(__int32 ***)(*v11 + 16 * v8), (uint64_t)&v68);
  v64 = v66;
  v65 = xmmword_209A57DD0;
  v67 = 1;
  v60 = v62;
  v61 = xmmword_209A57DD0;
  v63 = 1;
  SpokenForm = (TCompounder *)TWord::getSpokenForm(*(__int32 ***)(*v12 + v13), (uint64_t)&v60);
  v15 = *((_QWORD *)&v61 + 1) != 0;
  if (!*((_QWORD *)&v61 + 1))
    SpokenForm = (TCompounder *)TBuffer<wchar_t>::operator=((uint64_t)&v60, (uint64_t)&v68);
  v56 = (int *)v58;
  v57 = xmmword_209A57DD0;
  v59 = 1;
  v52 = v54;
  v53 = xmmword_209A57DD0;
  v55 = 1;
  v16 = v9 + 1;
  if (v9 + 1 < v7)
  {
    v17 = 0;
    v18 = v9;
    while (1)
    {
      v19 = v16;
      v20 = *(__int32 ***)(*v12 + 16 * v9);
      v21 = *(signed int ***)(*v12 + 16 * v16);
      v22 = *(__int32 ***)(*v50 + 16 * v9);
      if (v22)
      {
        TWord::getWrittenForm(v22, (uint64_t)&v56);
        BindingLetter = *v56;
        if (v59)
          v24 = v56 == (int *)v58;
        else
          v24 = 1;
        if (!v24)
        {
          MEMORY[0x20BD149A8]();
          v56 = (int *)v58;
          *(_QWORD *)&v57 = 256;
        }
        *((_QWORD *)&v57 + 1) = 0;
      }
      else
      {
        BindingLetter = TCompounder::getBindingLetter(v51, *(__int32 ***)(*v12 + 16 * v9), v21);
      }
      TWord::getWrittenForm(v21, (uint64_t)&v56);
      TWord::getSpokenForm(v21, (uint64_t)&v52);
      TWord::getWordSense(v21, (uint64_t)&v64);
      v72[0] = 32;
      TBuffer<wchar_t>::insert((uint64_t)&v60, *((unint64_t *)&v61 + 1), v72, 1uLL);
      if (*((_QWORD *)&v53 + 1))
        v25 = (int **)&v52;
      else
        v25 = &v56;
      v26 = (TCompounder *)TBuffer<wchar_t>::operator+=((uint64_t)&v60, (uint64_t)v25);
      v27 = *((_QWORD *)&v53 + 1) != 0;
      if (!BindingLetter)
        goto LABEL_27;
      if (BindingLetter != 45)
        break;
      if (*((_QWORD *)&v69 + 1) && *((_QWORD *)&v57 + 1) && v68[*((_QWORD *)&v69 + 1) - 1] != 45 && *v56 != 45)
      {
        v72[0] = 45;
        v26 = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v72, 1uLL);
      }
      if (v19 > v18 + 1)
      {
        Capitalization = TCompounder::getCapitalization(v26, v20);
        v29 = v68[v17];
        if (Capitalization)
          v30 = TLocaleInfo::toUpper(*((_QWORD *)v51 + 2) + 240, v29);
        else
          v30 = TLocaleInfo::toLower(*((_QWORD *)v51 + 2) + 240, v29);
        v68[v17] = v30;
      }
      v17 = *((_QWORD *)&v69 + 1);
      SpokenForm = (TCompounder *)TBuffer<wchar_t>::operator+=((uint64_t)&v68, (uint64_t)&v56);
      v18 = v9 + 2;
LABEL_39:
      v15 |= v27;
      v16 = v19 + 1;
      v9 = v19;
      if (v19 + 1 == v7)
      {
        v16 = v18 + 1;
        goto LABEL_42;
      }
    }
    v72[0] = BindingLetter;
    TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v72, 1uLL);
LABEL_27:
    v72[0] = TLocaleInfo::toLower(*((_QWORD *)v51 + 2) + 240, *v56);
    TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v72, 1uLL);
    if (*((_QWORD *)&v57 + 1) >= (unint64_t)v57)
    {
      if (v59)
      {
        v72[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v56, *((unint64_t *)&v57 + 1), v72, 1uLL);
        v31 = v56;
        --*((_QWORD *)&v57 + 1);
      }
      else
      {
        v31 = v56;
        if ((_QWORD)v57)
          v56[(_QWORD)v57 - 1] = 0;
      }
    }
    else
    {
      v31 = v56;
      v56[*((_QWORD *)&v57 + 1)] = 0;
    }
    v32 = 1;
    while (v31[v32++])
      ;
    SpokenForm = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v31 + 1, v32 - 2);
    goto LABEL_39;
  }
  v17 = 0;
LABEL_42:
  if (v16 < v7)
  {
    v34 = TCompounder::getCapitalization(SpokenForm, *(__int32 ***)(*v12 + 16 * v7 - 16));
    v35 = v68[v17];
    if (v34)
    {
      v36 = TLocaleInfo::toUpper(*((_QWORD *)v51 + 2) + 240, v35);
      v68[v17] = v36;
      if (!v17)
        goto LABEL_48;
      v37 = TLocaleInfo::toUpper(*((_QWORD *)v51 + 2) + 240, v36);
    }
    else
    {
      v37 = TLocaleInfo::toLower(*((_QWORD *)v51 + 2) + 240, v35);
    }
    v68[v17] = v37;
  }
LABEL_48:
  if (*((_QWORD *)&v69 + 1))
  {
    v38 = 0;
    while (1)
    {
      v39 = v68[v38];
      if ((v40 & 1) == 0
      {
        v43 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v43);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v43;
      }
      if (v39 <= 8202)
      {
        if (v39 != 32 && v39 != 160)
          goto LABEL_61;
      }
      else
      {
        v41 = v39 == 8203 || v39 == 65279;
        if (!v41 && v39 != 12288)
          goto LABEL_61;
      }
      v68[v38] = 45;
LABEL_61:
      ++v38;
      v42 = *((_QWORD *)&v69 + 1);
      if (v38 >= *((_QWORD *)&v69 + 1))
        goto LABEL_66;
    }
  }
  v42 = 0;
LABEL_66:
  if (v15 & 1 | (*((_QWORD *)&v65 + 1) != 0))
  {
    v72[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v68, v42, v72, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v68, (uint64_t)&v64);
    v42 = *((_QWORD *)&v69 + 1);
    if ((v15 & 1) != 0)
    {
      v72[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v72, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v68, (uint64_t)&v60);
      v42 = *((_QWORD *)&v69 + 1);
    }
  }
  v44 = *((_QWORD *)v51 + 2);
  if (v42 >= (unint64_t)v69)
  {
    if (v71)
    {
      v72[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v68, v42, v72, 1uLL);
      v45 = v68;
      --*((_QWORD *)&v69 + 1);
    }
    else
    {
      v45 = v68;
      if ((_QWORD)v69)
        v68[(_QWORD)v69 - 1] = 0;
    }
  }
  else
  {
    v45 = v68;
    v68[v42] = 0;
  }
  Word = TLexicon::findWord(v44, v45);
  if (!Word)
  {
    v47 = *((_QWORD *)v51 + 2);
    if (*((_QWORD *)&v69 + 1) >= (unint64_t)v69)
    {
      if (v71)
      {
        v72[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v68, *((unint64_t *)&v69 + 1), v72, 1uLL);
        v48 = v68;
        --*((_QWORD *)&v69 + 1);
      }
      else
      {
        v48 = v68;
        if ((_QWORD)v69)
          v68[(_QWORD)v69 - 1] = 0;
      }
    }
    else
    {
      v48 = v68;
      v68[*((_QWORD *)&v69 + 1)] = 0;
    }
    Word = (uint64_t)TLexicon::addTempWord(v47, v48, 0, 0, 0);
  }
  if (v55 && v52 != v54 && v52)
    MEMORY[0x20BD149A8]();
  if (v59 && v56 != (int *)v58 && v56)
    MEMORY[0x20BD149A8]();
  if (v63 && v60 != v62 && v60)
    MEMORY[0x20BD149A8]();
  if (v67 && v64 != v66 && v64)
    MEMORY[0x20BD149A8]();
  if (v71 && v68 != (__int32 *)v70 && v68)
    MEMORY[0x20BD149A8]();
  return Word;
}

void sub_2099FD394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  MEMORY[0x20BD149A8](v19, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x468]) && a19 != a9 && a19)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x888]))
  {
    v21 = STACK[0x470];
    if (STACK[0x470] != a16)
    {
      if (v21)
        MEMORY[0x20BD149A8](v21, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xCA8]))
  {
    v22 = STACK[0x890];
    if (STACK[0x890] != a10)
    {
      if (v22)
        MEMORY[0x20BD149A8](v22, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x10C8]))
  {
    v23 = STACK[0xCB0];
    if (STACK[0xCB0] != a11)
    {
      if (v23)
        MEMORY[0x20BD149A8](v23, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x14E8]))
  {
    if (STACK[0x10D0] != a12 && STACK[0x10D0] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::getBindingLetter(TCompounder *this, __int32 **a2, signed int **a3)
{
  signed int *v6;
  signed int v7;
  unsigned __int8 v8;
  int *v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  TLocaleInfo *v13;
  signed int *v14;
  signed int v15;
  unsigned __int8 v16;
  int *v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  TLocaleInfo *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  __int32 *v27;
  _DWORD *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;
  unsigned int *v31;
  __int128 v32;
  _BYTE v33[785];
  char v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE v37[785];
  char v38;
  _BYTE *v39;
  __int128 v40;
  _BYTE v41[1024];
  char v42;
  int v43;

  v6 = *a2;
  v7 = **a2;
  {
    v29 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v29);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
  }
  if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7))
    return 45;
  v9 = v6 + 1;
  while (1)
  {
    v11 = *v9++;
    v10 = v11;
    if (!v11)
      break;
    if ((v12 & 1) == 0
    {
      v13 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v13);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v13;
    }
    if ((TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v10) & 1) == 0)
      return 45;
  }
  v14 = *a3;
  v15 = **a3;
  {
    v30 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v30);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
  }
  if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v15))
    return 45;
  v17 = v14 + 1;
  while (1)
  {
    v19 = *v17++;
    v18 = v19;
    if (!v19)
      break;
    if ((v20 & 1) == 0
    {
      v21 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v21);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
    }
    if ((TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v18) & 1) == 0)
      return 45;
  }
  v39 = v41;
  v40 = xmmword_209A57DD0;
  v42 = 1;
  TWord::getCategoryTag((uint64_t)a3, &v39);
  if (*((_DWORD *)v39 + 1) != 80)
  {
    v35 = v37;
    v36 = xmmword_209A57DD0;
    v38 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v35);
    if (*(_DWORD *)v35 == 86 && *((_DWORD *)v35 + 2) == 86 && *(_DWORD *)v39 == 83)
    {
      v22 = 115;
LABEL_46:
      if (v38 && v35 != v37 && v35)
        MEMORY[0x20BD149A8]();
      goto LABEL_50;
    }
    v31 = (unsigned int *)v33;
    v32 = xmmword_209A57DD0;
    v34 = 1;
    v24 = (_QWORD *)*((_QWORD *)this + 23);
    if (v24)
    {
      TWord::getTokenName(a2, (uint64_t)&v31);
      v24 = (_QWORD *)*((_QWORD *)this + 23);
      v25 = *((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
      {
        if (v34)
        {
          v43 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v31, *((unint64_t *)&v32 + 1), &v43, 1uLL);
          v26 = v31;
          --*((_QWORD *)&v32 + 1);
        }
        else
        {
          v26 = v31;
          if ((_QWORD)v32)
            v31[(_QWORD)v32 - 1] = 0;
        }
        goto LABEL_33;
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = v31;
    v31[v25] = 0;
LABEL_33:
    if (v24 && v26 && TRegExp::match(v24, v26, 0))
    {
      v22 = 45;
    }
    else if (!wcscmp(*a3, dword_209A7FE24))
    {
      v22 = 0;
    }
    else
    {
      v27 = *a2;
      v28 = (_DWORD *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
      if (TCompounder::takesFugenS((uint64_t)this, v27, v28))
        v22 = 115;
      else
        v22 = 0;
    }
    if (v34 && v31 != (unsigned int *)v33 && v31)
      MEMORY[0x20BD149A8]();
    goto LABEL_46;
  }
  v22 = 0;
LABEL_50:
  if (v42 && v39 != v41 && v39)
    MEMORY[0x20BD149A8]();
  return v22;
}

void sub_2099FD910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

BOOL TCompounder::getCapitalization(TCompounder *this, __int32 **a2)
{
  int v3;
  unsigned __int8 v4;
  _BOOL8 v5;
  TLocaleInfo *v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE v11[1024];
  char v12;

  v9 = v11;
  v10 = xmmword_209A57DD0;
  v12 = 1;
  TWord::getWrittenForm(a2, (uint64_t)&v9);
  v3 = *(_DWORD *)v9;
  {
    v8 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v8);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v8;
  }
  if ((TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v3) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    TWord::getCategoryTag((uint64_t)a2, &v9);
    v5 = *(_DWORD *)v9 == 83 || *(_DWORD *)v9 == 78;
  }
  if (v12 && v9 != v11 && v9)
    MEMORY[0x20BD149A8]();
  return v5;
}

void sub_2099FDB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x20BD149A8](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]))
  {
    if (a9 != v10 && a9 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundNordic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int32 *v12;
  int v13;
  unint64_t v14;
  _BOOL4 v15;
  char v16;
  unint64_t v17;
  __int32 **v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  __int32 v22;
  __int32 v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned __int8 v28;
  int v29;
  __int32 v30;
  int v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  _BOOL4 v35;
  _QWORD *v36;
  unsigned int *v37;
  __int32 **v38;
  _QWORD *v39;
  unsigned int *v40;
  _BOOL4 v41;
  __int32 v42;
  unint64_t v43;
  uint64_t v44;
  __int32 *v45;
  uint64_t Word;
  uint64_t v47;
  int *v48;
  TLocaleInfo *v50;
  BOOL v51;
  _QWORD *v52;
  _QWORD *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  __int128 v60;
  _BYTE v61[785];
  char v62;
  _BYTE *v63;
  __int128 v64;
  _BYTE v65[785];
  char v66;
  unsigned int *v67;
  __int128 v68;
  _BYTE v69[1024];
  char v70;
  _BYTE *v71;
  __int128 v72;
  _BYTE v73[1024];
  char v74;
  _BYTE *v75;
  __int128 v76;
  _BYTE v77[1024];
  char v78;
  _BYTE *v79;
  __int128 v80;
  _BYTE v81[1024];
  char v82;
  __int32 *v83;
  __int128 v84;
  _BYTE v85[1024];
  char v86;
  int v87[3];

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v52 = v10;
  v53 = v9;
  v11 = (_QWORD *)v5;
  v83 = (__int32 *)v85;
  v84 = xmmword_209A57DD0;
  v86 = 1;
  v79 = v81;
  v80 = xmmword_209A57DD0;
  v82 = 1;
  v75 = v77;
  v76 = xmmword_209A57DD0;
  v78 = 1;
  v71 = v73;
  v72 = xmmword_209A57DD0;
  v74 = 1;
  v67 = (unsigned int *)v69;
  v68 = xmmword_209A57DD0;
  v70 = 1;
  v63 = v65;
  v64 = xmmword_209A57DD0;
  v66 = 1;
  v58 = v7;
  v59 = v61;
  v60 = xmmword_209A57DD0;
  if (v8 == 1)
    v12 = (__int32 *)&TCompounder::compoundNordic(std::vector<std::pair<TWord const*,unsigned int>> const&,std::vector<std::pair<TWord const*,unsigned long>> const&,unsigned long,unsigned long,TCompounder::TLanguage)::pszVowelsDutch;
  else
    v12 = (__int32 *)&TCompounder::compoundNordic(std::vector<std::pair<TWord const*,unsigned int>> const&,std::vector<std::pair<TWord const*,unsigned long>> const&,unsigned long,unsigned long,TCompounder::TLanguage)::pszVowels;
  v62 = 1;
  if (v6 >= v7)
  {
    v16 = 0;
    goto LABEL_80;
  }
  v13 = v8;
  v14 = v6;
  v15 = 0;
  v51 = 0;
  v16 = 0;
  v17 = v6;
  v57 = v6;
  do
  {
    v55 = v15;
    v18 = *(__int32 ***)(*v53 + 16 * v17);
    TWord::getWrittenForm(v18, (uint64_t)&v79);
    TWord::getSpokenForm(v18, (uint64_t)&v75);
    TWord::getWordSense(v18, (uint64_t)&v71);
    TWord::getTokenName(v18, (uint64_t)&v67);
    if (v17 > v14)
    {
      v87[0] = 32;
      TBuffer<wchar_t>::insert((uint64_t)&v63, *((unint64_t *)&v64 + 1), v87, 1uLL);
    }
    if (*((_QWORD *)&v76 + 1))
      v19 = &v75;
    else
      v19 = &v79;
    TBuffer<wchar_t>::operator+=((uint64_t)&v63, (uint64_t)v19);
    v20 = *((_QWORD *)&v76 + 1) != 0;
    if (!*((_QWORD *)&v84 + 1))
      goto LABEL_18;
    if (v13 == 1)
    {
      v21 = *(unsigned int *)v79;
    }
    else
    {
      if (v13 != 4)
        goto LABEL_18;
      v21 = v83[*((_QWORD *)&v84 + 1) - 1];
      if ((_DWORD)v21 != *(_DWORD *)v79)
        goto LABEL_18;
    }
    v22 = TLocaleInfo::removeDiacritics(v11[2] + 240, v21);
    if (wcschr(v12, v22))
    {
      v23 = TLocaleInfo::removeDiacritics(v11[2] + 240, v83[*((_QWORD *)&v84 + 1) - 1]);
      v54 = wcschr(v12, v23) != 0;
      goto LABEL_19;
    }
LABEL_18:
    v54 = 0;
LABEL_19:
    v56 = v20;
    v24 = DWORD2(v80);
    if (*((_QWORD *)&v80 + 1))
    {
      v25 = 0;
      v26 = 0;
      while (1)
      {
        v27 = *(_DWORD *)&v79[4 * v25];
        if ((v28 & 1) == 0
        {
          v50 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v50);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v50;
          v14 = v57;
        }
        v29 = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27) ^ 1;
        if (v13 == 4)
          LOBYTE(v29) = 0;
        if ((v29 & 1) != 0)
          break;
        v30 = TLocaleInfo::removeDiacritics(v11[2] + 240, *(unsigned int *)&v79[4 * v25]);
        v26 |= wcschr(v12, v30) != 0;
        if ((unint64_t)++v25 >= *((_QWORD *)&v80 + 1))
        {
          v24 = 0;
          goto LABEL_31;
        }
      }
      v24 = 1;
    }
    else
    {
      v26 = 0;
    }
LABEL_31:
    v31 = v24 | ((v26 & 1) == 0);
    v32 = v17 + 1;
    if (v17 + 1 == v58)
    {
      v33 = (_QWORD *)v11[27];
      if (*((_QWORD *)&v68 + 1) >= (unint64_t)v68)
      {
        if (v70)
        {
          v87[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v87, 1uLL);
          v34 = v67;
          --*((_QWORD *)&v68 + 1);
        }
        else
        {
          v34 = v67;
          if ((_QWORD)v68)
            v67[(_QWORD)v68 - 1] = 0;
        }
      }
      else
      {
        v34 = v67;
        v67[*((_QWORD *)&v68 + 1)] = 0;
      }
      v35 = v33 && v34 && TRegExp::match(v33, v34, 0);
      v36 = (_QWORD *)v11[29];
      if (*((_QWORD *)&v68 + 1) >= (unint64_t)v68)
      {
        if (v70)
        {
          v87[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v87, 1uLL);
          v37 = v67;
          --*((_QWORD *)&v68 + 1);
        }
        else
        {
          v37 = v67;
          if ((_QWORD)v68)
            v67[(_QWORD)v68 - 1] = 0;
        }
      }
      else
      {
        v37 = v67;
        v67[*((_QWORD *)&v68 + 1)] = 0;
      }
      v31 |= v35;
      v51 = v36 && v37 && TRegExp::match(v36, v37, 0);
      v14 = v57;
    }
    v15 = v31 != 0;
    if (v17 != v14)
    {
      v38 = *(__int32 ***)(*v52 + 16 * v17 - 16);
      if (v38)
      {
        TWord::getWrittenForm(v38, (uint64_t)&v59);
        v87[0] = *(_DWORD *)v59;
        TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v87, 1uLL);
      }
      else if (v31 != 0 || v55 || v54)
      {
        v87[0] = 45;
        TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v87, 1uLL);
      }
    }
    TBuffer<wchar_t>::operator+=((uint64_t)&v83, (uint64_t)&v79);
    v14 = v57;
    if (v17 == v57)
    {
      v39 = (_QWORD *)v11[25];
      if (*((_QWORD *)&v68 + 1) >= (unint64_t)v68)
      {
        if (v70)
        {
          v87[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v87, 1uLL);
          v40 = v67;
          --*((_QWORD *)&v68 + 1);
        }
        else
        {
          v40 = v67;
          if ((_QWORD)v68)
            v67[(_QWORD)v68 - 1] = 0;
        }
      }
      else
      {
        v40 = v67;
        v67[*((_QWORD *)&v68 + 1)] = 0;
      }
      v41 = v39 && v40 && TRegExp::match(v39, v40, 0);
      if (v31)
        v15 = 1;
      else
        v15 = v41;
      v14 = v57;
    }
    v16 |= v56;
    ++v17;
  }
  while (v32 != v58);
  if (v51)
  {
    v42 = TLocaleInfo::toUpper(v11[2] + 240, *v83);
    *v83 = v42;
  }
LABEL_80:
  v43 = *((_QWORD *)&v84 + 1);
  if ((v16 & 1) != 0 || *((_QWORD *)&v72 + 1))
  {
    v87[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v87, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v83, (uint64_t)&v71);
    v43 = *((_QWORD *)&v84 + 1);
    if ((v16 & 1) != 0)
    {
      v87[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v87, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v83, (uint64_t)&v63);
      v43 = *((_QWORD *)&v84 + 1);
    }
  }
  v44 = v11[2];
  if (v43 >= (unint64_t)v84)
  {
    if (v86)
    {
      v87[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v83, v43, v87, 1uLL);
      v45 = v83;
      --*((_QWORD *)&v84 + 1);
    }
    else
    {
      v45 = v83;
      if ((_QWORD)v84)
        v83[(_QWORD)v84 - 1] = 0;
    }
  }
  else
  {
    v45 = v83;
    v83[v43] = 0;
  }
  Word = TLexicon::findWord(v44, v45);
  if (!Word)
  {
    v47 = v11[2];
    if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
    {
      if (v86)
      {
        v87[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v87, 1uLL);
        v48 = v83;
        --*((_QWORD *)&v84 + 1);
      }
      else
      {
        v48 = v83;
        if ((_QWORD)v84)
          v83[(_QWORD)v84 - 1] = 0;
      }
    }
    else
    {
      v48 = v83;
      v83[*((_QWORD *)&v84 + 1)] = 0;
    }
    Word = (uint64_t)TLexicon::addTempWord(v47, v48, 0, 0, 0);
  }
  if (v62 && v59 != v61 && v59)
    MEMORY[0x20BD149A8]();
  if (v66 && v63 != v65 && v63)
    MEMORY[0x20BD149A8]();
  if (v70 && v67 != (unsigned int *)v69 && v67)
    MEMORY[0x20BD149A8]();
  if (v74 && v71 != v73 && v71)
    MEMORY[0x20BD149A8]();
  if (v78 && v75 != v77 && v75)
    MEMORY[0x20BD149A8]();
  if (v82 && v79 != v81 && v79)
    MEMORY[0x20BD149A8]();
  if (v86 && v83 != (__int32 *)v85 && v83)
    MEMORY[0x20BD149A8]();
  return Word;
}

void sub_2099FE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x498]))
  {
    if (a25 != a11 && a25 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x8B8]))
  {
    v27 = STACK[0x4A0];
    if (STACK[0x4A0] != a12)
    {
      if (v27)
        MEMORY[0x20BD149A8](v27, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    v28 = STACK[0x8C0];
    if (STACK[0x8C0] != a13)
    {
      if (v28)
        MEMORY[0x20BD149A8](v28, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x10F8]))
  {
    v29 = STACK[0xCE0];
    if (STACK[0xCE0] != a14)
    {
      if (v29)
        MEMORY[0x20BD149A8](v29, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1518]))
  {
    v30 = STACK[0x1100];
    if (STACK[0x1100] != a15)
    {
      if (v30)
        MEMORY[0x20BD149A8](v30, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1938]))
  {
    v31 = STACK[0x1520];
    if (STACK[0x1520] != a16)
    {
      if (v31)
        MEMORY[0x20BD149A8](v31, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1D58]))
  {
    v32 = STACK[0x1940];
    if (STACK[0x1940] != a17)
    {
      if (v32)
        MEMORY[0x20BD149A8](v32, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundWithRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  TLocaleInfo *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int32 **v24;
  __int32 **v25;
  unsigned int **v26;
  BOOL v27;
  __int32 **v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  _BOOL4 v36;
  _QWORD *v37;
  unsigned int *v38;
  _BOOL4 v39;
  _QWORD *v40;
  unsigned int *v41;
  _BOOL4 v42;
  _QWORD *v43;
  unsigned int *v44;
  _BOOL4 v45;
  uint64_t v46;
  TCompounder *v48;
  uint64_t v49;
  _BOOL4 Capitalization;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  int *v59;
  unsigned int *v60;
  int *v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  unsigned __int8 v68;
  BOOL v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  __int32 *v73;
  uint64_t Word;
  uint64_t v75;
  int *v76;
  _BOOL4 v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  TLocaleInfo *v82;
  TLocaleInfo *v83;
  int v84;
  unsigned int *v85;
  __int128 v86;
  _BYTE v87[785];
  char v88;
  unsigned int *v89;
  __int128 v90;
  _BYTE v91[785];
  char v92;
  _BYTE *v93;
  __int128 v94;
  _BYTE v95[1024];
  char v96;
  unsigned int *v97;
  __int128 v98;
  _BYTE v99[1024];
  char v100;
  unsigned int *v101;
  __int128 v102;
  _BYTE v103[1024];
  char v104;
  int *v105;
  __int128 v106;
  _BYTE v107[1024];
  char v108;
  _BYTE *v109;
  __int128 v110;
  _BYTE v111[1024];
  char v112;
  _BYTE *v113;
  __int128 v114;
  _BYTE v115[1024];
  char v116;
  int *v117;
  __int128 v118;
  _BYTE v119[1024];
  char v120;
  int v121[3];

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v84 = v6;
  v8 = v7;
  v82 = v9;
  v11 = v10;
  v12 = (_QWORD *)v5;
  v117 = (int *)v119;
  v118 = xmmword_209A57DD0;
  v120 = 1;
  v79 = v13;
  v14 = 16 * v13;
  TWord::getWrittenForm(*(__int32 ***)(*v10 + 16 * v13), (uint64_t)&v117);
  v113 = v115;
  v114 = xmmword_209A57DD0;
  v116 = 1;
  v109 = v111;
  v110 = xmmword_209A57DD0;
  v112 = 1;
  TWord::getSpokenForm(*(__int32 ***)(*v11 + v14), (uint64_t)&v109);
  v15 = v11;
  v16 = *((_QWORD *)&v110 + 1) != 0;
  if (!*((_QWORD *)&v110 + 1))
    TBuffer<wchar_t>::operator=((uint64_t)&v109, (uint64_t)&v117);
  v105 = (int *)v107;
  v106 = xmmword_209A57DD0;
  v108 = 1;
  v101 = (unsigned int *)v103;
  v102 = xmmword_209A57DD0;
  v104 = 1;
  v97 = (unsigned int *)v99;
  v98 = xmmword_209A57DD0;
  v100 = 1;
  v93 = v95;
  v94 = xmmword_209A57DD0;
  v96 = 1;
  v89 = (unsigned int *)v91;
  v90 = xmmword_209A57DD0;
  v92 = 1;
  v85 = (unsigned int *)v87;
  v86 = xmmword_209A57DD0;
  v88 = 1;
  if (*((_QWORD *)&v118 + 1) >= (unint64_t)v118)
  {
    if (v120)
    {
      v121[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), v121, 1uLL);
      v17 = v117;
      --*((_QWORD *)&v118 + 1);
    }
    else
    {
      v17 = v117;
      if ((_QWORD)v118)
        v117[(_QWORD)v118 - 1] = 0;
    }
  }
  else
  {
    v17 = v117;
    v117[*((_QWORD *)&v118 + 1)] = 0;
  }
  TBuffer<wchar_t>::assign((uint64_t)&v101, v17);
  TWord::getCategoryTag(*(_QWORD *)(*v15 + v14), &v89);
  v19 = v79 + 1;
  if (v79 + 1 >= v8)
  {
    v20 = 0;
    v78 = 0;
    goto LABEL_126;
  }
  v80 = v8;
  v81 = v15;
  v78 = 0;
  v20 = 0;
  v21 = v8 - 1;
  v22 = v79 + 1;
  do
  {
    v23 = 16 * (v22 - 1);
    v24 = *(__int32 ***)(*v81 + v23);
    v25 = *(__int32 ***)(*v81 + 16 * v22);
    TWord::getWrittenForm(v25, (uint64_t)&v97);
    TWord::getSpokenForm(v25, (uint64_t)&v93);
    TWord::getCategoryTag((uint64_t)v25, &v85);
    TWord::getWordSense(v25, (uint64_t)&v113);
    v121[0] = 32;
    TBuffer<wchar_t>::insert((uint64_t)&v109, *((unint64_t *)&v110 + 1), v121, 1uLL);
    if (*((_QWORD *)&v94 + 1))
      v26 = (unsigned int **)&v93;
    else
      v26 = &v97;
    TBuffer<wchar_t>::operator+=((uint64_t)&v109, (uint64_t)v26);
    v27 = *((_QWORD *)&v94 + 1) != 0;
    v28 = *(__int32 ***)(*(_QWORD *)v82 + v23);
    if (v28)
    {
      TWord::getWrittenForm(v28, (uint64_t)&v105);
      if (*((_QWORD *)&v106 + 1) >= (unint64_t)v106)
      {
        if (v108)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), v121, 1uLL);
          v29 = v105;
          --*((_QWORD *)&v106 + 1);
        }
        else
        {
          v29 = v105;
          if ((_QWORD)v106)
            v105[(_QWORD)v106 - 1] = 0;
        }
      }
      else
      {
        v29 = v105;
        v105[*((_QWORD *)&v106 + 1)] = 0;
      }
      goto LABEL_67;
    }
    v30 = v12[49];
    if (v12[50] == v30)
    {
LABEL_60:
      v29 = (int *)&unk_209A7ECB8;
      goto LABEL_67;
    }
    v31 = 0;
    while (1)
    {
      v32 = *(_QWORD *)(v30 + 8 * v31);
      v33 = *(_QWORD *)(v32 + 56);
      if (v22 == v19)
      {
        if ((v33 & 0x10) != 0)
          goto LABEL_59;
      }
      else if ((v33 & 1) != 0)
      {
        goto LABEL_59;
      }
      if (v22 != v21)
        break;
      if ((v33 & 0x20) == 0)
        goto LABEL_27;
LABEL_59:
      if (++v31 >= (unint64_t)((v12[50] - v30) >> 3))
        goto LABEL_60;
    }
    if ((v33 & 2) != 0)
      goto LABEL_59;
LABEL_27:
    v34 = *(_QWORD **)v32;
    if (*(_QWORD *)v32)
    {
      if (*((_QWORD *)&v102 + 1) >= (unint64_t)v102)
      {
        if (v104)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v101, *((unint64_t *)&v102 + 1), v121, 1uLL);
          v35 = v101;
          --*((_QWORD *)&v102 + 1);
        }
        else
        {
          v35 = v101;
          if ((_QWORD)v102)
            v101[(_QWORD)v102 - 1] = 0;
        }
      }
      else
      {
        v35 = v101;
        v101[*((_QWORD *)&v102 + 1)] = 0;
      }
      v36 = TRegExp::match(v34, v35, 0);
      v30 = v12[49];
      v32 = *(_QWORD *)(v30 + 8 * v31);
      if (((v36 ^ ((*(_BYTE *)(v32 + 56) & 4) == 0)) & 1) != 0)
        goto LABEL_59;
    }
    v37 = *(_QWORD **)(v32 + 8);
    if (v37)
    {
      if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
      {
        if (v92)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v121, 1uLL);
          v38 = v89;
          --*((_QWORD *)&v90 + 1);
        }
        else
        {
          v38 = v89;
          if ((_QWORD)v90)
            v89[(_QWORD)v90 - 1] = 0;
        }
      }
      else
      {
        v38 = v89;
        v89[*((_QWORD *)&v90 + 1)] = 0;
      }
      v39 = TRegExp::match(v37, v38, 0);
      v30 = v12[49];
      v32 = *(_QWORD *)(v30 + 8 * v31);
      if (((v39 ^ ((*(_BYTE *)(v32 + 56) & 4) == 0)) & 1) != 0)
        goto LABEL_59;
    }
    v40 = *(_QWORD **)(v32 + 16);
    if (v40)
    {
      if (*((_QWORD *)&v98 + 1) >= (unint64_t)v98)
      {
        if (v100)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v97, *((unint64_t *)&v98 + 1), v121, 1uLL);
          v41 = v97;
          --*((_QWORD *)&v98 + 1);
        }
        else
        {
          v41 = v97;
          if ((_QWORD)v98)
            v97[(_QWORD)v98 - 1] = 0;
        }
      }
      else
      {
        v41 = v97;
        v97[*((_QWORD *)&v98 + 1)] = 0;
      }
      v42 = TRegExp::match(v40, v41, 0);
      v30 = v12[49];
      v32 = *(_QWORD *)(v30 + 8 * v31);
      if (((v42 ^ ((*(_BYTE *)(v32 + 56) & 8) == 0)) & 1) != 0)
        goto LABEL_59;
    }
    v43 = *(_QWORD **)(v32 + 24);
    if (v43)
    {
      if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
      {
        if (v88)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v121, 1uLL);
          v44 = v85;
          --*((_QWORD *)&v86 + 1);
        }
        else
        {
          v44 = v85;
          if ((_QWORD)v86)
            v85[(_QWORD)v86 - 1] = 0;
        }
      }
      else
      {
        v44 = v85;
        v85[*((_QWORD *)&v86 + 1)] = 0;
      }
      v45 = TRegExp::match(v43, v44, 0);
      v30 = v12[49];
      v32 = *(_QWORD *)(v30 + 8 * v31);
      if (((v45 ^ ((*(_BYTE *)(v32 + 56) & 8) == 0)) & 1) != 0)
        goto LABEL_59;
    }
    v29 = (int *)(v32 + 32);
    if (*(char *)(v32 + 55) < 0)
      v29 = *(int **)v29;
LABEL_67:
    v46 = 0;
    v16 |= v27;
    while (v29[v46++])
      ;
    v48 = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), v29, v46 - 1);
    if (v84)
    {
      if (v117[*((_QWORD *)&v118 + 1) - 1] == 45 || (v49 = *v97, *((_QWORD *)&v98 + 1)) && (_DWORD)v49 == 45)
      {
        if (v22 > v79 + 1)
        {
          Capitalization = TCompounder::getCapitalization(v48, v24);
          v51 = v117[v20];
          if (Capitalization)
            v52 = TLocaleInfo::toUpper(v12[2] + 240, v51);
          else
            v52 = TLocaleInfo::toLower(v12[2] + 240, v51);
          v117[v20] = v52;
        }
        v20 = *((_QWORD *)&v118 + 1);
        v18 = TBuffer<wchar_t>::operator+=((uint64_t)&v117, (uint64_t)&v97);
        v79 = v22 + 1;
      }
      else
      {
        v121[0] = TLocaleInfo::toLower(v12[2] + 240, v49);
        TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), v121, 1uLL);
        if (*((_QWORD *)&v98 + 1) >= (unint64_t)v98)
        {
          if (v100)
          {
            v121[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v97, *((unint64_t *)&v98 + 1), v121, 1uLL);
            v53 = v97;
            --*((_QWORD *)&v98 + 1);
          }
          else
          {
            v53 = v97;
            if ((_QWORD)v98)
              v97[(_QWORD)v98 - 1] = 0;
          }
        }
        else
        {
          v53 = v97;
          v97[*((_QWORD *)&v98 + 1)] = 0;
        }
        v54 = 1;
        while (v53[v54++])
          ;
        v18 = TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), (int *)v53 + 1, v54 - 2);
      }
    }
    else
    {
      v18 = TBuffer<wchar_t>::operator+=((uint64_t)&v117, (uint64_t)&v97);
    }
    if (v22 == v21)
    {
      v57 = (_QWORD *)v12[29];
      v56 = (_QWORD *)v12[30];
      if (*((_QWORD *)&v98 + 1) >= (unint64_t)v98)
      {
        if (v100)
        {
          v121[0] = 0;
          v18 = TBuffer<wchar_t>::insert((uint64_t)&v97, *((unint64_t *)&v98 + 1), v121, 1uLL);
          v58 = v97;
          --*((_QWORD *)&v98 + 1);
        }
        else
        {
          v58 = v97;
          if ((_QWORD)v98)
            v97[(_QWORD)v98 - 1] = 0;
        }
      }
      else
      {
        v58 = v97;
        v97[*((_QWORD *)&v98 + 1)] = 0;
      }
      if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
      {
        if (v88)
        {
          v121[0] = 0;
          v18 = TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v121, 1uLL);
          v60 = v85;
          --*((_QWORD *)&v86 + 1);
        }
        else
        {
          v60 = v85;
          if ((_QWORD)v86)
            v85[(_QWORD)v86 - 1] = 0;
        }
      }
      else
      {
        v60 = v85;
        v85[*((_QWORD *)&v86 + 1)] = 0;
      }
      v78 = 1;
      if (!v57 || !v58 || (v18 = TRegExp::match(v57, v58, 0), (v18 & 1) == 0))
      {
        if (!v56 || !v60 || (v18 = TRegExp::match(v56, v60, 0), (v18 & 1) == 0))
          v78 = 0;
      }
    }
    else
    {
      if (*((_QWORD *)&v98 + 1) >= (unint64_t)v98)
      {
        if (v100)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v97, *((unint64_t *)&v98 + 1), v121, 1uLL);
          v59 = (int *)v97;
          --*((_QWORD *)&v98 + 1);
        }
        else
        {
          v59 = (int *)v97;
          if ((_QWORD)v98)
            v97[(_QWORD)v98 - 1] = 0;
        }
      }
      else
      {
        v59 = (int *)v97;
        v97[*((_QWORD *)&v98 + 1)] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v101, v59);
      if (*((_QWORD *)&v86 + 1) >= (unint64_t)v86)
      {
        if (v88)
        {
          v121[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v85, *((unint64_t *)&v86 + 1), v121, 1uLL);
          v61 = (int *)v85;
          --*((_QWORD *)&v86 + 1);
        }
        else
        {
          v61 = (int *)v85;
          if ((_QWORD)v86)
            v85[(_QWORD)v86 - 1] = 0;
        }
      }
      else
      {
        v61 = (int *)v85;
        v85[*((_QWORD *)&v86 + 1)] = 0;
      }
      v18 = TBuffer<wchar_t>::assign((uint64_t)&v89, v61);
    }
    ++v22;
  }
  while (v22 != v80);
  v8 = v80;
  v19 = v79 + 1;
  v15 = v81;
LABEL_126:
  if (v84 && v19 < v8)
  {
    v62 = TCompounder::getCapitalization((TCompounder *)v18, *(__int32 ***)(*v15 + 16 * v8 - 16));
    v63 = v117[v20];
    if (v62)
    {
      v64 = TLocaleInfo::toUpper(v12[2] + 240, v63);
      v117[v20] = v64;
      if (v20)
      {
        v65 = TLocaleInfo::toUpper(v12[2] + 240, v64);
        goto LABEL_132;
      }
    }
    else
    {
      v65 = TLocaleInfo::toLower(v12[2] + 240, v63);
LABEL_132:
      v117[v20] = v65;
    }
  }
  if (*((_QWORD *)&v118 + 1))
  {
    v66 = 0;
    while (1)
    {
      v67 = v117[v66];
      if ((v68 & 1) == 0
      {
        v83 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v83);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v83;
      }
      if (v67 <= 8202)
      {
        if (v67 != 32 && v67 != 160)
          goto LABEL_146;
      }
      else
      {
        v69 = v67 == 8203 || v67 == 65279;
        if (!v69 && v67 != 12288)
          goto LABEL_146;
      }
      v117[v66] = 45;
LABEL_146:
      ++v66;
      v70 = *((_QWORD *)&v118 + 1);
      if (v66 >= *((_QWORD *)&v118 + 1))
        goto LABEL_151;
    }
  }
  v70 = 0;
LABEL_151:
  if ((v84 & 1) == 0 && v78)
  {
    v71 = TLocaleInfo::toUpper(v12[2] + 240, *v117);
    *v117 = v71;
    v70 = *((_QWORD *)&v118 + 1);
  }
  if (v16 & 1 | (*((_QWORD *)&v114 + 1) != 0))
  {
    v121[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v117, v70, v121, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v117, (uint64_t)&v113);
    v70 = *((_QWORD *)&v118 + 1);
    if ((v16 & 1) != 0)
    {
      v121[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), v121, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v117, (uint64_t)&v109);
      v70 = *((_QWORD *)&v118 + 1);
    }
  }
  v72 = v12[2];
  if (v70 >= (unint64_t)v118)
  {
    if (v120)
    {
      v121[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v117, v70, v121, 1uLL);
      v73 = v117;
      --*((_QWORD *)&v118 + 1);
    }
    else
    {
      v73 = v117;
      if ((_QWORD)v118)
        v117[(_QWORD)v118 - 1] = 0;
    }
  }
  else
  {
    v73 = v117;
    v117[v70] = 0;
  }
  Word = TLexicon::findWord(v72, v73);
  if (!Word)
  {
    v75 = v12[2];
    if (*((_QWORD *)&v118 + 1) >= (unint64_t)v118)
    {
      if (v120)
      {
        v121[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v117, *((unint64_t *)&v118 + 1), v121, 1uLL);
        v76 = v117;
        --*((_QWORD *)&v118 + 1);
      }
      else
      {
        v76 = v117;
        if ((_QWORD)v118)
          v117[(_QWORD)v118 - 1] = 0;
      }
    }
    else
    {
      v76 = v117;
      v117[*((_QWORD *)&v118 + 1)] = 0;
    }
    Word = (uint64_t)TLexicon::addTempWord(v75, v76, 0, 0, 0);
  }
  if (v88 && v85 != (unsigned int *)v87 && v85)
    MEMORY[0x20BD149A8]();
  if (v92 && v89 != (unsigned int *)v91 && v89)
    MEMORY[0x20BD149A8]();
  if (v96 && v93 != v95 && v93)
    MEMORY[0x20BD149A8]();
  if (v100 && v97 != (unsigned int *)v99 && v97)
    MEMORY[0x20BD149A8]();
  if (v104 && v101 != (unsigned int *)v103 && v101)
    MEMORY[0x20BD149A8]();
  if (v108 && v105 != (int *)v107 && v105)
    MEMORY[0x20BD149A8]();
  if (v112 && v109 != v111 && v109)
    MEMORY[0x20BD149A8]();
  if (v116 && v113 != v115 && v113)
    MEMORY[0x20BD149A8]();
  if (v120 && v117 != (int *)v119 && v117)
    MEMORY[0x20BD149A8]();
  return Word;
}

void sub_2099FF524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  MEMORY[0x20BD149A8](a23, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x498]) && a25 != a9 && a25)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x8B8]))
  {
    v26 = STACK[0x4A0];
    if (STACK[0x4A0] != a10)
    {
      if (v26)
        MEMORY[0x20BD149A8](v26, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    v27 = STACK[0x8C0];
    if (STACK[0x8C0] != a11)
    {
      if (v27)
        MEMORY[0x20BD149A8](v27, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x10F8]))
  {
    v28 = STACK[0xCE0];
    if (STACK[0xCE0] != a12)
    {
      if (v28)
        MEMORY[0x20BD149A8](v28, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1518]))
  {
    v29 = STACK[0x1100];
    if (STACK[0x1100] != a13)
    {
      if (v29)
        MEMORY[0x20BD149A8](v29, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1938]))
  {
    v30 = STACK[0x1520];
    if (STACK[0x1520] != a14)
    {
      if (v30)
        MEMORY[0x20BD149A8](v30, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x1D58]))
  {
    v31 = STACK[0x1940];
    if (STACK[0x1940] != a15)
    {
      if (v31)
        MEMORY[0x20BD149A8](v31, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x2178]))
  {
    v32 = STACK[0x1D60];
    if (STACK[0x1D60] != a16)
    {
      if (v32)
        MEMORY[0x20BD149A8](v32, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0x2598]))
  {
    v33 = STACK[0x2180];
    if (STACK[0x2180] != a17)
    {
      if (v33)
        MEMORY[0x20BD149A8](v33, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TCompounder::makeResult(uint64_t a1, void **a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned int *v28;
  void **v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  void **v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  void **v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  char *v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v86;
  uint64_t v87;
  uint64_t v90;
  void *__p[2];
  char v92;
  void *v93[2];
  char v94;
  unsigned int *v95;
  __int128 v96;
  _BYTE v97[1024];
  char v98;
  int v99[3];

  v95 = (unsigned int *)v97;
  v96 = xmmword_209A57DD0;
  v98 = 1;
  v7 = *a4;
  if (a4[1] == *a4)
    goto LABEL_128;
  v12 = 0;
  v13 = 0;
  v87 = (uint64_t)(a2 + 2);
  do
  {
    v90 = v13;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 16 * v12);
      if (!v14)
        break;
      v16 = a2[1];
      v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((char *)v16 - (_BYTE *)*a2) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)*a2;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v21);
        else
          v22 = 0;
        v23 = &v22[16 * v18];
        *(_QWORD *)v23 = v14;
        *((_QWORD *)v23 + 1) = 1;
        v25 = (char *)*a2;
        v24 = (char *)a2[1];
        v26 = v23;
        if (v24 != *a2)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 16;
            v24 -= 16;
          }
          while (v24 != v25);
          v24 = (char *)*a2;
        }
        v17 = v23 + 16;
        *a2 = v26;
        a2[1] = v23 + 16;
        a2[2] = &v22[16 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v14;
        v16[1] = 1;
        v17 = v16 + 2;
      }
      a2[1] = v17;
      if (*(_BYTE *)(a1 + 56))
      {
        TBuffer<wchar_t>::resize((uint64_t)&v95, 0);
        tildeEscape(**(_QWORD **)(*a4 + 16 * v12), (uint64_t)&v95);
        v27 = *(_QWORD *)(a1 + 360);
        v28 = (unsigned int *)(v27 + 512);
        if (*(char *)(v27 + 535) < 0)
          v28 = *(unsigned int **)v28;
        loggableUnicode(v28, v93);
        if (v94 >= 0)
          v29 = v93;
        else
          v29 = (void **)v93[0];
        if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
        {
          if (v98)
          {
            v99[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
            v30 = v95;
            --*((_QWORD *)&v96 + 1);
          }
          else
          {
            v30 = v95;
            if ((_QWORD)v96)
              v95[(_QWORD)v96 - 1] = 0;
          }
        }
        else
        {
          v30 = v95;
          v95[*((_QWORD *)&v96 + 1)] = 0;
        }
        loggableUnicode(v30, __p);
        v35 = __p;
        if (v92 < 0)
          v35 = (void **)__p[0];
        tknPrintf("%s: 0 %s %s\n", v31, v32, v33, v34, v29, v35, TCompounder::ms_tagName[0]);
        if (v92 < 0)
          operator delete(__p[0]);
        if (v94 < 0)
          operator delete(v93[0]);
      }
      ++v12;
      v7 = *a4;
      if (v12 >= (a4[1] - *a4) >> 4)
        goto LABEL_127;
    }
    v36 = 0;
    v37 = 8 * v90;
    v38 = 16 * v90;
    do
    {
      v39 = v36;
      v40 = v90 + v36;
      if (*(_BYTE *)(a1 + 56))
      {
        TBuffer<wchar_t>::resize((uint64_t)&v95, 0);
        v41 = *(uint64_t **)(*a3 + v38);
        if (v41)
          tildeEscape(*v41, (uint64_t)&v95);
        if (*(double *)(*a7 + v37 + 8 * v39) == 0.0)
        {
          v42 = *(_QWORD *)(a1 + 360);
          v43 = (unsigned int *)(v42 + 512);
          if (*(char *)(v42 + 535) < 0)
            v43 = *(unsigned int **)v43;
          loggableUnicode(v43, v93);
          if (v94 >= 0)
            v44 = v93;
          else
            v44 = (void **)v93[0];
          if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
          {
            if (v98)
            {
              v99[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
              v45 = v95;
              --*((_QWORD *)&v96 + 1);
            }
            else
            {
              v45 = v95;
              if ((_QWORD)v96)
                v95[(_QWORD)v96 - 1] = 0;
            }
          }
          else
          {
            v45 = v95;
            v95[*((_QWORD *)&v96 + 1)] = 0;
          }
          loggableUnicode(v45, __p);
          v55 = __p;
          if (v92 < 0)
            v55 = (void **)__p[0];
          tknPrintf("%s: 0 %s %s\n", v51, v52, v53, v54, v44, v55, TCompounder::ms_tagName[(*(_QWORD *)(*a6 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1]);
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 360);
          v47 = (unsigned int *)(v46 + 512);
          if (*(char *)(v46 + 535) < 0)
            v47 = *(unsigned int **)v47;
          loggableUnicode(v47, v93);
          if (v94 >= 0)
            v48 = v93;
          else
            v48 = (void **)v93[0];
          v49 = *(_QWORD *)(*a7 + v37 + 8 * v39);
          if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
          {
            if (v98)
            {
              v99[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
              v50 = v95;
              --*((_QWORD *)&v96 + 1);
            }
            else
            {
              v50 = v95;
              if ((_QWORD)v96)
                v95[(_QWORD)v96 - 1] = 0;
            }
          }
          else
          {
            v50 = v95;
            v95[*((_QWORD *)&v96 + 1)] = 0;
          }
          loggableUnicode(v50, __p);
          v60 = __p;
          if (v92 < 0)
            v60 = (void **)__p[0];
          tknPrintf("%s: %e %s %s\n", v56, v57, v58, v59, v48, v49, v60, TCompounder::ms_tagName[(*(_QWORD *)(*a6 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1]);
        }
        if (v92 < 0)
          operator delete(__p[0]);
        if (v94 < 0)
          operator delete(v93[0]);
      }
      if (v40 + 1 >= a6[1])
        break;
      v36 = v39 + 1;
      v38 += 16;
    }
    while (((*(_QWORD *)(*a6 + (((v40 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + 1)) & 1) != 0);
    v86 = v39 + 1;
    v13 = v39 + 1 + v90;
    if (v39)
    {
      v61 = TStringParam::get((TStringParam *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) + 3280));
      if (!wcsncmp((const __int32 *)v61, dword_209A7F95C, 2uLL))
      {
        v62 = 0;
      }
      else if (!wcscmp((const __int32 *)v61, dword_209A7F968))
      {
        v62 = 0;
      }
      else
      {
        v62 = wcscmp((const __int32 *)v61, dword_209A7F978)
           && wcscmp((const __int32 *)v61, dword_209A7F988)
           && wcscmp((const __int32 *)v61, dword_209A7F998) != 0;
      }
      if (*(_QWORD *)(a1 + 384) > 2uLL)
      {
        v76 = TCompounder::compoundWithRules(a1, (uint64_t)a3, a5, v90, v13);
      }
      else if (v62)
      {
        v76 = TCompounder::compoundGerman(a1, (uint64_t)a3, a5, v90, v13);
      }
      else
      {
        v76 = TCompounder::compoundNordic(a1, (uint64_t)a3, a5, v90, v13);
      }
      v77 = v76;
      v65 = (uint64_t *)a2[1];
      v78 = (unint64_t)a2[2];
      if ((unint64_t)v65 < v78)
      {
        *v65 = v76;
        v66 = v39 + 1;
        goto LABEL_111;
      }
      v80 = ((char *)v65 - (_BYTE *)*a2) >> 4;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 60)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v82 = v78 - (_QWORD)*a2;
      if (v82 >> 3 > v81)
        v81 = v82 >> 3;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
        v70 = 0xFFFFFFFFFFFFFFFLL;
      else
        v70 = v81;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v70);
      else
        v71 = 0;
      v72 = &v71[16 * v80];
      *(_QWORD *)v72 = v77;
      *((_QWORD *)v72 + 1) = v86;
      v83 = (char *)*a2;
      v73 = (char *)a2[1];
      v75 = v72;
      if (v73 != *a2)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v73 - 1);
          v75 -= 16;
          v73 -= 16;
        }
        while (v73 != v83);
LABEL_123:
        v73 = (char *)*a2;
      }
    }
    else
    {
      v63 = *(_QWORD *)(*a3 + 16 * v90);
      v65 = (uint64_t *)a2[1];
      v64 = (unint64_t)a2[2];
      if ((unint64_t)v65 < v64)
      {
        *v65 = v63;
        v66 = 1;
LABEL_111:
        v65[1] = v66;
        v79 = v65 + 2;
        goto LABEL_126;
      }
      v67 = ((char *)v65 - (_BYTE *)*a2) >> 4;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 60)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v69 = v64 - (_QWORD)*a2;
      if (v69 >> 3 > v68)
        v68 = v69 >> 3;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
        v70 = 0xFFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v70);
      else
        v71 = 0;
      v72 = &v71[16 * v67];
      *(_QWORD *)v72 = v63;
      *((_QWORD *)v72 + 1) = 1;
      v74 = (char *)*a2;
      v73 = (char *)a2[1];
      v75 = v72;
      if (v73 != *a2)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v73 - 1);
          v75 -= 16;
          v73 -= 16;
        }
        while (v73 != v74);
        goto LABEL_123;
      }
    }
    v79 = v72 + 16;
    *a2 = v75;
    a2[1] = v72 + 16;
    a2[2] = &v71[16 * v70];
    if (v73)
      operator delete(v73);
LABEL_126:
    v12 += v86;
    a2[1] = v79;
    v7 = *a4;
  }
  while (v12 < (a4[1] - *a4) >> 4);
LABEL_127:
  if (v98)
  {
LABEL_128:
    if (v95 != (unsigned int *)v97 && v95 != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2099FFFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (LOBYTE(STACK[0x4A8]) && a27 != a14)
  {
    if (a27)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TCompounder::applyModelMBR(uint64_t a1, __int128 **a2, _QWORD *a3, _QWORD *a4, void **a5)
{
  __int128 *v8;
  unint64_t i;
  __int32 ***v10;
  __int32 **v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  __int32 *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int *v23;
  __int128 *v24;
  char *v25;
  void *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  _OWORD *v36;
  _OWORD *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 *v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char **v56;
  uint64_t v57;
  uint64_t ActiveConfigHandle;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t *v72;
  std::vector<int>::pointer end;
  int *v74;
  std::vector<int>::pointer begin;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  int *v81;
  int v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unsigned int ***v110;
  unsigned int **v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  TLmScore *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t Class;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  char *v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  _QWORD *v151;
  __int32 *v152;
  unsigned int *v153;
  _QWORD *v154;
  _QWORD *v155;
  __int32 *v156;
  unsigned int *v157;
  BOOL v158;
  _QWORD *v159;
  _QWORD *v160;
  __int32 *v161;
  unsigned int *v162;
  BOOL v163;
  _QWORD *v164;
  _QWORD *v165;
  __int32 *v166;
  unsigned int *v167;
  BOOL v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  int v184;
  char *v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  double v211;
  double v212;
  unint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  double v231;
  double v232;
  uint64_t v233;
  unsigned int v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int **v238;
  unint64_t *v239;
  TLmScore *v240;
  char **v241;
  double LmScore;
  double v243;
  double v244;
  double v245;
  double v246;
  long double v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t v255;
  double v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  std::vector<std::string>::pointer v262;
  __int128 v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  std::string *v267;
  std::string *v268;
  __int128 v269;
  std::string *v270;
  __int32 *v271;
  size_t v272;
  size_t v273;
  const __int32 *v274;
  uint64_t v275;
  double *v276;
  char *v277;
  unint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  int v288;
  double v289;
  double v290;
  double *v291;
  double *v292;
  double v293;
  double v294;
  double v295;
  double v296;
  long double v297;
  long double v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  uint64_t *v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  char *v314;
  uint64_t *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  char *v320;
  uint64_t *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  BOOL v327;
  unint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  double v336;
  unint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  char *v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  int v351;
  uint64_t v352;
  char v353;
  char v354;
  double v355;
  uint64_t *v356;
  double v357;
  double v358;
  double v359;
  double v360;
  long double v361;
  long double v362;
  std::vector<int>::pointer v363;
  int *v364;
  std::vector<int>::pointer v365;
  int64_t v366;
  unint64_t v367;
  int64_t v368;
  unint64_t v369;
  char *v370;
  int *v371;
  int *v372;
  int v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  double v389;
  unint64_t v390;
  char *v391;
  uint64_t v392;
  double v393;
  double v394;
  double v395;
  double v396;
  long double v397;
  long double v398;
  double v399;
  double v400;
  double v401;
  long double v402;
  long double v403;
  long double v404;
  double v405;
  uint64_t v406;
  std::vector<int>::pointer v407;
  int *v408;
  std::vector<int>::pointer v409;
  int64_t v410;
  unint64_t v411;
  int64_t v412;
  unint64_t v413;
  char *v414;
  int *v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  double *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  double *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  _QWORD *v434;
  unint64_t v435;
  uint64_t v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  unint64_t v441;
  char *v442;
  char *v443;
  unint64_t v444;
  unint64_t v445;
  char *v446;
  unint64_t v447;
  char *v448;
  char v449;
  unint64_t v450;
  BOOL v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  uint64_t *v464;
  char *v465;
  char *v466;
  uint64_t v467;
  uint64_t **v468;
  unint64_t v469;
  uint64_t v470;
  void **v471;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  int64x2_t v481;
  void *v483[2];
  std::string::size_type v484;
  std::vector<std::string> v485;
  uint64_t *v486;
  _QWORD *v487[2];
  void *v488;
  char *v489;
  char *v490;
  void *v491;
  char *v492;
  char *v493;
  void *v494;
  uint64_t *v495;
  uint64_t *v496;
  void *__dst;
  char *v498;
  unint64_t v499;
  void *v500;
  char *v501;
  char *v502;
  void *v503[3];
  void *v504[3];
  void *v505[3];
  void *v506[3];
  void *v507;
  char *v508;
  char *v509;
  std::vector<int> v510;
  void *v511;
  char *v512;
  char *v513;
  void *v514[3];
  unsigned int *v515;
  __int128 v516;
  _BYTE v517[785];
  char v518;
  __int32 *v519;
  __int128 v520;
  _BYTE v521[1024];
  char v522;
  void *v523;
  void *v524;
  unint64_t v525;
  void *v526;
  void *__p;
  unint64_t v528;
  void *v529;
  _BYTE *v530;
  uint64_t v531;
  std::__split_buffer<std::string> __v;
  char __s1[16];
  uint64_t v534;
  double v535;
  double v536;
  char *v537;
  __int128 v538;
  _BYTE v539[256];
  char v540;
  uint64_t v541;

  v541 = *MEMORY[0x24BDAC8D0];
  v530 = 0;
  v529 = 0;
  v531 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<TWord const*,unsigned int>*,std::pair<TWord const*,unsigned int>*>((char *)&v529, *a2, a2[1], a2[1] - *a2);
  __p = 0;
  v526 = 0;
  v528 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v526, a2[1] - *a2);
  v471 = a5;
  v524 = 0;
  v523 = 0;
  v525 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v523, (uint64_t)(a4[1] - *a4) >> 4);
  v519 = (__int32 *)v521;
  v520 = xmmword_209A57DD0;
  v522 = 1;
  v515 = (unsigned int *)v517;
  v516 = xmmword_209A57DD0;
  v518 = 1;
  v8 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < a2[1] - *a2; ++i)
    {
      v10 = (__int32 ***)&v8[i];
      v11 = *v10;
      if (*v10)
      {
        if (*(_QWORD *)(a1 + 88))
          TWord::getTokenName(*v10, (uint64_t)&v519);
        v12 = *(_QWORD **)(a1 + 96);
        if (v12)
        {
          TWord::getCategoryTag((uint64_t)v11, &v515);
          v13 = a1;
          v12 = *(_QWORD **)(a1 + 96);
        }
        else
        {
          v13 = a1;
        }
        v16 = *(_QWORD **)(v13 + 88);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
        {
          if (v522)
          {
            LODWORD(v537) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)&v537, 1uLL);
            v17 = v519;
            --*((_QWORD *)&v520 + 1);
          }
          else
          {
            v17 = v519;
            if ((_QWORD)v520)
              v519[(_QWORD)v520 - 1] = 0;
          }
        }
        else
        {
          v17 = v519;
          v519[*((_QWORD *)&v520 + 1)] = 0;
        }
        if (*((_QWORD *)&v516 + 1) >= (unint64_t)v516)
        {
          if (v518)
          {
            LODWORD(v537) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v515, *((unint64_t *)&v516 + 1), (int *)&v537, 1uLL);
            v23 = v515;
            --*((_QWORD *)&v516 + 1);
          }
          else
          {
            v23 = v515;
            if ((_QWORD)v516)
              v515[(_QWORD)v516 - 1] = 0;
          }
        }
        else
        {
          v23 = v515;
          v515[*((_QWORD *)&v516 + 1)] = 0;
        }
        if (v16 && v17 && TRegExp::match(v16, (unsigned int *)v17, 0) || v12 && v23 && TRegExp::match(v12, v23, 0))
          goto LABEL_89;
        v24 = &(*a2)[i];
        v25 = (char *)__p;
        if ((unint64_t)__p >= v528)
        {
          v27 = ((_BYTE *)__p - (_BYTE *)v526) >> 4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
LABEL_820:
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v29 = v528 - (_QWORD)v526;
          if ((uint64_t)(v528 - (_QWORD)v526) >> 3 > v28)
            v28 = v29 >> 3;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v528, v30);
          else
            v31 = 0;
          v47 = (__int128 *)&v31[16 * v27];
          *v47 = *v24;
          v48 = (char *)__p;
          v49 = (char *)v526;
          v50 = (char *)v47;
          if (__p != v526)
          {
            do
            {
              *((_OWORD *)v50 - 1) = *((_OWORD *)v48 - 1);
              v50 -= 16;
              v48 -= 16;
            }
            while (v48 != v49);
            v48 = (char *)v526;
          }
          v26 = v47 + 1;
          v526 = v50;
          __p = v47 + 1;
          v528 = (unint64_t)&v31[16 * v30];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_OWORD *)__p = *v24;
          v26 = v25 + 16;
        }
        __p = v26;
        v36 = (_OWORD *)(*a4 + 16 * i);
        v37 = v524;
        if ((unint64_t)v524 >= v525)
        {
          v52 = ((_BYTE *)v524 - (_BYTE *)v523) >> 4;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60)
LABEL_819:
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v54 = v525 - (_QWORD)v523;
          if ((uint64_t)(v525 - (_QWORD)v523) >> 3 > v53)
            v53 = v54 >> 3;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v53;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v525, v41);
          else
            v42 = 0;
          v43 = &v42[16 * v52];
          *(_OWORD *)v43 = *v36;
          v44 = (char *)v524;
          v55 = (char *)v523;
          v46 = v43;
          if (v524 != v523)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
              v46 -= 16;
              v44 -= 16;
            }
            while (v44 != v55);
            goto LABEL_85;
          }
          goto LABEL_86;
        }
      }
      else
      {
        v14 = (char *)__p;
        if ((unint64_t)__p >= v528)
        {
          v18 = ((_BYTE *)__p - (_BYTE *)v526) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            goto LABEL_820;
          v20 = v528 - (_QWORD)v526;
          if ((uint64_t)(v528 - (_QWORD)v526) >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v528, v21);
          else
            v22 = 0;
          v32 = &v22[16 * v18];
          *(_OWORD *)v32 = *(_OWORD *)v10;
          v33 = (char *)__p;
          v34 = (char *)v526;
          v35 = v32;
          if (__p != v526)
          {
            do
            {
              *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
              v35 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            v33 = (char *)v526;
          }
          v15 = v32 + 16;
          v526 = v35;
          __p = v32 + 16;
          v528 = (unint64_t)&v22[16 * v21];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v10;
          v15 = v14 + 16;
        }
        __p = v15;
        v36 = (_OWORD *)(*a4 + 16 * i);
        v37 = v524;
        if ((unint64_t)v524 >= v525)
        {
          v38 = ((_BYTE *)v524 - (_BYTE *)v523) >> 4;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 60)
            goto LABEL_819;
          v40 = v525 - (_QWORD)v523;
          if ((uint64_t)(v525 - (_QWORD)v523) >> 3 > v39)
            v39 = v40 >> 3;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v525, v41);
          else
            v42 = 0;
          v43 = &v42[16 * v38];
          *(_OWORD *)v43 = *v36;
          v44 = (char *)v524;
          v45 = (char *)v523;
          v46 = v43;
          if (v524 != v523)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
              v46 -= 16;
              v44 -= 16;
            }
            while (v44 != v45);
LABEL_85:
            v44 = (char *)v523;
          }
LABEL_86:
          v51 = v43 + 16;
          v523 = v46;
          v524 = v43 + 16;
          v525 = (unint64_t)&v42[16 * v41];
          if (v44)
            operator delete(v44);
          goto LABEL_88;
        }
      }
      *v37 = *v36;
      v51 = v37 + 1;
LABEL_88:
      v524 = v51;
      *((_QWORD *)v529 + 2 * i) = 0;
LABEL_89:
      v8 = *a2;
    }
  }
  memset(v514, 0, sizeof(v514));
  std::vector<BOOL>::reserve((char **)v514, ((_BYTE *)__p - (_BYTE *)v526) >> 4);
  v512 = 0;
  v511 = 0;
  v513 = 0;
  std::vector<double>::reserve(&v511, ((_BYTE *)__p - (_BYTE *)v526) >> 4);
  v56 = (char **)a3;
  if (v526 == __p)
    goto LABEL_111;
  v57 = *(_QWORD *)(a1 + 360);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v57 + 992));
  if (*(_BYTE *)(v57 + TParam::getValidConfig((TParam *)(v57 + 992), ActiveConfigHandle) + 1144))
  {
    if (__p != v526)
    {
      v59 = 0;
      do
      {
        LOBYTE(v537) = 0;
        std::vector<BOOL>::push_back((uint64_t)v514, &v537);
        v60 = v512;
        if (v512 >= v513)
        {
          v62 = (char *)v511;
          v63 = (v512 - (_BYTE *)v511) >> 3;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v65 = v513 - (_BYTE *)v511;
          if ((v513 - (_BYTE *)v511) >> 2 > v64)
            v64 = v65 >> 2;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v513, v66);
            v60 = v512;
            v62 = (char *)v511;
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[8 * v63];
          *(_QWORD *)v68 = 0;
          v61 = v68 + 8;
          while (v60 != v62)
          {
            v69 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *((_QWORD *)v68 - 1) = v69;
            v68 -= 8;
          }
          v511 = v68;
          v512 = v61;
          v513 = &v67[8 * v66];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)v512 = 0;
          v61 = v60 + 8;
        }
        v512 = v61;
        ++v59;
      }
      while (v59 < ((_BYTE *)__p - (_BYTE *)v526) >> 4);
    }
LABEL_111:
    TCompounder::makeResult(a1, v471, &v526, (uint64_t *)&v529, (uint64_t)&v523, v514, &v511);
    goto LABEL_112;
  }
  memset(&v510, 0, sizeof(v510));
  std::vector<int>::reserve(&v510, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  v508 = 0;
  v507 = 0;
  v509 = 0;
  std::vector<unsigned long>::reserve(&v507, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  memset(v506, 0, sizeof(v506));
  std::vector<BOOL>::reserve((char **)v506, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  memset(v505, 0, sizeof(v505));
  std::vector<BOOL>::reserve((char **)v505, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  memset(v504, 0, sizeof(v504));
  std::vector<BOOL>::reserve((char **)v504, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  memset(v503, 0, sizeof(v503));
  std::vector<BOOL>::reserve((char **)v503, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  v500 = 0;
  v501 = 0;
  v502 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v500, (((_BYTE *)__p - (_BYTE *)v526) >> 4) + ((uint64_t)(a3[1] - *a3) >> 3));
  v70 = (char *)a3[1];
  if (v70 == (char *)*a3)
  {
    v105 = (char *)a3[1];
  }
  else
  {
    v71 = 0;
    v70 = (char *)*a3;
    do
    {
      v72 = *(uint64_t **)&v70[8 * v71];
      end = v510.__end_;
      if (v510.__end_ >= v510.__end_cap_.__value_)
      {
        begin = v510.__begin_;
        v76 = v510.__end_ - v510.__begin_;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v78 = (char *)v510.__end_cap_.__value_ - (char *)v510.__begin_;
        if (((char *)v510.__end_cap_.__value_ - (char *)v510.__begin_) >> 1 > v77)
          v77 = v78 >> 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v510.__end_cap_, v79);
          end = v510.__end_;
          begin = v510.__begin_;
        }
        else
        {
          v80 = 0;
        }
        v81 = (int *)&v80[4 * v76];
        *v81 = *((_DWORD *)v72 + 4);
        v74 = v81 + 1;
        while (end != begin)
        {
          v82 = *--end;
          *--v81 = v82;
        }
        v510.__begin_ = v81;
        v510.__end_ = v74;
        v510.__end_cap_.__value_ = (int *)&v80[4 * v79];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v510.__end_ = *((_DWORD *)v72 + 4);
        v74 = end + 1;
      }
      v510.__end_ = v74;
      v83 = v508;
      if (v508 >= v509)
      {
        v85 = (char *)v507;
        v86 = (v508 - (_BYTE *)v507) >> 3;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v88 = v509 - (_BYTE *)v507;
        if ((v509 - (_BYTE *)v507) >> 2 > v87)
          v87 = v88 >> 2;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v509, v89);
          v83 = v508;
          v85 = (char *)v507;
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[8 * v86];
        *(_QWORD *)v91 = v72[1];
        v84 = v91 + 8;
        while (v83 != v85)
        {
          v92 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v91 - 1) = v92;
          v91 -= 8;
        }
        v507 = v91;
        v508 = v84;
        v509 = &v90[8 * v89];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_QWORD *)v508 = v72[1];
        v84 = v83 + 8;
      }
      v508 = v84;
      LOBYTE(v537) = 0;
      std::vector<BOOL>::push_back((uint64_t)v506, &v537);
      LOBYTE(v537) = 0;
      std::vector<BOOL>::push_back((uint64_t)v505, &v537);
      LOBYTE(v537) = 0;
      std::vector<BOOL>::push_back((uint64_t)v504, &v537);
      LOBYTE(v537) = 0;
      std::vector<BOOL>::push_back((uint64_t)v503, &v537);
      v93 = *v72;
      v94 = v501;
      if (v501 >= v502)
      {
        v96 = (v501 - (_BYTE *)v500) >> 4;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v98 = v502 - (_BYTE *)v500;
        if ((v502 - (_BYTE *)v500) >> 3 > v97)
          v97 = v98 >> 3;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
          v99 = 0xFFFFFFFFFFFFFFFLL;
        else
          v99 = v97;
        if (v99)
          v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v502, v99);
        else
          v100 = 0;
        v101 = &v100[16 * v96];
        *(_QWORD *)v101 = v93;
        *((_DWORD *)v101 + 2) = 0;
        v103 = (char *)v500;
        v102 = v501;
        v104 = v101;
        if (v501 != v500)
        {
          do
          {
            *((_OWORD *)v104 - 1) = *((_OWORD *)v102 - 1);
            v104 -= 16;
            v102 -= 16;
          }
          while (v102 != v103);
          v102 = (char *)v500;
        }
        v95 = v101 + 16;
        v500 = v104;
        v501 = v101 + 16;
        v502 = &v100[16 * v99];
        if (v102)
          operator delete(v102);
      }
      else
      {
        *(_QWORD *)v501 = v93;
        *((_DWORD *)v94 + 2) = 0;
        v95 = v94 + 16;
      }
      v501 = v95;
      ++v71;
      v70 = (char *)*a3;
      v105 = (char *)a3[1];
    }
    while (v71 < (uint64_t)&v105[-*a3] >> 3);
    v56 = (char **)a3;
  }
  v537 = v539;
  v538 = xmmword_209A57DD0;
  v540 = 1;
  v106 = (char *)v526;
  if (__p != v526)
  {
    v107 = 0;
    v108 = 0;
    v109 = 0;
    do
    {
      v110 = (unsigned int ***)&v106[16 * v109];
      v111 = *v110;
      v112 = v501;
      if (v501 >= v502)
      {
        v114 = (v501 - (_BYTE *)v500) >> 4;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v116 = v502 - (_BYTE *)v500;
        if ((v502 - (_BYTE *)v500) >> 3 > v115)
          v115 = v116 >> 3;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
          v117 = 0xFFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v502, v117);
        else
          v118 = 0;
        v119 = &v118[16 * v114];
        *(_OWORD *)v119 = *(_OWORD *)v110;
        v121 = (char *)v500;
        v120 = v501;
        v122 = v119;
        if (v501 != v500)
        {
          do
          {
            *((_OWORD *)v122 - 1) = *((_OWORD *)v120 - 1);
            v122 -= 16;
            v120 -= 16;
          }
          while (v120 != v121);
          v120 = (char *)v500;
        }
        v113 = v119 + 16;
        v500 = v122;
        v501 = v119 + 16;
        v502 = &v118[16 * v117];
        if (v120)
          operator delete(v120);
      }
      else
      {
        *(_OWORD *)v501 = *(_OWORD *)v110;
        v113 = v112 + 16;
      }
      v501 = v113;
      if (v111)
      {
        TBuffer<char>::resize((uint64_t)&v537, 0);
        TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 16) + 240, *v111, (uint64_t)&v537);
        v123 = *(TLmScore **)(a1 + 352);
        if (*((_QWORD *)&v538 + 1) >= (unint64_t)v538)
        {
          if (v540)
          {
            __s1[0] = 0;
            TBuffer<char>::insert((uint64_t)&v537, *((unint64_t *)&v538 + 1), __s1, 1uLL);
            --*((_QWORD *)&v538 + 1);
          }
          else if ((_QWORD)v538)
          {
            v537[(_QWORD)v538 - 1] = 0;
          }
        }
        else
        {
          v537[*((_QWORD *)&v538 + 1)] = 0;
        }
        Class = TLmScore::getClass(v123, v537);
        v133 = Class;
        v134 = v508;
        if (v508 >= v509)
        {
          v136 = (char *)v507;
          v137 = (v508 - (_BYTE *)v507) >> 3;
          v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v139 = v509 - (_BYTE *)v507;
          if ((v509 - (_BYTE *)v507) >> 2 > v138)
            v138 = v139 >> 2;
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
            v140 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v140 = v138;
          if (v140)
          {
            v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v509, v140);
            v134 = v508;
            v136 = (char *)v507;
          }
          else
          {
            v141 = 0;
          }
          v142 = (uint64_t *)&v141[8 * v137];
          *v142 = v133;
          v135 = (char *)(v142 + 1);
          while (v134 != v136)
          {
            v143 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *--v142 = v143;
          }
          v507 = v142;
          v508 = v135;
          v509 = &v141[8 * v140];
          if (v136)
            operator delete(v136);
        }
        else
        {
          *(_QWORD *)v508 = Class;
          v135 = v134 + 8;
        }
        v508 = v135;
        if (*(_QWORD *)(a1 + 120) || *(_QWORD *)(a1 + 136) || *(_QWORD *)(a1 + 152) || *(_QWORD *)(a1 + 168))
          TWord::getTokenName((__int32 **)v111, (uint64_t)&v519);
        if (*(_QWORD *)(a1 + 128) || *(_QWORD *)(a1 + 144) || *(_QWORD *)(a1 + 160) || *(_QWORD *)(a1 + 176))
          TWord::getCategoryTag((uint64_t)v111, &v515);
        if ((*((_BYTE *)v526 + 16 * v109 + 8) & 1) != 0)
          goto LABEL_279;
        v144 = *(_QWORD *)(a1 + 360);
        v145 = TParam::getActiveConfigHandle((TParam *)(v144 + 1240));
        if (*(_BYTE *)(v144 + TParam::getValidConfig((TParam *)(v144 + 1240), v145) + 1392))
        {
          v146 = *(unint64_t **)(a1 + 352);
          if (*((_QWORD *)&v538 + 1) >= (unint64_t)v538)
          {
            if (v540)
            {
              __s1[0] = 0;
              TBuffer<char>::insert((uint64_t)&v537, *((unint64_t *)&v538 + 1), __s1, 1uLL);
              --*((_QWORD *)&v538 + 1);
            }
            else if ((_QWORD)v538)
            {
              v537[(_QWORD)v538 - 1] = 0;
            }
          }
          else
          {
            v537[*((_QWORD *)&v538 + 1)] = 0;
          }
          if (SDWord_GetHandle(*v146, v537) == -1)
            goto LABEL_279;
        }
        v151 = *(_QWORD **)(a1 + 120);
        v150 = *(_QWORD **)(a1 + 128);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
        {
          if (v522)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)__s1, 1uLL);
            v152 = v519;
            --*((_QWORD *)&v520 + 1);
          }
          else
          {
            v152 = v519;
            if ((_QWORD)v520)
              v519[(_QWORD)v520 - 1] = 0;
          }
        }
        else
        {
          v152 = v519;
          v519[*((_QWORD *)&v520 + 1)] = 0;
        }
        if (*((_QWORD *)&v516 + 1) >= (unint64_t)v516)
        {
          if (v518)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v515, *((unint64_t *)&v516 + 1), (int *)__s1, 1uLL);
            v153 = v515;
            --*((_QWORD *)&v516 + 1);
          }
          else
          {
            v153 = v515;
            if ((_QWORD)v516)
              v515[(_QWORD)v516 - 1] = 0;
          }
        }
        else
        {
          v153 = v515;
          v515[*((_QWORD *)&v516 + 1)] = 0;
        }
        if (v151 && v152 && TRegExp::match(v151, (unsigned int *)v152, 0)
          || v150 && v153 && TRegExp::match(v150, v153, 0))
        {
LABEL_279:
          v149 = 0;
        }
        else
        {
          v149 = 1;
        }
        v155 = *(_QWORD **)(a1 + 136);
        v154 = *(_QWORD **)(a1 + 144);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
        {
          if (v522)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)__s1, 1uLL);
            v156 = v519;
            --*((_QWORD *)&v520 + 1);
          }
          else
          {
            v156 = v519;
            if ((_QWORD)v520)
              v519[(_QWORD)v520 - 1] = 0;
          }
        }
        else
        {
          v156 = v519;
          v519[*((_QWORD *)&v520 + 1)] = 0;
        }
        if (*((_QWORD *)&v516 + 1) >= (unint64_t)v516)
        {
          if (v518)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v515, *((unint64_t *)&v516 + 1), (int *)__s1, 1uLL);
            v157 = v515;
            --*((_QWORD *)&v516 + 1);
          }
          else
          {
            v157 = v515;
            if ((_QWORD)v516)
              v515[(_QWORD)v516 - 1] = 0;
          }
        }
        else
        {
          v157 = v515;
          v515[*((_QWORD *)&v516 + 1)] = 0;
        }
        v158 = (!v155 || !v156 || !TRegExp::match(v155, (unsigned int *)v156, 0))
            && (!v154 || !v157 || !TRegExp::match(v154, v157, 0));
        LOBYTE(__v.__first_) = v158;
        std::vector<BOOL>::push_back((uint64_t)v505, &__v);
        v160 = *(_QWORD **)(a1 + 152);
        v159 = *(_QWORD **)(a1 + 160);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
        {
          if (v522)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)__s1, 1uLL);
            v161 = v519;
            --*((_QWORD *)&v520 + 1);
          }
          else
          {
            v161 = v519;
            if ((_QWORD)v520)
              v519[(_QWORD)v520 - 1] = 0;
          }
        }
        else
        {
          v161 = v519;
          v519[*((_QWORD *)&v520 + 1)] = 0;
        }
        if (*((_QWORD *)&v516 + 1) >= (unint64_t)v516)
        {
          if (v518)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v515, *((unint64_t *)&v516 + 1), (int *)__s1, 1uLL);
            v162 = v515;
            --*((_QWORD *)&v516 + 1);
          }
          else
          {
            v162 = v515;
            if ((_QWORD)v516)
              v515[(_QWORD)v516 - 1] = 0;
          }
        }
        else
        {
          v162 = v515;
          v515[*((_QWORD *)&v516 + 1)] = 0;
        }
        v163 = (!v160 || !v161 || !TRegExp::match(v160, (unsigned int *)v161, 0))
            && (!v159 || !v162 || !TRegExp::match(v159, v162, 0));
        LOBYTE(__v.__first_) = v163;
        std::vector<BOOL>::push_back((uint64_t)v504, &__v);
        v165 = *(_QWORD **)(a1 + 168);
        v164 = *(_QWORD **)(a1 + 176);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
        {
          if (v522)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)__s1, 1uLL);
            v166 = v519;
            --*((_QWORD *)&v520 + 1);
          }
          else
          {
            v166 = v519;
            if ((_QWORD)v520)
              v519[(_QWORD)v520 - 1] = 0;
          }
        }
        else
        {
          v166 = v519;
          v519[*((_QWORD *)&v520 + 1)] = 0;
        }
        if (*((_QWORD *)&v516 + 1) >= (unint64_t)v516)
        {
          if (v518)
          {
            *(_DWORD *)__s1 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v515, *((unint64_t *)&v516 + 1), (int *)__s1, 1uLL);
            v167 = v515;
            --*((_QWORD *)&v516 + 1);
          }
          else
          {
            v167 = v515;
            if ((_QWORD)v516)
              v515[(_QWORD)v516 - 1] = 0;
          }
        }
        else
        {
          v167 = v515;
          v515[*((_QWORD *)&v516 + 1)] = 0;
        }
        v168 = (!v165 || !v166 || !TRegExp::match(v165, (unsigned int *)v166, 0))
            && (!v164 || !v167 || !TRegExp::match(v164, v167, 0));
        LOBYTE(__v.__first_) = v168;
        std::vector<BOOL>::push_back((uint64_t)v503, &__v);
      }
      else
      {
        v124 = v508;
        if (v508 >= v509)
        {
          v126 = (char *)v507;
          v127 = (v508 - (_BYTE *)v507) >> 3;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v129 = v509 - (_BYTE *)v507;
          if ((v509 - (_BYTE *)v507) >> 2 > v128)
            v128 = v129 >> 2;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
            v130 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v509, v130);
            v124 = v508;
            v126 = (char *)v507;
          }
          else
          {
            v131 = 0;
          }
          v147 = &v131[8 * v127];
          *(_QWORD *)v147 = 0;
          v125 = v147 + 8;
          while (v124 != v126)
          {
            v148 = *((_QWORD *)v124 - 1);
            v124 -= 8;
            *((_QWORD *)v147 - 1) = v148;
            v147 -= 8;
          }
          v507 = v147;
          v508 = v125;
          v509 = &v131[8 * v130];
          if (v126)
            operator delete(v126);
        }
        else
        {
          *(_QWORD *)v508 = 0;
          v125 = v124 + 8;
        }
        v508 = v125;
        __s1[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v505, __s1);
        __s1[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v504, __s1);
        __s1[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v503, __s1);
        v149 = 0;
      }
      v169 = v107;
      if (v107 < (v530 - (_BYTE *)v529) >> 4)
      {
        v169 = v107;
        v170 = (char *)v529 + 16 * v107;
        while (*v170)
        {
          ++v169;
          v170 += 2;
          if ((v530 - (_BYTE *)v529) >> 4 == v169)
          {
            v169 = (v530 - (_BYTE *)v529) >> 4;
            break;
          }
        }
      }
      __s1[0] = v149 & v108 & (v169 == v107);
      std::vector<BOOL>::push_back((uint64_t)v506, __s1);
      v107 = v169 + 1;
      ++v109;
      v106 = (char *)v526;
      v108 = v149;
    }
    while (v109 < ((_BYTE *)__p - (_BYTE *)v526) >> 4);
    v56 = (char **)a3;
    v70 = (char *)*a3;
    v105 = (char *)a3[1];
  }
  v171 = v105 - v70;
  if (v105 != v70)
  {
    v172 = 0;
    do
    {
      v173 = *(_QWORD *)&v70[8 * v172];
      if (v173)
      {
        MEMORY[0x20BD149A8](v173, 0x1060C408A10481FLL);
        v70 = *v56;
        v105 = v56[1];
      }
      ++v172;
    }
    while (v172 < (v105 - v70) >> 3);
  }
  std::vector<TItnRule *>::resize((uint64_t)v56, 0);
  __dst = 0;
  v498 = 0;
  v499 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__dst, v510.__begin_, (uint64_t)v510.__end_, v510.__end_ - v510.__begin_);
  v174 = v498;
  if ((unint64_t)v498 >= v499)
  {
    v176 = (char *)__dst;
    v177 = (v498 - (_BYTE *)__dst) >> 2;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 62)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v179 = v499 - (_QWORD)__dst;
    if ((uint64_t)(v499 - (_QWORD)__dst) >> 1 > v178)
      v178 = v179 >> 1;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
      v180 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v499, v180);
      v176 = (char *)__dst;
      v174 = v498;
    }
    else
    {
      v181 = 0;
    }
    v182 = &v181[4 * v177];
    v183 = &v181[4 * v180];
    *(_DWORD *)v182 = 0;
    v175 = v182 + 4;
    while (v174 != v176)
    {
      v184 = *((_DWORD *)v174 - 1);
      v174 -= 4;
      *((_DWORD *)v182 - 1) = v184;
      v182 -= 4;
    }
    __dst = v182;
    v498 = v175;
    v499 = (unint64_t)v183;
    if (v176)
      operator delete(v176);
  }
  else
  {
    *(_DWORD *)v498 = 0;
    v175 = v174 + 4;
  }
  v498 = v175;
  if (*(_QWORD *)(a1 + 304) + 1 == (v175 - (_BYTE *)__dst) >> 2)
  {
    if (v175 != (char *)__dst + 4)
      memmove(__dst, (char *)__dst + 4, v175 - ((_BYTE *)__dst + 4));
    v498 = v175 - 4;
  }
  v186 = v500;
  v185 = v501;
  v494 = 0;
  v495 = 0;
  v496 = 0;
  v187 = operator new();
  TMbrEntry::TMbrEntry(v187, (uint64_t)&__dst, 0.0);
  v188 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v496, 1uLL);
  v190 = &v188[v189];
  *v188 = v187;
  v191 = v188 + 1;
  v193 = (char *)v494;
  v192 = (char *)v495;
  if (v495 != v494)
  {
    do
    {
      v194 = *((_QWORD *)v192 - 1);
      v192 -= 8;
      *--v188 = v194;
    }
    while (v192 != v193);
    v192 = (char *)v494;
  }
  v494 = v188;
  v495 = v191;
  v496 = v190;
  if (v192)
    operator delete(v192);
  v495 = v191;
  v195 = (v185 - v186) >> 4;
  v491 = 0;
  v492 = 0;
  v493 = 0;
  std::vector<unsigned long>::reserve(&v491, v195 + 1);
  v196 = v492;
  if (v492 >= v493)
  {
    v198 = (char *)v491;
    v199 = (v492 - (_BYTE *)v491) >> 3;
    v200 = v199 + 1;
    if ((unint64_t)(v199 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v201 = v493 - (_BYTE *)v491;
    if ((v493 - (_BYTE *)v491) >> 2 > v200)
      v200 = v201 >> 2;
    if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
      v202 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v202 = v200;
    if (v202)
    {
      v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v493, v202);
      v198 = (char *)v491;
      v196 = v492;
    }
    else
    {
      v203 = 0;
    }
    v204 = (uint64_t *)&v203[8 * v199];
    v205 = &v203[8 * v202];
    *v204 = 0;
    v197 = v204 + 1;
    while (v196 != v198)
    {
      v206 = *((_QWORD *)v196 - 1);
      v196 -= 8;
      *--v204 = v206;
    }
    v491 = v204;
    v492 = (char *)v197;
    v493 = v205;
    if (v198)
      operator delete(v198);
  }
  else
  {
    *(_QWORD *)v492 = 0;
    v197 = (uint64_t *)(v196 + 8);
  }
  v207 = v171 >> 3;
  v492 = (char *)v197;
  v488 = 0;
  v489 = 0;
  v490 = 0;
  v208 = (v171 >> 3) + 1;
  if (v208 < v195)
  {
    v209 = 0;
    v469 = v195;
    v476 = v195 - 2;
    v210 = ~v207;
    v211 = -20.0;
    v212 = 1.0;
    v470 = v171 >> 3;
    while (1)
    {
      v213 = v209;
      v477 = v207;
      v207 = v208;
      v209 = ((char *)v495 - (_BYTE *)v494) >> 3;
      v214 = v492;
      if (v492 >= v493)
      {
        v216 = (char *)v491;
        v217 = (v492 - (_BYTE *)v491) >> 3;
        v218 = v217 + 1;
        if ((unint64_t)(v217 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v219 = v493 - (_BYTE *)v491;
        if ((v493 - (_BYTE *)v491) >> 2 > v218)
          v218 = v219 >> 2;
        if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
          v220 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v220 = v218;
        if (v220)
        {
          v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v493, v220);
          v216 = (char *)v491;
          v214 = v492;
        }
        else
        {
          v221 = 0;
        }
        v222 = (unint64_t *)&v221[8 * v217];
        *v222 = v209;
        v215 = (char *)(v222 + 1);
        while (v214 != v216)
        {
          v223 = *((_QWORD *)v214 - 1);
          v214 -= 8;
          *--v222 = v223;
        }
        v491 = v222;
        v492 = v215;
        v493 = &v221[8 * v220];
        if (v216)
          operator delete(v216);
      }
      else
      {
        *(_QWORD *)v492 = v209;
        v215 = v214 + 8;
      }
      v492 = v215;
      if ((*((_QWORD *)v506[0] + (v207 >> 6)) & (1 << v207)) != 0)
        v224 = 2;
      else
        v224 = 1;
      v225 = 16 * (v477 - v470);
      v226 = *(_QWORD *)((char *)v523 + v225);
      if (v226)
        TWord::getTokenName(*(__int32 ***)((char *)v523 + v225), (uint64_t)&v519);
      v536 = 0.0;
      v535 = 0.0;
      v228 = *(_QWORD *)(a1 + 64);
      v227 = *(_QWORD *)(a1 + 72);
      v474 = v209;
      v475 = v224;
      v480 = v226;
      if (v227 == v228)
      {
        v232 = 0.0;
      }
      else
      {
        v229 = 0;
        v230 = v477 + 2;
        v231 = 0.0;
        v232 = 0.0;
        do
        {
          v233 = *(_QWORD *)(v228 + 8 * v229);
          v234 = *(_DWORD *)(v233 + 44);
          if (v234 > 1)
          {
            v224 = v475;
          }
          else
          {
            v235 = *(unsigned int *)(v233 + 40);
            if (v230 >= v235)
              v236 = v207 + 2 - v235;
            else
              v236 = 0;
            if (v236 < v230)
            {
              TBuffer<char>::resize((uint64_t)&v537, 0);
              v237 = v477;
              if (v234 == 1)
                v237 = v207;
              v238 = (unsigned int **)*((_QWORD *)v500 + 2 * v237);
              if (v238)
                TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 16) + 240, *v238, (uint64_t)&v537);
            }
            if (*(_DWORD *)(v233 + 40) < 2u)
              goto LABEL_440;
            v239 = *(unint64_t **)(v233 + 32);
            if (*((_QWORD *)&v538 + 1) >= (unint64_t)v538)
            {
              if (v540)
              {
                __s1[0] = 0;
                TBuffer<char>::insert((uint64_t)&v537, *((unint64_t *)&v538 + 1), __s1, 1uLL);
                --*((_QWORD *)&v538 + 1);
              }
              else if ((_QWORD)v538)
              {
                v537[(_QWORD)v538 - 1] = 0;
              }
            }
            else
            {
              v537[*((_QWORD *)&v538 + 1)] = 0;
            }
            if (SDWord_GetHandle(*v239, v537) == -1)
            {
LABEL_440:
              v240 = *(TLmScore **)(v233 + 32);
              v241 = &off_2545AA538;
            }
            else
            {
              v240 = *(TLmScore **)(v233 + 32);
              if (*((_QWORD *)&v538 + 1) >= (unint64_t)v538)
              {
                if (v540)
                {
                  __s1[0] = 0;
                  TBuffer<char>::insert((uint64_t)&v537, *((unint64_t *)&v538 + 1), __s1, 1uLL);
                  --*((_QWORD *)&v538 + 1);
                }
                else if ((_QWORD)v538)
                {
                  v537[(_QWORD)v538 - 1] = 0;
                }
              }
              else
              {
                v537[*((_QWORD *)&v538 + 1)] = 0;
              }
              v241 = &v537;
            }
            LmScore = TLmScore::getLmScore(v240, *v241);
            v243 = LmScore;
            v244 = *(double *)(v233 + 24);
            if (LmScore == 0.0)
            {
              v245 = 400.0;
            }
            else
            {
              v246 = LmScore / -20.0;
              v247 = 1.0 - exp(LmScore / -20.0);
              if (v246 < -500.0)
                v247 = 1.0;
              v245 = log(v247) * -20.0;
            }
            v209 = v474;
            v224 = v475;
            v232 = v232 + v244 * v245;
            v231 = v231 + v244 * v243;
            v228 = *(_QWORD *)(a1 + 64);
            v227 = *(_QWORD *)(a1 + 72);
          }
          ++v229;
        }
        while (v229 < (v227 - v228) >> 3);
        v536 = v231;
        v211 = -20.0;
        v212 = 1.0;
      }
      v535 = v232;
      v487[0] = 0;
      v487[1] = 0;
      v486 = (uint64_t *)v487;
      if (v213 < v209)
        break;
LABEL_579:
      std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy((uint64_t)&v486, v487[0]);
      v208 = v207 + 1;
      --v210;
      if (v207 + 1 == v469)
      {
        v197 = (uint64_t *)v492;
        goto LABEL_581;
      }
    }
    v248 = v213;
    v478 = 1 << v477;
    v479 = v477 >> 6;
LABEL_457:
    v249 = 0;
    v473 = v248;
    v250 = *((_QWORD *)v494 + v248);
    while (1)
    {
      v251 = *(_QWORD *)(v250 + 40);
      v252 = *(_DWORD *)(v251 - 4);
      if (v249)
      {
        if (!v252 && (*((_QWORD *)v505[0] + v479) & v478) == 0
          || v477 == v476 && (*((_QWORD *)v504[0] + (v207 >> 6)) & (1 << v207)) == 0)
        {
          goto LABEL_554;
        }
        if (v252 == 1)
        {
          v253 = v503[0];
          goto LABEL_467;
        }
      }
      else if (v252 == 1)
      {
        v253 = v504[0];
LABEL_467:
        if ((v253[v479] & v478) == 0)
          goto LABEL_554;
      }
      v254 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) != v254)
      {
        v255 = 0;
        v256 = 0.0;
        while (1)
        {
          v257 = *(_QWORD *)(v254 + 8 * v255);
          v258 = *(_DWORD *)(v257 + 44);
          if (v258 == 2)
          {
            v259 = *(unsigned int *)(v257 + 40);
            if (v207 >= v259)
              v260 = v207 + 1 - v259;
            else
              v260 = 0;
            memset(&v485, 0, sizeof(v485));
            if (v260 < v207)
            {
              v261 = 16 * v260;
              do
              {
                if ((*((_BYTE *)v500 + v261 + 8) & 2) != 0)
                {
                  std::vector<std::string>::resize(&v485, 0);
                }
                else if (*(_QWORD *)((char *)v500 + v261))
                {
                  __s1[0] = 0;
                  if (v260 < (v508 - (_BYTE *)v507) >> 3)
                    sprintf(__s1, "%llu", *((_QWORD *)v507 + v260));
                  strcat(__s1, *((const char **)&TCompounder::ms_classAppend+ *(int *)(*(_QWORD *)(v250 + 32)+ 4 * (v210 + v260 + ((*(_QWORD *)(v250 + 40) - *(_QWORD *)(v250 + 32)) >> 2)))));
                  std::string::basic_string[abi:ne180100]<0>(v483, __s1);
                  v262 = v485.__end_;
                  if (v485.__end_ >= v485.__end_cap_.__value_)
                  {
                    v264 = 0xAAAAAAAAAAAAAAABLL * (((char *)v485.__end_ - (char *)v485.__begin_) >> 3);
                    v265 = v264 + 1;
                    if (v264 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                    if (0x5555555555555556 * (((char *)v485.__end_cap_.__value_ - (char *)v485.__begin_) >> 3) > v265)
                      v265 = 0x5555555555555556 * (((char *)v485.__end_cap_.__value_ - (char *)v485.__begin_) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v485.__end_cap_.__value_ - (char *)v485.__begin_) >> 3) >= 0x555555555555555)
                      v266 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v266 = v265;
                    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v485.__end_cap_;
                    if (v266)
                      v267 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v485.__end_cap_, v266);
                    else
                      v267 = 0;
                    v268 = v267 + v264;
                    __v.__first_ = v267;
                    __v.__begin_ = v268;
                    __v.__end_cap_.__value_ = &v267[v266];
                    v269 = *(_OWORD *)v483;
                    v268->__r_.__value_.__r.__words[2] = v484;
                    *(_OWORD *)&v268->__r_.__value_.__l.__data_ = v269;
                    v483[1] = 0;
                    v484 = 0;
                    v483[0] = 0;
                    __v.__end_ = v268 + 1;
                    std::vector<std::string>::__swap_out_circular_buffer(&v485, &__v);
                    v270 = v485.__end_;
                    std::__split_buffer<std::wstring>::~__split_buffer(&__v);
                    v485.__end_ = v270;
                    if (SHIBYTE(v484) < 0)
                      operator delete(v483[0]);
                  }
                  else
                  {
                    v263 = *(_OWORD *)v483;
                    v485.__end_->__r_.__value_.__r.__words[2] = v484;
                    *(_OWORD *)&v262->__r_.__value_.__l.__data_ = v263;
                    v485.__end_ = v262 + 1;
                  }
                }
                ++v260;
                v261 += 16;
              }
              while (v210 + v260);
            }
            sprintf(__s1, "%llu%s", *((_QWORD *)v507 + v207), *((const char **)&TCompounder::ms_classAppend + v249));
            v256 = v256
                 + *(double *)(v257 + 24)
                 * TLmScore::getLmScore(*(unint64_t **)(v257 + 32), (uint64_t *)&v485, __s1);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)&v485;
            std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
            goto LABEL_502;
          }
          if (v480 && v249 == 1 && v258 == 3)
          {
            if (*((_QWORD *)&v520 + 1) >= (unint64_t)v520)
            {
              if (v522)
              {
                *(_DWORD *)__s1 = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v519, *((unint64_t *)&v520 + 1), (int *)__s1, 1uLL);
                v271 = v519;
                --*((_QWORD *)&v520 + 1);
              }
              else
              {
                v271 = v519;
                if ((_QWORD)v520)
                  v519[(_QWORD)v520 - 1] = 0;
              }
            }
            else
            {
              v271 = v519;
              v519[*((_QWORD *)&v520 + 1)] = 0;
            }
            v272 = wcslen(v271);
            v273 = v272;
            if (*(char *)(v257 + 23) < 0)
            {
              if (v272 != *(_QWORD *)(v257 + 8))
                goto LABEL_502;
              if (v272 == -1)
LABEL_816:
                std::wstring::__throw_out_of_range[abi:ne180100]();
              v274 = *(const __int32 **)v257;
              if (!v273)
              {
LABEL_517:
                v256 = v256 + *(double *)(v257 + 24);
                goto LABEL_502;
              }
            }
            else
            {
              if (v272 != *(unsigned __int8 *)(v257 + 23))
                goto LABEL_502;
              v274 = (const __int32 *)v257;
              if (v273 == -1)
                goto LABEL_816;
              if (!v273)
                goto LABEL_517;
            }
            if (!wmemcmp(v274, v271, v273))
              goto LABEL_517;
          }
LABEL_502:
          ++v255;
          v254 = *(_QWORD *)(a1 + 64);
          if (v255 >= (*(_QWORD *)(a1 + 72) - v254) >> 3)
          {
            v251 = *(_QWORD *)(v250 + 40);
            v209 = v474;
            v224 = v475;
            goto LABEL_519;
          }
        }
      }
      v256 = 0.0;
LABEL_519:
      v275 = v250 + 8 * v249;
      *(double *)(v275 + 16) = v256 + *(&v535 + v249);
      v276 = (double *)(v275 + 16);
      v277 = *(char **)(v250 + 32);
      v278 = (v251 - (uint64_t)v277) >> 2;
      if (v278 == *(_QWORD *)(a1 + 304))
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v488, v277 + 4, v251, (v251 - (uint64_t)(v277 + 4)) >> 2);
      }
      else if (&v488 != (void **)(v250 + 32))
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v488, v277, v251, v278);
      }
      v279 = v489;
      if (v489 >= v490)
      {
        v281 = (char *)v488;
        v282 = (v489 - (_BYTE *)v488) >> 2;
        v283 = v282 + 1;
        if ((unint64_t)(v282 + 1) >> 62)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v284 = v490 - (_BYTE *)v488;
        if ((v490 - (_BYTE *)v488) >> 1 > v283)
          v283 = v284 >> 1;
        if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL)
          v285 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v285 = v283;
        if (v285)
        {
          v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v490, v285);
          v281 = (char *)v488;
          v279 = v489;
        }
        else
        {
          v286 = 0;
        }
        v287 = &v286[4 * v282];
        *(_DWORD *)v287 = v249;
        v280 = v287 + 4;
        while (v279 != v281)
        {
          v288 = *((_DWORD *)v279 - 1);
          v279 -= 4;
          *((_DWORD *)v287 - 1) = v288;
          v287 -= 4;
        }
        v488 = v287;
        v489 = v280;
        v490 = &v286[4 * v285];
        if (v281)
          operator delete(v281);
      }
      else
      {
        *(_DWORD *)v489 = v249;
        v280 = v279 + 4;
      }
      v489 = v280;
      v289 = *(double *)v250;
      v290 = *v276;
      v291 = (double *)std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::find<std::vector<int>>((uint64_t)&v486, (int **)&v488);
      v292 = v291;
      v293 = v289 + v290;
      if (v487 == (_QWORD **)v291)
      {
        *(_QWORD *)__s1 = &v488;
        *((double *)std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(&v486, (int **)&v488, (uint64_t)&std::piecewise_construct, (uint64_t *)__s1)+ 7) = v293;
      }
      else
      {
        v294 = v291[7];
        if (v294 != -1000000.0)
        {
          if (v293 == -1000000.0)
          {
            v293 = v291[7];
          }
          else
          {
            if (v294 <= v293)
              v295 = v293;
            else
              v295 = v291[7];
            if (v294 <= v293)
              v296 = v291[7];
            else
              v296 = v293;
            v297 = (v295 - v296) / v211;
            v298 = exp(v297) + v212;
            if (v297 < -500.0)
              v298 = v212;
            v293 = v296 + log(v298) * v211;
          }
        }
        v292[7] = v293;
      }
LABEL_554:
      if (++v249 == v224)
      {
        v248 = v473 + 1;
        if (v473 + 1 == v209)
        {
          v299 = v486;
          if (v486 != (uint64_t *)v487)
          {
            do
            {
              v300 = operator new();
              TMbrEntry::TMbrEntry(v300, (uint64_t)(v299 + 4), *((double *)v299 + 7));
              v301 = v495;
              if (v495 >= v496)
              {
                v303 = ((char *)v495 - (_BYTE *)v494) >> 3;
                if ((unint64_t)(v303 + 1) >> 61)
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                v304 = ((char *)v496 - (_BYTE *)v494) >> 2;
                if (v304 <= v303 + 1)
                  v304 = v303 + 1;
                if ((unint64_t)((char *)v496 - (_BYTE *)v494) >= 0x7FFFFFFFFFFFFFF8)
                  v305 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v305 = v304;
                if (v305)
                  v306 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v496, v305);
                else
                  v306 = 0;
                v307 = (uint64_t *)&v306[8 * v303];
                *v307 = v300;
                v302 = v307 + 1;
                v309 = (char *)v494;
                v308 = (char *)v495;
                if (v495 != v494)
                {
                  do
                  {
                    v310 = *((_QWORD *)v308 - 1);
                    v308 -= 8;
                    *--v307 = v310;
                  }
                  while (v308 != v309);
                  v308 = (char *)v494;
                }
                v494 = v307;
                v495 = v302;
                v496 = (uint64_t *)&v306[8 * v305];
                if (v308)
                  operator delete(v308);
              }
              else
              {
                *v495 = v300;
                v302 = v301 + 1;
              }
              v495 = v302;
              v311 = (uint64_t *)v299[1];
              if (v311)
              {
                do
                {
                  v312 = v311;
                  v311 = (uint64_t *)*v311;
                }
                while (v311);
              }
              else
              {
                do
                {
                  v312 = (uint64_t *)v299[2];
                  v451 = *v312 == (_QWORD)v299;
                  v299 = v312;
                }
                while (!v451);
              }
              v299 = v312;
            }
            while (v312 != (uint64_t *)v487);
          }
          goto LABEL_579;
        }
        goto LABEL_457;
      }
    }
  }
LABEL_581:
  v313 = ((char *)v495 - (_BYTE *)v494) >> 3;
  if (v197 >= (uint64_t *)v493)
  {
    v315 = (uint64_t *)v491;
    v316 = ((char *)v197 - (_BYTE *)v491) >> 3;
    v317 = v316 + 1;
    if ((unint64_t)(v316 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v318 = v493 - (_BYTE *)v491;
    if ((v493 - (_BYTE *)v491) >> 2 > v317)
      v317 = v318 >> 2;
    if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8)
      v319 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v319 = v317;
    if (v319)
    {
      v320 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v493, v319);
      v315 = (uint64_t *)v491;
      v197 = (uint64_t *)v492;
    }
    else
    {
      v320 = 0;
    }
    v321 = (uint64_t *)&v320[8 * v316];
    v322 = &v320[8 * v319];
    *v321 = v313;
    v314 = (char *)(v321 + 1);
    while (v197 != v315)
    {
      v323 = *--v197;
      *--v321 = v323;
    }
    v491 = v321;
    v492 = v314;
    v493 = v322;
    if (v315)
      operator delete(v315);
  }
  else
  {
    *v197 = v313;
    v314 = (char *)(v197 + 1);
  }
  v492 = v314;
  v324 = v314 - (_BYTE *)v491;
  v326 = *((_QWORD *)v314 - 2);
  v325 = *((_QWORD *)v314 - 1);
  v327 = v325 > v326;
  v328 = v325 - v326;
  if (v327)
  {
    v329 = (uint64_t *)((char *)v494 + 8 * v326);
    do
    {
      v330 = *v329++;
      *(_QWORD *)(v330 + 8) = 0;
      --v328;
    }
    while (v328);
  }
  if (v324 >= 17)
  {
    v331 = (v324 >> 3) - 3;
    do
    {
      *(_QWORD *)&__s1[8] = 0;
      v534 = 0;
      *(_QWORD *)__s1 = &__s1[8];
      v332 = v491;
      v333 = *((_QWORD *)v491 + v331 + 1);
      v334 = *((_QWORD *)v491 + v331 + 2);
      if (v333 < v334)
      {
        do
        {
          v335 = *((_QWORD *)v494 + v333);
          v336 = *(double *)(v335 + 8);
          if (v336 != -1000000.0)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)(v335 + 32);
            *((double *)std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t **)__s1, (int **)(v335 + 32), (uint64_t)&std::piecewise_construct, (uint64_t *)&__v)+ 7) = v336;
          }
          ++v333;
        }
        while (v334 != v333);
        v332 = v491;
        v333 = *((_QWORD *)v491 + v331 + 1);
      }
      v337 = v332[v331];
      if (v337 < v333)
      {
        do
        {
          v338 = *((_QWORD *)v494 + v337);
          v339 = *(char **)(v338 + 32);
          v340 = *(_QWORD *)(v338 + 40);
          v341 = (v340 - (uint64_t)v339) >> 2;
          if (v341 == *(_QWORD *)(a1 + 304))
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v488, v339 + 4, v340, (v340 - (uint64_t)(v339 + 4)) >> 2);
          }
          else if (&v488 != (void **)(v338 + 32))
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v488, v339, v340, v341);
          }
          v342 = v489;
          if (v489 >= v490)
          {
            v344 = (char *)v488;
            v345 = (v489 - (_BYTE *)v488) >> 2;
            v346 = v345 + 1;
            if ((unint64_t)(v345 + 1) >> 62)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v347 = v490 - (_BYTE *)v488;
            if ((v490 - (_BYTE *)v488) >> 1 > v346)
              v346 = v347 >> 1;
            if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
              v348 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v348 = v346;
            if (v348)
            {
              v349 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v490, v348);
              v344 = (char *)v488;
              v342 = v489;
            }
            else
            {
              v349 = 0;
            }
            v350 = &v349[4 * v345];
            *(_DWORD *)v350 = 0;
            v343 = v350 + 4;
            while (v342 != v344)
            {
              v351 = *((_DWORD *)v342 - 1);
              v342 -= 4;
              *((_DWORD *)v350 - 1) = v351;
              v350 -= 4;
            }
            v488 = v350;
            v489 = v343;
            v490 = &v349[4 * v348];
            if (v344)
              operator delete(v344);
          }
          else
          {
            *(_DWORD *)v489 = 0;
            v343 = v342 + 4;
          }
          v352 = 0;
          v489 = v343;
          v353 = 1;
          do
          {
            v354 = v353;
            v355 = *(double *)(v338 + 8 * v352 + 16);
            if (v355 != -1000000.0)
            {
              *((_DWORD *)v489 - 1) = v352;
              __v.__first_ = (std::__split_buffer<std::string>::pointer)&v488;
              v356 = std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t **)__s1, (int **)&v488, (uint64_t)&std::piecewise_construct, (uint64_t *)&__v);
              v357 = v355 + *((double *)v356 + 7);
              v358 = *(double *)(v338 + 8);
              if (v358 != -1000000.0)
              {
                if (v357 == -1000000.0)
                {
                  v357 = *(double *)(v338 + 8);
                }
                else
                {
                  if (v358 <= v357)
                    v359 = v355 + *((double *)v356 + 7);
                  else
                    v359 = *(double *)(v338 + 8);
                  if (v358 <= v357)
                    v360 = *(double *)(v338 + 8);
                  else
                    v360 = v355 + *((double *)v356 + 7);
                  v361 = (v359 - v360) / -20.0;
                  v362 = exp(v361) + 1.0;
                  if (v361 < -500.0)
                    v362 = 1.0;
                  v357 = v360 + log(v362) * -20.0;
                }
              }
              *(double *)(v338 + 8) = v357;
            }
            v353 = 0;
            v352 = 1;
          }
          while ((v354 & 1) != 0);
          ++v337;
        }
        while (v337 != v333);
      }
      std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy((uint64_t)__s1, *(_QWORD **)&__s1[8]);
      v327 = v331-- <= 0;
    }
    while (!v327);
  }
  v363 = v510.__end_;
  if (v510.__end_ >= v510.__end_cap_.__value_)
  {
    v365 = v510.__begin_;
    v366 = v510.__end_ - v510.__begin_;
    v367 = v366 + 1;
    if ((unint64_t)(v366 + 1) >> 62)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v368 = (char *)v510.__end_cap_.__value_ - (char *)v510.__begin_;
    if (((char *)v510.__end_cap_.__value_ - (char *)v510.__begin_) >> 1 > v367)
      v367 = v368 >> 1;
    if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFFCLL)
      v369 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v369 = v367;
    if (v369)
    {
      v370 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v510.__end_cap_, v369);
      v363 = v510.__end_;
      v365 = v510.__begin_;
    }
    else
    {
      v370 = 0;
    }
    v371 = (int *)&v370[4 * v366];
    v372 = (int *)&v370[4 * v369];
    *v371 = 0;
    v364 = v371 + 1;
    while (v363 != v365)
    {
      v373 = *--v363;
      *--v371 = v373;
    }
    v510.__begin_ = v371;
    v510.__end_ = v364;
    v510.__end_cap_.__value_ = v372;
    if (v365)
      operator delete(v365);
  }
  else
  {
    *v510.__end_ = 0;
    v364 = v363 + 1;
  }
  v510.__end_ = v364;
  __s1[0] = 0;
  std::vector<BOOL>::push_back((uint64_t)v514, __s1);
  v374 = v512;
  if (v512 >= v513)
  {
    v376 = (char *)v511;
    v377 = (v512 - (_BYTE *)v511) >> 3;
    v378 = v377 + 1;
    if ((unint64_t)(v377 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v379 = v513 - (_BYTE *)v511;
    if ((v513 - (_BYTE *)v511) >> 2 > v378)
      v378 = v379 >> 2;
    if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFF8)
      v380 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v380 = v378;
    if (v380)
    {
      v381 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v513, v380);
      v374 = v512;
      v376 = (char *)v511;
    }
    else
    {
      v381 = 0;
    }
    v382 = &v381[8 * v377];
    v383 = &v381[8 * v380];
    *(_QWORD *)v382 = 0;
    v375 = v382 + 8;
    while (v374 != v376)
    {
      v384 = *((_QWORD *)v374 - 1);
      v374 -= 8;
      *((_QWORD *)v382 - 1) = v384;
      v382 -= 8;
    }
    v511 = v382;
    v512 = v375;
    v513 = v383;
    if (v376)
      operator delete(v376);
  }
  else
  {
    *(_QWORD *)v512 = 0;
    v375 = v374 + 8;
  }
  v512 = v375;
  v385 = ((v492 - (_BYTE *)v491) >> 3) - 1;
  if (v385 >= 2)
  {
    v386 = 1;
    v481 = vdupq_n_s64(0xC12E848000000000);
    do
    {
      *(int64x2_t *)__s1 = v481;
      v387 = *((_QWORD *)v491 + v386++);
      v388 = *((_QWORD *)v491 + v386);
      v389 = 0.0;
      v390 = v388 - v387;
      if (v388 > v387)
      {
        v391 = (char *)v494 + 8 * v387;
        do
        {
          v392 = *(int *)(*(_QWORD *)(*(_QWORD *)v391 + 40) - 4);
          v393 = **(double **)v391 + *(double *)(*(_QWORD *)v391 + 8);
          v394 = *(double *)&__s1[8 * v392];
          if (v394 != -1000000.0)
          {
            if (v393 == -1000000.0)
            {
              v393 = *(double *)&__s1[8 * v392];
            }
            else
            {
              if (v394 <= v393)
                v395 = **(double **)v391 + *(double *)(*(_QWORD *)v391 + 8);
              else
                v395 = *(double *)&__s1[8 * v392];
              if (v394 <= v393)
                v396 = *(double *)&__s1[8 * v392];
              else
                v396 = **(double **)v391 + *(double *)(*(_QWORD *)v391 + 8);
              v397 = (v395 - v396) / -20.0;
              v398 = exp(v397) + 1.0;
              if (v397 < -500.0)
                v398 = 1.0;
              v393 = v396 + log(v398) * -20.0;
            }
          }
          *(double *)&__s1[8 * v392] = v393;
          v391 += 8;
          --v390;
        }
        while (v390);
        v399 = *(double *)&__s1[8];
        v389 = 0.0;
        if (*(double *)&__s1[8] != -1000000.0)
        {
          v389 = 1.0;
          if (*(double *)__s1 != -1000000.0)
          {
            if (*(double *)__s1 <= *(double *)&__s1[8])
              v400 = *(double *)&__s1[8];
            else
              v400 = *(double *)__s1;
            if (*(double *)__s1 <= *(double *)&__s1[8])
              v401 = *(double *)__s1;
            else
              v401 = *(double *)&__s1[8];
            v402 = (v400 - v401) / -20.0;
            v403 = exp(v402) + 1.0;
            if (v402 < -500.0)
              v403 = 1.0;
            v404 = (v399 - (v401 + log(v403) * -20.0)) / -20.0;
            v405 = exp(v404);
            if (v404 >= -500.0)
              v389 = v405;
            else
              v389 = 0.0;
          }
        }
      }
      LODWORD(v406) = v389 >= *(double *)(a1 + 312);
      v407 = v510.__end_;
      if (v510.__end_ >= v510.__end_cap_.__value_)
      {
        v409 = v510.__begin_;
        v410 = v510.__end_ - v510.__begin_;
        v411 = v410 + 1;
        if ((unint64_t)(v410 + 1) >> 62)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v412 = (char *)v510.__end_cap_.__value_ - (char *)v510.__begin_;
        if (((char *)v510.__end_cap_.__value_ - (char *)v510.__begin_) >> 1 > v411)
          v411 = v412 >> 1;
        if ((unint64_t)v412 >= 0x7FFFFFFFFFFFFFFCLL)
          v413 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v413 = v411;
        if (v413)
        {
          v414 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v510.__end_cap_, v413);
          v407 = v510.__end_;
          v409 = v510.__begin_;
        }
        else
        {
          v414 = 0;
        }
        v415 = (int *)&v414[4 * v410];
        *v415 = v406;
        v408 = v415 + 1;
        while (v407 != v409)
        {
          v416 = *--v407;
          *--v415 = v416;
        }
        v510.__begin_ = v415;
        v510.__end_ = v408;
        v510.__end_cap_.__value_ = (int *)&v414[4 * v413];
        if (v409)
          operator delete(v409);
      }
      else
      {
        *v510.__end_ = v406;
        v408 = v407 + 1;
      }
      v510.__end_ = v408;
      v417 = *(_QWORD *)(a1 + 360);
      v418 = TParam::getActiveConfigHandle((TParam *)(v417 + 744));
      if (*(_BYTE *)(v417 + TParam::getValidConfig((TParam *)(v417 + 744), v418) + 896))
        v406 = (*(_QWORD *)((char *)v506[0]
                          + (((unint64_t)(v510.__end_ - v510.__begin_ - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v510.__end_ - v510.__begin_) - 1)) & 1;
      LOBYTE(__v.__first_) = v406;
      std::vector<BOOL>::push_back((uint64_t)v514, &__v);
      v419 = v512;
      if (v512 >= v513)
      {
        v421 = (char *)v511;
        v422 = (v512 - (_BYTE *)v511) >> 3;
        v423 = v422 + 1;
        if ((unint64_t)(v422 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v424 = v513 - (_BYTE *)v511;
        if ((v513 - (_BYTE *)v511) >> 2 > v423)
          v423 = v424 >> 2;
        if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFF8)
          v425 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v425 = v423;
        if (v425)
        {
          v426 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v513, v425);
          v419 = v512;
          v421 = (char *)v511;
        }
        else
        {
          v426 = 0;
        }
        v427 = (double *)&v426[8 * v422];
        *v427 = v389;
        v420 = v427 + 1;
        while (v419 != v421)
        {
          v428 = *((_QWORD *)v419 - 1);
          v419 -= 8;
          *((_QWORD *)v427-- - 1) = v428;
        }
        v511 = v427;
        v512 = (char *)v420;
        v513 = &v426[8 * v425];
        if (v421)
          operator delete(v421);
      }
      else
      {
        *(double *)v512 = v389;
        v420 = (double *)(v419 + 8);
      }
      v512 = (char *)v420;
    }
    while (v386 != v385);
  }
  TCompounder::makeResult(a1, v471, &v526, (uint64_t *)&v529, (uint64_t)&v523, v514, &v511);
  if (v510.__end_ - v510.__begin_ != (v501 - (_BYTE *)v500) >> 4)
  {
    tknPrintf("ERROR: Length tags = %llu but length of word is %llu\n", v429, v430, v431, v432, v510.__end_ - v510.__begin_, (v501 - (_BYTE *)v500) >> 4);
    exit(-1);
  }
  v434 = v494;
  v433 = v495;
  if (v495 != v494)
  {
    v435 = 0;
    do
    {
      v436 = v434[v435];
      if (v436)
      {
        v437 = *(void **)(v436 + 32);
        if (v437)
        {
          *(_QWORD *)(v436 + 40) = v437;
          operator delete(v437);
        }
        MEMORY[0x20BD149A8](v436, 0x1010C4089CCE15ELL);
        v434 = v494;
        v433 = v495;
      }
      ++v435;
    }
    while (v435 < v433 - v434);
  }
  v438 = *(_QWORD *)(a1 + 360);
  v439 = TParam::getActiveConfigHandle((TParam *)(v438 + 1488));
  if (*(_DWORD *)(v438 + 4 * TParam::getValidConfig((TParam *)(v438 + 1488), v439) + 1648) != -1)
  {
    v440 = TIntParam::get((TIntParam *)(*(_QWORD *)(a1 + 360) + 1488));
    TLatticeProcessor::clearLoadedLmData((TLatticeProcessor *)a1, v440);
  }
  v441 = *(_QWORD *)(a1 + 304);
  if (v441)
  {
    v443 = (char *)v500;
    v442 = v501;
    if (v501 != v500)
    {
      v444 = 0;
      v445 = (v501 - (_BYTE *)v500) >> 4;
      v446 = (char *)v500 + 16 * v445 - 8;
      v447 = v445;
      v448 = v446;
      while (1)
      {
        v449 = *v448;
        v448 -= 16;
        if ((v449 & 2) != 0)
          break;
        if (*((_QWORD *)v446 - 1))
          ++v444;
        v450 = v447 - 1;
        v451 = v444 >= v441 || v447 == 1;
        v446 = v448;
        --v447;
        if (v451)
          goto LABEL_768;
      }
      v450 = v447;
LABEL_768:
      if (v450 < v445)
      {
        do
        {
          if (*(_QWORD *)&v443[16 * v450])
          {
            v452 = v510.__begin_[v450];
            v453 = operator new();
            v454 = v453;
            v455 = *((_QWORD *)v507 + v450);
            *(_QWORD *)v453 = *((_QWORD *)v500 + 2 * v450);
            *(_QWORD *)(v453 + 8) = v455;
            *(_DWORD *)(v453 + 16) = v452;
            v457 = (uint64_t *)a3[1];
            v456 = a3[2];
            if ((unint64_t)v457 >= v456)
            {
              v459 = ((uint64_t)v457 - *a3) >> 3;
              if ((unint64_t)(v459 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v460 = v456 - *a3;
              v461 = v460 >> 2;
              if (v460 >> 2 <= (unint64_t)(v459 + 1))
                v461 = v459 + 1;
              if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
                v462 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v462 = v461;
              if (v462)
                v463 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v462);
              else
                v463 = 0;
              v464 = (uint64_t *)&v463[8 * v459];
              *v464 = v454;
              v458 = v464 + 1;
              v466 = (char *)*a3;
              v465 = (char *)a3[1];
              if (v465 == (char *)*a3)
              {
                v468 = (uint64_t **)a3;
              }
              else
              {
                do
                {
                  v467 = *((_QWORD *)v465 - 1);
                  v465 -= 8;
                  *--v464 = v467;
                }
                while (v465 != v466);
                v468 = (uint64_t **)a3;
                v465 = (char *)*a3;
              }
              *v468 = v464;
              v468[1] = v458;
              v468[2] = (uint64_t *)&v463[8 * v462];
              if (v465)
                operator delete(v465);
            }
            else
            {
              *v457 = v453;
              v458 = v457 + 1;
            }
            a3[1] = v458;
            v443 = (char *)v500;
            v442 = v501;
          }
          ++v450;
        }
        while (v450 < (v442 - v443) >> 4);
      }
    }
  }
  if (v488)
  {
    v489 = (char *)v488;
    operator delete(v488);
  }
  if (v491)
  {
    v492 = (char *)v491;
    operator delete(v491);
  }
  if (v494)
  {
    v495 = (uint64_t *)v494;
    operator delete(v494);
  }
  if (__dst)
  {
    v498 = (char *)__dst;
    operator delete(__dst);
  }
  if (v540 && v537 != v539 && v537)
    MEMORY[0x20BD149A8]();
  if (v500)
  {
    v501 = (char *)v500;
    operator delete(v500);
  }
  if (v503[0])
    operator delete(v503[0]);
  if (v504[0])
    operator delete(v504[0]);
  if (v505[0])
    operator delete(v505[0]);
  if (v506[0])
    operator delete(v506[0]);
  if (v507)
  {
    v508 = (char *)v507;
    operator delete(v507);
  }
  if (v510.__begin_)
  {
    v510.__end_ = v510.__begin_;
    operator delete(v510.__begin_);
  }
LABEL_112:
  if (v511)
  {
    v512 = (char *)v511;
    operator delete(v511);
  }
  if (v514[0])
    operator delete(v514[0]);
  if (v518 && v515 != (unsigned int *)v517 && v515)
    MEMORY[0x20BD149A8]();
  if (v522 && v519 != (__int32 *)v521 && v519)
    MEMORY[0x20BD149A8]();
  if (v523)
  {
    v524 = v523;
    operator delete(v523);
  }
  if (v526)
  {
    __p = v526;
    operator delete(v526);
  }
  if (v529)
  {
    v530 = v529;
    operator delete(v529);
  }
}

void sub_209A02FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  void *a72;
  unint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  void *v80;
  void *v81;

  if (__p)
    operator delete(__p);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  if (a57)
    operator delete(a57);
  if (LOBYTE(STACK[0xD48]))
  {
    v73 = STACK[0xC30];
    if (STACK[0xC30] != a12)
    {
      if (v73)
        MEMORY[0x20BD149A8](v73, 0x1000C4077774924);
    }
  }
  if (a60)
    operator delete(a60);
  if (a63)
    operator delete(a63);
  if (a66)
    operator delete(a66);
  if (a69)
    operator delete(a69);
  if (a72)
    operator delete(a72);
  v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  v76 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v76;
    operator delete(v76);
  }
  if (STACK[0x258])
    operator delete((void *)STACK[0x258]);
  if (LOBYTE(STACK[0x688]))
  {
    v77 = STACK[0x270];
    if (STACK[0x270] != a16)
    {
      if (v77)
        MEMORY[0x20BD149A8](v77, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xAA8]))
  {
    v78 = STACK[0x690];
    if (STACK[0x690] != a17)
    {
      if (v78)
        MEMORY[0x20BD149A8](v78, 0x1000C4052888210);
    }
  }
  v79 = (void *)STACK[0xAB0];
  if (STACK[0xAB0])
  {
    STACK[0xAB8] = (unint64_t)v79;
    operator delete(v79);
  }
  v80 = (void *)STACK[0xAC8];
  if (STACK[0xAC8])
  {
    STACK[0xAD0] = (unint64_t)v80;
    operator delete(v80);
  }
  v81 = (void *)STACK[0xAE0];
  if (STACK[0xAE0])
  {
    STACK[0xAE8] = (unint64_t)v81;
    operator delete(v81);
  }
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_209A03434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void TCompounder::applyInternal(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, void **a5, _QWORD *a6, void **a7)
{
  unint64_t v10;
  unint64_t v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unsigned int *v61;
  __int128 v62;
  _BYTE v63[785];
  char v64;
  unsigned int *v65;
  __int128 v66;
  _BYTE v67[1024];
  char v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int v75[3];

  v10 = a3;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v13 = a4 - a3;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve((void **)&v72, a4 - a3);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve((void **)&v69, v13);
  v65 = (unsigned int *)v67;
  v66 = xmmword_209A57DD0;
  v68 = 1;
  v61 = (unsigned int *)v63;
  v62 = xmmword_209A57DD0;
  v64 = 1;
  if (a4 > v10)
  {
    do
    {
      v14 = (_OWORD *)(*a2 + 16 * v10);
      v15 = v73;
      if (v73 >= v74)
      {
        v17 = (v73 - v72) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v19 = v74 - v72;
        if ((v74 - v72) >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v74, v20);
        else
          v21 = 0;
        v22 = &v21[16 * v17];
        *(_OWORD *)v22 = *v14;
        v24 = v72;
        v23 = v73;
        v25 = v22;
        if (v73 != v72)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }
          while (v23 != v24);
          v23 = v72;
        }
        v16 = v22 + 16;
        v72 = v25;
        v73 = v22 + 16;
        v74 = &v21[16 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_OWORD *)v73 = *v14;
        v16 = v15 + 16;
      }
      v73 = v16;
      v26 = (_OWORD *)(*a6 + 16 * v10);
      v27 = v70;
      if (v70 >= v71)
      {
        v29 = (v70 - v69) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v31 = v71 - v69;
        if ((v71 - v69) >> 3 > v30)
          v30 = v31 >> 3;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
          v32 = 0xFFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v71, v32);
        else
          v33 = 0;
        v34 = &v33[16 * v29];
        *(_OWORD *)v34 = *v26;
        v36 = v69;
        v35 = v70;
        v37 = v34;
        if (v70 != v69)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v36);
          v35 = v69;
        }
        v28 = v34 + 16;
        v69 = v37;
        v70 = v34 + 16;
        v71 = &v33[16 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_OWORD *)v70 = *v26;
        v28 = v27 + 16;
      }
      v70 = v28;
      v38 = *(_QWORD *)(*a2 + 16 * v10);
      if (v38)
      {
        if (*(_QWORD *)(a1 + 104))
          TWord::getTokenName(*(__int32 ***)(*a2 + 16 * v10), (uint64_t)&v65);
        v39 = *(_QWORD **)(a1 + 112);
        if (v39)
        {
          TWord::getCategoryTag(v38, &v61);
          v39 = *(_QWORD **)(a1 + 112);
        }
        v40 = *(_QWORD **)(a1 + 104);
        if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
        {
          if (v68)
          {
            v75[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v75, 1uLL);
            v41 = v65;
            --*((_QWORD *)&v66 + 1);
          }
          else
          {
            v41 = v65;
            if ((_QWORD)v66)
              v65[(_QWORD)v66 - 1] = 0;
          }
        }
        else
        {
          v41 = v65;
          v65[*((_QWORD *)&v66 + 1)] = 0;
        }
        if (*((_QWORD *)&v62 + 1) >= (unint64_t)v62)
        {
          if (v64)
          {
            v75[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v61, *((unint64_t *)&v62 + 1), v75, 1uLL);
            v42 = v61;
            --*((_QWORD *)&v62 + 1);
          }
          else
          {
            v42 = v61;
            if ((_QWORD)v62)
              v61[(_QWORD)v62 - 1] = 0;
          }
        }
        else
        {
          v42 = v61;
          v61[*((_QWORD *)&v62 + 1)] = 0;
        }
        if (v40 && v41 && TRegExp::match(v40, v41, 0) || v39 && v42 && TRegExp::match(v39, v42, 0))
        {
          TCompounder::applyModelMBR(a1, (__int128 **)&v72, a5, &v69, a7);
          v44 = (char *)*a5;
          v43 = (char *)a5[1];
          if ((unint64_t)(v43 - (_BYTE *)*a5) >= 9)
          {
            v45 = 0;
            v46 = *((_QWORD *)v43 - 1);
            do
            {
              v47 = *(_QWORD *)&v44[8 * v45];
              if (v47)
              {
                MEMORY[0x20BD149A8](v47, 0x1060C408A10481FLL);
                v44 = (char *)*a5;
                v43 = (char *)a5[1];
              }
              ++v45;
            }
            while (v45 < ((v43 - v44) >> 3) - 1);
            std::vector<TItnRule *>::resize((uint64_t)a5, 0);
            v49 = a5[1];
            v48 = (unint64_t)a5[2];
            if ((unint64_t)v49 >= v48)
            {
              v51 = ((char *)v49 - (_BYTE *)*a5) >> 3;
              if ((unint64_t)(v51 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v52 = v48 - (_QWORD)*a5;
              v53 = v52 >> 2;
              if (v52 >> 2 <= (unint64_t)(v51 + 1))
                v53 = v51 + 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
                v54 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v54 = v53;
              if (v54)
                v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v54);
              else
                v55 = 0;
              v56 = &v55[8 * v51];
              *(_QWORD *)v56 = v46;
              v50 = v56 + 8;
              v58 = (char *)*a5;
              v57 = (char *)a5[1];
              if (v57 != *a5)
              {
                do
                {
                  v59 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v56 - 1) = v59;
                  v56 -= 8;
                }
                while (v57 != v58);
                v57 = (char *)*a5;
              }
              *a5 = v56;
              a5[1] = v50;
              a5[2] = &v55[8 * v54];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *v49 = v46;
              v50 = v49 + 1;
            }
            a5[1] = v50;
          }
          std::vector<std::pair<TWord const*,unsigned int>>::resize((uint64_t)&v72, 0);
          std::vector<std::pair<unsigned long,unsigned long>>::resize((uint64_t)&v69, 0);
        }
      }
      ++v10;
    }
    while (v10 != a4);
  }
  if (v72 != v73)
    TCompounder::applyModelMBR(a1, (__int128 **)&v72, a5, &v69, a7);
  if (v64 && v61 != (unsigned int *)v63 && v61)
    MEMORY[0x20BD149A8]();
  if (v68 && v65 != (unsigned int *)v67 && v65)
    MEMORY[0x20BD149A8]();
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_209A03BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  unint64_t v17;
  void *v18;
  void *v19;

  if (LOBYTE(STACK[0x448]) && a15 != a10 && a15)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x868]))
  {
    v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17)
        MEMORY[0x20BD149A8](v17, 0x1000C4052888210);
    }
  }
  v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(_QWORD *)(v15 - 136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(_QWORD *)(v15 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TWord const*,unsigned int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<std::pair<TWord const*,unsigned int>>::__append((void **)a1, a2 - v2);
  }
}

void TCompounder::apply(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  void *__p;
  char *v85;
  char *v86;
  void *v87;
  _QWORD *v88;
  char *v89;

  v87 = 0;
  v88 = 0;
  v89 = 0;
  __p = 0;
  v85 = 0;
  v86 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v87, (a2[1] - *a2) >> 3);
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&__p, (a2[1] - *a2) >> 3);
  v81 = a1;
  v82 = a5;
  v83 = a6;
  v12 = *a2;
  if (a2[1] != *a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = a4;
    while (1)
    {
      v16 = *(_QWORD *)(v12 + 8 * v13);
      if (v13 < a3 || v13 >= a4)
      {
        v20 = v85;
        if (v85 >= v86)
        {
          v22 = (v85 - (_BYTE *)__p) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v24 = v86 - (_BYTE *)__p;
          if ((v86 - (_BYTE *)__p) >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v86, v25);
          else
            v26 = 0;
          v35 = &v26[16 * v22];
          *(_QWORD *)v35 = v16;
          *((_DWORD *)v35 + 2) = 0;
          v37 = (char *)__p;
          v36 = v85;
          v38 = v35;
          if (v85 != __p)
          {
            do
            {
              *((_OWORD *)v38 - 1) = *((_OWORD *)v36 - 1);
              v38 -= 16;
              v36 -= 16;
            }
            while (v36 != v37);
            v36 = (char *)__p;
          }
          v21 = v35 + 16;
          __p = v38;
          v85 = v35 + 16;
          v86 = &v26[16 * v25];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_QWORD *)v85 = v16;
          *((_DWORD *)v20 + 2) = 0;
          v21 = v20 + 16;
        }
        v85 = v21;
        v39 = v88;
        if (v88 >= (_QWORD *)v89)
        {
          v40 = ((char *)v88 - (_BYTE *)v87) >> 4;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v42 = v89 - (_BYTE *)v87;
          if ((v89 - (_BYTE *)v87) >> 3 > v41)
            v41 = v42 >> 3;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v43 = 0xFFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v89, v43);
          else
            v44 = 0;
          v45 = &v44[16 * v40];
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
          v47 = (char *)v87;
          v46 = (char *)v88;
          v48 = v45;
          if (v88 != v87)
          {
            do
            {
              *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
              v48 -= 16;
              v46 -= 16;
            }
            while (v46 != v47);
LABEL_68:
            v46 = (char *)v87;
          }
LABEL_69:
          v53 = v45 + 16;
          v87 = v48;
          v88 = v45 + 16;
          v89 = &v44[16 * v43];
          if (v46)
            operator delete(v46);
          goto LABEL_71;
        }
      }
      else
      {
        if ((*(_BYTE *)TWord::getOptionalTagBits(*(TWord **)(v12 + 8 * v13)) & 0x80) != 0)
        {
          v27 = ((char *)v88 - (_BYTE *)v87) >> 4;
          if (v27 == a3)
          {
            ++v14;
          }
          else
          {
            v33 = (char *)v87 + 16 * v27;
            v34 = *((_QWORD *)v33 - 1) + 1;
            *((_QWORD *)v33 - 2) = *(_QWORD *)(*a2 + 8 * v13);
            *((_QWORD *)v33 - 1) = v34;
          }
          --v15;
          goto LABEL_72;
        }
        v17 = *(_QWORD *)(*a2 + 8 * v13);
        v18 = v85;
        if (v85 >= v86)
        {
          v28 = (v85 - (_BYTE *)__p) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v30 = v86 - (_BYTE *)__p;
          if ((v86 - (_BYTE *)__p) >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v86, v31);
          else
            v32 = 0;
          v49 = &v32[16 * v28];
          *(_QWORD *)v49 = v17;
          *((_DWORD *)v49 + 2) = 0;
          v51 = (char *)__p;
          v50 = v85;
          v52 = v49;
          if (v85 != __p)
          {
            do
            {
              *((_OWORD *)v52 - 1) = *((_OWORD *)v50 - 1);
              v52 -= 16;
              v50 -= 16;
            }
            while (v50 != v51);
            v50 = (char *)__p;
          }
          v19 = v49 + 16;
          __p = v52;
          v85 = v49 + 16;
          v86 = &v32[16 * v31];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_QWORD *)v85 = v17;
          *((_DWORD *)v18 + 2) = 0;
          v19 = v18 + 16;
        }
        v85 = v19;
        v39 = v88;
        if (v88 >= (_QWORD *)v89)
        {
          v54 = ((char *)v88 - (_BYTE *)v87) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v56 = v89 - (_BYTE *)v87;
          if ((v89 - (_BYTE *)v87) >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v43 = 0xFFFFFFFFFFFFFFFLL;
          else
            v43 = v55;
          if (v43)
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v89, v43);
          else
            v44 = 0;
          v45 = &v44[16 * v54];
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
          v57 = (char *)v87;
          v46 = (char *)v88;
          v48 = v45;
          if (v88 != v87)
          {
            do
            {
              *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
              v48 -= 16;
              v46 -= 16;
            }
            while (v46 != v57);
            goto LABEL_68;
          }
          goto LABEL_69;
        }
      }
      v53 = v39 + 2;
      *v39 = 0;
      v39[1] = 0;
LABEL_71:
      v88 = v53;
LABEL_72:
      ++v13;
      v12 = *a2;
      if (v13 >= (a2[1] - *a2) >> 3)
        goto LABEL_75;
    }
  }
  v14 = 0;
  v15 = a4;
LABEL_75:
  TCompounder::apply(v81, &__p, a3, v15, v82, &v87, a6);
  v58 = *a6;
  v59 = a6[1];
  if (*a6 == v59)
  {
    if (v14)
    {
      v71 = (unint64_t)a6[2];
      if ((unint64_t)v58 >= v71)
      {
        v73 = v71 - (_QWORD)v58;
        v74 = v73 >> 3;
        if ((unint64_t)(v73 >> 3) <= 1)
          v74 = 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
          v75 = 0xFFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        v76 = std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a6 + 2), v75);
        v78 = &v76[2 * v77];
        *v76 = 0;
        v76[1] = v14;
        v72 = v76 + 2;
        v80 = (char *)*v83;
        v79 = (char *)v83[1];
        if (v79 != *v83)
        {
          do
          {
            *((_OWORD *)v76 - 1) = *((_OWORD *)v79 - 1);
            v76 -= 2;
            v79 -= 16;
          }
          while (v79 != v80);
          v79 = (char *)*v83;
        }
        *v83 = v76;
        v83[1] = v72;
        v83[2] = v78;
        if (v79)
          operator delete(v79);
      }
      else
      {
        *v58 = 0;
        v58[1] = v14;
        v72 = v58 + 2;
      }
      v83[1] = v72;
    }
  }
  else
  {
    v60 = 0;
    v61 = (v59 - (_BYTE *)v58) >> 4;
    if (v61 <= 1)
      v61 = 1;
    v62 = (char *)v87 + 8;
    do
    {
      v63 = &v58[2 * v60];
      v66 = v63[1];
      v64 = v63 + 1;
      v65 = v66;
      if (v66)
      {
        v67 = 0;
        v68 = &v62[16 * a3];
        v69 = v65;
        do
        {
          v70 = *(_QWORD *)v68;
          v68 += 16;
          v67 += v70;
          --v69;
        }
        while (v69);
        a3 += v65;
      }
      else
      {
        v67 = 0;
      }
      *v64 = v65 + v67;
      if (a3 >= v15)
        break;
      ++v60;
    }
    while (v60 != v61);
    v58[1] += v14;
  }
  if (__p)
  {
    v85 = (char *)__p;
    operator delete(__p);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_209A04244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void TCompounder::apply(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, void **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ActiveConfigHandle;
  _QWORD *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *__p[2];
  char v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v13 = *(_QWORD *)(a1 + 360);
  v14 = *(_QWORD *)(v13 + 136);
  *(_QWORD *)(v13 + 136) = a5;
  *(_BYTE *)(a1 + 56) = 0;
  TCompounder::applyInternal(a1, a2, 0, a3, &v29, a6, a7);
  v15 = *(_QWORD *)(a1 + 360);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 496));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(v15 + TParam::getValidConfig((TParam *)(v15 + 496), ActiveConfigHandle) + 648);
  std::vector<std::pair<unsigned long,unsigned long>>::resize((uint64_t)a7, 0);
  TCompounder::applyInternal(a1, a2, a3, a4, &v29, a6, a7);
  v17 = v29;
  v18 = v30;
  if (v30 == v29)
  {
    v17 = v30;
  }
  else
  {
    v19 = 0;
    do
    {
      if (v17[v19])
      {
        MEMORY[0x20BD149A8](v17[v19], 0x1060C408A10481FLL);
        v17 = v29;
        v18 = v30;
      }
      ++v19;
    }
    while (v19 < (v18 - (_BYTE *)v17) >> 3);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v20 = *(_QWORD *)(a1 + 360);
    v21 = (unsigned int *)(v20 + 512);
    if (*(char *)(v20 + 535) < 0)
      v21 = *(unsigned int **)v21;
    loggableUnicode(v21, __p);
    if (v28 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    tknPrintf("%s: UTT_BOUNDARY\n", v22, v23, v24, v25, v26);
    if (v28 < 0)
      operator delete(__p[0]);
    v17 = v29;
  }
  *(_QWORD *)(v13 + 136) = v14;
  if (v17)
  {
    v30 = v17;
    operator delete(v17);
  }
}

void sub_209A04428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  if (a16 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 136) = v19;
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t TCompounder::apply(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t Word;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  TWord *v34;
  __int32 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char *v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  _BYTE *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  char v191;
  char *v192;
  char *v193;
  uint64_t i;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  _QWORD *exception;
  std::string *v221;
  __int128 v222;
  uint64_t *v223;
  unint64_t v224;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  uint64_t v241;
  _BYTE v242[32];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  void *v247;
  _BYTE *v248;
  uint64_t v249;
  void *v250;
  char *v251;
  char *v252;
  void *v253;
  char *v254;
  char *v255;
  void *v256[2];
  uint64_t v257;
  unint64_t v258;
  void *v259[3];
  void *__p;
  char *v261;
  char *v262;
  void *v263[3];
  void *v264[3];
  void *v265[3];
  void *v266[3];
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  _QWORD v275[2];

  v5 = *(_QWORD *)(a1 + 360);
  v227 = *(_QWORD *)(v5 + 136);
  v228 = v5;
  *(_QWORD *)(v5 + 136) = a4;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 256) + 8) != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    tknPrintf("Error: The lattice lexicon handle does not match the lattice processor's lexicon handle.\n", (uint64_t)a2, a3, a4, a5);
    std::string::basic_string[abi:ne180100]<0>(v256, &byte_209A88803);
    *(_QWORD *)v242 = aPpx;
    if (SHIBYTE(v257) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v242[8], (const std::string::value_type *)v256[0], (std::string::size_type)v256[1]);
    }
    else
    {
      *(_OWORD *)&v242[8] = *(_OWORD *)v256;
      *(_QWORD *)&v242[24] = v257;
    }
    *(_QWORD *)v242 = &unk_24C214BA0;
    if (v242[31] >= 0)
      v219 = &v242[8];
    else
      v219 = *(const char **)&v242[8];
    conditionalAssert(v219, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2091, v217, v218);
    *(_QWORD *)v242 = aPpx;
    if ((v242[31] & 0x80000000) != 0)
      operator delete(*(void **)&v242[8]);
    if (SHIBYTE(v257) < 0)
      operator delete(v256[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v242, &byte_209A88803);
    *exception = aPpx;
    v221 = (std::string *)(exception + 1);
    if ((v242[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v221, *(const std::string::value_type **)v242, *(std::string::size_type *)&v242[8]);
    }
    else
    {
      v222 = *(_OWORD *)v242;
      exception[3] = *(_QWORD *)&v242[16];
      *(_OWORD *)&v221->__r_.__value_.__l.__data_ = v222;
    }
    *exception = &unk_24C214BA0;
  }
  v6 = a3;
  v8 = *(_QWORD *)(a3 + 120);
  v241 = *(_QWORD *)(a3 + 64);
  v273 = 0;
  v274 = 0;
  v275[0] = 0;
  v9 = *a2;
  if (a2[1] == *a2)
  {
    v223 = 0;
    v229 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      Word = TLexicon::findWord(*(_QWORD *)(a1 + 16), *(__int32 **)(v9 + 8 * v10));
      if (!Word)
        Word = (uint64_t)TLexicon::addTempWord(*(_QWORD *)(a1 + 16), *(int **)(*a2 + 8 * v10), 0, 0, 0);
      v12 = v274;
      if ((unint64_t)v274 >= v275[0])
      {
        v14 = ((char *)v274 - (char *)v273) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v16 = v275[0] - (_QWORD)v273;
        if ((uint64_t)(v275[0] - (_QWORD)v273) >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)v275, v17);
        else
          v18 = 0;
        v19 = &v18[16 * v14];
        *(_QWORD *)v19 = Word;
        *((_DWORD *)v19 + 2) = 0;
        v21 = v273;
        v20 = v274;
        v22 = v19;
        if (v274 != v273)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
            v22 -= 16;
            v20 -= 2;
          }
          while (v20 != v21);
          v20 = v273;
        }
        v13 = (uint64_t *)(v19 + 16);
        v273 = (uint64_t *)v22;
        v274 = v13;
        v275[0] = &v18[16 * v17];
        if (v20)
        {
          v23 = v13;
          operator delete(v20);
          v13 = v23;
        }
      }
      else
      {
        *v274 = Word;
        *((_DWORD *)v12 + 2) = 0;
        v13 = v12 + 2;
      }
      v274 = v13;
      ++v10;
      v9 = *a2;
    }
    while (v10 < (a2[1] - *a2) >> 3);
    v229 = v13;
    v223 = v273;
    v6 = a3;
  }
  v270 = 0;
  v271 = 0;
  v272 = 0;
  TFsa::topologicalSort((unint64_t *)(v6 + 24), &v270);
  v25 = v270;
  v24 = v271;
  v28 = v6 + 128;
  v27 = *(_QWORD *)(v6 + 128);
  v26 = *(_QWORD *)(v28 + 8);
  v267 = 0;
  v268 = 0;
  v269 = 0;
  std::vector<unsigned long>::vector(v266, ((v271 - v270) >> 3) + 1);
  std::vector<TCompoundPath>::vector(v265, (v24 - v25) >> 3);
  v230 = (v24 - v25) >> 3;
  std::vector<unsigned long>::vector(v264, v230);
  std::vector<std::pair<std::pair<TWord const*,unsigned int>,BOOL>>::vector(v263, (v26 - v27) >> 3);
  __p = 0;
  v261 = 0;
  v262 = 0;
  *(_QWORD *)v242 = -1;
  std::vector<unsigned long>::vector(v259, v230, v242);
  v258 = 0;
  TAllocator::TAllocator((TAllocator *)v256, 2048);
  v240 = v8 + 1;
  if (v24 != v25)
  {
    v29 = 0;
    v30 = (v24 - v25) >> 3;
    if (v230 <= 1)
      v30 = 1;
    v232 = v30;
    while (1)
    {
      v31 = *(_QWORD **)&v270[8 * v29];
      *((_QWORD *)v264[0] + *v31) = v29;
      *((_QWORD *)v266[0] + v29) = (v268 - v267) >> 3;
      v32 = v31[2];
      v236 = v29;
      if (v32)
        break;
LABEL_115:
      if (++v29 == v232)
        goto LABEL_116;
    }
    while (1)
    {
      v33 = *(_QWORD **)v32;
      if (**(_QWORD **)v32 == 2)
      {
        v35 = (__int32 *)v33[1];
        v34 = (TWord *)TLexicon::findWord(*(_QWORD *)(a1 + 16), v35);
        if (!v34)
          v34 = (TWord *)TLexicon::addTempWord(*(_QWORD *)(a1 + 16), v35, 0, 0, 0);
        if ((v33[2] & 1) == 0)
        {
          v36 = *(unsigned __int8 *)TWord::getOptionalTagBits(v34) >> 7;
          goto LABEL_37;
        }
      }
      else
      {
        v34 = 0;
      }
      v36 = 0;
LABEL_37:
      v37 = *((_QWORD *)v264[0] + **(_QWORD **)(v32 + 24));
      v38 = *(_QWORD *)(v32 + 8);
      v39 = (char *)v265[0];
      v40 = *((_QWORD *)v265[0] + 3 * v37 + 2);
      if (v40 == -1)
        v40 = 0;
      v41 = v40 + v33[5];
      v42 = *((_DWORD *)v33 + 4);
      v43 = (char *)v263[0] + 24 * v38;
      *(_QWORD *)v43 = v34;
      *((_DWORD *)v43 + 2) = v42;
      v43[16] = v36;
      v44 = &v39[24 * v29];
      v46 = *((_QWORD *)v44 + 2);
      v45 = (unint64_t *)(v44 + 16);
      if (v41 < v46)
      {
        v47 = &v39[24 * v29];
        *(_QWORD *)v47 = v37;
        *((_QWORD *)v47 + 1) = v38;
        *v45 = v41;
      }
      v48 = (unint64_t *)((char *)v266[0] + 8 * v37);
      v49 = *v48;
      v50 = v48[1];
      v51 = *v48 == v50;
      if (*v48 < v50)
      {
        do
        {
          v52 = *(_QWORD *)&v267[8 * v49];
          if (*(_BYTE *)(v52 + 16))
          {
            v53 = TAllocator::allocate((TAllocator *)v256, 24);
            *((_BYTE *)v53 + 17) = 0;
            *v53 = v52;
            v53[1] = v38;
            *((_BYTE *)v53 + 16) = v36;
            v54 = v268;
            if (v268 >= v269)
            {
              v55 = (v268 - v267) >> 3;
              if ((unint64_t)(v55 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v56 = (v269 - v267) >> 2;
              if (v56 <= v55 + 1)
                v56 = v55 + 1;
              if ((unint64_t)(v269 - v267) >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v269, v57);
              else
                v58 = 0;
              v64 = &v58[8 * v55];
              *(_QWORD *)v64 = v53;
              v59 = v64 + 8;
              v66 = v267;
              v65 = v268;
              if (v268 != v267)
              {
                do
                {
                  v67 = *((_QWORD *)v65 - 1);
                  v65 -= 8;
                  *((_QWORD *)v64 - 1) = v67;
                  v64 -= 8;
                }
                while (v65 != v66);
                goto LABEL_74;
              }
              goto LABEL_75;
            }
          }
          else
          {
            if (!v36)
            {
              if (v240 != v241 && !*(_BYTE *)(v52 + 17))
              {
                createTransitionForProduction(a3, *(_QWORD *)&v267[8 * v49], v263, (uint64_t *)v259, &v258);
                v61 = v60;
                v62 = v261;
                if (v261 >= v262)
                {
                  v72 = (v261 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v72 + 1) >> 61)
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  v73 = (v262 - (_BYTE *)__p) >> 2;
                  if (v73 <= v72 + 1)
                    v73 = v72 + 1;
                  if ((unint64_t)(v262 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v74 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v74 = v73;
                  if (v74)
                    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v262, v74);
                  else
                    v75 = 0;
                  v76 = &v75[8 * v72];
                  *(_QWORD *)v76 = v61;
                  v63 = v76 + 8;
                  v78 = (char *)__p;
                  v77 = v261;
                  if (v261 != __p)
                  {
                    do
                    {
                      v79 = *((_QWORD *)v77 - 1);
                      v77 -= 8;
                      *((_QWORD *)v76 - 1) = v79;
                      v76 -= 8;
                    }
                    while (v77 != v78);
                    v77 = (char *)__p;
                  }
                  __p = v76;
                  v261 = v63;
                  v262 = &v75[8 * v74];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *(_QWORD *)v261 = v60;
                  v63 = v62 + 8;
                }
                v261 = v63;
              }
              v51 = 1;
              goto LABEL_78;
            }
            v53 = TAllocator::allocate((TAllocator *)v256, 24);
            *v53 = v52;
            v53[1] = v38;
            *((_WORD *)v53 + 8) = 0;
            v54 = v268;
            if (v268 >= v269)
            {
              v68 = (v268 - v267) >> 3;
              if ((unint64_t)(v68 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v69 = (v269 - v267) >> 2;
              if (v69 <= v68 + 1)
                v69 = v68 + 1;
              if ((unint64_t)(v269 - v267) >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v69;
              if (v57)
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v269, v57);
              else
                v58 = 0;
              v64 = &v58[8 * v68];
              *(_QWORD *)v64 = v53;
              v59 = v64 + 8;
              v70 = v267;
              v65 = v268;
              if (v268 != v267)
              {
                do
                {
                  v71 = *((_QWORD *)v65 - 1);
                  v65 -= 8;
                  *((_QWORD *)v64 - 1) = v71;
                  v64 -= 8;
                }
                while (v65 != v70);
LABEL_74:
                v65 = v267;
              }
LABEL_75:
              v267 = v64;
              v268 = v59;
              v269 = &v58[8 * v57];
              if (v65)
                operator delete(v65);
              goto LABEL_77;
            }
          }
          *(_QWORD *)v54 = v53;
          v59 = v54 + 8;
LABEL_77:
          v268 = v59;
LABEL_78:
          ++v49;
        }
        while (v49 != v50);
      }
      if (v51)
      {
        v80 = TAllocator::allocate((TAllocator *)v256, 24);
        v81 = v80;
        *((_BYTE *)v80 + 17) = 0;
        *v80 = 0;
        v80[1] = v38;
        *((_BYTE *)v80 + 16) = v36;
        v82 = v268;
        if (v268 >= v269)
        {
          v84 = (v268 - v267) >> 3;
          if ((unint64_t)(v84 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v85 = (v269 - v267) >> 2;
          if (v85 <= v84 + 1)
            v85 = v84 + 1;
          if ((unint64_t)(v269 - v267) >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v85;
          if (v86)
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v269, v86);
          else
            v87 = 0;
          v88 = &v87[8 * v84];
          *(_QWORD *)v88 = v81;
          v83 = v88 + 8;
          v90 = v267;
          v89 = v268;
          if (v268 != v267)
          {
            do
            {
              v91 = *((_QWORD *)v89 - 1);
              v89 -= 8;
              *((_QWORD *)v88 - 1) = v91;
              v88 -= 8;
            }
            while (v89 != v90);
            v89 = v267;
          }
          v267 = v88;
          v268 = v83;
          v269 = &v87[8 * v86];
          if (v89)
            operator delete(v89);
        }
        else
        {
          *(_QWORD *)v268 = v80;
          v83 = v82 + 8;
        }
        v268 = v83;
      }
      v32 = *(_QWORD *)(v32 + 32);
      v29 = v236;
      if (!v32)
        goto LABEL_115;
    }
  }
LABEL_116:
  *((_QWORD *)v266[0] + v230) = (v268 - v267) >> 3;
  v92 = a3;
  v94 = *(_QWORD **)(a3 + 200);
  v93 = *(_QWORD **)(a3 + 208);
  if (v94 == v93)
  {
    v95 = v229;
  }
  else
  {
    v95 = v229;
    while (!*v94)
    {
      if (++v94 == v93)
        goto LABEL_183;
    }
  }
  if (v94 == v93)
  {
LABEL_183:
    v237 = 0;
    v129 = 0;
    v253 = 0;
    v254 = 0;
    v255 = 0;
  }
  else
  {
    v237 = 0;
    v96 = -1;
    v97 = -1;
    do
    {
      v98 = *((_QWORD *)v264[0] + *(_QWORD *)*v94);
      if (*((_QWORD *)v265[0] + 3 * v98 + 2) < v96)
      {
        v237 = **(_QWORD **)&v270[8 * v98];
        v97 = *((_QWORD *)v264[0] + *(_QWORD *)*v94);
        v96 = *((_QWORD *)v265[0] + 3 * v98 + 2);
      }
      if (v240 != v241)
      {
        v99 = (unint64_t *)((char *)v266[0] + 8 * v98);
        v100 = *v99;
        v101 = v99[1];
        if (*v99 < v101)
        {
          do
          {
            v102 = *(_QWORD *)&v267[8 * v100];
            if (!*(_BYTE *)(v102 + 17) && !*(_BYTE *)(v102 + 16))
            {
              createTransitionForProduction(v92, v102, v263, (uint64_t *)v259, &v258);
              v104 = v103;
              v105 = v261;
              if (v261 >= v262)
              {
                v107 = (v261 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v107 + 1) >> 61)
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                v108 = (v262 - (_BYTE *)__p) >> 2;
                if (v108 <= v107 + 1)
                  v108 = v107 + 1;
                if ((unint64_t)(v262 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v109 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v109 = v108;
                if (v109)
                  v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v262, v109);
                else
                  v110 = 0;
                v111 = &v110[8 * v107];
                *(_QWORD *)v111 = v104;
                v106 = v111 + 8;
                v113 = (char *)__p;
                v112 = v261;
                if (v261 == __p)
                {
                  v92 = a3;
                }
                else
                {
                  v92 = a3;
                  do
                  {
                    v114 = *((_QWORD *)v112 - 1);
                    v112 -= 8;
                    *((_QWORD *)v111 - 1) = v114;
                    v111 -= 8;
                  }
                  while (v112 != v113);
                  v112 = (char *)__p;
                }
                __p = v111;
                v261 = v106;
                v262 = &v110[8 * v109];
                if (v112)
                  operator delete(v112);
              }
              else
              {
                *(_QWORD *)v261 = v103;
                v106 = v105 + 8;
                v92 = a3;
              }
              v261 = v106;
            }
            ++v100;
          }
          while (v100 != v101);
        }
      }
      v115 = v94 + 1;
      while (v115 != v93)
      {
        if (*v115++)
        {
          v94 = v115 - 1;
          goto LABEL_155;
        }
      }
      v94 = v93;
LABEL_155:
      ;
    }
    while (v94 != *(_QWORD **)(v92 + 208));
    v253 = 0;
    v254 = 0;
    v255 = 0;
    if (v97 == -1)
    {
      v129 = 0;
    }
    else
    {
      v117 = (char *)v265[0];
      if (*((_QWORD *)v265[0] + 3 * v97) == -1)
      {
        v129 = **(_QWORD **)&v270[8 * v97];
      }
      else
      {
        v118 = 0;
        do
        {
          v119 = &v117[24 * v97 + 8];
          if (v118 >= v255)
          {
            v120 = (char *)v253;
            v121 = (v118 - (_BYTE *)v253) >> 3;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v123 = v255 - (_BYTE *)v253;
            if ((v255 - (_BYTE *)v253) >> 2 > v122)
              v122 = v123 >> 2;
            if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
              v124 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v124 = v122;
            if (v124)
            {
              v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v255, v124);
              v120 = (char *)v253;
              v118 = v254;
            }
            else
            {
              v125 = 0;
            }
            v126 = &v125[8 * v121];
            *(_QWORD *)v126 = *(_QWORD *)v119;
            v127 = v126 + 8;
            while (v118 != v120)
            {
              v128 = *((_QWORD *)v118 - 1);
              v118 -= 8;
              *((_QWORD *)v126 - 1) = v128;
              v126 -= 8;
            }
            v253 = v126;
            v254 = v127;
            v255 = &v125[8 * v124];
            if (v120)
              operator delete(v120);
            v118 = v127;
          }
          else
          {
            *(_QWORD *)v118 = *(_QWORD *)v119;
            v118 += 8;
          }
          v254 = v118;
          v117 = (char *)v265[0];
          v97 = *((_QWORD *)v265[0] + 3 * v97);
        }
        while (*((_QWORD *)v265[0] + 3 * v97) != -1);
        v129 = **(_QWORD **)&v270[8 * v97];
        if (v253 != v118)
        {
          v130 = v118 - 8;
          if (v118 - 8 > v253)
          {
            v131 = (char *)v253 + 8;
            do
            {
              v132 = *((_QWORD *)v131 - 1);
              *((_QWORD *)v131 - 1) = *(_QWORD *)v130;
              *(_QWORD *)v130 = v132;
              v130 -= 8;
              v133 = v131 >= v130;
              v131 += 8;
            }
            while (!v133);
          }
        }
      }
    }
    v95 = v229;
  }
  v134 = ((char *)v95 - (char *)v223) >> 4;
  *(_QWORD *)v242 = 0;
  *(_QWORD *)&v242[8] = 0;
  std::vector<std::pair<TWord const*,unsigned long>>::vector(&v250, v134, v242);
  v136 = (char *)v253;
  v135 = v254;
  if (v254 != v253)
  {
    v137 = 0;
    do
    {
      v138 = (char *)v263[0] + 24 * *(_QWORD *)&v136[8 * v137];
      if (v138[16])
      {
        v139 = (v251 - (_BYTE *)v250) >> 4;
        if (v139 > v134)
        {
          v140 = (char *)v250 + 16 * v139;
          v141 = *((_QWORD *)v140 - 1) + 1;
          *((_QWORD *)v140 - 2) = *(_QWORD *)v138;
          *((_QWORD *)v140 - 1) = v141;
        }
      }
      else
      {
        v142 = v274;
        if ((unint64_t)v274 >= v275[0])
        {
          v144 = ((char *)v274 - (char *)v273) >> 4;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v146 = v275[0] - (_QWORD)v273;
          if ((uint64_t)(v275[0] - (_QWORD)v273) >> 3 > v145)
            v145 = v146 >> 3;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0)
            v147 = 0xFFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
            v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)v275, v147);
          else
            v148 = 0;
          v149 = &v148[16 * v144];
          *(_OWORD *)v149 = *(_OWORD *)v138;
          v151 = v273;
          v150 = v274;
          v152 = v149;
          if (v274 != v273)
          {
            do
            {
              *((_OWORD *)v152 - 1) = *((_OWORD *)v150 - 1);
              v152 -= 16;
              v150 -= 2;
            }
            while (v150 != v151);
            v150 = v273;
          }
          v143 = (uint64_t *)(v149 + 16);
          v273 = (uint64_t *)v152;
          v274 = (uint64_t *)(v149 + 16);
          v275[0] = &v148[16 * v147];
          if (v150)
            operator delete(v150);
        }
        else
        {
          *(_OWORD *)v274 = *(_OWORD *)v138;
          v143 = v142 + 2;
        }
        v274 = v143;
        v153 = v251;
        if (v251 >= v252)
        {
          v155 = (v251 - (_BYTE *)v250) >> 4;
          v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v157 = v252 - (_BYTE *)v250;
          if ((v252 - (_BYTE *)v250) >> 3 > v156)
            v156 = v157 >> 3;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF0)
            v158 = 0xFFFFFFFFFFFFFFFLL;
          else
            v158 = v156;
          if (v158)
            v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v252, v158);
          else
            v159 = 0;
          v160 = &v159[16 * v155];
          *(_QWORD *)v160 = 0;
          *((_QWORD *)v160 + 1) = 0;
          v162 = (char *)v250;
          v161 = v251;
          v163 = v160;
          if (v251 != v250)
          {
            do
            {
              *((_OWORD *)v163 - 1) = *((_OWORD *)v161 - 1);
              v163 -= 16;
              v161 -= 16;
            }
            while (v161 != v162);
            v161 = (char *)v250;
          }
          v154 = v160 + 16;
          v250 = v163;
          v251 = v160 + 16;
          v252 = &v159[16 * v158];
          if (v161)
            operator delete(v161);
        }
        else
        {
          v154 = v251 + 16;
          *(_QWORD *)v251 = 0;
          *((_QWORD *)v153 + 1) = 0;
        }
        v251 = v154;
        v136 = (char *)v253;
        v135 = v254;
      }
      ++v137;
    }
    while (v137 < (v135 - v136) >> 3);
  }
  v247 = 0;
  v248 = 0;
  v249 = 0;
  TCompounder::apply(a1, &v273, v134, ((char *)v274 - (char *)v273) >> 4, a4, &v250, &v247);
  v164 = (((char *)v274 - (char *)v273) >> 4) - v134;
  v234 = (v248 - (_BYTE *)v247) >> 4;
  v165 = v234 < v164;
  v166 = a3;
  if (v248 == v247)
  {
    v167 = v258;
    if (v258 <= 1)
      v167 = 1;
    goto LABEL_294;
  }
  if (v240 == v241 || v234 < v164)
  {
    if (v240 == v241)
    {
      v233 = 0;
    }
    else
    {
      v233 = *((_QWORD *)v259[0] + v129);
      v234 = *((_QWORD *)v259[0] + v237);
    }
    v168 = v258;
    v169 = v258 - 1;
    if (v240 == v241)
      v170 = 0;
    else
      v170 = v258 - 1;
    v231 = v170;
    v171 = v253;
    if (v254 == v253)
      goto LABEL_290;
    v224 = v258 - 1;
    v226 = v258;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    while (1)
    {
      v175 = v171[v172];
      v176 = **(_QWORD **)(*(_QWORD *)(v166 + 128) + 8 * v175);
      v177 = operator new();
      v178 = v177;
      *(_QWORD *)v177 = *(_QWORD *)v176;
      v179 = *(_DWORD *)(v176 + 16);
      *(_DWORD *)(v177 + 16) = v179;
      v180 = v247;
      v238 = v174;
      if ((v179 & 1) != 0 || (v181 = (uint64_t *)*((_QWORD *)v247 + 2 * v173)) == 0)
        v182 = *(_QWORD *)(v176 + 8);
      else
        v182 = *v181;
      *(_QWORD *)(v177 + 8) = v182;
      v183 = v233;
      if (v173)
        v183 = v173 + v231;
      if (v173 == ((v248 - v180) >> 4) - 1)
        v184 = v234;
      else
        v184 = v173 + v231 + 1;
      *(_QWORD *)(v177 + 24) = v183;
      *(_QWORD *)(v177 + 32) = v184;
      *(_QWORD *)(v177 + 40) = *(_QWORD *)(v176 + 24);
      v185 = *(_QWORD *)&v180[16 * v173 + 8];
      v186 = *(_QWORD *)(v176 + 40);
      v187 = *(_OWORD *)(v176 + 96);
      v243 = *(_OWORD *)(v176 + 80);
      v244 = v187;
      v188 = *(_OWORD *)(v176 + 128);
      v245 = *(_OWORD *)(v176 + 112);
      v246 = v188;
      v189 = *(_OWORD *)(v176 + 64);
      *(_OWORD *)v242 = *(_OWORD *)(v176 + 48);
      *(_OWORD *)&v242[16] = v189;
LABEL_250:
      v190 = v172 + 2;
      ++v172;
      while (1)
      {
        v191 = *((_BYTE *)v263[0] + 24 * v175 + 16);
        if (v185 >= 2)
        {
          v192 = (char *)v253;
          goto LABEL_255;
        }
        v192 = (char *)v253;
        if (!*((_BYTE *)v263[0] + 24 * v175 + 16))
          break;
        v191 = 1;
LABEL_255:
        v185 += (char)(v191 - 1);
        v175 = *(_QWORD *)&v192[8 * v172];
        v176 = **(_QWORD **)(*(_QWORD *)(a3 + 128) + 8 * v175);
        v186 += *(_QWORD *)(v176 + 40);
        if (v165 && v186 != 0)
        {
          v165 = 0;
          --v186;
          if (*(_BYTE *)(a3 + 248))
          {
            TLatticeProcessor::combineMrecData((uint64_t)v242, v176 + 48, 1);
            v165 = 0;
          }
          goto LABEL_250;
        }
        if (*(_BYTE *)(a3 + 248))
          TLatticeProcessor::combineMrecData((uint64_t)v242, v176 + 48, 0);
        ++v172;
        ++v190;
      }
      v193 = v254;
      if (v172 < (v254 - (_BYTE *)v253) >> 3)
      {
        for (i = *((_QWORD *)v253 + v172); *((_BYTE *)v263[0] + 24 * i + 16); i = *(_QWORD *)&v192[8 * v190++])
        {
          v172 = v190;
          v176 = **(_QWORD **)(*(_QWORD *)(a3 + 128) + 8 * i);
          v195 = *(_QWORD *)(v176 + 40);
          if (*(_BYTE *)(a3 + 248))
          {
            TLatticeProcessor::combineMrecData((uint64_t)v242, v176 + 48, 0);
            v192 = (char *)v253;
            v193 = v254;
          }
          v186 += v195;
          if (v190 >= (v193 - v192) >> 3)
            break;
        }
      }
      *(_QWORD *)(v178 + 48) = *(_QWORD *)(v176 + 32);
      *(_QWORD *)(v178 + 56) = v186;
      v196 = v244;
      *(_OWORD *)(v178 + 96) = v243;
      *(_OWORD *)(v178 + 112) = v196;
      v197 = v246;
      *(_OWORD *)(v178 + 128) = v245;
      *(_OWORD *)(v178 + 144) = v197;
      v198 = *(_OWORD *)&v242[16];
      *(_OWORD *)(v178 + 64) = *(_OWORD *)v242;
      *(_OWORD *)(v178 + 80) = v198;
      v199 = v261;
      if (v261 >= v262)
      {
        v201 = (v261 - (_BYTE *)__p) >> 3;
        v166 = a3;
        if ((unint64_t)(v201 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v202 = (v262 - (_BYTE *)__p) >> 2;
        if (v202 <= v201 + 1)
          v202 = v201 + 1;
        if ((unint64_t)(v262 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
          v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v262, v203);
        else
          v204 = 0;
        v205 = (uint64_t *)&v204[8 * v201];
        *v205 = v178;
        v200 = (char *)(v205 + 1);
        v207 = (char *)__p;
        v206 = v261;
        if (v261 != __p)
        {
          do
          {
            v208 = *((_QWORD *)v206 - 1);
            v206 -= 8;
            *--v205 = v208;
          }
          while (v206 != v207);
          v206 = (char *)__p;
        }
        __p = v205;
        v261 = v200;
        v262 = &v204[8 * v203];
        if (v206)
          operator delete(v206);
      }
      else
      {
        *(_QWORD *)v261 = v178;
        v200 = v199 + 8;
        v166 = a3;
      }
      v261 = v200;
      v174 = v238;
      if (v186)
        v174 = v178;
      ++v173;
      v171 = v253;
      if (v172 >= (v254 - (_BYTE *)v253) >> 3)
      {
        v169 = v224;
        v168 = v226;
        if (v165 && v174 != 0)
        {
          --*(_QWORD *)(v174 + 56);
          if (*(_BYTE *)(v166 + 248))
          {
            --*(_DWORD *)(v174 + 112);
            if (*(_DWORD *)(v174 + 144))
              --*(_DWORD *)(v174 + 156);
          }
        }
LABEL_290:
        if (v240 == v241)
          v209 = v168 + 1;
        else
          v209 = v169;
        v167 = v209 + ((v248 - (_BYTE *)v247) >> 4);
LABEL_294:
        v258 = v167;
        break;
      }
    }
  }
  v210 = (_QWORD *)operator new();
  TLattice::TLattice(v210, &__p, (v261 - (_BYTE *)__p) >> 3, v258, 1, 1, *(_BYTE *)(v166 + 248), *(_QWORD *)(v166 + 16), *(_QWORD *)(a1 + 16));
  v212 = (char *)__p;
  v211 = v261;
  if (v261 != __p)
  {
    v213 = 0;
    do
    {
      v214 = *(_QWORD *)&v212[8 * v213];
      if (v214)
      {
        MEMORY[0x20BD149A8](v214, 0x10D2C401D7F962ALL);
        v212 = (char *)__p;
        v211 = v261;
      }
      ++v213;
    }
    while (v213 < (v211 - v212) >> 3);
  }
  v215 = v210[1];
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v250)
  {
    v251 = (char *)v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = (char *)v253;
    operator delete(v253);
  }
  TAllocator::clear((TAllocator *)v256);
  if (v259[0])
  {
    v259[1] = v259[0];
    operator delete(v259[0]);
  }
  if (__p)
  {
    v261 = (char *)__p;
    operator delete(__p);
  }
  if (v263[0])
  {
    v263[1] = v263[0];
    operator delete(v263[0]);
  }
  if (v264[0])
  {
    v264[1] = v264[0];
    operator delete(v264[0]);
  }
  if (v265[0])
  {
    v265[1] = v265[0];
    operator delete(v265[0]);
  }
  if (v266[0])
  {
    v266[1] = v266[0];
    operator delete(v266[0]);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  *(_QWORD *)(v228 + 136) = v227;
  return v215;
}

void sub_209A05838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      *(_QWORD *)(a13 + 136) = a12;
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

double createTransitionForProduction(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  double result;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v5 = a4;
  *(_BYTE *)(a2 + 17) = 1;
  v7 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(uint64_t ***)(*(_QWORD *)(a1 + 128) + 8 * v6);
  v9 = *v8[3];
  v38 = *v8[2];
  v10 = *v8;
  v36 = *v10;
  v37 = *((_DWORD *)v10 + 4);
  v12 = v10[3];
  v11 = v10[4];
  v13 = v10[5];
  v14 = *((_OWORD *)v10 + 4);
  v39 = *((_OWORD *)v10 + 3);
  v40 = v14;
  v15 = *((_OWORD *)v10 + 8);
  v16 = *((_OWORD *)v10 + 5);
  v17 = *((_OWORD *)v10 + 6);
  v43 = *((_OWORD *)v10 + 7);
  v44 = v15;
  v41 = v16;
  v42 = v17;
  v18 = *(uint64_t **)(*a3 + 24 * v6);
  v19 = v10[1];
  if (v7)
  {
    v33 = v11;
    v34 = a5;
    do
    {
      v22 = v7[1];
      v23 = *(_QWORD ***)(*(_QWORD *)(a1 + 128) + 8 * v22);
      v24 = *v23;
      if (!*(_BYTE *)(*a3 + 24 * v22 + 16))
      {
        v18 = *(uint64_t **)(*a3 + 24 * v22);
        v19 = v24[1];
      }
      v9 = *v23[3];
      v12 = v24[3];
      v25 = v24[5];
      if (*(_BYTE *)(a1 + 248))
        TLatticeProcessor::combineMrecData((uint64_t)&v39, (uint64_t)(v24 + 6), 0);
      v13 += v25;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    a5 = v34;
    v5 = a4;
    v11 = v33;
  }
  v26 = *v5;
  if (*(_QWORD *)(*v5 + 8 * v9) == -1)
    *(_QWORD *)(v26 + 8 * v9) = (*a5)++;
  if (*(_QWORD *)(v26 + 8 * v38) == -1)
    *(_QWORD *)(v26 + 8 * v38) = (*a5)++;
  v27 = operator new();
  *(_QWORD *)v27 = v36;
  *(_DWORD *)(v27 + 16) = v37;
  if (v18)
    v19 = *v18;
  *(_QWORD *)(v27 + 8) = v19;
  v28 = *(_QWORD *)(*v5 + 8 * v38);
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(*v5 + 8 * v9);
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v12;
  *(_QWORD *)(v27 + 48) = v11;
  *(_QWORD *)(v27 + 56) = v13;
  v29 = v42;
  *(_OWORD *)(v27 + 96) = v41;
  *(_OWORD *)(v27 + 112) = v29;
  v30 = v44;
  *(_OWORD *)(v27 + 128) = v43;
  *(_OWORD *)(v27 + 144) = v30;
  result = *(double *)&v39;
  v32 = v40;
  *(_OWORD *)(v27 + 64) = v39;
  *(_OWORD *)(v27 + 80) = v32;
  return result;
}

uint64_t TCompounder::takesFugenS(uint64_t a1, __int32 *a2, _DWORD *a3)
{
  uint64_t v4;
  size_t v8;
  void **v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  int v14;
  BOOL v15;
  const __int32 *v16;
  const __int32 *v17;
  const __int32 *v18;
  const __int32 *v19;
  const __int32 *v20;
  uint64_t v21;
  unint64_t v22;
  const __int32 *v23;
  uint64_t v24;
  size_t v25;
  const __int32 *v26;
  int v27;
  void **v28;
  void *__p[2];
  unsigned __int8 v30;

  if (*a3 != 83 || a3[8] == 50 || a3[7] == 71)
    return 0;
  v8 = wcslen(a2);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  if ((v30 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v10 = v30;
  else
    v10 = (unint64_t)__p[1];
  v11 = (char *)v9 + 4 * v10 - 4;
  if (v10)
    v12 = v11 > (char *)v9;
  else
    v12 = 0;
  if (v12)
  {
    v13 = (char *)v9 + 4;
    do
    {
      v14 = *((_DWORD *)v13 - 1);
      *((_DWORD *)v13 - 1) = *(_DWORD *)v11;
      *(_DWORD *)v11 = v14;
      v11 -= 4;
      v15 = v13 >= v11;
      v13 += 4;
    }
    while (!v15);
  }
  if (v8 < 4 || wcschr(dword_209A7FE40, a2[v8 - 1]) || !wcscmp(a2, dword_209A7FE50) || !wcscmp(a2, dword_209A7FE6C))
    goto LABEL_22;
  v16 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncasecmp(v16, dword_209A7FE8C, 2uLL))
    goto LABEL_22;
  v17 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncasecmp(v17, dword_209A7FE98, 3uLL))
    goto LABEL_22;
  v18 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v18, dword_209A7FEA8, 3uLL))
    goto LABEL_22;
  v19 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v19, dword_209A7FEB8, 3uLL))
    goto LABEL_22;
  v20 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v20, dword_209A7FEC8, 3uLL))
    goto LABEL_22;
  if (*(_QWORD *)(a1 + 320))
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
      v24 = *(_QWORD *)(a1 + 328) + v21;
      if (*(char *)(v24 + 23) < 0)
      {
        v26 = *(const __int32 **)v24;
        v25 = *(_QWORD *)(v24 + 8);
      }
      else
      {
        v25 = *(unsigned __int8 *)(v24 + 23);
        v26 = (const __int32 *)(*(_QWORD *)(a1 + 328) + v21);
      }
      if (!wcsncmp(v23, v26, v25))
        goto LABEL_66;
      ++v22;
      v21 += 24;
    }
    while (v22 < *(_QWORD *)(a1 + 320));
  }
  if (v8 < 5)
    goto LABEL_22;
  if (wcsncasecmp(a2, dword_209A7FED8, 2uLL))
    goto LABEL_22;
  v27 = a3[7];
  if (v27 != 66 && (v27 != 76 || a3[4] != 70))
    goto LABEL_22;
  v28 = __p;
  if ((v30 & 0x80u) != 0)
    v28 = (void **)__p[0];
  if (*(_DWORD *)v28 == 101 || wcschr(dword_209A7FEE4, a2[2]))
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
LABEL_66:
  v4 = 1;
LABEL_23:
  if ((char)v30 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_209A05F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TCompounder::getParamManager(TCompounder *this)
{
  return *((_QWORD *)this + 45);
}

uint64_t TCompounder::getType(TCompounder *this)
{
  return 1;
}

void TCompounderParamManager::~TCompounderParamManager(void **this)
{
  TCompounderParamManager::~TCompounderParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *this = &unk_24C2179C0;
  TParam::~TParam(this + 186);
  v2 = 0;
  this[155] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v2 + 185]) < 0)
      operator delete(this[v2 + 183]);
    v2 -= 3;
  }
  while (v2 != -6);
  TParam::~TParam(this + 155);
  v3 = 0;
  this[124] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v3 + 154]) < 0)
      operator delete(this[v3 + 152]);
    v3 -= 3;
  }
  while (v3 != -6);
  TParam::~TParam(this + 124);
  v4 = 0;
  this[93] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v4 + 123]) < 0)
      operator delete(this[v4 + 121]);
    v4 -= 3;
  }
  while (v4 != -6);
  TParam::~TParam(this + 93);
  v5 = 0;
  this[62] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v5 + 92]) < 0)
      operator delete(this[v5 + 90]);
    v5 -= 3;
  }
  while (v5 != -6);
  TParam::~TParam(this + 62);
  *this = &unk_24C217520;
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TMbrEntry::TMbrEntry(uint64_t a1, uint64_t a2, double a3)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0xC12E848000000000;
  if (a1 + 32 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 32), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0xC12E848000000000);
  return a1;
}

void sub_209A06014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCRFModel::TCRFModel(uint64_t a1, int a2, int a3, double a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 44) = a2;
  MEMORY[0x20BD147A4]();
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_209A0606C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_209A063E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::find<std::vector<int>>(uint64_t a1, int **a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;

  v3 = (_QWORD *)(a1 + 8);
  result = std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__lower_bound<std::vector<int>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 != result)
  {
    v6 = result[4];
    v5 = result[5];
    if (v6 == v5)
      return result;
    v7 = *a2;
    v8 = v6 + 4;
    while (v7 != a2[1])
    {
      v9 = *v7;
      v10 = *(_DWORD *)(v8 - 4);
      if (*v7 < v10)
        break;
      ++v7;
      v11 = v10 < v9 || v8 == v5;
      v8 += 4;
      if (v11)
        return result;
    }
  }
  return v3;
}

_QWORD *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__lower_bound<std::vector<int>>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;

  result = a4;
  if (a3)
  {
    v5 = a2[1];
    do
    {
      if (*a2 == v5)
      {
LABEL_12:
        result = a3;
      }
      else
      {
        v6 = (int *)a3[4];
        v7 = *a2 + 4;
        while (v6 != (int *)a3[5])
        {
          v8 = *v6;
          v9 = *(_DWORD *)(v7 - 4);
          if (*v6 < v9)
            break;
          ++v6;
          v10 = v9 < v8 || v7 == v5;
          v7 += 4;
          if (v10)
            goto LABEL_12;
        }
        ++a3;
      }
      a3 = (_QWORD *)*a3;
    }
    while (a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t **a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__find_equal<std::vector<int>>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__find_equal<std::vector<int>>(uint64_t a1, _QWORD *a2, int **a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  _QWORD *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[1];
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (int *)v4[4];
        v9 = (int *)v7[5];
        if (v8 != v9)
          break;
LABEL_12:
        if (*a3 != v6)
        {
          v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            v16 = *v8;
            v17 = *(_DWORD *)(v15 - 4);
            if (*v8 < v17)
              break;
            ++v8;
            v18 = v17 < v16 || v15 == (_QWORD)v6;
            v15 += 4;
            if (v18)
              goto LABEL_27;
          }
          result = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_27;
      }
      v10 = v8 + 1;
      v11 = *a3;
      while (v11 != v6)
      {
        v12 = *v11;
        v13 = *(v10 - 1);
        if (*v11 < v13)
          break;
        ++v11;
        if (v13 < v12 || v10++ == v9)
          goto LABEL_12;
      }
      v4 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6 + 4, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
  v6[7] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_209A0680C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int> const,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int> const,double>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::pair<TWord const*,unsigned int>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[4 * a2];
      do
      {
        *(_QWORD *)v7 = 0;
        v7[2] = 0;
        v7 += 4;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_DWORD *)v17 + 2) = 0;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

_QWORD *std::vector<TCompoundPath>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    memset(v4, 255, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_209A06A14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<std::pair<TWord const*,unsigned int>,BOOL>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 16) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_209A06A90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<TWord const*,unsigned long>>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<TWord const*,unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_209A06B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::wstring *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::wstring *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_209A06C48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::wstring *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::wstring *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_209A06D80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void EnvMgr::EnvMgr(EnvMgr *this, int a2)
{
  char *v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = (char *)this + 56;
  *(_OWORD *)((char *)this + 72) = 0u;
  v4 = (char *)this + 72;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 18) = StringIdCollSearchCmpFromStringId;
  *((_QWORD *)this + 19) = this;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 88) = 1;
  *(_DWORD *)((char *)this + 90) = 131070;
  *(_DWORD *)this = 0;
  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 0);
  v5 = *((_DWORD *)this + 16);
  if (v5 == *((_DWORD *)this + 17))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v3, 1, 1);
    v5 = *((_DWORD *)this + 16);
  }
  v6 = (_QWORD *)(*((_QWORD *)this + 7) + 16 * v5);
  *v6 = 0;
  v6[1] = 0;
  ++*((_DWORD *)this + 16);
  v7 = *((_DWORD *)this + 21);
  if (!v7)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 0);
    v7 = *((_DWORD *)this + 21);
  }
  v8 = *((_DWORD *)this + 20);
  if (v8 == v7)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 1);
    v8 = *((_DWORD *)this + 20);
  }
  v9 = (_QWORD *)(*((_QWORD *)this + 9) + 16 * v8);
  *v9 = 0;
  v9[1] = 0;
  ++*((_DWORD *)this + 20);
  *((_DWORD *)this + 64) = 1;
  *((_DWORD *)this + 65) = a2;
  *((_BYTE *)this + 264) = 1;
}

void sub_209A0706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(v19);
  DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll(v16);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v14);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll(v13);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  _Unwind_Resume(a1);
}

void EnvMgr::~EnvMgr(EnvMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)this + 88);
  DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll((uint64_t)this + 40);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t EnvMgr::findStringIdIndex(EnvMgr *this, EnvMgr *a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  EnvMgr *v10[3];
  __int16 v11;
  char v12;

  v10[0] = a2;
  v10[1] = this;
  v10[2] = 0;
  v11 = -2;
  v12 = 0;
  if (*((_BYTE *)this + 88) && *((__int16 *)this + 45) == -2)
    v2 = (char *)this + 96;
  else
    v2 = *(char **)(*((_QWORD *)this + 14) + 524272);
  v3 = *((_DWORD *)v2 + 2);
  v4 = v3 - 1;
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  v5 = 0;
  while (1)
  {
    v6 = v5 + v4;
    if (v5 + v4 < 0 != __OFADD__(v5, v4))
      ++v6;
    v7 = (v6 >> 1);
    v8 = StringIdCollSearchCmp((unsigned __int16 *)(*(_QWORD *)v2 + 2 * v7), v10);
    if (!v8)
      break;
    if (v8 >= 0)
      v4 = v7 - 1;
    else
      v5 = v7 + 1;
    if (v5 > v4)
      return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t EnvMgr::findStringId(EnvMgr *this, EnvMgr *a2)
{
  unsigned int StringIdIndex;
  _QWORD *v4;

  StringIdIndex = EnvMgr::findStringIdIndex(this, a2);
  if (StringIdIndex == -1)
    return 0xFFFFLL;
  if (*((_BYTE *)this + 88) && *((__int16 *)this + 45) == -2)
    v4 = (_QWORD *)((char *)this + 96);
  else
    v4 = *(_QWORD **)(*((_QWORD *)this + 14) + 524272);
  return *(unsigned __int16 *)(*v4 + 2 * StringIdIndex);
}

uint64_t EnvMgr::addString(EnvMgr *this, const char *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *((_DWORD *)this + 56);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(unsigned __int16 *)(*((_QWORD *)this + 27) + 2 * v5);
    *((_DWORD *)this + 56) = v5;
    *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v6) = 1;
    *(_WORD *)(*((_QWORD *)this + 23) + 2 * v6) = *((_DWORD *)this + 44);
  }
  else
  {
    v6 = *((unsigned __int16 *)this + 116);
    *((_WORD *)this + 116) = v6 + 1;
    v7 = *((_DWORD *)this + 52);
    if (v7 == *((_DWORD *)this + 53))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, 1, 1);
      v7 = *((_DWORD *)this + 52);
    }
    *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v7) = 1;
    ++*((_DWORD *)this + 52);
    v8 = *((_DWORD *)this + 44);
    v9 = *((_DWORD *)this + 48);
    if (v9 == *((_DWORD *)this + 49))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 184, 1, 1);
      v9 = *((_DWORD *)this + 48);
    }
    *(_WORD *)(*((_QWORD *)this + 23) + 2 * v9) = v8;
    *((_DWORD *)this + 48) = v9 + 1;
  }
  LOBYTE(v10) = *a2;
  if (*a2)
  {
    v11 = *((_DWORD *)this + 44);
    v12 = 1;
    do
    {
      if (v11 == *((_DWORD *)this + 45))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 168, 1, 1);
        v11 = *((_DWORD *)this + 44);
      }
      *(_BYTE *)(*((_QWORD *)this + 21) + v11) = v10;
      v11 = *((_DWORD *)this + 44) + 1;
      *((_DWORD *)this + 44) = v11;
      v10 = a2[v12++];
    }
    while (v10);
  }
  else
  {
    v11 = *((_DWORD *)this + 44);
  }
  if (v11 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 168, 1, 1);
    v11 = *((_DWORD *)this + 44);
  }
  *(_BYTE *)(*((_QWORD *)this + 21) + v11) = 0;
  v13 = *((_DWORD *)this + 44) + 1;
  *((_DWORD *)this + 44) = v13;
  if (v13 > 0xFFFE)
  {
    v28 = 0;
    v29 = 0;
    v26 = 0;
    v27 = 0;
    if (*((_DWORD *)this + 48))
    {
      v14 = 0;
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 25) + 4 * v14))
        {
          LOWORD(v15) = v29;
          v16 = v27;
          v17 = v29;
          if ((_DWORD)v27 == HIDWORD(v27))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v26, 1, 1);
            v16 = v27;
            v17 = v29;
          }
          *(_WORD *)(v26 + 2 * v16) = v15;
          LODWORD(v27) = v16 + 1;
          v18 = (_BYTE *)(*((_QWORD *)this + 21) + *(unsigned __int16 *)(*((_QWORD *)this + 23) + 2 * v14));
          LOBYTE(v15) = *v18;
          if (*v18)
          {
            v19 = 1;
            do
            {
              if (v17 == HIDWORD(v29))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                v17 = v29;
              }
              *(_BYTE *)(v28 + v17) = v15;
              v17 = v29 + 1;
              LODWORD(v29) = v29 + 1;
              v15 = v18[v19++];
            }
            while (v15);
          }
          if (v17 == HIDWORD(v29))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
            v17 = v29;
          }
          *(_BYTE *)(v28 + v17) = 0;
          v20 = v29;
          v21 = &v29;
        }
        else
        {
          v20 = v27;
          if ((_DWORD)v27 == HIDWORD(v27))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v26, 1, 1);
            v20 = v27;
          }
          *(_WORD *)(v26 + 2 * v20) = -1;
          v21 = &v27;
        }
        *(_DWORD *)v21 = v20 + 1;
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 48));
      v22 = v29;
    }
    else
    {
      v22 = 0;
    }
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 168, &v28, 0, v22);
    DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 184, &v26, 0, v27);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
    if (*((_DWORD *)this + 44) >= 0xFFFFu)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 165, (uint64_t)"fileutil/envmgr", 1, (uint64_t)"%u %u", v23, v24, *((_DWORD *)this + 44));
  }
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::add((uint64_t)this + 88, v6);
  return v6;
}

void sub_209A075F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::add(uint64_t result, __int16 a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 i;
  int v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _WORD *v19;
  __int16 *v20;
  unsigned int v21;
  __int16 v22;
  __int16 v23;
  __int128 v24;
  unsigned __int16 v25;
  char v26;

  v3 = result;
  v4 = (uint64_t *)(result + 8);
  if (*(_BYTE *)result)
  {
    v5 = *(_WORD *)(result + 2);
    v23 = a2;
    v24 = *(_OWORD *)(result + 64);
    v25 = v5;
    v26 = 0;
    result = DgnPrimArray<unsigned short>::searchLastOrBefore((_QWORD *)(result + 8), 0, *(_DWORD *)(result + 16), (uint64_t)&v23, *(uint64_t (**)(uint64_t, uint64_t))(result + 56));
    v6 = result + 1;
    v7 = *(_DWORD *)(v3 + 16);
    if (v7 == *(_DWORD *)(v3 + 20))
    {
      result = DgnPrimArray<short>::reallocElts((uint64_t)v4, 1, 1);
      v7 = *(_DWORD *)(v3 + 16);
    }
    v8 = *v4;
    if (v7 > v6)
    {
      v9 = 2 * v7;
      v10 = 2 * (v7 - 1);
      v11 = v7;
      do
      {
        *(_WORD *)(v8 + v9) = *(_WORD *)(v8 + v10);
        v9 -= 2;
        v10 -= 2;
        --v11;
      }
      while (v6 < v11);
    }
  }
  else
  {
    v6 = *(_DWORD *)(result + 16);
    if (v6 == *(_DWORD *)(result + 20))
    {
      result = DgnPrimArray<short>::reallocElts(result + 8, 1, 1);
      v6 = *(_DWORD *)(v3 + 16);
    }
    v8 = *v4;
    v7 = v6;
  }
  *(_WORD *)(v8 + 2 * v6) = a2;
  *(_DWORD *)(v3 + 16) = v7 + 1;
  v12 = *(_DWORD *)(v3 + 32);
  if (v12)
  {
    for (i = 0; i < v12; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i);
      if (result)
      {
        v23 = a2;
        v24 = *(_OWORD *)(v3 + 64);
        v25 = i;
        v26 = 0;
        result = DgnPrimArray<unsigned short>::searchLastOrBefore((_QWORD *)result, 0, *(_DWORD *)(result + 8), (uint64_t)&v23, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56));
        v14 = result;
        v15 = *(uint64_t **)(*(_QWORD *)(v3 + 24) + 8 * i);
        v16 = *((_DWORD *)v15 + 2);
        if (v16 == *((_DWORD *)v15 + 3))
        {
          result = DgnPrimArray<short>::reallocElts(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i), 1, 1);
          v16 = *((_DWORD *)v15 + 2);
        }
        v17 = v14 + 1;
        v18 = *v15;
        if (v16 > v14 + 1)
        {
          v19 = (_WORD *)(v18 + 2 * v16);
          v20 = (__int16 *)(v18 + 2 * (v16 - 1));
          v21 = v16;
          do
          {
            v22 = *v20--;
            *v19-- = v22;
            --v21;
          }
          while (v17 < v21);
        }
        *(_WORD *)(v18 + 2 * v17) = a2;
        *((_DWORD *)v15 + 2) = v16 + 1;
        v12 = *(_DWORD *)(v3 + 32);
      }
    }
  }
  return result;
}

uint64_t EnvMgr::releaseString(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(this + 200);
  v3 = *(_DWORD *)(v2 + 4 * a2) - 1;
  *(_DWORD *)(v2 + 4 * a2) = v3;
  if (!v3)
  {
    v4 = a2;
    v5 = this;
    v6 = a2;
    this = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::remove(this + 88, a2);
    v7 = *(_DWORD *)(v5 + 224);
    if (v7 == *(_DWORD *)(v5 + 228))
    {
      this = DgnPrimArray<short>::reallocElts(v5 + 216, 1, 1);
      v7 = *(_DWORD *)(v5 + 224);
    }
    *(_WORD *)(*(_QWORD *)(v5 + 216) + 2 * v7) = v4;
    *(_DWORD *)(v5 + 224) = v7 + 1;
    *(_WORD *)(*(_QWORD *)(v5 + 184) + 2 * v6) = -1;
  }
  return this;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::remove(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;

  v2 = *(unsigned int *)(result + 16);
  if (*(_BYTE *)result)
  {
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (_WORD *)(*(_QWORD *)(result + 8) + 2);
      v5 = (v2 - 1);
      while ((unsigned __int16)*(v4 - 1) != a2)
      {
        ++v3;
        ++v4;
        if (v2 == v3)
          goto LABEL_6;
      }
      v6 = v2 - 1;
      if (v6 > v3)
      {
        v9 = v5 - v3;
        do
        {
          *(v4 - 1) = *v4;
          ++v4;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
LABEL_6:
      v6 = v2 - 1;
    }
  }
  else
  {
    if (!(_DWORD)v2)
      goto LABEL_18;
    v7 = *(unsigned int *)(result + 16);
    v8 = *(_WORD **)(result + 8);
    while ((unsigned __int16)*v8 != a2)
    {
      ++v8;
      if (!--v7)
        goto LABEL_18;
    }
    v6 = v2 - 1;
    *v8 = *(_WORD *)(*(_QWORD *)(result + 8) + 2 * v6);
  }
  *(_DWORD *)(result + 16) = v6;
LABEL_18:
  v10 = *(_DWORD *)(result + 32);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 24);
    do
    {
      v13 = *(unsigned int **)(v12 + 8 * v11);
      if (v13)
      {
        v14 = v13[2];
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = (_WORD *)(*(_QWORD *)v13 + 2);
          v17 = (v14 - 1);
          while (*(unsigned __int16 *)(*(_QWORD *)v13 + 2 * v15) != a2)
          {
            ++v15;
            ++v16;
            --v17;
            if (v14 == v15)
              goto LABEL_25;
          }
          v18 = v14 - 1;
          if (v18 > v15)
          {
            do
            {
              *(v16 - 1) = *v16;
              ++v16;
              --v17;
            }
            while (v17);
          }
        }
        else
        {
LABEL_25:
          v18 = v14 - 1;
        }
        v13[2] = v18;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  return result;
}

uint64_t EnvMgr::getName(EnvMgr *this, unsigned int a2)
{
  return *((_QWORD *)this + 21) + *(unsigned __int16 *)(*((_QWORD *)this + 23) + 2 * a2);
}

uint64_t EnvMgr::setSemanticType(uint64_t this, int a2)
{
  *(_DWORD *)(this + 260) = a2;
  return this;
}

uint64_t EnvMgr::loadEnvMgrFromStream(EnvMgr *this, DFile *a2, DgnStream *a3, unsigned int *a4, int a5)
{
  DFile *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  DFile *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  unsigned int v21;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v20);
  v10 = (DFile *)*((unsigned int *)this + 65);
  if (a5)
  {
    v19 = 0;
    readMrecHeader((uint64_t)a3, (uint64_t)a2, 0x16u, "MRENV!? ", (_DWORD *)&v19 + 1, &v19);
    if (*((_DWORD *)a2 + 6))
      v11 = (char *)*((_QWORD *)a2 + 2);
    else
      v11 = (char *)&unk_209A80098;
    MrecHeaderCheckVersions(v11, "MRENV!? ", HIDWORD(v19), v19, 0x11u, 0xEu);
    MrecHeaderCheckLatestVersionIfShared(a2, "MRENV!? ", SHIDWORD(v19), v19, 17, 14, v13, v14);
    v21 = 0;
    (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, &v21, 4, 1);
    v12 = v21;
  }
  else
  {
    v12 = 0;
  }
  v21 = 0;
  readObject((uint64_t)a3, this, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 8, &v21);
  readObject<DgnPrimArray<unsigned int>>(a3, (uint64_t)this + 24, &v21);
  readObject<DgnPrimArray<unsigned short>>(a3, (uint64_t)this + 56, &v21);
  readObject<DgnArray<DgnPrimFixArray<unsigned char>>>(a3, (uint64_t)this + 72, &v21);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::readObject((uint64_t)this + 88, a3, &v21);
  readObject<char>(a3, (uint64_t)this + 168, &v21);
  readObject<unsigned short>(a3, (uint64_t)this + 184, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 200, &v21);
  readObject<unsigned short>(a3, (uint64_t)this + 216, &v21);
  readObject((uint64_t)a3, (unsigned __int16 *)this + 116, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 240, &v21);
  readObject((uint64_t)a3, (_DWORD *)this + 64, &v21);
  readObject((uint64_t)a3, (_DWORD *)this + 65, &v21);
  *((_QWORD *)this + 18) = StringIdCollSearchCmpFromStringId;
  *((_QWORD *)this + 19) = this;
  *((_QWORD *)this + 20) = 0;
  v15 = (DFile *)*((unsigned int *)this + 65);
  if ((_DWORD)v15 != (_DWORD)v10)
  {
    DFile::getNameForSemanticType(v15);
    DFile::getNameForSemanticType(v10);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 273, (uint64_t)"fileutil/envmgr", 5, (uint64_t)"%d %.500s %d %.500s", v16, v17, (char)v15);
  }
  readObjectChecksumAndVerify(a3, v21);
  *a4 ^= v21;
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v20);
  return v12;
}

void sub_209A07C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, char a15, char a16)
{
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a16);
  _Unwind_Resume(a1);
}

void readObject<DgnArray<DgnPrimFixArray<unsigned char>>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v14 = 0;
  readObject((uint64_t)a1, &v14, a3);
  v6 = v14;
  v7 = *(_DWORD *)(a2 + 12);
  if (v14 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v14 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v9 = v6 - v8;
      v10 = 16 * v8;
      do
      {
        v11 = (_QWORD *)(*(_QWORD *)a2 + v10);
        *v11 = 0;
        v11[1] = 0;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((_QWORD *)a2, v6, v8 - v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      readObject<DgnPrimFixArray<unsigned char>>(a1, *(_QWORD *)a2 + v12, a3);
      ++v13;
      v12 += 16;
    }
    while (v13 < *(unsigned int *)(a2 + 8));
  }
}

void EnvMgr::loadEnvMgrFromText(EnvMgr *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  char *LineFieldString;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  EnvMgr *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  _BYTE v47[16];
  _QWORD v48[2];
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _BYTE v54[32];
  char v55;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v55);
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v54);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v54, (uint64_t)a2, 0x15u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v54, "ENS");
  v53[0] = 0;
  v53[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v54, sENS_Versions, (uint64_t)v53, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v54, (unsigned int *)v53, v9, v10, v11, v12, v13, v14);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v54, v15, v16, v17, v18, v19, v20, v21);
  v51 = 0;
  v52 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v54, (uint64_t)&v51);
  v49 = 0;
  v50 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v54, (unint64_t)&v49);
  if ((_DWORD)v52 != 2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 312, (uint64_t)"fileutil/envmgr", 7, (uint64_t)&errStr_fileutil_envmgr_E_ENS_NOT_TWO_FIELD_SPECS, v22, v23, v52);
  v24 = v51;
  if (*(_DWORD *)(v51 + 8))
    v25 = *(const char **)v51;
  else
    v25 = (const char *)&unk_209A80098;
  if (strcmp(v25, "VariableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 314, (uint64_t)"fileutil/envmgr", 8, (uint64_t)"%.500s %.500s", v26, v27, (char)"VariableName");
    v24 = v51;
  }
  if (*v49)
  {
    if (*(_DWORD *)(v24 + 8))
      v28 = *(void **)v24;
    else
      v28 = &unk_209A80098;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 316, (uint64_t)"fileutil/envmgr", 15, (uint64_t)"%.500s %.500s", v26, v27, (char)v28);
    v24 = v51;
  }
  if (*(_DWORD *)(v24 + 24))
    v29 = *(const char **)(v24 + 16);
  else
    v29 = (const char *)&unk_209A80098;
  if (strcmp(v29, "VariableValue"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 318, (uint64_t)"fileutil/envmgr", 8, (uint64_t)"%.500s %.500s", v30, v31, (char)"VariableValue");
  if (*v49)
  {
    if (*(_DWORD *)(v51 + 8))
      v32 = *(const char **)v51;
    else
      v32 = (const char *)&unk_209A80098;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 320, (uint64_t)"fileutil/envmgr", 15, (uint64_t)"%.500s %.500s", v30, v31, (char)v32);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  DgnArray<DgnString>::releaseAll((uint64_t)&v51);
  DgnString::DgnString((DgnString *)&v51);
  DgnString::DgnString((DgnString *)&v49);
  v48[0] = 0;
  v48[1] = 0;
  DgnString::DgnString((DgnString *)v47);
  v45 = 0;
  v46 = 0;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v54))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v54, 0);
    DgnString::operator=((DgnString *)&v51, LineFieldString);
    v34 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v54, 1u);
    DgnString::operator=((DgnString *)&v49, v34);
    if (v52 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 333, (uint64_t)"fileutil/envmgr", 12, (uint64_t)"%s", v40, v41, (char)&unk_209A80098);
    if (v50 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 334, (uint64_t)"fileutil/envmgr", 13, (uint64_t)"%s", v40, v41, (char)&errStr_fileutil_envmgr_E_EMPTY_VARIABLE_VALUE);
    if (!*(_DWORD *)this)
      *(_DWORD *)this = EnvMgr::newEnv(this, v35, v36, v37, v38, v39, v40, v41);
    DgnTextFile::convertFromEnvValueFormat((uint64_t)&v49, (uint64_t **)&v45);
    if ((_DWORD)v52)
      v44 = (EnvMgr *)v51;
    else
      v44 = (EnvMgr *)&unk_209A80098;
    EnvMgr::setData(this, *(_DWORD *)this, v44, v45, v46, 1, v42, v43);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v45);
  DgnString::~DgnString((DgnString *)v47);
  DgnArray<DgnString>::releaseAll((uint64_t)v48);
  DgnString::~DgnString((DgnString *)&v49);
  DgnString::~DgnString((DgnString *)&v51);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v53);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v54);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v55);
}

void sub_209A08108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;
  uint64_t v20;
  va_list va4;

  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v18 = va_arg(va4, _QWORD);
  v20 = va_arg(va4, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va4);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v7 - 65));
  _Unwind_Resume(a1);
}

uint64_t EnvMgr::newEnv(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;

  *((_BYTE *)this + 264) = 0;
  v9 = *((_DWORD *)this + 62);
  if (v9)
  {
    v10 = v9 - 1;
    result = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * v10);
    *((_DWORD *)this + 62) = v10;
  }
  else
  {
    if (*((_DWORD *)this + 64) >= 0x3FFFFFu)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 643, (uint64_t)"fileutil/envmgr", 3, (uint64_t)"%s", a7, a8, (char)&errStr_fileutil_envmgr_E_TOO_MANY);
    v12 = *((_DWORD *)this + 16);
    if (v12 == *((_DWORD *)this + 17))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 1);
      v12 = *((_DWORD *)this + 16);
    }
    v13 = (_QWORD *)(*((_QWORD *)this + 7) + 16 * v12);
    *v13 = 0;
    v13[1] = 0;
    ++*((_DWORD *)this + 16);
    v14 = *((_DWORD *)this + 20);
    if (v14 == *((_DWORD *)this + 21))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 1);
      v14 = *((_DWORD *)this + 20);
    }
    v15 = (_QWORD *)(*((_QWORD *)this + 9) + 16 * v14);
    *v15 = 0;
    v15[1] = 0;
    ++*((_DWORD *)this + 20);
    result = *((unsigned int *)this + 64);
    *((_DWORD *)this + 64) = result + 1;
  }
  return result;
}

void *EnvMgr::setData(EnvMgr *this, unsigned int a2, EnvMgr *a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *result;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  int v47;
  uint64_t v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  _QWORD **v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;

  v8 = a6;
  v9 = a5;
  EnvMgr::verifyEnvId(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v8 && EnvMgr::getData(this, a2, a3, v14, v15, v16, v17, v18))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 817, (uint64_t)"fileutil/envmgr", 14, (uint64_t)"%.500s", v19, v20, (char)a3);
  *((_BYTE *)this + 264) = 0;
  result = (void *)EnvMgr::findStringId(this, a3);
  if ((_DWORD)result == 0xFFFF
    || (v22 = result, !*(_DWORD *)(*((_QWORD *)this + 25) + 4 * result)))
  {
    if (!v9)
      return result;
    result = (void *)EnvMgr::addString(this, (const char *)a3);
    v22 = result;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = *((_QWORD *)this + 7);
  v25 = a2;
  v26 = v24 + 16 * a2;
  v27 = (unsigned int *)(v26 + 8);
  v28 = *(unsigned int *)(v26 + 8);
  if (!(_DWORD)v28)
    goto LABEL_17;
  v29 = 0;
  v30 = *(_QWORD *)v26;
  v31 = (v28 - 1);
  v32 = -2;
  v33 = 24;
  while (*(unsigned __int16 *)(v30 + 2 * v29) != v22)
  {
    ++v29;
    v33 += 16;
    v32 -= 2;
    if (v28 == v29)
      goto LABEL_17;
  }
  if ((_DWORD)v29 == -1)
  {
LABEL_17:
    if (!v9)
      return result;
    v34 = *(_DWORD *)(v26 + 8);
    if ((_DWORD)v28 == *(_DWORD *)(v24 + 16 * v25 + 12))
    {
      v35 = v23;
      DgnPrimArray<short>::reallocElts(v26, 1, 1);
      v23 = v35;
      v34 = *v27;
    }
    *(_WORD *)(*(_QWORD *)v26 + 2 * v34) = v22;
    *v27 = v34 + 1;
    v36 = *((_QWORD *)this + 9) + 16 * v25;
    v38 = (unsigned int *)(v36 + 8);
    v37 = *(_DWORD *)(v36 + 8);
    if (v37 == *(_DWORD *)(v36 + 12))
    {
      v39 = v23;
      DgnArray<DgnPrimArray<double>>::reallocElts(*((_QWORD *)this + 9) + 16 * v25, 1, 1);
      v23 = v39;
      v37 = *v38;
    }
    v40 = *(_QWORD *)v36 + 16 * v37;
    *(_QWORD *)v40 = 0;
    *(_DWORD *)(v40 + 8) = 0;
    *v38 = v37 + 1;
    if ((v23 & 1) == 0)
      ++*(_DWORD *)(*((_QWORD *)this + 25) + 4 * v22);
    goto LABEL_24;
  }
  if (v9)
  {
    LODWORD(v28) = v29;
LABEL_24:
    v41 = 16 * v25;
    v42 = *(_QWORD *)(*((_QWORD *)this + 9) + 16 * v25);
    v43 = (_QWORD **)(v42 + 16 * v28);
    if (*v43)
    {
      MemChunkFree(*v43, 0);
      *v43 = 0;
      v44 = *(_QWORD *)(*((_QWORD *)this + 9) + v41);
    }
    else
    {
      v44 = v42;
    }
    *(_DWORD *)(v42 + 16 * v28 + 8) = 0;
    v45 = v44 + 16 * v28;
    v47 = *(_DWORD *)(v45 + 8);
    v46 = (unsigned int *)(v45 + 8);
    if (!v47)
    {
      *(_QWORD *)(v44 + 16 * v28) = MemChunkAlloc(v9, 0);
      *v46 = v9;
      v44 = *(_QWORD *)(*((_QWORD *)this + 9) + v41);
    }
    return memcpy(*(void **)(v44 + 16 * v28), a4, v9);
  }
  if (v31 > v29)
  {
    v48 = v31 - v29;
    v49 = (_WORD *)(v30 - v32);
    do
    {
      *(v49 - 1) = *v49;
      ++v49;
      --v48;
    }
    while (v48);
  }
  *v27 = v31;
  v50 = *((_QWORD *)this + 9);
  v51 = v50 + 16 * v25;
  v53 = (unsigned int *)(v51 + 8);
  v52 = *(_DWORD *)(v51 + 8);
  if ((int)v29 + 1 < v52)
  {
    do
    {
      v54 = *(_QWORD *)v51;
      v55 = (_QWORD **)(v54 + 16 * v29);
      if (*v55)
      {
        MemChunkFree(*v55, 0);
        *v55 = 0;
        v50 = *((_QWORD *)this + 9);
      }
      *(_DWORD *)(v54 + 16 * v29 + 8) = 0;
      DgnPrimFixArray<unsigned char>::copyArraySlice((uint64_t *)(*(_QWORD *)(v50 + 16 * v25) + 16 * v29), (_QWORD *)(*(_QWORD *)(v50 + 16 * v25) + v33 - 8), 0, *(_DWORD *)(*(_QWORD *)(v50 + 16 * v25) + v33));
      v50 = *((_QWORD *)this + 9);
      v51 = v50 + 16 * v25;
      v53 = (unsigned int *)(v51 + 8);
      v52 = *(_DWORD *)(v51 + 8);
      v56 = v29 + 2;
      ++v29;
      v33 += 16;
    }
    while (v56 < v52);
  }
  v57 = v52 - 1;
  v58 = *(_DWORD *)(v50 + 16 * v25 + 12);
  if (v57 > v58)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v51, v57 - v58, 0);
    v52 = *v53;
  }
  if (v52 <= v57)
  {
    if (v52 < v57)
    {
      v61 = v57 - v52;
      v62 = (_DWORD *)(*(_QWORD *)v51 + 16 * v52 + 8);
      do
      {
        *((_QWORD *)v62 - 1) = 0;
        *v62 = 0;
        v62 += 4;
        --v61;
      }
      while (v61);
    }
  }
  else if ((int)v52 > (int)v57)
  {
    v59 = (int)v52;
    v60 = 16 * (int)v52 - 16;
    do
    {
      --v59;
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)v51 + v60);
      v60 -= 16;
    }
    while (v59 > (int)v57);
  }
  *v53 = v57;
  return (void *)EnvMgr::releaseString((uint64_t)this, v22);
}

void EnvMgr::loadEnvMgr(EnvMgr *this, DFile *a2, DFileChecksums *a3)
{
  DgnStream *v6;
  uint64_t CurrentSubDirComponents;
  unsigned int v8;
  char v9;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v9);
  if (DFile::subFileExists((uint64_t)a2, 0x16u))
  {
    v6 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x16u, 3, 0);
    v8 = 0;
    EnvMgr::loadEnvMgrFromStream(this, a2, v6, &v8, 1);
    if (v6)
    {
      (**(void (***)(DgnStream *))v6)(v6);
      MemChunkFree(v6, 0);
    }
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x16u, v8);
    *((_BYTE *)this + 264) = 0;
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x15u))
  {
    EnvMgr::loadEnvMgrFromText(this, a2);
    *((_BYTE *)this + 264) = 1;
  }
  EnvMgr::compact(this);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v9);
}

void sub_209A087A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t EnvMgr::compact(EnvMgr *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37[2];
  _QWORD v38[2];

  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = *((unsigned int *)this + 4);
  v4 = v3 + 1;
  v5 = 4 * v3 - 4;
  while (v5 != -4)
  {
    v6 = *(_DWORD *)(*v2 + v5);
    --v4;
    v5 -= 4;
    if (v6)
      goto LABEL_6;
  }
  v4 = 0;
LABEL_6:
  *((_DWORD *)this + 4) = v4;
  DgnPrimArray<unsigned int>::compact((unint64_t)v2);
  if (*((_DWORD *)this + 8))
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)this + 3) + 16 * v7;
      v9 = *(_DWORD *)(v8 + 8);
      v10 = v9 + 1;
      v11 = 4 * v9 - 4;
      while (v11 != -4)
      {
        v12 = *(_DWORD *)(*(_QWORD *)v8 + v11);
        --v10;
        v11 -= 4;
        if (v12)
          goto LABEL_13;
      }
      v10 = 0;
LABEL_13:
      *(_DWORD *)(v8 + 8) = v10;
      DgnPrimArray<unsigned int>::compact(v8);
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 8));
  }
  DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix((unint64_t)this + 24, (uint64_t)v38);
  v13 = (_QWORD *)((char *)this + 40);
  if (*((_DWORD *)this + 12))
  {
    v14 = 0;
    do
    {
      v15 = *v13 + 16 * v14;
      if (*(_DWORD *)(v15 + 8))
      {
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)v15 + 16 * v16;
          v18 = *(unsigned int *)(v17 + 8);
          v19 = v18 + 1;
          v20 = 4 * v18 - 4;
          while (v20 != -4)
          {
            v21 = *(_DWORD *)(*(_QWORD *)v17 + v20);
            --v19;
            v20 -= 4;
            if (v21)
              goto LABEL_23;
          }
          v19 = 0;
LABEL_23:
          *(_DWORD *)(v17 + 8) = v19;
          DgnPrimArray<unsigned int>::compact(v17);
          ++v16;
          v15 = *v13 + 16 * v14;
        }
        while (v16 < *(unsigned int *)(v15 + 8));
      }
      DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix(v15, (uint64_t)v38);
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 12));
  }
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::compactRemoveMatchingSuffix((unint64_t)this + 40, v37);
  if (!*(_DWORD *)this && !*((_DWORD *)this + 4) && !*((_DWORD *)this + 8) && !*((_DWORD *)this + 12))
  {
    v22 = *((unsigned int *)this + 16);
    if ((int)v22 >= 1)
    {
      v23 = 16 * v22 - 16;
      do
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray(*((_QWORD *)this + 7) + v23);
        v23 -= 16;
      }
      while (v23 != -16);
    }
    *((_DWORD *)this + 16) = 0;
    v24 = *((_DWORD *)this + 17);
    if (v24)
    {
      v25 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 0);
      v25 = *((_DWORD *)this + 16);
      v24 = *((_DWORD *)this + 17);
    }
    if (v25 == v24)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 1);
      v25 = *((_DWORD *)this + 16);
    }
    v26 = (_QWORD *)(*((_QWORD *)this + 7) + 16 * v25);
    *v26 = 0;
    v26[1] = 0;
    ++*((_DWORD *)this + 16);
    DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((_QWORD *)this + 9, 0, *((_DWORD *)this + 20));
    *((_DWORD *)this + 20) = 0;
    v27 = *((_DWORD *)this + 21);
    if (v27)
    {
      v28 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 0);
      v28 = *((_DWORD *)this + 20);
      v27 = *((_DWORD *)this + 21);
    }
    if (v28 == v27)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 1);
      v28 = *((_DWORD *)this + 20);
    }
    v29 = (_QWORD *)(*((_QWORD *)this + 9) + 16 * v28);
    *v29 = 0;
    v29[1] = 0;
    ++*((_DWORD *)this + 20);
    *((_DWORD *)this + 26) = 0;
    v30 = *((unsigned int *)this + 30);
    if ((_DWORD)v30)
    {
      v31 = *((_QWORD *)this + 14);
      do
      {
        if (*(_QWORD *)v31)
          *(_DWORD *)(*(_QWORD *)v31 + 8) = 0;
        v31 += 8;
        --v30;
      }
      while (v30);
    }
    *((_DWORD *)this + 44) = 0;
    *((_DWORD *)this + 48) = 0;
    *((_DWORD *)this + 52) = 0;
    *((_DWORD *)this + 56) = 0;
    *((_WORD *)this + 116) = 0;
    *((_DWORD *)this + 62) = 0;
    *((_DWORD *)this + 64) = 1;
  }
  if (*((_DWORD *)this + 16))
  {
    v32 = 0;
    v33 = 0;
    do
    {
      DgnPrimArray<unsigned short>::compact(*((_QWORD *)this + 7) + v32);
      ++v33;
      v32 += 16;
    }
    while (v33 < *((unsigned int *)this + 16));
  }
  DgnArray<DgnPrimArray<unsigned short>>::compact((unint64_t)this + 56);
  if (*((_DWORD *)this + 20))
  {
    v34 = 0;
    v35 = 0;
    do
    {
      DgnArray<DgnPrimArray<unsigned short>>::compact(*((_QWORD *)this + 9) + v34);
      ++v35;
      v34 += 16;
    }
    while (v35 < *((unsigned int *)this + 20));
  }
  DgnArray<DgnPrimArray<unsigned short>>::compact((unint64_t)this + 72);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::compact((uint64_t)this + 88);
  DgnPrimArray<unsigned char>::compact((void **)this + 21);
  DgnPrimArray<unsigned short>::compact((unint64_t)this + 184);
  DgnPrimArray<unsigned int>::compact((unint64_t)this + 200);
  DgnPrimArray<unsigned short>::compact((unint64_t)this + 216);
  DgnPrimArray<unsigned int>::compact((unint64_t)this + 240);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v37);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v38);
}

void sub_209A08B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void EnvMgr::saveEnvMgrToStream(EnvMgr *this, DgnStream *a2, unsigned int *a3, int a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v13);
  if (a5)
  {
    writeMrecHeader(a2, "MRENV!? ", 17, 14, a4 ^ 1);
    v10 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)a2 + 40))(a2);
    v14 = 0;
    (*(void (**)(DgnStream *, int *, uint64_t))(*(_QWORD *)a2 + 80))(a2, &v14, 4);
  }
  else
  {
    v10 = 0;
  }
  v12 = 0;
  writeObject((uint64_t)a2, (int *)this, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 8, &v12);
  writeObject<DgnPrimArray<unsigned int>>((uint64_t)a2, (uint64_t)this + 24, &v12);
  writeObject<DgnPrimArray<unsigned short>>((uint64_t)a2, (uint64_t)this + 56, &v12);
  writeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)a2, (uint64_t)this + 72, &v12);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::writeObject((unsigned __int8 *)this + 88, (uint64_t)a2, &v12);
  writeObject<char>((uint64_t)a2, (uint64_t)this + 168, &v12);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 184, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 200, &v12);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 216, &v12);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 116, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 240, &v12);
  writeObject((uint64_t)a2, (int *)this + 64, &v12);
  writeObject((uint64_t)a2, (int *)this + 65, &v12);
  writeObjectChecksum((uint64_t)a2, &v12);
  *a3 ^= v12;
  if (a5 && (a4 & 1) == 0)
  {
    v11 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)a2 + 48))(a2);
    (*(void (**)(DgnStream *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v10);
    v15 = v11;
    (*(void (**)(DgnStream *, unsigned int *, uint64_t))(*(_QWORD *)a2 + 80))(a2, &v15, 4);
    (*(void (**)(DgnStream *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v11);
  }
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v13);
}

void sub_209A08DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a12);
  _Unwind_Resume(a1);
}

void EnvMgr::saveEnvMgrToText(EnvMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31[35];
  char v32;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v32);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v31);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v31, (uint64_t)a2, 0x15u, a3);
  v29 = 0;
  v30 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v31, sENS_Versions, (uint64_t)&v29, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v31, "ENS", (_QWORD *)(v29 + 8 * (v30 - 1)));
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  DgnString::DgnString((DgnString *)&v23, "VariableName");
  v11 = v26;
  if ((_DWORD)v26 == HIDWORD(v26))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v25, 1, 1);
    v11 = v26;
  }
  DgnString::DgnString((DgnString *)(v25 + 16 * v11), (const DgnString *)&v23);
  LODWORD(v26) = v26 + 1;
  DgnString::~DgnString((DgnString *)&v23);
  v12 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v12 = v28;
  }
  *(_DWORD *)(v27 + 4 * v12) = 0;
  LODWORD(v28) = v12 + 1;
  DgnString::DgnString((DgnString *)&v23, "VariableValue");
  v13 = v26;
  if ((_DWORD)v26 == HIDWORD(v26))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v25, 1, 1);
    v13 = v26;
  }
  DgnString::DgnString((DgnString *)(v25 + 16 * v13), (const DgnString *)&v23);
  LODWORD(v26) = v26 + 1;
  DgnString::~DgnString((DgnString *)&v23);
  v14 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v14 = v28;
  }
  *(_DWORD *)(v27 + 4 * v14) = 0;
  LODWORD(v28) = v14 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v31, (uint64_t)&v27, (uint64_t)&v25);
  v15 = *(unsigned int *)this;
  v16 = *((_QWORD *)this + 7);
  v17 = *((_QWORD *)this + 9);
  DgnString::DgnString((DgnString *)&v23);
  v18 = v16 + 16 * v15;
  if (*(_DWORD *)(v18 + 8))
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)(v17 + 16 * v15);
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v31, 0, (char *)(*((_QWORD *)this + 21)+ *(unsigned __int16 *)(*((_QWORD *)this + 23) + 2 * *(unsigned __int16 *)(*(_QWORD *)v18 + 2 * v20))));
      DgnTextFile::convertToEnvValueFormat(*v21 + v19, (DgnString *)&v23);
      if (v24)
        v22 = v23;
      else
        v22 = (char *)&unk_209A80098;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v31, 1u, v22);
      DgnTextFileWriter::writeNextLine(v31);
      ++v20;
      v19 += 16;
    }
    while (v20 < *(unsigned int *)(v18 + 8));
  }
  DgnString::~DgnString((DgnString *)&v23);
  DgnArray<DgnString>::releaseAll((uint64_t)&v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v29);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v31);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v32);
}

void sub_209A09064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v3 - 65));
  _Unwind_Resume(a1);
}

void EnvMgr::saveEnvMgr(EnvMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  uint64_t v10;
  DgnStream *v11;
  uint64_t CurrentSubDirComponents;
  unsigned int v13;
  char v14;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v14);
  if (*(_DWORD *)this)
  {
    if (a4)
    {
      EnvMgr::saveEnvMgrToText(this, a2, a5);
    }
    else
    {
      if (a5)
        v10 = 5;
      else
        v10 = 1;
      v11 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x16u, v10, 0);
      v13 = 0;
      EnvMgr::saveEnvMgrToStream(this, v11, &v13, 1, 1);
      if (v11)
      {
        (**(void (***)(DgnStream *))v11)(v11);
        MemChunkFree(v11, 0);
      }
      CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
      DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x16u, v13);
    }
  }
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v14);
}

void sub_209A091C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a13);
  _Unwind_Resume(a1);
}

void EnvMgr::printSize(EnvMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t fixed;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 556, (DgnString *)&v155);
  if ((_DWORD)v156)
    v16 = v155;
  else
    v16 = &unk_209A80098;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A80098, a3, &unk_209A80098, v16);
  DgnString::~DgnString((DgnString *)&v155);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A80098);
  v21 = (a3 + 1);
  v154 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v27 = v155;
  else
    v27 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_209A80098, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 12;
  else
    v28 = 16;
  v29 = *((unsigned int *)this + 4);
  v30 = *((_DWORD *)this + 5);
  if (v30 >= v29)
  {
    v31 = 0;
    if ((int)v29 > 0)
      v28 += 4 * (v29 - 1) + 4;
    v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    v31 = 4 * v29;
    v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v37 = v155;
  else
    v37 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &unk_209A80098, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  v38 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 24, 0);
  v39 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 24, 1);
  v155 = 0;
  v156 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v155);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v44 = v155;
  else
    v44 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_209A80098, v22, v22, v44, v38, v39, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v38;
  *a5 += v39;
  v45 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 0);
  v46 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 1);
  v47 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v52 = v155;
  else
    v52 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A80098, v22, v22, v52, v45, v46, v47);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v45;
  *a5 += v46;
  *a6 += v47;
  v53 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 56, 0);
  v54 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 56, 1);
  v155 = 0;
  v156 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v155);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v59 = v155;
  else
    v59 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &unk_209A80098, v22, v22, v59, v53, v54, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v53;
  *a5 += v54;
  fixed = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 0);
  v61 = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 1);
  v62 = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v67 = v155;
  else
    v67 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_209A80098, v22, v22, v67, fixed, v61, v62);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += fixed;
  *a5 += v61;
  *a6 += v62;
  v68 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 0);
  v69 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 1);
  v70 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v75 = v155;
  else
    v75 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_209A80098, v22, v22, v75, v68, v69, v70);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v68;
  *a5 += v69;
  *a6 += v70;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v76 = 12;
  else
    v76 = 16;
  v77 = *((_DWORD *)this + 44);
  v78 = *((_DWORD *)this + 45);
  v79 = v78 >= v77;
  v80 = v78 - v77;
  if (v79)
  {
    v82 = v77 & ~(v77 >> 31);
    v77 = 0;
    v81 = v76 + v82;
    v76 += v82 + v80;
  }
  else
  {
    v81 = v76;
  }
  v83 = v77;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v88 = v155;
  else
    v88 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v21, &unk_209A80098, v22, v22, v88, v76, v81, v83);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v76;
  *a5 += v81;
  *a6 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v89 = 12;
  else
    v89 = 16;
  v90 = *((unsigned int *)this + 48);
  v91 = *((_DWORD *)this + 49);
  if (v91 >= v90)
  {
    v92 = 0;
    if ((int)v90 > 0)
      v89 = (v89 | 2) + 2 * (v90 - 1);
    v93 = v89 + 2 * (v91 - v90);
  }
  else
  {
    v92 = 2 * v90;
    v93 = v89;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v98 = v155;
  else
    v98 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_209A80098, v22, v22, v98, v93, v89, v92);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v93;
  *a5 += v89;
  *a6 += v92;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v99 = 12;
  else
    v99 = 16;
  v100 = *((unsigned int *)this + 52);
  v101 = *((_DWORD *)this + 53);
  if (v101 >= v100)
  {
    v102 = 0;
    if ((int)v100 > 0)
      v99 += 4 * (v100 - 1) + 4;
    v103 = v99 + 4 * (v101 - v100);
  }
  else
  {
    v102 = 4 * v100;
    v103 = v99;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v108 = v155;
  else
    v108 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_209A80098, v22, v22, v108, v103, v99, v102);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v103;
  *a5 += v99;
  *a6 += v102;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v109 = 12;
  else
    v109 = 16;
  v110 = *((unsigned int *)this + 56);
  v111 = *((_DWORD *)this + 57);
  if (v111 >= v110)
  {
    v112 = 0;
    if ((int)v110 > 0)
      v109 = (v109 | 2) + 2 * (v110 - 1);
    v113 = v109 + 2 * (v111 - v110);
  }
  else
  {
    v112 = 2 * v110;
    v113 = v109;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v118 = v155;
  else
    v118 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_209A80098, v22, v22, v118, v113, v109, v112);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v113;
  *a5 += v109;
  *a6 += v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v123 = v155;
  else
    v123 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v21, &unk_209A80098, v22, v22, v123, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v124 = 12;
  else
    v124 = 16;
  v125 = *((unsigned int *)this + 62);
  v126 = *((_DWORD *)this + 63);
  if (v126 >= v125)
  {
    v127 = 0;
    if ((int)v125 > 0)
      v124 += 4 * (v125 - 1) + 4;
    v128 = v124 + 4 * (v126 - v125);
  }
  else
  {
    v127 = 4 * v125;
    v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v133 = v155;
  else
    v133 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v21, &unk_209A80098, v22, v22, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v138 = v155;
  else
    v138 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v21, &unk_209A80098, v22, v22, v138, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v143 = v155;
  else
    v143 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v21, &unk_209A80098, v22, v22, v143, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if ((_DWORD)v156)
    v148 = v155;
  else
    v148 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_209A80098, v22, v22, v148, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 559, (DgnString *)&v155);
  if ((_DWORD)v156)
    v153 = v155;
  else
    v153 = &unk_209A80098;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v154, &unk_209A80098, (35 - v154), (35 - v154), v153, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v155);
}

void sub_209A09C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  int v11;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v10);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimFixArray<unsigned char>>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnArray<DgnVector>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_209A09DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnVector>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v4 = (int)v3;
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 8);
    do
    {
      v7 = v6 - 1;
      v8 = (_QWORD *)(v5 + 16 * v7);
      if (v8 != (_QWORD *)a2)
      {
        if (*(_DWORD *)(v5 + 16 * v7 + 8) != *(_DWORD *)(a2 + 8))
          goto LABEL_11;
        v9 = *(unsigned int *)(a2 + 8);
        while ((int)v9 >= 1)
        {
          v10 = *v8 + 4 * v9;
          v11 = *(_DWORD *)(*(_QWORD *)a2 - 4 + 4 * v9--);
          if (*(_DWORD *)(v10 - 4) != v11)
            goto LABEL_11;
        }
      }
      --v6;
    }
    while (v7);
    v6 = 0;
LABEL_11:
    if (v3 <= v6)
    {
      if (v3 < v6)
      {
        v13 = v6 - v3;
        v14 = 16 * v3;
        do
        {
          v15 = (_QWORD *)(*(_QWORD *)a1 + v14);
          *v15 = 0;
          v15[1] = 0;
          v14 += 16;
          --v13;
        }
        while (v13);
      }
    }
    else if ((int)v3 > (int)v6)
    {
      v12 = 16 * (int)v3 - 16;
      do
      {
        --v4;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v12);
        v12 -= 16;
      }
      while (v4 > (int)v6);
    }
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return DgnArray<DgnPrimArray<unsigned short>>::compact(a1);
}

unint64_t DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::compactRemoveMatchingSuffix(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + 1;
  v6 = 16 * v4 - 16;
  while (v6 != -16)
  {
    v7 = DgnArray<DgnPrimArray<unsigned int>>::operator==((uint64_t *)(*(_QWORD *)a1 + v6), a2);
    --v5;
    v6 -= 16;
    if ((v7 & 1) == 0)
      goto LABEL_6;
  }
  v5 = 0;
LABEL_6:
  v8 = *(unsigned int *)(a1 + 8);
  if (v8 <= v5)
  {
    if (v8 < v5)
    {
      v9 = v5 - v8;
      v10 = 16 * v8;
      do
      {
        v11 = (_QWORD *)(*(_QWORD *)a1 + v10);
        *v11 = 0;
        v11[1] = 0;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt((_QWORD *)a1, v5, v8 - v5);
  }
  *(_DWORD *)(a1 + 8) = v5;
  return DgnArray<DgnPrimArray<unsigned short>>::compact(a1);
}

unint64_t DgnArray<DgnPrimArray<unsigned short>>::compact(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(result + 8);
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v1 != (_DWORD)v2)
  {
    v3 = result;
    if ((_DWORD)v1)
    {
      v4 = 0;
      result = realloc_array(*(_QWORD **)result, &v4, 16 * v1, 16 * v1, 16 * v2, 0);
      *(_DWORD *)(v3 + 12) = result >> 4;
      *(_QWORD *)v3 = v4;
    }
    else
    {
      result = *(_QWORD *)result;
      if (*(_QWORD *)v3)
        result = MemChunkFree((_QWORD *)result, 0);
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 12) = 0;
    }
  }
  return result;
}

unint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::compact(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  unint64_t v4;

  DgnPrimArray<unsigned short>::compact(a1 + 8);
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v4)
      {
        DgnPrimArray<unsigned short>::compact(v4);
        v2 = *(unsigned int *)(a1 + 32);
      }
    }
  }
  return DgnPrimArray<unsigned short>::compact(a1 + 40);
}

void EnvMgr::verifyEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  uint64_t i;
  int v13;

  if (*((_DWORD *)this + 64) <= a2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 630, (uint64_t)"fileutil/envmgr", 11, (uint64_t)"%u", a7, a8, a2);
  v10 = *((unsigned int *)this + 62);
  if ((_DWORD)v10)
  {
    v11 = (int *)*((_QWORD *)this + 30);
    for (i = 0xFFFFFFFFLL; ; --i)
    {
      v13 = *v11++;
      if (v13 == a2)
        break;
      if (!--v10)
        return;
    }
    if (i)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 631, (uint64_t)"fileutil/envmgr", 11, (uint64_t)"%u", a7, a8, a2);
  }
}

uint64_t EnvMgr::killEnv(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;

  EnvMgr::verifyEnvId(this, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 264) = 0;
  v10 = *((_QWORD *)this + 7);
  v11 = v10 + 16 * a2;
  v12 = (_DWORD *)(v11 + 8);
  if (*(_DWORD *)(v11 + 8))
  {
    v13 = 0;
    do
    {
      EnvMgr::releaseString((uint64_t)this, *(unsigned __int16 *)(*(_QWORD *)v11 + 2 * v13++));
      v10 = *((_QWORD *)this + 7);
      v11 = v10 + 16 * a2;
      v12 = (_DWORD *)(v11 + 8);
    }
    while (v13 < *(unsigned int *)(v11 + 8));
  }
  if (*(_QWORD *)v11)
  {
    MemChunkFree(*(_QWORD **)v11, 0);
    *(_QWORD *)v11 = 0;
  }
  *v12 = 0;
  *(_DWORD *)(v10 + 16 * a2 + 12) = 0;
  result = (uint64_t)DgnArray<DgnVector>::releaseAll(*((_QWORD *)this + 9) + 16 * a2);
  v15 = *((_DWORD *)this + 62);
  if (v15 == *((_DWORD *)this + 63))
  {
    result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 240, 1, 1);
    v15 = *((_DWORD *)this + 62);
  }
  *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v15) = a2;
  ++*((_DWORD *)this + 62);
  return result;
}

uint64_t EnvMgr::getTopEnvId(EnvMgr *this)
{
  return *(unsigned int *)this;
}

uint64_t EnvMgr::getTopEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(unsigned int *)this;
  if ((_DWORD)a2 && !(_DWORD)v8)
  {
    v8 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
    EnvMgr::verifyEnvId(this, v8, v10, v11, v12, v13, v14, v15);
    *((_BYTE *)this + 264) = 0;
    *(_DWORD *)this = v8;
  }
  return v8;
}

void EnvMgr::setTopEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr::verifyEnvId(this, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 264) = 0;
  *(_DWORD *)this = a2;
}

uint64_t EnvMgr::getItemEnvId(EnvMgr *this, unsigned int a2)
{
  if (*((_DWORD *)this + 4) <= a2)
    return 0;
  else
    return *(unsigned int *)(*((_QWORD *)this + 1) + 4 * a2);
}

uint64_t EnvMgr::getItemEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a2;
  if ((_DWORD)a3
    && (*((_DWORD *)this + 4) <= a2 || !*(_DWORD *)(*((_QWORD *)this + 1) + 4 * a2)))
  {
    v10 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
    EnvMgr::verifyEnvId(this, v10, v11, v12, v13, v14, v15, v16);
    *((_BYTE *)this + 264) = 0;
    SetEnvIdInArray((uint64_t)this + 8, v8, v10);
  }
  if (*((_DWORD *)this + 4) <= v8)
    return 0;
  else
    return *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v8);
}

void EnvMgr::setItemEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a3;
  EnvMgr::verifyEnvId(this, a3, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 264) = 0;
  SetEnvIdInArray((uint64_t)this + 8, a2, v8);
}

void SetEnvIdInArray(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = *(unsigned int *)(a1 + 8);
  if (a2 >= v6)
  {
    v8 = a2 + 1;
    v9 = *(_DWORD *)(a1 + 12);
    v10 = v8;
    v11 = a2 + 1 - v9;
    if (v8 > v9)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1, v11, 1);
      v10 = v8 - v6 + *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v10;
    v7 = *(_QWORD *)a1;
    if (v8 > v6)
      bzero((void *)(v7 + 4 * v6), 4 * (a2 - v6) + 4);
  }
  else
  {
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(v7 + 4 * a2) = a3;
}

unint64_t EnvMgr::getItemsWithEnv(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;

  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    for (i = 0; i < v2; ++i)
    {
      if (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * i))
      {
        if (v5 == *(_DWORD *)(a2 + 12))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
          v5 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = i;
        v5 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v5;
        v2 = *(unsigned int *)(v4 + 16);
      }
    }
  }
  return result;
}

uint64_t EnvMgr::getItemPairEnvId(EnvMgr *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (*((_DWORD *)this + 8) <= a2)
    return 0;
  v3 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v3 + 16 * a2 + 8) <= a3)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(v3 + 16 * a2) + 4 * a3);
}

uint64_t EnvMgr::getItemPairEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a2;
  if ((_DWORD)a4)
  {
    if (*((_DWORD *)this + 8) <= a2
      || (v11 = *((_QWORD *)this + 3), *(_DWORD *)(v11 + 16 * a2 + 8) <= a3)
      || !*(_DWORD *)(*(_QWORD *)(v11 + 16 * a2) + 4 * a3))
    {
      v12 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
      EnvMgr::setItemPairEnvId(this, v9, a3, v12, v13, v14, v15, v16);
    }
  }
  if (*((_DWORD *)this + 8) <= v9)
    return 0;
  v17 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v17 + 16 * v9 + 8) <= a3)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(v17 + 16 * v9) + 4 * a3);
}

void EnvMgr::setItemPairEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a4;
  v9 = a3;
  EnvMgr::verifyEnvId(this, a4, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 264) = 0;
  v12 = (_QWORD *)((char *)this + 24);
  v13 = *((_DWORD *)this + 8);
  if (v13 <= a2)
  {
    v14 = a2 + 1;
    v15 = *((_DWORD *)this + 9);
    if (v14 > v15)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 24, v14 - v15, 0);
      v13 = *((_DWORD *)this + 8);
    }
    if (v13 <= v14)
    {
      if (v13 < v14)
      {
        v18 = 16 * v13;
        v19 = v14 - v13;
        do
        {
          v20 = (_QWORD *)(*v12 + v18);
          *v20 = 0;
          v20[1] = 0;
          v18 += 16;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v13 > (int)v14)
    {
      v16 = (int)v13;
      v17 = 16 * (int)v13 - 16;
      do
      {
        --v16;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v12 + v17);
        v17 -= 16;
      }
      while (v16 > (int)v14);
    }
    *((_DWORD *)this + 8) = v14;
  }
  SetEnvIdInArray(*v12 + 16 * a2, v9, v8);
}

unint64_t EnvMgr::getItemPairsWithEnv(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v3 = *(unsigned int *)(result + 32);
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = 0;
    v8 = *(_QWORD *)(result + 24);
    do
    {
      if (*(_DWORD *)(v8 + 16 * v7 + 8))
      {
        v9 = 0;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(v8 + 16 * v7) + 4 * v9))
          {
            v10 = *(unsigned int *)(a2 + 8);
            if (v10 == *(_DWORD *)(a2 + 12))
            {
              result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
              v10 = *(unsigned int *)(a2 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v7;
            ++*(_DWORD *)(a2 + 8);
            v11 = *(unsigned int *)(a3 + 8);
            if (v11 == *(_DWORD *)(a3 + 12))
            {
              result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v11 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v9;
            ++*(_DWORD *)(a3 + 8);
            v8 = *(_QWORD *)(v6 + 24);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v8 + 16 * v7 + 8));
        v3 = *(unsigned int *)(v6 + 32);
      }
      ++v7;
    }
    while (v7 < v3);
  }
  return result;
}

uint64_t EnvMgr::getData(EnvMgr *this, unsigned int a2, EnvMgr *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int StringId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;

  EnvMgr::verifyEnvId(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  StringId = EnvMgr::findStringId(this, a3);
  if (StringId == 0xFFFF)
    return 0;
  if (!*(_DWORD *)(*((_QWORD *)this + 25) + 4 * StringId))
    return 0;
  v12 = *((_QWORD *)this + 7);
  v13 = *(unsigned int *)(v12 + 16 * a2 + 8);
  if (!(_DWORD)v13)
    return 0;
  v14 = 0;
  v15 = *(unsigned __int16 **)(v12 + 16 * a2);
  v16 = 16 * v13;
  while (1)
  {
    v17 = *v15++;
    if (v17 == StringId)
      break;
    v14 += 16;
    if (v16 == v14)
      return 0;
  }
  if (v14 != 0xFFFFFFFF0)
    return *(_QWORD *)(*((_QWORD *)this + 9) + 16 * a2) + v14;
  else
    return 0;
}

uint64_t EnvMgr::getNameIds(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr::verifyEnvId(this, a2, a3, a4, a5, a6, a7, a8);
  return *((_QWORD *)this + 7) + 16 * a2;
}

uint64_t EnvMgr::getValues(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr::verifyEnvId(this, a2, a3, a4, a5, a6, a7, a8);
  return *((_QWORD *)this + 9) + 16 * a2;
}

_QWORD *DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnVector>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnPrimArray<unsigned short>::searchLastOrBefore(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  int v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a3)
    return 0xFFFFFFFFLL;
  v5 = a2;
  LODWORD(v6) = a2;
  if (a3 > (int)a2)
  {
    v10 = a3 - 1;
    v11 = a2;
    do
    {
      v12 = v10 + v11;
      if (v10 + (int)v11 < 0 != __OFADD__(v10, (_DWORD)v11))
        ++v12;
      v13 = v12 >> 1;
      if ((_DWORD)v11 == v10 - 1)
        v6 = v10;
      else
        v6 = v13;
      v14 = a5(*a1 + 2 * v6, a4);
      if (v14)
      {
        if (v14 < 0)
        {
          v6 = (v6 + 1);
        }
        else
        {
          v10 = v6 - 1;
          v6 = v11;
        }
      }
      else if (v10 == (_DWORD)v11)
      {
        return v6;
      }
      v11 = v6;
    }
    while ((int)v6 <= v10);
  }
  if ((_DWORD)v6 == v5)
    return 0xFFFFFFFFLL;
  else
    return (v6 - 1);
}

void readObject<DgnPrimFixArray<unsigned char>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v15 = 0;
  readObject((uint64_t)a1, &v15, a3);
  v6 = v15;
  v7 = *(_DWORD *)(a2 + 12);
  if (v15 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v15 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = (_DWORD *)(*(_QWORD *)a2 + 16 * v8 + 8);
      do
      {
        *((_QWORD *)v12 - 1) = 0;
        *v12 = 0;
        v12 += 4;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      readObject<unsigned char>(a1, *(_QWORD *)a2 + v13, a3);
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

void DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::readObject(uint64_t a1, DgnStream *a2, unsigned int *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  readObject<unsigned short>(a2, a1 + 8, a3);
  readObject<unsigned short>(a2, a1 + 40, a3);
  v15 = 0;
  readObject((uint64_t)a2, &v15, a3);
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)a1 = (_DWORD)v15 != 0;
  readObject((uint64_t)a2, (_DWORD *)&v15 + 1, a3);
  *(_WORD *)(a1 + 2) = WORD2(v15);
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)(a1 + 4) = (_DWORD)v15 != 0;
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)(a1 + 5) = (_DWORD)v15 != 0;
  v14 = 0;
  readObject((uint64_t)a2, &v14, a3);
  LODWORD(v6) = *(_DWORD *)(a1 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    do
    {
      DgnDelete<DgnPrimArray<unsigned int>>(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7));
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7++) = 0;
      v6 = *(unsigned int *)(a1 + 32);
    }
    while (v7 < v6);
  }
  v8 = (_QWORD *)(a1 + 24);
  v9 = v14;
  v10 = *(_DWORD *)(a1 + 36);
  if (v14 > v10)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 24, v14 - v10, 0);
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
  }
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      v6 = v6;
      do
        *(_QWORD *)(*v8 + 8 * v6++) = 0;
      while (v9 != v6);
    }
  }
  else
  {
    DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(a1 + 24, v9, v6 - v9);
  }
  *(_DWORD *)(a1 + 32) = v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v13 = 0;
      readObject((uint64_t)a2, &v13, a3);
      *(_QWORD *)(*v8 + 8 * v11) = 0;
      if (v13)
      {
        v12 = MemChunkAlloc(0x10uLL, 0);
        *v12 = 0;
        v12[1] = 0;
        *(_QWORD *)(*v8 + 8 * v11) = v12;
        readObject<unsigned short>(a2, *(_QWORD *)(*v8 + 8 * v11), a3);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(a1 + 32));
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::writeObject(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  writeObject<unsigned short>(a2, (uint64_t)(a1 + 8), a3);
  writeObject<unsigned short>(a2, (uint64_t)(a1 + 40), a3);
  v13 = 0;
  writeObject(a2, &v13, a3);
  v12 = *a1;
  writeObject(a2, &v12, a3);
  v11 = *((unsigned __int16 *)a1 + 1);
  writeObject(a2, &v11, a3);
  v10 = a1[4];
  writeObject(a2, &v10, a3);
  v9 = a1[5];
  writeObject(a2, &v9, a3);
  v8 = *((_DWORD *)a1 + 8);
  result = writeObject(a2, &v8, a3);
  if (*((_DWORD *)a1 + 8))
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v7) != 0;
      result = writeObject(a2, &v8, a3);
      if (v8)
        result = writeObject<unsigned short>(a2, *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v7), a3);
      ++v7;
    }
    while (v7 < *((unsigned int *)a1 + 8));
  }
  return result;
}

uint64_t sizeObject<DgnPrimFixArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v8;
  int v9;

  v2 = 0;
  v8 = 0;
  v9 = 0;
  v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  if (a2 != 3)
  {
    v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        v5 = v4 + 1;
        do
        {
          v6 = *(_DWORD *)(*(_QWORD *)a1 + 16 * (v5 - 2) + 8);
          v2 += v3 + (v6 & ~(v6 >> 31));
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v8);
  return v2;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned short>(a1 + 8, a2);
  v5 = sizeObject<DgnPrimArray<unsigned short> *>(a1 + 24, a2);
  v6 = sizeObject<unsigned short>(a1 + 40, a2);
  v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 8;
  if (a2 == 3)
    v7 = 0;
  return ((a2 != 3) | (2 * (a2 != 3))) + 2 * (a2 != 3) + v4 + v5 + v6 + v7 + 2 * v7;
}

uint64_t sizeObject<DgnPrimArray<unsigned short> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<unsigned short>(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t DgnArray<DgnPrimArray<unsigned int>>::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (a1 == a2)
    return 1;
  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  if ((int)v2 < 1)
    return 1;
  v3 = *a1;
  v4 = *a2;
  result = 1;
  do
  {
    v6 = v2 - 1;
    if (v3 != v4)
    {
      v7 = *(unsigned int *)(v3 + 16 * (v2 - 1) + 8);
      if ((_DWORD)v7 != *(_DWORD *)(v4 + 16 * (v2 - 1) + 8))
        return 0;
      while ((int)v7 >= 1)
      {
        v8 = *(_QWORD *)(v3 + 16 * v6) + 4 * v7;
        v9 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * v6) - 4 + 4 * v7--);
        if (*(_DWORD *)(v8 - 4) != v9)
          return 0;
      }
    }
  }
  while (v2-- > 1);
  return result;
}

void PronCollMgr::~PronCollMgr(PronCollMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

void PronCollMgr::checkSimple(PronCollMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char v10;
  unsigned __int16 i;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    v10 = 0;
    for (i = 0; i < v8; v10 = ++i)
    {
      v12 = *((_QWORD *)this + 1);
      v13 = *(unsigned __int16 *)(v12 + 2 * i);
      v14 = (_DWORD)v13 == i || (_DWORD)v13 == 0xFFFF;
      if (!v14 && *(unsigned __int16 *)(v12 + 2 * v13) != (_DWORD)v13)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 112, (uint64_t)"word/pcollmgr", 7, (uint64_t)"%u %u %u", a7, a8, v10);
        v8 = *((_DWORD *)this + 4);
      }
    }
  }
}

void PronCollMgr::loadPronCollMgrFromText(unsigned int **this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *LineFieldString;
  const char *v52;
  unsigned int PhnIndex;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  __int16 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unsigned __int16 *v68;
  unint64_t v69;
  _BYTE v70[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v70);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v70, (uint64_t)a2, 0x3Au, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v70, "PronCollation");
  v68 = 0;
  v69 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v70, sPCT_Versions, (uint64_t)&v68, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v70, (unsigned int *)&v68, v9, v10, v11, v12, v13, v14);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v70, v15, v16, v17, v18, v19, v20, v21);
  v66 = 0;
  v67 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v70, (uint64_t)&v66);
  v64 = 0;
  v65 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v70, (unint64_t)&v64);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v70, 2, v22, v23, v24, v25, v26, v27);
  v28 = v66;
  if (*((_DWORD *)v66 + 2))
    v29 = *(const char **)v66;
  else
    v29 = (const char *)&unk_209A800E4;
  if (strcmp(v29, "HumanReadable"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 146, (uint64_t)"word/pcollmgr", 1, (uint64_t)"%.500s %.500s", v30, v31, (char)"HumanReadable");
    v28 = v66;
  }
  if (*(_DWORD *)v64)
  {
    if (*((_DWORD *)v28 + 2))
      v32 = *(void **)v28;
    else
      v32 = &unk_209A800E4;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 149, (uint64_t)"word/pcollmgr", 2, (uint64_t)"%.500s %.500s", v30, v31, (char)v32);
    v28 = v66;
  }
  if (*((_DWORD *)v28 + 6))
    v33 = (const char *)*((_QWORD *)v28 + 2);
  else
    v33 = (const char *)&unk_209A800E4;
  if (strcmp(v33, "CollatedHumanReadable"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 154, (uint64_t)"word/pcollmgr", 1, (uint64_t)"%.500s %.500s", v34, v35, (char)"CollatedHumanReadable");
  if (*((_DWORD *)v64 + 1))
  {
    if (*((_DWORD *)v66 + 6))
      v36 = (void *)*((_QWORD *)v66 + 2);
    else
      v36 = &unk_209A800E4;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 158, (uint64_t)"word/pcollmgr", 2, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v64);
  DgnArray<DgnString>::releaseAll((uint64_t)&v66);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v68);
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  PhnMgr::getPublicPhnIndexArray(*this, (uint64_t)&v68);
  v37 = v69;
  LODWORD(v38) = v69;
  if (HIDWORD(v67) < v69)
  {
    v64 = 0;
    HIDWORD(v67) = realloc_array(v66, &v64, v69, v67, v67, 1);
    v66 = v64;
    LODWORD(v38) = v69;
  }
  LODWORD(v67) = v37;
  v39 = 0;
  if ((_DWORD)v38)
  {
    v40 = v66;
    v41 = v68;
    v38 = v38;
    do
    {
      *v40++ = 0;
      v43 = *v41++;
      v42 = v43;
      if (v43 <= (unsigned __int16)v39)
        v39 = (unsigned __int16)v39;
      else
        v39 = v42;
      --v38;
    }
    while (v38);
  }
  v44 = v39 + 1;
  v45 = *((_DWORD *)this + 5);
  if (v45 <= v39)
    DgnPrimArray<short>::reallocElts((uint64_t)(this + 1), v44 - v45, 0);
  v46 = 0;
  *((_DWORD *)this + 4) = v44;
  v47 = this[1];
  if ((v44 & 0xFFFE) != 0)
    v48 = (unsigned __int16)v44;
  else
    v48 = 1;
  do
  {
    *((_WORD *)v47 + v46) = v46;
    ++v46;
  }
  while (v48 != v46);
  DgnString::DgnString((DgnString *)&v64);
  DgnString::DgnString((DgnString *)&v62);
  while ((DgnTextFileParser::parseNextLine((DgnTextFileParser *)v70) & 1) != 0)
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v70, 0);
    DgnString::operator=((DgnString *)&v64, LineFieldString);
    if ((_DWORD)v65)
      v52 = (const char *)v64;
    else
      v52 = (const char *)&unk_209A800E4;
    PhnIndex = PhnMgr::getPhnIndex((PhnMgr *)*this, v52);
    v54 = PhnIndex;
    if ((_DWORD)v69)
    {
      v55 = 0;
      while (v68[v55] != PhnIndex)
      {
        if (v69 == ++v55)
          goto LABEL_44;
      }
    }
    else
    {
LABEL_44:
      LODWORD(v55) = -1;
    }
    *((_BYTE *)v66 + v55) = 1;
    v56 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v70, 1u);
    DgnString::operator=((DgnString *)&v62, v56);
    if (v63 >= 2)
      v57 = PhnMgr::getPhnIndex((PhnMgr *)*this, v62);
    else
      v57 = -1;
    *((_WORD *)this[1] + v54) = v57;
  }
  v58 = v67;
  if ((_DWORD)v67)
  {
    v59 = 0;
    do
    {
      if (!*((_BYTE *)v66 + v59))
      {
        v60 = *((_QWORD *)*this + 1) + 16 * v68[v59];
        if (*(_DWORD *)(v60 + 8))
          v61 = *(void **)v60;
        else
          v61 = &unk_209A800E4;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 202, (uint64_t)"word/pcollmgr", 6, (uint64_t)"%.500s", v49, v50, (char)v61);
        v58 = v67;
      }
      ++v59;
    }
    while (v59 < v58);
  }
  DgnString::~DgnString((DgnString *)&v62);
  DgnString::~DgnString((DgnString *)&v64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v66);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v68);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v70);
}

void sub_209A0B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va3);
  _Unwind_Resume(a1);
}

void PronCollMgr::loadPronCollMgr(unsigned int **this, char **a2, DFileChecksums *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  DgnStream *v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t CurrentSubDirComponents;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34[2];
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  if (DFile::subFileExists((uint64_t)a2, 0x3Au))
  {
    if ((a4 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 215, (uint64_t)"word/pcollmgr", 3, (uint64_t)"%s", v8, v9, (char)&unk_209A800E4);
    PronCollMgr::loadPronCollMgrFromText(this, (DFile *)a2);
    PronCollMgr::checkSimple((PronCollMgr *)this, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x38u))
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 222, (uint64_t)"word/pcollmgr", 5, (uint64_t)"%s", v17, v18, (char)&errStr_word_pcollmgr_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    v34[0] = 0;
    v37 = 0;
    v19 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x38u, 1, "MRPCOL!?", v34, &v37);
    if (*((_DWORD *)a2 + 6))
      v20 = a2[2];
    else
      v20 = (char *)&unk_209A800E4;
    MrecHeaderCheckVersions(v20, "MRPCOL!?", v34[0], v37, 0x13u, 3u);
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPCOL!?", v34[0], v37, 19, 3, v26, v27);
    v36 = 0;
    readObject<unsigned short>(v19, (uint64_t)(this + 1), &v36);
    readObjectChecksumAndVerify(v19, v36);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x38u, v36);
    if (v19)
    {
      (**(void (***)(DgnStream *))v19)(v19);
      MemChunkFree(v19, 0);
    }
  }
  else
  {
    *(_QWORD *)v34 = 0;
    v35 = 0;
    PhnMgr::getPublicPhnIndexArray(*this, (uint64_t)v34);
    v21 = v35;
    if ((_DWORD)v35)
    {
      LOWORD(v22) = 0;
      v23 = *(unsigned __int16 **)v34;
      do
      {
        v25 = *v23++;
        v24 = v25;
        if (v25 <= (unsigned __int16)v22)
          v22 = (unsigned __int16)v22;
        else
          v22 = v24;
        --v21;
      }
      while (v21);
    }
    else
    {
      v22 = 0;
    }
    v29 = v22 + 1;
    v30 = *((_DWORD *)this + 5);
    if (v30 <= v22)
      DgnPrimArray<short>::reallocElts((uint64_t)(this + 1), v29 - v30, 0);
    v31 = 0;
    *((_DWORD *)this + 4) = v29;
    v32 = this[1];
    if ((v29 & 0xFFFE) != 0)
      v33 = (unsigned __int16)v29;
    else
      v33 = 1;
    do
    {
      *((_WORD *)v32 + v31) = v31;
      ++v31;
    }
    while (v33 != v31);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
  }
}

void sub_209A0B9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void PronCollMgr::savePronCollMgrToText(PronCollMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 i;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v30);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v30, (uint64_t)a2, 0x3Au, a3);
  v28 = 0;
  v29 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v30, sPCT_Versions, (uint64_t)&v28, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v30, "PronCollation", (_QWORD *)(v28 + 8 * (v29 - 1)));
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  DgnString::DgnString((DgnString *)v23, "HumanReadable");
  v11 = v25;
  if ((_DWORD)v25 == HIDWORD(v25))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
    v11 = v25;
  }
  DgnString::DgnString((DgnString *)(v24 + 16 * v11), (const DgnString *)v23);
  LODWORD(v25) = v25 + 1;
  DgnString::~DgnString((DgnString *)v23);
  v12 = v27;
  if ((_DWORD)v27 == HIDWORD(v27))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
    v12 = v27;
  }
  *(_DWORD *)(v26 + 4 * v12) = 0;
  LODWORD(v27) = v12 + 1;
  DgnString::DgnString((DgnString *)v23, "CollatedHumanReadable");
  v13 = v25;
  if ((_DWORD)v25 == HIDWORD(v25))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
    v13 = v25;
  }
  DgnString::DgnString((DgnString *)(v24 + 16 * v13), (const DgnString *)v23);
  LODWORD(v25) = v25 + 1;
  DgnString::~DgnString((DgnString *)v23);
  v14 = v27;
  if ((_DWORD)v27 == HIDWORD(v27))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
    v14 = v27;
  }
  *(_DWORD *)(v26 + 4 * v14) = 0;
  LODWORD(v27) = v14 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v30, (uint64_t)&v26, (uint64_t)&v24);
  v15 = *((_DWORD *)this + 4);
  if (v15)
  {
    for (i = 0; i < v15; ++i)
    {
      if (i)
      {
        v17 = *(_QWORD *)this;
        if (*(unsigned __int16 *)(*(_QWORD *)this + 60) != i
          && *(unsigned __int16 *)(v17 + 56) != i
          && *(unsigned __int16 *)(v17 + 58) != i)
        {
          v18 = *(_QWORD *)(v17 + 8) + 16 * i;
          if (*(_DWORD *)(v18 + 8))
            v19 = *(char **)v18;
          else
            v19 = (char *)&unk_209A800E4;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 0, v19);
          v20 = *(unsigned __int16 *)(*((_QWORD *)this + 1) + 2 * i);
          if (v20 == 0xFFFF || (v21 = *(_QWORD *)(*(_QWORD *)this + 8) + 16 * v20, !*(_DWORD *)(v21 + 8)))
            v22 = (char *)&unk_209A800E4;
          else
            v22 = *(char **)v21;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 1u, v22);
          DgnTextFileWriter::writeNextLine(v30);
          v15 = *((_DWORD *)this + 4);
        }
      }
    }
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v28);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v30);
}

void sub_209A0BCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PronCollMgr::savePronCollMgr(PronCollMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    PronCollMgr::savePronCollMgrToText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x38u, a5, "MRPCOL!?", 19, 3);
    v10 = 0;
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 8, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x38u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void PronCollMgr::printSize(PronCollMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 338, (DgnString *)&v42);
  if (v43)
    v16 = v42;
  else
    v16 = &unk_209A800E4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A800E4, a3, &unk_209A800E4, v16);
  DgnString::~DgnString((DgnString *)&v42);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A800E4);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 339, (DgnString *)&v42);
  if (v43)
    v26 = v42;
  else
    v26 = &unk_209A800E4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A800E4, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v42);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 12;
  else
    v27 = 16;
  v28 = *((unsigned int *)this + 4);
  v29 = *((_DWORD *)this + 5);
  if (v29 >= v28)
  {
    v30 = 0;
    if ((int)v28 > 0)
      v27 = (v27 | 2) + 2 * (v28 - 1);
    v31 = v27 + 2 * (v29 - v28);
  }
  else
  {
    v30 = 2 * v28;
    v31 = v27;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 341, (DgnString *)&v42);
  if (v43)
    v36 = v42;
  else
    v36 = &unk_209A800E4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A800E4, (34 - a3), (34 - a3), v36, v31, v27, v30);
  DgnString::~DgnString((DgnString *)&v42);
  *a4 += v31;
  *a5 += v27;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 343, (DgnString *)&v42);
  if (v43)
    v41 = v42;
  else
    v41 = &unk_209A800E4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, a3, &unk_209A800E4, (35 - a3), (35 - a3), v41, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v42);
}

void sub_209A0C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PronCollMgr::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  int v5;

  if (a1 == a2)
    return 1;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    return 0;
  do
  {
    v3 = (int)v2 < 1;
    if ((int)v2 < 1)
      break;
    v4 = *(_QWORD *)(a1 + 8) + 2 * v2;
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) - 2 + 2 * v2--);
  }
  while (*(unsigned __int16 *)(v4 - 2) == v5);
  return v3;
}

void MrecInitModule_paramspec_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowParamSetRefCounting)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowParamSetRefCounting", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowParamSetRefCounting = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowParamSetRefCounting);
  }
}

void ParamSpec::getDescription(ParamSpec *this, DgnString *a2)
{
  DgnString *v4;
  _BYTE v5[16];

  *((_DWORD *)a2 + 2) = 0;
  if (**((_BYTE **)this + 3))
  {
    DgnString::DgnString((DgnString *)v5);
    FileSpec::getRelativeSourceFileName(*((FileSpec **)this + 3), (DgnString *)v5, v4);
    DgnString::operator+=(a2, "[");
    DgnString::operator+=(a2, (uint64_t)v5);
    DgnString::operator+=(a2, "] ");
    DgnString::operator+=(a2, *((char **)this + 2));
    DgnString::~DgnString((DgnString *)v5);
  }
}

void sub_209A0C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void ParamSpecMgr::ParamSpecMgr(ParamSpecMgr *this)
{
  char *v2;
  unsigned int v3;

  *((_OWORD *)this + 1) = 0u;
  v2 = (char *)this + 16;
  *(_OWORD *)this = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 256, 0);
  v3 = *((_DWORD *)this + 7);
  if (v3 <= 0xFF)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v2, 256 - v3, 0);
}

void sub_209A0C258(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void ParamSpecMgr::startupParamSpecMgrs(ParamSpecMgr *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = 1u;
  do
  {
    v2 = MemChunkAlloc(0x20uLL, 0);
    ParamSpecMgr::ParamSpecMgr((ParamSpecMgr *)v2);
    ParamSpecMgr::smpParamSpecMgrArray[v1++] = v3;
  }
  while (v1 != 13);
}

void ParamSpecMgr::printSize(ParamSpecMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 229, (DgnString *)&v43);
  if (v44)
    v16 = v43;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v43);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v21 = sizeObject<LMContextData *>((uint64_t)this, 0);
    v22 = sizeObject<LMContextData *>((uint64_t)this, 1);
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 238, (DgnString *)&v43);
    if (v44)
      v27 = v43;
    else
      v27 = &byte_209A88803;
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, v21, v22, 0);
    DgnString::~DgnString((DgnString *)&v43);
    *a4 += v21;
    *a5 += v22;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v28 = 12;
    else
      v28 = 16;
    v29 = *((unsigned int *)this + 6);
    v30 = *((_DWORD *)this + 7);
    if (v30 >= v29)
    {
      v31 = 0;
      if ((int)v29 > 0)
        v28 += 4 * (v29 - 1) + 4;
      v32 = v28 + 4 * (v30 - v29);
    }
    else
    {
      v31 = 4 * v29;
      v32 = v28;
    }
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 240, (DgnString *)&v43);
    if (v44)
      v37 = v43;
    else
      v37 = &byte_209A88803;
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, v32, v28, v31);
    DgnString::~DgnString((DgnString *)&v43);
    *a4 += v32;
    *a5 += v28;
    *a6 += v31;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 242, (DgnString *)&v43);
  if (v44)
    v42 = v43;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, a3, &byte_209A88803, (35 - a3), (35 - a3), v42, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v43);
}

void sub_209A0C558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ParamSpecMgr::getParamId(unsigned int a1, const char *a2)
{
  return ParamSpecMgr::getParamIdByParamName(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + a1), a2);
}

uint64_t ParamSpecMgr::getParamIdByParamName(ParamSpecMgr *this, const char *__s2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = *((unsigned int *)this + 2);
  while (v5 != v4)
  {
    if (!strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)this + 8 * v4++) + 8), __s2))
      return (unsigned __int16)v4;
  }
  LOWORD(v4) = -1;
  return (unsigned __int16)v4;
}

unint64_t ParamSpecMgr::addParam(unint64_t this, ParamSpec *a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 8);
  if (v4 == *(_DWORD *)(this + 12))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  *(_DWORD *)(v3 + 8) = v4 + 1;
  return this;
}

uint64_t ParamSpecMgr::sortParams(ParamSpecMgr *this)
{
  uint64_t *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 6) = 0;
  if (*((_DWORD *)this + 2))
  {
    LODWORD(v3) = 0;
    v4 = 0;
    do
    {
      if ((_DWORD)v3 == *((_DWORD *)this + 7))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v2, 1, 1);
        LODWORD(v3) = *((_DWORD *)this + 6);
      }
      v5 = *((_QWORD *)this + 2);
      *(_DWORD *)(v5 + 4 * v3) = v4;
      v3 = (*((_DWORD *)this + 6) + 1);
      *((_DWORD *)this + 6) = v3;
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 2));
  }
  else
  {
    v3 = 0;
    v5 = *v2;
  }
  return mrec_qsort_r<ParamSpecMgr>(v5, v3, (const char *)4, this);
}

uint64_t mrec_qsort_r<ParamSpecMgr>(uint64_t result, unint64_t a2, const char *a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  const char *v19;
  int v20;
  const char *v21;
  unsigned int *v22;
  unsigned int *v23;
  int v24;
  const char *v25;
  int v26;
  const char *v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  const char *v31;
  int v32;
  _QWORD *v33;
  int v34;
  const char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  char v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  char v59;
  uint64_t v60;
  const char *v61;
  char v62;
  const char *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  BOOL v73;
  int64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  int v81;
  const char *v82;
  const char *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  const char *v93;
  char v94;
  const char *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  char v106;
  _BOOL4 v107;
  unsigned int *v108;
  unint64_t v109;
  BOOL v111;
  int v112;

  v5 = a2;
  v6 = result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != (const char *)8;
  v111 = ((result | a3) & 7) == 0;
  v112 = v8;
  if (a2 < 7)
  {
LABEL_120:
    if ((uint64_t)(v5 * (_QWORD)a3) > (uint64_t)a3)
    {
      v82 = (const char *)(v6 + v5 * (_QWORD)a3);
      v83 = &a3[v6];
      v84 = v6;
      do
      {
        if ((unint64_t)v83 > v6)
        {
          v85 = v84;
          v86 = (char *)v83;
          do
          {
            v87 = v86;
            v86 += v7;
            result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v86) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v87) + 8), a3);
            if ((int)result < 1)
              break;
            if (v112)
            {
              if (v111)
              {
                v88 = 0;
                v89 = &a3[v85];
                do
                {
                  v90 = *(_QWORD *)&v89[8 * v88];
                  *(_QWORD *)&v89[8 * v88] = *(_QWORD *)(v85 + 8 * v88);
                  *(_QWORD *)(v85 + 8 * v88++) = v90;
                }
                while ((unint64_t)a3 >> 3 != v88);
              }
              else
              {
                v92 = 0;
                v93 = &a3[v85];
                do
                {
                  v94 = v92[(_QWORD)v93];
                  v92[(_QWORD)v93] = v92[v85];
                  (v92++)[v85] = v94;
                }
                while (a3 != v92);
              }
            }
            else
            {
              v91 = *(_QWORD *)v87;
              *(_QWORD *)v87 = *(_QWORD *)v86;
              *(_QWORD *)v86 = v91;
            }
            v85 += v7;
          }
          while ((unint64_t)v86 > v6);
        }
        v83 = &a3[(_QWORD)v83];
        v84 += (unint64_t)a3;
      }
      while (v83 < v82);
    }
    return result;
  }
  v9 = a4;
  v10 = (unint64_t)a3 >> 3;
  v107 = a3 != (const char *)8;
  while (1)
  {
    v11 = (uint64_t *)(v6 + (v5 >> 1) * (_QWORD)a3);
    v109 = v5;
    if (v5 == 7)
      goto LABEL_47;
    v12 = (unsigned int *)(v6 + (v5 - 1) * (_QWORD)a3);
    if (v5 < 0x29)
    {
      v16 = (unsigned int *)v6;
      goto LABEL_38;
    }
    v108 = (unsigned int *)(v6 + (v5 - 1) * (_QWORD)a3);
    v13 = v5 >> 3;
    v14 = v9;
    v15 = v13 * (_QWORD)a3;
    v16 = (unsigned int *)(v6 + v13 * (_QWORD)a3);
    v17 = (unsigned int *)(v6 + 2 * v13 * (_QWORD)a3);
    v18 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v14 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(_QWORD *)(*v14 + 8 * *v16) + 8), a3);
    v20 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v14 + 8 * *v16) + 8), *(const char **)(*(_QWORD *)(*v14 + 8 * *v17) + 8), v19);
    if (v18 < 0)
    {
      if ((v20 & 0x80000000) == 0)
      {
        if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v17) + 8), v21) >= 0)v16 = (unsigned int *)v6;
        else
          v16 = (unsigned int *)(v6 + 2 * v15);
      }
    }
    else if (v20 <= 0)
    {
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v17) + 8), v21) >= 0)v16 = (unsigned int *)(v6 + 2 * v15);
      else
        v16 = (unsigned int *)v6;
    }
    v22 = (unsigned int *)((char *)v11 - v15);
    v23 = (unsigned int *)((char *)v11 + v15);
    v24 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)((char *)v11 - v15)) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v11) + 8), v21);
    v26 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v11) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)((char *)v11 + v15)) + 8), v25);
    if (v24 < 0)
    {
      if ((v26 & 0x80000000) == 0)
      {
        if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v22) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v23) + 8), v27) >= 0)v11 = (uint64_t *)((char *)v11 - v15);
        else
          v11 = (uint64_t *)((char *)v11 + v15);
      }
    }
    else if (v26 <= 0)
    {
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v22) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v23) + 8), v27) >= 0)v11 = (uint64_t *)((char *)v11 + v15);
      else
        v11 = (uint64_t *)((char *)v11 - v15);
    }
    v28 = -(uint64_t)v15;
    v29 = (unsigned int *)((char *)v108 - 2 * v15);
    v12 = (unsigned int *)((char *)v108 + v28);
    v30 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v29) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)((char *)v108 + v28)) + 8), v27);
    v32 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v12) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v108) + 8), v31);
    if (v30 < 0)
    {
      if (v32 < 0)
      {
LABEL_36:
        v9 = a4;
        goto LABEL_37;
      }
      v33 = a4;
      v12 = v108;
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v29) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v108) + 8), a3) >= 0)v12 = v29;
    }
    else
    {
      if (v32 > 0)
        goto LABEL_36;
      v33 = a4;
      v12 = v108;
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *v29) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *v108) + 8), a3) < 0)v12 = v29;
    }
    v9 = v33;
LABEL_37:
    v5 = v109;
LABEL_38:
    v34 = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *v16) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v11) + 8), a3);
    result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v11) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *v12) + 8), v35);
    if (v34 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *v16) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *v12) + 8), a3);
        if ((int)result >= 0)
          v11 = (uint64_t *)v16;
        else
          v11 = (uint64_t *)v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *v16) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *v12) + 8), a3);
      if ((int)result >= 0)
        v11 = (uint64_t *)v12;
      else
        v11 = (uint64_t *)v16;
    }
LABEL_47:
    if (v112)
    {
      if (v111)
      {
        v36 = (uint64_t *)v6;
        v37 = (unint64_t)a3 >> 3;
        do
        {
          v38 = *v36;
          *v36++ = *v11;
          *v11++ = v38;
          --v37;
        }
        while (v37);
      }
      else
      {
        v40 = a3;
        v41 = (char *)v6;
        do
        {
          v42 = *v41;
          *v41++ = *(_BYTE *)v11;
          *(_BYTE *)v11 = v42;
          v11 = (uint64_t *)((char *)v11 + 1);
          --v40;
        }
        while (v40);
      }
    }
    else
    {
      v39 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *v11;
      *v11 = v39;
    }
    v43 = 0;
    v44 = (char *)&a3[v6];
    v45 = (char *)(v6 + (v5 - 1) * (_QWORD)a3);
    v46 = v45;
    v47 = (char *)&a3[v6];
LABEL_56:
    while (v47 <= v46)
    {
      result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v47) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v6) + 8), a3);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v112)
        {
          if (v111)
          {
            v48 = 0;
            do
            {
              v49 = *(_QWORD *)&v44[8 * v48];
              *(_QWORD *)&v44[8 * v48] = *(_QWORD *)&v47[8 * v48];
              *(_QWORD *)&v47[8 * v48++] = v49;
            }
            while (v10 != v48);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = v58[(_QWORD)v44];
              v58[(_QWORD)v44] = v58[(_QWORD)v47];
              (v58++)[(_QWORD)v47] = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          v57 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v47;
          *(_QWORD *)v47 = v57;
        }
        v44 = (char *)&a3[(_QWORD)v44];
        v43 = 1;
      }
      v47 = (char *)&a3[(_QWORD)v47];
    }
    while (v47 <= v46)
    {
      result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v46) + 8), *(const char **)(*(_QWORD *)(*v9 + 8 * *(unsigned int *)v6) + 8), a3);
      if ((result & 0x80000000) != 0)
      {
        if (v112)
        {
          if (v111)
          {
            v55 = 0;
            do
            {
              v56 = *(_QWORD *)&v47[8 * v55];
              *(_QWORD *)&v47[8 * v55] = *(_QWORD *)&v46[8 * v55];
              *(_QWORD *)&v46[8 * v55++] = v56;
            }
            while (v10 != v55);
          }
          else
          {
            v61 = 0;
            do
            {
              v62 = v61[(_QWORD)v47];
              v61[(_QWORD)v47] = v61[(_QWORD)v46];
              (v61++)[(_QWORD)v46] = v62;
            }
            while (a3 != v61);
          }
        }
        else
        {
          v60 = *(_QWORD *)v47;
          *(_QWORD *)v47 = *(_QWORD *)v46;
          *(_QWORD *)v46 = v60;
        }
        v47 = (char *)&a3[(_QWORD)v47];
        v46 += v7;
        v43 = 1;
        goto LABEL_56;
      }
      if (!(_DWORD)result)
      {
        if (v112)
        {
          if (v111)
          {
            v50 = 0;
            do
            {
              v51 = *(_QWORD *)&v46[8 * v50];
              *(_QWORD *)&v46[8 * v50] = *(_QWORD *)&v45[8 * v50];
              *(_QWORD *)&v45[8 * v50++] = v51;
            }
            while (v10 != v50);
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = v53[(_QWORD)v46];
              v53[(_QWORD)v46] = v53[(_QWORD)v45];
              (v53++)[(_QWORD)v45] = v54;
            }
            while (a3 != v53);
          }
        }
        else
        {
          v52 = *(_QWORD *)v46;
          *(_QWORD *)v46 = *(_QWORD *)v45;
          *(_QWORD *)v45 = v52;
        }
        v45 += v7;
        v43 = 1;
      }
      v46 += v7;
    }
    v63 = (const char *)(v6 + v109 * (_QWORD)a3);
    if (!v43)
      break;
    v64 = v47 - v44;
    if ((uint64_t)&v44[-v6] >= v47 - v44)
      v65 = v47 - v44;
    else
      v65 = (unint64_t)&v44[-v6];
    if (v65)
    {
      if (v111)
      {
        v66 = &v47[-v65];
        v67 = v65 >> 3;
        v68 = (uint64_t *)v6;
        do
        {
          v69 = *v68;
          *v68++ = *(_QWORD *)v66;
          *(_QWORD *)v66 = v69;
          v66 += 8;
          --v67;
        }
        while (v67);
      }
      else
      {
        v70 = -(uint64_t)v65;
        v71 = (char *)v6;
        do
        {
          v72 = *v71;
          *v71++ = v47[v70];
          v47[v70] = v72;
          v73 = __CFADD__(v70++, 1);
        }
        while (!v73);
      }
    }
    v74 = v45 - v46;
    if (v45 - v46 >= v63 - &a3[(_QWORD)v45])
      v75 = v63 - &a3[(_QWORD)v45];
    else
      v75 = v45 - v46;
    if (v75)
    {
      if (v111)
      {
        v76 = (char *)&v63[-v75];
        v77 = v75 >> 3;
        do
        {
          v78 = *(_QWORD *)v47;
          *(_QWORD *)v47 = *(_QWORD *)v76;
          v47 += 8;
          *(_QWORD *)v76 = v78;
          v76 += 8;
          --v77;
        }
        while (v77);
      }
      else
      {
        v79 = -(uint64_t)v75;
        do
        {
          v80 = *v47;
          *v47++ = v63[v79];
          v63[v79] = v80;
          v73 = __CFADD__(v79++, 1);
        }
        while (!v73);
      }
    }
    if (v64 > (uint64_t)a3)
      result = mrec_qsort_r<ParamSpecMgr>(v6, v64 / (unint64_t)a3, a3, a4);
    if (v74 <= (uint64_t)a3)
      return result;
    v6 = (unint64_t)&v63[-v74];
    v5 = v74 / (unint64_t)a3;
    v81 = v107;
    if (((((_DWORD)v63 - (_DWORD)v74) | a3) & 7) != 0)
      v81 = 2;
    v111 = ((((_DWORD)v63 - (_DWORD)v74) | a3) & 7) == 0;
    v112 = v81;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_120;
  }
  v95 = &a3[v6];
  if ((uint64_t)(v109 * (_QWORD)a3) > (uint64_t)a3)
  {
    v96 = v6;
    do
    {
      if ((unint64_t)v95 > v6)
      {
        v97 = v96;
        v98 = (char *)v95;
        do
        {
          v99 = v98;
          v98 += v7;
          result = DgnString::compareNoCase(*(DgnString **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v98) + 8), *(const char **)(*(_QWORD *)(*a4 + 8 * *(unsigned int *)v99) + 8), a3);
          if ((int)result < 1)
            break;
          if (v112)
          {
            if (v111)
            {
              v100 = 0;
              v101 = &a3[v97];
              do
              {
                v102 = *(_QWORD *)&v101[8 * v100];
                *(_QWORD *)&v101[8 * v100] = *(_QWORD *)(v97 + 8 * v100);
                *(_QWORD *)(v97 + 8 * v100++) = v102;
              }
              while (v10 != v100);
            }
            else
            {
              v104 = 0;
              v105 = &a3[v97];
              do
              {
                v106 = v104[(_QWORD)v105];
                v104[(_QWORD)v105] = v104[v97];
                (v104++)[v97] = v106;
              }
              while (a3 != v104);
            }
          }
          else
          {
            v103 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *(_QWORD *)v98;
            *(_QWORD *)v98 = v103;
          }
          v97 += v7;
        }
        while ((unint64_t)v98 > v6);
      }
      v95 = &a3[(_QWORD)v95];
      v96 += (unint64_t)a3;
    }
    while (v95 < v63);
  }
  return result;
}

uint64_t ParamSpecMgr::getParamByParamId(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 289, (uint64_t)"mrecutil/paramspec", 3, (uint64_t)"%d", a7, a8, a2);
  return *(_QWORD *)(*(_QWORD *)this + 8 * v9);
}

unint64_t ParamSpecMgr::getAllParamIdsSortedByName(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v7 = result;
  *(_DWORD *)(a2 + 8) = 0;
  v8 = *(_DWORD *)(result + 24);
  v9 = *(_DWORD *)(a2 + 12);
  if (v8 > v9)
  {
    result = DgnPrimArray<short>::reallocElts(a2, v8 - v9, 0);
    v8 = *(_DWORD *)(v7 + 24);
  }
  if (v8)
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned int *)(*(_QWORD *)(v7 + 16) + 4 * v10);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v7 + 8 * v11) + 32))(*(_QWORD *)(*(_QWORD *)v7 + 8 * v11), a3, a4);
      if ((_DWORD)result)
      {
        v12 = *(_DWORD *)(a2 + 8);
        if (v12 == *(_DWORD *)(a2 + 12))
        {
          result = DgnPrimArray<short>::reallocElts(a2, 1, 1);
          v12 = *(_DWORD *)(a2 + 8);
        }
        *(_WORD *)(*(_QWORD *)a2 + 2 * v12) = v11 + 1;
        *(_DWORD *)(a2 + 8) = v12 + 1;
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(v7 + 24));
  }
  return result;
}

uint64_t ParamSpecMgr::getNumParamIds(ParamSpecMgr *this)
{
  return (unsigned __int16)(*((_WORD *)this + 12) + 1);
}

uint64_t ParamSpecMgr::ParamGetDefault_BOOL(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  BoolParamSpec *v17;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 359, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    v17 = 0;
  }
  return BoolParamSpec::getDefault(v17, v9, v8);
}

uint64_t BoolParamSpec::getDefault(BoolParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[3 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[3 * v4];
        ++v6;
        if (v5 < a2)
          return BYTE1(v3[3 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return BYTE1(v3[3 * v4 + 2]);
}

uint64_t ParamSpecMgr::ParamGetDefault_int(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  IntParamSpec *v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 367, (uint64_t)"mrecutil/paramspec", 3, (uint64_t)"%d", v12, v13, v10);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 368, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v18, v19, v10);
    v17 = 0;
  }
  return IntParamSpec::getDefault(v17, v9, v8);
}

uint64_t IntParamSpec::getDefault(IntParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2)
          return v3[6 * v4 + 3];
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return v3[6 * v4 + 3];
}

uint64_t ParamSpecMgr::ParamGetDefault_string(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  StringParamSpec *v17;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 377, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    v17 = 0;
  }
  return StringParamSpec::getDefault(v17, v9, v8);
}

uint64_t StringParamSpec::getDefault(StringParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2)
          return *(_QWORD *)&v3[6 * v4 + 4];
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return *(_QWORD *)&v3[6 * v4 + 4];
}

uint64_t ParamSpecMgr::ParamGetDefault_enum(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  const void *ParamByParamId;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  EnumParamSpec *v15;

  v8 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v12 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 388, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v10, v11, v8);
    v15 = 0;
  }
  return EnumParamSpec::getDefault(v15);
}

char *ParamSpecMgr::ParamGetDefault_enumAsString(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  EnumParamSpec *v17;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 401, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    v17 = 0;
  }
  return EnumParamSpec::getDefaultAsString(v17, v9, v8);
}

char *EnumParamSpec::getDefaultAsString(EnumParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  char *result;
  unsigned int v8;
  _BYTE *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[84 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[84 * v4];
        ++v6;
        if (v5 < a2)
          goto LABEL_10;
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
LABEL_10:
  result = *(char **)&v3[84 * v4 + 6];
  if (!*result)
    return &byte_209A88803;
  if (!LOBYTE(v3[84 * v4 + 4]))
  {
    v8 = 1;
    result = &byte_209A88803;
    while (1)
    {
      v9 = *(_BYTE **)&v3[84 * v4 + 6 + 8 * v8];
      if (!*v9)
        break;
      if (LOBYTE(v3[84 * v4 + 4 + 8 * v8++]))
        return v9;
    }
  }
  return result;
}

double ParamSpecMgr::ParamGetDefault_double(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  DoubleParamSpec *v17;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 412, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    v17 = 0;
  }
  return DoubleParamSpec::getDefault(v17, v9, v8);
}

double DoubleParamSpec::getDefault(DoubleParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[10 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[10 * v4];
        ++v6;
        if (v5 < a2)
          return *(double *)&v3[10 * v4 + 4];
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return *(double *)&v3[10 * v4 + 4];
}

_QWORD *IntParamSpec::IntParamSpec(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *result = &off_24C213F00;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void IntParamSpec::~IntParamSpec(IntParamSpec *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t IntParamSpec::sizeObject(uint64_t a1, int a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 32))
    v2 = (a2 & 0xFFFFFFFE) == 2;
  else
    v2 = 1;
  v3 = 20;
  if (v2)
    v3 = 0;
  v4 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 24;
  if (a2 == 3)
    v4 = 0;
  return v4 + v3;
}

uint64_t IntParamSpec::getDescription(IntParamSpec *this, DgnString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ParamSpec::getDescription(this, a2);
  return DgnString::printfAppend(a2, " ==> Range %d to %d", v4, v5, v6, *(unsigned int *)(*((_QWORD *)this + 4) + 16), *(unsigned int *)(*((_QWORD *)this + 4) + 20));
}

void IntParamSpec::validateValue(IntParamSpec *this, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v8 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v9) = a4 | a3;
  if (a4 | a3)
  {
    v10 = *v8;
    if (*v8 >= a3)
    {
      v9 = 0;
      v11 = 0;
      while (v10 != a3 || v8[6 * v9 + 1] > a4)
      {
        v9 = (v11 + 1);
        v10 = v8[6 * v9];
        ++v11;
        if (v10 < a3)
          goto LABEL_10;
      }
      LODWORD(v9) = v11;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
LABEL_10:
  if (v8[6 * v9 + 3] != a2
    && ((int)v8[6 * v9 + 4] > a2 || (int)v8[6 * v9 + 5] < a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 480, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a7, a8, *((_QWORD *)this + 1));
  }
}

_QWORD *EnumParamSpec::EnumParamSpec(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *result = &off_24C2143E8;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void EnumParamSpec::~EnumParamSpec(EnumParamSpec *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t EnumParamSpec::sizeObject(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = gShadowDiagnosticShowIdealizedObjectSizes;
  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  if (a2 == 3)
    v5 = 0;
  else
    v5 = v4;
  if (a2 != 2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      v5 += sizeObject(v6, a2);
  }
  v7 = 8;
  if (!v3)
    v7 = 16;
  if (a2 == 3)
    v7 = 0;
  return v5 + v7;
}

DgnString *EnumParamSpec::getDescription(EnumParamSpec *this, DgnString *a2)
{
  DgnString *result;
  uint64_t v5;
  char *v6;
  char **v7;

  ParamSpec::getDescription(this, a2);
  result = DgnString::operator+=(a2, " ==> LegalVals: ");
  v5 = *((_QWORD *)this + 4);
  v6 = *(char **)(v5 + 24);
  if (*v6)
  {
    v7 = (char **)(v5 + 40);
    do
    {
      DgnString::operator+=(a2, v6);
      result = DgnString::operator+=(a2, " ");
      if (*v7)
      {
        if (**v7)
        {
          DgnString::operator+=(a2, "[");
          DgnString::operator+=(a2, *v7);
          result = DgnString::operator+=(a2, "] ");
        }
      }
      v6 = v7[2];
      v7 += 4;
    }
    while (*v6);
  }
  return result;
}

void EnumParamSpec::validateValue(EnumParamSpec *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v8 = *((_QWORD *)this + 4);
  v9 = **(unsigned __int8 **)(v8 + 24);
  if (**(_BYTE **)(v8 + 24))
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v12 = 0;
    while (1)
    {
      if (*(_BYTE *)(v8 + v10 + 16))
        v12 = *(_DWORD *)(v8 + v10 + 32);
      if (v10)
      {
        v13 = *(_DWORD *)(v8 + v10 + 32);
        if (v9 >= v13)
          v9 = *(_DWORD *)(v8 + v10 + 32);
        if (v11 >= v13)
          goto LABEL_12;
      }
      else
      {
        v13 = *(_DWORD *)(v8 + 32);
        v9 = v13;
      }
      v11 = v13;
LABEL_12:
      v14 = **(unsigned __int8 **)(v8 + v10 + 56);
      v10 += 32;
      if (!v14)
        goto LABEL_15;
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_15:
  if (v12 != a2 && (v9 > a2 || v11 < a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 646, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a7, a8, *((_QWORD *)this + 1));
}

uint64_t EnumParamSpec::convertEnumStringToInt(EnumParamSpec *this, const char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;

  v10 = *((_QWORD *)this + 4);
  v11 = *(const char **)(v10 + 24);
  if (*v11)
  {
    v12 = (_QWORD *)(v10 + 32);
    while (strcmp(__s1, v11))
    {
      v11 = (const char *)v12[3];
      v12 += 4;
      if (!*v11)
        goto LABEL_5;
    }
    return *(unsigned int *)v12;
  }
  else
  {
LABEL_5:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 661, (uint64_t)"mrecutil/paramspec", 2, (uint64_t)"%.500s %.500s", a7, a8, *((_QWORD *)this + 1));
    return 0;
  }
}

uint64_t EnumParamSpec::checkStringEnumValue(EnumParamSpec *this, char *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v7) = a4 | a3;
  if (a4 | a3)
  {
    v8 = *v6;
    if (*v6 >= a3)
    {
      v7 = 0;
      v9 = 0;
      while (v8 != a3 || v6[84 * v7 + 1] > a4)
      {
        v7 = (v9 + 1);
        v8 = v6[84 * v7];
        ++v9;
        if (v8 < a3)
          goto LABEL_10;
      }
      LODWORD(v7) = v9;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
LABEL_10:
  v10 = *(_BYTE **)&v6[84 * v7 + 6];
  v11 = *v10;
  if (*v10)
  {
    v12 = 336 * v7 + 56;
    do
    {
      v13 = ustrcmp(v10, (unsigned __int8 *)a2);
      v11 = v13 == 0;
      if (!v13)
        break;
      v10 = *(_BYTE **)(*((_QWORD *)this + 4) + v12);
      v12 += 32;
    }
    while (*v10);
  }
  return v11;
}

_QWORD *BoolParamSpec::BoolParamSpec(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *result = &off_24C214328;
  result[1] = a2;
  result[5] = a5;
  return result;
}

void BoolParamSpec::~BoolParamSpec(BoolParamSpec *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t BoolParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  return v2 | v3;
}

_QWORD *DoubleParamSpec::DoubleParamSpec(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *result = &off_24C214FC8;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void DoubleParamSpec::~DoubleParamSpec(DoubleParamSpec *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t DoubleParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

void DoubleParamSpec::getDescription(DoubleParamSpec *this, DgnString *a2)
{
  _BYTE v4[16];

  ParamSpec::getDescription(this, a2);
  DgnString::operator+=(a2, " ==> Range ");
  DgnString::formatFloat((DgnString *)0xE, *(double *)(*((_QWORD *)this + 4) + 24), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
  DgnString::operator+=(a2, " to ");
  DgnString::formatFloat((DgnString *)0xE, *(double *)(*((_QWORD *)this + 4) + 32), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
}

void sub_209A0E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void DoubleParamSpec::validateValue(DoubleParamSpec *this, double a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v10) = a4 | a3;
  if (a4 | a3)
  {
    v11 = *v9;
    if (*v9 >= a3)
    {
      v10 = 0;
      v12 = 0;
      while (v11 != a3 || v9[10 * v10 + 1] > a4)
      {
        v10 = (v12 + 1);
        v11 = v9[10 * v10];
        ++v12;
        if (v11 < a3)
          goto LABEL_10;
      }
      LODWORD(v10) = v12;
    }
    else
    {
      LODWORD(v10) = 0;
    }
  }
LABEL_10:
  if (*(double *)&v9[10 * v10 + 4] != a2
    && (*(double *)&v9[10 * v10 + 6] > a2 || *(double *)&v9[10 * v10 + 8] < a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 808, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a8, a9, *((_QWORD *)this + 1));
  }
}

_QWORD *StringParamSpec::StringParamSpec(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = a4;
  a1[3] = a3;
  *a1 = &off_24C215360;
  a1[1] = a2;
  DgnString::DgnString((DgnString *)(a1 + 4));
  a1[6] = a5;
  return a1;
}

void StringParamSpec::~StringParamSpec(StringParamSpec *this)
{
  *(_QWORD *)this = &off_24C215360;
  DgnString::~DgnString((StringParamSpec *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24C215360;
  DgnString::~DgnString((StringParamSpec *)((char *)this + 32));
  JUMPOUT(0x20BD149A8);
}

uint64_t StringParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if (a2 == 3)
    v3 = 0;
  else
    v3 = v2;
  return v3 + sizeObject(a1 + 32);
}

uint64_t IntParamSpec::getType(IntParamSpec *this)
{
  return 2;
}

uint64_t IntParamSpec::isPresent(IntParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2)
          return LOBYTE(v3[6 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[6 * v4 + 2]);
}

uint64_t EnumParamSpec::getType(EnumParamSpec *this)
{
  return 5;
}

uint64_t EnumParamSpec::isPresent(EnumParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[84 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[84 * v4];
        ++v6;
        if (v5 < a2)
          return LOBYTE(v3[84 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[84 * v4 + 2]);
}

uint64_t BoolParamSpec::getType(BoolParamSpec *this)
{
  return 1;
}

uint64_t BoolParamSpec::isPresent(BoolParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[3 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[3 * v4];
        ++v6;
        if (v5 < a2)
          return LOBYTE(v3[3 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[3 * v4 + 2]);
}

uint64_t DoubleParamSpec::getType(DoubleParamSpec *this)
{
  return 3;
}

uint64_t DoubleParamSpec::isPresent(DoubleParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[10 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[10 * v4];
        ++v6;
        if (v5 < a2)
          return LOBYTE(v3[10 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[10 * v4 + 2]);
}

uint64_t StringParamSpec::getType(StringParamSpec *this)
{
  return 4;
}

uint64_t StringParamSpec::isPresent(StringParamSpec *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    v5 = *v3;
    if (*v3 >= a2)
    {
      v4 = 0;
      v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        v4 = (v6 + 1);
        v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2)
          return LOBYTE(v3[6 * v4 + 2]);
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[6 * v4 + 2]);
}

void MrecInitModule_recentb_lm(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;

  if (!gParDebugShowRecentBufferOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowRecentBufferOnLoad", byte_209A80178, byte_209A80178, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowRecentBufferOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowRecentBufferOnLoad);
  }
  if (!gParDebugRecentBufferScoring)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugRecentBufferScoring", byte_209A80178, byte_209A80178, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugRecentBufferScoring = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecentBufferScoring);
  }
  if (!gParDebugRecentBufferAddDelete)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugRecentBufferAddDelete", byte_209A80178, byte_209A80178, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugRecentBufferAddDelete = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecentBufferAddDelete);
  }
}

void RecentBuffer::RecentBuffer(RecentBuffer *this, int a2, const WordList *a3, LanguageModel *a4, LanguageModel *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int16x4_t v16;

  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 80, 0, 16);
  DgnString::DgnString((RecentBuffer *)((char *)this + 192));
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::Hash((uint64_t)this + 304, 0, 16);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  DgnString::DgnString((RecentBuffer *)((char *)this + 496));
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 1) = a3;
  *(_DWORD *)this = a2;
  v10 = (*(uint64_t (**)(LanguageModel *))(*(_QWORD *)a5 + 528))(a5);
  *((_QWORD *)this + 4) = v10;
  WordLanguageModel::registerRecentBuffer(v10, this);
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 254) = 0;
  LODWORD(v11) = *(_DWORD *)this;
  CombineTable::initCombineTable((uint64_t)this + 432, (double)v11);
  v13 = (40 * *(_DWORD *)this) | 1;
  v14 = *((_DWORD *)this + 115);
  if (v13 > v14)
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 448, v13 - v14, 0);
  v15 = 0;
  *((_DWORD *)this + 114) = v13;
  do
  {
    LODWORD(v12) = *(_DWORD *)this;
    *(long double *)(*((_QWORD *)this + 56) + 8 * v15) = DgnExp(-(double)v15 / (double)v12);
    ++v15;
  }
  while (v15 < *((unsigned int *)this + 114));
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0x3FF0000000000000;
  *((_BYTE *)this + 72) = 0;
  *((_WORD *)this + 37) = 20000;
  v16 = vdup_n_s16(0x4E20u);
  *((int16x4_t *)this + 60) = v16;
  *((_BYTE *)this + 488) = 0;
  *((int16x4_t *)this + 66) = v16;
}

void sub_209A0E810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, BitArray *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BitArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v18 + 512);
  BitArray::~BitArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18 + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v18 + 416);
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  BitArray::~BitArray(a11);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(a12);
  _Unwind_Resume(a1);
}

unint64_t WordLanguageModel::registerRecentBuffer(unint64_t this, RecentBuffer *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 216);
  if (v4 == *(_DWORD *)(this + 220))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 208, 1, 1);
    v4 = *(_DWORD *)(v3 + 216);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 208) + 8 * v4) = a2;
  *(_DWORD *)(v3 + 216) = v4 + 1;
  return this;
}

void RecentBuffer::~RecentBuffer(RecentBuffer *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  RecentBuffer **v5;
  unsigned int v6;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_DWORD *)(v2 + 216);
  if (v3)
  {
    v4 = *(unsigned int *)(v2 + 216);
    v5 = *(RecentBuffer ***)(v2 + 208);
    while (*v5 != this)
    {
      ++v5;
      if (!--v4)
        goto LABEL_7;
    }
    v6 = v3 - 1;
    *v5 = *(RecentBuffer **)(*(_QWORD *)(v2 + 208) + 8 * v6);
    *(_DWORD *)(v2 + 216) = v6;
  }
LABEL_7:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 512);
  BitArray::~BitArray((RecentBuffer *)((char *)this + 496));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 448);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 432);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 416);
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash((uint64_t)this + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  BitArray::~BitArray((RecentBuffer *)((char *)this + 192));
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash((uint64_t)this + 80);
}

void RecentBuffer::printSize(RecentBuffer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  unint64_t *v305;
  uint64_t v306;
  void *v308;
  uint64_t v309;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 428, (DgnString *)&v308);
  if ((_DWORD)v309)
    v15 = v308;
  else
    v15 = &unk_209A80178;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A80178, a3, &unk_209A80178, v15);
  DgnString::~DgnString((DgnString *)&v308);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A80178);
  v20 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 430, (DgnString *)&v308);
  if ((_DWORD)v309)
    v25 = v308;
  else
    v25 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v26 = 4;
  else
    v26 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 432, (DgnString *)&v308);
  if ((_DWORD)v309)
    v31 = v308;
  else
    v31 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v31, v26, v26, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v26;
  *a5 += v26;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v32 = 4;
  else
    v32 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 433, (DgnString *)&v308);
  if ((_DWORD)v309)
    v37 = v308;
  else
    v37 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 4;
  else
    v38 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 434, (DgnString *)&v308);
  if ((_DWORD)v309)
    v43 = v308;
  else
    v43 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v38;
  *a5 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v44 = 4;
  else
    v44 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 435, (DgnString *)&v308);
  if ((_DWORD)v309)
    v49 = v308;
  else
    v49 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v49, v44, v44, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v44;
  *a5 += v44;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 438, (DgnString *)&v308);
  if ((_DWORD)v309)
    v54 = v308;
  else
    v54 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 440, (DgnString *)&v308);
  if ((_DWORD)v309)
    v59 = v308;
  else
    v59 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v59, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 442, (DgnString *)&v308);
  if ((_DWORD)v309)
    v64 = v308;
  else
    v64 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 444, (DgnString *)&v308);
  if ((_DWORD)v309)
    v69 = v308;
  else
    v69 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v69, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 446, (DgnString *)&v308);
  if ((_DWORD)v309)
    v74 = v308;
  else
    v74 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, (a3 + 1), &unk_209A80178, (34 - a3), (34 - a3), v74, 1, 1, 0);
  v304 = a3;
  v305 = a6;
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 448, (DgnString *)&v308);
  if ((_DWORD)v309)
    v79 = v308;
  else
    v79 = &unk_209A80178;
  v306 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v306, &unk_209A80178, (34 - a3), (34 - a3), v79, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  v80 = (char *)this + 104;
  v81 = sizeObject((char *)this + 104);
  v82 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v82 = 8;
    v83 = 2;
  }
  else
  {
    v83 = 3;
  }
  v84 = (unint64_t)*((unsigned int *)this + 42) << v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v85 = 8;
  else
    v85 = 16;
  v86 = v81 + v85 + v82 + v84 + 13;
  v87 = sizeObject(v80);
  v88 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v88 = 8;
    v89 = 2;
  }
  else
  {
    v89 = 3;
  }
  v90 = (unint64_t)*((unsigned int *)this + 42) << v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v91 = 8;
  else
    v91 = 16;
  v92 = v87 + v91 + v88 + v90 + 13;
  v93 = sizeObject(v80);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 451, (DgnString *)&v308);
  if ((_DWORD)v309)
    v98 = v308;
  else
    v98 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v306, &unk_209A80178, v20, v20, v98, v86, v92, v93);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v86;
  *a5 += v92;
  *a6 += v93;
  v99 = BitArray::sizeObject((uint64_t)this + 192, 0);
  v100 = BitArray::sizeObject((uint64_t)this + 192, 1);
  v101 = BitArray::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 453, (DgnString *)&v308);
  if ((_DWORD)v309)
    v106 = v308;
  else
    v106 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v306, &unk_209A80178, v20, v20, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v107 = 12;
  else
    v107 = 16;
  v108 = *((unsigned int *)this + 54);
  v109 = *((_DWORD *)this + 55);
  if (v109 >= v108)
  {
    v110 = 0;
    if ((int)v108 > 0)
      v107 += 4 * (v108 - 1) + 4;
    v111 = v107 + 4 * (v109 - v108);
  }
  else
  {
    v110 = 4 * v108;
    v111 = v107;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 455, (DgnString *)&v308);
  if ((_DWORD)v309)
    v116 = v308;
  else
    v116 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v306, &unk_209A80178, v20, v20, v116, v111, v107, v110);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v111;
  *a5 += v107;
  *a6 += v110;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v117 = 12;
  else
    v117 = 16;
  v118 = *((unsigned int *)this + 58);
  v119 = *((_DWORD *)this + 59);
  if (v119 >= v118)
  {
    v120 = 0;
    if ((int)v118 > 0)
      v117 += 4 * (v118 - 1) + 4;
    v121 = v117 + 4 * (v119 - v118);
  }
  else
  {
    v120 = 4 * v118;
    v121 = v117;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 457, (DgnString *)&v308);
  if ((_DWORD)v309)
    v126 = v308;
  else
    v126 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v306, &unk_209A80178, v20, v20, v126, v121, v117, v120);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v121;
  *a5 += v117;
  *a6 += v120;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 459, (DgnString *)&v308);
  if ((_DWORD)v309)
    v131 = v308;
  else
    v131 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v306, &unk_209A80178, v20, v20, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 461, (DgnString *)&v308);
  if ((_DWORD)v309)
    v136 = v308;
  else
    v136 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v306, &unk_209A80178, v20, v20, v136, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 464, (DgnString *)&v308);
  if ((_DWORD)v309)
    v141 = v308;
  else
    v141 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v306, &unk_209A80178, v20, v20, v141, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 466, (DgnString *)&v308);
  if ((_DWORD)v309)
    v146 = v308;
  else
    v146 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v306, &unk_209A80178, v20, v20, v146, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 468, (DgnString *)&v308);
  if ((_DWORD)v309)
    v151 = v308;
  else
    v151 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v306, &unk_209A80178, v20, v20, v151, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 470, (DgnString *)&v308);
  if ((_DWORD)v309)
    v156 = v308;
  else
    v156 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v306, &unk_209A80178, v20, v20, v156, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v157 = 12;
  else
    v157 = 16;
  v158 = *((unsigned int *)this + 68);
  v159 = *((_DWORD *)this + 69);
  if (v159 >= v158)
  {
    v160 = 0;
    if ((int)v158 > 0)
      v157 = (v157 | 2) + 2 * (v158 - 1);
    v161 = v157 + 2 * (v159 - v158);
  }
  else
  {
    v160 = 2 * v158;
    v161 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 472, (DgnString *)&v308);
  if ((_DWORD)v309)
    v166 = v308;
  else
    v166 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v306, &unk_209A80178, v20, v20, v166, v161, v157, v160);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v161;
  *a5 += v157;
  *a6 += v160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 474, (DgnString *)&v308);
  if ((_DWORD)v309)
    v171 = v308;
  else
    v171 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v167, v168, v169, v170, v306, &unk_209A80178, v20, v20, v171, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v172 = 12;
  else
    v172 = 16;
  v173 = *((unsigned int *)this + 74);
  v174 = *((_DWORD *)this + 75);
  if (v174 >= v173)
  {
    v175 = 0;
    if ((int)v173 > 0)
      v172 = (v172 | 2) + 2 * (v173 - 1);
    v176 = v172 + 2 * (v174 - v173);
  }
  else
  {
    v175 = 2 * v173;
    v176 = v172;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 476, (DgnString *)&v308);
  if ((_DWORD)v309)
    v181 = v308;
  else
    v181 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v306, &unk_209A80178, v20, v20, v181, v176, v172, v175);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v176;
  *a5 += v172;
  *a6 += v175;
  v182 = (char *)this + 328;
  v183 = sizeObject((char *)this + 328);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v184 = 8;
  else
    v184 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v185 = 2;
  else
    v185 = 3;
  v186 = (unint64_t)*((unsigned int *)this + 98) << v185;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v187 = 8;
  else
    v187 = 16;
  v188 = v183 + v187 + v184 + v186 + 13;
  v189 = sizeObject(v182);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v190 = 8;
  else
    v190 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v191 = 2;
  else
    v191 = 3;
  v192 = (unint64_t)*((unsigned int *)this + 98) << v191;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v193 = 8;
  else
    v193 = 16;
  v194 = v189 + v193 + v190 + v192 + 13;
  v195 = sizeObject(v182);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 478, (DgnString *)&v308);
  if ((_DWORD)v309)
    v200 = v308;
  else
    v200 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v196, v197, v198, v199, v306, &unk_209A80178, v20, v20, v200, v188, v194, v195);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v188;
  *a5 += v194;
  *a6 += v195;
  v201 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 416, 0);
  v202 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 416, 1);
  v308 = 0;
  v309 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v308);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 481, (DgnString *)&v308);
  if ((_DWORD)v309)
    v207 = v308;
  else
    v207 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v306, &unk_209A80178, v20, v20, v207, v201, v202, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v201;
  *a5 += v202;
  v208 = CombineTable::sizeObject((uint64_t)this + 432, 0);
  v209 = CombineTable::sizeObject((uint64_t)this + 432, 1);
  v210 = CombineTable::sizeObject((uint64_t)this + 432, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 483, (DgnString *)&v308);
  if ((_DWORD)v309)
    v215 = v308;
  else
    v215 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v211, v212, v213, v214, v306, &unk_209A80178, v20, v20, v215, v208, v209, v210);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v208;
  *a5 += v209;
  *a6 += v210;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v216 = 12;
  else
    v216 = 16;
  v217 = *((unsigned int *)this + 114);
  v218 = *((_DWORD *)this + 115);
  if (v218 >= v217)
  {
    v219 = 0;
    if ((int)v217 > 0)
      v216 += 8 * (v217 - 1) + 8;
    v220 = v216 + 8 * (v218 - v217);
  }
  else
  {
    v219 = 8 * v217;
    v220 = v216;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 485, (DgnString *)&v308);
  if ((_DWORD)v309)
    v225 = v308;
  else
    v225 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v306, &unk_209A80178, v20, v20, v225, v220, v216, v219);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v220;
  *a5 += v216;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v226 = 12;
  else
    v226 = 16;
  v227 = *((unsigned int *)this + 118);
  v228 = *((_DWORD *)this + 119);
  if (v228 >= v227)
  {
    v229 = 0;
    if ((int)v227 > 0)
      v226 = (v226 | 2) + 2 * (v227 - 1);
    v230 = v226 + 2 * (v228 - v227);
  }
  else
  {
    v229 = 2 * v227;
    v230 = v226;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 487, (DgnString *)&v308);
  if ((_DWORD)v309)
    v235 = v308;
  else
    v235 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v306, &unk_209A80178, v20, v20, v235, v230, v226, v229);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v230;
  *a5 += v226;
  *a6 += v229;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 489, (DgnString *)&v308);
  if ((_DWORD)v309)
    v240 = v308;
  else
    v240 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v236, v237, v238, v239, v306, &unk_209A80178, v20, v20, v240, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 491, (DgnString *)&v308);
  if ((_DWORD)v309)
    v245 = v308;
  else
    v245 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v241, v242, v243, v244, v306, &unk_209A80178, v20, v20, v245, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 493, (DgnString *)&v308);
  if ((_DWORD)v309)
    v250 = v308;
  else
    v250 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v246, v247, v248, v249, v306, &unk_209A80178, v20, v20, v250, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 495, (DgnString *)&v308);
  if ((_DWORD)v309)
    v255 = v308;
  else
    v255 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v251, v252, v253, v254, v306, &unk_209A80178, v20, v20, v255, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 498, (DgnString *)&v308);
  if ((_DWORD)v309)
    v260 = v308;
  else
    v260 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v256, v257, v258, v259, v306, &unk_209A80178, v20, v20, v260, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  v261 = BitArray::sizeObject((uint64_t)this + 496, 0);
  v262 = BitArray::sizeObject((uint64_t)this + 496, 1);
  v263 = BitArray::sizeObject((uint64_t)this + 496, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 500, (DgnString *)&v308);
  if ((_DWORD)v309)
    v268 = v308;
  else
    v268 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v264, v265, v266, v267, v306, &unk_209A80178, v20, v20, v268, v261, v262, v263);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v261;
  *a5 += v262;
  *a6 += v263;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v269 = 12;
  else
    v269 = 16;
  v270 = *((unsigned int *)this + 130);
  v271 = *((_DWORD *)this + 131);
  if (v271 >= v270)
  {
    v272 = 0;
    if ((int)v270 > 0)
      v269 += 4 * (v270 - 1) + 4;
    v273 = v269 + 4 * (v271 - v270);
  }
  else
  {
    v272 = 4 * v270;
    v273 = v269;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 502, (DgnString *)&v308);
  if ((_DWORD)v309)
    v278 = v308;
  else
    v278 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v306, &unk_209A80178, v20, v20, v278, v273, v269, v272);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v273;
  *a5 += v269;
  *v305 += v272;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 505, (DgnString *)&v308);
  if ((_DWORD)v309)
    v283 = v308;
  else
    v283 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v306, &unk_209A80178, v20, v20, v283, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 507, (DgnString *)&v308);
  if ((_DWORD)v309)
    v288 = v308;
  else
    v288 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v306, &unk_209A80178, v20, v20, v288, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 509, (DgnString *)&v308);
  if ((_DWORD)v309)
    v293 = v308;
  else
    v293 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v306, &unk_209A80178, v20, v20, v293, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 511, (DgnString *)&v308);
  if ((_DWORD)v309)
    v298 = v308;
  else
    v298 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v306, &unk_209A80178, v20, v20, v298, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 513, (DgnString *)&v308);
  if ((_DWORD)v309)
    v303 = v308;
  else
    v303 = &unk_209A80178;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v304, &unk_209A80178, (35 - v304), (35 - v304), v303, *a4, *a5, *v305);
  DgnString::~DgnString((DgnString *)&v308);
}

void sub_209A1001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecentBuffer::computeAppearancesToScores(RecentBuffer *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  double v13;

  if (a2)
  {
    v4 = *((_QWORD *)this + 52);
    v5 = v4 + 16 * a2;
    v6 = (_DWORD *)(v5 + 8);
    v7 = a2 + 1;
    if (*(_DWORD *)(v5 + 8) != (_DWORD)v7)
    {
      v8 = *(_DWORD *)(v4 + 16 * a2 + 12);
      if (v7 <= v8)
      {
        *v6 = v7;
        if (a2 == -1)
          return;
      }
      else
      {
        DgnPrimArray<short>::reallocElts(v5, v7 - v8, 0);
        *v6 = v7;
      }
      v9 = 0;
      v10 = 1.0 / (double)a2;
      v11 = 16 * a2;
      do
      {
        v12 = *(_DWORD *)this;
        v13 = -20.0;
        if (v10 * (double)v9 > 0.0)
        {
          v13 = DgnLog(v10 * (double)v9);
          if (v13 < -20.0)
            v13 = -20.0;
        }
        *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 52) + v11) + 2 * v9++) = (int)((double)-v12 * v13 + 0.5);
      }
      while (v7 != v9);
    }
  }
}

uint64_t RecentBuffer::addWordCountUni(uint64_t this, unsigned int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if (a2 == 16777213)
  {
    if (*(_BYTE *)(this + 488))
    {
      v5 = *(_DWORD *)(this + 256);
      if (a3)
        v6 = v5 + 1;
      else
        v6 = v5 - 1;
      *(_DWORD *)(this + 256) = v6;
    }
    else
    {
      v12 = *(_WORD *)(this + 260);
      if (a3)
        v13 = v12 + 1;
      else
        v13 = v12 - 1;
      *(_WORD *)(this + 260) = v13;
    }
  }
  else if (a2 == 0xFFFFFF)
  {
    v3 = *(_DWORD *)(this + 248);
    if (a3)
      v4 = v3 + 1;
    else
      v4 = v3 - 1;
    *(_DWORD *)(this + 248) = v4;
  }
  else if (*(_DWORD *)(this + 504) > a2 && ((*(_DWORD *)(*(_QWORD *)(this + 496) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v7 = *(_DWORD *)(this + 252);
    if (a3)
      v8 = v7 + 1;
    else
      v8 = v7 - 1;
    *(_DWORD *)(this + 252) = v8;
  }
  else
  {
    v9 = *(_QWORD *)(this + 264);
    v10 = *(_WORD *)(v9 + 2 * a2);
    if (a3)
      v11 = v10 + 1;
    else
      v11 = v10 - 1;
    *(_WORD *)(v9 + 2 * a2) = v11;
  }
  return this;
}

void RecentBuffer::addWordCountBi(RecentBuffer *this, int a2, unsigned int a3, int a4)
{
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15[2];

  if (a2 != 0xFFFFFF && (a3 & 0xFFFFFFFE) != 0xFFFFFE)
  {
    v15[0] = a2;
    v15[1] = a3;
    v7 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)this + 304, v15);
    if (v7)
    {
      v8 = *((_DWORD *)v7 + 5);
      if (a4)
      {
        *((_DWORD *)v7 + 5) = v8 + 1;
LABEL_11:
        v11 = *((_QWORD *)this + 36);
        v12 = *(_WORD *)(v11 + 2 * a3) + 1;
LABEL_15:
        *(_WORD *)(v11 + 2 * a3) = v12;
        RecentBuffer::computeAppearancesToScores(this, v12);
        return;
      }
      v13 = v8 - 1;
      *((_DWORD *)v7 + 5) = v13;
      if (!v13)
        Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::remove((uint64_t)this + 304, v15);
    }
    else
    {
      v14 = 1;
      Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::add((uint64_t)this + 304, v15, &v14);
      if ((a4 & 1) != 0)
        goto LABEL_11;
    }
    v11 = *((_QWORD *)this + 36);
    v12 = *(_WORD *)(v11 + 2 * a3) - 1;
    goto LABEL_15;
  }
  v9 = *((_DWORD *)this + 70);
  if (a4)
    v10 = v9 + 1;
  else
    v10 = v9 - 1;
  *((_DWORD *)this + 70) = v10;
}

uint64_t **Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::remove(uint64_t a1, _DWORD *a2)
{
  uint64_t **result;

  result = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(a1, a2);
  if (*result)
    return (uint64_t **)Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::removeBucket(a1, (char **)result);
  return result;
}

void RecentBuffer::addToRecentInternal(RecentBuffer *this, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v5;
  unint64_t v6;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v5 = *((_DWORD *)this + 10);
    if (v5)
    {
      v6 = v3 >= v5 ? v3 - v5 : 0;
      if (v6 < v3)
      {
        v9 = *((_DWORD *)this + 60);
        do
        {
          v10 = *((_DWORD *)this + 61);
          if (v10 + 1 == v5)
            LODWORD(v11) = 0;
          else
            LODWORD(v11) = v10 + 1;
          *((_DWORD *)this + 61) = v11;
          if (v9 == v5)
          {
            RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v11), 0);
            v11 = *((unsigned int *)this + 61);
            if (*((_BYTE *)this + 56))
            {
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v11), *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v11), 0);
              LODWORD(v11) = *((_DWORD *)this + 61);
            }
          }
          v12 = *((_QWORD *)this + 26);
          *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(*(_QWORD *)a2 + 4 * v6);
          RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(v12 + 4 * *((unsigned int *)this + 61)), 1);
          if (*((_BYTE *)this + 56))
          {
            v13 = a3;
            if (v6)
              v13 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v6 - 4);
            v14 = *((_QWORD *)this + 28);
            *(_DWORD *)(v14 + 4 * *((unsigned int *)this + 61)) = v13;
            RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * *((unsigned int *)this + 61)), *(_DWORD *)(v14 + 4 * *((unsigned int *)this + 61)), 1);
          }
          v5 = *((_DWORD *)this + 10);
          v15 = *((_DWORD *)this + 60);
          if (v5 >= v15 + 1)
            v9 = v15 + 1;
          else
            v9 = *((_DWORD *)this + 10);
          *((_DWORD *)this + 60) = v9;
          ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 8));
      }
    }
  }
}

uint64_t RecentBuffer::getRecentScore(RecentBuffer *this, uint64_t a2, int a3, const LMContextData *a4)
{
  unsigned int v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD v29[2];
  unsigned int v30;

  v30 = a2;
  if ((_DWORD)a2 == 0xFFFFFF)
    return (__int16)a3;
  v6 = a2;
  if ((_DWORD)a2 == 16777213)
  {
    v8 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)&v30);
    if (!v8)
    {
      if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 696))(*((_QWORD *)this + 4)) & 1) == 0)
        return (__int16)a3;
      goto LABEL_9;
    }
LABEL_8:
    v30 = *((_DWORD *)v8 + 4);
    goto LABEL_9;
  }
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2), a2))
    return (__int16)a3;
  v30 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 256) + 4 * v6);
  v8 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)&v30);
  if (v8)
    goto LABEL_8;
LABEL_9:
  v9 = *((_DWORD *)this + 60);
  if (!v9)
    return (__int16)a3;
  v10 = *((unsigned int *)a4 + 2);
  if (v30 == 16777213 && *((_BYTE *)this + 488)
    || *((_DWORD *)this + 126) > v30
    && ((*(_DWORD *)(*((_QWORD *)this + 62) + (((unint64_t)v30 >> 3) & 0x1FFFFFFC)) >> v30) & 1) != 0
    || ((v11 = *((_DWORD *)this + 63) + *((_DWORD *)this + 62) + *((_DWORD *)this + 64), v30 != 16777213)
      ? (v12 = (unsigned __int16 *)(*((_QWORD *)this + 33) + 2 * v30))
      : (v12 = (unsigned __int16 *)((char *)this + 260)),
        v9 == v11))
  {
    v13 = a3;
LABEL_19:
    if (*((_BYTE *)this + 56) && v10 <= 0xFFFFF3 && v9 != *((_DWORD *)this + 70))
    {
      v14 = *(unsigned __int16 *)(*((_QWORD *)this + 36) + 2 * v10);
      v29[0] = v30;
      v29[1] = v10;
      v15 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)this + 304, v29);
      if (v15)
        v15 = (uint64_t *)*((unsigned int *)v15 + 5);
      if ((_DWORD)v14)
      {
        v16 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 52) + 16 * v14) + 2 * (_QWORD)v15);
        if (v16 != 20000)
        {
          v17 = v13 + *((unsigned __int16 *)this + 264);
          v18 = *((__int16 *)this + 265) + v16;
          v20 = v18 - v17;
          v19 = v18 - v17 < 0;
          if (v18 >= v17)
            v18 = v13 + *((unsigned __int16 *)this + 264);
          if (v19)
            v21 = -v20;
          else
            v21 = v20;
          if (v21 < *((_DWORD *)this + 110))
            v18 -= *(_DWORD *)(*((_QWORD *)this + 54) + 4 * v21);
          v13 = v18 & ~(v18 >> 31);
        }
      }
    }
    goto LABEL_43;
  }
  v13 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 52) + 16 * (v9 - v11)) + 2 * *v12);
  if (!*((_BYTE *)this + 72))
    goto LABEL_19;
  if (v10 < 0xFFFFF4)
  {
    v13 += *(unsigned __int16 *)(*((_QWORD *)this + 58) + 2 * v10);
    goto LABEL_19;
  }
  if ((_DWORD)v10 == 16777214)
  {
    v22 = *((_WORD *)this + 241);
  }
  else if ((_DWORD)v10 == 0xFFFFFF)
  {
    v22 = *((_WORD *)this + 240);
  }
  else
  {
    v22 = *((_WORD *)this + 242);
  }
  LOWORD(v13) = v22 + v13;
LABEL_43:
  if ((__int16)v13 != a3)
  {
    v23 = *((__int16 *)this + 266) + a3;
    v24 = (__int16)v13 + *((__int16 *)this + 267);
    v26 = v24 - v23;
    v25 = v24 - v23 < 0;
    if (v24 >= v23)
      v24 = *((__int16 *)this + 266) + a3;
    if (v25)
      v27 = -v26;
    else
      v27 = v26;
    if (v27 < *((_DWORD *)this + 110))
      v24 -= *(_DWORD *)(*((_QWORD *)this + 54) + 4 * v27);
    a3 = v24 & ~(v24 >> 31);
  }
  return (__int16)a3;
}

uint64_t **RecentBuffer::setContext(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  int *v5;
  uint64_t v6;
  int v7;

  if (*(_DWORD *)(a2 + 8))
  {
    v4 = result;
    v5 = (int *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = **(_DWORD **)a2;
    result = (uint64_t **)(*(uint64_t (**)(uint64_t *))(*result[2] + 112))(result[2]);
    if (!(_DWORD)result)
      goto LABEL_9;
    v6 = *v5;
    if (v6 <= 0xFFFFF3)
      *v5 = *(_DWORD *)(v4[1][32] + 4 * v6);
    result = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(v4 + 10), v5);
    if (*result)
    {
      v7 = *((_DWORD *)*result + 4);
LABEL_10:
      *v5 = v7;
      return result;
    }
    if (*v5 == 16777214 && *((_DWORD *)v4[4] + 28) == -1)
    {
LABEL_9:
      v7 = 0xFFFFFF;
      goto LABEL_10;
    }
  }
  return result;
}

